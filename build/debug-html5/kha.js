// Generated by Haxe 4.0.0-rc.3+7d7b45f
(function ($hx_exports, $global) { "use strict";
$hx_exports["kha"] = $hx_exports["kha"] || {};
$hx_exports["kha"]["input"] = $hx_exports["kha"]["input"] || {};
;$hx_exports["kha"]["_Color"] = $hx_exports["kha"]["_Color"] || {};
var $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
$hxClasses["EReg"] = EReg;
EReg.__name__ = "EReg";
EReg.prototype = {
	r: null
	,match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw new js__$Boot_HaxeError("EReg::matched");
		}
	}
	,matchedPos: function() {
		if(this.r.m == null) {
			throw new js__$Boot_HaxeError("No string matched");
		}
		return { pos : this.r.m.index, len : this.r.m[0].length};
	}
	,matchSub: function(s,pos,len) {
		if(len == null) {
			len = -1;
		}
		if(this.r.global) {
			this.r.lastIndex = pos;
			this.r.m = this.r.exec(len < 0 ? s : HxOverrides.substr(s,0,pos + len));
			var b = this.r.m != null;
			if(b) {
				this.r.s = s;
			}
			return b;
		} else {
			var b1 = this.match(len < 0 ? HxOverrides.substr(s,pos,null) : HxOverrides.substr(s,pos,len));
			if(b1) {
				this.r.s = s;
				this.r.m.index += pos;
			}
			return b1;
		}
	}
	,split: function(s) {
		var d = "#__delim__#";
		return s.replace(this.r,d).split(d);
	}
	,map: function(s,f) {
		var offset = 0;
		var buf_b = "";
		while(true) {
			if(offset >= s.length) {
				break;
			} else if(!this.matchSub(s,offset)) {
				buf_b += Std.string(HxOverrides.substr(s,offset,null));
				break;
			}
			var p = this.matchedPos();
			buf_b += Std.string(HxOverrides.substr(s,offset,p.pos - offset));
			buf_b += Std.string(f(this));
			if(p.len == 0) {
				buf_b += Std.string(HxOverrides.substr(s,p.pos,1));
				offset = p.pos + 1;
			} else {
				offset = p.pos + p.len;
			}
			if(!this.r.global) {
				break;
			}
		}
		if(!this.r.global && offset > 0 && offset < s.length) {
			buf_b += Std.string(HxOverrides.substr(s,offset,null));
		}
		return buf_b;
	}
	,__class__: EReg
};
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = "HxOverrides";
HxOverrides.strDate = function(s) {
	switch(s.length) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d["setTime"](0);
		d["setUTCHours"](k[0]);
		d["setUTCMinutes"](k[1]);
		d["setUTCSeconds"](k[2]);
		return d;
	case 10:
		var k1 = s.split("-");
		return new Date(k1[0],k1[1] - 1,k1[2],0,0,0);
	case 19:
		var k2 = s.split(" ");
		var y = k2[0].split("-");
		var t = k2[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw new js__$Boot_HaxeError("Invalid date format : " + s);
	}
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var Lambda = function() { };
$hxClasses["Lambda"] = Lambda;
Lambda.__name__ = "Lambda";
Lambda.array = function(it) {
	var a = [];
	var i = $getIterator(it);
	while(i.hasNext()) {
		var i1 = i.next();
		a.push(i1);
	}
	return a;
};
var openfl_events_IEventDispatcher = function() { };
$hxClasses["openfl.events.IEventDispatcher"] = openfl_events_IEventDispatcher;
openfl_events_IEventDispatcher.__name__ = "openfl.events.IEventDispatcher";
openfl_events_IEventDispatcher.prototype = {
	addEventListener: null
	,dispatchEvent: null
	,hasEventListener: null
	,removeEventListener: null
	,willTrigger: null
	,__class__: openfl_events_IEventDispatcher
};
var openfl_events_EventDispatcher = function(target) {
	if(target != null) {
		this.__targetDispatcher = target;
	}
};
$hxClasses["openfl.events.EventDispatcher"] = openfl_events_EventDispatcher;
openfl_events_EventDispatcher.__name__ = "openfl.events.EventDispatcher";
openfl_events_EventDispatcher.__interfaces__ = [openfl_events_IEventDispatcher];
openfl_events_EventDispatcher.prototype = {
	__eventMap: null
	,__iterators: null
	,__targetDispatcher: null
	,addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) {
			useWeakReference = false;
		}
		if(priority == null) {
			priority = 0;
		}
		if(useCapture == null) {
			useCapture = false;
		}
		if(listener == null) {
			return;
		}
		if(this.__eventMap == null) {
			this.__eventMap = new haxe_ds_StringMap();
			this.__iterators = new haxe_ds_StringMap();
		}
		var _this = this.__eventMap;
		if(!(__map_reserved[type] != null ? _this.existsReserved(type) : _this.h.hasOwnProperty(type))) {
			var list = [];
			list.push(new openfl_events__$EventDispatcher_Listener(listener,useCapture,priority));
			var iterator = new openfl_events__$EventDispatcher_DispatchIterator(list);
			var _this1 = this.__eventMap;
			if(__map_reserved[type] != null) {
				_this1.setReserved(type,list);
			} else {
				_this1.h[type] = list;
			}
			var _this2 = this.__iterators;
			var value = [iterator];
			if(__map_reserved[type] != null) {
				_this2.setReserved(type,value);
			} else {
				_this2.h[type] = value;
			}
		} else {
			var _this3 = this.__eventMap;
			var list1 = __map_reserved[type] != null ? _this3.getReserved(type) : _this3.h[type];
			var _g = 0;
			var _g1 = list1.length;
			while(_g < _g1) {
				var i = _g++;
				if(list1[i].match(listener,useCapture)) {
					return;
				}
			}
			var _this4 = this.__iterators;
			var iterators = __map_reserved[type] != null ? _this4.getReserved(type) : _this4.h[type];
			var _g2 = 0;
			while(_g2 < iterators.length) {
				var iterator1 = iterators[_g2];
				++_g2;
				if(iterator1.active) {
					iterator1.copy();
				}
			}
			this.__addListenerByPriority(list1,new openfl_events__$EventDispatcher_Listener(listener,useCapture,priority));
		}
	}
	,dispatchEvent: function(event) {
		if(this.__targetDispatcher != null) {
			event.target = this.__targetDispatcher;
		} else {
			event.target = this;
		}
		return this.__dispatchEvent(event);
	}
	,hasEventListener: function(type) {
		if(this.__eventMap == null) {
			return false;
		}
		var _this = this.__eventMap;
		if(__map_reserved[type] != null) {
			return _this.existsReserved(type);
		} else {
			return _this.h.hasOwnProperty(type);
		}
	}
	,removeEventListener: function(type,listener,useCapture) {
		if(useCapture == null) {
			useCapture = false;
		}
		if(this.__eventMap == null || listener == null) {
			return;
		}
		var _this = this.__eventMap;
		var list = __map_reserved[type] != null ? _this.getReserved(type) : _this.h[type];
		if(list == null) {
			return;
		}
		var _this1 = this.__iterators;
		var iterators = __map_reserved[type] != null ? _this1.getReserved(type) : _this1.h[type];
		var _g = 0;
		var _g1 = list.length;
		while(_g < _g1) {
			var i = _g++;
			if(list[i].match(listener,useCapture)) {
				var _g2 = 0;
				while(_g2 < iterators.length) {
					var iterator = iterators[_g2];
					++_g2;
					iterator.remove(list[i],i);
				}
				list.splice(i,1);
				break;
			}
		}
		if(list.length == 0) {
			this.__eventMap.remove(type);
			this.__iterators.remove(type);
		}
		var _this2 = this.__eventMap;
		if(!new haxe_ds__$StringMap_StringMapIterator(_this2,_this2.arrayKeys()).hasNext()) {
			this.__eventMap = null;
			this.__iterators = null;
		}
	}
	,toString: function() {
		var c = js_Boot.getClass(this);
		var full = c.__name__;
		var short = full.split(".").pop();
		return "[object " + short + "]";
	}
	,willTrigger: function(type) {
		return this.hasEventListener(type);
	}
	,__dispatchEvent: function(event) {
		if(this.__eventMap == null || event == null) {
			return true;
		}
		var type = event.type;
		var _this = this.__eventMap;
		var list = __map_reserved[type] != null ? _this.getReserved(type) : _this.h[type];
		if(list == null) {
			return true;
		}
		if(event.target == null) {
			if(this.__targetDispatcher != null) {
				event.target = this.__targetDispatcher;
			} else {
				event.target = this;
			}
		}
		event.currentTarget = this;
		var capture = event.eventPhase == 1;
		var index = 0;
		var _this1 = this.__iterators;
		var iterators = __map_reserved[type] != null ? _this1.getReserved(type) : _this1.h[type];
		var iterator = iterators[0];
		if(iterator.active) {
			iterator = new openfl_events__$EventDispatcher_DispatchIterator(list);
			iterators.push(iterator);
		}
		iterator.reset(list);
		var listener = iterator;
		while(listener.hasNext()) {
			var listener1 = listener.next();
			if(listener1 == null) {
				continue;
			}
			if(listener1.useCapture == capture) {
				listener1.callback(event);
				if(event.__isCanceledNow) {
					break;
				}
			}
		}
		if(iterator != iterators[0]) {
			HxOverrides.remove(iterators,iterator);
		}
		return true;
	}
	,__removeAllListeners: function() {
		this.__eventMap = null;
		this.__iterators = null;
	}
	,__addListenerByPriority: function(list,listener) {
		var numElements = list.length;
		var addAtPosition = numElements;
		var _g = 0;
		var _g1 = numElements;
		while(_g < _g1) {
			var i = _g++;
			if(list[i].priority < listener.priority) {
				addAtPosition = i;
				break;
			}
		}
		list.splice(addAtPosition,0,listener);
	}
	,__class__: openfl_events_EventDispatcher
};
var openfl_display_IBitmapDrawable = function() { };
$hxClasses["openfl.display.IBitmapDrawable"] = openfl_display_IBitmapDrawable;
openfl_display_IBitmapDrawable.__name__ = "openfl.display.IBitmapDrawable";
openfl_display_IBitmapDrawable.prototype = {
	__alpha: null
	,__visible: null
	,__blendMode: null
	,__isMask: null
	,__renderable: null
	,__transform: null
	,__worldAlpha: null
	,__worldColorTransform: null
	,__worldTransform: null
	,__getBounds: null
	,__renderCanvas: null
	,__renderCanvasMask: null
	,__updateChildren: null
	,__overrideTransforms: null
	,__class__: openfl_display_IBitmapDrawable
};
var openfl__$Vector_Vector_$Impl_$ = {};
$hxClasses["openfl._Vector.Vector_Impl_"] = openfl__$Vector_Vector_$Impl_$;
openfl__$Vector_Vector_$Impl_$.__name__ = "openfl._Vector.Vector_Impl_";
openfl__$Vector_Vector_$Impl_$.__properties__ = {set_length:"set_length",get_length:"get_length",set_fixed:"set_fixed",get_fixed:"get_fixed"};
openfl__$Vector_Vector_$Impl_$.ofArray_UInt = function(a) {
	var vector = openfl__$Vector_Vector_$Impl_$.toIntVector(null);
	var _g = 0;
	var _g1 = a.length;
	while(_g < _g1) {
		var i = _g++;
		vector.data.set(i,a[i]);
	}
	return vector;
};
openfl__$Vector_Vector_$Impl_$.ofArray_starling_display_QuadBatch = function(a) {
	var vector = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	var _g = 0;
	var _g1 = a.length;
	while(_g < _g1) {
		var i = _g++;
		vector.data.set(i,a[i]);
	}
	return vector;
};
openfl__$Vector_Vector_$Impl_$.ofArray_starling_events_EventDispatcher = function(a) {
	var vector = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	var _g = 0;
	var _g1 = a.length;
	while(_g < _g1) {
		var i = _g++;
		vector.data.set(i,a[i]);
	}
	return vector;
};
openfl__$Vector_Vector_$Impl_$.ofArray_Float = function(a) {
	var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	var _g = 0;
	var _g1 = a.length;
	while(_g < _g1) {
		var i = _g++;
		vector.data.set(i,a[i]);
	}
	return vector;
};
openfl__$Vector_Vector_$Impl_$.concat = function(this1,a) {
	var data = a != null ? a.data : null;
	return new openfl__$Vector_AbstractVector(this1.data.concat(data));
};
openfl__$Vector_Vector_$Impl_$.filter = function(this1,callback) {
	return new openfl__$Vector_AbstractVector(this1.data.filter(callback));
};
openfl__$Vector_Vector_$Impl_$.copy = function(this1) {
	return new openfl__$Vector_AbstractVector(this1.data.copy());
};
openfl__$Vector_Vector_$Impl_$.get = function(this1,index) {
	return this1.data.get(index);
};
openfl__$Vector_Vector_$Impl_$.indexOf = function(this1,x,from) {
	if(from == null) {
		from = 0;
	}
	return this1.data.indexOf(x,from);
};
openfl__$Vector_Vector_$Impl_$.insertAt = function(this1,index,element) {
	this1.data.insertAt(index,element);
};
openfl__$Vector_Vector_$Impl_$.iterator = function(this1) {
	return this1.data.iterator();
};
openfl__$Vector_Vector_$Impl_$.join = function(this1,sep) {
	if(sep == null) {
		sep = ",";
	}
	return this1.data.join(sep);
};
openfl__$Vector_Vector_$Impl_$.lastIndexOf = function(this1,x,from) {
	if(from == null) {
		from = 0;
	}
	return this1.data.lastIndexOf(x,from);
};
openfl__$Vector_Vector_$Impl_$.pop = function(this1) {
	return this1.data.pop();
};
openfl__$Vector_Vector_$Impl_$.push = function(this1,x) {
	return this1.data.push(x);
};
openfl__$Vector_Vector_$Impl_$.removeAt = function(this1,index) {
	return this1.data.removeAt(index);
};
openfl__$Vector_Vector_$Impl_$.reverse = function(this1) {
	return new openfl__$Vector_AbstractVector(this1.data.reverse());
};
openfl__$Vector_Vector_$Impl_$.set = function(this1,index,value) {
	return this1.data.set(index,value);
};
openfl__$Vector_Vector_$Impl_$.shift = function(this1) {
	return this1.data.shift();
};
openfl__$Vector_Vector_$Impl_$.slice = function(this1,pos,end) {
	return new openfl__$Vector_AbstractVector(this1.data.slice(pos,end));
};
openfl__$Vector_Vector_$Impl_$.sort = function(this1,f) {
	this1.data.sort(f);
};
openfl__$Vector_Vector_$Impl_$.splice = function(this1,pos,len) {
	return new openfl__$Vector_AbstractVector(this1.data.splice(pos,len));
};
openfl__$Vector_Vector_$Impl_$.toString = function(this1) {
	if(this1 != null && this1.data != null) {
		return this1.data.toString();
	} else {
		return null;
	}
};
openfl__$Vector_Vector_$Impl_$.unshift = function(this1,x) {
	this1.data.unshift(x);
};
openfl__$Vector_Vector_$Impl_$.isVector = function(obj) {
	return ((obj) instanceof openfl__$Vector_AbstractVector);
};
openfl__$Vector_Vector_$Impl_$.convert = function(v) {
	return v;
};
openfl__$Vector_Vector_$Impl_$.toBoolVector = function(t,length,fixed,array) {
	return new openfl__$Vector_AbstractVector(new openfl__$Vector_BoolVector(length,fixed),array);
};
openfl__$Vector_Vector_$Impl_$.toIntVector = function(t,length,fixed,array) {
	return new openfl__$Vector_AbstractVector(new openfl__$Vector_IntVector(length,fixed),array);
};
openfl__$Vector_Vector_$Impl_$.toFloatVector = function(t,length,fixed,array) {
	return new openfl__$Vector_AbstractVector(new openfl__$Vector_FloatVector(length,fixed),array);
};
openfl__$Vector_Vector_$Impl_$.toFunctionVector = function(t,length,fixed,array) {
	return new openfl__$Vector_AbstractVector(new openfl__$Vector_FunctionVector(length,fixed),array);
};
openfl__$Vector_Vector_$Impl_$.toObjectVector = function(t,length,fixed,array) {
	return new openfl__$Vector_AbstractVector(new openfl__$Vector_ObjectVector(length,fixed),array);
};
openfl__$Vector_Vector_$Impl_$.get_fixed = function(this1) {
	return this1.data.fixed;
};
openfl__$Vector_Vector_$Impl_$.set_fixed = function(this1,value) {
	return this1.data.fixed = value;
};
openfl__$Vector_Vector_$Impl_$.get_length = function(this1) {
	return this1.data.get_length();
};
openfl__$Vector_Vector_$Impl_$.set_length = function(this1,value) {
	return this1.data.set_length(value);
};
var openfl__$internal_utils_ObjectPool = function(create,clean) {
	this.create = create;
	this.clean = clean;
	this.inactiveObjects = 0;
	this.inactiveObjectList = new haxe_ds_List();
};
$hxClasses["openfl._internal.utils.ObjectPool"] = openfl__$internal_utils_ObjectPool;
openfl__$internal_utils_ObjectPool.__name__ = "openfl._internal.utils.ObjectPool";
openfl__$internal_utils_ObjectPool.prototype = {
	create: null
	,clean: null
	,inactiveObjects: null
	,inactiveObject0: null
	,inactiveObject1: null
	,inactiveObjectList: null
	,get: function() {
		if(this.inactiveObjects > 0) {
			var object;
			if(this.inactiveObject0 != null) {
				object = this.inactiveObject0;
				this.inactiveObject0 = null;
			} else if(this.inactiveObject1 != null) {
				object = this.inactiveObject1;
				this.inactiveObject1 = null;
			} else {
				object = this.inactiveObjectList.pop();
				if(this.inactiveObjectList.length > 0) {
					this.inactiveObject0 = this.inactiveObjectList.pop();
				}
				if(this.inactiveObjectList.length > 0) {
					this.inactiveObject1 = this.inactiveObjectList.pop();
				}
			}
			this.inactiveObjects--;
			return object;
		} else {
			return this.create();
		}
	}
	,release: function(object) {
		if(this.clean != null) {
			this.clean(object);
		}
		if(this.inactiveObject0 == null) {
			this.inactiveObject0 = object;
		} else if(this.inactiveObject1 == null) {
			this.inactiveObject1 = object;
		} else {
			this.inactiveObjectList.add(object);
		}
		this.inactiveObjects++;
	}
	,addInactive: function(object) {
		if(this.inactiveObject0 == null) {
			this.inactiveObject0 = object;
		} else if(this.inactiveObject1 == null) {
			this.inactiveObject1 = object;
		} else {
			this.inactiveObjectList.add(object);
		}
		this.inactiveObjects++;
	}
	,getInactive: function() {
		var object;
		if(this.inactiveObject0 != null) {
			object = this.inactiveObject0;
			this.inactiveObject0 = null;
		} else if(this.inactiveObject1 != null) {
			object = this.inactiveObject1;
			this.inactiveObject1 = null;
		} else {
			object = this.inactiveObjectList.pop();
			if(this.inactiveObjectList.length > 0) {
				this.inactiveObject0 = this.inactiveObjectList.pop();
			}
			if(this.inactiveObjectList.length > 0) {
				this.inactiveObject1 = this.inactiveObjectList.pop();
			}
		}
		this.inactiveObjects--;
		return object;
	}
	,__class__: openfl__$internal_utils_ObjectPool
};
var haxe_ds_List = function() {
	this.length = 0;
};
$hxClasses["haxe.ds.List"] = haxe_ds_List;
haxe_ds_List.__name__ = "haxe.ds.List";
haxe_ds_List.prototype = {
	h: null
	,q: null
	,length: null
	,add: function(item) {
		var x = new haxe_ds__$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,pop: function() {
		if(this.h == null) {
			return null;
		}
		var x = this.h.item;
		this.h = this.h.next;
		if(this.h == null) {
			this.q = null;
		}
		this.length--;
		return x;
	}
	,__class__: haxe_ds_List
};
var openfl_display_DisplayObject = function() {
	openfl_events_EventDispatcher.call(this);
	if(openfl_display_DisplayObject.__initStage != null) {
		this.stage = openfl_display_DisplayObject.__initStage;
		openfl_display_DisplayObject.__initStage = null;
	}
	this.__alpha = 1;
	this.__blendMode = 10;
	this.__cacheAsBitmap = false;
	this.__transform = new openfl_geom_Matrix();
	this.__visible = true;
	this.__rotation = 0;
	this.__rotationSine = 0;
	this.__rotationCosine = 1;
	this.__scaleX = 1;
	this.__scaleY = 1;
	this.__worldAlpha = 1;
	this.__worldBlendMode = 10;
	this.__worldTransform = new openfl_geom_Matrix();
	this.__worldColorTransform = new openfl_geom_ColorTransform();
	this.__renderTransform = new openfl_geom_Matrix();
	this.set_name("instance" + ++openfl_display_DisplayObject.__instanceCount);
};
$hxClasses["openfl.display.DisplayObject"] = openfl_display_DisplayObject;
openfl_display_DisplayObject.__name__ = "openfl.display.DisplayObject";
openfl_display_DisplayObject.__interfaces__ = [openfl_display_IBitmapDrawable];
openfl_display_DisplayObject.__calculateAbsoluteTransform = function(local,parentTransform,target) {
	target.a = local.a * parentTransform.a + local.b * parentTransform.c;
	target.b = local.a * parentTransform.b + local.b * parentTransform.d;
	target.c = local.c * parentTransform.a + local.d * parentTransform.c;
	target.d = local.c * parentTransform.b + local.d * parentTransform.d;
	target.tx = local.tx * parentTransform.a + local.ty * parentTransform.c + parentTransform.tx;
	target.ty = local.tx * parentTransform.b + local.ty * parentTransform.d + parentTransform.ty;
};
openfl_display_DisplayObject.__normalizeAngle = function(value) {
	var normalized = value % 360;
	if(normalized > 180) {
		normalized -= 360;
	} else if(normalized < -180) {
		normalized += 360;
	}
	return normalized;
};
openfl_display_DisplayObject.__super__ = openfl_events_EventDispatcher;
openfl_display_DisplayObject.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	opaqueBackground: null
	,parent: null
	,scale9Grid: null
	,stage: null
	,__alpha: null
	,__blendMode: null
	,__cacheAsBitmap: null
	,__cacheAsBitmapMatrix: null
	,__cacheBitmap: null
	,__cacheBitmapBackground: null
	,__cacheBitmapColorTransform: null
	,__cacheBitmapData: null
	,__cacheBitmapRender: null
	,__children: null
	,__filters: null
	,__graphics: null
	,__interactive: null
	,__isMask: null
	,__loaderInfo: null
	,__mask: null
	,__maskTarget: null
	,__name: null
	,__objectTransform: null
	,__renderable: null
	,__renderDirty: null
	,__renderParent: null
	,__renderTransform: null
	,__rotation: null
	,__rotationCosine: null
	,__rotationSine: null
	,__scaleX: null
	,__scaleY: null
	,__scrollRect: null
	,__transform: null
	,__transformDirty: null
	,__updateDirty: null
	,__updateTraverse: null
	,__visible: null
	,__worldAlpha: null
	,__worldBlendMode: null
	,__worldColorTransform: null
	,__worldTransform: null
	,__worldTransformInvalid: null
	,__pixelSnapping: null
	,addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) {
			useWeakReference = false;
		}
		if(priority == null) {
			priority = 0;
		}
		if(useCapture == null) {
			useCapture = false;
		}
		switch(type) {
		case "activate":case "deactivate":case "enterFrame":case "exitFrame":case "frameConstructed":case "render":
			var _this = openfl_display_DisplayObject.__broadcastEvents;
			if(!(__map_reserved[type] != null ? _this.existsReserved(type) : _this.h.hasOwnProperty(type))) {
				var _this1 = openfl_display_DisplayObject.__broadcastEvents;
				var value = [];
				if(__map_reserved[type] != null) {
					_this1.setReserved(type,value);
				} else {
					_this1.h[type] = value;
				}
			}
			var _this2 = openfl_display_DisplayObject.__broadcastEvents;
			var dispatchers = __map_reserved[type] != null ? _this2.getReserved(type) : _this2.h[type];
			if(dispatchers.indexOf(this) == -1) {
				dispatchers.push(this);
			}
			break;
		default:
		}
		openfl_events_EventDispatcher.prototype.addEventListener.call(this,type,listener,useCapture,priority,useWeakReference);
	}
	,dispatchEvent: function(event) {
		if(((event) instanceof openfl_events_MouseEvent)) {
			var mouseEvent = event;
			var _this = this.__getRenderTransform();
			mouseEvent.stageX = mouseEvent.localX * _this.a + mouseEvent.localY * _this.c + _this.tx;
			var _this1 = this.__getRenderTransform();
			mouseEvent.stageY = mouseEvent.localX * _this1.b + mouseEvent.localY * _this1.d + _this1.ty;
		} else if(((event) instanceof openfl_events_TouchEvent)) {
			var touchEvent = event;
			var _this2 = this.__getRenderTransform();
			touchEvent.stageX = touchEvent.localX * _this2.a + touchEvent.localY * _this2.c + _this2.tx;
			var _this3 = this.__getRenderTransform();
			touchEvent.stageY = touchEvent.localX * _this3.b + touchEvent.localY * _this3.d + _this3.ty;
		}
		return this.__dispatchWithCapture(event);
	}
	,getBounds: function(targetCoordinateSpace) {
		var matrix = openfl_geom_Matrix.__pool.get();
		if(targetCoordinateSpace != null && targetCoordinateSpace != this) {
			matrix.copyFrom(this.__getWorldTransform());
			var targetMatrix = openfl_geom_Matrix.__pool.get();
			targetMatrix.copyFrom(targetCoordinateSpace.__getWorldTransform());
			targetMatrix.invert();
			matrix.concat(targetMatrix);
			openfl_geom_Matrix.__pool.release(targetMatrix);
		} else {
			matrix.identity();
		}
		var bounds = new openfl_geom_Rectangle();
		this.__getBounds(bounds,matrix);
		openfl_geom_Matrix.__pool.release(matrix);
		return bounds;
	}
	,getRect: function(targetCoordinateSpace) {
		return this.getBounds(targetCoordinateSpace);
	}
	,globalToLocal: function(pos) {
		return this.__globalToLocal(pos,new openfl_geom_Point());
	}
	,hitTestObject: function(obj) {
		if(obj != null && obj.parent != null && this.parent != null) {
			var currentBounds = this.getBounds(this);
			var targetBounds = obj.getBounds(this);
			return currentBounds.intersects(targetBounds);
		}
		return false;
	}
	,hitTestPoint: function(x,y,shapeFlag) {
		if(shapeFlag == null) {
			shapeFlag = false;
		}
		if(this.stage != null) {
			return this.__hitTest(x,y,shapeFlag,null,true,this);
		} else {
			return false;
		}
	}
	,localToGlobal: function(point) {
		return this.__getRenderTransform().transformPoint(point);
	}
	,removeEventListener: function(type,listener,useCapture) {
		if(useCapture == null) {
			useCapture = false;
		}
		openfl_events_EventDispatcher.prototype.removeEventListener.call(this,type,listener,useCapture);
		switch(type) {
		case "activate":case "deactivate":case "enterFrame":case "exitFrame":case "frameConstructed":case "render":
			if(!this.hasEventListener(type)) {
				var _this = openfl_display_DisplayObject.__broadcastEvents;
				if(__map_reserved[type] != null ? _this.existsReserved(type) : _this.h.hasOwnProperty(type)) {
					var _this1 = openfl_display_DisplayObject.__broadcastEvents;
					HxOverrides.remove(__map_reserved[type] != null ? _this1.getReserved(type) : _this1.h[type],this);
				}
			}
			break;
		default:
		}
	}
	,__cleanup: function() {
		if(this.__graphics != null) {
			this.__graphics.__cleanup();
		}
		if(this.__cacheBitmap != null) {
			this.__cacheBitmap.__cleanup();
			this.__cacheBitmap = null;
		}
		if(this.__cacheBitmapData != null) {
			this.__cacheBitmapData.dispose();
			this.__cacheBitmapData = null;
		}
	}
	,__dispatch: function(event) {
		if(this.__eventMap != null && this.hasEventListener(event.type)) {
			var result = openfl_events_EventDispatcher.prototype.__dispatchEvent.call(this,event);
			if(event.__isCanceled) {
				return true;
			}
			return result;
		}
		return true;
	}
	,__dispatchChildren: function(event) {
	}
	,__dispatchEvent: function(event) {
		var tmpParent = null;
		if(event.bubbles) {
			tmpParent = this.parent;
		}
		var result = openfl_events_EventDispatcher.prototype.__dispatchEvent.call(this,event);
		if(event.__isCanceled) {
			return true;
		}
		if(tmpParent != null && tmpParent != this) {
			event.eventPhase = 3;
			if(event.target == null) {
				event.target = this;
			}
			tmpParent.__dispatchEvent(event);
		}
		return result;
	}
	,__dispatchWithCapture: function(event) {
		if(event.target == null) {
			event.target = this;
		}
		if(this.parent != null) {
			event.eventPhase = 1;
			if(this.parent == this.stage) {
				this.parent.__dispatch(event);
				if(event.__isCanceled) {
					return true;
				}
			} else {
				var stack = openfl_display_DisplayObject.__tempStack.get();
				var parent = this.parent;
				var i = 0;
				while(parent != null) {
					stack.data.set(i,parent);
					parent = parent.parent;
					++i;
				}
				var canceled = false;
				var _g = 0;
				var _g1 = i;
				while(_g < _g1) {
					var j = _g++;
					stack.data.get(i - j - 1).__dispatch(event);
					if(event.__isCanceled) {
						canceled = true;
						break;
					}
				}
				openfl_display_DisplayObject.__tempStack.release(stack);
				if(canceled) {
					return true;
				}
			}
		}
		event.eventPhase = 2;
		return this.__dispatchEvent(event);
	}
	,__enterFrame: function(deltaTime) {
	}
	,__forceRenderDirty: function() {
		this.__renderDirty = true;
		if(this.__graphics != null) {
			this.__graphics.set___dirty(true);
		}
		if(this.__cacheBitmap != null) {
			this.__cacheBitmap.__forceRenderDirty();
		}
	}
	,__getBounds: function(rect,matrix) {
		if(this.__graphics != null) {
			this.__graphics.__getBounds(rect,matrix);
		}
	}
	,__getCursor: function() {
		return null;
	}
	,__getFilterBounds: function(rect,matrix) {
		this.__getBounds(rect,matrix);
		if(this.__filters != null && this.__filters.length > 0) {
			var extension = openfl_geom_Rectangle.__pool.get();
			var _g = 0;
			var _g1 = this.__filters;
			while(_g < _g1.length) {
				var filter = _g1[_g];
				++_g;
				extension.__expand(-filter.__leftExtension,-filter.__topExtension,filter.__leftExtension + filter.__rightExtension,filter.__topExtension + filter.__bottomExtension);
			}
			rect.width += extension.width;
			rect.height += extension.height;
			rect.x += extension.x;
			rect.y += extension.y;
			openfl_geom_Rectangle.__pool.release(extension);
		}
	}
	,__getInteractive: function(stack) {
		return false;
	}
	,__getLocalBounds: function(rect) {
		this.__getBounds(rect,this.__transform);
		rect.x -= this.__transform.tx;
		rect.y -= this.__transform.ty;
	}
	,__getRenderBounds: function(rect,matrix) {
		if(this.__scrollRect == null) {
			this.__getBounds(rect,matrix);
		} else {
			var r = openfl_geom_Rectangle.__pool.get();
			r.copyFrom(this.__scrollRect);
			r.__transform(r,matrix);
			rect.__expand(matrix.tx,matrix.ty,r.width,r.height);
			openfl_geom_Rectangle.__pool.release(r);
		}
	}
	,__getRenderTransform: function() {
		this.__getWorldTransform();
		return this.__renderTransform;
	}
	,__getWorldTransform: function() {
		var transformDirty = this.__transformDirty || this.__worldTransformInvalid;
		if(transformDirty) {
			var list = [];
			var current = this;
			if(this.parent == null) {
				this.__update(true,false);
			} else {
				while(current != this.stage) {
					list.push(current);
					current = current.parent;
					if(current == null) {
						break;
					}
				}
			}
			var i = list.length;
			while(--i >= 0) {
				current = list[i];
				current.__update(true,false);
			}
		}
		return this.__worldTransform;
	}
	,__globalToLocal: function(global,local) {
		this.__getRenderTransform();
		if(global == local) {
			var _this = this.__renderTransform;
			var norm = _this.a * _this.d - _this.b * _this.c;
			if(norm == 0) {
				global.x = -_this.tx;
				global.y = -_this.ty;
			} else {
				var px = 1.0 / norm * (_this.c * (_this.ty - global.y) + _this.d * (global.x - _this.tx));
				global.y = 1.0 / norm * (_this.a * (global.y - _this.ty) + _this.b * (_this.tx - global.x));
				global.x = px;
			}
		} else {
			var _this1 = this.__renderTransform;
			var norm1 = _this1.a * _this1.d - _this1.b * _this1.c;
			local.x = norm1 == 0 ? -_this1.tx : 1.0 / norm1 * (_this1.c * (_this1.ty - global.y) + _this1.d * (global.x - _this1.tx));
			var _this2 = this.__renderTransform;
			var norm2 = _this2.a * _this2.d - _this2.b * _this2.c;
			local.y = norm2 == 0 ? -_this2.ty : 1.0 / norm2 * (_this2.a * (global.y - _this2.ty) + _this2.b * (_this2.tx - global.x));
		}
		return local;
	}
	,__hasFilters: function() {
		if(this.__filters != null) {
			return this.__filters.length > 0;
		} else {
			return false;
		}
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject,hitTestWhenMouseDisabled) {
		if(hitTestWhenMouseDisabled == null) {
			hitTestWhenMouseDisabled = false;
		}
		if(this.__graphics != null) {
			if(!hitObject.get_visible() || this.__isMask) {
				return false;
			}
			if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
				return false;
			}
			if(this.__graphics.__hitTest(x,y,shapeFlag,this.__getRenderTransform())) {
				if(stack != null && !interactiveOnly && !hitTestWhenMouseDisabled) {
					stack.push(hitObject);
				}
				return true;
			}
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		if(this.__graphics != null) {
			if(this.__graphics.__hitTest(x,y,true,this.__getRenderTransform())) {
				return true;
			}
		}
		return false;
	}
	,__mouseThroughAllowed: function() {
		return false;
	}
	,__readGraphicsData: function(graphicsData,recurse) {
		if(this.__graphics != null) {
			this.__graphics.__readGraphicsData(graphicsData);
		}
	}
	,__renderCanvas: function(renderSession) {
		if(this.get_mask() == null || this.get_mask().get_width() > 0 && this.get_mask().get_height() > 0) {
			this.__updateCacheBitmap(!this.__worldColorTransform.__isDefault(),renderSession.pixelRatio,renderSession.allowSmoothing);
			if(this.__cacheBitmap != null && !this.__cacheBitmapRender) {
				openfl__$internal_renderer_canvas_CanvasBitmap.render(this.__cacheBitmap,renderSession);
			} else {
				openfl__$internal_renderer_canvas_CanvasDisplayObject.render(this,renderSession);
			}
		}
	}
	,__renderCanvasMask: function(renderSession) {
		if(this.__graphics != null) {
			openfl__$internal_renderer_canvas_CanvasGraphics.renderMask(this.__graphics,renderSession.context);
		}
	}
	,__renderGL: function(renderSession) {
		this.__updateCacheBitmap(false,renderSession.pixelRatio,renderSession.allowSmoothing);
		if(this.__cacheBitmap != null && !this.__cacheBitmapRender) {
			this.__cacheBitmap.__renderBatched(renderSession);
		} else {
			openfl__$internal_renderer_opengl_GLDisplayObject.render(this,renderSession);
		}
	}
	,__renderGLMask: function(renderSession) {
		this.__updateCacheBitmap(false,renderSession.pixelRatio,renderSession.allowSmoothing);
		if(this.__cacheBitmap != null && !this.__cacheBitmapRender) {
			this.__cacheBitmap.__renderAsMask(renderSession);
		} else {
			openfl__$internal_renderer_opengl_GLDisplayObject.renderMask(this,renderSession);
		}
	}
	,__setParentRenderDirty: function() {
		var renderParent = this.__renderParent != null ? this.__renderParent : this.parent;
		if(renderParent != null && !renderParent.__renderDirty) {
			renderParent.__renderDirty = true;
			renderParent.__setParentRenderDirty();
		}
	}
	,__setRenderDirty: function() {
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
		if(!this.__updateDirty) {
			this.__updateDirty = true;
			this.__setParentUpdateTraverse();
		}
	}
	,__setStageReference: function(stage) {
		this.stage = stage;
	}
	,__setTransformDirty: function() {
		if(!this.__transformDirty) {
			this.__transformDirty = true;
			this.__setWorldTransformInvalid();
			this.__setParentRenderDirty();
		}
		if(!this.__updateDirty) {
			this.__updateDirty = true;
			this.__setParentUpdateTraverse();
		}
	}
	,__setUpdateDirty: function() {
		if(!this.__updateDirty) {
			this.__updateDirty = true;
			this.__setParentUpdateTraverse();
		}
	}
	,__setParentUpdateTraverse: function() {
		var renderParent = this.__renderParent != null ? this.__renderParent : this.parent;
		if(renderParent != null && !renderParent.__updateTraverse) {
			renderParent.__updateTraverse = true;
			renderParent.__setParentUpdateTraverse();
		}
	}
	,__setWorldTransformInvalid: function() {
		this.__worldTransformInvalid = true;
	}
	,__stopAllMovieClips: function() {
	}
	,__traverse: function() {
		if(this.__updateDirty) {
			this.__update(false,true,true);
		}
	}
	,__update: function(transformOnly,updateChildren,resetUpdateDirty) {
		if(resetUpdateDirty == null) {
			resetUpdateDirty = false;
		}
		if(resetUpdateDirty) {
			this.__updateDirty = false;
			this.__updateTraverse = false;
		}
		var renderParent = this.__renderParent != null ? this.__renderParent : this.parent;
		if(this.__isMask && renderParent == null) {
			renderParent = this.__maskTarget;
		}
		this.__renderable = this.get_visible() && this.__scaleX != 0 && this.__scaleY != 0 && !this.__isMask && (renderParent == null || !renderParent.__isMask);
		this.__updateTransforms();
		this.__transformDirty = false;
		this.__worldTransformInvalid = false;
		if(!transformOnly) {
			if(!this.__worldColorTransform.__equals(this.get_transform().get_colorTransform())) {
				this.__worldColorTransform = this.get_transform().get_colorTransform().__clone();
			}
			if(renderParent != null) {
				this.__worldAlpha = this.get_alpha() * renderParent.__worldAlpha;
				this.__worldColorTransform.__combine(renderParent.__worldColorTransform);
				if(this.__blendMode == null || this.__blendMode == 10) {
					this.__worldBlendMode = renderParent.__blendMode;
				} else {
					this.__worldBlendMode = this.__blendMode;
				}
			} else {
				this.__worldAlpha = this.get_alpha();
			}
		}
		if(updateChildren && this.get_mask() != null) {
			this.get_mask().__update(transformOnly,true,resetUpdateDirty);
		}
	}
	,__updateCacheBitmap: function(force,pixelRatio,allowSmoothing) {
		if(this.__cacheBitmapRender) {
			return false;
		}
		if(force || this.get_cacheAsBitmap()) {
			var rect = null;
			var needRender = this.__cacheBitmap == null || this.__cacheBitmapNeedsRender();
			var updateTransform = needRender || !this.__cacheBitmap.__renderTransform.equals(this.__renderTransform);
			var hasFilters = this.__filters != null && this.__filters.length > 0;
			if(hasFilters && !needRender) {
				var _g = 0;
				var _g1 = this.__filters;
				while(_g < _g1.length) {
					var filter = _g1[_g];
					++_g;
					if(filter.__renderDirty) {
						needRender = true;
						break;
					}
				}
			}
			var bitmapWidth = 0;
			var bitmapHeight = 0;
			if(updateTransform || needRender) {
				rect = openfl_geom_Rectangle.__pool.get();
				this.__getFilterBounds(rect,this.__renderTransform);
				bitmapWidth = Math.ceil(rect.width * pixelRatio);
				bitmapHeight = Math.ceil(rect.height * pixelRatio);
				if(!needRender && this.__cacheBitmap != null && (bitmapWidth != this.__cacheBitmap.get_width() || bitmapHeight != this.__cacheBitmap.get_height())) {
					needRender = true;
				}
			}
			if(needRender) {
				this.__cacheBitmapBackground = this.opaqueBackground;
				var color = this.opaqueBackground != null ? -16777216 | this.opaqueBackground : 0;
				if(rect.width >= 0.5 && rect.height >= 0.5) {
					if(this.__cacheBitmap == null || bitmapWidth != this.__cacheBitmap.get_width() || bitmapHeight != this.__cacheBitmap.get_height()) {
						this.__cacheBitmapData = new openfl_display_BitmapData(bitmapWidth,bitmapHeight,true,color);
						this.__cacheBitmapData.__pixelRatio = pixelRatio;
						if(this.__cacheBitmap == null) {
							this.__cacheBitmap = new openfl_display_Bitmap();
						}
						this.__cacheBitmap.__bitmapData = this.__cacheBitmapData;
					} else {
						this.__cacheBitmapData.fillRect(this.__cacheBitmapData.rect,color);
					}
				} else {
					this.__cacheBitmap = null;
					this.__cacheBitmapData = null;
					return true;
				}
			}
			if(updateTransform || needRender) {
				this.__cacheBitmap.__worldTransform.copyFrom(this.__worldTransform);
				this.__cacheBitmap.__renderTransform.identity();
				this.__cacheBitmap.__renderTransform.tx = rect.x;
				this.__cacheBitmap.__renderTransform.ty = rect.y;
				this.__cacheBitmap.__batchQuadDirty = true;
			}
			this.__cacheBitmap.smoothing = false;
			this.__cacheBitmap.__renderable = this.__renderable;
			this.__cacheBitmap.__worldAlpha = this.__worldAlpha;
			this.__cacheBitmap.__worldBlendMode = this.__worldBlendMode;
			this.__cacheBitmap.__scrollRect = this.__scrollRect;
			this.__cacheBitmap.set_mask(this.__mask);
			if(needRender) {
				this.__cacheBitmapRender = true;
				var matrix = openfl_geom_Matrix.__pool.get();
				matrix.copyFrom(this.__renderTransform);
				matrix.tx -= Math.round(rect.x);
				matrix.ty -= Math.round(rect.y);
				this.__cacheBitmapData.__draw(this,matrix,allowSmoothing,null,true,null);
				openfl_geom_Matrix.__pool.release(matrix);
				if(hasFilters) {
					var needSecondBitmapData = false;
					var needCopyOfOriginal = false;
					var _g2 = 0;
					var _g11 = this.__filters;
					while(_g2 < _g11.length) {
						var filter1 = _g11[_g2];
						++_g2;
						if(filter1.__needSecondBitmapData) {
							needSecondBitmapData = true;
						}
						if(filter1.__preserveObject) {
							needCopyOfOriginal = true;
						}
					}
					var bitmapData = this.__cacheBitmapData;
					var bitmapData2 = null;
					var bitmapData3 = null;
					if(needSecondBitmapData) {
						bitmapData2 = new openfl_display_BitmapData(bitmapData.width,bitmapData.height,true,0);
						bitmapData2.__pixelRatio = pixelRatio;
					} else {
						bitmapData2 = bitmapData;
					}
					if(needCopyOfOriginal) {
						bitmapData3 = new openfl_display_BitmapData(bitmapData.width,bitmapData.height,true,0);
						bitmapData3.__pixelRatio = pixelRatio;
					}
					var sourceRect = bitmapData.rect;
					var destPoint = new openfl_geom_Point();
					var cacheBitmap;
					var lastBitmap;
					var _g21 = 0;
					var _g3 = this.__filters;
					while(_g21 < _g3.length) {
						var filter2 = _g3[_g21];
						++_g21;
						if(filter2.__preserveObject) {
							bitmapData3.copyPixels(bitmapData,bitmapData.rect,destPoint);
						}
						lastBitmap = filter2.__applyFilter(bitmapData2,bitmapData,sourceRect,destPoint);
						if(filter2.__preserveObject) {
							lastBitmap.draw(bitmapData3,null,this.get_transform().get_colorTransform());
						}
						filter2.__renderDirty = false;
						if(needSecondBitmapData && lastBitmap == bitmapData2) {
							cacheBitmap = bitmapData;
							bitmapData = bitmapData2;
							bitmapData2 = cacheBitmap;
						}
					}
					this.__cacheBitmapData = bitmapData;
					this.__cacheBitmap.set_bitmapData(bitmapData);
				}
				this.__cacheBitmapRender = false;
				if(this.__cacheBitmapColorTransform == null) {
					this.__cacheBitmapColorTransform = new openfl_geom_ColorTransform();
				}
				this.__cacheBitmapColorTransform.__copyFrom(this.__worldColorTransform);
				if(!this.__cacheBitmapColorTransform.__isDefault()) {
					this.__cacheBitmapData.colorTransform(this.__cacheBitmapData.rect,this.__cacheBitmapColorTransform);
				}
			}
			if(updateTransform || needRender) {
				openfl_geom_Rectangle.__pool.release(rect);
			}
			return updateTransform;
		} else if(this.__cacheBitmap != null) {
			this.__cacheBitmap = null;
			this.__cacheBitmapData = null;
			this.__cacheBitmapColorTransform = null;
			return true;
		}
		return false;
	}
	,__cacheBitmapNeedsRender: function() {
		if(!(this.__renderDirty && (this.__children != null && this.__children.length > 0 || this.__graphics != null && this.__graphics.__dirty) || this.opaqueBackground != this.__cacheBitmapBackground)) {
			return !this.__cacheBitmapColorTransform.__equals(this.__worldColorTransform);
		} else {
			return true;
		}
	}
	,__updateChildren: function(transformOnly) {
		var renderParent = this.__renderParent != null ? this.__renderParent : this.parent;
		this.__renderable = this.get_visible() && this.__scaleX != 0 && this.__scaleY != 0 && !this.__isMask && (renderParent == null || !renderParent.__isMask);
		this.__worldAlpha = this.get_alpha();
		this.__worldBlendMode = this.get_blendMode();
		if(this.__transformDirty) {
			this.__transformDirty = false;
		}
	}
	,__updateTransforms: function() {
		if(this.parent != null) {
			var local = this.__transform;
			var parentTransform = this.parent.__worldTransform;
			var target = this.__worldTransform;
			target.a = local.a * parentTransform.a + local.b * parentTransform.c;
			target.b = local.a * parentTransform.b + local.b * parentTransform.d;
			target.c = local.c * parentTransform.a + local.d * parentTransform.c;
			target.d = local.c * parentTransform.b + local.d * parentTransform.d;
			target.tx = local.tx * parentTransform.a + local.ty * parentTransform.c + parentTransform.tx;
			target.ty = local.tx * parentTransform.b + local.ty * parentTransform.d + parentTransform.ty;
		} else {
			this.__worldTransform.copyFrom(this.__transform);
		}
		var renderParent = this.__renderParent != null ? this.__renderParent : this.parent;
		if(renderParent != null) {
			var local1 = this.__transform;
			var parentTransform1 = renderParent.__renderTransform;
			var target1 = this.__renderTransform;
			target1.a = local1.a * parentTransform1.a + local1.b * parentTransform1.c;
			target1.b = local1.a * parentTransform1.b + local1.b * parentTransform1.d;
			target1.c = local1.c * parentTransform1.a + local1.d * parentTransform1.c;
			target1.d = local1.c * parentTransform1.b + local1.d * parentTransform1.d;
			target1.tx = local1.tx * parentTransform1.a + local1.ty * parentTransform1.c + parentTransform1.tx;
			target1.ty = local1.tx * parentTransform1.b + local1.ty * parentTransform1.d + parentTransform1.ty;
		} else {
			this.__renderTransform.copyFrom(this.__transform);
		}
		if(this.__scrollRect != null) {
			var _this = this.__renderTransform;
			var px = -this.__scrollRect.x;
			var py = -this.__scrollRect.y;
			_this.tx = px * _this.a + py * _this.c + _this.tx;
			_this.ty = px * _this.b + py * _this.d + _this.ty;
		}
	}
	,__overrideTransforms: function(overrideTransform) {
		this.__worldTransform.copyFrom(overrideTransform);
		this.__renderTransform.copyFrom(overrideTransform);
		if(this.__scrollRect != null) {
			var _this = this.__renderTransform;
			var px = -this.__scrollRect.x;
			var py = -this.__scrollRect.y;
			_this.tx = px * _this.a + py * _this.c + _this.tx;
			_this.ty = px * _this.b + py * _this.d + _this.ty;
		}
	}
	,__snapToPixel: function() {
		var _g = this.__pixelSnapping;
		if(_g == null) {
			return false;
		} else {
			switch(_g) {
			case 0:
				return true;
			case 1:
				if(Math.abs(this.__renderTransform.a) == 1) {
					return Math.abs(this.__renderTransform.d) == 1;
				} else {
					return false;
				}
				break;
			case 2:
				return false;
			}
		}
	}
	,get_pixelSnapping: function() {
		return this.__pixelSnapping;
	}
	,set_pixelSnapping: function(value) {
		if(this.__pixelSnapping != value) {
			this.__pixelSnapping = value;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
			if(!this.__updateDirty) {
				this.__updateDirty = true;
				this.__setParentUpdateTraverse();
			}
		}
		return value;
	}
	,get_alpha: function() {
		return this.__alpha;
	}
	,set_alpha: function(value) {
		if(value > 1.0) {
			value = 1.0;
		}
		if(value != this.__alpha) {
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
			if(!this.__updateDirty) {
				this.__updateDirty = true;
				this.__setParentUpdateTraverse();
			}
		}
		return this.__alpha = value;
	}
	,get_blendMode: function() {
		return this.__blendMode;
	}
	,set_blendMode: function(value) {
		if(value == null) {
			value = 10;
		}
		if(value != this.__blendMode) {
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
			if(!this.__updateDirty) {
				this.__updateDirty = true;
				this.__setParentUpdateTraverse();
			}
		}
		return this.__blendMode = value;
	}
	,get_cacheAsBitmap: function() {
		if(this.__filters == null) {
			return this.__cacheAsBitmap;
		} else {
			return true;
		}
	}
	,set_cacheAsBitmap: function(value) {
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
		if(!this.__updateDirty) {
			this.__updateDirty = true;
			this.__setParentUpdateTraverse();
		}
		return this.__cacheAsBitmap = value;
	}
	,get_cacheAsBitmapMatrix: function() {
		return this.__cacheAsBitmapMatrix;
	}
	,set_cacheAsBitmapMatrix: function(value) {
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
		if(!this.__updateDirty) {
			this.__updateDirty = true;
			this.__setParentUpdateTraverse();
		}
		return this.__cacheAsBitmapMatrix = value.clone();
	}
	,get_filters: function() {
		if(this.__filters == null) {
			return [];
		} else {
			return this.__filters.slice();
		}
	}
	,set_filters: function(value) {
		if(value != null && value.length > 0) {
			this.__filters = value;
		} else {
			this.__filters = null;
		}
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
		if(!this.__updateDirty) {
			this.__updateDirty = true;
			this.__setParentUpdateTraverse();
		}
		return value;
	}
	,get_height: function() {
		var rect = openfl_geom_Rectangle.__pool.get();
		this.__getLocalBounds(rect);
		var height = rect.height;
		openfl_geom_Rectangle.__pool.release(rect);
		return height;
	}
	,set_height: function(value) {
		var rect = openfl_geom_Rectangle.__pool.get();
		var matrix = openfl_geom_Matrix.__pool.get();
		matrix.identity();
		this.__getBounds(rect,matrix);
		if(value != rect.height) {
			this.set_scaleY(value / rect.height);
		} else {
			this.set_scaleY(1);
		}
		openfl_geom_Rectangle.__pool.release(rect);
		openfl_geom_Matrix.__pool.release(matrix);
		return value;
	}
	,get_loaderInfo: function() {
		if(this.stage != null) {
			return openfl_Lib.current.__loaderInfo;
		}
		return null;
	}
	,get_mask: function() {
		return this.__mask;
	}
	,set_mask: function(value) {
		if(value == this.__mask) {
			return value;
		}
		if(value != this.__mask) {
			this.__setTransformDirty();
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
			if(!this.__updateDirty) {
				this.__updateDirty = true;
				this.__setParentUpdateTraverse();
			}
		}
		if(this.__mask != null) {
			this.__mask.__isMask = false;
			this.__mask.__maskTarget = null;
			this.__mask.__setTransformDirty();
			var _this = this.__mask;
			if(!_this.__renderDirty) {
				_this.__renderDirty = true;
				_this.__setParentRenderDirty();
			}
			if(!_this.__updateDirty) {
				_this.__updateDirty = true;
				_this.__setParentUpdateTraverse();
			}
		}
		if(value != null) {
			value.__isMask = true;
			value.__maskTarget = this;
			value.__setWorldTransformInvalid();
		}
		if(this.__cacheBitmap != null && this.__cacheBitmap.get_mask() != value) {
			this.__cacheBitmap.set_mask(value);
		}
		return this.__mask = value;
	}
	,get_mouseX: function() {
		var mouseX = this.stage != null ? this.stage.__mouseX : openfl_Lib.current.stage.__mouseX;
		var mouseY = this.stage != null ? this.stage.__mouseY : openfl_Lib.current.stage.__mouseY;
		var _this = this.__getRenderTransform();
		var norm = _this.a * _this.d - _this.b * _this.c;
		if(norm == 0) {
			return -_this.tx;
		} else {
			return 1.0 / norm * (_this.c * (_this.ty - mouseY) + _this.d * (mouseX - _this.tx));
		}
	}
	,get_mouseY: function() {
		var mouseX = this.stage != null ? this.stage.__mouseX : openfl_Lib.current.stage.__mouseX;
		var mouseY = this.stage != null ? this.stage.__mouseY : openfl_Lib.current.stage.__mouseY;
		var _this = this.__getRenderTransform();
		var norm = _this.a * _this.d - _this.b * _this.c;
		if(norm == 0) {
			return -_this.ty;
		} else {
			return 1.0 / norm * (_this.a * (mouseY - _this.ty) + _this.b * (_this.tx - mouseX));
		}
	}
	,get_name: function() {
		return this.__name;
	}
	,set_name: function(value) {
		return this.__name = value;
	}
	,get_root: function() {
		if(this.stage != null) {
			return openfl_Lib.current;
		}
		return null;
	}
	,get_rotation: function() {
		return this.__rotation;
	}
	,set_rotation: function(value) {
		var normalized = value % 360;
		if(normalized > 180) {
			normalized -= 360;
		} else if(normalized < -180) {
			normalized += 360;
		}
		value = normalized;
		if(value != this.__rotation) {
			this.__rotation = value;
			var radians = this.__rotation * (Math.PI / 180);
			this.__rotationSine = Math.sin(radians);
			this.__rotationCosine = Math.cos(radians);
			this.__transform.a = this.__rotationCosine * this.__scaleX;
			this.__transform.b = this.__rotationSine * this.__scaleX;
			this.__transform.c = -this.__rotationSine * this.__scaleY;
			this.__transform.d = this.__rotationCosine * this.__scaleY;
			this.__setTransformDirty();
		}
		return value;
	}
	,get_scaleX: function() {
		return this.__scaleX;
	}
	,set_scaleX: function(value) {
		if(value != this.__scaleX) {
			this.__scaleX = value;
			if(this.__transform.b == 0) {
				if(value != this.__transform.a) {
					this.__setTransformDirty();
				}
				this.__transform.a = value;
			} else {
				var a = this.__rotationCosine * value;
				var b = this.__rotationSine * value;
				if(this.__transform.a != a || this.__transform.b != b) {
					this.__setTransformDirty();
				}
				this.__transform.a = a;
				this.__transform.b = b;
			}
		}
		return value;
	}
	,get_scaleY: function() {
		return this.__scaleY;
	}
	,set_scaleY: function(value) {
		if(value != this.__scaleY) {
			this.__scaleY = value;
			if(this.__transform.c == 0) {
				if(value != this.__transform.d) {
					this.__setTransformDirty();
				}
				this.__transform.d = value;
			} else {
				var c = -this.__rotationSine * value;
				var d = this.__rotationCosine * value;
				if(this.__transform.d != d || this.__transform.c != c) {
					this.__setTransformDirty();
				}
				this.__transform.c = c;
				this.__transform.d = d;
			}
		}
		return value;
	}
	,get_scrollRect: function() {
		if(this.__scrollRect == null) {
			return null;
		}
		return this.__scrollRect.clone();
	}
	,set_scrollRect: function(value) {
		var dirty = false;
		if(value == null) {
			dirty = this.__scrollRect != null;
			this.__scrollRect = null;
		} else if(this.__scrollRect == null) {
			this.__scrollRect = value.clone();
			dirty = true;
		} else if(!this.__scrollRect.equals(value)) {
			this.__scrollRect.copyFrom(value);
			dirty = true;
		}
		if(dirty) {
			this.__setTransformDirty();
		}
		return this.__scrollRect;
	}
	,get_transform: function() {
		if(this.__objectTransform == null) {
			this.__objectTransform = new openfl_geom_Transform(this);
		}
		return this.__objectTransform;
	}
	,set_transform: function(value) {
		if(value == null) {
			throw new js__$Boot_HaxeError(new openfl_errors_TypeError("Parameter transform must be non-null."));
		}
		if(this.__objectTransform == null) {
			this.__objectTransform = new openfl_geom_Transform(this);
		}
		this.__setTransformDirty();
		this.__objectTransform.set_matrix(value.get_matrix());
		this.__objectTransform.set_colorTransform(value.get_colorTransform().__clone());
		return this.__objectTransform;
	}
	,get_visible: function() {
		return this.__visible;
	}
	,set_visible: function(value) {
		if(value != this.__visible) {
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
			if(!this.__updateDirty) {
				this.__updateDirty = true;
				this.__setParentUpdateTraverse();
			}
		}
		return this.__visible = value;
	}
	,get_width: function() {
		var rect = openfl_geom_Rectangle.__pool.get();
		this.__getLocalBounds(rect);
		var width = rect.width;
		openfl_geom_Rectangle.__pool.release(rect);
		return width;
	}
	,set_width: function(value) {
		var rect = openfl_geom_Rectangle.__pool.get();
		var matrix = openfl_geom_Matrix.__pool.get();
		matrix.identity();
		this.__getBounds(rect,matrix);
		if(value != rect.width) {
			this.set_scaleX(value / rect.width);
		} else {
			this.set_scaleX(1);
		}
		openfl_geom_Rectangle.__pool.release(rect);
		openfl_geom_Matrix.__pool.release(matrix);
		return value;
	}
	,get_x: function() {
		return this.__transform.tx;
	}
	,set_x: function(value) {
		if(value != this.__transform.tx) {
			this.__setTransformDirty();
		}
		return this.__transform.tx = value;
	}
	,get_y: function() {
		return this.__transform.ty;
	}
	,set_y: function(value) {
		if(value != this.__transform.ty) {
			this.__setTransformDirty();
		}
		return this.__transform.ty = value;
	}
	,__class__: openfl_display_DisplayObject
	,__properties__: {set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x",set_width:"set_width",get_width:"get_width",set_visible:"set_visible",get_visible:"get_visible",set_transform:"set_transform",get_transform:"get_transform",set_scrollRect:"set_scrollRect",get_scrollRect:"get_scrollRect",set_scaleY:"set_scaleY",get_scaleY:"get_scaleY",set_scaleX:"set_scaleX",get_scaleX:"get_scaleX",set_rotation:"set_rotation",get_rotation:"get_rotation",get_root:"get_root",set_name:"set_name",get_name:"get_name",get_mouseY:"get_mouseY",get_mouseX:"get_mouseX",set_mask:"set_mask",get_mask:"get_mask",get_loaderInfo:"get_loaderInfo",set_height:"set_height",get_height:"get_height",set_filters:"set_filters",get_filters:"get_filters",set_cacheAsBitmapMatrix:"set_cacheAsBitmapMatrix",get_cacheAsBitmapMatrix:"get_cacheAsBitmapMatrix",set_cacheAsBitmap:"set_cacheAsBitmap",get_cacheAsBitmap:"get_cacheAsBitmap",set_blendMode:"set_blendMode",get_blendMode:"get_blendMode",set_alpha:"set_alpha",get_alpha:"get_alpha"}
});
var openfl_display_InteractiveObject = function() {
	openfl_display_DisplayObject.call(this);
	this.doubleClickEnabled = false;
	this.mouseEnabled = true;
	this.needsSoftKeyboard = false;
	this.__tabEnabled = null;
	this.__tabIndex = -1;
};
$hxClasses["openfl.display.InteractiveObject"] = openfl_display_InteractiveObject;
openfl_display_InteractiveObject.__name__ = "openfl.display.InteractiveObject";
openfl_display_InteractiveObject.__super__ = openfl_display_DisplayObject;
openfl_display_InteractiveObject.prototype = $extend(openfl_display_DisplayObject.prototype,{
	doubleClickEnabled: null
	,focusRect: null
	,mouseEnabled: null
	,needsSoftKeyboard: null
	,softKeyboardInputAreaOfInterest: null
	,__tabEnabled: null
	,__tabIndex: null
	,requestSoftKeyboard: function() {
		openfl_Lib.notImplemented({ fileName : "openfl/display/InteractiveObject.hx", lineNumber : 28, className : "openfl.display.InteractiveObject", methodName : "requestSoftKeyboard"});
		return false;
	}
	,__allowMouseFocus: function() {
		return this.get_tabEnabled();
	}
	,__getInteractive: function(stack) {
		if(stack != null) {
			stack.push(this);
			if(this.parent != null) {
				this.parent.__getInteractive(stack);
			}
		}
		return true;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject,hitTestWhenMouseDisabled) {
		if(hitTestWhenMouseDisabled == null) {
			hitTestWhenMouseDisabled = false;
		}
		if(!hitObject.get_visible() || this.__isMask || !hitTestWhenMouseDisabled && interactiveOnly && !this.mouseEnabled) {
			return false;
		}
		return openfl_display_DisplayObject.prototype.__hitTest.call(this,x,y,shapeFlag,stack,interactiveOnly,hitObject,hitTestWhenMouseDisabled);
	}
	,__mouseThroughAllowed: function() {
		return this.mouseEnabled;
	}
	,get_tabEnabled: function() {
		if(this.__tabEnabled == true) {
			return true;
		} else {
			return false;
		}
	}
	,set_tabEnabled: function(value) {
		return this.__tabEnabled = value;
	}
	,get_tabIndex: function() {
		return this.__tabIndex;
	}
	,set_tabIndex: function(value) {
		return this.__tabIndex = value;
	}
	,__class__: openfl_display_InteractiveObject
	,__properties__: $extend(openfl_display_DisplayObject.prototype.__properties__,{set_tabIndex:"set_tabIndex",get_tabIndex:"get_tabIndex",set_tabEnabled:"set_tabEnabled",get_tabEnabled:"get_tabEnabled"})
});
var openfl_display_DisplayObjectContainer = function() {
	openfl_display_InteractiveObject.call(this);
	this.mouseChildren = true;
	this.__children = [];
	this.__removedChildren = [];
};
$hxClasses["openfl.display.DisplayObjectContainer"] = openfl_display_DisplayObjectContainer;
openfl_display_DisplayObjectContainer.__name__ = "openfl.display.DisplayObjectContainer";
openfl_display_DisplayObjectContainer.__super__ = openfl_display_InteractiveObject;
openfl_display_DisplayObjectContainer.prototype = $extend(openfl_display_InteractiveObject.prototype,{
	mouseChildren: null
	,tabChildren: null
	,__removedChildren: null
	,addChild: function(child) {
		return this.addChildAt(child,this.get_numChildren());
	}
	,addChildAt: function(child,index) {
		if(child == null) {
			var error = new openfl_errors_TypeError("Error #2007: Parameter child must be non-null.");
			error.errorID = 2007;
			throw new js__$Boot_HaxeError(error);
		} else if(child.stage == child) {
			var error1 = new openfl_errors_ArgumentError("Error #3783: A Stage object cannot be added as the child of another object.");
			error1.errorID = 3783;
			throw new js__$Boot_HaxeError(error1);
		}
		if(index > this.__children.length || index < 0) {
			throw new js__$Boot_HaxeError("Invalid index position " + index);
		}
		if(child.parent == this) {
			if(this.__children[index] != child) {
				HxOverrides.remove(this.__children,child);
				this.__children.splice(index,0,child);
				if(!this.__renderDirty) {
					this.__renderDirty = true;
					this.__setParentRenderDirty();
				}
				if(!this.__updateDirty) {
					this.__updateDirty = true;
					this.__setParentUpdateTraverse();
				}
			}
		} else {
			if(child.parent != null) {
				child.parent.removeChild(child);
			}
			this.__children.splice(index,0,child);
			child.parent = this;
			var addedToStage = this.stage != null && child.stage == null;
			if(addedToStage) {
				this.__setStageReference(this.stage);
			}
			child.__setTransformDirty();
			if(!child.__renderDirty) {
				child.__renderDirty = true;
				child.__setParentRenderDirty();
			}
			if(!child.__updateDirty) {
				child.__updateDirty = true;
				child.__setParentUpdateTraverse();
			}
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
			if(!this.__updateDirty) {
				this.__updateDirty = true;
				this.__setParentUpdateTraverse();
			}
			var event = new openfl_events_Event("added",true);
			event.target = child;
			child.__dispatchWithCapture(event);
			if(addedToStage) {
				var event1 = new openfl_events_Event("addedToStage",false,false);
				child.__dispatchWithCapture(event1);
				child.__dispatchChildren(event1);
			}
		}
		return child;
	}
	,areInaccessibleObjectsUnderPoint: function(point) {
		return false;
	}
	,contains: function(child) {
		while(child != this && child != null) child = child.parent;
		return child == this;
	}
	,getChildAt: function(index) {
		if(index >= 0 && index < this.__children.length) {
			return this.__children[index];
		}
		return null;
	}
	,getChildByName: function(name) {
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_name() == name) {
				return child;
			}
		}
		return null;
	}
	,getChildIndex: function(child) {
		var _g = 0;
		var _g1 = this.__children.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.__children[i] == child) {
				return i;
			}
		}
		return -1;
	}
	,getObjectsUnderPoint: function(point) {
		var stack = [];
		this.__hitTest(point.x,point.y,false,stack,false,this);
		stack.reverse();
		return stack;
	}
	,removeChild: function(child) {
		if(child != null && child.parent == this) {
			child.__setTransformDirty();
			if(!child.__renderDirty) {
				child.__renderDirty = true;
				child.__setParentRenderDirty();
			}
			if(!child.__updateDirty) {
				child.__updateDirty = true;
				child.__setParentUpdateTraverse();
			}
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
			if(!this.__updateDirty) {
				this.__updateDirty = true;
				this.__setParentUpdateTraverse();
			}
			var event = new openfl_events_Event("removed",true);
			child.__dispatchWithCapture(event);
			if(this.stage != null) {
				if(child.stage != null && this.stage.get_focus() == child) {
					this.stage.set_focus(null);
				}
				var event1 = new openfl_events_Event("removedFromStage",false,false);
				child.__dispatchWithCapture(event1);
				child.__dispatchChildren(event1);
				child.__setStageReference(null);
			}
			child.parent = null;
			HxOverrides.remove(this.__children,child);
			this.__removedChildren.push(child);
			child.__setTransformDirty();
		}
		return child;
	}
	,removeChildAt: function(index) {
		if(index >= 0 && index < this.__children.length) {
			return this.removeChild(this.__children[index]);
		}
		return null;
	}
	,removeChildren: function(beginIndex,endIndex) {
		if(endIndex == null) {
			endIndex = 2147483647;
		}
		if(beginIndex == null) {
			beginIndex = 0;
		}
		if(endIndex == 2147483647) {
			endIndex = this.__children.length - 1;
			if(endIndex < 0) {
				return;
			}
		}
		if(beginIndex > this.__children.length - 1) {
			return;
		} else if(endIndex < beginIndex || beginIndex < 0 || endIndex > this.__children.length) {
			throw new js__$Boot_HaxeError(new openfl_errors_RangeError("The supplied index is out of bounds."));
		}
		var numRemovals = endIndex - beginIndex;
		while(numRemovals >= 0) {
			this.removeChildAt(beginIndex);
			--numRemovals;
		}
	}
	,resolve: function(fieldName) {
		if(this.__children == null) {
			return null;
		}
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_name() == fieldName) {
				return child;
			}
		}
		return null;
	}
	,setChildIndex: function(child,index) {
		if(index >= 0 && index <= this.__children.length && child.parent == this) {
			HxOverrides.remove(this.__children,child);
			this.__children.splice(index,0,child);
		}
	}
	,stopAllMovieClips: function() {
		this.__stopAllMovieClips();
	}
	,swapChildren: function(child1,child2) {
		if(child1.parent == this && child2.parent == this) {
			var index1 = this.__children.indexOf(child1);
			var index2 = this.__children.indexOf(child2);
			this.__children[index1] = child2;
			this.__children[index2] = child1;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
			if(!this.__updateDirty) {
				this.__updateDirty = true;
				this.__setParentUpdateTraverse();
			}
		}
	}
	,swapChildrenAt: function(index1,index2) {
		var swap = this.__children[index1];
		this.__children[index1] = this.__children[index2];
		this.__children[index2] = swap;
		swap = null;
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
		if(!this.__updateDirty) {
			this.__updateDirty = true;
			this.__setParentUpdateTraverse();
		}
	}
	,__cleanupRemovedChildren: function() {
		var _g = 0;
		var _g1 = this.__removedChildren;
		while(_g < _g1.length) {
			var orphan = _g1[_g];
			++_g;
			if(orphan.stage == null) {
				orphan.__cleanup();
			}
		}
		this.__removedChildren.length = 0;
	}
	,__cleanup: function() {
		openfl_display_InteractiveObject.prototype.__cleanup.call(this);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__cleanup();
		}
		var _g2 = 0;
		var _g11 = this.__removedChildren;
		while(_g2 < _g11.length) {
			var orphan = _g11[_g2];
			++_g2;
			if(orphan.stage == null) {
				orphan.__cleanup();
			}
		}
		this.__removedChildren.length = 0;
	}
	,__dispatchChildren: function(event) {
		if(this.__children != null) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				event.target = child;
				if(!child.__dispatchWithCapture(event)) {
					break;
				}
				child.__dispatchChildren(event);
			}
		}
	}
	,__enterFrame: function(deltaTime) {
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__enterFrame(deltaTime);
		}
	}
	,__forceRenderDirty: function() {
		openfl_display_InteractiveObject.prototype.__forceRenderDirty.call(this);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__forceRenderDirty();
		}
	}
	,__getBounds: function(rect,matrix) {
		openfl_display_InteractiveObject.prototype.__getBounds.call(this,rect,matrix);
		if(this.__children.length == 0) {
			return;
		}
		var childWorldTransform = openfl_geom_Matrix.__pool.get();
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.__scaleX == 0 || child.__scaleY == 0) {
				continue;
			}
			var local = child.__transform;
			childWorldTransform.a = local.a * matrix.a + local.b * matrix.c;
			childWorldTransform.b = local.a * matrix.b + local.b * matrix.d;
			childWorldTransform.c = local.c * matrix.a + local.d * matrix.c;
			childWorldTransform.d = local.c * matrix.b + local.d * matrix.d;
			childWorldTransform.tx = local.tx * matrix.a + local.ty * matrix.c + matrix.tx;
			childWorldTransform.ty = local.tx * matrix.b + local.ty * matrix.d + matrix.ty;
			child.__getBounds(rect,childWorldTransform);
		}
		openfl_geom_Matrix.__pool.release(childWorldTransform);
	}
	,__getFilterBounds: function(rect,matrix) {
		openfl_display_InteractiveObject.prototype.__getFilterBounds.call(this,rect,matrix);
		if(this.__children.length == 0) {
			return;
		}
		var childWorldTransform = openfl_geom_Matrix.__pool.get();
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.__scaleX == 0 || child.__scaleY == 0 || child.__isMask) {
				continue;
			}
			var local = child.__transform;
			childWorldTransform.a = local.a * matrix.a + local.b * matrix.c;
			childWorldTransform.b = local.a * matrix.b + local.b * matrix.d;
			childWorldTransform.c = local.c * matrix.a + local.d * matrix.c;
			childWorldTransform.d = local.c * matrix.b + local.d * matrix.d;
			childWorldTransform.tx = local.tx * matrix.a + local.ty * matrix.c + matrix.tx;
			childWorldTransform.ty = local.tx * matrix.b + local.ty * matrix.d + matrix.ty;
			child.__getFilterBounds(rect,childWorldTransform);
		}
		openfl_geom_Matrix.__pool.release(childWorldTransform);
	}
	,__getRenderBounds: function(rect,matrix) {
		if(this.__scrollRect != null) {
			openfl_display_InteractiveObject.prototype.__getRenderBounds.call(this,rect,matrix);
			return;
		} else {
			openfl_display_InteractiveObject.prototype.__getBounds.call(this,rect,matrix);
		}
		if(this.__children.length == 0) {
			return;
		}
		var childWorldTransform = openfl_geom_Matrix.__pool.get();
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.__scaleX == 0 || child.__scaleY == 0 || child.__isMask) {
				continue;
			}
			var local = child.__transform;
			childWorldTransform.a = local.a * matrix.a + local.b * matrix.c;
			childWorldTransform.b = local.a * matrix.b + local.b * matrix.d;
			childWorldTransform.c = local.c * matrix.a + local.d * matrix.c;
			childWorldTransform.d = local.c * matrix.b + local.d * matrix.d;
			childWorldTransform.tx = local.tx * matrix.a + local.ty * matrix.c + matrix.tx;
			childWorldTransform.ty = local.tx * matrix.b + local.ty * matrix.d + matrix.ty;
			child.__getRenderBounds(rect,childWorldTransform);
		}
		openfl_geom_Matrix.__pool.release(childWorldTransform);
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject,hitTestWhenMouseDisabled) {
		if(hitTestWhenMouseDisabled == null) {
			hitTestWhenMouseDisabled = false;
		}
		if(!hitObject.get_visible() || this.__isMask || !hitTestWhenMouseDisabled && interactiveOnly && !this.mouseEnabled && !this.mouseChildren) {
			return false;
		}
		if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
			return false;
		}
		if(this.__scrollRect != null) {
			var point = openfl_geom_Point.__pool.get();
			point.setTo(x,y);
			var _this = this.__getRenderTransform();
			var norm = _this.a * _this.d - _this.b * _this.c;
			if(norm == 0) {
				point.x = -_this.tx;
				point.y = -_this.ty;
			} else {
				var px = 1.0 / norm * (_this.c * (_this.ty - point.y) + _this.d * (point.x - _this.tx));
				point.y = 1.0 / norm * (_this.a * (point.y - _this.ty) + _this.b * (_this.tx - point.x));
				point.x = px;
			}
			if(!this.__scrollRect.containsPoint(point)) {
				openfl_geom_Point.__pool.release(point);
				return false;
			}
			openfl_geom_Point.__pool.release(point);
		}
		var i = this.__children.length;
		if(interactiveOnly) {
			if(stack == null || !this.mouseChildren) {
				while(--i >= 0) if(this.__children[i].__hitTest(x,y,shapeFlag,null,true,this.__children[i],hitTestWhenMouseDisabled)) {
					if(stack != null && !hitTestWhenMouseDisabled) {
						stack.push(hitObject);
					}
					return true;
				}
			} else if(stack != null) {
				var length = stack.length;
				var interactive = false;
				var hitTest = false;
				while(--i >= 0) {
					interactive = this.__children[i].__getInteractive(null);
					var childHitTestWhenMouseDisabled = hitTestWhenMouseDisabled || interactive && !this.__children[i].__mouseThroughAllowed() || !interactive && !this.mouseEnabled;
					if(interactive || this.mouseEnabled && !hitTest || childHitTestWhenMouseDisabled) {
						if(this.__children[i].__hitTest(x,y,shapeFlag,stack,true,this.__children[i],childHitTestWhenMouseDisabled)) {
							hitTest = true;
							if(!childHitTestWhenMouseDisabled && interactive && stack.length > 0) {
								break;
							}
						}
					}
				}
				if(hitTest) {
					if(!hitTestWhenMouseDisabled && this.mouseEnabled) {
						stack.splice(length,0,hitObject);
					}
					return true;
				}
			}
		} else {
			while(--i >= 0) this.__children[i].__hitTest(x,y,shapeFlag,stack,false,this.__children[i]);
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		var i = this.__children.length;
		while(--i >= 0) if(this.__children[i].__hitTestMask(x,y)) {
			return true;
		}
		return false;
	}
	,__mouseThroughAllowed: function() {
		if(!this.mouseEnabled) {
			return this.mouseChildren;
		} else {
			return true;
		}
	}
	,__readGraphicsData: function(graphicsData,recurse) {
		openfl_display_InteractiveObject.prototype.__readGraphicsData.call(this,graphicsData,recurse);
		if(recurse) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__readGraphicsData(graphicsData,recurse);
			}
		}
	}
	,__renderCanvas: function(renderSession) {
		var _g = 0;
		var _g1 = this.__removedChildren;
		while(_g < _g1.length) {
			var orphan = _g1[_g];
			++_g;
			if(orphan.stage == null) {
				orphan.__cleanup();
			}
		}
		this.__removedChildren.length = 0;
		if(!this.__renderable || this.__worldAlpha <= 0 || this.get_mask() != null && (this.get_mask().get_width() <= 0 || this.get_mask().get_height() <= 0)) {
			return;
		}
		openfl_display_InteractiveObject.prototype.__renderCanvas.call(this,renderSession);
		if(this.__cacheBitmap != null && !this.__cacheBitmapRender) {
			return;
		}
		renderSession.maskManager.pushObject(this);
		if(renderSession.clearRenderDirty) {
			var _g2 = 0;
			var _g11 = this.__children;
			while(_g2 < _g11.length) {
				var child = _g11[_g2];
				++_g2;
				child.__renderCanvas(renderSession);
				child.__renderDirty = false;
			}
			this.__renderDirty = false;
		} else {
			var _g3 = 0;
			var _g12 = this.__children;
			while(_g3 < _g12.length) {
				var child1 = _g12[_g3];
				++_g3;
				child1.__renderCanvas(renderSession);
			}
		}
		renderSession.maskManager.popObject(this);
	}
	,__renderCanvasMask: function(renderSession) {
		if(this.__graphics != null) {
			openfl__$internal_renderer_canvas_CanvasGraphics.renderMask(this.__graphics,renderSession.context);
		}
		var bounds = openfl_geom_Rectangle.__pool.get();
		this.__getLocalBounds(bounds);
		renderSession.context.rect(0,0,bounds.width,bounds.height);
		openfl_geom_Rectangle.__pool.release(bounds);
	}
	,__renderGL: function(renderSession) {
		var _g = 0;
		var _g1 = this.__removedChildren;
		while(_g < _g1.length) {
			var orphan = _g1[_g];
			++_g;
			if(orphan.stage == null) {
				orphan.__cleanup();
			}
		}
		this.__removedChildren.length = 0;
		if(!this.__renderable || this.__worldAlpha <= 0) {
			return;
		}
		openfl_display_InteractiveObject.prototype.__renderGL.call(this,renderSession);
		if(this.__cacheBitmap != null && !this.__cacheBitmapRender) {
			return;
		}
		if(this.__children.length > 0) {
			renderSession.maskManager.pushObject(this);
			var _g2 = 0;
			var _g11 = this.__children;
			while(_g2 < _g11.length) {
				var child = _g11[_g2];
				++_g2;
				child.__renderGL(renderSession);
				child.__renderDirty = false;
			}
			this.__renderDirty = false;
			renderSession.maskManager.popObject(this);
		}
	}
	,__renderGLMask: function(renderSession) {
		var _g = 0;
		var _g1 = this.__removedChildren;
		while(_g < _g1.length) {
			var orphan = _g1[_g];
			++_g;
			if(orphan.stage == null) {
				orphan.__cleanup();
			}
		}
		this.__removedChildren.length = 0;
		openfl_display_InteractiveObject.prototype.__renderGLMask.call(this,renderSession);
		if(this.__cacheBitmap != null && !this.__cacheBitmapRender) {
			return;
		}
		var _g2 = 0;
		var _g11 = this.__children;
		while(_g2 < _g11.length) {
			var child = _g11[_g2];
			++_g2;
			child.__renderGLMask(renderSession);
			child.__renderDirty = false;
		}
		this.__renderDirty = false;
	}
	,__setStageReference: function(stage) {
		openfl_display_InteractiveObject.prototype.__setStageReference.call(this,stage);
		if(this.__children != null) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__setStageReference(stage);
			}
		}
	}
	,__setWorldTransformInvalid: function() {
		if(!this.__worldTransformInvalid) {
			this.__worldTransformInvalid = true;
			if(this.__children != null) {
				var _g = 0;
				var _g1 = this.__children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.__setWorldTransformInvalid();
				}
			}
		}
	}
	,__stopAllMovieClips: function() {
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__stopAllMovieClips();
		}
	}
	,__traverse: function() {
		if(this.__updateDirty) {
			this.__update(false,true,true);
		} else if(this.__updateTraverse) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__traverse();
			}
		}
		this.__updateTraverse = false;
	}
	,__update: function(transformOnly,updateChildren,resetUpdateDirty) {
		if(resetUpdateDirty == null) {
			resetUpdateDirty = false;
		}
		openfl_display_InteractiveObject.prototype.__update.call(this,transformOnly,updateChildren,resetUpdateDirty);
		if(updateChildren) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__update(transformOnly,true,resetUpdateDirty);
			}
		}
	}
	,__updateChildren: function(transformOnly) {
		openfl_display_InteractiveObject.prototype.__updateChildren.call(this,transformOnly);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__update(transformOnly,true);
		}
	}
	,get_numChildren: function() {
		return this.__children.length;
	}
	,__class__: openfl_display_DisplayObjectContainer
	,__properties__: $extend(openfl_display_InteractiveObject.prototype.__properties__,{get_numChildren:"get_numChildren"})
});
var openfl_display_Sprite = function() {
	openfl_display_DisplayObjectContainer.call(this);
	this.buttonMode = false;
	this.useHandCursor = true;
};
$hxClasses["openfl.display.Sprite"] = openfl_display_Sprite;
openfl_display_Sprite.__name__ = "openfl.display.Sprite";
openfl_display_Sprite.__super__ = openfl_display_DisplayObjectContainer;
openfl_display_Sprite.prototype = $extend(openfl_display_DisplayObjectContainer.prototype,{
	buttonMode: null
	,dropTarget: null
	,hitArea: null
	,useHandCursor: null
	,startDrag: function(lockCenter,bounds) {
		if(lockCenter == null) {
			lockCenter = false;
		}
		if(this.stage != null) {
			this.stage.__startDrag(this,lockCenter,bounds);
		}
	}
	,stopDrag: function() {
		if(this.stage != null) {
			this.stage.__stopDrag(this);
		}
	}
	,__getCursor: function() {
		if(this.buttonMode && this.useHandCursor) {
			return "button";
		} else {
			return null;
		}
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject,hitTestWhenMouseDisabled) {
		if(hitTestWhenMouseDisabled == null) {
			hitTestWhenMouseDisabled = false;
		}
		if(!hitObject.get_visible() || this.__isMask) {
			return false;
		}
		if(interactiveOnly && !this.mouseEnabled && !this.mouseChildren) {
			if(this.__hitTestHitArea(x,y,shapeFlag,stack,interactiveOnly,hitObject,hitTestWhenMouseDisabled)) {
				return true;
			} else if(!hitTestWhenMouseDisabled) {
				return false;
			}
		}
		if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
			return this.__hitTestHitArea(x,y,shapeFlag,stack,interactiveOnly,hitObject,hitTestWhenMouseDisabled);
		}
		if(this.__scrollRect != null) {
			var point = openfl_geom_Point.__pool.get();
			point.setTo(x,y);
			var _this = this.__getRenderTransform();
			var norm = _this.a * _this.d - _this.b * _this.c;
			if(norm == 0) {
				point.x = -_this.tx;
				point.y = -_this.ty;
			} else {
				var px = 1.0 / norm * (_this.c * (_this.ty - point.y) + _this.d * (point.x - _this.tx));
				point.y = 1.0 / norm * (_this.a * (point.y - _this.ty) + _this.b * (_this.tx - point.x));
				point.x = px;
			}
			if(!this.__scrollRect.containsPoint(point)) {
				openfl_geom_Point.__pool.release(point);
				return this.__hitTestHitArea(x,y,shapeFlag,stack,true,hitObject,hitTestWhenMouseDisabled);
			}
			openfl_geom_Point.__pool.release(point);
		}
		if(openfl_display_DisplayObjectContainer.prototype.__hitTest.call(this,x,y,shapeFlag,stack,interactiveOnly,hitObject,hitTestWhenMouseDisabled)) {
			return interactiveOnly;
		} else if(this.hitArea == null && this.__graphics != null && this.__graphics.__hitTest(x,y,shapeFlag,this.__getRenderTransform())) {
			if(stack != null && !hitTestWhenMouseDisabled && (!interactiveOnly || this.mouseEnabled)) {
				stack.push(hitObject);
			}
			return true;
		}
		return this.__hitTestHitArea(x,y,shapeFlag,stack,interactiveOnly,hitObject,hitTestWhenMouseDisabled);
	}
	,__hitTestHitArea: function(x,y,shapeFlag,stack,interactiveOnly,hitObject,hitTestWhenMouseDisabled) {
		if(hitTestWhenMouseDisabled == null) {
			hitTestWhenMouseDisabled = false;
		}
		if(this.hitArea != null) {
			if(!this.hitArea.mouseEnabled) {
				this.hitArea.mouseEnabled = true;
				var hitTest = this.hitArea.__hitTest(x,y,shapeFlag,null,true,hitObject,hitTestWhenMouseDisabled);
				this.hitArea.mouseEnabled = false;
				if(stack != null && hitTest && !hitTestWhenMouseDisabled) {
					stack[stack.length] = hitObject;
				}
				return hitTest;
			}
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		if(openfl_display_DisplayObjectContainer.prototype.__hitTestMask.call(this,x,y)) {
			return true;
		} else if(this.__graphics != null && this.__graphics.__hitTest(x,y,true,this.__getRenderTransform())) {
			return true;
		}
		return false;
	}
	,get_graphics: function() {
		if(this.__graphics == null) {
			this.__graphics = new openfl_display_Graphics(this);
		}
		return this.__graphics;
	}
	,get_tabEnabled: function() {
		if(this.__tabEnabled == null) {
			return this.buttonMode;
		} else {
			return this.__tabEnabled;
		}
	}
	,__class__: openfl_display_Sprite
	,__properties__: $extend(openfl_display_DisplayObjectContainer.prototype.__properties__,{get_graphics:"get_graphics"})
});
var Main = function() {
	var _gthis = this;
	openfl_display_Sprite.call(this);
	this.addChild(new openfl_display_Bitmap(new openfl_display_BitmapData(100,100,true,-1996554240)));
	this.addChild(new openfl_display_Bitmap(new openfl_display_BitmapData(50,50,true,1140915968)));
	this.addEventListener("addedToStage",function(_) {
		var bmd = openfl_display_BitmapData.fromKhaImage(kha_Assets.images.battle_tank_0);
		var frames = [];
		var atlasData = JSON.parse(kha_Assets.blobs.battle_tank_0_json.toString());
		atlasData.frames.sort(function(a,b) {
			return Reflect.compare(a[0],b[0]);
		});
		var _g = 0;
		var _g1 = atlasData.frames;
		while(_g < _g1.length) {
			var frame = _g1[_g];
			++_g;
			var x = frame[1];
			var y = frame[2];
			var w = frame[3];
			var h = frame[4];
			var r = frame[5];
			var fx = 0;
			var fy = 0;
			var fw = w;
			var fh = h;
			if(typeof(r) != "boolean") {
				fx = r;
				fy = frame[6];
				fw = frame[7];
				fh = frame[8];
				r = frame[9];
			}
			frames.push(new openfl_display_SubBitmapData(bmd,x,y,w,h,fx,fy,fw,fh,r));
		}
		var bmp = new openfl_display_Bitmap(frames[0]);
		var sprite = new openfl_display_Sprite();
		_gthis.addChild(sprite);
		sprite.addEventListener("rollOver",function(_1) {
			return bmp.set_scaleX(1.5);
		});
		sprite.addEventListener("rollOut",function(_2) {
			return bmp.set_scaleX(1);
		});
		var shape = new openfl_display_Shape();
		shape.get_graphics().beginFill(16711680,0.75);
		shape.get_graphics().drawCircle(25,25,25);
		shape.get_graphics().endFill();
		shape.set_x(30);
		shape.set_y(15);
		shape.set_blendMode(0);
		_gthis.addChild(shape);
		var shape1 = new openfl_display_Shape();
		shape1.get_graphics().beginFill(16711680,0.75);
		shape1.get_graphics().drawCircle(25,25,25);
		shape1.get_graphics().endFill();
		shape1.set_x(60);
		shape1.set_y(15);
		shape1.set_blendMode(14);
		_gthis.addChild(shape1);
		sprite.addChild(bmp);
		sprite.addEventListener("click",function(_3) {
			if(bmp.get_mask() == null) {
				bmp.set_mask(shape1);
			} else {
				bmp.set_mask(null);
			}
		});
		var frameId = 0;
		kha_Scheduler.addTimeTask(function() {
			frameId += 1;
			if(frameId >= frames.length) {
				frameId = 0;
			}
			return bmp.set_bitmapData(frames[frameId]);
		},0,0.1);
		var tf = new openfl_text_TextField();
		tf.set_type(1);
		tf.set_text("hello, world!");
		tf.set_border(true);
		tf.set_y(150);
		_gthis.addChild(tf);
	});
};
$hxClasses["Main"] = Main;
Main.__name__ = "Main";
Main.main = function() {
	kha_System.start(new kha_SystemOptions(null,null,null,null,null),function($window) {
		kha_Assets.loadEverything(function() {
			openfl__$internal_app_Application.start();
			openfl_Lib.current.addChild(new Main());
		});
	});
};
Main.__super__ = openfl_display_Sprite;
Main.prototype = $extend(openfl_display_Sprite.prototype,{
	__class__: Main
});
Math.__name__ = "Math";
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = "Reflect";
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		haxe_CallStack.lastException = e;
		var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
		return null;
	}
};
Reflect.getProperty = function(o,field) {
	var tmp;
	if(o == null) {
		return null;
	} else {
		var tmp1;
		if(o.__properties__) {
			tmp = o.__properties__["get_" + field];
			tmp1 = tmp;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			return o[tmp]();
		} else {
			return o[field];
		}
	}
};
Reflect.setProperty = function(o,field,value) {
	var tmp;
	var tmp1;
	if(o.__properties__) {
		tmp = o.__properties__["set_" + field];
		tmp1 = tmp;
	} else {
		tmp1 = false;
	}
	if(tmp1) {
		o[tmp](value);
	} else {
		o[field] = value;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
Reflect.compare = function(a,b) {
	if(a == b) {
		return 0;
	} else if(a > b) {
		return 1;
	} else {
		return -1;
	}
};
Reflect.compareMethods = function(f1,f2) {
	if(f1 == f2) {
		return true;
	}
	if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) {
		return false;
	}
	if(f1.scope == f2.scope && f1.method == f2.method) {
		return f1.method != null;
	} else {
		return false;
	}
};
Reflect.isEnumValue = function(v) {
	if(v != null) {
		return v.__enum__ != null;
	} else {
		return false;
	}
};
Reflect.deleteField = function(o,field) {
	if(!Object.prototype.hasOwnProperty.call(o,field)) {
		return false;
	}
	delete(o[field]);
	return true;
};
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = "Std";
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x, x && x[0]=="0" && (x[1]=="x" || x[1]=="X") ? 16 : 10);
	if(isNaN(v)) {
		return null;
	}
	return v;
};
var StringBuf = function() {
	this.b = "";
};
$hxClasses["StringBuf"] = StringBuf;
StringBuf.__name__ = "StringBuf";
StringBuf.prototype = {
	b: null
	,__class__: StringBuf
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = "StringTools";
StringTools.htmlEscape = function(s,quotes) {
	var buf_b = "";
	var _g_offset = 0;
	var _g_s = s;
	while(_g_offset < _g_s.length) {
		var s1 = _g_s;
		var index = _g_offset++;
		var c = s1.charCodeAt(index);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | s1.charCodeAt(index + 1) & 1023;
		}
		var c1 = c;
		if(c1 >= 65536) {
			++_g_offset;
		}
		var code = c1;
		switch(code) {
		case 34:
			if(quotes) {
				buf_b += "&quot;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 38:
			buf_b += "&amp;";
			break;
		case 39:
			if(quotes) {
				buf_b += "&#039;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 60:
			buf_b += "&lt;";
			break;
		case 62:
			buf_b += "&gt;";
			break;
		default:
			buf_b += String.fromCodePoint(code);
		}
	}
	return buf_b;
};
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return s.lastIndexOf(start,0) == 0;
	} else {
		return false;
	}
};
StringTools.endsWith = function(s,end) {
	var elen = end.length;
	var slen = s.length;
	if(slen >= elen) {
		return s.indexOf(end,slen - elen) == slen - elen;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
StringTools.hex = function(n,digits) {
	var s = "";
	var hexChars = "0123456789ABCDEF";
	while(true) {
		s = hexChars.charAt(n & 15) + s;
		n >>>= 4;
		if(!(n > 0)) {
			break;
		}
	}
	if(digits != null) {
		while(s.length < digits) s = "0" + s;
	}
	return s;
};
var ValueType = $hxEnums["ValueType"] = { __ename__ : "ValueType", __constructs__ : ["TNull","TInt","TFloat","TBool","TObject","TFunction","TClass","TEnum","TUnknown"]
	,TNull: {_hx_index:0,__enum__:"ValueType",toString:$estr}
	,TInt: {_hx_index:1,__enum__:"ValueType",toString:$estr}
	,TFloat: {_hx_index:2,__enum__:"ValueType",toString:$estr}
	,TBool: {_hx_index:3,__enum__:"ValueType",toString:$estr}
	,TObject: {_hx_index:4,__enum__:"ValueType",toString:$estr}
	,TFunction: {_hx_index:5,__enum__:"ValueType",toString:$estr}
	,TClass: ($_=function(c) { return {_hx_index:6,c:c,__enum__:"ValueType",toString:$estr}; },$_.__params__ = ["c"],$_)
	,TEnum: ($_=function(e) { return {_hx_index:7,e:e,__enum__:"ValueType",toString:$estr}; },$_.__params__ = ["e"],$_)
	,TUnknown: {_hx_index:8,__enum__:"ValueType",toString:$estr}
};
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = "Type";
Type.resolveEnum = function(name) {
	return $hxEnums[name];
};
Type.createInstance = function(cl,args) {
	return new (Function.prototype.bind.apply(cl,[null].concat(args)));
};
Type.createEnum = function(e,constr,params) {
	var f = Reflect.field(e,constr);
	if(f == null) {
		throw new js__$Boot_HaxeError("No such constructor " + constr);
	}
	if(Reflect.isFunction(f)) {
		if(params == null) {
			throw new js__$Boot_HaxeError("Constructor " + constr + " need parameters");
		}
		return f.apply(e,params);
	}
	if(params != null && params.length != 0) {
		throw new js__$Boot_HaxeError("Constructor " + constr + " does not need parameters");
	}
	return f;
};
Type.getInstanceFields = function(c) {
	var a = [];
	for(var i in c.prototype) a.push(i);
	HxOverrides.remove(a,"__class__");
	HxOverrides.remove(a,"__properties__");
	return a;
};
Type.typeof = function(v) {
	switch(typeof(v)) {
	case "boolean":
		return ValueType.TBool;
	case "function":
		if(v.__name__ || v.__ename__) {
			return ValueType.TObject;
		}
		return ValueType.TFunction;
	case "number":
		if(Math.ceil(v) == v % 2147483648.0) {
			return ValueType.TInt;
		}
		return ValueType.TFloat;
	case "object":
		if(v == null) {
			return ValueType.TNull;
		}
		var e = v.__enum__;
		if(e != null) {
			return ValueType.TEnum($hxEnums[e]);
		}
		var c = js_Boot.getClass(v);
		if(c != null) {
			return ValueType.TClass(c);
		}
		return ValueType.TObject;
	case "string":
		return ValueType.TClass(String);
	case "undefined":
		return ValueType.TNull;
	default:
		return ValueType.TUnknown;
	}
};
Type.enumParameters = function(e) {
	var enm = $hxEnums[e.__enum__];
	var ctorName = enm.__constructs__[e._hx_index];
	var params = enm[ctorName].__params__;
	if(params != null) {
		var _g = [];
		var _g1 = 0;
		while(_g1 < params.length) {
			var p = params[_g1];
			++_g1;
			_g.push(e[p]);
		}
		return _g;
	} else {
		return [];
	}
};
var _$UInt_UInt_$Impl_$ = {};
$hxClasses["_UInt.UInt_Impl_"] = _$UInt_UInt_$Impl_$;
_$UInt_UInt_$Impl_$.__name__ = "_UInt.UInt_Impl_";
_$UInt_UInt_$Impl_$.gt = function(a,b) {
	var aNeg = a < 0;
	var bNeg = b < 0;
	if(aNeg != bNeg) {
		return aNeg;
	} else {
		return a > b;
	}
};
_$UInt_UInt_$Impl_$.gte = function(a,b) {
	var aNeg = a < 0;
	var bNeg = b < 0;
	if(aNeg != bNeg) {
		return aNeg;
	} else {
		return a >= b;
	}
};
_$UInt_UInt_$Impl_$.toFloat = function(this1) {
	var int = this1;
	if(int < 0) {
		return 4294967296.0 + int;
	} else {
		return int + 0.0;
	}
};
var _$UnicodeString_UnicodeString_$Impl_$ = {};
$hxClasses["_UnicodeString.UnicodeString_Impl_"] = _$UnicodeString_UnicodeString_$Impl_$;
_$UnicodeString_UnicodeString_$Impl_$.__name__ = "_UnicodeString.UnicodeString_Impl_";
_$UnicodeString_UnicodeString_$Impl_$.__properties__ = {get_length:"get_length"};
_$UnicodeString_UnicodeString_$Impl_$.charAt = function(this1,index) {
	if(index < 0) {
		return "";
	}
	var unicodeOffset = 0;
	var nativeOffset = 0;
	while(nativeOffset < this1.length) {
		var index1 = nativeOffset++;
		var c = this1.charCodeAt(index1);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | this1.charCodeAt(index1 + 1) & 1023;
		}
		var c1 = c;
		if(unicodeOffset == index) {
			return String.fromCodePoint(c1);
		}
		if(c1 >= 65536) {
			++nativeOffset;
		}
		++unicodeOffset;
	}
	return "";
};
_$UnicodeString_UnicodeString_$Impl_$.charCodeAt = function(this1,index) {
	if(index < 0) {
		return null;
	}
	var unicodeOffset = 0;
	var nativeOffset = 0;
	while(nativeOffset < this1.length) {
		var index1 = nativeOffset++;
		var c = this1.charCodeAt(index1);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | this1.charCodeAt(index1 + 1) & 1023;
		}
		var c1 = c;
		if(unicodeOffset == index) {
			return c1;
		}
		if(c1 >= 65536) {
			++nativeOffset;
		}
		++unicodeOffset;
	}
	return null;
};
_$UnicodeString_UnicodeString_$Impl_$.indexOf = function(this1,str,startIndex) {
	if(startIndex == null) {
		startIndex = 0;
	} else if(startIndex < 0) {
		startIndex = _$UnicodeString_UnicodeString_$Impl_$.get_length(this1) + startIndex;
	}
	var unicodeOffset = 0;
	var nativeOffset = 0;
	var matchingOffset = 0;
	var result = -1;
	while(nativeOffset <= this1.length) {
		var c = this1.charCodeAt(nativeOffset);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | this1.charCodeAt(nativeOffset + 1) & 1023;
		}
		var c1 = c;
		if(unicodeOffset >= startIndex) {
			var c2 = str.charCodeAt(matchingOffset);
			if(c2 >= 55296 && c2 <= 56319) {
				c2 = c2 - 55232 << 10 | str.charCodeAt(matchingOffset + 1) & 1023;
			}
			var c21 = c2;
			if(c1 == c21) {
				if(matchingOffset == 0) {
					result = unicodeOffset;
				}
				++matchingOffset;
				if(c21 >= 65536) {
					++matchingOffset;
				}
				if(matchingOffset == str.length) {
					return result;
				}
			} else if(matchingOffset != 0) {
				result = -1;
				matchingOffset = 0;
				continue;
			}
		}
		++nativeOffset;
		if(c1 >= 65536) {
			++nativeOffset;
		}
		++unicodeOffset;
	}
	return -1;
};
_$UnicodeString_UnicodeString_$Impl_$.substr = function(this1,pos,len) {
	if(pos < 0) {
		pos = _$UnicodeString_UnicodeString_$Impl_$.get_length(this1) + pos;
		if(pos < 0) {
			pos = 0;
		}
	}
	if(len != null) {
		if(len < 0) {
			len = _$UnicodeString_UnicodeString_$Impl_$.get_length(this1) + len;
		}
		if(len <= 0) {
			return "";
		}
	}
	var unicodeOffset = 0;
	var nativeOffset = 0;
	var fromOffset = -1;
	var subLength = 0;
	while(nativeOffset < this1.length) {
		var c = this1.charCodeAt(nativeOffset);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | this1.charCodeAt(nativeOffset + 1) & 1023;
		}
		var c1 = c;
		if(unicodeOffset >= pos) {
			if(fromOffset < 0) {
				if(len == null) {
					return HxOverrides.substr(this1,nativeOffset,null);
				}
				fromOffset = nativeOffset;
			}
			++subLength;
			if(subLength >= len) {
				var lastOffset = c1 < 65536 ? nativeOffset : nativeOffset + 1;
				return HxOverrides.substr(this1,fromOffset,lastOffset - fromOffset + 1);
			}
		}
		nativeOffset += c1 >= 65536 ? 2 : 1;
		++unicodeOffset;
	}
	if(fromOffset < 0) {
		return "";
	} else {
		return HxOverrides.substr(this1,fromOffset,null);
	}
};
_$UnicodeString_UnicodeString_$Impl_$.substring = function(this1,startIndex,endIndex) {
	if(startIndex < 0) {
		startIndex = 0;
	}
	if(endIndex != null) {
		if(endIndex < 0) {
			endIndex = 0;
		}
		if(startIndex == endIndex) {
			return "";
		}
		if(startIndex > endIndex) {
			var tmp = startIndex;
			startIndex = endIndex;
			endIndex = tmp;
		}
	}
	var unicodeOffset = 0;
	var nativeOffset = 0;
	var fromOffset = -1;
	var subLength = 0;
	while(nativeOffset < this1.length) {
		var c = this1.charCodeAt(nativeOffset);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | this1.charCodeAt(nativeOffset + 1) & 1023;
		}
		var c1 = c;
		if(startIndex <= unicodeOffset) {
			if(fromOffset < 0) {
				if(endIndex == null) {
					return HxOverrides.substr(this1,nativeOffset,null);
				}
				fromOffset = nativeOffset;
			}
			++subLength;
			if(subLength >= endIndex - startIndex) {
				var lastOffset = c1 < 65536 ? nativeOffset : nativeOffset + 1;
				return HxOverrides.substr(this1,fromOffset,lastOffset - fromOffset + 1);
			}
		}
		nativeOffset += c1 >= 65536 ? 2 : 1;
		++unicodeOffset;
	}
	if(fromOffset < 0) {
		return "";
	} else {
		return HxOverrides.substr(this1,fromOffset,null);
	}
};
_$UnicodeString_UnicodeString_$Impl_$.get_length = function(this1) {
	var l = 0;
	var _g_offset = 0;
	var _g_s = this1;
	while(_g_offset < _g_s.length) {
		var s = _g_s;
		var index = _g_offset++;
		var c = s.charCodeAt(index);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(index + 1) & 1023;
		}
		var c1 = c;
		if(c1 >= 65536) {
			++_g_offset;
		}
		var c2 = c1;
		++l;
	}
	return l;
};
var _$Xml_XmlType_$Impl_$ = {};
$hxClasses["_Xml.XmlType_Impl_"] = _$Xml_XmlType_$Impl_$;
_$Xml_XmlType_$Impl_$.__name__ = "_Xml.XmlType_Impl_";
_$Xml_XmlType_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 0:
		return "Element";
	case 1:
		return "PCData";
	case 2:
		return "CData";
	case 3:
		return "Comment";
	case 4:
		return "DocType";
	case 5:
		return "ProcessingInstruction";
	case 6:
		return "Document";
	}
};
var Xml = function(nodeType) {
	this.nodeType = nodeType;
	this.children = [];
	this.attributeMap = new haxe_ds_StringMap();
};
$hxClasses["Xml"] = Xml;
Xml.__name__ = "Xml";
Xml.parse = function(str) {
	return haxe_xml_Parser.parse(str);
};
Xml.createElement = function(name) {
	var xml = new Xml(Xml.Element);
	if(xml.nodeType != Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(xml.nodeType));
	}
	xml.nodeName = name;
	return xml;
};
Xml.createPCData = function(data) {
	var xml = new Xml(Xml.PCData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(xml.nodeType));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createCData = function(data) {
	var xml = new Xml(Xml.CData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(xml.nodeType));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createComment = function(data) {
	var xml = new Xml(Xml.Comment);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(xml.nodeType));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocType = function(data) {
	var xml = new Xml(Xml.DocType);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(xml.nodeType));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createProcessingInstruction = function(data) {
	var xml = new Xml(Xml.ProcessingInstruction);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(xml.nodeType));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocument = function() {
	return new Xml(Xml.Document);
};
Xml.prototype = {
	nodeType: null
	,nodeName: null
	,nodeValue: null
	,parent: null
	,children: null
	,attributeMap: null
	,get: function(att) {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(this.nodeType));
		}
		var _this = this.attributeMap;
		if(__map_reserved[att] != null) {
			return _this.getReserved(att);
		} else {
			return _this.h[att];
		}
	}
	,set: function(att,value) {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(this.nodeType));
		}
		var _this = this.attributeMap;
		if(__map_reserved[att] != null) {
			_this.setReserved(att,value);
		} else {
			_this.h[att] = value;
		}
	}
	,exists: function(att) {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(this.nodeType));
		}
		var _this = this.attributeMap;
		if(__map_reserved[att] != null) {
			return _this.existsReserved(att);
		} else {
			return _this.h.hasOwnProperty(att);
		}
	}
	,attributes: function() {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(this.nodeType));
		}
		return this.attributeMap.keys();
	}
	,elementsNamed: function(name) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _$Xml_XmlType_$Impl_$.toString(this.nodeType));
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = this.children;
		while(_g1 < _g2.length) {
			var child = _g2[_g1];
			++_g1;
			var tmp;
			if(child.nodeType == Xml.Element) {
				if(child.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(child.nodeType));
				}
				tmp = child.nodeName == name;
			} else {
				tmp = false;
			}
			if(tmp) {
				_g.push(child);
			}
		}
		var ret = _g;
		return HxOverrides.iter(ret);
	}
	,firstElement: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _$Xml_XmlType_$Impl_$.toString(this.nodeType));
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.nodeType == Xml.Element) {
				return child;
			}
		}
		return null;
	}
	,addChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _$Xml_XmlType_$Impl_$.toString(this.nodeType));
		}
		if(x.parent != null) {
			x.parent.removeChild(x);
		}
		this.children.push(x);
		x.parent = this;
	}
	,removeChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _$Xml_XmlType_$Impl_$.toString(this.nodeType));
		}
		if(HxOverrides.remove(this.children,x)) {
			x.parent = null;
			return true;
		}
		return false;
	}
	,toString: function() {
		return haxe_xml_Printer.print(this);
	}
	,__class__: Xml
};
var haxe_StackItem = $hxEnums["haxe.StackItem"] = { __ename__ : "haxe.StackItem", __constructs__ : ["CFunction","Module","FilePos","Method","LocalFunction"]
	,CFunction: {_hx_index:0,__enum__:"haxe.StackItem",toString:$estr}
	,Module: ($_=function(m) { return {_hx_index:1,m:m,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["m"],$_)
	,FilePos: ($_=function(s,file,line,column) { return {_hx_index:2,s:s,file:file,line:line,column:column,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["s","file","line","column"],$_)
	,Method: ($_=function(classname,method) { return {_hx_index:3,classname:classname,method:method,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["classname","method"],$_)
	,LocalFunction: ($_=function(v) { return {_hx_index:4,v:v,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["v"],$_)
};
var haxe_CallStack = function() { };
$hxClasses["haxe.CallStack"] = haxe_CallStack;
haxe_CallStack.__name__ = "haxe.CallStack";
haxe_CallStack.getStack = function(e) {
	if(e == null) {
		return [];
	}
	var oldValue = Error.prepareStackTrace;
	Error.prepareStackTrace = function(error,callsites) {
		var stack = [];
		var _g = 0;
		while(_g < callsites.length) {
			var site = callsites[_g];
			++_g;
			if(haxe_CallStack.wrapCallSite != null) {
				site = haxe_CallStack.wrapCallSite(site);
			}
			var method = null;
			var fullName = site.getFunctionName();
			if(fullName != null) {
				var idx = fullName.lastIndexOf(".");
				if(idx >= 0) {
					var className = HxOverrides.substr(fullName,0,idx);
					var methodName = HxOverrides.substr(fullName,idx + 1,null);
					method = haxe_StackItem.Method(className,methodName);
				}
			}
			var fileName = site.getFileName();
			var fileAddr = fileName == null ? -1 : fileName.indexOf("file:");
			if(haxe_CallStack.wrapCallSite != null && fileAddr > 0) {
				fileName = HxOverrides.substr(fileName,fileAddr + 6,null);
			}
			stack.push(haxe_StackItem.FilePos(method,fileName,site.getLineNumber(),site.getColumnNumber()));
		}
		return stack;
	};
	var a = haxe_CallStack.makeStack(e.stack);
	Error.prepareStackTrace = oldValue;
	return a;
};
haxe_CallStack.callStack = function() {
	try {
		throw new Error();
	} catch( e ) {
		haxe_CallStack.lastException = e;
		var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
		var a = haxe_CallStack.getStack(e);
		a.shift();
		return a;
	}
};
haxe_CallStack.exceptionStack = function() {
	return haxe_CallStack.getStack(haxe_CallStack.lastException);
};
haxe_CallStack.toString = function(stack) {
	var b = new StringBuf();
	var _g = 0;
	while(_g < stack.length) {
		var s = stack[_g];
		++_g;
		b.b += "\nCalled from ";
		haxe_CallStack.itemToString(b,s);
	}
	return b.b;
};
haxe_CallStack.itemToString = function(b,s) {
	switch(s._hx_index) {
	case 0:
		b.b += "a C function";
		break;
	case 1:
		var m = s.m;
		b.b += "module ";
		b.b += m == null ? "null" : "" + m;
		break;
	case 2:
		var col = s.column;
		var line = s.line;
		var file = s.file;
		var s1 = s.s;
		if(s1 != null) {
			haxe_CallStack.itemToString(b,s1);
			b.b += " (";
		}
		b.b += file == null ? "null" : "" + file;
		b.b += " line ";
		b.b += line == null ? "null" : "" + line;
		if(col != null) {
			b.b += " column ";
			b.b += col == null ? "null" : "" + col;
		}
		if(s1 != null) {
			b.b += ")";
		}
		break;
	case 3:
		var meth = s.method;
		var cname = s.classname;
		b.b += cname == null ? "null" : "" + cname;
		b.b += ".";
		b.b += meth == null ? "null" : "" + meth;
		break;
	case 4:
		var n = s.v;
		b.b += "local function #";
		b.b += n == null ? "null" : "" + n;
		break;
	}
};
haxe_CallStack.makeStack = function(s) {
	if(s == null) {
		return [];
	} else if(typeof(s) == "string") {
		var stack = s.split("\n");
		if(stack[0] == "Error") {
			stack.shift();
		}
		var m = [];
		var rie10 = new EReg("^   at ([A-Za-z0-9_. ]+) \\(([^)]+):([0-9]+):([0-9]+)\\)$","");
		var _g = 0;
		while(_g < stack.length) {
			var line = stack[_g];
			++_g;
			if(rie10.match(line)) {
				var path = rie10.matched(1).split(".");
				var meth = path.pop();
				var file = rie10.matched(2);
				var line1 = Std.parseInt(rie10.matched(3));
				var column = Std.parseInt(rie10.matched(4));
				m.push(haxe_StackItem.FilePos(meth == "Anonymous function" ? haxe_StackItem.LocalFunction() : meth == "Global code" ? null : haxe_StackItem.Method(path.join("."),meth),file,line1,column));
			} else {
				m.push(haxe_StackItem.Module(StringTools.trim(line)));
			}
		}
		return m;
	} else {
		return s;
	}
};
var haxe_IMap = function() { };
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = "haxe.IMap";
haxe_IMap.prototype = {
	get: null
	,set: null
	,exists: null
	,remove: null
	,keys: null
	,iterator: null
	,keyValueIterator: null
	,__class__: haxe_IMap
};
var haxe__$Int64__$_$_$Int64 = function(high,low) {
	this.high = high;
	this.low = low;
};
$hxClasses["haxe._Int64.___Int64"] = haxe__$Int64__$_$_$Int64;
haxe__$Int64__$_$_$Int64.__name__ = "haxe._Int64.___Int64";
haxe__$Int64__$_$_$Int64.prototype = {
	high: null
	,low: null
	,__class__: haxe__$Int64__$_$_$Int64
};
var haxe_Log = function() { };
$hxClasses["haxe.Log"] = haxe_Log;
haxe_Log.__name__ = "haxe.Log";
haxe_Log.formatOutput = function(v,infos) {
	var str = Std.string(v);
	if(infos == null) {
		return str;
	}
	var pstr = infos.fileName + ":" + infos.lineNumber;
	if(infos.customParams != null) {
		var _g = 0;
		var _g1 = infos.customParams;
		while(_g < _g1.length) {
			var v1 = _g1[_g];
			++_g;
			str += ", " + Std.string(v1);
		}
	}
	return pstr + ": " + str;
};
haxe_Log.trace = function(v,infos) {
	var str = haxe_Log.formatOutput(v,infos);
	if(typeof(console) != "undefined" && console.log != null) {
		console.log(str);
	}
};
var haxe_Serializer = function() {
	this.buf = new StringBuf();
	this.cache = [];
	this.useCache = haxe_Serializer.USE_CACHE;
	this.useEnumIndex = haxe_Serializer.USE_ENUM_INDEX;
	this.shash = new haxe_ds_StringMap();
	this.scount = 0;
};
$hxClasses["haxe.Serializer"] = haxe_Serializer;
haxe_Serializer.__name__ = "haxe.Serializer";
haxe_Serializer.run = function(v) {
	var s = new haxe_Serializer();
	s.serialize(v);
	return s.toString();
};
haxe_Serializer.prototype = {
	buf: null
	,cache: null
	,shash: null
	,scount: null
	,useCache: null
	,useEnumIndex: null
	,toString: function() {
		return this.buf.b;
	}
	,serializeString: function(s) {
		var _this = this.shash;
		var x = __map_reserved[s] != null ? _this.getReserved(s) : _this.h[s];
		if(x != null) {
			this.buf.b += "R";
			this.buf.b += x == null ? "null" : "" + x;
			return;
		}
		var _this1 = this.shash;
		var value = this.scount++;
		if(__map_reserved[s] != null) {
			_this1.setReserved(s,value);
		} else {
			_this1.h[s] = value;
		}
		this.buf.b += "y";
		s = encodeURIComponent(s);
		this.buf.b += Std.string(s.length);
		this.buf.b += ":";
		this.buf.b += s == null ? "null" : "" + s;
	}
	,serializeRef: function(v) {
		var vt = typeof(v);
		var _g = 0;
		var _g1 = this.cache.length;
		while(_g < _g1) {
			var i = _g++;
			var ci = this.cache[i];
			if(typeof(ci) == vt && ci == v) {
				this.buf.b += "r";
				this.buf.b += i == null ? "null" : "" + i;
				return true;
			}
		}
		this.cache.push(v);
		return false;
	}
	,serializeFields: function(v) {
		var _g = 0;
		var _g1 = Reflect.fields(v);
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			this.serializeString(f);
			this.serialize(Reflect.field(v,f));
		}
		this.buf.b += "g";
	}
	,serialize: function(v) {
		var _g = Type.typeof(v);
		switch(_g._hx_index) {
		case 0:
			this.buf.b += "n";
			break;
		case 1:
			var v1 = v;
			if(v1 == 0) {
				this.buf.b += "z";
				return;
			}
			this.buf.b += "i";
			this.buf.b += v1 == null ? "null" : "" + v1;
			break;
		case 2:
			var v2 = v;
			if(isNaN(v2)) {
				this.buf.b += "k";
			} else if(!isFinite(v2)) {
				this.buf.b += v2 < 0 ? "m" : "p";
			} else {
				this.buf.b += "d";
				this.buf.b += v2 == null ? "null" : "" + v2;
			}
			break;
		case 3:
			this.buf.b += v ? "t" : "f";
			break;
		case 4:
			if(js_Boot.__instanceof(v,Class)) {
				var className = v.__name__;
				this.buf.b += "A";
				this.serializeString(className);
			} else if(js_Boot.__instanceof(v,Enum)) {
				this.buf.b += "B";
				this.serializeString(v.__ename__);
			} else {
				if(this.useCache && this.serializeRef(v)) {
					return;
				}
				this.buf.b += "o";
				this.serializeFields(v);
			}
			break;
		case 5:
			throw new js__$Boot_HaxeError("Cannot serialize function");
		case 6:
			var c = _g.c;
			if(c == String) {
				this.serializeString(v);
				return;
			}
			if(this.useCache && this.serializeRef(v)) {
				return;
			}
			switch(c) {
			case Array:
				var ucount = 0;
				this.buf.b += "a";
				var l = v["length"];
				var _g1 = 0;
				var _g11 = l;
				while(_g1 < _g11) {
					var i = _g1++;
					if(v[i] == null) {
						++ucount;
					} else {
						if(ucount > 0) {
							if(ucount == 1) {
								this.buf.b += "n";
							} else {
								this.buf.b += "u";
								this.buf.b += ucount == null ? "null" : "" + ucount;
							}
							ucount = 0;
						}
						this.serialize(v[i]);
					}
				}
				if(ucount > 0) {
					if(ucount == 1) {
						this.buf.b += "n";
					} else {
						this.buf.b += "u";
						this.buf.b += ucount == null ? "null" : "" + ucount;
					}
				}
				this.buf.b += "h";
				break;
			case Date:
				var d = v;
				this.buf.b += "v";
				this.buf.b += Std.string(d.getTime());
				break;
			case haxe_ds_IntMap:
				this.buf.b += "q";
				var v3 = v;
				var k = v3.keys();
				while(k.hasNext()) {
					var k1 = k.next();
					this.buf.b += ":";
					this.buf.b += k1 == null ? "null" : "" + k1;
					this.serialize(v3.h[k1]);
				}
				this.buf.b += "h";
				break;
			case haxe_ds_List:
				this.buf.b += "l";
				var v4 = v;
				var _g_head = v4.h;
				while(_g_head != null) {
					var val = _g_head.item;
					_g_head = _g_head.next;
					var i1 = val;
					this.serialize(i1);
				}
				this.buf.b += "h";
				break;
			case haxe_ds_ObjectMap:
				this.buf.b += "M";
				var v5 = v;
				var k2 = v5.keys();
				while(k2.hasNext()) {
					var k3 = k2.next();
					var id = Reflect.field(k3,"__id__");
					Reflect.deleteField(k3,"__id__");
					this.serialize(k3);
					k3["__id__"] = id;
					this.serialize(v5.h[k3.__id__]);
				}
				this.buf.b += "h";
				break;
			case haxe_ds_StringMap:
				this.buf.b += "b";
				var v6 = v;
				var k4 = v6.keys();
				while(k4.hasNext()) {
					var k5 = k4.next();
					this.serializeString(k5);
					this.serialize(__map_reserved[k5] != null ? v6.getReserved(k5) : v6.h[k5]);
				}
				this.buf.b += "h";
				break;
			case haxe_io_Bytes:
				var v7 = v;
				this.buf.b += "s";
				this.buf.b += Std.string(Math.ceil(v7.length * 8 / 6));
				this.buf.b += ":";
				var i2 = 0;
				var max = v7.length - 2;
				var b64 = haxe_Serializer.BASE64_CODES;
				if(b64 == null) {
					var this1 = new Array(haxe_Serializer.BASE64.length);
					b64 = this1;
					var _g2 = 0;
					var _g12 = haxe_Serializer.BASE64.length;
					while(_g2 < _g12) {
						var i3 = _g2++;
						b64[i3] = HxOverrides.cca(haxe_Serializer.BASE64,i3);
					}
					haxe_Serializer.BASE64_CODES = b64;
				}
				while(i2 < max) {
					var b1 = v7.b[i2++];
					var b2 = v7.b[i2++];
					var b3 = v7.b[i2++];
					this.buf.b += String.fromCodePoint(b64[b1 >> 2]);
					this.buf.b += String.fromCodePoint(b64[(b1 << 4 | b2 >> 4) & 63]);
					this.buf.b += String.fromCodePoint(b64[(b2 << 2 | b3 >> 6) & 63]);
					this.buf.b += String.fromCodePoint(b64[b3 & 63]);
				}
				if(i2 == max) {
					var b11 = v7.b[i2++];
					var b21 = v7.b[i2++];
					this.buf.b += String.fromCodePoint(b64[b11 >> 2]);
					this.buf.b += String.fromCodePoint(b64[(b11 << 4 | b21 >> 4) & 63]);
					this.buf.b += String.fromCodePoint(b64[b21 << 2 & 63]);
				} else if(i2 == max + 1) {
					var b12 = v7.b[i2++];
					this.buf.b += String.fromCodePoint(b64[b12 >> 2]);
					this.buf.b += String.fromCodePoint(b64[b12 << 4 & 63]);
				}
				break;
			default:
				if(this.useCache) {
					this.cache.pop();
				}
				if(v.hxSerialize != null) {
					this.buf.b += "C";
					this.serializeString(c.__name__);
					if(this.useCache) {
						this.cache.push(v);
					}
					v.hxSerialize(this);
					this.buf.b += "g";
				} else {
					this.buf.b += "c";
					this.serializeString(c.__name__);
					if(this.useCache) {
						this.cache.push(v);
					}
					this.serializeFields(v);
				}
			}
			break;
		case 7:
			var e = _g.e;
			if(this.useCache) {
				if(this.serializeRef(v)) {
					return;
				}
				this.cache.pop();
			}
			this.buf.b += Std.string(this.useEnumIndex ? "j" : "w");
			this.serializeString(e.__ename__);
			if(this.useEnumIndex) {
				this.buf.b += ":";
				this.buf.b += Std.string(v._hx_index);
			} else {
				var e1 = v;
				this.serializeString($hxEnums[e1.__enum__].__constructs__[e1._hx_index]);
			}
			this.buf.b += ":";
			var params = Type.enumParameters(v);
			this.buf.b += Std.string(params.length);
			var _g3 = 0;
			while(_g3 < params.length) {
				var p = params[_g3];
				++_g3;
				this.serialize(p);
			}
			if(this.useCache) {
				this.cache.push(v);
			}
			break;
		default:
			throw new js__$Boot_HaxeError("Cannot serialize " + Std.string(v));
		}
	}
	,__class__: haxe_Serializer
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = kha_Scheduler.addTimeTask(function() {
		me.run();
	},time_ms / 1000,time_ms / 1000);
};
$hxClasses["haxe.Timer"] = haxe_Timer;
haxe_Timer.__name__ = "haxe.Timer";
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.measure = function(f,pos) {
	var t0 = kha_Scheduler.realTime();
	var r = f();
	haxe_Log.trace(kha_Scheduler.realTime() - t0 + "s",pos);
	return r;
};
haxe_Timer.stamp = function() {
	return kha_Scheduler.realTime();
};
haxe_Timer.prototype = {
	id: null
	,stop: function() {
		if(this.id == null) {
			return;
		}
		kha_Scheduler.removeTimeTask(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var haxe__$Unserializer_DefaultResolver = function() {
};
$hxClasses["haxe._Unserializer.DefaultResolver"] = haxe__$Unserializer_DefaultResolver;
haxe__$Unserializer_DefaultResolver.__name__ = "haxe._Unserializer.DefaultResolver";
haxe__$Unserializer_DefaultResolver.prototype = {
	resolveClass: function(name) {
		return $hxClasses[name];
	}
	,resolveEnum: function(name) {
		return $hxEnums[name];
	}
	,__class__: haxe__$Unserializer_DefaultResolver
};
var haxe_Unserializer = function(buf) {
	this.buf = buf;
	this.length = buf.length;
	this.pos = 0;
	this.scache = [];
	this.cache = [];
	var r = haxe_Unserializer.DEFAULT_RESOLVER;
	if(r == null) {
		r = new haxe__$Unserializer_DefaultResolver();
		haxe_Unserializer.DEFAULT_RESOLVER = r;
	}
	this.resolver = r;
};
$hxClasses["haxe.Unserializer"] = haxe_Unserializer;
haxe_Unserializer.__name__ = "haxe.Unserializer";
haxe_Unserializer.initCodes = function() {
	var codes = [];
	var _g = 0;
	var _g1 = haxe_Unserializer.BASE64.length;
	while(_g < _g1) {
		var i = _g++;
		codes[haxe_Unserializer.BASE64.charCodeAt(i)] = i;
	}
	return codes;
};
haxe_Unserializer.run = function(v) {
	return new haxe_Unserializer(v).unserialize();
};
haxe_Unserializer.prototype = {
	buf: null
	,pos: null
	,length: null
	,cache: null
	,scache: null
	,resolver: null
	,setResolver: function(r) {
		if(r == null) {
			if(haxe__$Unserializer_NullResolver.instance == null) {
				haxe__$Unserializer_NullResolver.instance = new haxe__$Unserializer_NullResolver();
			}
			this.resolver = haxe__$Unserializer_NullResolver.instance;
		} else {
			this.resolver = r;
		}
	}
	,readDigits: function() {
		var k = 0;
		var s = false;
		var fpos = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c == 45) {
				if(this.pos != fpos) {
					break;
				}
				s = true;
				this.pos++;
				continue;
			}
			if(c < 48 || c > 57) {
				break;
			}
			k = k * 10 + (c - 48);
			this.pos++;
		}
		if(s) {
			k *= -1;
		}
		return k;
	}
	,readFloat: function() {
		var p1 = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c >= 43 && c < 58 || c == 101 || c == 69) {
				this.pos++;
			} else {
				break;
			}
		}
		return parseFloat(HxOverrides.substr(this.buf,p1,this.pos - p1));
	}
	,unserializeObject: function(o) {
		while(true) {
			if(this.pos >= this.length) {
				throw new js__$Boot_HaxeError("Invalid object");
			}
			if(this.buf.charCodeAt(this.pos) == 103) {
				break;
			}
			var k = this.unserialize();
			if(typeof(k) != "string") {
				throw new js__$Boot_HaxeError("Invalid object key");
			}
			var v = this.unserialize();
			o[k] = v;
		}
		this.pos++;
	}
	,unserializeEnum: function(edecl,tag) {
		if(this.buf.charCodeAt(this.pos++) != 58) {
			throw new js__$Boot_HaxeError("Invalid enum format");
		}
		var nargs = this.readDigits();
		if(nargs == 0) {
			return Type.createEnum(edecl,tag);
		}
		var args = [];
		while(nargs-- > 0) args.push(this.unserialize());
		return Type.createEnum(edecl,tag,args);
	}
	,unserialize: function() {
		switch(this.buf.charCodeAt(this.pos++)) {
		case 65:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) {
				throw new js__$Boot_HaxeError("Class not found " + name);
			}
			return cl;
		case 66:
			var name1 = this.unserialize();
			var e = this.resolver.resolveEnum(name1);
			if(e == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name1);
			}
			return e;
		case 67:
			var name2 = this.unserialize();
			var cl1 = this.resolver.resolveClass(name2);
			if(cl1 == null) {
				throw new js__$Boot_HaxeError("Class not found " + name2);
			}
			var o = Object.create(cl1.prototype);
			this.cache.push(o);
			o.hxUnserialize(this);
			if(this.buf.charCodeAt(this.pos++) != 103) {
				throw new js__$Boot_HaxeError("Invalid custom data");
			}
			return o;
		case 77:
			var h = new haxe_ds_ObjectMap();
			this.cache.push(h);
			var buf = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s = this.unserialize();
				h.set(s,this.unserialize());
			}
			this.pos++;
			return h;
		case 82:
			var n = this.readDigits();
			if(n < 0 || n >= this.scache.length) {
				throw new js__$Boot_HaxeError("Invalid string reference");
			}
			return this.scache[n];
		case 97:
			var buf1 = this.buf;
			var a = [];
			this.cache.push(a);
			while(true) {
				var c = this.buf.charCodeAt(this.pos);
				if(c == 104) {
					this.pos++;
					break;
				}
				if(c == 117) {
					this.pos++;
					var n1 = this.readDigits();
					a[a.length + n1 - 1] = null;
				} else {
					a.push(this.unserialize());
				}
			}
			return a;
		case 98:
			var h1 = new haxe_ds_StringMap();
			this.cache.push(h1);
			var buf2 = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s1 = this.unserialize();
				var value = this.unserialize();
				if(__map_reserved[s1] != null) {
					h1.setReserved(s1,value);
				} else {
					h1.h[s1] = value;
				}
			}
			this.pos++;
			return h1;
		case 99:
			var name3 = this.unserialize();
			var cl2 = this.resolver.resolveClass(name3);
			if(cl2 == null) {
				throw new js__$Boot_HaxeError("Class not found " + name3);
			}
			var o1 = Object.create(cl2.prototype);
			this.cache.push(o1);
			this.unserializeObject(o1);
			return o1;
		case 100:
			return this.readFloat();
		case 102:
			return false;
		case 105:
			return this.readDigits();
		case 106:
			var name4 = this.unserialize();
			var edecl = this.resolver.resolveEnum(name4);
			if(edecl == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name4);
			}
			this.pos++;
			var index = this.readDigits();
			var tag = edecl.__constructs__.slice()[index];
			if(tag == null) {
				throw new js__$Boot_HaxeError("Unknown enum index " + name4 + "@" + index);
			}
			var e1 = this.unserializeEnum(edecl,tag);
			this.cache.push(e1);
			return e1;
		case 107:
			return NaN;
		case 108:
			var l = new haxe_ds_List();
			this.cache.push(l);
			var buf3 = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) l.add(this.unserialize());
			this.pos++;
			return l;
		case 109:
			return -Infinity;
		case 110:
			return null;
		case 111:
			var o2 = { };
			this.cache.push(o2);
			this.unserializeObject(o2);
			return o2;
		case 112:
			return Infinity;
		case 113:
			var h2 = new haxe_ds_IntMap();
			this.cache.push(h2);
			var buf4 = this.buf;
			var c1 = this.buf.charCodeAt(this.pos++);
			while(c1 == 58) {
				var i = this.readDigits();
				var value1 = this.unserialize();
				h2.h[i] = value1;
				c1 = this.buf.charCodeAt(this.pos++);
			}
			if(c1 != 104) {
				throw new js__$Boot_HaxeError("Invalid IntMap format");
			}
			return h2;
		case 114:
			var n2 = this.readDigits();
			if(n2 < 0 || n2 >= this.cache.length) {
				throw new js__$Boot_HaxeError("Invalid reference");
			}
			return this.cache[n2];
		case 115:
			var len = this.readDigits();
			var buf5 = this.buf;
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len) {
				throw new js__$Boot_HaxeError("Invalid bytes length");
			}
			var codes = haxe_Unserializer.CODES;
			if(codes == null) {
				codes = haxe_Unserializer.initCodes();
				haxe_Unserializer.CODES = codes;
			}
			var i1 = this.pos;
			var rest = len & 3;
			var size = (len >> 2) * 3 + (rest >= 2 ? rest - 1 : 0);
			var max = i1 + (len - rest);
			var bytes = new haxe_io_Bytes(new ArrayBuffer(size));
			var bpos = 0;
			while(i1 < max) {
				var c11 = codes[buf5.charCodeAt(i1++)];
				var c2 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = c11 << 2 | c2 >> 4;
				var c3 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = c2 << 4 | c3 >> 2;
				var c4 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = c3 << 6 | c4;
			}
			if(rest >= 2) {
				var c12 = codes[buf5.charCodeAt(i1++)];
				var c21 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = c12 << 2 | c21 >> 4;
				if(rest == 3) {
					var c31 = codes[buf5.charCodeAt(i1++)];
					bytes.b[bpos++] = c21 << 4 | c31 >> 2;
				}
			}
			this.pos += len;
			this.cache.push(bytes);
			return bytes;
		case 116:
			return true;
		case 118:
			var d;
			if(this.buf.charCodeAt(this.pos) >= 48 && this.buf.charCodeAt(this.pos) <= 57 && this.buf.charCodeAt(this.pos + 1) >= 48 && this.buf.charCodeAt(this.pos + 1) <= 57 && this.buf.charCodeAt(this.pos + 2) >= 48 && this.buf.charCodeAt(this.pos + 2) <= 57 && this.buf.charCodeAt(this.pos + 3) >= 48 && this.buf.charCodeAt(this.pos + 3) <= 57 && this.buf.charCodeAt(this.pos + 4) == 45) {
				d = HxOverrides.strDate(HxOverrides.substr(this.buf,this.pos,19));
				this.pos += 19;
			} else {
				d = new Date(this.readFloat());
			}
			this.cache.push(d);
			return d;
		case 119:
			var name5 = this.unserialize();
			var edecl1 = this.resolver.resolveEnum(name5);
			if(edecl1 == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name5);
			}
			var e2 = this.unserializeEnum(edecl1,this.unserialize());
			this.cache.push(e2);
			return e2;
		case 120:
			throw js__$Boot_HaxeError.wrap(this.unserialize());
		case 121:
			var len1 = this.readDigits();
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len1) {
				throw new js__$Boot_HaxeError("Invalid string length");
			}
			var s2 = HxOverrides.substr(this.buf,this.pos,len1);
			this.pos += len1;
			s2 = decodeURIComponent(s2.split("+").join(" "));
			this.scache.push(s2);
			return s2;
		case 122:
			return 0;
		default:
		}
		this.pos--;
		throw new js__$Boot_HaxeError("Invalid char " + this.buf.charAt(this.pos) + " at position " + this.pos);
	}
	,__class__: haxe_Unserializer
};
var haxe__$Unserializer_NullResolver = function() {
};
$hxClasses["haxe._Unserializer.NullResolver"] = haxe__$Unserializer_NullResolver;
haxe__$Unserializer_NullResolver.__name__ = "haxe._Unserializer.NullResolver";
haxe__$Unserializer_NullResolver.prototype = {
	resolveClass: function(name) {
		return null;
	}
	,resolveEnum: function(name) {
		return null;
	}
	,__class__: haxe__$Unserializer_NullResolver
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
$hxClasses["haxe.io.Bytes"] = haxe_io_Bytes;
haxe_io_Bytes.__name__ = "haxe.io.Bytes";
haxe_io_Bytes.ofString = function(s,encoding) {
	if(encoding == haxe_io_Encoding.RawNative) {
		var buf = new Uint8Array(s.length << 1);
		var _g = 0;
		var _g1 = s.length;
		while(_g < _g1) {
			var i = _g++;
			var c = s.charCodeAt(i);
			buf[i << 1] = c & 255;
			buf[i << 1 | 1] = c >> 8;
		}
		return new haxe_io_Bytes(buf.buffer);
	}
	var a = [];
	var i1 = 0;
	while(i1 < s.length) {
		var c1 = s.charCodeAt(i1++);
		if(55296 <= c1 && c1 <= 56319) {
			c1 = c1 - 55232 << 10 | s.charCodeAt(i1++) & 1023;
		}
		if(c1 <= 127) {
			a.push(c1);
		} else if(c1 <= 2047) {
			a.push(192 | c1 >> 6);
			a.push(128 | c1 & 63);
		} else if(c1 <= 65535) {
			a.push(224 | c1 >> 12);
			a.push(128 | c1 >> 6 & 63);
			a.push(128 | c1 & 63);
		} else {
			a.push(240 | c1 >> 18);
			a.push(128 | c1 >> 12 & 63);
			a.push(128 | c1 >> 6 & 63);
			a.push(128 | c1 & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) {
		return hb;
	}
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.prototype = {
	length: null
	,b: null
	,data: null
	,blit: function(pos,src,srcpos,len) {
		if(pos < 0 || srcpos < 0 || len < 0 || pos + len > this.length || srcpos + len > src.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(srcpos == 0 && len == src.b.byteLength) {
			this.b.set(src.b,pos);
		} else {
			this.b.set(src.b.subarray(srcpos,srcpos + len),pos);
		}
	}
	,sub: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		return new haxe_io_Bytes(this.b.buffer.slice(pos + this.b.byteOffset,pos + this.b.byteOffset + len));
	}
	,getDouble: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getFloat64(pos,true);
	}
	,getFloat: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getFloat32(pos,true);
	}
	,setDouble: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setFloat64(pos,v,true);
	}
	,setFloat: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setFloat32(pos,v,true);
	}
	,getUInt16: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getUint16(pos,true);
	}
	,getInt32: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getInt32(pos,true);
	}
	,setInt32: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setInt32(pos,v,true);
	}
	,getString: function(pos,len,encoding) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(encoding == null) {
			encoding = haxe_io_Encoding.UTF8;
		}
		var s = "";
		var b = this.b;
		var i = pos;
		var max = pos + len;
		switch(encoding._hx_index) {
		case 0:
			var debug = pos > 0;
			while(i < max) {
				var c = b[i++];
				if(c < 128) {
					if(c == 0) {
						break;
					}
					s += String.fromCodePoint(c);
				} else if(c < 224) {
					var code = (c & 63) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else if(c < 240) {
					var c2 = b[i++];
					var code1 = (c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code1);
				} else {
					var c21 = b[i++];
					var c3 = b[i++];
					var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(u);
				}
			}
			break;
		case 1:
			while(i < max) {
				var c1 = b[i++] | b[i++] << 8;
				s += String.fromCodePoint(c1);
			}
			break;
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,__class__: haxe_io_Bytes
};
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__ : "haxe.io.Encoding", __constructs__ : ["UTF8","RawNative"]
	,UTF8: {_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
var haxe_crypto_Base64 = function() { };
$hxClasses["haxe.crypto.Base64"] = haxe_crypto_Base64;
haxe_crypto_Base64.__name__ = "haxe.crypto.Base64";
haxe_crypto_Base64.encode = function(bytes,complement) {
	if(complement == null) {
		complement = true;
	}
	var str = new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).encodeBytes(bytes).toString();
	if(complement) {
		switch(bytes.length % 3) {
		case 1:
			str += "==";
			break;
		case 2:
			str += "=";
			break;
		default:
		}
	}
	return str;
};
haxe_crypto_Base64.decode = function(str,complement) {
	if(complement == null) {
		complement = true;
	}
	if(complement) {
		while(HxOverrides.cca(str,str.length - 1) == 61) str = HxOverrides.substr(str,0,-1);
	}
	return new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).decodeBytes(haxe_io_Bytes.ofString(str));
};
var haxe_crypto_BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) ++nbits;
	if(nbits > 8 || len != 1 << nbits) {
		throw new js__$Boot_HaxeError("BaseCode : base length must be a power of two.");
	}
	this.base = base;
	this.nbits = nbits;
};
$hxClasses["haxe.crypto.BaseCode"] = haxe_crypto_BaseCode;
haxe_crypto_BaseCode.__name__ = "haxe.crypto.BaseCode";
haxe_crypto_BaseCode.prototype = {
	base: null
	,nbits: null
	,tbl: null
	,encodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		var size = b.length * 8 / nbits | 0;
		var out = new haxe_io_Bytes(new ArrayBuffer(size + (b.length * 8 % nbits == 0 ? 0 : 1)));
		var buf = 0;
		var curbits = 0;
		var mask = (1 << nbits) - 1;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < nbits) {
				curbits += 8;
				buf <<= 8;
				buf |= b.b[pin++];
			}
			curbits -= nbits;
			out.b[pout++] = base.b[buf >> curbits & mask];
		}
		if(curbits > 0) {
			out.b[pout++] = base.b[buf << nbits - curbits & mask];
		}
		return out;
	}
	,initTable: function() {
		var tbl = [];
		var _g = 0;
		while(_g < 256) {
			var i = _g++;
			tbl[i] = -1;
		}
		var _g1 = 0;
		var _g2 = this.base.length;
		while(_g1 < _g2) {
			var i1 = _g1++;
			tbl[this.base.b[i1]] = i1;
		}
		this.tbl = tbl;
	}
	,decodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		if(this.tbl == null) {
			this.initTable();
		}
		var tbl = this.tbl;
		var size = b.length * nbits >> 3;
		var out = new haxe_io_Bytes(new ArrayBuffer(size));
		var buf = 0;
		var curbits = 0;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < 8) {
				curbits += nbits;
				buf <<= nbits;
				var i = tbl[b.b[pin++]];
				if(i == -1) {
					throw new js__$Boot_HaxeError("BaseCode : invalid encoded char");
				}
				buf |= i;
			}
			curbits -= 8;
			out.b[pout++] = buf >> curbits & 255;
		}
		return out;
	}
	,__class__: haxe_crypto_BaseCode
};
var haxe_ds_BalancedTree = function() {
};
$hxClasses["haxe.ds.BalancedTree"] = haxe_ds_BalancedTree;
haxe_ds_BalancedTree.__name__ = "haxe.ds.BalancedTree";
haxe_ds_BalancedTree.__interfaces__ = [haxe_IMap];
haxe_ds_BalancedTree.prototype = {
	root: null
	,set: function(key,value) {
		this.root = this.setLoop(key,value,this.root);
	}
	,get: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) {
				return node.value;
			}
			if(c < 0) {
				node = node.left;
			} else {
				node = node.right;
			}
		}
		return null;
	}
	,remove: function(key) {
		try {
			this.root = this.removeLoop(key,this.root);
			return true;
		} catch( e ) {
			haxe_CallStack.lastException = e;
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			if(typeof(e1) == "string") {
				var e2 = e1;
				return false;
			} else {
				throw e;
			}
		}
	}
	,exists: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) {
				return true;
			} else if(c < 0) {
				node = node.left;
			} else {
				node = node.right;
			}
		}
		return false;
	}
	,iterator: function() {
		var ret = [];
		this.iteratorLoop(this.root,ret);
		return HxOverrides.iter(ret);
	}
	,keyValueIterator: function() {
		return new haxe_iterators_MapKeyValueIterator(this);
	}
	,keys: function() {
		var ret = [];
		this.keysLoop(this.root,ret);
		return HxOverrides.iter(ret);
	}
	,setLoop: function(k,v,node) {
		if(node == null) {
			return new haxe_ds_TreeNode(null,k,v,null);
		}
		var c = this.compare(k,node.key);
		if(c == 0) {
			return new haxe_ds_TreeNode(node.left,k,v,node.right,node == null ? 0 : node._height);
		} else if(c < 0) {
			var nl = this.setLoop(k,v,node.left);
			return this.balance(nl,node.key,node.value,node.right);
		} else {
			var nr = this.setLoop(k,v,node.right);
			return this.balance(node.left,node.key,node.value,nr);
		}
	}
	,removeLoop: function(k,node) {
		if(node == null) {
			throw new js__$Boot_HaxeError("Not_found");
		}
		var c = this.compare(k,node.key);
		if(c == 0) {
			return this.merge(node.left,node.right);
		} else if(c < 0) {
			return this.balance(this.removeLoop(k,node.left),node.key,node.value,node.right);
		} else {
			return this.balance(node.left,node.key,node.value,this.removeLoop(k,node.right));
		}
	}
	,iteratorLoop: function(node,acc) {
		if(node != null) {
			this.iteratorLoop(node.left,acc);
			acc.push(node.value);
			this.iteratorLoop(node.right,acc);
		}
	}
	,keysLoop: function(node,acc) {
		if(node != null) {
			this.keysLoop(node.left,acc);
			acc.push(node.key);
			this.keysLoop(node.right,acc);
		}
	}
	,merge: function(t1,t2) {
		if(t1 == null) {
			return t2;
		}
		if(t2 == null) {
			return t1;
		}
		var t = this.minBinding(t2);
		return this.balance(t1,t.key,t.value,this.removeMinBinding(t2));
	}
	,minBinding: function(t) {
		if(t == null) {
			throw new js__$Boot_HaxeError("Not_found");
		} else if(t.left == null) {
			return t;
		} else {
			return this.minBinding(t.left);
		}
	}
	,removeMinBinding: function(t) {
		if(t.left == null) {
			return t.right;
		} else {
			return this.balance(this.removeMinBinding(t.left),t.key,t.value,t.right);
		}
	}
	,balance: function(l,k,v,r) {
		var hl = l == null ? 0 : l._height;
		var hr = r == null ? 0 : r._height;
		if(hl > hr + 2) {
			var _this = l.left;
			var _this1 = l.right;
			if((_this == null ? 0 : _this._height) >= (_this1 == null ? 0 : _this1._height)) {
				return new haxe_ds_TreeNode(l.left,l.key,l.value,new haxe_ds_TreeNode(l.right,k,v,r));
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l.left,l.key,l.value,l.right.left),l.right.key,l.right.value,new haxe_ds_TreeNode(l.right.right,k,v,r));
			}
		} else if(hr > hl + 2) {
			var _this2 = r.right;
			var _this3 = r.left;
			if((_this2 == null ? 0 : _this2._height) > (_this3 == null ? 0 : _this3._height)) {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left),r.key,r.value,r.right);
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left.left),r.left.key,r.left.value,new haxe_ds_TreeNode(r.left.right,r.key,r.value,r.right));
			}
		} else {
			return new haxe_ds_TreeNode(l,k,v,r,(hl > hr ? hl : hr) + 1);
		}
	}
	,compare: function(k1,k2) {
		return Reflect.compare(k1,k2);
	}
	,__class__: haxe_ds_BalancedTree
};
var haxe_ds_TreeNode = function(l,k,v,r,h) {
	if(h == null) {
		h = -1;
	}
	this.left = l;
	this.key = k;
	this.value = v;
	this.right = r;
	if(h == -1) {
		var tmp;
		var _this = this.left;
		var _this1 = this.right;
		if((_this == null ? 0 : _this._height) > (_this1 == null ? 0 : _this1._height)) {
			var _this2 = this.left;
			tmp = _this2 == null ? 0 : _this2._height;
		} else {
			var _this3 = this.right;
			tmp = _this3 == null ? 0 : _this3._height;
		}
		this._height = tmp + 1;
	} else {
		this._height = h;
	}
};
$hxClasses["haxe.ds.TreeNode"] = haxe_ds_TreeNode;
haxe_ds_TreeNode.__name__ = "haxe.ds.TreeNode";
haxe_ds_TreeNode.prototype = {
	left: null
	,right: null
	,key: null
	,value: null
	,_height: null
	,__class__: haxe_ds_TreeNode
};
var haxe_ds_EnumValueMap = function() {
	haxe_ds_BalancedTree.call(this);
};
$hxClasses["haxe.ds.EnumValueMap"] = haxe_ds_EnumValueMap;
haxe_ds_EnumValueMap.__name__ = "haxe.ds.EnumValueMap";
haxe_ds_EnumValueMap.__interfaces__ = [haxe_IMap];
haxe_ds_EnumValueMap.__super__ = haxe_ds_BalancedTree;
haxe_ds_EnumValueMap.prototype = $extend(haxe_ds_BalancedTree.prototype,{
	compare: function(k1,k2) {
		var d = k1._hx_index - k2._hx_index;
		if(d != 0) {
			return d;
		}
		var p1 = Type.enumParameters(k1);
		var p2 = Type.enumParameters(k2);
		if(p1.length == 0 && p2.length == 0) {
			return 0;
		}
		return this.compareArgs(p1,p2);
	}
	,compareArgs: function(a1,a2) {
		var ld = a1.length - a2.length;
		if(ld != 0) {
			return ld;
		}
		var _g = 0;
		var _g1 = a1.length;
		while(_g < _g1) {
			var i = _g++;
			var d = this.compareArg(a1[i],a2[i]);
			if(d != 0) {
				return d;
			}
		}
		return 0;
	}
	,compareArg: function(v1,v2) {
		if(Reflect.isEnumValue(v1) && Reflect.isEnumValue(v2)) {
			return this.compare(v1,v2);
		} else if(((v1) instanceof Array) && v1.__enum__ == null && (((v2) instanceof Array) && v2.__enum__ == null)) {
			return this.compareArgs(v1,v2);
		} else {
			return Reflect.compare(v1,v2);
		}
	}
	,__class__: haxe_ds_EnumValueMap
});
var haxe_ds_IntMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.IntMap"] = haxe_ds_IntMap;
haxe_ds_IntMap.__name__ = "haxe.ds.IntMap";
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	h: null
	,set: function(key,value) {
		this.h[key] = value;
	}
	,get: function(key) {
		return this.h[key];
	}
	,exists: function(key) {
		return this.h.hasOwnProperty(key);
	}
	,remove: function(key) {
		if(!this.h.hasOwnProperty(key)) {
			return false;
		}
		delete(this.h[key]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) this.h.hasOwnProperty(key) ? a.push(key | 0) : null;
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i];
		}};
	}
	,keyValueIterator: function() {
		return new haxe_iterators_MapKeyValueIterator(this);
	}
	,__class__: haxe_ds_IntMap
};
var haxe_ds__$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
$hxClasses["haxe.ds._List.ListNode"] = haxe_ds__$List_ListNode;
haxe_ds__$List_ListNode.__name__ = "haxe.ds._List.ListNode";
haxe_ds__$List_ListNode.prototype = {
	item: null
	,next: null
	,__class__: haxe_ds__$List_ListNode
};
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
$hxClasses["haxe.ds.ObjectMap"] = haxe_ds_ObjectMap;
haxe_ds_ObjectMap.__name__ = "haxe.ds.ObjectMap";
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.prototype = {
	h: null
	,set: function(key,value) {
		var id = key.__id__ || (key.__id__ = $global.$haxeUID++);
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,get: function(key) {
		return this.h[key.__id__];
	}
	,exists: function(key) {
		return this.h.__keys__[key.__id__] != null;
	}
	,remove: function(key) {
		var id = key.__id__;
		if(this.h.__keys__[id] == null) {
			return false;
		}
		delete(this.h[id]);
		delete(this.h.__keys__[id]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i.__id__];
		}};
	}
	,keyValueIterator: function() {
		return new haxe_iterators_MapKeyValueIterator(this);
	}
	,toString: function() {
		var s_b = "";
		s_b += "{";
		var it = this.keys();
		var i = it;
		while(i.hasNext()) {
			var i1 = i.next();
			s_b += Std.string(Std.string(i1));
			s_b += " => ";
			s_b += Std.string(Std.string(this.h[i1.__id__]));
			if(it.hasNext()) {
				s_b += ", ";
			}
		}
		s_b += "}";
		return s_b;
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds__$StringMap_StringMapIterator = function(map,keys) {
	this.map = map;
	this.keys = keys;
	this.index = 0;
	this.count = keys.length;
};
$hxClasses["haxe.ds._StringMap.StringMapIterator"] = haxe_ds__$StringMap_StringMapIterator;
haxe_ds__$StringMap_StringMapIterator.__name__ = "haxe.ds._StringMap.StringMapIterator";
haxe_ds__$StringMap_StringMapIterator.prototype = {
	map: null
	,keys: null
	,index: null
	,count: null
	,hasNext: function() {
		return this.index < this.count;
	}
	,next: function() {
		var _this = this.map;
		var key = this.keys[this.index++];
		if(__map_reserved[key] != null) {
			return _this.getReserved(key);
		} else {
			return _this.h[key];
		}
	}
	,__class__: haxe_ds__$StringMap_StringMapIterator
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
haxe_ds_StringMap.__name__ = "haxe.ds.StringMap";
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	h: null
	,rh: null
	,set: function(key,value) {
		if(__map_reserved[key] != null) {
			this.setReserved(key,value);
		} else {
			this.h[key] = value;
		}
	}
	,get: function(key) {
		if(__map_reserved[key] != null) {
			return this.getReserved(key);
		}
		return this.h[key];
	}
	,exists: function(key) {
		if(__map_reserved[key] != null) {
			return this.existsReserved(key);
		}
		return this.h.hasOwnProperty(key);
	}
	,setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,remove: function(key) {
		if(__map_reserved[key] != null) {
			key = "$" + key;
			if(this.rh == null || !this.rh.hasOwnProperty(key)) {
				return false;
			}
			delete(this.rh[key]);
			return true;
		} else {
			if(!this.h.hasOwnProperty(key)) {
				return false;
			}
			delete(this.h[key]);
			return true;
		}
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	,iterator: function() {
		return new haxe_ds__$StringMap_StringMapIterator(this,this.arrayKeys());
	}
	,keyValueIterator: function() {
		return new haxe_iterators_MapKeyValueIterator(this);
	}
	,toString: function() {
		var s_b = "";
		s_b += "{";
		var keys = this.arrayKeys();
		var _g = 0;
		var _g1 = keys.length;
		while(_g < _g1) {
			var i = _g++;
			var k = keys[i];
			s_b += k == null ? "null" : "" + k;
			s_b += " => ";
			s_b += Std.string(Std.string(__map_reserved[k] != null ? this.getReserved(k) : this.h[k]));
			if(i < keys.length - 1) {
				s_b += ", ";
			}
		}
		s_b += "}";
		return s_b;
	}
	,__class__: haxe_ds_StringMap
};
var haxe_io_BytesBuffer = function() {
	this.pos = 0;
	this.size = 0;
};
$hxClasses["haxe.io.BytesBuffer"] = haxe_io_BytesBuffer;
haxe_io_BytesBuffer.__name__ = "haxe.io.BytesBuffer";
haxe_io_BytesBuffer.prototype = {
	buffer: null
	,view: null
	,u8: null
	,pos: null
	,size: null
	,addByte: function(byte) {
		if(this.pos == this.size) {
			this.grow(1);
		}
		this.view.setUint8(this.pos++,byte);
	}
	,addBytes: function(src,pos,len) {
		if(pos < 0 || len < 0 || pos + len > src.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(this.pos + len > this.size) {
			this.grow(len);
		}
		if(this.size == 0) {
			return;
		}
		var sub = new Uint8Array(src.b.buffer,src.b.byteOffset + pos,len);
		this.u8.set(sub,this.pos);
		this.pos += len;
	}
	,grow: function(delta) {
		var req = this.pos + delta;
		var nsize = this.size == 0 ? 16 : this.size;
		while(nsize < req) nsize = nsize * 3 >> 1;
		var nbuf = new ArrayBuffer(nsize);
		var nu8 = new Uint8Array(nbuf);
		if(this.size > 0) {
			nu8.set(this.u8);
		}
		this.size = nsize;
		this.buffer = nbuf;
		this.u8 = nu8;
		this.view = new DataView(this.buffer);
	}
	,getBytes: function() {
		if(this.size == 0) {
			return new haxe_io_Bytes(new ArrayBuffer(0));
		}
		var b = new haxe_io_Bytes(this.buffer);
		b.length = this.pos;
		return b;
	}
	,__class__: haxe_io_BytesBuffer
};
var haxe_io_Input = function() { };
$hxClasses["haxe.io.Input"] = haxe_io_Input;
haxe_io_Input.__name__ = "haxe.io.Input";
haxe_io_Input.prototype = {
	bigEndian: null
	,readByte: function() {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,readBytes: function(s,pos,len) {
		var k = len;
		var b = s.b;
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		try {
			while(k > 0) {
				b[pos] = this.readByte();
				++pos;
				--k;
			}
		} catch( eof ) {
			haxe_CallStack.lastException = eof;
			var eof1 = ((eof) instanceof js__$Boot_HaxeError) ? eof.val : eof;
			if(((eof1) instanceof haxe_io_Eof)) {
				var eof2 = eof1;
			} else {
				throw eof;
			}
		}
		return len - k;
	}
	,readFullBytes: function(s,pos,len) {
		while(len > 0) {
			var k = this.readBytes(s,pos,len);
			if(k == 0) {
				throw new js__$Boot_HaxeError(haxe_io_Error.Blocked);
			}
			pos += k;
			len -= k;
		}
	}
	,read: function(nbytes) {
		var s = new haxe_io_Bytes(new ArrayBuffer(nbytes));
		var p = 0;
		while(nbytes > 0) {
			var k = this.readBytes(s,p,nbytes);
			if(k == 0) {
				throw new js__$Boot_HaxeError(haxe_io_Error.Blocked);
			}
			p += k;
			nbytes -= k;
		}
		return s;
	}
	,readInt32: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var ch3 = this.readByte();
		var ch4 = this.readByte();
		if(this.bigEndian) {
			return ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24;
		} else {
			return ch1 | ch2 << 8 | ch3 << 16 | ch4 << 24;
		}
	}
	,readString: function(len,encoding) {
		var b = new haxe_io_Bytes(new ArrayBuffer(len));
		this.readFullBytes(b,0,len);
		return b.getString(0,len,encoding);
	}
	,__class__: haxe_io_Input
};
var haxe_io_BytesInput = function(b,pos,len) {
	if(pos == null) {
		pos = 0;
	}
	if(len == null) {
		len = b.length - pos;
	}
	if(pos < 0 || len < 0 || pos + len > b.length) {
		throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
	}
	this.b = b.b;
	this.pos = pos;
	this.len = len;
	this.totlen = len;
};
$hxClasses["haxe.io.BytesInput"] = haxe_io_BytesInput;
haxe_io_BytesInput.__name__ = "haxe.io.BytesInput";
haxe_io_BytesInput.__super__ = haxe_io_Input;
haxe_io_BytesInput.prototype = $extend(haxe_io_Input.prototype,{
	b: null
	,pos: null
	,len: null
	,totlen: null
	,set_position: function(p) {
		if(p < 0) {
			p = 0;
		} else if(p > this.totlen) {
			p = this.totlen;
		}
		this.len = this.totlen - p;
		return this.pos = p;
	}
	,readByte: function() {
		if(this.len == 0) {
			throw new js__$Boot_HaxeError(new haxe_io_Eof());
		}
		this.len--;
		return this.b[this.pos++];
	}
	,readBytes: function(buf,pos,len) {
		if(pos < 0 || len < 0 || pos + len > buf.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(this.len == 0 && len > 0) {
			throw new js__$Boot_HaxeError(new haxe_io_Eof());
		}
		if(this.len < len) {
			len = this.len;
		}
		var b1 = this.b;
		var b2 = buf.b;
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			b2[pos + i] = b1[this.pos + i];
		}
		this.pos += len;
		this.len -= len;
		return len;
	}
	,__class__: haxe_io_BytesInput
	,__properties__: {set_position:"set_position"}
});
var haxe_io_Output = function() { };
$hxClasses["haxe.io.Output"] = haxe_io_Output;
haxe_io_Output.__name__ = "haxe.io.Output";
haxe_io_Output.prototype = {
	bigEndian: null
	,writeByte: function(c) {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,writeBytes: function(s,pos,len) {
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		var b = s.b;
		var k = len;
		while(k > 0) {
			this.writeByte(b[pos]);
			++pos;
			--k;
		}
		return len;
	}
	,write: function(s) {
		var l = s.length;
		var p = 0;
		while(l > 0) {
			var k = this.writeBytes(s,p,l);
			if(k == 0) {
				throw new js__$Boot_HaxeError(haxe_io_Error.Blocked);
			}
			p += k;
			l -= k;
		}
	}
	,writeFloat: function(x) {
		this.writeInt32(haxe_io_FPHelper.floatToI32(x));
	}
	,writeInt32: function(x) {
		if(this.bigEndian) {
			this.writeByte(x >>> 24);
			this.writeByte(x >> 16 & 255);
			this.writeByte(x >> 8 & 255);
			this.writeByte(x & 255);
		} else {
			this.writeByte(x & 255);
			this.writeByte(x >> 8 & 255);
			this.writeByte(x >> 16 & 255);
			this.writeByte(x >>> 24);
		}
	}
	,__class__: haxe_io_Output
};
var haxe_io_BytesOutput = function() {
	this.b = new haxe_io_BytesBuffer();
};
$hxClasses["haxe.io.BytesOutput"] = haxe_io_BytesOutput;
haxe_io_BytesOutput.__name__ = "haxe.io.BytesOutput";
haxe_io_BytesOutput.__super__ = haxe_io_Output;
haxe_io_BytesOutput.prototype = $extend(haxe_io_Output.prototype,{
	b: null
	,writeByte: function(c) {
		this.b.addByte(c);
	}
	,writeBytes: function(buf,pos,len) {
		this.b.addBytes(buf,pos,len);
		return len;
	}
	,getBytes: function() {
		return this.b.getBytes();
	}
	,__class__: haxe_io_BytesOutput
});
var haxe_io_Eof = function() {
};
$hxClasses["haxe.io.Eof"] = haxe_io_Eof;
haxe_io_Eof.__name__ = "haxe.io.Eof";
haxe_io_Eof.prototype = {
	toString: function() {
		return "Eof";
	}
	,__class__: haxe_io_Eof
};
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__ : "haxe.io.Error", __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"]
	,Blocked: {_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_.__params__ = ["e"],$_)
};
var haxe_io_FPHelper = function() { };
$hxClasses["haxe.io.FPHelper"] = haxe_io_FPHelper;
haxe_io_FPHelper.__name__ = "haxe.io.FPHelper";
haxe_io_FPHelper.i32ToFloat = function(i) {
	haxe_io_FPHelper.helper.setInt32(0,i,true);
	return haxe_io_FPHelper.helper.getFloat32(0,true);
};
haxe_io_FPHelper.floatToI32 = function(f) {
	haxe_io_FPHelper.helper.setFloat32(0,f,true);
	return haxe_io_FPHelper.helper.getInt32(0,true);
};
haxe_io_FPHelper.i64ToDouble = function(low,high) {
	haxe_io_FPHelper.helper.setInt32(0,low,true);
	haxe_io_FPHelper.helper.setInt32(4,high,true);
	return haxe_io_FPHelper.helper.getFloat64(0,true);
};
haxe_io_FPHelper.doubleToI64 = function(v) {
	var i64 = haxe_io_FPHelper.i64tmp;
	haxe_io_FPHelper.helper.setFloat64(0,v,true);
	i64.low = haxe_io_FPHelper.helper.getInt32(0,true);
	i64.high = haxe_io_FPHelper.helper.getInt32(4,true);
	return i64;
};
var haxe_io__$UInt8Array_UInt8Array_$Impl_$ = {};
$hxClasses["haxe.io._UInt8Array.UInt8Array_Impl_"] = haxe_io__$UInt8Array_UInt8Array_$Impl_$;
haxe_io__$UInt8Array_UInt8Array_$Impl_$.__name__ = "haxe.io._UInt8Array.UInt8Array_Impl_";
haxe_io__$UInt8Array_UInt8Array_$Impl_$.fromBytes = function(bytes,bytePos,length) {
	if(bytePos == null) {
		bytePos = 0;
	}
	if(length == null) {
		length = bytes.length - bytePos;
	}
	return new Uint8Array(bytes.b.bufferValue,bytePos,length);
};
var haxe_iterators_MapKeyValueIterator = function(map) {
	this.map = map;
	this.keys = map.keys();
};
$hxClasses["haxe.iterators.MapKeyValueIterator"] = haxe_iterators_MapKeyValueIterator;
haxe_iterators_MapKeyValueIterator.__name__ = "haxe.iterators.MapKeyValueIterator";
haxe_iterators_MapKeyValueIterator.prototype = {
	map: null
	,keys: null
	,hasNext: function() {
		return this.keys.hasNext();
	}
	,next: function() {
		var key = this.keys.next();
		return { value : this.map.get(key), key : key};
	}
	,__class__: haxe_iterators_MapKeyValueIterator
};
var haxe_xml__$Access_NodeAccess_$Impl_$ = {};
$hxClasses["haxe.xml._Access.NodeAccess_Impl_"] = haxe_xml__$Access_NodeAccess_$Impl_$;
haxe_xml__$Access_NodeAccess_$Impl_$.__name__ = "haxe.xml._Access.NodeAccess_Impl_";
haxe_xml__$Access_NodeAccess_$Impl_$.resolve = function(this1,name) {
	var x = this1.elementsNamed(name).next();
	if(x == null) {
		var xname;
		if(this1.nodeType == Xml.Document) {
			xname = "Document";
		} else {
			if(this1.nodeType != Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(this1.nodeType));
			}
			xname = this1.nodeName;
		}
		throw new js__$Boot_HaxeError(xname + " is missing element " + name);
	}
	if(x.nodeType != Xml.Document && x.nodeType != Xml.Element) {
		throw new js__$Boot_HaxeError("Invalid nodeType " + _$Xml_XmlType_$Impl_$.toString(x.nodeType));
	}
	var this2 = x;
	return this2;
};
var haxe_xml__$Access_AttribAccess_$Impl_$ = {};
$hxClasses["haxe.xml._Access.AttribAccess_Impl_"] = haxe_xml__$Access_AttribAccess_$Impl_$;
haxe_xml__$Access_AttribAccess_$Impl_$.__name__ = "haxe.xml._Access.AttribAccess_Impl_";
haxe_xml__$Access_AttribAccess_$Impl_$.resolve = function(this1,name) {
	if(this1.nodeType == Xml.Document) {
		throw new js__$Boot_HaxeError("Cannot access document attribute " + name);
	}
	var v = this1.get(name);
	if(v == null) {
		if(this1.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(this1.nodeType));
		}
		throw new js__$Boot_HaxeError(this1.nodeName + " is missing attribute " + name);
	}
	return v;
};
var haxe_xml__$Access_HasNodeAccess_$Impl_$ = {};
$hxClasses["haxe.xml._Access.HasNodeAccess_Impl_"] = haxe_xml__$Access_HasNodeAccess_$Impl_$;
haxe_xml__$Access_HasNodeAccess_$Impl_$.__name__ = "haxe.xml._Access.HasNodeAccess_Impl_";
haxe_xml__$Access_HasNodeAccess_$Impl_$.resolve = function(this1,name) {
	return this1.elementsNamed(name).hasNext();
};
var haxe_xml_XmlParserException = function(message,xml,position) {
	this.xml = xml;
	this.message = message;
	this.position = position;
	this.lineNumber = 1;
	this.positionAtLine = 0;
	var _g = 0;
	var _g1 = position;
	while(_g < _g1) {
		var i = _g++;
		var c = xml.charCodeAt(i);
		if(c == 10) {
			this.lineNumber++;
			this.positionAtLine = 0;
		} else if(c != 13) {
			this.positionAtLine++;
		}
	}
};
$hxClasses["haxe.xml.XmlParserException"] = haxe_xml_XmlParserException;
haxe_xml_XmlParserException.__name__ = "haxe.xml.XmlParserException";
haxe_xml_XmlParserException.prototype = {
	message: null
	,lineNumber: null
	,positionAtLine: null
	,position: null
	,xml: null
	,toString: function() {
		var c = js_Boot.getClass(this);
		return c.__name__ + ": " + this.message + " at line " + this.lineNumber + " char " + this.positionAtLine;
	}
	,__class__: haxe_xml_XmlParserException
};
var haxe_xml_Parser = function() { };
$hxClasses["haxe.xml.Parser"] = haxe_xml_Parser;
haxe_xml_Parser.__name__ = "haxe.xml.Parser";
haxe_xml_Parser.parse = function(str,strict) {
	if(strict == null) {
		strict = false;
	}
	var doc = Xml.createDocument();
	haxe_xml_Parser.doParse(str,strict,0,doc);
	return doc;
};
haxe_xml_Parser.doParse = function(str,strict,p,parent) {
	if(p == null) {
		p = 0;
	}
	var xml = null;
	var state = 1;
	var next = 1;
	var aname = null;
	var start = 0;
	var nsubs = 0;
	var nbrackets = 0;
	var c = str.charCodeAt(p);
	var buf = new StringBuf();
	var escapeNext = 1;
	var attrValQuote = -1;
	while(c == c) {
		switch(state) {
		case 0:
			switch(c) {
			case 9:case 10:case 13:case 32:
				break;
			default:
				state = next;
				continue;
			}
			break;
		case 1:
			if(c == 60) {
				state = 0;
				next = 2;
			} else {
				start = p;
				state = 13;
				continue;
			}
			break;
		case 2:
			switch(c) {
			case 33:
				if(str.charCodeAt(p + 1) == 91) {
					p += 2;
					if(HxOverrides.substr(str,p,6).toUpperCase() != "CDATA[") {
						throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected <![CDATA[",str,p));
					}
					p += 5;
					state = 17;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) == 68 || str.charCodeAt(p + 1) == 100) {
					if(HxOverrides.substr(str,p + 2,6).toUpperCase() != "OCTYPE") {
						throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected <!DOCTYPE",str,p));
					}
					p += 8;
					state = 16;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) != 45 || str.charCodeAt(p + 2) != 45) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected <!--",str,p));
				} else {
					p += 2;
					state = 15;
					start = p + 1;
				}
				break;
			case 47:
				if(parent == null) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				start = p + 1;
				state = 0;
				next = 10;
				break;
			case 63:
				state = 14;
				start = p;
				break;
			default:
				state = 3;
				start = p;
				continue;
			}
			break;
		case 3:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(p == start) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				xml = Xml.createElement(HxOverrides.substr(str,start,p - start));
				parent.addChild(xml);
				++nsubs;
				state = 0;
				next = 4;
				continue;
			}
			break;
		case 4:
			switch(c) {
			case 47:
				state = 11;
				break;
			case 62:
				state = 9;
				break;
			default:
				state = 5;
				start = p;
				continue;
			}
			break;
		case 5:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected attribute name",str,p));
				}
				var tmp = HxOverrides.substr(str,start,p - start);
				aname = tmp;
				if(xml.exists(aname)) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Duplicate attribute [" + aname + "]",str,p));
				}
				state = 0;
				next = 6;
				continue;
			}
			break;
		case 6:
			if(c == 61) {
				state = 0;
				next = 7;
			} else {
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected =",str,p));
			}
			break;
		case 7:
			switch(c) {
			case 34:case 39:
				buf = new StringBuf();
				state = 8;
				start = p + 1;
				attrValQuote = c;
				break;
			default:
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected \"",str,p));
			}
			break;
		case 8:
			switch(c) {
			case 38:
				var len = p - start;
				buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
				state = 18;
				escapeNext = 8;
				start = p + 1;
				break;
			case 60:case 62:
				if(strict) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Invalid unescaped " + String.fromCodePoint(c) + " in attribute value",str,p));
				} else if(c == attrValQuote) {
					var len1 = p - start;
					buf.b += len1 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len1);
					var val = buf.b;
					buf = new StringBuf();
					xml.set(aname,val);
					state = 0;
					next = 4;
				}
				break;
			default:
				if(c == attrValQuote) {
					var len2 = p - start;
					buf.b += len2 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len2);
					var val1 = buf.b;
					buf = new StringBuf();
					xml.set(aname,val1);
					state = 0;
					next = 4;
				}
			}
			break;
		case 9:
			p = haxe_xml_Parser.doParse(str,strict,p,xml);
			start = p;
			state = 1;
			break;
		case 10:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				var v = HxOverrides.substr(str,start,p - start);
				if(parent == null || parent.nodeType != 0) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Unexpected </" + v + ">, tag is not open",str,p));
				}
				if(parent.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(parent.nodeType));
				}
				if(v != parent.nodeName) {
					if(parent.nodeType != Xml.Element) {
						throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(parent.nodeType));
					}
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected </" + parent.nodeName + ">",str,p));
				}
				state = 0;
				next = 12;
				continue;
			}
			break;
		case 11:
			if(c == 62) {
				state = 1;
			} else {
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 12:
			if(c == 62) {
				if(nsubs == 0) {
					parent.addChild(Xml.createPCData(""));
				}
				return p;
			} else {
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 13:
			if(c == 60) {
				var len3 = p - start;
				buf.b += len3 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len3);
				var child = Xml.createPCData(buf.b);
				buf = new StringBuf();
				parent.addChild(child);
				++nsubs;
				state = 0;
				next = 2;
			} else if(c == 38) {
				var len4 = p - start;
				buf.b += len4 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len4);
				state = 18;
				escapeNext = 13;
				start = p + 1;
			}
			break;
		case 14:
			if(c == 63 && str.charCodeAt(p + 1) == 62) {
				++p;
				var str1 = HxOverrides.substr(str,start + 1,p - start - 2);
				parent.addChild(Xml.createProcessingInstruction(str1));
				++nsubs;
				state = 1;
			}
			break;
		case 15:
			if(c == 45 && str.charCodeAt(p + 1) == 45 && str.charCodeAt(p + 2) == 62) {
				parent.addChild(Xml.createComment(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 16:
			if(c == 91) {
				++nbrackets;
			} else if(c == 93) {
				--nbrackets;
			} else if(c == 62 && nbrackets == 0) {
				parent.addChild(Xml.createDocType(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				state = 1;
			}
			break;
		case 17:
			if(c == 93 && str.charCodeAt(p + 1) == 93 && str.charCodeAt(p + 2) == 62) {
				var child1 = Xml.createCData(HxOverrides.substr(str,start,p - start));
				parent.addChild(child1);
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 18:
			if(c == 59) {
				var s = HxOverrides.substr(str,start,p - start);
				if(s.charCodeAt(0) == 35) {
					var c1 = s.charCodeAt(1) == 120 ? Std.parseInt("0" + HxOverrides.substr(s,1,s.length - 1)) : Std.parseInt(HxOverrides.substr(s,1,s.length - 1));
					buf.b += String.fromCodePoint(c1);
				} else {
					var _this = haxe_xml_Parser.escapes;
					if(!(__map_reserved[s] != null ? _this.existsReserved(s) : _this.h.hasOwnProperty(s))) {
						if(strict) {
							throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Undefined entity: " + s,str,p));
						}
						buf.b += Std.string("&" + s + ";");
					} else {
						var _this1 = haxe_xml_Parser.escapes;
						var x = __map_reserved[s] != null ? _this1.getReserved(s) : _this1.h[s];
						buf.b += Std.string(x);
					}
				}
				start = p + 1;
				state = escapeNext;
			} else if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45) && c != 35) {
				if(strict) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Invalid character in entity: " + String.fromCodePoint(c),str,p));
				}
				buf.b += String.fromCodePoint(38);
				var len5 = p - start;
				buf.b += len5 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len5);
				--p;
				start = p + 1;
				state = escapeNext;
			}
			break;
		}
		c = str.charCodeAt(++p);
	}
	if(state == 1) {
		start = p;
		state = 13;
	}
	if(state == 13) {
		if(parent.nodeType == 0) {
			if(parent.nodeType != Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(parent.nodeType));
			}
			throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Unclosed node <" + parent.nodeName + ">",str,p));
		}
		if(p != start || nsubs == 0) {
			var len6 = p - start;
			buf.b += len6 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len6);
			parent.addChild(Xml.createPCData(buf.b));
			++nsubs;
		}
		return p;
	}
	if(!strict && state == 18 && escapeNext == 13) {
		buf.b += String.fromCodePoint(38);
		var len7 = p - start;
		buf.b += len7 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len7);
		parent.addChild(Xml.createPCData(buf.b));
		++nsubs;
		return p;
	}
	throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Unexpected end",str,p));
};
var haxe_xml_Printer = function(pretty) {
	this.output = new StringBuf();
	this.pretty = pretty;
};
$hxClasses["haxe.xml.Printer"] = haxe_xml_Printer;
haxe_xml_Printer.__name__ = "haxe.xml.Printer";
haxe_xml_Printer.print = function(xml,pretty) {
	if(pretty == null) {
		pretty = false;
	}
	var printer = new haxe_xml_Printer(pretty);
	printer.writeNode(xml,"");
	return printer.output.b;
};
haxe_xml_Printer.prototype = {
	output: null
	,pretty: null
	,writeNode: function(value,tabs) {
		switch(value.nodeType) {
		case 0:
			this.output.b += Std.string(tabs + "<");
			if(value.nodeType != Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
			}
			this.output.b += Std.string(value.nodeName);
			var attribute = value.attributes();
			while(attribute.hasNext()) {
				var attribute1 = attribute.next();
				this.output.b += Std.string(" " + attribute1 + "=\"");
				var input = StringTools.htmlEscape(value.get(attribute1),true);
				this.output.b += Std.string(input);
				this.output.b += "\"";
			}
			if(this.hasChildren(value)) {
				this.output.b += ">";
				if(this.pretty) {
					this.output.b += "\n";
				}
				if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
				}
				var child = HxOverrides.iter(value.children);
				while(child.hasNext()) {
					var child1 = child.next();
					this.writeNode(child1,this.pretty ? tabs + "\t" : tabs);
				}
				this.output.b += Std.string(tabs + "</");
				if(value.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
				}
				this.output.b += Std.string(value.nodeName);
				this.output.b += ">";
				if(this.pretty) {
					this.output.b += "\n";
				}
			} else {
				this.output.b += "/>";
				if(this.pretty) {
					this.output.b += "\n";
				}
			}
			break;
		case 1:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
			}
			var nodeValue = value.nodeValue;
			if(nodeValue.length != 0) {
				var input1 = tabs + StringTools.htmlEscape(nodeValue);
				this.output.b += Std.string(input1);
				if(this.pretty) {
					this.output.b += "\n";
				}
			}
			break;
		case 2:
			this.output.b += Std.string(tabs + "<![CDATA[");
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
			}
			this.output.b += Std.string(value.nodeValue);
			this.output.b += "]]>";
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 3:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
			}
			var commentContent = value.nodeValue;
			var _this_r = new RegExp("[\n\r\t]+","g".split("u").join(""));
			commentContent = commentContent.replace(_this_r,"");
			commentContent = "<!--" + commentContent + "-->";
			this.output.b += tabs == null ? "null" : "" + tabs;
			var input2 = StringTools.trim(commentContent);
			this.output.b += Std.string(input2);
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 4:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
			}
			this.output.b += Std.string("<!DOCTYPE " + value.nodeValue + ">");
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 5:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
			}
			this.output.b += Std.string("<?" + value.nodeValue + "?>");
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 6:
			if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
			}
			var child2 = HxOverrides.iter(value.children);
			while(child2.hasNext()) {
				var child3 = child2.next();
				this.writeNode(child3,tabs);
			}
			break;
		}
	}
	,hasChildren: function(value) {
		if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
		}
		var child = HxOverrides.iter(value.children);
		while(child.hasNext()) {
			var child1 = child.next();
			switch(child1.nodeType) {
			case 0:case 1:
				return true;
			case 2:case 3:
				if(child1.nodeType == Xml.Document || child1.nodeType == Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(child1.nodeType));
				}
				if(StringTools.ltrim(child1.nodeValue).length != 0) {
					return true;
				}
				break;
			default:
			}
		}
		return false;
	}
	,__class__: haxe_xml_Printer
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
$hxClasses["js._Boot.HaxeError"] = js__$Boot_HaxeError;
js__$Boot_HaxeError.__name__ = "js._Boot.HaxeError";
js__$Boot_HaxeError.wrap = function(val) {
	if(((val) instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	val: null
	,__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = "js.Boot";
js_Boot.getClass = function(o) {
	if(((o) instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var n = e.__constructs__[o._hx_index];
			var con = e[n];
			if(con.__params__) {
				s += "\t";
				var tmp = n + "(";
				var _g = [];
				var _g1 = 0;
				var _g2 = con.__params__;
				while(_g1 < _g2.length) {
					var p = _g2[_g1];
					++_g1;
					_g.push(js_Boot.__string_rec(o[p],s));
				}
				return tmp + _g.join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g3 = 0;
			var _g11 = o.length;
			while(_g3 < _g11) {
				var i = _g3++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e1 ) {
			haxe_CallStack.lastException = e1;
			var e2 = ((e1) instanceof js__$Boot_HaxeError) ? e1.val : e1;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str1 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str1.length != 2) {
			str1 += ", \n";
		}
		str1 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str1 += "\n" + s + "}";
		return str1;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	if(Object.prototype.hasOwnProperty.call(cc,"__interfaces__")) {
		var intf = cc.__interfaces__;
		var _g = 0;
		var _g1 = intf.length;
		while(_g < _g1) {
			var i = _g++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		return ((o) instanceof Array);
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return o != null;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return ((o | 0) === o);
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(((o) instanceof cl)) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(((o) instanceof cl)) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		if(o.__enum__ != null) {
			return $hxEnums[o.__enum__] == cl;
		} else {
			return false;
		}
	}
};
js_Boot.__cast = function(o,t) {
	if(o == null || js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_Browser = function() { };
$hxClasses["js.Browser"] = js_Browser;
js_Browser.__name__ = "js.Browser";
js_Browser.getLocalStorage = function() {
	try {
		var s = window.localStorage;
		s.getItem("");
		if(s.length == 0) {
			var key = "_hx_" + Math.random();
			s.setItem(key,key);
			s.removeItem(key);
		}
		return s;
	} catch( e ) {
		haxe_CallStack.lastException = e;
		var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
		return null;
	}
};
var js_lib__$ArrayBuffer_ArrayBufferCompat = function() { };
$hxClasses["js.lib._ArrayBuffer.ArrayBufferCompat"] = js_lib__$ArrayBuffer_ArrayBufferCompat;
js_lib__$ArrayBuffer_ArrayBufferCompat.__name__ = "js.lib._ArrayBuffer.ArrayBufferCompat";
js_lib__$ArrayBuffer_ArrayBufferCompat.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null ? null : end - begin);
	var resultArray = new Uint8Array(u.byteLength);
	resultArray.set(u);
	return resultArray.buffer;
};
var kha__$Assets_ImageList = function() {
	this.names = ["battle_tank_0","parrot"];
	this.parrotDescription = { name : "parrot", original_height : 250, original_width : 250, files : ["parrot.png"], type : "image"};
	this.parrotName = "parrot";
	this.parrot = null;
	this.battle_tank_0Description = { name : "battle_tank_0", original_height : 1918, original_width : 2037, files : ["battle_tank_0.png"], type : "image"};
	this.battle_tank_0Name = "battle_tank_0";
	this.battle_tank_0 = null;
};
$hxClasses["kha._Assets.ImageList"] = kha__$Assets_ImageList;
kha__$Assets_ImageList.__name__ = "kha._Assets.ImageList";
kha__$Assets_ImageList.prototype = {
	get: function(name) {
		return Reflect.field(this,name);
	}
	,battle_tank_0: null
	,battle_tank_0Name: null
	,battle_tank_0Description: null
	,battle_tank_0Load: function(done,failure) {
		kha_Assets.loadImage("battle_tank_0",function(image) {
			done();
		},failure,{ fileName : "kha/internal/AssetsBuilder.hx", lineNumber : 132, className : "kha._Assets.ImageList", methodName : "battle_tank_0Load"});
	}
	,battle_tank_0Unload: function() {
		this.battle_tank_0.unload();
		this.battle_tank_0 = null;
	}
	,parrot: null
	,parrotName: null
	,parrotDescription: null
	,parrotLoad: function(done,failure) {
		kha_Assets.loadImage("parrot",function(image) {
			done();
		},failure,{ fileName : "kha/internal/AssetsBuilder.hx", lineNumber : 132, className : "kha._Assets.ImageList", methodName : "parrotLoad"});
	}
	,parrotUnload: function() {
		this.parrot.unload();
		this.parrot = null;
	}
	,names: null
	,__class__: kha__$Assets_ImageList
};
var kha__$Assets_SoundList = function() {
	this.names = [];
};
$hxClasses["kha._Assets.SoundList"] = kha__$Assets_SoundList;
kha__$Assets_SoundList.__name__ = "kha._Assets.SoundList";
kha__$Assets_SoundList.prototype = {
	get: function(name) {
		return Reflect.field(this,name);
	}
	,names: null
	,__class__: kha__$Assets_SoundList
};
var kha__$Assets_BlobList = function() {
	this.names = ["battle_tank_0_json"];
	this.battle_tank_0_jsonDescription = { name : "battle_tank_0_json", files : ["battle_tank_0.json"], type : "blob"};
	this.battle_tank_0_jsonName = "battle_tank_0_json";
	this.battle_tank_0_json = null;
};
$hxClasses["kha._Assets.BlobList"] = kha__$Assets_BlobList;
kha__$Assets_BlobList.__name__ = "kha._Assets.BlobList";
kha__$Assets_BlobList.prototype = {
	get: function(name) {
		return Reflect.field(this,name);
	}
	,battle_tank_0_json: null
	,battle_tank_0_jsonName: null
	,battle_tank_0_jsonDescription: null
	,battle_tank_0_jsonLoad: function(done,failure) {
		kha_Assets.loadBlob("battle_tank_0_json",function(blob) {
			done();
		},failure,{ fileName : "kha/internal/AssetsBuilder.hx", lineNumber : 140, className : "kha._Assets.BlobList", methodName : "battle_tank_0_jsonLoad"});
	}
	,battle_tank_0_jsonUnload: function() {
		this.battle_tank_0_json.unload();
		this.battle_tank_0_json = null;
	}
	,names: null
	,__class__: kha__$Assets_BlobList
};
var kha__$Assets_FontList = function() {
	this.names = [];
};
$hxClasses["kha._Assets.FontList"] = kha__$Assets_FontList;
kha__$Assets_FontList.__name__ = "kha._Assets.FontList";
kha__$Assets_FontList.prototype = {
	get: function(name) {
		return Reflect.field(this,name);
	}
	,names: null
	,__class__: kha__$Assets_FontList
};
var kha__$Assets_VideoList = function() {
	this.names = [];
};
$hxClasses["kha._Assets.VideoList"] = kha__$Assets_VideoList;
kha__$Assets_VideoList.__name__ = "kha._Assets.VideoList";
kha__$Assets_VideoList.prototype = {
	get: function(name) {
		return Reflect.field(this,name);
	}
	,names: null
	,__class__: kha__$Assets_VideoList
};
var kha_Assets = function() { };
$hxClasses["kha.Assets"] = kha_Assets;
kha_Assets.__name__ = "kha.Assets";
kha_Assets.__properties__ = {get_videoFormats:"get_videoFormats",get_fontFormats:"get_fontFormats",get_soundFormats:"get_soundFormats",get_imageFormats:"get_imageFormats"};
kha_Assets.loadEverything = function(callback,filter,uncompressSoundsFilter,failed) {
	var fileCount = 0;
	var _g = 0;
	var _g1 = Type.getInstanceFields(kha__$Assets_BlobList);
	while(_g < _g1.length) {
		var blob = _g1[_g];
		++_g;
		if(StringTools.endsWith(blob,"Load")) {
			fileCount += 1;
		}
	}
	var _g2 = 0;
	var _g3 = Type.getInstanceFields(kha__$Assets_ImageList);
	while(_g2 < _g3.length) {
		var image = _g3[_g2];
		++_g2;
		if(StringTools.endsWith(image,"Load")) {
			fileCount += 1;
		}
	}
	var _g4 = 0;
	var _g5 = Type.getInstanceFields(kha__$Assets_SoundList);
	while(_g4 < _g5.length) {
		var sound = _g5[_g4];
		++_g4;
		if(StringTools.endsWith(sound,"Load")) {
			fileCount += 1;
		}
	}
	var _g6 = 0;
	var _g7 = Type.getInstanceFields(kha__$Assets_FontList);
	while(_g6 < _g7.length) {
		var font = _g7[_g6];
		++_g6;
		if(StringTools.endsWith(font,"Load")) {
			fileCount += 1;
		}
	}
	var _g8 = 0;
	var _g9 = Type.getInstanceFields(kha__$Assets_VideoList);
	while(_g8 < _g9.length) {
		var video = _g9[_g8];
		++_g8;
		if(StringTools.endsWith(video,"Load")) {
			fileCount += 1;
		}
	}
	if(fileCount == 0) {
		callback();
		return;
	}
	var filesLeft = fileCount;
	var onLoaded = function() {
		filesLeft -= 1;
		kha_Assets.progress = 1 - filesLeft / fileCount;
		if(filesLeft == 0) {
			callback();
		}
	};
	var _g10 = 0;
	var _g11 = Type.getInstanceFields(kha__$Assets_BlobList);
	while(_g10 < _g11.length) {
		var blob1 = _g11[_g10];
		++_g10;
		if(StringTools.endsWith(blob1,"Load")) {
			var name = HxOverrides.substr(blob1,0,blob1.length - 4);
			var description = Reflect.field(kha_Assets.blobs,name + "Description");
			if(filter == null || filter(description)) {
				(Reflect.field(kha_Assets.blobs,blob1))(onLoaded,function(err) {
					(kha_Assets.reporter(failed,{ fileName : "kha/Assets.hx", lineNumber : 142, className : "kha.Assets", methodName : "loadEverything"}))(err);
					onLoaded();
				});
			} else {
				onLoaded();
			}
		}
	}
	var _g12 = 0;
	var _g13 = Type.getInstanceFields(kha__$Assets_ImageList);
	while(_g12 < _g13.length) {
		var image1 = _g13[_g12];
		++_g12;
		if(StringTools.endsWith(image1,"Load")) {
			var name1 = HxOverrides.substr(image1,0,image1.length - 4);
			var description1 = Reflect.field(kha_Assets.images,name1 + "Description");
			if(filter == null || filter(description1)) {
				(Reflect.field(kha_Assets.images,image1))(onLoaded,function(err1) {
					(kha_Assets.reporter(failed,{ fileName : "kha/Assets.hx", lineNumber : 158, className : "kha.Assets", methodName : "loadEverything"}))(err1);
					onLoaded();
				});
			} else {
				onLoaded();
			}
		}
	}
	var _g14 = 0;
	var _g15 = Type.getInstanceFields(kha__$Assets_SoundList);
	while(_g14 < _g15.length) {
		var sound1 = [_g15[_g14]];
		++_g14;
		if(StringTools.endsWith(sound1[0],"Load")) {
			var name2 = HxOverrides.substr(sound1[0],0,sound1[0].length - 4);
			var description2 = [Reflect.field(kha_Assets.sounds,name2 + "Description")];
			if(filter == null || filter(description2[0])) {
				(Reflect.field(kha_Assets.sounds,sound1[0]))((function(description3,sound2) {
					return function() {
						if(uncompressSoundsFilter == null || uncompressSoundsFilter(description3[0])) {
							var sound3 = Reflect.field(kha_Assets.sounds,sound2[0].substring(0,sound2[0].length - 4));
							sound3.uncompress(onLoaded);
						} else {
							onLoaded();
						}
					};
				})(description2,sound1),(function() {
					return function(err2) {
						(kha_Assets.reporter(failed,{ fileName : "kha/Assets.hx", lineNumber : 181, className : "kha.Assets", methodName : "loadEverything"}))(err2);
						onLoaded();
					};
				})());
			} else {
				onLoaded();
			}
		}
	}
	var _g16 = 0;
	var _g17 = Type.getInstanceFields(kha__$Assets_FontList);
	while(_g16 < _g17.length) {
		var font1 = _g17[_g16];
		++_g16;
		if(StringTools.endsWith(font1,"Load")) {
			var name3 = HxOverrides.substr(font1,0,font1.length - 4);
			var description4 = Reflect.field(kha_Assets.fonts,name3 + "Description");
			if(filter == null || filter(description4)) {
				(Reflect.field(kha_Assets.fonts,font1))(onLoaded,function(err3) {
					(kha_Assets.reporter(failed,{ fileName : "kha/Assets.hx", lineNumber : 196, className : "kha.Assets", methodName : "loadEverything"}))(err3);
					onLoaded();
				});
			} else {
				onLoaded();
			}
		}
	}
	var _g18 = 0;
	var _g19 = Type.getInstanceFields(kha__$Assets_VideoList);
	while(_g18 < _g19.length) {
		var video1 = _g19[_g18];
		++_g18;
		if(StringTools.endsWith(video1,"Load")) {
			var name4 = HxOverrides.substr(video1,0,video1.length - 4);
			var description5 = Reflect.field(kha_Assets.videos,name4 + "Description");
			if(filter == null || filter(description5)) {
				(Reflect.field(kha_Assets.videos,video1))(onLoaded,function(err4) {
					(kha_Assets.reporter(failed,{ fileName : "kha/Assets.hx", lineNumber : 211, className : "kha.Assets", methodName : "loadEverything"}))(err4);
					onLoaded();
				});
			} else {
				onLoaded();
			}
		}
	}
};
kha_Assets.loadImage = function(name,done,failed,pos) {
	var description = Reflect.field(kha_Assets.images,name + "Description");
	kha_LoaderImpl.loadImageFromDescription(description,function(image) {
		kha_Assets.images[name] = image;
		done(image);
	},kha_Assets.reporter(failed,pos));
};
kha_Assets.loadImageFromPath = function(path,readable,done,failed,pos) {
	var description = { files : [path], readable : readable};
	kha_LoaderImpl.loadImageFromDescription(description,done,kha_Assets.reporter(failed,pos));
};
kha_Assets.get_imageFormats = function() {
	return kha_LoaderImpl.getImageFormats();
};
kha_Assets.loadBlob = function(name,done,failed,pos) {
	var description = Reflect.field(kha_Assets.blobs,name + "Description");
	kha_LoaderImpl.loadBlobFromDescription(description,function(blob) {
		kha_Assets.blobs[name] = blob;
		done(blob);
	},kha_Assets.reporter(failed,pos));
};
kha_Assets.loadBlobFromPath = function(path,done,failed,pos) {
	var description = { files : [path]};
	kha_LoaderImpl.loadBlobFromDescription(description,done,kha_Assets.reporter(failed,pos));
};
kha_Assets.loadSound = function(name,done,failed,pos) {
	var description = Reflect.field(kha_Assets.sounds,name + "Description");
	kha_LoaderImpl.loadSoundFromDescription(description,function(sound) {
		kha_Assets.sounds[name] = sound;
		done(sound);
	},kha_Assets.reporter(failed,pos));
	return;
};
kha_Assets.loadSoundFromPath = function(path,done,failed,pos) {
	var description = { files : [path]};
	kha_LoaderImpl.loadSoundFromDescription(description,done,kha_Assets.reporter(failed,pos));
	return;
};
kha_Assets.get_soundFormats = function() {
	return kha_LoaderImpl.getSoundFormats();
};
kha_Assets.loadFont = function(name,done,failed,pos) {
	var description = Reflect.field(kha_Assets.fonts,name + "Description");
	kha_LoaderImpl.loadFontFromDescription(description,function(font) {
		kha_Assets.fonts[name] = font;
		done(font);
	},kha_Assets.reporter(failed,pos));
	return;
};
kha_Assets.loadFontFromPath = function(path,done,failed,pos) {
	var description = { files : [path]};
	kha_LoaderImpl.loadFontFromDescription(description,done,kha_Assets.reporter(failed,pos));
	return;
};
kha_Assets.get_fontFormats = function() {
	return ["ttf"];
};
kha_Assets.loadVideo = function(name,done,failed,pos) {
	var description = Reflect.field(kha_Assets.videos,name + "Description");
	kha_LoaderImpl.loadVideoFromDescription(description,function(video) {
		kha_Assets.videos[name] = video;
		done(video);
	},kha_Assets.reporter(failed,pos));
	return;
};
kha_Assets.loadVideoFromPath = function(path,done,failed,pos) {
	var description = { files : [path]};
	kha_LoaderImpl.loadVideoFromDescription(description,done,kha_Assets.reporter(failed,pos));
	return;
};
kha_Assets.get_videoFormats = function() {
	return kha_LoaderImpl.getVideoFormats();
};
kha_Assets.reporter = function(custom,pos) {
	if(custom != null) {
		return custom;
	} else {
		var f = haxe_Log.trace;
		var infos = pos;
		return function(v) {
			f(v,infos);
		};
	}
};
var kha_Canvas = function() { };
$hxClasses["kha.Canvas"] = kha_Canvas;
kha_Canvas.__name__ = "kha.Canvas";
kha_Canvas.prototype = {
	get_g4: null
	,get_g2: null
	,get_g1: null
	,get_height: null
	,get_width: null
	,width: null
	,height: null
	,g1: null
	,g2: null
	,g4: null
	,__class__: kha_Canvas
	,__properties__: {get_g4:"get_g4",get_g2:"get_g2",get_g1:"get_g1",get_height:"get_height",get_width:"get_width"}
};
var kha_Resource = function() { };
$hxClasses["kha.Resource"] = kha_Resource;
kha_Resource.__name__ = "kha.Resource";
kha_Resource.prototype = {
	unload: null
	,__class__: kha_Resource
};
var kha_Image = function() { };
$hxClasses["kha.Image"] = kha_Image;
kha_Image.__name__ = "kha.Image";
kha_Image.__interfaces__ = [kha_Resource,kha_Canvas];
kha_Image.__properties__ = {get_nonPow2Supported:"get_nonPow2Supported",get_maxSize:"get_maxSize"};
kha_Image.create = function(width,height,format,usage) {
	if(format == null) {
		format = 0;
	}
	if(usage == null) {
		usage = 0;
	}
	if(kha_SystemImpl.gl == null) {
		return new kha_CanvasImage(width,height,format,false);
	} else {
		return new kha_WebGLImage(width,height,format,false,0,1);
	}
};
kha_Image.create3D = function(width,height,depth,format,usage) {
	return null;
};
kha_Image.createRenderTarget = function(width,height,format,depthStencil,antiAliasingSamples,contextId) {
	if(contextId == null) {
		contextId = 0;
	}
	if(antiAliasingSamples == null) {
		antiAliasingSamples = 1;
	}
	if(depthStencil == null) {
		depthStencil = 0;
	}
	if(format == null) {
		format = 0;
	}
	if(kha_SystemImpl.gl == null) {
		return new kha_CanvasImage(width,height,format,true);
	} else {
		return new kha_WebGLImage(width,height,format,true,depthStencil,antiAliasingSamples);
	}
};
kha_Image.fromImage = function(image,readable) {
	if(kha_SystemImpl.gl == null) {
		var img = new kha_CanvasImage(image.width,image.height,0,false);
		img.image = image;
		img.createTexture();
		return img;
	} else {
		var img1 = new kha_WebGLImage(image.width,image.height,0,false,0,1);
		img1.image = image;
		img1.createTexture();
		return img1;
	}
};
kha_Image.fromBytes = function(bytes,width,height,format,usage) {
	if(format == null) {
		format = 0;
	}
	if(usage == null) {
		usage = 0;
	}
	if(kha_SystemImpl.gl != null) {
		var img = new kha_WebGLImage(width,height,format,false,0,1);
		img.image = img.bytesToArray(bytes);
		img.createTexture();
		return img;
	}
	var img1 = new kha_CanvasImage(width,height,format,false);
	var g2 = img1.get_g2();
	var canvas = g2.canvas;
	var imageData = new ImageData(new Uint8ClampedArray(bytes.b.bufferValue),width,height);
	canvas.putImageData(imageData,0,0);
	return img1;
};
kha_Image.fromBytes3D = function(bytes,width,height,depth,format,usage) {
	return null;
};
kha_Image.fromEncodedBytes = function(bytes,fileExtention,doneCallback,errorCallback,readable) {
	if(readable == null) {
		readable = false;
	}
	var dataUrl = "data:image;base64," + haxe_crypto_Base64.encode(bytes);
	var imageElement = js_Boot.__cast(window.document.createElement("img") , HTMLImageElement);
	imageElement.onload = function() {
		var tmp = kha_Image.fromImage(imageElement,readable);
		doneCallback(tmp);
	};
	imageElement.onerror = function() {
		errorCallback("Image was not created");
	};
	imageElement.src = dataUrl;
};
kha_Image.fromVideo = function(video) {
	if(kha_SystemImpl.gl == null) {
		var img = new kha_CanvasImage(video.element.videoWidth,video.element.videoHeight,0,false);
		img.video = video.element;
		img.createTexture();
		return img;
	} else {
		var img1 = new kha_WebGLImage(video.element.videoWidth,video.element.videoHeight,0,false,0,1);
		img1.video = video.element;
		img1.createTexture();
		return img1;
	}
};
kha_Image.get_maxSize = function() {
	if(kha_SystemImpl.gl == null) {
		return 8192;
	} else {
		return kha_SystemImpl.gl.getParameter(3379);
	}
};
kha_Image.get_nonPow2Supported = function() {
	return kha_SystemImpl.gl != null;
};
kha_Image.renderTargetsInvertedY = function() {
	return true;
};
kha_Image.prototype = {
	isOpaque: function(x,y) {
		return false;
	}
	,at: function(x,y) {
		return -16777216;
	}
	,unload: function() {
	}
	,lock: function(level) {
		if(level == null) {
			level = 0;
		}
		return null;
	}
	,unlock: function() {
	}
	,getPixels: function() {
		return null;
	}
	,generateMipmaps: function(levels) {
	}
	,setMipmaps: function(mipmaps) {
	}
	,setDepthStencilFrom: function(image) {
	}
	,clear: function(x,y,z,width,height,depth,color) {
	}
	,width: null
	,get_width: function() {
		return 0;
	}
	,height: null
	,get_height: function() {
		return 0;
	}
	,depth: null
	,get_depth: function() {
		return 1;
	}
	,realWidth: null
	,get_realWidth: function() {
		return 0;
	}
	,realHeight: null
	,get_realHeight: function() {
		return 0;
	}
	,g1: null
	,get_g1: function() {
		return null;
	}
	,g2: null
	,get_g2: function() {
		return null;
	}
	,g4: null
	,get_g4: function() {
		return null;
	}
	,__class__: kha_Image
	,__properties__: {get_g4:"get_g4",get_g2:"get_g2",get_g1:"get_g1",get_realHeight:"get_realHeight",get_realWidth:"get_realWidth",get_depth:"get_depth",get_height:"get_height",get_width:"get_width"}
};
var kha_CanvasImage = function(width,height,format,renderTarget) {
	this.g2canvas = null;
	this.myWidth = width;
	this.myHeight = height;
	this.format = format;
	this.renderTarget = renderTarget;
	this.image = null;
	this.video = null;
	if(renderTarget) {
		this.createTexture();
	}
};
$hxClasses["kha.CanvasImage"] = kha_CanvasImage;
kha_CanvasImage.__name__ = "kha.CanvasImage";
kha_CanvasImage.init = function() {
	var canvas = window.document.createElement("canvas");
	if(canvas != null) {
		kha_CanvasImage.context = canvas.getContext("2d");
		canvas.width = 2048;
		canvas.height = 2048;
		kha_CanvasImage.context.globalCompositeOperation = "copy";
	}
};
kha_CanvasImage.upperPowerOfTwo = function(v) {
	--v;
	v |= v >>> 1;
	v |= v >>> 2;
	v |= v >>> 4;
	v |= v >>> 8;
	v |= v >>> 16;
	return ++v;
};
kha_CanvasImage.__super__ = kha_Image;
kha_CanvasImage.prototype = $extend(kha_Image.prototype,{
	image: null
	,video: null
	,data: null
	,myWidth: null
	,myHeight: null
	,format: null
	,renderTarget: null
	,frameBuffer: null
	,graphics1: null
	,g2canvas: null
	,get_g1: function() {
		if(this.graphics1 == null) {
			this.graphics1 = new kha_graphics2_Graphics1(this);
		}
		return this.graphics1;
	}
	,get_g2: function() {
		if(this.g2canvas == null) {
			var canvas = window.document.createElement("canvas");
			this.image = canvas;
			var context = canvas.getContext("2d");
			canvas.width = this.get_width();
			canvas.height = this.get_height();
			this.g2canvas = new kha_js_CanvasGraphics(context);
		}
		return this.g2canvas;
	}
	,get_g4: function() {
		return null;
	}
	,get_width: function() {
		return this.myWidth;
	}
	,get_height: function() {
		return this.myHeight;
	}
	,get_realWidth: function() {
		return this.myWidth;
	}
	,get_realHeight: function() {
		return this.myHeight;
	}
	,isOpaque: function(x,y) {
		if(this.data == null) {
			if(kha_CanvasImage.context == null) {
				return true;
			} else {
				this.createImageData();
			}
		}
		return this.data.data[y * (this.image.width | 0) * 4 + x * 4 + 3] != 0;
	}
	,at: function(x,y) {
		if(this.data == null) {
			if(kha_CanvasImage.context == null) {
				return -16777216;
			} else {
				this.createImageData();
			}
		}
		var r = this.data.data[y * (this.image.width | 0) * 4 + x * 4];
		var g = this.data.data[y * (this.image.width | 0) * 4 + x * 4 + 1];
		var b = this.data.data[y * (this.image.width | 0) * 4 + x * 4 + 2];
		var a = this.data.data[y * (this.image.width | 0) * 4 + x * 4 + 3];
		return kha__$Color_Color_$Impl_$._new(a << 24 | r << 16 | g << 8 | b);
	}
	,createImageData: function() {
		kha_CanvasImage.context.strokeStyle = "rgba(0,0,0,0)";
		kha_CanvasImage.context.fillStyle = "rgba(0,0,0,0)";
		kha_CanvasImage.context.fillRect(0,0,this.image.width,this.image.height);
		kha_CanvasImage.context.drawImage(this.image,0,0,this.image.width,this.image.height,0,0,this.image.width,this.image.height);
		this.data = kha_CanvasImage.context.getImageData(0,0,this.image.width,this.image.height);
	}
	,texture: null
	,createTexture: function() {
		if(kha_SystemImpl.gl == null) {
			return;
		}
		this.texture = kha_SystemImpl.gl.createTexture();
		kha_SystemImpl.gl.bindTexture(3553,this.texture);
		kha_SystemImpl.gl.texParameteri(3553,10240,9729);
		kha_SystemImpl.gl.texParameteri(3553,10241,9729);
		kha_SystemImpl.gl.texParameteri(3553,10242,33071);
		kha_SystemImpl.gl.texParameteri(3553,10243,33071);
		if(this.renderTarget) {
			this.frameBuffer = kha_SystemImpl.gl.createFramebuffer();
			kha_SystemImpl.gl.bindFramebuffer(36160,this.frameBuffer);
			kha_SystemImpl.gl.texImage2D(3553,0,6408,this.get_realWidth(),this.get_realHeight(),0,6408,5121,null);
			kha_SystemImpl.gl.framebufferTexture2D(36160,36064,3553,this.texture,0);
			kha_SystemImpl.gl.bindFramebuffer(36160,null);
		} else if(this.video != null) {
			kha_SystemImpl.gl.texImage2D(3553,0,6408,6408,5121,this.video);
		} else {
			kha_SystemImpl.gl.texImage2D(3553,0,6408,6408,5121,this.image);
		}
		kha_SystemImpl.gl.bindTexture(3553,null);
	}
	,set: function(stage) {
		kha_SystemImpl.gl.activeTexture(33984 + stage);
		kha_SystemImpl.gl.bindTexture(3553,this.texture);
		if(this.video != null) {
			kha_SystemImpl.gl.texImage2D(3553,0,6408,6408,5121,this.video);
		}
	}
	,bytes: null
	,lock: function(level) {
		if(level == null) {
			level = 0;
		}
		this.bytes = new haxe_io_Bytes(new ArrayBuffer(this.format == 0 ? 4 * this.get_width() * this.get_height() : this.get_width() * this.get_height()));
		return this.bytes;
	}
	,unlock: function() {
		if(kha_SystemImpl.gl != null) {
			this.texture = kha_SystemImpl.gl.createTexture();
			kha_SystemImpl.gl.bindTexture(3553,this.texture);
			kha_SystemImpl.gl.texParameteri(3553,10240,9729);
			kha_SystemImpl.gl.texParameteri(3553,10241,9729);
			kha_SystemImpl.gl.texParameteri(3553,10242,33071);
			kha_SystemImpl.gl.texParameteri(3553,10243,33071);
			kha_SystemImpl.gl.texImage2D(3553,0,6409,this.get_width(),this.get_height(),0,6409,5121,new Uint8Array(this.bytes.b.bufferValue));
			if(kha_SystemImpl.gl.getError() == 1282) {
				var rgbaBytes = new haxe_io_Bytes(new ArrayBuffer(this.get_width() * this.get_height() * 4));
				var _g = 0;
				var _g1 = this.get_height();
				while(_g < _g1) {
					var y = _g++;
					var _g2 = 0;
					var _g11 = this.get_width();
					while(_g2 < _g11) {
						var x = _g2++;
						var _this = this.bytes;
						var pos = y * this.get_width() + x;
						var value = _this.b[pos];
						var pos1 = y * this.get_width() * 4 + x * 4;
						rgbaBytes.b[pos1] = value;
						var pos2 = y * this.get_width() * 4 + x * 4 + 1;
						rgbaBytes.b[pos2] = value;
						var pos3 = y * this.get_width() * 4 + x * 4 + 2;
						rgbaBytes.b[pos3] = value;
						var pos4 = y * this.get_width() * 4 + x * 4 + 3;
						rgbaBytes.b[pos4] = 255;
					}
				}
				kha_SystemImpl.gl.texImage2D(3553,0,6408,this.get_width(),this.get_height(),0,6408,5121,new Uint8Array(rgbaBytes.b.bufferValue));
			}
			kha_SystemImpl.gl.bindTexture(3553,null);
			this.bytes = null;
		}
	}
	,getPixels: function() {
		var context = this.g2canvas.canvas;
		var imageData = context.getImageData(0,0,this.get_width(),this.get_height());
		var bytes = new haxe_io_Bytes(new ArrayBuffer(imageData.data.length));
		var _g = 0;
		var _g1 = imageData.data.length;
		while(_g < _g1) {
			var i = _g++;
			bytes.b[i] = imageData.data[i];
		}
		return bytes;
	}
	,unload: function() {
		this.image = null;
		this.video = null;
		this.data = null;
	}
	,__class__: kha_CanvasImage
});
var kha__$Color_Color_$Impl_$ = $hx_exports["kha"]["_Color"]["Color_Impl_"] = {};
$hxClasses["kha._Color.Color_Impl_"] = kha__$Color_Color_$Impl_$;
kha__$Color_Color_$Impl_$.__name__ = "kha._Color.Color_Impl_";
kha__$Color_Color_$Impl_$.__properties__ = {set_value:"set_value",get_value:"get_value",set_A:"set_A",get_A:"get_A",set_B:"set_B",get_B:"get_B",set_G:"set_G",get_G:"get_G",set_R:"set_R",get_R:"get_R",set_Ab:"set_Ab",get_Ab:"get_Ab",set_Bb:"set_Bb",get_Bb:"get_Bb",set_Gb:"set_Gb",get_Gb:"get_Gb",set_Rb:"set_Rb",get_Rb:"get_Rb"};
kha__$Color_Color_$Impl_$.fromValue = function(value) {
	return kha__$Color_Color_$Impl_$._new(value);
};
kha__$Color_Color_$Impl_$.fromBytes = function(r,g,b,a) {
	if(a == null) {
		a = 255;
	}
	return kha__$Color_Color_$Impl_$._new(a << 24 | r << 16 | g << 8 | b);
};
kha__$Color_Color_$Impl_$.fromFloats = function(r,g,b,a) {
	if(a == null) {
		a = 1;
	}
	return kha__$Color_Color_$Impl_$._new((a * 255 | 0) << 24 | (r * 255 | 0) << 16 | (g * 255 | 0) << 8 | (b * 255 | 0));
};
kha__$Color_Color_$Impl_$.fromString = function(value) {
	if((value.length == 7 || value.length == 9) && value.charCodeAt(0) == 35) {
		var colorValue = Std.parseInt("0x" + HxOverrides.substr(value,1,null));
		if(value.length == 7) {
			colorValue += -16777216;
		}
		return kha__$Color_Color_$Impl_$._new(colorValue);
	} else {
		throw new js__$Boot_HaxeError("Invalid Color string: '" + value + "'");
	}
};
kha__$Color_Color_$Impl_$._new = function(value) {
	var this1 = value;
	return this1;
};
kha__$Color_Color_$Impl_$.get_value = function(this1) {
	return this1;
};
kha__$Color_Color_$Impl_$.set_value = function(this1,value) {
	this1 = value;
	return this1;
};
kha__$Color_Color_$Impl_$.get_Rb = function(this1) {
	return (this1 & 16711680) >>> 16;
};
kha__$Color_Color_$Impl_$.get_Gb = function(this1) {
	return (this1 & 65280) >>> 8;
};
kha__$Color_Color_$Impl_$.get_Bb = function(this1) {
	return this1 & 255;
};
kha__$Color_Color_$Impl_$.get_Ab = function(this1) {
	return this1 >>> 24;
};
kha__$Color_Color_$Impl_$.set_Rb = function(this1,i) {
	this1 = this1 >>> 24 << 24 | i << 16 | (this1 & 65280) >>> 8 << 8 | this1 & 255;
	return i;
};
kha__$Color_Color_$Impl_$.set_Gb = function(this1,i) {
	this1 = this1 >>> 24 << 24 | (this1 & 16711680) >>> 16 << 16 | i << 8 | this1 & 255;
	return i;
};
kha__$Color_Color_$Impl_$.set_Bb = function(this1,i) {
	this1 = this1 >>> 24 << 24 | (this1 & 16711680) >>> 16 << 16 | (this1 & 65280) >>> 8 << 8 | i;
	return i;
};
kha__$Color_Color_$Impl_$.set_Ab = function(this1,i) {
	this1 = i << 24 | (this1 & 16711680) >>> 16 << 16 | (this1 & 65280) >>> 8 << 8 | this1 & 255;
	return i;
};
kha__$Color_Color_$Impl_$.get_R = function(this1) {
	return ((this1 & 16711680) >>> 16) * 0.00392156862745098;
};
kha__$Color_Color_$Impl_$.get_G = function(this1) {
	return ((this1 & 65280) >>> 8) * 0.00392156862745098;
};
kha__$Color_Color_$Impl_$.get_B = function(this1) {
	return (this1 & 255) * 0.00392156862745098;
};
kha__$Color_Color_$Impl_$.get_A = function(this1) {
	return (this1 >>> 24) * 0.00392156862745098;
};
kha__$Color_Color_$Impl_$.set_R = function(this1,f) {
	this1 = ((this1 >>> 24) * 0.00392156862745098 * 255 | 0) << 24 | (f * 255 | 0) << 16 | (((this1 & 65280) >>> 8) * 0.00392156862745098 * 255 | 0) << 8 | ((this1 & 255) * 0.00392156862745098 * 255 | 0);
	return f;
};
kha__$Color_Color_$Impl_$.set_G = function(this1,f) {
	this1 = ((this1 >>> 24) * 0.00392156862745098 * 255 | 0) << 24 | (((this1 & 16711680) >>> 16) * 0.00392156862745098 * 255 | 0) << 16 | (f * 255 | 0) << 8 | ((this1 & 255) * 0.00392156862745098 * 255 | 0);
	return f;
};
kha__$Color_Color_$Impl_$.set_B = function(this1,f) {
	this1 = ((this1 >>> 24) * 0.00392156862745098 * 255 | 0) << 24 | (((this1 & 16711680) >>> 16) * 0.00392156862745098 * 255 | 0) << 16 | (((this1 & 65280) >>> 8) * 0.00392156862745098 * 255 | 0) << 8 | (f * 255 | 0);
	return f;
};
kha__$Color_Color_$Impl_$.set_A = function(this1,f) {
	this1 = (f * 255 | 0) << 24 | (((this1 & 16711680) >>> 16) * 0.00392156862745098 * 255 | 0) << 16 | (((this1 & 65280) >>> 8) * 0.00392156862745098 * 255 | 0) << 8 | ((this1 & 255) * 0.00392156862745098 * 255 | 0);
	return f;
};
var kha_Display = function() {
};
$hxClasses["kha.Display"] = kha_Display;
kha_Display.__name__ = "kha.Display";
kha_Display.__properties__ = {get_all:"get_all",get_primary:"get_primary"};
kha_Display.get_primary = function() {
	return kha_Display.instance;
};
kha_Display.get_all = function() {
	return [kha_Display.get_primary()];
};
kha_Display.prototype = {
	get_available: function() {
		return true;
	}
	,get_name: function() {
		return "Display";
	}
	,get_x: function() {
		return window.screen.left;
	}
	,get_y: function() {
		return window.screen.top;
	}
	,get_width: function() {
		return window.screen.width;
	}
	,get_height: function() {
		return window.screen.height;
	}
	,get_frequency: function() {
		return 60;
	}
	,get_pixelsPerInch: function() {
		var dpiElement = window.document.createElement("div");
		dpiElement.style.position = "absolute";
		dpiElement.style.width = "1in";
		dpiElement.style.height = "1in";
		dpiElement.style.left = "-100%";
		dpiElement.style.top = "-100%";
		window.document.body.appendChild(dpiElement);
		var dpi = dpiElement.offsetHeight;
		dpiElement.remove();
		return dpi;
	}
	,get_modes: function() {
		return [];
	}
	,__class__: kha_Display
	,__properties__: {get_modes:"get_modes",get_pixelsPerInch:"get_pixelsPerInch",get_frequency:"get_frequency",get_height:"get_height",get_width:"get_width",get_y:"get_y",get_x:"get_x",get_name:"get_name",get_available:"get_available"}
};
var kha_DisplayMode = function(width,height,frequency,bitsPerPixel) {
	this.width = width;
	this.height = height;
	this.frequency = frequency;
	this.bitsPerPixel = bitsPerPixel;
};
$hxClasses["kha.DisplayMode"] = kha_DisplayMode;
kha_DisplayMode.__name__ = "kha.DisplayMode";
kha_DisplayMode.prototype = {
	width: null
	,height: null
	,frequency: null
	,bitsPerPixel: null
	,__class__: kha_DisplayMode
};
var kha_Framebuffer = function($window,g1,g2,g4) {
	this.window = $window;
	this.graphics1 = g1;
	this.graphics2 = g2;
	this.graphics4 = g4;
};
$hxClasses["kha.Framebuffer"] = kha_Framebuffer;
kha_Framebuffer.__name__ = "kha.Framebuffer";
kha_Framebuffer.__interfaces__ = [kha_Canvas];
kha_Framebuffer.prototype = {
	window: null
	,graphics1: null
	,graphics2: null
	,graphics4: null
	,init: function(g1,g2,g4) {
		this.graphics1 = g1;
		this.graphics2 = g2;
		this.graphics4 = g4;
	}
	,get_g1: function() {
		return this.graphics1;
	}
	,get_g2: function() {
		return this.graphics2;
	}
	,get_g4: function() {
		return this.graphics4;
	}
	,width: null
	,get_width: function() {
		return kha_System.windowWidth(this.window);
	}
	,height: null
	,get_height: function() {
		return kha_System.windowHeight(this.window);
	}
	,__class__: kha_Framebuffer
	,__properties__: {get_height:"get_height",get_width:"get_width",get_g4:"get_g4",get_g2:"get_g2",get_g1:"get_g1"}
};
var kha_FramebufferOptions = function(frequency,verticalSync,colorBufferBits,depthBufferBits,stencilBufferBits,samplesPerPixel) {
	if(samplesPerPixel == null) {
		samplesPerPixel = 1;
	}
	if(stencilBufferBits == null) {
		stencilBufferBits = 8;
	}
	if(depthBufferBits == null) {
		depthBufferBits = 16;
	}
	if(colorBufferBits == null) {
		colorBufferBits = 32;
	}
	if(verticalSync == null) {
		verticalSync = true;
	}
	if(frequency == null) {
		frequency = 60;
	}
	this.samplesPerPixel = 1;
	this.stencilBufferBits = 8;
	this.depthBufferBits = 16;
	this.colorBufferBits = 32;
	this.verticalSync = true;
	this.frequency = 60;
	this.frequency = frequency;
	this.verticalSync = verticalSync;
	this.colorBufferBits = colorBufferBits;
	this.depthBufferBits = depthBufferBits;
	this.stencilBufferBits = stencilBufferBits;
	this.samplesPerPixel = samplesPerPixel;
};
$hxClasses["kha.FramebufferOptions"] = kha_FramebufferOptions;
kha_FramebufferOptions.__name__ = "kha.FramebufferOptions";
kha_FramebufferOptions.prototype = {
	frequency: null
	,verticalSync: null
	,colorBufferBits: null
	,depthBufferBits: null
	,stencilBufferBits: null
	,samplesPerPixel: null
	,__class__: kha_FramebufferOptions
};
var kha_AlignedQuad = function() {
};
$hxClasses["kha.AlignedQuad"] = kha_AlignedQuad;
kha_AlignedQuad.__name__ = "kha.AlignedQuad";
kha_AlignedQuad.prototype = {
	x0: null
	,y0: null
	,s0: null
	,t0: null
	,x1: null
	,y1: null
	,s1: null
	,t1: null
	,xadvance: null
	,__class__: kha_AlignedQuad
};
var kha_KravurImage = function(size,ascent,descent,lineGap,width,height,chars,pixels) {
	this.mySize = size;
	this.width = width;
	this.height = height;
	this.chars = chars;
	this.baseline = ascent;
	var _g = 0;
	while(_g < chars.length) {
		var char = chars[_g];
		++_g;
		char.yoff += this.baseline;
	}
	this.texture = kha_Image.create(width,height,1);
	var bytes = this.texture.lock();
	var pos = 0;
	var _g1 = 0;
	var _g2 = height;
	while(_g1 < _g2) {
		var y = _g1++;
		var _g11 = 0;
		var _g21 = width;
		while(_g11 < _g21) {
			var x = _g11++;
			var v = pixels.readU8(pos);
			bytes.b[pos] = v;
			++pos;
		}
	}
	this.texture.unlock();
};
$hxClasses["kha.KravurImage"] = kha_KravurImage;
kha_KravurImage.__name__ = "kha.KravurImage";
kha_KravurImage.prototype = {
	mySize: null
	,chars: null
	,texture: null
	,width: null
	,height: null
	,baseline: null
	,getTexture: function() {
		return this.texture;
	}
	,getBakedQuad: function(q,char_index,xpos,ypos) {
		if(char_index >= this.chars.length) {
			return null;
		}
		var ipw = 1.0 / this.width;
		var iph = 1.0 / this.height;
		var b = this.chars[char_index];
		if(b == null) {
			return null;
		}
		var round_x = Math.round(xpos + b.xoff);
		var round_y = Math.round(ypos + b.yoff);
		q.x0 = round_x;
		q.y0 = round_y;
		q.x1 = round_x + b.x1 - b.x0;
		q.y1 = round_y + b.y1 - b.y0;
		q.s0 = b.x0 * ipw;
		q.t0 = b.y0 * iph;
		q.s1 = b.x1 * ipw;
		q.t1 = b.y1 * iph;
		q.xadvance = b.xadvance;
		return q;
	}
	,getCharWidth: function(charIndex) {
		if(this.chars.length == 0) {
			return 0;
		}
		var offset = kha_KravurImage.charBlocks[0];
		if(charIndex < offset) {
			return this.chars[0].xadvance;
		}
		var _g = 1;
		var _g1 = kha_KravurImage.charBlocks.length / 2 | 0;
		while(_g < _g1) {
			var i = _g++;
			var prevEnd = kha_KravurImage.charBlocks[i * 2 - 1];
			var start = kha_KravurImage.charBlocks[i * 2];
			if(charIndex > start - 1) {
				offset += start - 1 - prevEnd;
			}
		}
		if(charIndex - offset >= this.chars.length) {
			return this.chars[0].xadvance;
		}
		return this.chars[charIndex - offset].xadvance;
	}
	,getHeight: function() {
		return this.mySize;
	}
	,stringWidth: function(str) {
		var width = 0;
		var _g = 0;
		var _g1 = str.length;
		while(_g < _g1) {
			var c = _g++;
			width += this.getCharWidth(HxOverrides.cca(str,c));
		}
		return width;
	}
	,charactersWidth: function(characters,start,length) {
		var width = 0;
		var _g = start;
		var _g1 = start + length;
		while(_g < _g1) {
			var i = _g++;
			width += this.getCharWidth(characters[i]);
		}
		return width;
	}
	,getBaselinePosition: function() {
		return this.baseline;
	}
	,__class__: kha_KravurImage
};
var kha_Kravur = function(blob) {
	this.images = new haxe_ds_IntMap();
	this.blob = blob;
};
$hxClasses["kha.Kravur"] = kha_Kravur;
kha_Kravur.__name__ = "kha.Kravur";
kha_Kravur.__interfaces__ = [kha_Resource];
kha_Kravur.fromBytes = function(bytes) {
	return new kha_Kravur(kha_internal_BytesBlob.fromBytes(bytes));
};
kha_Kravur.prototype = {
	oldGlyphs: null
	,blob: null
	,images: null
	,_get: function(fontSize) {
		var glyphs = kha_graphics2_Graphics.fontGlyphs;
		if(glyphs != this.oldGlyphs) {
			this.oldGlyphs = glyphs;
			kha_KravurImage.charBlocks = [glyphs[0]];
			var nextChar = kha_KravurImage.charBlocks[0] + 1;
			var _g = 1;
			var _g1 = glyphs.length;
			while(_g < _g1) {
				var i = _g++;
				if(glyphs[i] != nextChar) {
					kha_KravurImage.charBlocks.push(glyphs[i - 1]);
					kha_KravurImage.charBlocks.push(glyphs[i]);
					nextChar = glyphs[i] + 1;
				} else {
					++nextChar;
				}
			}
			kha_KravurImage.charBlocks.push(glyphs[glyphs.length - 1]);
		}
		var imageIndex = fontSize * 10000 + glyphs.length;
		if(!this.images.h.hasOwnProperty(imageIndex)) {
			var width = 64;
			var height = 32;
			var this1 = new Array(glyphs.length);
			var baked = this1;
			var _g2 = 0;
			var _g11 = baked.length;
			while(_g2 < _g11) {
				var i1 = _g2++;
				baked[i1] = new kha_graphics2_truetype_Stbtt_$bakedchar();
			}
			var pixels = null;
			var status = -1;
			while(status <= 0) {
				if(height < width) {
					height *= 2;
				} else {
					width *= 2;
				}
				pixels = kha_internal_BytesBlob.alloc(width * height);
				status = kha_graphics2_truetype_StbTruetype.stbtt_BakeFontBitmap(this.blob,0,fontSize,pixels,width,height,glyphs,baked);
			}
			var info = new kha_graphics2_truetype_Stbtt_$fontinfo();
			kha_graphics2_truetype_StbTruetype.stbtt_InitFont(info,this.blob,0);
			var metrics = kha_graphics2_truetype_StbTruetype.stbtt_GetFontVMetrics(info);
			var scale = kha_graphics2_truetype_StbTruetype.stbtt_ScaleForPixelHeight(info,fontSize);
			var ascent = Math.round(metrics.ascent * scale);
			var descent = Math.round(metrics.descent * scale);
			var lineGap = Math.round(metrics.lineGap * scale);
			var image = new kha_KravurImage(fontSize | 0,ascent,descent,lineGap,width,height,baked,pixels);
			this.images.h[imageIndex] = image;
			return image;
		}
		return this.images.h[imageIndex];
	}
	,height: function(fontSize) {
		return this._get(fontSize).getHeight();
	}
	,width: function(fontSize,str) {
		return this._get(fontSize).stringWidth(str);
	}
	,widthOfCharacters: function(fontSize,characters,start,length) {
		return this._get(fontSize).charactersWidth(characters,start,length);
	}
	,baseline: function(fontSize) {
		return this._get(fontSize).getBaselinePosition();
	}
	,unload: function() {
		this.blob = null;
		this.images = null;
	}
	,__class__: kha_Kravur
};
var kha_LoaderImpl = function() { };
$hxClasses["kha.LoaderImpl"] = kha_LoaderImpl;
kha_LoaderImpl.__name__ = "kha.LoaderImpl";
kha_LoaderImpl.getImageFormats = function() {
	return ["png","jpg","hdr"];
};
kha_LoaderImpl.loadImageFromDescription = function(desc,done,failed) {
	var readable = Object.prototype.hasOwnProperty.call(desc,"readable") && desc.readable;
	if(StringTools.endsWith(desc.files[0],".hdr")) {
		kha_LoaderImpl.loadBlobFromDescription(desc,function(blob) {
			var hdrImage = kha_internal_HdrFormat.parse(blob.toBytes());
			var tmp = kha_Image.fromBytes(haxe_io_Bytes.ofData(hdrImage.data.buffer),hdrImage.width,hdrImage.height,2,readable ? 1 : 0);
			done(tmp);
		},failed);
	} else {
		var img = window.document.createElement("img");
		img.onerror = function(event) {
			failed({ url : desc.files[0], error : event});
		};
		img.onload = function(event1) {
			var tmp1 = kha_Image.fromImage(img,readable);
			done(tmp1);
		};
		img.src = desc.files[0];
		img.crossOrigin = "";
	}
};
kha_LoaderImpl.getSoundFormats = function() {
	var element = window.document.createElement("audio");
	var formats = [];
	if(kha_SystemImpl._hasWebAudio || element.canPlayType("audio/ogg") != "") {
		formats.push("ogg");
	}
	return formats;
};
kha_LoaderImpl.loadSoundFromDescription = function(desc,done,failed) {
	if(kha_SystemImpl._hasWebAudio) {
		var _g = 0;
		var _g1 = desc.files.length;
		while(_g < _g1) {
			var i = _g++;
			var file = desc.files[i];
			if(StringTools.endsWith(file,".ogg")) {
				new kha_js_WebAudioSound(file,done,failed);
				return;
			}
		}
	} else if(kha_SystemImpl.mobile) {
		var element = window.document.createElement("audio");
		if(element.canPlayType("audio/mp4") != "") {
			var _g2 = 0;
			var _g11 = desc.files.length;
			while(_g2 < _g11) {
				var i1 = _g2++;
				var file1 = desc.files[i1];
				if(StringTools.endsWith(file1,".mp4")) {
					new kha_js_MobileWebAudioSound(file1,done,failed);
					return;
				}
			}
		}
		if(element.canPlayType("audio/mp3") != "") {
			var _g3 = 0;
			var _g12 = desc.files.length;
			while(_g3 < _g12) {
				var i2 = _g3++;
				var file2 = desc.files[i2];
				if(StringTools.endsWith(file2,".mp3")) {
					new kha_js_MobileWebAudioSound(file2,done,failed);
					return;
				}
			}
		}
		var _g4 = 0;
		var _g13 = desc.files.length;
		while(_g4 < _g13) {
			var i3 = _g4++;
			var file3 = desc.files[i3];
			if(StringTools.endsWith(file3,".ogg")) {
				new kha_js_MobileWebAudioSound(file3,done,failed);
				return;
			}
		}
	} else {
		new kha_js_Sound(desc.files,done,failed);
	}
};
kha_LoaderImpl.getVideoFormats = function() {
	return ["webm"];
};
kha_LoaderImpl.loadVideoFromDescription = function(desc,done,failed) {
	kha_js_Video.fromFile(desc.files,done);
};
kha_LoaderImpl.loadRemote = function(desc,done,failed) {
	var request = new XMLHttpRequest();
	request.open("GET",desc.files[0],true);
	request.responseType = "arraybuffer";
	request.onreadystatechange = function() {
		if(request.readyState != 4) {
			return;
		}
		if(request.status >= 200 && request.status < 400 || request.status == 0 && request.statusText == "") {
			var bytes = null;
			var arrayBuffer = request.response;
			if(arrayBuffer != null) {
				var byteArray = new Uint8Array(arrayBuffer);
				bytes = haxe_io_Bytes.ofData(byteArray);
			} else if(request.responseBody != null) {
				var data = VBArray(request.responseBody).toArray();
				bytes = new haxe_io_Bytes(new ArrayBuffer(data.length));
				var _g = 0;
				var _g1 = data.length;
				while(_g < _g1) {
					var i = _g++;
					bytes.b[i] = data[i];
				}
			} else {
				failed({ url : desc.files[0]});
				return;
			}
			done(new kha_internal_BytesBlob(bytes));
		} else {
			failed({ url : desc.files[0]});
		}
	};
	request.send(null);
};
kha_LoaderImpl.loadBlobFromDescription = function(desc,done,failed) {
	var isUrl = desc.files[0].startsWith("http");
	if(isUrl) {
		kha_LoaderImpl.loadRemote(desc,done,failed);
	} else {
		var fs = require('electron').remote.require('fs');
		var path = require('electron').remote.require('path');
		var app = require('electron').remote.require('electron').app;
		var url;
		if(path.isAbsolute(desc.files[0])) {
			url = desc.files[0];
		} else {
			var url1 = app.getAppPath();
			url = path.join(url1,desc.files[0]);
		}
		fs.readFile(url,function(err,data) {
			if(err != null) {
				failed({ url : url, error : err});
				return;
			}
			var byteArray = new Uint8Array(data);
			var bytes = new haxe_io_Bytes(new ArrayBuffer(byteArray.byteLength));
			var _g = 0;
			var _g1 = byteArray.byteLength;
			while(_g < _g1) {
				var i = _g++;
				bytes.b[i] = byteArray[i];
			}
			done(new kha_internal_BytesBlob(bytes));
		});
	}
};
kha_LoaderImpl.loadFontFromDescription = function(desc,done,failed) {
	kha_LoaderImpl.loadBlobFromDescription(desc,function(blob) {
		done(new kha_Kravur(blob));
	},failed);
};
var kha_TimeTask = function() {
};
$hxClasses["kha.TimeTask"] = kha_TimeTask;
kha_TimeTask.__name__ = "kha.TimeTask";
kha_TimeTask.prototype = {
	task: null
	,start: null
	,period: null
	,duration: null
	,next: null
	,id: null
	,groupId: null
	,active: null
	,paused: null
	,__class__: kha_TimeTask
};
var kha_FrameTask = function(task,priority,id) {
	this.task = task;
	this.priority = priority;
	this.id = id;
	this.active = true;
	this.paused = false;
};
$hxClasses["kha.FrameTask"] = kha_FrameTask;
kha_FrameTask.__name__ = "kha.FrameTask";
kha_FrameTask.prototype = {
	task: null
	,priority: null
	,id: null
	,active: null
	,paused: null
	,__class__: kha_FrameTask
};
var kha_Scheduler = function() { };
$hxClasses["kha.Scheduler"] = kha_Scheduler;
kha_Scheduler.__name__ = "kha.Scheduler";
kha_Scheduler.init = function() {
	kha_Scheduler.deltas = [];
	var _g = 0;
	var _g1 = kha_Scheduler.DIF_COUNT;
	while(_g < _g1) {
		var i = _g++;
		kha_Scheduler.deltas[i] = 0;
	}
	kha_Scheduler.stopped = true;
	kha_Scheduler.frame_tasks_sorted = true;
	kha_Scheduler.current = kha_Scheduler.lastTime = kha_Scheduler.realTime();
	kha_Scheduler.currentFrameTaskId = 0;
	kha_Scheduler.currentTimeTaskId = 0;
	kha_Scheduler.currentGroupId = 0;
	kha_Scheduler.timeTasks = [];
	kha_Scheduler.pausedTimeTasks = [];
	kha_Scheduler.outdatedTimeTasks = [];
	kha_Scheduler.timeTasksScratchpad = [];
	kha_Scheduler.frameTasks = [];
	kha_Scheduler.toDeleteFrame = [];
};
kha_Scheduler.start = function(restartTimers) {
	if(restartTimers == null) {
		restartTimers = false;
	}
	kha_Scheduler.vsync = kha_Window.get(0).get_vSynced();
	var hz = kha_Display.get_primary().get_frequency();
	if(hz >= 57 && hz <= 63) {
		hz = 60;
	}
	kha_Scheduler.onedifhz = 1.0 / hz;
	kha_Scheduler.stopped = false;
	kha_Scheduler.resetTime();
	kha_Scheduler.lastTime = kha_Scheduler.realTime() - kha_Scheduler.startTime;
	var _g = 0;
	var _g1 = kha_Scheduler.DIF_COUNT;
	while(_g < _g1) {
		var i = _g++;
		kha_Scheduler.deltas[i] = 0;
	}
	if(restartTimers) {
		var _g2 = 0;
		var _g3 = kha_Scheduler.timeTasks;
		while(_g2 < _g3.length) {
			var timeTask = _g3[_g2];
			++_g2;
			timeTask.paused = false;
		}
		var _g4 = 0;
		var _g5 = kha_Scheduler.frameTasks;
		while(_g4 < _g5.length) {
			var frameTask = _g5[_g4];
			++_g4;
			frameTask.paused = false;
		}
	}
};
kha_Scheduler.stop = function() {
	kha_Scheduler.stopped = true;
};
kha_Scheduler.isStopped = function() {
	return kha_Scheduler.stopped;
};
kha_Scheduler.warpTimeTasksBack = function(time,tasks) {
	var _g = 0;
	while(_g < tasks.length) {
		var timeTask = tasks[_g];
		++_g;
		if(timeTask.start >= time) {
			timeTask.next = timeTask.start;
		} else if(timeTask.period > 0) {
			var sinceStart = time - timeTask.start;
			var times = Math.ceil(sinceStart / timeTask.period);
			timeTask.next = timeTask.start + times * timeTask.period;
		}
	}
};
kha_Scheduler.warp = function(time) {
	if(time < kha_Scheduler.lastTime) {
		kha_Scheduler.current = time;
		kha_Scheduler.lastTime = time;
		kha_Scheduler.warpTimeTasksBack(time,kha_Scheduler.outdatedTimeTasks);
		kha_Scheduler.warpTimeTasksBack(time,kha_Scheduler.timeTasks);
		var _g = 0;
		var _g1 = kha_Scheduler.outdatedTimeTasks;
		while(_g < _g1.length) {
			var task = _g1[_g];
			++_g;
			if(task.next >= time) {
				kha_Scheduler.timeTasksScratchpad.push(task);
			}
		}
		var _g2 = 0;
		var _g3 = kha_Scheduler.timeTasksScratchpad;
		while(_g2 < _g3.length) {
			var task1 = _g3[_g2];
			++_g2;
			HxOverrides.remove(kha_Scheduler.outdatedTimeTasks,task1);
		}
		var _g4 = 0;
		var _g5 = kha_Scheduler.timeTasksScratchpad;
		while(_g4 < _g5.length) {
			var task2 = _g5[_g4];
			++_g4;
			kha_Scheduler.insertSorted(kha_Scheduler.timeTasks,task2);
		}
		while(kha_Scheduler.timeTasksScratchpad.length > 0) HxOverrides.remove(kha_Scheduler.timeTasksScratchpad,kha_Scheduler.timeTasksScratchpad[0]);
	} else if(time > kha_Scheduler.lastTime) {
		kha_Scheduler.startTime -= time - kha_Scheduler.lastTime;
		kha_Scheduler.current = time;
		kha_Scheduler.lastTime = time;
		kha_Scheduler.executeTimeTasks(time);
	}
};
kha_Scheduler.executeFrame = function() {
	var now = kha_Scheduler.realTime() - kha_Scheduler.startTime;
	var delta = now - kha_Scheduler.lastTime;
	var frameEnd = kha_Scheduler.current;
	if(delta >= 0) {
		if(kha_netsync_Session.the() == null) {
			if(delta > kha_Scheduler.maxframetime) {
				kha_Scheduler.startTime += delta - kha_Scheduler.maxframetime;
				delta = kha_Scheduler.maxframetime;
				frameEnd += delta;
			} else if(kha_Scheduler.vsync) {
				var realdif = kha_Scheduler.onedifhz;
				while(realdif < delta - kha_Scheduler.onedifhz) realdif += kha_Scheduler.onedifhz;
				delta = realdif;
				var _g = 0;
				var _g1 = kha_Scheduler.DIF_COUNT - 2;
				while(_g < _g1) {
					var i = _g++;
					delta += kha_Scheduler.deltas[i];
					kha_Scheduler.deltas[i] = kha_Scheduler.deltas[i + 1];
				}
				delta += kha_Scheduler.deltas[kha_Scheduler.DIF_COUNT - 2];
				delta /= kha_Scheduler.DIF_COUNT;
				kha_Scheduler.deltas[kha_Scheduler.DIF_COUNT - 2] = realdif;
				frameEnd += delta;
			} else {
				var _g2 = 0;
				var _g11 = kha_Scheduler.DIF_COUNT - 1;
				while(_g2 < _g11) {
					var i1 = _g2++;
					kha_Scheduler.deltas[i1] = kha_Scheduler.deltas[i1 + 1];
				}
				kha_Scheduler.deltas[kha_Scheduler.DIF_COUNT - 1] = delta;
				var next = 0;
				var _g21 = 0;
				var _g3 = kha_Scheduler.DIF_COUNT;
				while(_g21 < _g3) {
					var i2 = _g21++;
					next += kha_Scheduler.deltas[i2];
				}
				next /= kha_Scheduler.DIF_COUNT;
				frameEnd += next;
			}
		} else {
			frameEnd += delta;
		}
		kha_Scheduler.lastTime = frameEnd;
		if(!kha_Scheduler.stopped) {
			kha_Scheduler.current = frameEnd;
		}
		var _g4 = 0;
		var _g12 = kha_Scheduler.pausedTimeTasks;
		while(_g4 < _g12.length) {
			var pausedTask = _g12[_g4];
			++_g4;
			pausedTask.next += delta;
		}
		if(kha_Scheduler.stopped) {
			var _g22 = 0;
			var _g31 = kha_Scheduler.timeTasks;
			while(_g22 < _g31.length) {
				var timeTask = _g31[_g22];
				++_g22;
				timeTask.next += delta;
			}
		}
		kha_Scheduler.executeTimeTasks(frameEnd);
		var _g23 = 0;
		var _g32 = kha_Scheduler.outdatedTimeTasks;
		while(_g23 < _g32.length) {
			var task = _g32[_g23];
			++_g23;
			if(task.next < frameEnd - 10.0) {
				kha_Scheduler.timeTasksScratchpad.push(task);
			}
		}
		var _g41 = 0;
		var _g5 = kha_Scheduler.timeTasksScratchpad;
		while(_g41 < _g5.length) {
			var task1 = _g5[_g41];
			++_g41;
			HxOverrides.remove(kha_Scheduler.outdatedTimeTasks,task1);
		}
		while(kha_Scheduler.timeTasksScratchpad.length > 0) HxOverrides.remove(kha_Scheduler.timeTasksScratchpad,kha_Scheduler.timeTasksScratchpad[0]);
	}
	kha_Scheduler.sortFrameTasks();
	var _g6 = 0;
	var _g13 = kha_Scheduler.frameTasks;
	while(_g6 < _g13.length) {
		var frameTask = _g13[_g6];
		++_g6;
		if(!kha_Scheduler.stopped && !frameTask.paused && frameTask.active) {
			if(!frameTask.task()) {
				frameTask.active = false;
			}
		}
	}
	var _g24 = 0;
	var _g33 = kha_Scheduler.frameTasks;
	while(_g24 < _g33.length) {
		var frameTask1 = _g33[_g24];
		++_g24;
		if(!frameTask1.active) {
			kha_Scheduler.toDeleteFrame.push(frameTask1);
		}
	}
	while(kha_Scheduler.toDeleteFrame.length > 0) HxOverrides.remove(kha_Scheduler.frameTasks,kha_Scheduler.toDeleteFrame.pop());
};
kha_Scheduler.executeTimeTasks = function(until) {
	while(kha_Scheduler.timeTasks.length > 0) {
		kha_Scheduler.activeTimeTask = kha_Scheduler.timeTasks[0];
		if(kha_Scheduler.activeTimeTask.next <= until) {
			kha_Scheduler.activeTimeTask.next += kha_Scheduler.activeTimeTask.period;
			HxOverrides.remove(kha_Scheduler.timeTasks,kha_Scheduler.activeTimeTask);
			if(kha_Scheduler.activeTimeTask.active && kha_Scheduler.activeTimeTask.task()) {
				if(kha_Scheduler.activeTimeTask.period > 0 && (kha_Scheduler.activeTimeTask.duration == 0 || kha_Scheduler.activeTimeTask.duration >= kha_Scheduler.activeTimeTask.start + kha_Scheduler.activeTimeTask.next)) {
					kha_Scheduler.insertSorted(kha_Scheduler.timeTasks,kha_Scheduler.activeTimeTask);
				} else {
					kha_Scheduler.archiveTimeTask(kha_Scheduler.activeTimeTask,until);
				}
			} else {
				kha_Scheduler.activeTimeTask.active = false;
				kha_Scheduler.archiveTimeTask(kha_Scheduler.activeTimeTask,until);
			}
		} else {
			break;
		}
	}
	kha_Scheduler.activeTimeTask = null;
};
kha_Scheduler.archiveTimeTask = function(timeTask,frameEnd) {
};
kha_Scheduler.time = function() {
	return kha_Scheduler.current;
};
kha_Scheduler.realTime = function() {
	return kha_System.get_time();
};
kha_Scheduler.resetTime = function() {
	var now = kha_System.get_time();
	var dif = now - kha_Scheduler.startTime;
	kha_Scheduler.startTime = now;
	var _g = 0;
	var _g1 = kha_Scheduler.timeTasks;
	while(_g < _g1.length) {
		var timeTask = _g1[_g];
		++_g;
		timeTask.start -= dif;
		timeTask.next -= dif;
	}
	var _g2 = 0;
	var _g3 = kha_Scheduler.DIF_COUNT;
	while(_g2 < _g3) {
		var i = _g2++;
		kha_Scheduler.deltas[i] = 0;
	}
	kha_Scheduler.current = 0;
	kha_Scheduler.lastTime = 0;
};
kha_Scheduler.addBreakableFrameTask = function(task,priority) {
	kha_Scheduler.frameTasks.push(new kha_FrameTask(task,priority,++kha_Scheduler.currentFrameTaskId));
	kha_Scheduler.frame_tasks_sorted = false;
	return kha_Scheduler.currentFrameTaskId;
};
kha_Scheduler.addFrameTask = function(task,priority) {
	return kha_Scheduler.addBreakableFrameTask(function() {
		task();
		return true;
	},priority);
};
kha_Scheduler.pauseFrameTask = function(id,paused) {
	var _g = 0;
	var _g1 = kha_Scheduler.frameTasks;
	while(_g < _g1.length) {
		var frameTask = _g1[_g];
		++_g;
		if(frameTask.id == id) {
			frameTask.paused = paused;
			break;
		}
	}
};
kha_Scheduler.removeFrameTask = function(id) {
	var _g = 0;
	var _g1 = kha_Scheduler.frameTasks;
	while(_g < _g1.length) {
		var frameTask = _g1[_g];
		++_g;
		if(frameTask.id == id) {
			frameTask.active = false;
			break;
		}
	}
};
kha_Scheduler.generateGroupId = function() {
	return ++kha_Scheduler.currentGroupId;
};
kha_Scheduler.addBreakableTimeTaskToGroup = function(groupId,task,start,period,duration) {
	if(duration == null) {
		duration = 0;
	}
	if(period == null) {
		period = 0;
	}
	var t = new kha_TimeTask();
	t.active = true;
	t.task = task;
	t.id = ++kha_Scheduler.currentTimeTaskId;
	t.groupId = groupId;
	t.start = kha_Scheduler.current + start;
	t.period = 0;
	if(period != 0) {
		t.period = period;
	}
	t.duration = 0;
	if(duration != 0) {
		t.duration = t.start + duration;
	}
	t.next = t.start;
	kha_Scheduler.insertSorted(kha_Scheduler.timeTasks,t);
	return t.id;
};
kha_Scheduler.addTimeTaskToGroup = function(groupId,task,start,period,duration) {
	if(duration == null) {
		duration = 0;
	}
	if(period == null) {
		period = 0;
	}
	return kha_Scheduler.addBreakableTimeTaskToGroup(groupId,function() {
		task();
		return true;
	},start,period,duration);
};
kha_Scheduler.addBreakableTimeTask = function(task,start,period,duration) {
	if(duration == null) {
		duration = 0;
	}
	if(period == null) {
		period = 0;
	}
	return kha_Scheduler.addBreakableTimeTaskToGroup(0,task,start,period,duration);
};
kha_Scheduler.addTimeTask = function(task,start,period,duration) {
	if(duration == null) {
		duration = 0;
	}
	if(period == null) {
		period = 0;
	}
	return kha_Scheduler.addTimeTaskToGroup(0,task,start,period,duration);
};
kha_Scheduler.getTimeTask = function(id) {
	if(kha_Scheduler.activeTimeTask != null && kha_Scheduler.activeTimeTask.id == id) {
		return kha_Scheduler.activeTimeTask;
	}
	var _g = 0;
	var _g1 = kha_Scheduler.timeTasks;
	while(_g < _g1.length) {
		var timeTask = _g1[_g];
		++_g;
		if(timeTask.id == id) {
			return timeTask;
		}
	}
	var _g2 = 0;
	var _g3 = kha_Scheduler.pausedTimeTasks;
	while(_g2 < _g3.length) {
		var timeTask1 = _g3[_g2];
		++_g2;
		if(timeTask1.id == id) {
			return timeTask1;
		}
	}
	return null;
};
kha_Scheduler.pauseTimeTask = function(id,paused) {
	var timeTask = kha_Scheduler.getTimeTask(id);
	if(timeTask != null) {
		kha_Scheduler.pauseRunningTimeTask(timeTask,paused);
	}
	if(kha_Scheduler.activeTimeTask != null && kha_Scheduler.activeTimeTask.id == id) {
		kha_Scheduler.activeTimeTask.paused = paused;
	}
};
kha_Scheduler.pauseRunningTimeTask = function(timeTask,paused) {
	timeTask.paused = paused;
	if(paused) {
		HxOverrides.remove(kha_Scheduler.timeTasks,timeTask);
		kha_Scheduler.pausedTimeTasks.push(timeTask);
	} else {
		kha_Scheduler.insertSorted(kha_Scheduler.timeTasks,timeTask);
		HxOverrides.remove(kha_Scheduler.pausedTimeTasks,timeTask);
	}
};
kha_Scheduler.pauseTimeTasks = function(groupId,paused) {
	var _g = 0;
	var _g1 = kha_Scheduler.timeTasks;
	while(_g < _g1.length) {
		var timeTask = _g1[_g];
		++_g;
		if(timeTask.groupId == groupId) {
			kha_Scheduler.pauseRunningTimeTask(timeTask,paused);
		}
	}
	if(kha_Scheduler.activeTimeTask != null && kha_Scheduler.activeTimeTask.groupId == groupId) {
		kha_Scheduler.activeTimeTask.paused = paused;
	}
};
kha_Scheduler.removeTimeTask = function(id) {
	var timeTask = kha_Scheduler.getTimeTask(id);
	if(timeTask != null) {
		timeTask.active = false;
		HxOverrides.remove(kha_Scheduler.timeTasks,timeTask);
	}
};
kha_Scheduler.removeTimeTasks = function(groupId) {
	var _g = 0;
	var _g1 = kha_Scheduler.timeTasks;
	while(_g < _g1.length) {
		var timeTask = _g1[_g];
		++_g;
		if(timeTask.groupId == groupId) {
			timeTask.active = false;
			kha_Scheduler.timeTasksScratchpad.push(timeTask);
		}
	}
	var _g2 = 0;
	var _g3 = kha_Scheduler.timeTasksScratchpad;
	while(_g2 < _g3.length) {
		var timeTask1 = _g3[_g2];
		++_g2;
		HxOverrides.remove(kha_Scheduler.timeTasks,timeTask1);
	}
	while(kha_Scheduler.timeTasksScratchpad.length > 0) HxOverrides.remove(kha_Scheduler.timeTasksScratchpad,kha_Scheduler.timeTasksScratchpad[0]);
	if(kha_Scheduler.activeTimeTask != null && kha_Scheduler.activeTimeTask.groupId == groupId) {
		kha_Scheduler.activeTimeTask.active = false;
	}
};
kha_Scheduler.numTasksInSchedule = function() {
	return kha_Scheduler.timeTasks.length + kha_Scheduler.frameTasks.length;
};
kha_Scheduler.insertSorted = function(list,task) {
	var _g = 0;
	var _g1 = list.length;
	while(_g < _g1) {
		var i = _g++;
		if(list[i].next > task.next) {
			list.splice(i,0,task);
			return;
		}
	}
	list.push(task);
};
kha_Scheduler.sortFrameTasks = function() {
	if(kha_Scheduler.frame_tasks_sorted) {
		return;
	}
	kha_Scheduler.frameTasks.sort(function(a,b) {
		if(a.priority > b.priority) {
			return 1;
		} else if(a.priority < b.priority) {
			return -1;
		} else {
			return 0;
		}
	});
	kha_Scheduler.frame_tasks_sorted = true;
};
var kha_ScreenRotation = $hxEnums["kha.ScreenRotation"] = { __ename__ : "kha.ScreenRotation", __constructs__ : ["RotationNone","Rotation90","Rotation180","Rotation270"]
	,RotationNone: {_hx_index:0,__enum__:"kha.ScreenRotation",toString:$estr}
	,Rotation90: {_hx_index:1,__enum__:"kha.ScreenRotation",toString:$estr}
	,Rotation180: {_hx_index:2,__enum__:"kha.ScreenRotation",toString:$estr}
	,Rotation270: {_hx_index:3,__enum__:"kha.ScreenRotation",toString:$estr}
};
var kha_Shaders = function() { };
$hxClasses["kha.Shaders"] = kha_Shaders;
kha_Shaders.__name__ = "kha.Shaders";
kha_Shaders.init = function() {
	var blobs = [];
	var data = Reflect.field(kha_Shaders,"batch_16_fragData" + 0);
	var bytes = haxe_Unserializer.run(data);
	blobs.push(kha_internal_BytesBlob.fromBytes(bytes));
	var data1 = Reflect.field(kha_Shaders,"batch_16_fragData" + 1);
	var bytes1 = haxe_Unserializer.run(data1);
	blobs.push(kha_internal_BytesBlob.fromBytes(bytes1));
	kha_Shaders.batch_16_frag = new kha_graphics4_FragmentShader(blobs,["batch_16.frag.essl","batch_16-webgl2.frag.essl"]);
	var blobs1 = [];
	var data2 = Reflect.field(kha_Shaders,"batch_1_fragData" + 0);
	var bytes2 = haxe_Unserializer.run(data2);
	blobs1.push(kha_internal_BytesBlob.fromBytes(bytes2));
	var data3 = Reflect.field(kha_Shaders,"batch_1_fragData" + 1);
	var bytes3 = haxe_Unserializer.run(data3);
	blobs1.push(kha_internal_BytesBlob.fromBytes(bytes3));
	kha_Shaders.batch_1_frag = new kha_graphics4_FragmentShader(blobs1,["batch_1.frag.essl","batch_1-webgl2.frag.essl"]);
	var blobs2 = [];
	var data4 = Reflect.field(kha_Shaders,"batch_2_fragData" + 0);
	var bytes4 = haxe_Unserializer.run(data4);
	blobs2.push(kha_internal_BytesBlob.fromBytes(bytes4));
	var data5 = Reflect.field(kha_Shaders,"batch_2_fragData" + 1);
	var bytes5 = haxe_Unserializer.run(data5);
	blobs2.push(kha_internal_BytesBlob.fromBytes(bytes5));
	kha_Shaders.batch_2_frag = new kha_graphics4_FragmentShader(blobs2,["batch_2.frag.essl","batch_2-webgl2.frag.essl"]);
	var blobs3 = [];
	var data6 = Reflect.field(kha_Shaders,"batch_32_fragData" + 0);
	var bytes6 = haxe_Unserializer.run(data6);
	blobs3.push(kha_internal_BytesBlob.fromBytes(bytes6));
	var data7 = Reflect.field(kha_Shaders,"batch_32_fragData" + 1);
	var bytes7 = haxe_Unserializer.run(data7);
	blobs3.push(kha_internal_BytesBlob.fromBytes(bytes7));
	kha_Shaders.batch_32_frag = new kha_graphics4_FragmentShader(blobs3,["batch_32.frag.essl","batch_32-webgl2.frag.essl"]);
	var blobs4 = [];
	var data8 = Reflect.field(kha_Shaders,"batch_4_fragData" + 0);
	var bytes8 = haxe_Unserializer.run(data8);
	blobs4.push(kha_internal_BytesBlob.fromBytes(bytes8));
	var data9 = Reflect.field(kha_Shaders,"batch_4_fragData" + 1);
	var bytes9 = haxe_Unserializer.run(data9);
	blobs4.push(kha_internal_BytesBlob.fromBytes(bytes9));
	kha_Shaders.batch_4_frag = new kha_graphics4_FragmentShader(blobs4,["batch_4.frag.essl","batch_4-webgl2.frag.essl"]);
	var blobs5 = [];
	var data10 = Reflect.field(kha_Shaders,"batch_8_fragData" + 0);
	var bytes10 = haxe_Unserializer.run(data10);
	blobs5.push(kha_internal_BytesBlob.fromBytes(bytes10));
	var data11 = Reflect.field(kha_Shaders,"batch_8_fragData" + 1);
	var bytes11 = haxe_Unserializer.run(data11);
	blobs5.push(kha_internal_BytesBlob.fromBytes(bytes11));
	kha_Shaders.batch_8_frag = new kha_graphics4_FragmentShader(blobs5,["batch_8.frag.essl","batch_8-webgl2.frag.essl"]);
	var blobs6 = [];
	var data12 = Reflect.field(kha_Shaders,"batch_vertData" + 0);
	var bytes12 = haxe_Unserializer.run(data12);
	blobs6.push(kha_internal_BytesBlob.fromBytes(bytes12));
	var data13 = Reflect.field(kha_Shaders,"batch_vertData" + 1);
	var bytes13 = haxe_Unserializer.run(data13);
	blobs6.push(kha_internal_BytesBlob.fromBytes(bytes13));
	kha_Shaders.batch_vert = new kha_graphics4_VertexShader(blobs6,["batch.vert.essl","batch-webgl2.vert.essl"]);
	var blobs7 = [];
	var data14 = Reflect.field(kha_Shaders,"mask_fragData" + 0);
	var bytes14 = haxe_Unserializer.run(data14);
	blobs7.push(kha_internal_BytesBlob.fromBytes(bytes14));
	var data15 = Reflect.field(kha_Shaders,"mask_fragData" + 1);
	var bytes15 = haxe_Unserializer.run(data15);
	blobs7.push(kha_internal_BytesBlob.fromBytes(bytes15));
	kha_Shaders.mask_frag = new kha_graphics4_FragmentShader(blobs7,["mask.frag.essl","mask-webgl2.frag.essl"]);
	var blobs8 = [];
	var data16 = Reflect.field(kha_Shaders,"mask_vertData" + 0);
	var bytes16 = haxe_Unserializer.run(data16);
	blobs8.push(kha_internal_BytesBlob.fromBytes(bytes16));
	var data17 = Reflect.field(kha_Shaders,"mask_vertData" + 1);
	var bytes17 = haxe_Unserializer.run(data17);
	blobs8.push(kha_internal_BytesBlob.fromBytes(bytes17));
	kha_Shaders.mask_vert = new kha_graphics4_VertexShader(blobs8,["mask.vert.essl","mask-webgl2.vert.essl"]);
	var blobs9 = [];
	var data18 = Reflect.field(kha_Shaders,"painter_colored_fragData" + 0);
	var bytes18 = haxe_Unserializer.run(data18);
	blobs9.push(kha_internal_BytesBlob.fromBytes(bytes18));
	var data19 = Reflect.field(kha_Shaders,"painter_colored_fragData" + 1);
	var bytes19 = haxe_Unserializer.run(data19);
	blobs9.push(kha_internal_BytesBlob.fromBytes(bytes19));
	kha_Shaders.painter_colored_frag = new kha_graphics4_FragmentShader(blobs9,["painter-colored.frag.essl","painter-colored-webgl2.frag.essl"]);
	var blobs10 = [];
	var data20 = Reflect.field(kha_Shaders,"painter_colored_vertData" + 0);
	var bytes20 = haxe_Unserializer.run(data20);
	blobs10.push(kha_internal_BytesBlob.fromBytes(bytes20));
	var data21 = Reflect.field(kha_Shaders,"painter_colored_vertData" + 1);
	var bytes21 = haxe_Unserializer.run(data21);
	blobs10.push(kha_internal_BytesBlob.fromBytes(bytes21));
	kha_Shaders.painter_colored_vert = new kha_graphics4_VertexShader(blobs10,["painter-colored.vert.essl","painter-colored-webgl2.vert.essl"]);
	var blobs11 = [];
	var data22 = Reflect.field(kha_Shaders,"painter_image_fragData" + 0);
	var bytes22 = haxe_Unserializer.run(data22);
	blobs11.push(kha_internal_BytesBlob.fromBytes(bytes22));
	var data23 = Reflect.field(kha_Shaders,"painter_image_fragData" + 1);
	var bytes23 = haxe_Unserializer.run(data23);
	blobs11.push(kha_internal_BytesBlob.fromBytes(bytes23));
	kha_Shaders.painter_image_frag = new kha_graphics4_FragmentShader(blobs11,["painter-image.frag.essl","painter-image-webgl2.frag.essl"]);
	var blobs12 = [];
	var data24 = Reflect.field(kha_Shaders,"painter_image_vertData" + 0);
	var bytes24 = haxe_Unserializer.run(data24);
	blobs12.push(kha_internal_BytesBlob.fromBytes(bytes24));
	var data25 = Reflect.field(kha_Shaders,"painter_image_vertData" + 1);
	var bytes25 = haxe_Unserializer.run(data25);
	blobs12.push(kha_internal_BytesBlob.fromBytes(bytes25));
	kha_Shaders.painter_image_vert = new kha_graphics4_VertexShader(blobs12,["painter-image.vert.essl","painter-image-webgl2.vert.essl"]);
	var blobs13 = [];
	var data26 = Reflect.field(kha_Shaders,"painter_text_fragData" + 0);
	var bytes26 = haxe_Unserializer.run(data26);
	blobs13.push(kha_internal_BytesBlob.fromBytes(bytes26));
	var data27 = Reflect.field(kha_Shaders,"painter_text_fragData" + 1);
	var bytes27 = haxe_Unserializer.run(data27);
	blobs13.push(kha_internal_BytesBlob.fromBytes(bytes27));
	kha_Shaders.painter_text_frag = new kha_graphics4_FragmentShader(blobs13,["painter-text.frag.essl","painter-text-webgl2.frag.essl"]);
	var blobs14 = [];
	var data28 = Reflect.field(kha_Shaders,"painter_text_vertData" + 0);
	var bytes28 = haxe_Unserializer.run(data28);
	blobs14.push(kha_internal_BytesBlob.fromBytes(bytes28));
	var data29 = Reflect.field(kha_Shaders,"painter_text_vertData" + 1);
	var bytes29 = haxe_Unserializer.run(data29);
	blobs14.push(kha_internal_BytesBlob.fromBytes(bytes29));
	kha_Shaders.painter_text_vert = new kha_graphics4_VertexShader(blobs14,["painter-text.vert.essl","painter-text-webgl2.vert.essl"]);
	var blobs15 = [];
	var data30 = Reflect.field(kha_Shaders,"painter_video_fragData" + 0);
	var bytes30 = haxe_Unserializer.run(data30);
	blobs15.push(kha_internal_BytesBlob.fromBytes(bytes30));
	var data31 = Reflect.field(kha_Shaders,"painter_video_fragData" + 1);
	var bytes31 = haxe_Unserializer.run(data31);
	blobs15.push(kha_internal_BytesBlob.fromBytes(bytes31));
	kha_Shaders.painter_video_frag = new kha_graphics4_FragmentShader(blobs15,["painter-video.frag.essl","painter-video-webgl2.frag.essl"]);
	var blobs16 = [];
	var data32 = Reflect.field(kha_Shaders,"painter_video_vertData" + 0);
	var bytes32 = haxe_Unserializer.run(data32);
	blobs16.push(kha_internal_BytesBlob.fromBytes(bytes32));
	var data33 = Reflect.field(kha_Shaders,"painter_video_vertData" + 1);
	var bytes33 = haxe_Unserializer.run(data33);
	blobs16.push(kha_internal_BytesBlob.fromBytes(bytes33));
	kha_Shaders.painter_video_vert = new kha_graphics4_VertexShader(blobs16,["painter-video.vert.essl","painter-video-webgl2.vert.essl"]);
};
var kha_Sound = function() {
	this.sampleRate = 0;
	this.channels = 0;
	this.length = 0;
};
$hxClasses["kha.Sound"] = kha_Sound;
kha_Sound.__name__ = "kha.Sound";
kha_Sound.__interfaces__ = [kha_Resource];
kha_Sound.prototype = {
	compressedData: null
	,uncompressedData: null
	,length: null
	,channels: null
	,sampleRate: null
	,uncompress: function(done) {
		if(this.uncompressedData != null) {
			done();
			return;
		}
		var output = new haxe_io_BytesOutput();
		var header = kha_audio2_ogg_vorbis_Reader.readAll(this.compressedData,output,true);
		var soundBytes = output.getBytes();
		var count = soundBytes.length / 4 | 0;
		if(header.channel == 1) {
			this.length = count / kha_audio2_Audio.samplesPerSecond;
			var this1 = new Float32Array(count * 2);
			this.uncompressedData = this1;
			var _g = 0;
			var _g1 = count;
			while(_g < _g1) {
				var i = _g++;
				this.uncompressedData[i * 2] = soundBytes.getFloat(i * 4);
				this.uncompressedData[i * 2 + 1] = soundBytes.getFloat(i * 4);
			}
		} else {
			this.length = count / 2 / kha_audio2_Audio.samplesPerSecond;
			var this2 = new Float32Array(count);
			this.uncompressedData = this2;
			var _g2 = 0;
			var _g11 = count;
			while(_g2 < _g11) {
				var i1 = _g2++;
				this.uncompressedData[i1] = soundBytes.getFloat(i1 * 4);
			}
		}
		this.channels = header.channel;
		this.sampleRate = header.sampleRate;
		this.compressedData = null;
		done();
	}
	,unload: function() {
		this.compressedData = null;
		this.uncompressedData = null;
	}
	,__class__: kha_Sound
};
var kha_SystemOptions = function(title,width,height,$window,framebuffer) {
	if(height == null) {
		height = -1;
	}
	if(width == null) {
		width = -1;
	}
	if(title == null) {
		title = "Kha";
	}
	this.framebuffer = null;
	this.window = null;
	this.height = -1;
	this.width = -1;
	this.title = "Kha";
	this.title = title;
	this.window = $window == null ? new kha_WindowOptions(null,null,null,null,null,null,null,null,null) : $window;
	if(width > 0) {
		this.window.width = width;
		this.width = width;
	} else {
		this.width = this.window.width;
	}
	if(height > 0) {
		this.window.height = height;
		this.height = height;
	} else {
		this.height = this.window.height;
	}
	if(this.window.title == null) {
		this.window.title = title;
	}
	this.framebuffer = framebuffer == null ? new kha_FramebufferOptions(null,null,null,null,null,null) : framebuffer;
};
$hxClasses["kha.SystemOptions"] = kha_SystemOptions;
kha_SystemOptions.__name__ = "kha.SystemOptions";
kha_SystemOptions.prototype = {
	title: null
	,width: null
	,height: null
	,window: null
	,framebuffer: null
	,__class__: kha_SystemOptions
};
var kha_System = function() { };
$hxClasses["kha.System"] = kha_System;
kha_System.__name__ = "kha.System";
kha_System.__properties__ = {get_refreshRate:"get_refreshRate",get_vsync:"get_vsync",get_language:"get_language",get_systemId:"get_systemId",get_screenRotation:"get_screenRotation",get_time:"get_time",get_title:"get_title"};
kha_System.init = function(options,callback) {
	var features = 0;
	if(options.resizable) {
		features = features | 1;
	}
	if(options.maximizable) {
		features = features | 4;
	}
	if(options.minimizable) {
		features = features | 2;
	}
	var newOptions = new kha_SystemOptions(options.title,options.width,options.height,new kha_WindowOptions(null,null,null,null,null,null,null,features,options.windowMode),new kha_FramebufferOptions(null,options.vSync,null,null,null,options.samplesPerPixel));
	kha_System.start(newOptions,function(_) {
		callback();
	});
};
kha_System.start = function(options,callback) {
	kha_System.theTitle = options.title;
	kha_SystemImpl.init(options,callback);
};
kha_System.get_title = function() {
	return kha_System.theTitle;
};
kha_System.notifyOnRender = function(listener,id) {
	if(id == null) {
		id = 0;
	}
	kha_System.renderListeners.push(function(framebuffers) {
		if(id < framebuffers.length) {
			listener(framebuffers[id]);
		}
	});
};
kha_System.notifyOnFrames = function(listener) {
	kha_System.renderListeners.push(listener);
};
kha_System.removeFramesListener = function(listener) {
	HxOverrides.remove(kha_System.renderListeners,listener);
};
kha_System.notifyOnApplicationState = function(foregroundListener,resumeListener,pauseListener,backgroundListener,shutdownListener) {
	if(foregroundListener != null) {
		kha_System.foregroundListeners.push(foregroundListener);
	}
	if(resumeListener != null) {
		kha_System.resumeListeners.push(resumeListener);
	}
	if(pauseListener != null) {
		kha_System.pauseListeners.push(pauseListener);
	}
	if(backgroundListener != null) {
		kha_System.backgroundListeners.push(backgroundListener);
	}
	if(shutdownListener != null) {
		kha_System.shutdownListeners.push(shutdownListener);
	}
};
kha_System.notifyOnDropFiles = function(dropFilesListener) {
	kha_System.dropFilesListeners.push(dropFilesListener);
};
kha_System.removeDropListerer = function(listener) {
	HxOverrides.remove(kha_System.dropFilesListeners,listener);
};
kha_System.notifyOnCutCopyPaste = function(cutListener,copyListener,pasteListener) {
	kha_System.cutListener = cutListener;
	kha_System.copyListener = copyListener;
	kha_System.pasteListener = pasteListener;
};
kha_System.notifyOnLoginLogout = function(loginListener,logoutListener) {
	kha_System.loginListener = loginListener;
	kha_System.logoutListener = logoutListener;
};
kha_System.login = function() {
	kha_SystemImpl.login();
};
kha_System.render = function(framebuffers) {
	var _g = 0;
	var _g1 = kha_System.renderListeners;
	while(_g < _g1.length) {
		var listener = _g1[_g];
		++_g;
		listener(framebuffers);
	}
};
kha_System.foreground = function() {
	var _g = 0;
	var _g1 = kha_System.foregroundListeners;
	while(_g < _g1.length) {
		var listener = _g1[_g];
		++_g;
		listener();
	}
};
kha_System.resume = function() {
	var _g = 0;
	var _g1 = kha_System.resumeListeners;
	while(_g < _g1.length) {
		var listener = _g1[_g];
		++_g;
		listener();
	}
};
kha_System.pause = function() {
	var _g = 0;
	var _g1 = kha_System.pauseListeners;
	while(_g < _g1.length) {
		var listener = _g1[_g];
		++_g;
		listener();
	}
};
kha_System.background = function() {
	var _g = 0;
	var _g1 = kha_System.backgroundListeners;
	while(_g < _g1.length) {
		var listener = _g1[_g];
		++_g;
		listener();
	}
};
kha_System.shutdown = function() {
	var _g = 0;
	var _g1 = kha_System.shutdownListeners;
	while(_g < _g1.length) {
		var listener = _g1[_g];
		++_g;
		listener();
	}
};
kha_System.dropFiles = function(filePath) {
	var _g = 0;
	var _g1 = kha_System.dropFilesListeners;
	while(_g < _g1.length) {
		var listener = _g1[_g];
		++_g;
		listener(filePath);
	}
};
kha_System.get_time = function() {
	return kha_SystemImpl.getTime();
};
kha_System.windowWidth = function($window) {
	if($window == null) {
		$window = 0;
	}
	return kha_Window.get($window).get_width();
};
kha_System.windowHeight = function($window) {
	if($window == null) {
		$window = 0;
	}
	return kha_Window.get_all()[$window].get_height();
};
kha_System.get_screenRotation = function() {
	return kha_ScreenRotation.RotationNone;
};
kha_System.get_systemId = function() {
	return kha_SystemImpl.getSystemId();
};
kha_System.vibrate = function(ms) {
	kha_SystemImpl.vibrate(ms);
	return;
};
kha_System.get_language = function() {
	return kha_SystemImpl.getLanguage();
};
kha_System.stop = function() {
	return kha_SystemImpl.requestShutdown();
};
kha_System.loadUrl = function(url) {
	kha_SystemImpl.loadUrl(url);
};
kha_System.canSwitchFullscreen = function() {
	return true;
};
kha_System.isFullscreen = function() {
	if(kha_Window.get(0).get_mode() != 1) {
		return kha_Window.get(0).get_mode() == 2;
	} else {
		return true;
	}
};
kha_System.requestFullscreen = function() {
	kha_Window.get(0).set_mode(1);
};
kha_System.exitFullscreen = function() {
	kha_Window.get(0).set_mode(0);
};
kha_System.notifyOnFullscreenChange = function(func,error) {
};
kha_System.removeFullscreenListener = function(func,error) {
};
kha_System.changeResolution = function(width,height) {
};
kha_System.requestShutdown = function() {
	kha_System.stop();
};
kha_System.get_vsync = function() {
	return kha_Window.get(0).get_vSynced();
};
kha_System.get_refreshRate = function() {
	return kha_Display.get_primary().get_frequency();
};
kha_System.screenDpi = function() {
	return kha_Display.get_primary().get_pixelsPerInch();
};
kha_System.safeZone = function() {
	return kha_SystemImpl.safeZone();
};
kha_System.automaticSafeZone = function() {
	return kha_SystemImpl.automaticSafeZone();
};
kha_System.setSafeZone = function(value) {
	kha_SystemImpl.setSafeZone(value);
};
kha_System.unlockAchievement = function(id) {
	kha_SystemImpl.unlockAchievement(id);
};
var kha_GamepadStates = function() {
	this.axes = [];
	this.buttons = [];
};
$hxClasses["kha.GamepadStates"] = kha_GamepadStates;
kha_GamepadStates.__name__ = "kha.GamepadStates";
kha_GamepadStates.prototype = {
	axes: null
	,buttons: null
	,__class__: kha_GamepadStates
};
var kha_SystemImpl = function() { };
$hxClasses["kha.SystemImpl"] = kha_SystemImpl;
kha_SystemImpl.__name__ = "kha.SystemImpl";
kha_SystemImpl.errorHandler = function(message,source,lineno,colno,error) {
	window.console.error(error.stack);
	return true;
};
kha_SystemImpl.init = function(options,callback) {
	kha_SystemImpl.options = options;
	window.onerror = kha_SystemImpl.errorHandler;
	var electron = require('electron');
	if(electron.webFrame.setZoomLevelLimits != null) {
		electron.webFrame.setZoomLevelLimits(1,1);
	}
	var wndOpts = { type : "showWindow", title : options.title, x : options.window.x, y : options.window.y, width : options.width, height : options.height};
	electron.ipcRenderer.send("asynchronous-message",wndOpts);
	window.setTimeout(function() {
		kha_SystemImpl.initSecondStep(callback);
	},1000);
};
kha_SystemImpl.initSecondStep = function(callback) {
	kha_SystemImpl.init2(kha_SystemImpl.options.window.width,kha_SystemImpl.options.window.height);
	callback(kha_SystemImpl.window);
};
kha_SystemImpl.initSensor = function() {
	if(kha_SystemImpl.ios) {
		window.ondevicemotion = function(event) {
			kha_input_Sensor._changed(0,-event.accelerationIncludingGravity.x,-event.accelerationIncludingGravity.y,-event.accelerationIncludingGravity.z);
		};
	} else {
		window.ondevicemotion = function(event1) {
			kha_input_Sensor._changed(0,event1.accelerationIncludingGravity.x,event1.accelerationIncludingGravity.y,event1.accelerationIncludingGravity.z);
		};
	}
	window.ondeviceorientation = function(event2) {
		kha_input_Sensor._changed(1,event2.beta,event2.gamma,event2.alpha);
	};
};
kha_SystemImpl.isMobile = function() {
	var agent = window.navigator.userAgent;
	if(agent.indexOf("Android") >= 0 || agent.indexOf("webOS") >= 0 || agent.indexOf("BlackBerry") >= 0 || agent.indexOf("Windows Phone") >= 0) {
		return true;
	}
	if(kha_SystemImpl.isIOS()) {
		return true;
	}
	return false;
};
kha_SystemImpl.isIOS = function() {
	var agent = window.navigator.userAgent;
	if(agent.indexOf("iPhone") >= 0 || agent.indexOf("iPad") >= 0 || agent.indexOf("iPod") >= 0) {
		return true;
	}
	return false;
};
kha_SystemImpl.isChrome = function() {
	var agent = window.navigator.userAgent;
	if(agent.indexOf("Chrome") >= 0) {
		return true;
	}
	return false;
};
kha_SystemImpl.isFirefox = function() {
	var agent = window.navigator.userAgent;
	if(agent.indexOf("Firefox") >= 0) {
		return true;
	}
	return false;
};
kha_SystemImpl.isIE = function() {
	var agent = window.navigator.userAgent;
	if(agent.indexOf("MSIE ") >= 0 || agent.indexOf("Trident/") >= 0) {
		return true;
	}
	return false;
};
kha_SystemImpl.setCanvas = function(canvas) {
	kha_SystemImpl.khanvas = canvas;
};
kha_SystemImpl.getScreenRotation = function() {
	return kha_ScreenRotation.RotationNone;
};
kha_SystemImpl.getTime = function() {
	var performance = window.performance ? window.performance : window.Date;
	return performance.now() / 1000;
};
kha_SystemImpl.getSystemId = function() {
	return "HTML5";
};
kha_SystemImpl.vibrate = function(ms) {
	window.navigator.vibrate(ms);
};
kha_SystemImpl.getLanguage = function() {
	return window.navigator.language;
};
kha_SystemImpl.requestShutdown = function() {
	window.close();
	return true;
};
kha_SystemImpl.init2 = function(defaultWidth,defaultHeight,backbufferFormat) {
	kha_SystemImpl.keyboard = new kha_input_Keyboard();
	kha_SystemImpl.mouse = new kha_input_MouseImpl();
	kha_SystemImpl.surface = new kha_input_Surface();
	kha_SystemImpl.gamepads = [];
	kha_SystemImpl.gamepadStates = [];
	kha_SystemImpl.gamepads[0] = new kha_input_Gamepad(0);
	kha_SystemImpl.gamepadStates[0] = new kha_GamepadStates();
	kha_SystemImpl.gamepads[1] = new kha_input_Gamepad(1);
	kha_SystemImpl.gamepadStates[1] = new kha_GamepadStates();
	kha_SystemImpl.gamepads[2] = new kha_input_Gamepad(2);
	kha_SystemImpl.gamepadStates[2] = new kha_GamepadStates();
	kha_SystemImpl.gamepads[3] = new kha_input_Gamepad(3);
	kha_SystemImpl.gamepadStates[3] = new kha_GamepadStates();
	window.addEventListener("gamepadconnected",function(e) {
		kha_input_Gamepad.sendConnectEvent(e.gamepad.index);
	});
	window.addEventListener("gamepaddisconnected",function(e1) {
		kha_input_Gamepad.sendDisconnectEvent(e1.gamepad.index);
	});
	if(kha_SystemImpl.ie) {
		kha_SystemImpl.pressedKeys = [];
		var _g = 0;
		while(_g < 256) {
			var i = _g++;
			kha_SystemImpl.pressedKeys.push(false);
		}
		var _g1 = 0;
		while(_g1 < 256) {
			var i1 = _g1++;
			kha_SystemImpl.pressedKeys.push(null);
		}
	}
	var onCopy = function(e2) {
		if(kha_System.copyListener != null) {
			var data = kha_System.copyListener();
			if(data != null) {
				e2.clipboardData.setData("text/plain",data);
			}
			e2.preventDefault();
		}
	};
	var onCut = function(e3) {
		if(kha_System.cutListener != null) {
			var data1 = kha_System.cutListener();
			if(data1 != null) {
				e3.clipboardData.setData("text/plain",data1);
			}
			e3.preventDefault();
		}
	};
	var onPaste = function(e4) {
		if(kha_System.pasteListener != null) {
			var onPaste1 = e4.clipboardData.getData("text/plain");
			kha_System.pasteListener(onPaste1);
			e4.preventDefault();
		}
	};
	var document = window.document;
	document.addEventListener("copy",onCopy);
	document.addEventListener("cut",onCut);
	document.addEventListener("paste",onPaste);
	kha_CanvasImage.init();
	kha_Scheduler.init();
	kha_SystemImpl.loadFinished(defaultWidth,defaultHeight);
};
kha_SystemImpl.getMouse = function(num) {
	if(num != 0) {
		return null;
	}
	return kha_SystemImpl.mouse;
};
kha_SystemImpl.getKeyboard = function(num) {
	if(num != 0) {
		return null;
	}
	return kha_SystemImpl.keyboard;
};
kha_SystemImpl.checkGamepad = function(pad) {
	var _g = 0;
	var _g1 = pad.axes.length;
	while(_g < _g1) {
		var i = _g++;
		if(pad.axes[i] != null) {
			var axis = pad.axes[i];
			if(i % 2 == 1) {
				axis = -axis;
			}
			if(kha_SystemImpl.gamepadStates[pad.index].axes[i] != axis) {
				kha_SystemImpl.gamepadStates[pad.index].axes[i] = axis;
				kha_SystemImpl.gamepads[pad.index].sendAxisEvent(i,axis);
			}
		}
	}
	var _g2 = 0;
	var _g3 = pad.buttons.length;
	while(_g2 < _g3) {
		var i1 = _g2++;
		if(pad.buttons[i1] != null) {
			if(kha_SystemImpl.gamepadStates[pad.index].buttons[i1] != pad.buttons[i1].value) {
				kha_SystemImpl.gamepadStates[pad.index].buttons[i1] = pad.buttons[i1].value;
				kha_SystemImpl.gamepads[pad.index].sendButtonEvent(i1,pad.buttons[i1].value);
			}
		}
	}
	if(pad.axes.length <= 4 && pad.buttons.length > 7) {
		kha_SystemImpl.gamepadStates[pad.index].axes[4] = pad.buttons[6].value;
		kha_SystemImpl.gamepads[pad.index].sendAxisEvent(4,pad.buttons[6].value);
		kha_SystemImpl.gamepadStates[pad.index].axes[5] = pad.buttons[7].value;
		kha_SystemImpl.gamepads[pad.index].sendAxisEvent(5,pad.buttons[7].value);
	}
};
kha_SystemImpl.getCanvasElement = function() {
	if(kha_SystemImpl.khanvas != null) {
		return kha_SystemImpl.khanvas;
	}
	return window.document.getElementById("khanvas");
};
kha_SystemImpl.loadFinished = function(defaultWidth,defaultHeight) {
	var canvas = kha_SystemImpl.getCanvasElement();
	canvas.style.cursor = "default";
	var gl = false;
	try {
		kha_SystemImpl.gl = canvas.getContext("webgl2",{ alpha : false, antialias : kha_SystemImpl.options.framebuffer.samplesPerPixel > 1, stencil : true});
		kha_SystemImpl.gl.pixelStorei(37441,1);
		kha_SystemImpl.halfFloat = { HALF_FLOAT_OES : 5131};
		kha_SystemImpl.depthTexture = { UNSIGNED_INT_24_8_WEBGL : 34042};
		kha_SystemImpl.drawBuffers = { COLOR_ATTACHMENT0_WEBGL : 36064};
		kha_SystemImpl.elementIndexUint = true;
		kha_SystemImpl.gl.getExtension("EXT_color_buffer_float");
		kha_SystemImpl.gl.getExtension("OES_texture_float_linear");
		kha_SystemImpl.gl.getExtension("OES_texture_half_float_linear");
		kha_SystemImpl.anisotropicFilter = kha_SystemImpl.gl.getExtension("EXT_texture_filter_anisotropic");
		if(kha_SystemImpl.anisotropicFilter == null) {
			kha_SystemImpl.anisotropicFilter = kha_SystemImpl.gl.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
		}
		gl = true;
		kha_SystemImpl.gl2 = true;
		kha_Shaders.init();
	} catch( e ) {
		haxe_CallStack.lastException = e;
		var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
		haxe_Log.trace("Could not initialize WebGL 2, falling back to WebGL.",{ fileName : "kha/SystemImpl.hx", lineNumber : 346, className : "kha.SystemImpl", methodName : "loadFinished"});
	}
	if(!kha_SystemImpl.gl2) {
		try {
			kha_SystemImpl.gl = canvas.getContext("experimental-webgl",{ alpha : false, antialias : kha_SystemImpl.options.framebuffer.samplesPerPixel > 1, stencil : true});
			kha_SystemImpl.gl.pixelStorei(37441,1);
			kha_SystemImpl.gl.getExtension("OES_texture_float");
			kha_SystemImpl.gl.getExtension("OES_texture_float_linear");
			kha_SystemImpl.halfFloat = kha_SystemImpl.gl.getExtension("OES_texture_half_float");
			kha_SystemImpl.gl.getExtension("OES_texture_half_float_linear");
			kha_SystemImpl.depthTexture = kha_SystemImpl.gl.getExtension("WEBGL_depth_texture");
			kha_SystemImpl.gl.getExtension("EXT_shader_texture_lod");
			kha_SystemImpl.gl.getExtension("OES_standard_derivatives");
			kha_SystemImpl.anisotropicFilter = kha_SystemImpl.gl.getExtension("EXT_texture_filter_anisotropic");
			if(kha_SystemImpl.anisotropicFilter == null) {
				kha_SystemImpl.anisotropicFilter = kha_SystemImpl.gl.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
			}
			kha_SystemImpl.drawBuffers = kha_SystemImpl.gl.getExtension("WEBGL_draw_buffers");
			kha_SystemImpl.elementIndexUint = kha_SystemImpl.gl.getExtension("OES_element_index_uint");
			gl = true;
			kha_Shaders.init();
		} catch( e2 ) {
			haxe_CallStack.lastException = e2;
			var e3 = ((e2) instanceof js__$Boot_HaxeError) ? e2.val : e2;
			haxe_Log.trace("Could not initialize WebGL, falling back to <canvas>.",{ fileName : "kha/SystemImpl.hx", lineNumber : 368, className : "kha.SystemImpl", methodName : "loadFinished"});
		}
	}
	kha_SystemImpl.setCanvas(canvas);
	kha_SystemImpl.window = new kha_Window(defaultWidth,defaultHeight,canvas);
	if(gl) {
		var g4 = new kha_js_graphics4_Graphics();
		kha_SystemImpl.frame = new kha_Framebuffer(0,null,null,g4);
		kha_SystemImpl.frame.init(new kha_graphics2_Graphics1(kha_SystemImpl.frame),new kha_js_graphics4_Graphics2(kha_SystemImpl.frame),g4);
	} else {
		kha_js_Font.Kravur = kha_Kravur; kha_Kravur = kha_js_Font;
		var g2 = new kha_js_CanvasGraphics(canvas.getContext("2d"));
		kha_SystemImpl.frame = new kha_Framebuffer(0,null,g2,null);
		kha_SystemImpl.frame.init(new kha_graphics2_Graphics1(kha_SystemImpl.frame),g2,null);
	}
	if(!kha_SystemImpl.mobile && kha_audio2_Audio._init()) {
		kha_SystemImpl._hasWebAudio = true;
		kha_audio2_Audio1._init();
	} else if(kha_SystemImpl.mobile) {
		kha_SystemImpl._hasWebAudio = false;
		kha_js_MobileWebAudio._init();
		kha_audio2_Audio1 = kha_js_MobileWebAudio;
	} else {
		kha_SystemImpl._hasWebAudio = false;
		kha_audio2_Audio1 = kha_js_AudioElementAudio;
	}
	kha_vr_VrInterface.instance = new kha_js_vr_VrInterface();
	kha_Scheduler.start();
	var $window = window;
	var requestAnimationFrame = $window.requestAnimationFrame;
	if(requestAnimationFrame == null) {
		requestAnimationFrame = $window.mozRequestAnimationFrame;
	}
	if(requestAnimationFrame == null) {
		requestAnimationFrame = $window.webkitRequestAnimationFrame;
	}
	if(requestAnimationFrame == null) {
		requestAnimationFrame = $window.msRequestAnimationFrame;
	}
	var animate = null;
	animate = function(timestamp) {
		var window1 = window;
		if(requestAnimationFrame == null) {
			window1.setTimeout(animate,16.666666666666668);
		} else {
			requestAnimationFrame(animate);
		}
		var sysGamepads = kha_SystemImpl.getGamepads();
		if(sysGamepads != null) {
			var _g = 0;
			var _g1 = sysGamepads.length;
			while(_g < _g1) {
				var i = _g++;
				var pad = sysGamepads[i];
				if(pad != null) {
					kha_SystemImpl.checkGamepad(pad);
				}
			}
		}
		kha_Scheduler.executeFrame();
		if(canvas.getContext != null) {
			var displayWidth = canvas.clientWidth;
			var displayHeight = canvas.clientHeight;
			if(canvas.width != displayWidth || canvas.height != displayHeight) {
				canvas.width = displayWidth;
				canvas.height = displayHeight;
			}
			kha_System.render([kha_SystemImpl.frame]);
			if(kha_SystemImpl.gl != null) {
				kha_SystemImpl.gl.clearColor(1,1,1,1);
				kha_SystemImpl.gl.colorMask(false,false,false,true);
				kha_SystemImpl.gl.clear(16384);
				kha_SystemImpl.gl.colorMask(true,true,true,true);
			}
		}
	};
	if(requestAnimationFrame == null) {
		$window.setTimeout(animate,16.666666666666668);
	} else {
		requestAnimationFrame(animate);
	}
	canvas.focus();
	canvas.oncontextmenu = function(event) {
		event.stopPropagation();
		event.preventDefault();
	};
	canvas.onmousedown = kha_SystemImpl.mouseDown;
	canvas.onmousemove = kha_SystemImpl.mouseMove;
	if(kha_SystemImpl.keyboard != null) {
		canvas.onkeydown = kha_SystemImpl.keyDown;
		canvas.onkeyup = kha_SystemImpl.keyUp;
		canvas.onkeypress = kha_SystemImpl.keyPress;
	}
	canvas.onblur = kha_SystemImpl.onBlur;
	canvas.onfocus = kha_SystemImpl.onFocus;
	canvas.onmousewheel = canvas.onwheel = kha_SystemImpl.mouseWheel;
	canvas.onmouseleave = kha_SystemImpl.mouseLeave;
	canvas.addEventListener("wheel mousewheel",kha_SystemImpl.mouseWheel,false);
	canvas.addEventListener("touchstart",kha_SystemImpl.touchDown,false);
	canvas.addEventListener("touchend",kha_SystemImpl.touchUp,false);
	canvas.addEventListener("touchmove",kha_SystemImpl.touchMove,false);
	canvas.addEventListener("touchcancel",kha_SystemImpl.touchCancel,false);
	window.document.addEventListener("dragover",function(event1) {
		event1.preventDefault();
	});
	window.document.addEventListener("drop",function(event2) {
		event2.preventDefault();
		if(event2.dataTransfer != null && event2.dataTransfer.files != null) {
			var _g2 = 0;
			var _g11 = event2.dataTransfer.files;
			while(_g2 < _g11.length) {
				var file = _g11[_g2];
				++_g2;
				kha_System.dropFiles(file.path);
			}
		}
	});
	window.addEventListener("unload",function() {
		kha_System.shutdown();
	});
};
kha_SystemImpl.lockMouse = function() {
	if(($_=kha_SystemImpl.khanvas,$bind($_,$_.requestPointerLock))) {
		kha_SystemImpl.khanvas.requestPointerLock();
	} else if(kha_SystemImpl.khanvas.mozRequestPointerLock) {
		kha_SystemImpl.khanvas.mozRequestPointerLock();
	} else if(kha_SystemImpl.khanvas.webkitRequestPointerLock) {
		kha_SystemImpl.khanvas.webkitRequestPointerLock();
	}
};
kha_SystemImpl.unlockMouse = function() {
	if(document.exitPointerLock) {
		document.exitPointerLock();
	} else if(document.mozExitPointerLock) {
		document.mozExitPointerLock();
	} else if(document.webkitExitPointerLock) {
		document.webkitExitPointerLock();
	}
};
kha_SystemImpl.canLockMouse = function() {
	return 'pointerLockElement' in document ||
		'mozPointerLockElement' in document ||
		'webkitPointerLockElement' in document;
};
kha_SystemImpl.isMouseLocked = function() {
	return document.pointerLockElement === kha_SystemImpl.khanvas ||
			document.mozPointerLockElement === kha_SystemImpl.khanvas ||
			document.webkitPointerLockElement === kha_SystemImpl.khanvas;
};
kha_SystemImpl.notifyOfMouseLockChange = function(func,error) {
	window.document.addEventListener("pointerlockchange",func,false);
	window.document.addEventListener("mozpointerlockchange",func,false);
	window.document.addEventListener("webkitpointerlockchange",func,false);
	window.document.addEventListener("pointerlockerror",error,false);
	window.document.addEventListener("mozpointerlockerror",error,false);
	window.document.addEventListener("webkitpointerlockerror",error,false);
};
kha_SystemImpl.removeFromMouseLockChange = function(func,error) {
	window.document.removeEventListener("pointerlockchange",func,false);
	window.document.removeEventListener("mozpointerlockchange",func,false);
	window.document.removeEventListener("webkitpointerlockchange",func,false);
	window.document.removeEventListener("pointerlockerror",error,false);
	window.document.removeEventListener("mozpointerlockerror",error,false);
	window.document.removeEventListener("webkitpointerlockerror",error,false);
};
kha_SystemImpl.setMouseXY = function(event) {
	var rect = kha_SystemImpl.khanvas.getBoundingClientRect();
	var borderWidth = kha_SystemImpl.khanvas.clientLeft;
	var borderHeight = kha_SystemImpl.khanvas.clientTop;
	kha_SystemImpl.mouseX = (event.clientX - rect.left - borderWidth) * kha_SystemImpl.khanvas.width / (rect.width - 2 * borderWidth) | 0;
	kha_SystemImpl.mouseY = (event.clientY - rect.top - borderHeight) * kha_SystemImpl.khanvas.height / (rect.height - 2 * borderHeight) | 0;
};
kha_SystemImpl.unlockiOSSound = function() {
	if(!kha_SystemImpl.ios || kha_SystemImpl.iosSoundEnabled) {
		return;
	}
	var buffer = kha_js_MobileWebAudio._context.createBuffer(1,1,22050);
	var source = kha_js_MobileWebAudio._context.createBufferSource();
	source.buffer = buffer;
	source.connect(kha_js_MobileWebAudio._context.destination);
	source.start();
	source.stop();
	kha_SystemImpl.iosSoundEnabled = true;
};
kha_SystemImpl.unlockSound = function() {
	if(!kha_SystemImpl.soundEnabled) {
		var context = kha_audio2_Audio._context;
		if(context == null) {
			context = kha_audio2_Audio1._context;
		}
		if(context != null) {
			context.resume().then(function(c) {
				kha_SystemImpl.soundEnabled = true;
			}).catch(function(err) {
				haxe_Log.trace(err,{ fileName : "kha/SystemImpl.hx", lineNumber : 608, className : "kha.SystemImpl", methodName : "unlockSound"});
			});
		}
		kha_audio2_Audio.wakeChannels();
	}
	kha_SystemImpl.unlockiOSSound();
};
kha_SystemImpl.mouseLeave = function() {
	kha_SystemImpl.mouse.sendLeaveEvent(0);
};
kha_SystemImpl.mouseWheel = function(event) {
	kha_SystemImpl.unlockSound();
	kha_SystemImpl.insideInputEvent = true;
	event.preventDefault();
	if(event.deltaMode == 0) {
		if(event.deltaY < 0) {
			kha_SystemImpl.mouse.sendWheelEvent(0,-1);
		} else if(event.deltaY > 0) {
			kha_SystemImpl.mouse.sendWheelEvent(0,1);
		}
		kha_SystemImpl.insideInputEvent = false;
		return false;
	}
	if(event.deltaMode == 1) {
		kha_SystemImpl.minimumScroll = Math.min(kha_SystemImpl.minimumScroll,Math.abs(event.deltaY)) | 0;
		kha_SystemImpl.mouse.sendWheelEvent(0,event.deltaY / kha_SystemImpl.minimumScroll | 0);
		kha_SystemImpl.insideInputEvent = false;
		return false;
	}
	kha_SystemImpl.insideInputEvent = false;
	return false;
};
kha_SystemImpl.mouseDown = function(event) {
	kha_SystemImpl.insideInputEvent = true;
	kha_SystemImpl.unlockSound();
	kha_SystemImpl.setMouseXY(event);
	if(event.which == 1) {
		if(event.ctrlKey) {
			kha_SystemImpl.leftMouseCtrlDown = true;
			kha_SystemImpl.mouse.sendDownEvent(0,1,kha_SystemImpl.mouseX,kha_SystemImpl.mouseY);
		} else {
			kha_SystemImpl.leftMouseCtrlDown = false;
			kha_SystemImpl.mouse.sendDownEvent(0,0,kha_SystemImpl.mouseX,kha_SystemImpl.mouseY);
		}
		if(kha_SystemImpl.khanvas.setCapture != null) {
			kha_SystemImpl.khanvas.setCapture();
		} else {
			kha_SystemImpl.khanvas.ownerDocument.addEventListener("mousemove",kha_SystemImpl.documentMouseMove,true);
		}
		kha_SystemImpl.khanvas.ownerDocument.addEventListener("mouseup",kha_SystemImpl.mouseLeftUp);
	} else if(event.which == 2) {
		kha_SystemImpl.mouse.sendDownEvent(0,2,kha_SystemImpl.mouseX,kha_SystemImpl.mouseY);
		kha_SystemImpl.khanvas.ownerDocument.addEventListener("mouseup",kha_SystemImpl.mouseMiddleUp);
	} else if(event.which == 3) {
		kha_SystemImpl.mouse.sendDownEvent(0,1,kha_SystemImpl.mouseX,kha_SystemImpl.mouseY);
		kha_SystemImpl.khanvas.ownerDocument.addEventListener("mouseup",kha_SystemImpl.mouseRightUp);
	}
	kha_SystemImpl.insideInputEvent = false;
};
kha_SystemImpl.mouseLeftUp = function(event) {
	kha_SystemImpl.unlockSound();
	if(event.which != 1) {
		return;
	}
	kha_SystemImpl.insideInputEvent = true;
	kha_SystemImpl.khanvas.ownerDocument.removeEventListener("mouseup",kha_SystemImpl.mouseLeftUp);
	if(kha_SystemImpl.khanvas.releaseCapture != null) {
		kha_SystemImpl.khanvas.ownerDocument.releaseCapture();
	} else {
		kha_SystemImpl.khanvas.ownerDocument.removeEventListener("mousemove",kha_SystemImpl.documentMouseMove,true);
	}
	if(kha_SystemImpl.leftMouseCtrlDown) {
		kha_SystemImpl.mouse.sendUpEvent(0,1,kha_SystemImpl.mouseX,kha_SystemImpl.mouseY);
	} else {
		kha_SystemImpl.mouse.sendUpEvent(0,0,kha_SystemImpl.mouseX,kha_SystemImpl.mouseY);
	}
	kha_SystemImpl.leftMouseCtrlDown = false;
	kha_SystemImpl.insideInputEvent = false;
};
kha_SystemImpl.mouseMiddleUp = function(event) {
	kha_SystemImpl.unlockSound();
	if(event.which != 2) {
		return;
	}
	kha_SystemImpl.insideInputEvent = true;
	kha_SystemImpl.khanvas.ownerDocument.removeEventListener("mouseup",kha_SystemImpl.mouseMiddleUp);
	kha_SystemImpl.mouse.sendUpEvent(0,2,kha_SystemImpl.mouseX,kha_SystemImpl.mouseY);
	kha_SystemImpl.insideInputEvent = false;
};
kha_SystemImpl.mouseRightUp = function(event) {
	kha_SystemImpl.unlockSound();
	if(event.which != 3) {
		return;
	}
	kha_SystemImpl.insideInputEvent = true;
	kha_SystemImpl.khanvas.ownerDocument.removeEventListener("mouseup",kha_SystemImpl.mouseRightUp);
	kha_SystemImpl.mouse.sendUpEvent(0,1,kha_SystemImpl.mouseX,kha_SystemImpl.mouseY);
	kha_SystemImpl.insideInputEvent = false;
};
kha_SystemImpl.documentMouseMove = function(event) {
	event.stopPropagation();
	kha_SystemImpl.mouseMove(event);
};
kha_SystemImpl.mouseMove = function(event) {
	kha_SystemImpl.insideInputEvent = true;
	var lastMouseX = kha_SystemImpl.mouseX;
	var lastMouseY = kha_SystemImpl.mouseY;
	kha_SystemImpl.setMouseXY(event);
	var movementX = event.movementX;
	var movementY = event.movementY;
	if(event.movementX == null) {
		movementX = event.mozMovementX != null ? event.mozMovementX : event.webkitMovementX != null ? event.webkitMovementX : kha_SystemImpl.mouseX - lastMouseX;
		movementY = event.mozMovementY != null ? event.mozMovementY : event.webkitMovementY != null ? event.webkitMovementY : kha_SystemImpl.mouseY - lastMouseY;
	}
	if(kha_SystemImpl.firefox) {
		movementX = movementX * window.devicePixelRatio | 0;
		movementY = movementY * window.devicePixelRatio | 0;
	}
	kha_SystemImpl.mouse.sendMoveEvent(0,kha_SystemImpl.mouseX,kha_SystemImpl.mouseY,movementX,movementY);
	kha_SystemImpl.insideInputEvent = false;
};
kha_SystemImpl.setTouchXY = function(touch) {
	var rect = kha_SystemImpl.khanvas.getBoundingClientRect();
	var borderWidth = kha_SystemImpl.khanvas.clientLeft;
	var borderHeight = kha_SystemImpl.khanvas.clientTop;
	kha_SystemImpl.touchX = (touch.clientX - rect.left - borderWidth) * kha_SystemImpl.khanvas.width / (rect.width - 2 * borderWidth) | 0;
	kha_SystemImpl.touchY = (touch.clientY - rect.top - borderHeight) * kha_SystemImpl.khanvas.height / (rect.height - 2 * borderHeight) | 0;
};
kha_SystemImpl.touchDown = function(event) {
	kha_SystemImpl.insideInputEvent = true;
	kha_SystemImpl.unlockSound();
	event.stopPropagation();
	event.preventDefault();
	var index = 0;
	var _g = 0;
	var _g1 = event.changedTouches;
	while(_g < _g1.length) {
		var touch = _g1[_g];
		++_g;
		var id = touch.identifier;
		if(kha_SystemImpl.ios) {
			id = kha_SystemImpl.iosTouchs.indexOf(-1);
			if(id == -1) {
				id = kha_SystemImpl.iosTouchs.length;
			}
			kha_SystemImpl.iosTouchs[id] = touch.identifier;
		}
		kha_SystemImpl.setTouchXY(touch);
		kha_SystemImpl.mouse.sendDownEvent(0,0,kha_SystemImpl.touchX,kha_SystemImpl.touchY);
		kha_SystemImpl.surface.sendTouchStartEvent(id,kha_SystemImpl.touchX,kha_SystemImpl.touchY);
		if(index == 0) {
			kha_SystemImpl.lastFirstTouchX = kha_SystemImpl.touchX;
			kha_SystemImpl.lastFirstTouchY = kha_SystemImpl.touchY;
		}
		++index;
	}
	kha_SystemImpl.insideInputEvent = false;
};
kha_SystemImpl.touchUp = function(event) {
	kha_SystemImpl.insideInputEvent = true;
	kha_SystemImpl.unlockSound();
	var _g = 0;
	var _g1 = event.changedTouches;
	while(_g < _g1.length) {
		var touch = _g1[_g];
		++_g;
		var id = touch.identifier;
		if(kha_SystemImpl.ios) {
			id = kha_SystemImpl.iosTouchs.indexOf(id);
			kha_SystemImpl.iosTouchs[id] = -1;
		}
		kha_SystemImpl.setTouchXY(touch);
		kha_SystemImpl.mouse.sendUpEvent(0,0,kha_SystemImpl.touchX,kha_SystemImpl.touchY);
		kha_SystemImpl.surface.sendTouchEndEvent(id,kha_SystemImpl.touchX,kha_SystemImpl.touchY);
	}
	kha_SystemImpl.insideInputEvent = false;
};
kha_SystemImpl.touchMove = function(event) {
	kha_SystemImpl.insideInputEvent = true;
	kha_SystemImpl.unlockSound();
	var index = 0;
	var _g = 0;
	var _g1 = event.changedTouches;
	while(_g < _g1.length) {
		var touch = _g1[_g];
		++_g;
		kha_SystemImpl.setTouchXY(touch);
		if(index == 0) {
			var movementX = kha_SystemImpl.touchX - kha_SystemImpl.lastFirstTouchX;
			var movementY = kha_SystemImpl.touchY - kha_SystemImpl.lastFirstTouchY;
			kha_SystemImpl.lastFirstTouchX = kha_SystemImpl.touchX;
			kha_SystemImpl.lastFirstTouchY = kha_SystemImpl.touchY;
			kha_SystemImpl.mouse.sendMoveEvent(0,kha_SystemImpl.touchX,kha_SystemImpl.touchY,movementX,movementY);
		}
		var id = touch.identifier;
		if(kha_SystemImpl.ios) {
			id = kha_SystemImpl.iosTouchs.indexOf(id);
		}
		kha_SystemImpl.surface.sendMoveEvent(id,kha_SystemImpl.touchX,kha_SystemImpl.touchY);
		++index;
	}
	kha_SystemImpl.insideInputEvent = false;
};
kha_SystemImpl.touchCancel = function(event) {
	kha_SystemImpl.insideInputEvent = true;
	kha_SystemImpl.unlockSound();
	var _g = 0;
	var _g1 = event.changedTouches;
	while(_g < _g1.length) {
		var touch = _g1[_g];
		++_g;
		var id = touch.identifier;
		if(kha_SystemImpl.ios) {
			id = kha_SystemImpl.iosTouchs.indexOf(id);
		}
		kha_SystemImpl.setTouchXY(touch);
		kha_SystemImpl.mouse.sendUpEvent(0,0,kha_SystemImpl.touchX,kha_SystemImpl.touchY);
		kha_SystemImpl.surface.sendTouchEndEvent(id,kha_SystemImpl.touchX,kha_SystemImpl.touchY);
	}
	kha_SystemImpl.iosTouchs = [];
	kha_SystemImpl.insideInputEvent = false;
};
kha_SystemImpl.onBlur = function() {
	kha_System.background();
};
kha_SystemImpl.onFocus = function() {
	kha_System.foreground();
};
kha_SystemImpl.keycodeToChar = function(key,keycode,shift) {
	if(key != null) {
		if(key.length == 1) {
			return key;
		}
		switch(key) {
		case "Add":
			return "+";
		case "Divide":
			return "/";
		case "Multiply":
			return "*";
		case "Subtract":
			return "-";
		}
	}
	switch(keycode) {
	case 48:
		if(shift) {
			return "=";
		} else {
			return "0";
		}
		break;
	case 49:
		if(shift) {
			return "!";
		} else {
			return "1";
		}
		break;
	case 50:
		if(shift) {
			return "\"";
		} else {
			return "2";
		}
		break;
	case 51:
		if(shift) {
			return "§";
		} else {
			return "3";
		}
		break;
	case 52:
		if(shift) {
			return "$";
		} else {
			return "4";
		}
		break;
	case 53:
		if(shift) {
			return "%";
		} else {
			return "5";
		}
		break;
	case 54:
		if(shift) {
			return "&";
		} else {
			return "6";
		}
		break;
	case 55:
		if(shift) {
			return "/";
		} else {
			return "7";
		}
		break;
	case 56:
		if(shift) {
			return "(";
		} else {
			return "8";
		}
		break;
	case 57:
		if(shift) {
			return ")";
		} else {
			return "9";
		}
		break;
	case 106:
		return "*";
	case 107:
		return "+";
	case 109:
		return "-";
	case 111:
		return "/";
	case 187:
		if(shift) {
			return "*";
		} else {
			return "+";
		}
		break;
	case 188:
		if(shift) {
			return ";";
		} else {
			return ",";
		}
		break;
	case 189:
		if(shift) {
			return "_";
		} else {
			return "-";
		}
		break;
	case 190:
		if(shift) {
			return ":";
		} else {
			return ".";
		}
		break;
	case 191:
		if(shift) {
			return "'";
		} else {
			return "#";
		}
		break;
	case 212:
		if(shift) {
			return "`";
		} else {
			return "´";
		}
		break;
	case 219:
		if(shift) {
			return "?";
		} else {
			return "ß";
		}
		break;
	case 226:
		if(shift) {
			return ">";
		} else {
			return "<";
		}
		break;
	}
	if(keycode >= 96 && keycode <= 105) {
		return String.fromCodePoint(-48 + keycode);
	}
	if(keycode >= 65 && keycode <= 90) {
		if(shift) {
			return String.fromCodePoint(keycode);
		} else {
			return String.fromCodePoint(keycode - 65 + 97);
		}
	}
	return String.fromCodePoint(keycode);
};
kha_SystemImpl.keyDown = function(event) {
	kha_SystemImpl.insideInputEvent = true;
	kha_SystemImpl.unlockSound();
	var _g = kha_input_Keyboard.keyBehavior;
	switch(_g._hx_index) {
	case 0:
		kha_SystemImpl.defaultKeyBlock(event);
		break;
	case 1:
		event.preventDefault();
		break;
	case 2:
		break;
	case 3:
		var func = _g.func;
		if(func(event.keyCode)) {
			event.preventDefault();
		}
		break;
	}
	event.stopPropagation();
	if(kha_SystemImpl.ie) {
		if(kha_SystemImpl.pressedKeys[event.keyCode]) {
			event.preventDefault();
			return;
		}
		kha_SystemImpl.pressedKeys[event.keyCode] = true;
	} else if(event.repeat) {
		event.preventDefault();
		return;
	}
	var keyCode = kha_SystemImpl.fixedKeyCode(event);
	kha_SystemImpl.keyboard.sendDownEvent(keyCode);
	kha_SystemImpl.insideInputEvent = false;
};
kha_SystemImpl.fixedKeyCode = function(event) {
	switch(event.keyCode) {
	case 91:case 93:
		return 224;
	case 186:
		return 59;
	case 187:
		return 61;
	case 189:
		return 173;
	default:
		return event.keyCode;
	}
};
kha_SystemImpl.defaultKeyBlock = function(e) {
	if(e.ctrlKey || e.metaKey) {
		if(e.keyCode == 67 || e.keyCode == 88 || e.keyCode == 86) {
			return;
		}
		e.preventDefault();
		return;
	}
	if(e.keyCode >= 112 && e.keyCode <= 123) {
		return;
	}
	if(e.key == null || e.key.length == 1) {
		return;
	}
	e.preventDefault();
};
kha_SystemImpl.keyUp = function(event) {
	kha_SystemImpl.insideInputEvent = true;
	kha_SystemImpl.unlockSound();
	event.preventDefault();
	event.stopPropagation();
	if(kha_SystemImpl.ie) {
		kha_SystemImpl.pressedKeys[event.keyCode] = false;
	}
	var keyCode = kha_SystemImpl.fixedKeyCode(event);
	kha_SystemImpl.keyboard.sendUpEvent(keyCode);
	kha_SystemImpl.insideInputEvent = false;
};
kha_SystemImpl.keyPress = function(event) {
	kha_SystemImpl.insideInputEvent = true;
	kha_SystemImpl.unlockSound();
	if(event.which == 0) {
		return;
	}
	event.preventDefault();
	event.stopPropagation();
	var code = event.which;
	kha_SystemImpl.keyboard.sendPressEvent(String.fromCodePoint(code));
	kha_SystemImpl.insideInputEvent = false;
};
kha_SystemImpl.canSwitchFullscreen = function() {
	return 'fullscreenElement ' in document ||
		'mozFullScreenElement' in document ||
		'webkitFullscreenElement' in document ||
		'msFullscreenElement' in document
		;
};
kha_SystemImpl.notifyOfFullscreenChange = function(func,error) {
	window.document.addEventListener("fullscreenchange",func,false);
	window.document.addEventListener("mozfullscreenchange",func,false);
	window.document.addEventListener("webkitfullscreenchange",func,false);
	window.document.addEventListener("MSFullscreenChange",func,false);
	window.document.addEventListener("fullscreenerror",error,false);
	window.document.addEventListener("mozfullscreenerror",error,false);
	window.document.addEventListener("webkitfullscreenerror",error,false);
	window.document.addEventListener("MSFullscreenError",error,false);
};
kha_SystemImpl.removeFromFullscreenChange = function(func,error) {
	window.document.removeEventListener("fullscreenchange",func,false);
	window.document.removeEventListener("mozfullscreenchange",func,false);
	window.document.removeEventListener("webkitfullscreenchange",func,false);
	window.document.removeEventListener("MSFullscreenChange",func,false);
	window.document.removeEventListener("fullscreenerror",error,false);
	window.document.removeEventListener("mozfullscreenerror",error,false);
	window.document.removeEventListener("webkitfullscreenerror",error,false);
	window.document.removeEventListener("MSFullscreenError",error,false);
};
kha_SystemImpl.setKeepScreenOn = function(on) {
};
kha_SystemImpl.loadUrl = function(url) {
	window.open(url,"_blank");
};
kha_SystemImpl.getGamepadId = function(index) {
	var sysGamepads = kha_SystemImpl.getGamepads();
	if(sysGamepads != null && sysGamepads[index]) {
		return sysGamepads[index].id;
	}
	return "unkown";
};
kha_SystemImpl.getGamepads = function() {
	if(kha_SystemImpl.chrome && kha_vr_VrInterface.instance.IsVrEnabled()) {
		return null;
	}
	if(navigator.getGamepads) {
		return window.navigator.getGamepads();
	} else {
		return null;
	}
};
kha_SystemImpl.getPen = function(num) {
	return null;
};
kha_SystemImpl.safeZone = function() {
	return 1.0;
};
kha_SystemImpl.login = function() {
};
kha_SystemImpl.automaticSafeZone = function() {
	return true;
};
kha_SystemImpl.setSafeZone = function(value) {
};
kha_SystemImpl.unlockAchievement = function(id) {
};
var kha_Video = function() {
};
$hxClasses["kha.Video"] = kha_Video;
kha_Video.__name__ = "kha.Video";
kha_Video.__interfaces__ = [kha_Resource];
kha_Video.prototype = {
	width: function() {
		return 100;
	}
	,height: function() {
		return 100;
	}
	,play: function(loop) {
		if(loop == null) {
			loop = false;
		}
	}
	,pause: function() {
	}
	,stop: function() {
	}
	,getLength: function() {
		return 0;
	}
	,getCurrentPos: function() {
		return 0;
	}
	,get_position: function() {
		return 0;
	}
	,set_position: function(value) {
		return 0;
	}
	,getVolume: function() {
		return 1;
	}
	,setVolume: function(volume) {
	}
	,isFinished: function() {
		return this.getCurrentPos() >= this.getLength();
	}
	,unload: function() {
	}
	,__class__: kha_Video
	,__properties__: {set_position:"set_position",get_position:"get_position"}
};
var kha_WebGLImage = function(width,height,format,renderTarget,depthStencilFormat,samples) {
	this.pixels = null;
	this.MSAAFrameBuffer = null;
	this.depthTexture = null;
	this.texture = null;
	this.renderBuffer = null;
	this.frameBuffer = null;
	this.myWidth = width;
	this.myHeight = height;
	this.format = format;
	this.renderTarget = renderTarget;
	this.samples = samples;
	this.image = null;
	this.video = null;
	this.depthStencilFormat = depthStencilFormat;
	kha_WebGLImage.init();
	if(renderTarget) {
		this.createTexture();
	}
};
$hxClasses["kha.WebGLImage"] = kha_WebGLImage;
kha_WebGLImage.__name__ = "kha.WebGLImage";
kha_WebGLImage.init = function() {
	if(kha_WebGLImage.context == null) {
		kha_WebGLImage.canvas = window.document.createElement("canvas");
		if(kha_WebGLImage.canvas != null) {
			kha_WebGLImage.context = kha_WebGLImage.canvas.getContext("2d");
			kha_WebGLImage.canvas.width = 4096;
			kha_WebGLImage.canvas.height = 4096;
			kha_WebGLImage.context.globalCompositeOperation = "copy";
		}
	}
};
kha_WebGLImage.upperPowerOfTwo = function(v) {
	--v;
	v |= v >>> 1;
	v |= v >>> 2;
	v |= v >>> 4;
	v |= v >>> 8;
	v |= v >>> 16;
	return ++v;
};
kha_WebGLImage.formatByteSize = function(format) {
	switch(format) {
	case 0:
		return 4;
	case 1:
		return 1;
	case 2:
		return 16;
	case 3:
		return 2;
	case 4:
		return 8;
	case 5:
		return 4;
	case 6:
		return 2;
	default:
		return 4;
	}
};
kha_WebGLImage.__super__ = kha_Image;
kha_WebGLImage.prototype = $extend(kha_Image.prototype,{
	image: null
	,video: null
	,data: null
	,myWidth: null
	,myHeight: null
	,format: null
	,renderTarget: null
	,samples: null
	,frameBuffer: null
	,renderBuffer: null
	,texture: null
	,depthTexture: null
	,MSAAFrameBuffer: null
	,MSAAColorBuffer: null
	,MSAADepthBuffer: null
	,graphics1: null
	,graphics2: null
	,graphics4: null
	,depthStencilFormat: null
	,get_g1: function() {
		if(this.graphics1 == null) {
			this.graphics1 = new kha_graphics2_Graphics1(this);
		}
		return this.graphics1;
	}
	,get_g2: function() {
		if(this.graphics2 == null) {
			this.graphics2 = new kha_js_graphics4_Graphics2(this);
		}
		return this.graphics2;
	}
	,get_g4: function() {
		if(this.graphics4 == null) {
			this.graphics4 = new kha_js_graphics4_Graphics(this);
		}
		return this.graphics4;
	}
	,get_width: function() {
		return this.myWidth;
	}
	,get_height: function() {
		return this.myHeight;
	}
	,get_realWidth: function() {
		return this.myWidth;
	}
	,get_realHeight: function() {
		return this.myHeight;
	}
	,isOpaque: function(x,y) {
		if(this.data == null) {
			if(kha_WebGLImage.context == null) {
				return true;
			} else {
				this.createImageData();
			}
		}
		return this.data.data[y * (this.image.width | 0) * 4 + x * 4 + 3] != 0;
	}
	,at: function(x,y) {
		if(this.data == null) {
			if(kha_WebGLImage.context == null) {
				return -16777216;
			} else {
				this.createImageData();
			}
		}
		var r = this.data.data[y * this.get_width() * 4 + x * 4];
		var g = this.data.data[y * this.get_width() * 4 + x * 4 + 1];
		var b = this.data.data[y * this.get_width() * 4 + x * 4 + 2];
		var a = this.data.data[y * this.get_width() * 4 + x * 4 + 3];
		return kha__$Color_Color_$Impl_$._new(a << 24 | r << 16 | g << 8 | b);
	}
	,createImageData: function() {
		if(((this.image) instanceof Uint8Array)) {
			this.data = new ImageData(new Uint8ClampedArray(this.image.buffer),this.get_width(),this.get_height());
		} else {
			if(this.get_width() > kha_WebGLImage.canvas.width || this.get_height() > kha_WebGLImage.canvas.height) {
				var cw = kha_WebGLImage.canvas.width;
				var ch = kha_WebGLImage.canvas.height;
				while(this.get_width() > cw || this.get_height() > ch) {
					cw *= 2;
					ch *= 2;
				}
				kha_WebGLImage.canvas.width = cw;
				kha_WebGLImage.canvas.height = ch;
			}
			kha_WebGLImage.context.strokeStyle = "rgba(0,0,0,0)";
			kha_WebGLImage.context.fillStyle = "rgba(0,0,0,0)";
			kha_WebGLImage.context.fillRect(0,0,this.image.width,this.image.height);
			kha_WebGLImage.context.drawImage(this.image,0,0,this.image.width,this.image.height,0,0,this.image.width,this.image.height);
			this.data = kha_WebGLImage.context.getImageData(0,0,this.image.width,this.image.height);
		}
	}
	,createTexture: function() {
		if(kha_SystemImpl.gl == null) {
			return;
		}
		this.texture = kha_SystemImpl.gl.createTexture();
		kha_SystemImpl.gl.bindTexture(3553,this.texture);
		kha_SystemImpl.gl.texParameteri(3553,10240,9729);
		kha_SystemImpl.gl.texParameteri(3553,10241,9729);
		kha_SystemImpl.gl.texParameteri(3553,10242,33071);
		kha_SystemImpl.gl.texParameteri(3553,10243,33071);
		if(this.renderTarget) {
			this.frameBuffer = kha_SystemImpl.gl.createFramebuffer();
			kha_SystemImpl.gl.bindFramebuffer(36160,this.frameBuffer);
			switch(this.format) {
			case 0:
				kha_SystemImpl.gl.texImage2D(3553,0,6408,this.get_realWidth(),this.get_realHeight(),0,6408,5121,null);
				break;
			case 2:
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 34836 : 6408,this.get_realWidth(),this.get_realHeight(),0,6408,5126,null);
				break;
			case 3:
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 33189 : 6402,this.get_realWidth(),this.get_realHeight(),0,6402,5123,null);
				break;
			case 4:
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 34842 : 6408,this.get_realWidth(),this.get_realHeight(),0,6408,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,null);
				break;
			case 5:
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 33326 : 6406,this.get_realWidth(),this.get_realHeight(),0,kha_SystemImpl.gl2 ? 6403 : 6406,5126,null);
				break;
			case 6:
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 33325 : 6406,this.get_realWidth(),this.get_realHeight(),0,kha_SystemImpl.gl2 ? 6403 : 6406,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,null);
				break;
			default:
				kha_SystemImpl.gl.texImage2D(3553,0,6408,this.get_realWidth(),this.get_realHeight(),0,6408,5121,null);
			}
			if(this.format == 3) {
				kha_SystemImpl.gl.texParameteri(3553,10240,9728);
				kha_SystemImpl.gl.texParameteri(3553,10241,9728);
				kha_SystemImpl.gl.framebufferTexture2D(36160,36096,3553,this.texture,0);
				if(!kha_SystemImpl.gl2) {
					var colortex = kha_SystemImpl.gl.createTexture();
					kha_SystemImpl.gl.bindTexture(3553,colortex);
					kha_SystemImpl.gl.texImage2D(3553,0,6408,this.get_realWidth(),this.get_realHeight(),0,6408,5121,null);
					kha_SystemImpl.gl.framebufferTexture2D(36160,36064,3553,colortex,0);
					kha_SystemImpl.gl.bindTexture(3553,this.texture);
				}
			} else {
				if(this.samples > 1 && kha_SystemImpl.gl2) {
					this.MSAAFrameBuffer = kha_SystemImpl.gl.createFramebuffer();
					this.MSAAColorBuffer = kha_SystemImpl.gl.createRenderbuffer();
					kha_SystemImpl.gl.bindRenderbuffer(36161,this.MSAAColorBuffer);
					var MSAAFormat;
					switch(this.format) {
					case 0:
						MSAAFormat = kha_SystemImpl.gl.RGBA8;
						break;
					case 2:
						MSAAFormat = kha_SystemImpl.gl.RGBA32F;
						break;
					case 4:
						MSAAFormat = kha_SystemImpl.gl.RGBA16F;
						break;
					case 5:
						MSAAFormat = 33326;
						break;
					case 6:
						MSAAFormat = 33325;
						break;
					default:
						MSAAFormat = kha_SystemImpl.gl.RGBA8;
					}
					kha_SystemImpl.gl.renderbufferStorageMultisample(36161,this.samples,MSAAFormat,this.get_realWidth(),this.get_realHeight());
					kha_SystemImpl.gl.bindFramebuffer(36160,this.frameBuffer);
					kha_SystemImpl.gl.framebufferRenderbuffer(36160,36064,36161,this.MSAAColorBuffer);
					kha_SystemImpl.gl.bindFramebuffer(36160,this.MSAAFrameBuffer);
				}
				kha_SystemImpl.gl.framebufferTexture2D(36160,36064,3553,this.texture,0);
				kha_SystemImpl.gl.bindFramebuffer(36160,null);
			}
			this.initDepthStencilBuffer(this.depthStencilFormat);
			var e = kha_SystemImpl.gl.checkFramebufferStatus(36160);
			if(e != 36053) {
				haxe_Log.trace("checkframebufferStatus error " + e,{ fileName : "kha/WebGLImage.hx", lineNumber : 250, className : "kha.WebGLImage", methodName : "createTexture"});
			}
			kha_SystemImpl.gl.bindRenderbuffer(36161,null);
			kha_SystemImpl.gl.bindFramebuffer(36160,null);
		} else if(this.video != null) {
			kha_SystemImpl.gl.texImage2D(3553,0,6408,6408,5121,this.video);
		} else {
			switch(this.format) {
			case 0:
				if(((this.image) instanceof Uint8Array)) {
					kha_SystemImpl.gl.texImage2D(3553,0,6408,this.myWidth,this.myHeight,0,6408,5121,this.image);
				} else {
					kha_SystemImpl.gl.texImage2D(3553,0,6408,6408,5121,this.image);
				}
				break;
			case 1:
				kha_SystemImpl.gl.texImage2D(3553,0,6409,this.myWidth,this.myHeight,0,6409,5121,this.image);
				break;
			case 2:
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 34836 : 6408,this.myWidth,this.myHeight,0,6408,5126,this.image);
				break;
			case 4:
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 34842 : 6408,this.myWidth,this.myHeight,0,6408,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,this.image);
				break;
			case 5:
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 33326 : 6406,this.myWidth,this.myHeight,0,kha_SystemImpl.gl2 ? 6403 : 6406,5126,this.image);
				break;
			case 6:
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 33325 : 6406,this.myWidth,this.myHeight,0,kha_SystemImpl.gl2 ? 6403 : 6406,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,this.image);
				break;
			default:
				kha_SystemImpl.gl.texImage2D(3553,0,6408,6408,5121,this.image);
			}
		}
		kha_SystemImpl.gl.bindTexture(3553,null);
	}
	,initDepthStencilBuffer: function(depthStencilFormat) {
		switch(depthStencilFormat) {
		case 0:
			break;
		case 1:case 5:
			if(kha_SystemImpl.depthTexture == null) {
				this.renderBuffer = kha_SystemImpl.gl.createRenderbuffer();
				kha_SystemImpl.gl.bindRenderbuffer(36161,this.renderBuffer);
				kha_SystemImpl.gl.renderbufferStorage(36161,33189,this.get_realWidth(),this.get_realHeight());
				kha_SystemImpl.gl.framebufferRenderbuffer(36160,36096,36161,this.renderBuffer);
			} else {
				this.depthTexture = kha_SystemImpl.gl.createTexture();
				kha_SystemImpl.gl.bindTexture(3553,this.depthTexture);
				if(depthStencilFormat == 1) {
					kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 33190 : 6402,this.get_realWidth(),this.get_realHeight(),0,6402,5125,null);
				} else {
					kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 33189 : 6402,this.get_realWidth(),this.get_realHeight(),0,6402,5123,null);
				}
				kha_SystemImpl.gl.texParameteri(3553,10240,9728);
				kha_SystemImpl.gl.texParameteri(3553,10241,9728);
				kha_SystemImpl.gl.texParameteri(3553,10242,33071);
				kha_SystemImpl.gl.texParameteri(3553,10243,33071);
				kha_SystemImpl.gl.bindFramebuffer(36160,this.frameBuffer);
				if(this.samples > 1 && kha_SystemImpl.gl2) {
					this.MSAADepthBuffer = kha_SystemImpl.gl.createRenderbuffer();
					kha_SystemImpl.gl.bindRenderbuffer(36161,this.MSAADepthBuffer);
					if(depthStencilFormat == 1) {
						kha_SystemImpl.gl.renderbufferStorageMultisample(36161,this.samples,33190,this.get_realWidth(),this.get_realHeight());
					} else {
						kha_SystemImpl.gl.renderbufferStorageMultisample(36161,this.samples,33189,this.get_realWidth(),this.get_realHeight());
					}
					kha_SystemImpl.gl.bindFramebuffer(36160,this.frameBuffer);
					kha_SystemImpl.gl.framebufferRenderbuffer(36160,36096,36161,this.MSAADepthBuffer);
					kha_SystemImpl.gl.bindFramebuffer(36160,this.MSAAFrameBuffer);
				}
				kha_SystemImpl.gl.framebufferTexture2D(36160,36096,3553,this.depthTexture,0);
				kha_SystemImpl.gl.bindFramebuffer(36160,null);
			}
			break;
		case 2:case 3:case 4:
			if(kha_SystemImpl.depthTexture == null) {
				this.renderBuffer = kha_SystemImpl.gl.createRenderbuffer();
				kha_SystemImpl.gl.bindRenderbuffer(36161,this.renderBuffer);
				kha_SystemImpl.gl.renderbufferStorage(36161,34041,this.get_realWidth(),this.get_realHeight());
				kha_SystemImpl.gl.framebufferRenderbuffer(36160,33306,36161,this.renderBuffer);
			} else {
				this.depthTexture = kha_SystemImpl.gl.createTexture();
				kha_SystemImpl.gl.bindTexture(3553,this.depthTexture);
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 35056 : 34041,this.get_realWidth(),this.get_realHeight(),0,34041,kha_SystemImpl.depthTexture.UNSIGNED_INT_24_8_WEBGL,null);
				kha_SystemImpl.gl.texParameteri(3553,10240,9728);
				kha_SystemImpl.gl.texParameteri(3553,10241,9728);
				kha_SystemImpl.gl.texParameteri(3553,10242,33071);
				kha_SystemImpl.gl.texParameteri(3553,10243,33071);
				kha_SystemImpl.gl.bindFramebuffer(36160,this.frameBuffer);
				if(this.samples > 1 && kha_SystemImpl.gl2) {
					this.MSAADepthBuffer = kha_SystemImpl.gl.createRenderbuffer();
					kha_SystemImpl.gl.bindRenderbuffer(36161,this.MSAADepthBuffer);
					kha_SystemImpl.gl.renderbufferStorageMultisample(36161,this.samples,35056,this.get_realWidth(),this.get_realHeight());
					kha_SystemImpl.gl.bindFramebuffer(36160,this.frameBuffer);
					kha_SystemImpl.gl.framebufferRenderbuffer(36160,33306,36161,this.MSAADepthBuffer);
					kha_SystemImpl.gl.bindFramebuffer(36160,this.MSAAFrameBuffer);
				}
				kha_SystemImpl.gl.framebufferTexture2D(36160,33306,3553,this.depthTexture,0);
			}
			break;
		}
	}
	,set: function(stage) {
		kha_SystemImpl.gl.activeTexture(33984 + stage);
		kha_SystemImpl.gl.bindTexture(3553,this.texture);
		if(this.video != null) {
			kha_SystemImpl.gl.texImage2D(3553,0,6408,6408,5121,this.video);
		}
	}
	,setDepth: function(stage) {
		kha_SystemImpl.gl.activeTexture(33984 + stage);
		kha_SystemImpl.gl.bindTexture(3553,this.depthTexture);
	}
	,setDepthStencilFrom: function(image) {
		this.depthTexture = (js_Boot.__cast(image , kha_WebGLImage)).depthTexture;
		kha_SystemImpl.gl.bindFramebuffer(36160,this.frameBuffer);
		kha_SystemImpl.gl.framebufferTexture2D(36160,36096,3553,this.depthTexture,0);
	}
	,bytesToArray: function(bytes) {
		switch(this.format) {
		case 0:case 1:
			return new Uint8Array(bytes.b.bufferValue);
		case 2:case 4:case 5:case 6:
			return new Float32Array(bytes.b.bufferValue);
		default:
			return new Uint8Array(bytes.b.bufferValue);
		}
	}
	,bytes: null
	,lock: function(level) {
		if(level == null) {
			level = 0;
		}
		this.bytes = new haxe_io_Bytes(new ArrayBuffer(kha_WebGLImage.formatByteSize(this.format) * this.get_width() * this.get_height()));
		return this.bytes;
	}
	,unlock: function() {
		if(kha_SystemImpl.gl != null) {
			this.texture = kha_SystemImpl.gl.createTexture();
			kha_SystemImpl.gl.bindTexture(3553,this.texture);
			kha_SystemImpl.gl.texParameteri(3553,10240,9729);
			kha_SystemImpl.gl.texParameteri(3553,10241,9729);
			kha_SystemImpl.gl.texParameteri(3553,10242,33071);
			kha_SystemImpl.gl.texParameteri(3553,10243,33071);
			switch(this.format) {
			case 0:
				kha_SystemImpl.gl.texImage2D(3553,0,6408,this.get_width(),this.get_height(),0,6408,5121,this.bytesToArray(this.bytes));
				break;
			case 1:
				kha_SystemImpl.gl.texImage2D(3553,0,6409,this.get_width(),this.get_height(),0,6409,5121,this.bytesToArray(this.bytes));
				if(kha_SystemImpl.gl.getError() == 1282) {
					var rgbaBytes = new haxe_io_Bytes(new ArrayBuffer(this.get_width() * this.get_height() * 4));
					var _g = 0;
					var _g1 = this.get_height();
					while(_g < _g1) {
						var y = _g++;
						var _g2 = 0;
						var _g11 = this.get_width();
						while(_g2 < _g11) {
							var x = _g2++;
							var _this = this.bytes;
							var pos = y * this.get_width() + x;
							var value = _this.b[pos];
							var pos1 = y * this.get_width() * 4 + x * 4;
							rgbaBytes.b[pos1] = value;
							var pos2 = y * this.get_width() * 4 + x * 4 + 1;
							rgbaBytes.b[pos2] = value;
							var pos3 = y * this.get_width() * 4 + x * 4 + 2;
							rgbaBytes.b[pos3] = value;
							var pos4 = y * this.get_width() * 4 + x * 4 + 3;
							rgbaBytes.b[pos4] = 255;
						}
					}
					kha_SystemImpl.gl.texImage2D(3553,0,6408,this.get_width(),this.get_height(),0,6408,5121,this.bytesToArray(rgbaBytes));
				}
				break;
			case 2:
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 34836 : 6408,this.get_width(),this.get_height(),0,6408,5126,this.bytesToArray(this.bytes));
				break;
			case 4:
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 34842 : 6408,this.get_width(),this.get_height(),0,6408,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,this.bytesToArray(this.bytes));
				break;
			case 5:
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 33326 : 6406,this.get_width(),this.get_height(),0,kha_SystemImpl.gl2 ? 6403 : 6406,5126,this.bytesToArray(this.bytes));
				break;
			case 6:
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 33325 : 6406,this.get_width(),this.get_height(),0,kha_SystemImpl.gl2 ? 6403 : 6406,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,this.bytesToArray(this.bytes));
				break;
			default:
				kha_SystemImpl.gl.texImage2D(3553,0,6408,this.get_width(),this.get_height(),0,6408,5121,this.bytesToArray(this.bytes));
			}
			kha_SystemImpl.gl.bindTexture(3553,null);
			this.bytes = null;
		}
	}
	,pixels: null
	,getPixels: function() {
		if(this.frameBuffer == null) {
			return null;
		}
		if(this.pixels == null) {
			switch(this.format) {
			case 0:case 1:
				this.pixels = new Uint8Array(kha_WebGLImage.formatByteSize(this.format) * this.get_width() * this.get_height());
				break;
			case 2:case 5:
				this.pixels = new Float32Array((kha_WebGLImage.formatByteSize(this.format) / 4 | 0) * this.get_width() * this.get_height());
				break;
			case 4:case 6:
				this.pixels = new Uint16Array((kha_WebGLImage.formatByteSize(this.format) / 2 | 0) * this.get_width() * this.get_height());
				break;
			default:
				this.pixels = new Uint8Array(kha_WebGLImage.formatByteSize(this.format) * this.get_width() * this.get_height());
			}
		}
		kha_SystemImpl.gl.bindFramebuffer(36160,this.frameBuffer);
		switch(this.format) {
		case 0:
			kha_SystemImpl.gl.readPixels(0,0,this.myWidth,this.myHeight,6408,5121,this.pixels);
			break;
		case 1:
			kha_SystemImpl.gl.readPixels(0,0,this.myWidth,this.myHeight,kha_SystemImpl.gl2 ? 6403 : 6406,5121,this.pixels);
			break;
		case 2:
			kha_SystemImpl.gl.readPixels(0,0,this.myWidth,this.myHeight,6408,5126,this.pixels);
			break;
		case 4:
			kha_SystemImpl.gl.readPixels(0,0,this.myWidth,this.myHeight,6408,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,this.pixels);
			break;
		case 5:
			kha_SystemImpl.gl.readPixels(0,0,this.myWidth,this.myHeight,kha_SystemImpl.gl2 ? 6403 : 6406,5126,this.pixels);
			break;
		case 6:
			kha_SystemImpl.gl.readPixels(0,0,this.myWidth,this.myHeight,kha_SystemImpl.gl2 ? 6403 : 6406,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,this.pixels);
			break;
		default:
			kha_SystemImpl.gl.readPixels(0,0,this.myWidth,this.myHeight,6408,5121,this.pixels);
		}
		return haxe_io_Bytes.ofData(this.pixels.buffer);
	}
	,unload: function() {
		if(this.texture != null) {
			kha_SystemImpl.gl.deleteTexture(this.texture);
		}
		if(this.depthTexture != null) {
			kha_SystemImpl.gl.deleteTexture(this.depthTexture);
		}
		if(this.frameBuffer != null) {
			kha_SystemImpl.gl.deleteFramebuffer(this.frameBuffer);
		}
		if(this.renderBuffer != null) {
			kha_SystemImpl.gl.deleteRenderbuffer(this.renderBuffer);
		}
		if(this.MSAAFrameBuffer != null) {
			kha_SystemImpl.gl.deleteFramebuffer(this.MSAAFrameBuffer);
		}
		if(this.MSAAColorBuffer != null) {
			kha_SystemImpl.gl.deleteRenderbuffer(this.MSAAColorBuffer);
		}
		if(this.MSAADepthBuffer != null) {
			kha_SystemImpl.gl.deleteRenderbuffer(this.MSAADepthBuffer);
		}
	}
	,generateMipmaps: function(levels) {
		kha_SystemImpl.gl.bindTexture(3553,this.texture);
		kha_SystemImpl.gl.generateMipmap(3553);
	}
	,setMipmaps: function(mipmaps) {
		kha_SystemImpl.gl.bindTexture(3553,this.texture);
		if(this.format == 2) {
			var _g = 0;
			var _g1 = mipmaps.length;
			while(_g < _g1) {
				var i = _g++;
				kha_SystemImpl.gl.texImage2D(3553,i + 1,kha_SystemImpl.gl2 ? 34836 : 6408,mipmaps[i].get_width(),mipmaps[i].get_height(),0,6408,5126,(js_Boot.__cast(mipmaps[i] , kha_WebGLImage)).image);
			}
		} else if(this.format == 4) {
			var _g2 = 0;
			var _g11 = mipmaps.length;
			while(_g2 < _g11) {
				var i1 = _g2++;
				kha_SystemImpl.gl.texImage2D(3553,i1 + 1,kha_SystemImpl.gl2 ? 34842 : 6408,mipmaps[i1].get_width(),mipmaps[i1].get_height(),0,6408,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,(js_Boot.__cast(mipmaps[i1] , kha_WebGLImage)).image);
			}
		} else {
			var _g3 = 0;
			var _g12 = mipmaps.length;
			while(_g3 < _g12) {
				var i2 = _g3++;
				kha_SystemImpl.gl.texImage2D(3553,i2 + 1,6408,6408,5121,(js_Boot.__cast(mipmaps[i2] , kha_WebGLImage)).image);
			}
		}
	}
	,__class__: kha_WebGLImage
});
var kha_Window = function(defaultWidth,defaultHeight,canvas) {
	this.canvas = canvas;
	this.defaultWidth = defaultWidth;
	this.defaultHeight = defaultHeight;
	kha_Window.windows.push(this);
};
$hxClasses["kha.Window"] = kha_Window;
kha_Window.__name__ = "kha.Window";
kha_Window.__properties__ = {get_all:"get_all"};
kha_Window.create = function(win,frame) {
	return null;
};
kha_Window.destroy = function($window) {
};
kha_Window.get = function(index) {
	return kha_Window.windows[index];
};
kha_Window.get_all = function() {
	return kha_Window.windows;
};
kha_Window.prototype = {
	canvas: null
	,defaultWidth: null
	,defaultHeight: null
	,resize: function(width,height) {
	}
	,move: function(x,y) {
	}
	,changeWindowFeatures: function(features) {
	}
	,changeFramebuffer: function(frame) {
	}
	,get_x: function() {
		return 0;
	}
	,set_x: function(value) {
		return 0;
	}
	,get_y: function() {
		return 0;
	}
	,set_y: function(value) {
		return 0;
	}
	,get_width: function() {
		if(this.canvas.clientWidth == 0) {
			return this.defaultWidth;
		} else {
			return this.canvas.clientWidth;
		}
	}
	,set_width: function(value) {
		return 800;
	}
	,get_height: function() {
		if(this.canvas.clientHeight == 0) {
			return this.defaultHeight;
		} else {
			return this.canvas.clientHeight;
		}
	}
	,set_height: function(value) {
		return 600;
	}
	,get_mode: function() {
		return 0;
	}
	,set_mode: function(mode) {
		if(mode == 1 || mode == 2) {
			if(!this.isFullscreen()) {
				this.requestFullscreen();
			}
		} else if(this.isFullscreen()) {
			this.exitFullscreen();
		}
		return mode;
	}
	,isFullscreen: function() {
		return document.fullscreenElement === this.canvas ||
			document.mozFullScreenElement === this.canvas ||
			document.webkitFullscreenElement === this.canvas ||
			document.msFullscreenElement === this.canvas ;
	}
	,requestFullscreen: function() {
		if(($_=this.canvas,$bind($_,$_.requestFullscreen))) {
			var c = this.canvas;
			c.requestFullscreen({ navigationUI : "hide"});
		} else if(this.canvas.msRequestFullscreen) {
			this.canvas.msRequestFullscreen();
		} else if(this.canvas.mozRequestFullScreen) {
			this.canvas.mozRequestFullScreen();
		} else if(this.canvas.webkitRequestFullscreen) {
			this.canvas.webkitRequestFullscreen();
		}
	}
	,exitFullscreen: function() {
		if(document.exitFullscreen) {
			document.exitFullscreen();
		} else if(document.msExitFullscreen) {
			document.msExitFullscreen();
		} else if(document.mozCancelFullScreen) {
			document.mozCancelFullScreen();
		} else if(document.webkitExitFullscreen) {
			document.webkitExitFullscreen();
		}
	}
	,get_visible: function() {
		return true;
	}
	,set_visible: function(value) {
		return true;
	}
	,get_title: function() {
		return "Kha";
	}
	,set_title: function(value) {
		return "Kha";
	}
	,notifyOnResize: function(callback) {
	}
	,get_vSynced: function() {
		return true;
	}
	,__class__: kha_Window
	,__properties__: {get_vSynced:"get_vSynced",set_title:"set_title",get_title:"get_title",set_visible:"set_visible",get_visible:"get_visible",set_mode:"set_mode",get_mode:"get_mode",set_height:"set_height",get_height:"get_height",set_width:"set_width",get_width:"get_width",set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x"}
};
var kha__$WindowOptions_WindowFeatures_$Impl_$ = {};
$hxClasses["kha._WindowOptions.WindowFeatures_Impl_"] = kha__$WindowOptions_WindowFeatures_$Impl_$;
kha__$WindowOptions_WindowFeatures_$Impl_$.__name__ = "kha._WindowOptions.WindowFeatures_Impl_";
kha__$WindowOptions_WindowFeatures_$Impl_$._new = function(value) {
	var this1 = value;
	return this1;
};
var kha_WindowOptions = function(title,x,y,width,height,display,visible,windowFeatures,mode) {
	if(mode == null) {
		mode = 0;
	}
	if(visible == null) {
		visible = true;
	}
	if(display == null) {
		display = -1;
	}
	if(height == null) {
		height = 600;
	}
	if(width == null) {
		width = 800;
	}
	if(y == null) {
		y = -1;
	}
	if(x == null) {
		x = -1;
	}
	this.mode = 0;
	this.windowFeatures = 1 | 4 | 2;
	this.visible = true;
	this.display = -1;
	this.height = 600;
	this.width = 800;
	this.y = -1;
	this.x = -1;
	this.title = null;
	this.title = title;
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
	this.display = display;
	this.visible = visible;
	this.windowFeatures = windowFeatures == null ? 1 | 4 | 2 : windowFeatures;
	this.mode = mode;
};
$hxClasses["kha.WindowOptions"] = kha_WindowOptions;
kha_WindowOptions.__name__ = "kha.WindowOptions";
kha_WindowOptions.prototype = {
	title: null
	,x: null
	,y: null
	,width: null
	,height: null
	,display: null
	,visible: null
	,windowFeatures: null
	,mode: null
	,__class__: kha_WindowOptions
};
var kha_arrays__$Float32Array_Float32Array_$Impl_$ = {};
$hxClasses["kha.arrays._Float32Array.Float32Array_Impl_"] = kha_arrays__$Float32Array_Float32Array_$Impl_$;
kha_arrays__$Float32Array_Float32Array_$Impl_$.__name__ = "kha.arrays._Float32Array.Float32Array_Impl_";
kha_arrays__$Float32Array_Float32Array_$Impl_$.__properties__ = {get_length:"get_length"};
kha_arrays__$Float32Array_Float32Array_$Impl_$._new = function(elements) {
	var this1 = new Float32Array(elements);
	return this1;
};
kha_arrays__$Float32Array_Float32Array_$Impl_$.get_length = function(this1) {
	return this1.length;
};
kha_arrays__$Float32Array_Float32Array_$Impl_$.set = function(this1,index,value) {
	return this1[index] = value;
};
kha_arrays__$Float32Array_Float32Array_$Impl_$.get = function(this1,index) {
	return this1[index];
};
kha_arrays__$Float32Array_Float32Array_$Impl_$.data = function(this1) {
	return this1;
};
kha_arrays__$Float32Array_Float32Array_$Impl_$.subarray = function(this1,start,end) {
	return this1.subarray(start,end);
};
var kha_arrays__$Int16Array_Int16Array_$Impl_$ = {};
$hxClasses["kha.arrays._Int16Array.Int16Array_Impl_"] = kha_arrays__$Int16Array_Int16Array_$Impl_$;
kha_arrays__$Int16Array_Int16Array_$Impl_$.__name__ = "kha.arrays._Int16Array.Int16Array_Impl_";
kha_arrays__$Int16Array_Int16Array_$Impl_$.__properties__ = {get_length:"get_length"};
kha_arrays__$Int16Array_Int16Array_$Impl_$._new = function(elements) {
	var this1 = new Int16Array(elements);
	return this1;
};
kha_arrays__$Int16Array_Int16Array_$Impl_$.get_length = function(this1) {
	return this1.length;
};
kha_arrays__$Int16Array_Int16Array_$Impl_$.set = function(this1,index,value) {
	return this1[index] = value;
};
kha_arrays__$Int16Array_Int16Array_$Impl_$.get = function(this1,index) {
	return this1[index];
};
kha_arrays__$Int16Array_Int16Array_$Impl_$.data = function(this1) {
	return this1;
};
kha_arrays__$Int16Array_Int16Array_$Impl_$.arrayRead = function(this1,index) {
	return this1[index];
};
kha_arrays__$Int16Array_Int16Array_$Impl_$.arrayWrite = function(this1,index,value) {
	return this1[index] = value;
};
kha_arrays__$Int16Array_Int16Array_$Impl_$.subarray = function(this1,start,end) {
	return this1.subarray(start,end);
};
var kha_arrays__$Uint32Array_Uint32Array_$Impl_$ = {};
$hxClasses["kha.arrays._Uint32Array.Uint32Array_Impl_"] = kha_arrays__$Uint32Array_Uint32Array_$Impl_$;
kha_arrays__$Uint32Array_Uint32Array_$Impl_$.__name__ = "kha.arrays._Uint32Array.Uint32Array_Impl_";
kha_arrays__$Uint32Array_Uint32Array_$Impl_$.__properties__ = {get_length:"get_length"};
kha_arrays__$Uint32Array_Uint32Array_$Impl_$._new = function(elements) {
	var this1 = new Uint32Array(elements);
	return this1;
};
kha_arrays__$Uint32Array_Uint32Array_$Impl_$.get_length = function(this1) {
	return this1.length;
};
kha_arrays__$Uint32Array_Uint32Array_$Impl_$.set = function(this1,index,value) {
	return this1[index] = value;
};
kha_arrays__$Uint32Array_Uint32Array_$Impl_$.get = function(this1,index) {
	return this1[index];
};
kha_arrays__$Uint32Array_Uint32Array_$Impl_$.data = function(this1) {
	return this1;
};
kha_arrays__$Uint32Array_Uint32Array_$Impl_$.arrayRead = function(this1,index) {
	return this1[index];
};
kha_arrays__$Uint32Array_Uint32Array_$Impl_$.arrayWrite = function(this1,index,value) {
	return this1[index] = value;
};
kha_arrays__$Uint32Array_Uint32Array_$Impl_$.subarray = function(this1,start,end) {
	return this1.subarray(start,end);
};
var kha_audio1_AudioChannel = function() { };
$hxClasses["kha.audio1.AudioChannel"] = kha_audio1_AudioChannel;
kha_audio1_AudioChannel.__name__ = "kha.audio1.AudioChannel";
kha_audio1_AudioChannel.prototype = {
	play: null
	,pause: null
	,stop: null
	,length: null
	,get_length: null
	,get_position: null
	,set_position: null
	,get_volume: null
	,set_volume: null
	,finished: null
	,get_finished: null
	,__class__: kha_audio1_AudioChannel
	,__properties__: {get_finished:"get_finished",set_volume:"set_volume",get_volume:"get_volume",set_position:"set_position",get_position:"get_position",get_length:"get_length"}
};
var kha_internal_IntBox = function(value) {
	this.value = value;
};
$hxClasses["kha.internal.IntBox"] = kha_internal_IntBox;
kha_internal_IntBox.__name__ = "kha.internal.IntBox";
kha_internal_IntBox.prototype = {
	value: null
	,__class__: kha_internal_IntBox
};
var kha_audio2_Audio = function() { };
$hxClasses["kha.audio2.Audio"] = kha_audio2_Audio;
kha_audio2_Audio.__name__ = "kha.audio2.Audio";
kha_audio2_Audio.initContext = function() {
	try {
		kha_audio2_Audio._context = new AudioContext();
		return;
	} catch( e ) {
		haxe_CallStack.lastException = e;
		var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
	}
	try {
		this._context = new webkitAudioContext();
		return;
	} catch( e2 ) {
		haxe_CallStack.lastException = e2;
		var e3 = ((e2) instanceof js__$Boot_HaxeError) ? e2.val : e2;
	}
};
kha_audio2_Audio._init = function() {
	kha_audio2_Audio.initContext();
	if(kha_audio2_Audio._context == null) {
		return false;
	}
	kha_audio2_Audio.samplesPerSecond = Math.round(kha_audio2_Audio._context.sampleRate);
	var bufferSize = 2048;
	kha_audio2_Audio.buffer = new kha_audio2_Buffer(bufferSize * 4,2,kha_audio2_Audio._context.sampleRate | 0);
	kha_audio2_Audio.processingNode = kha_audio2_Audio._context.createScriptProcessor(bufferSize,0,2);
	kha_audio2_Audio.processingNode.onaudioprocess = function(e) {
		var output1 = e.outputBuffer.getChannelData(0);
		var output2 = e.outputBuffer.getChannelData(1);
		if(kha_audio2_Audio.audioCallback != null) {
			kha_audio2_Audio.intBox.value = e.outputBuffer.length * 2;
			kha_audio2_Audio.audioCallback(kha_audio2_Audio.intBox,kha_audio2_Audio.buffer);
			var _g = 0;
			var _g1 = e.outputBuffer.length;
			while(_g < _g1) {
				var i = _g++;
				output1[i] = kha_audio2_Audio.buffer.data[kha_audio2_Audio.buffer.readLocation];
				kha_audio2_Audio.buffer.readLocation += 1;
				output2[i] = kha_audio2_Audio.buffer.data[kha_audio2_Audio.buffer.readLocation];
				kha_audio2_Audio.buffer.readLocation += 1;
				if(kha_audio2_Audio.buffer.readLocation >= kha_audio2_Audio.buffer.size) {
					kha_audio2_Audio.buffer.readLocation = 0;
				}
			}
		} else {
			var _g2 = 0;
			var _g11 = e.outputBuffer.length;
			while(_g2 < _g11) {
				var i1 = _g2++;
				output1[i1] = 0;
				output2[i1] = 0;
			}
		}
	};
	kha_audio2_Audio.processingNode.connect(kha_audio2_Audio._context.destination);
	return true;
};
kha_audio2_Audio.wakeChannels = function() {
	kha_SystemImpl.mobileAudioPlaying = true;
	var _g = 0;
	var _g1 = kha_audio2_Audio.virtualChannels;
	while(_g < _g1.length) {
		var channel = _g1[_g];
		++_g;
		channel.wake();
	}
};
kha_audio2_Audio.stream = function(sound,loop) {
	if(loop == null) {
		loop = false;
	}
	var element = window.document.createElement("audio");
	var blob = new Blob([sound.compressedData.b.bufferValue],{ type : "audio/ogg"});
	element.src = URL.createObjectURL(blob);
	element.loop = loop;
	var channel = new kha_js_AEAudioChannel(element,loop);
	if(kha_SystemImpl.mobileAudioPlaying) {
		channel.play();
		return channel;
	} else {
		var virtualChannel = new kha_audio2_VirtualStreamChannel(channel,loop);
		kha_audio2_Audio.virtualChannels.push(virtualChannel);
		return virtualChannel;
	}
};
var kha_audio2_Audio1 = function() { };
$hxClasses["kha.audio2.Audio1"] = kha_audio2_Audio1;
kha_audio2_Audio1.__name__ = "kha.audio2.Audio1";
kha_audio2_Audio1._init = function() {
	var this1 = new Array(32);
	kha_audio2_Audio1.soundChannels = this1;
	var this2 = new Array(32);
	kha_audio2_Audio1.streamChannels = this2;
	var this3 = new Array(32);
	kha_audio2_Audio1.internalSoundChannels = this3;
	var this4 = new Array(32);
	kha_audio2_Audio1.internalStreamChannels = this4;
	var this5 = new Float32Array(512);
	kha_audio2_Audio1.sampleCache1 = this5;
	var this6 = new Float32Array(512);
	kha_audio2_Audio1.sampleCache2 = this6;
	kha_audio2_Audio1.lastAllocationCount = 0;
	kha_audio2_Audio.audioCallback = kha_audio2_Audio1.mix;
};
kha_audio2_Audio1.max = function(a,b) {
	if(a > b) {
		return a;
	} else {
		return b;
	}
};
kha_audio2_Audio1.min = function(a,b) {
	if(a < b) {
		return a;
	} else {
		return b;
	}
};
kha_audio2_Audio1.mix = function(samplesBox,buffer) {
	var samples = samplesBox.value;
	if(kha_audio2_Audio1.sampleCache1.length < samples) {
		if(kha_audio2_Audio.disableGcInteractions) {
			haxe_Log.trace("Unexpected allocation request in audio thread.",{ fileName : "kha/audio2/Audio1.hx", lineNumber : 45, className : "kha.audio2.Audio1", methodName : "mix"});
			var _g = 0;
			var _g1 = samples;
			while(_g < _g1) {
				var i = _g++;
				buffer.data[buffer.writeLocation] = 0;
				buffer.writeLocation += 1;
				if(buffer.writeLocation >= buffer.size) {
					buffer.writeLocation = 0;
				}
			}
			kha_audio2_Audio1.lastAllocationCount = 0;
			kha_audio2_Audio.disableGcInteractions = false;
			return;
		}
		var this1 = new Float32Array(samples * 2);
		kha_audio2_Audio1.sampleCache1 = this1;
		var this2 = new Float32Array(samples * 2);
		kha_audio2_Audio1.sampleCache2 = this2;
		kha_audio2_Audio1.lastAllocationCount = 0;
	} else if(kha_audio2_Audio1.lastAllocationCount > 100) {
		kha_audio2_Audio.disableGcInteractions = true;
	} else {
		kha_audio2_Audio1.lastAllocationCount += 1;
	}
	var _g2 = 0;
	var _g11 = samples;
	while(_g2 < _g11) {
		var i1 = _g2++;
		kha_audio2_Audio1.sampleCache2[i1] = 0;
	}
	var _g21 = 0;
	while(_g21 < 32) {
		var i2 = _g21++;
		kha_audio2_Audio1.internalSoundChannels[i2] = kha_audio2_Audio1.soundChannels[i2];
	}
	var _g3 = 0;
	while(_g3 < 32) {
		var i3 = _g3++;
		kha_audio2_Audio1.internalStreamChannels[i3] = kha_audio2_Audio1.streamChannels[i3];
	}
	var _g4 = 0;
	var _g5 = kha_audio2_Audio1.internalSoundChannels;
	while(_g4 < _g5.length) {
		var channel = _g5[_g4];
		++_g4;
		if(channel == null || channel.get_finished()) {
			continue;
		}
		channel.nextSamples(kha_audio2_Audio1.sampleCache1,samples,buffer.samplesPerSecond);
		var _g51 = 0;
		var _g6 = samples;
		while(_g51 < _g6) {
			var i4 = _g51++;
			kha_audio2_Audio1.sampleCache2[i4] += kha_audio2_Audio1.sampleCache1[i4] * channel.get_volume();
		}
	}
	var _g61 = 0;
	var _g7 = kha_audio2_Audio1.internalStreamChannels;
	while(_g61 < _g7.length) {
		var channel1 = _g7[_g61];
		++_g61;
		if(channel1 == null || channel1.get_finished()) {
			continue;
		}
		channel1.nextSamples(kha_audio2_Audio1.sampleCache1,samples,buffer.samplesPerSecond);
		var _g71 = 0;
		var _g8 = samples;
		while(_g71 < _g8) {
			var i5 = _g71++;
			kha_audio2_Audio1.sampleCache2[i5] += kha_audio2_Audio1.sampleCache1[i5] * channel1.get_volume();
		}
	}
	var _g81 = 0;
	var _g9 = samples;
	while(_g81 < _g9) {
		var i6 = _g81++;
		var a = kha_audio2_Audio1.sampleCache2[i6];
		var a1 = a < 1.0 ? a : 1.0;
		buffer.data[buffer.writeLocation] = a1 > -1.0 ? a1 : -1.0;
		buffer.writeLocation += 1;
		if(buffer.writeLocation >= buffer.size) {
			buffer.writeLocation = 0;
		}
	}
};
kha_audio2_Audio1.play = function(sound,loop) {
	if(loop == null) {
		loop = false;
	}
	var channel = null;
	if(kha_audio2_Audio.samplesPerSecond != sound.sampleRate) {
		channel = new kha_audio2_ResamplingAudioChannel(loop,sound.sampleRate);
	} else {
		channel = new kha_audio2_AudioChannel(loop);
	}
	channel.data = sound.uncompressedData;
	var foundChannel = false;
	var _g = 0;
	while(_g < 32) {
		var i = _g++;
		if(kha_audio2_Audio1.soundChannels[i] == null || kha_audio2_Audio1.soundChannels[i].get_finished()) {
			kha_audio2_Audio1.soundChannels[i] = channel;
			foundChannel = true;
			break;
		}
	}
	if(foundChannel) {
		return channel;
	} else {
		return null;
	}
};
kha_audio2_Audio1._playAgain = function(channel) {
	var _g = 0;
	while(_g < 32) {
		var i = _g++;
		if(kha_audio2_Audio1.soundChannels[i] == channel) {
			kha_audio2_Audio1.soundChannels[i] = null;
		}
	}
	var _g1 = 0;
	while(_g1 < 32) {
		var i1 = _g1++;
		if(kha_audio2_Audio1.soundChannels[i1] == null || kha_audio2_Audio1.soundChannels[i1].get_finished() || kha_audio2_Audio1.soundChannels[i1] == channel) {
			kha_audio2_Audio1.soundChannels[i1] = channel;
			break;
		}
	}
};
kha_audio2_Audio1.stream = function(sound,loop) {
	if(loop == null) {
		loop = false;
	}
	var hardwareChannel = kha_audio2_Audio.stream(sound,loop);
	if(hardwareChannel != null) {
		return hardwareChannel;
	}
	var channel = new kha_audio2_StreamChannel(sound.compressedData,loop);
	var foundChannel = false;
	var _g = 0;
	while(_g < 32) {
		var i = _g++;
		if(kha_audio2_Audio1.streamChannels[i] == null || kha_audio2_Audio1.streamChannels[i].get_finished()) {
			kha_audio2_Audio1.streamChannels[i] = channel;
			foundChannel = true;
			break;
		}
	}
	if(foundChannel) {
		return channel;
	} else {
		return null;
	}
};
var kha_audio2_AudioChannel = function(looping) {
	this.looping = false;
	this.stopped = false;
	this.paused = false;
	this.myPosition = 0;
	this.myVolume = 1;
	this.data = null;
	this.looping = looping;
};
$hxClasses["kha.audio2.AudioChannel"] = kha_audio2_AudioChannel;
kha_audio2_AudioChannel.__name__ = "kha.audio2.AudioChannel";
kha_audio2_AudioChannel.__interfaces__ = [kha_audio1_AudioChannel];
kha_audio2_AudioChannel.max = function(a,b) {
	if(a > b) {
		return a;
	} else {
		return b;
	}
};
kha_audio2_AudioChannel.min = function(a,b) {
	if(a < b) {
		return a;
	} else {
		return b;
	}
};
kha_audio2_AudioChannel.prototype = {
	data: null
	,myVolume: null
	,myPosition: null
	,paused: null
	,stopped: null
	,looping: null
	,nextSamples: function(requestedSamples,requestedLength,sampleRate) {
		if(this.paused || this.stopped) {
			var _g = 0;
			var _g1 = requestedLength;
			while(_g < _g1) {
				var i = _g++;
				requestedSamples[i] = 0;
			}
			return;
		}
		var requestedSamplesIndex = 0;
		while(requestedSamplesIndex < requestedLength) {
			var _g2 = 0;
			var a = this.data.length - this.myPosition;
			var b = requestedLength - requestedSamplesIndex;
			var _g11 = a < b ? a : b;
			while(_g2 < _g11) {
				var i1 = _g2++;
				requestedSamples[requestedSamplesIndex++] = this.data[this.myPosition++];
			}
			if(this.myPosition >= this.data.length) {
				this.myPosition = 0;
				if(!this.looping) {
					this.stopped = true;
					break;
				}
			}
		}
		while(requestedSamplesIndex < requestedLength) requestedSamples[requestedSamplesIndex++] = 0;
	}
	,play: function() {
		this.paused = false;
		this.stopped = false;
		kha_audio2_Audio1._playAgain(this);
	}
	,pause: function() {
		this.paused = true;
	}
	,stop: function() {
		this.myPosition = 0;
		this.stopped = true;
	}
	,length: null
	,get_length: function() {
		return this.data.length / kha_audio2_Audio.samplesPerSecond / 2;
	}
	,get_position: function() {
		return this.myPosition / kha_audio2_Audio.samplesPerSecond / 2;
	}
	,set_position: function(value) {
		this.myPosition = Math.round(value * kha_audio2_Audio.samplesPerSecond * 2);
		var a = this.myPosition;
		var b = this.data.length;
		var a1 = a < b ? a : b;
		this.myPosition = a1 > 0 ? a1 : 0;
		return value;
	}
	,get_volume: function() {
		return this.myVolume;
	}
	,set_volume: function(value) {
		return this.myVolume = value;
	}
	,finished: null
	,get_finished: function() {
		return this.stopped;
	}
	,__class__: kha_audio2_AudioChannel
	,__properties__: {get_finished:"get_finished",set_volume:"set_volume",get_volume:"get_volume",set_position:"set_position",get_position:"get_position",get_length:"get_length"}
};
var kha_audio2_Buffer = function(size,channels,samplesPerSecond) {
	this.size = size;
	var this1 = new Float32Array(size);
	this.data = this1;
	this.channels = channels;
	this.samplesPerSecond = samplesPerSecond;
	this.readLocation = 0;
	this.writeLocation = 0;
};
$hxClasses["kha.audio2.Buffer"] = kha_audio2_Buffer;
kha_audio2_Buffer.__name__ = "kha.audio2.Buffer";
kha_audio2_Buffer.prototype = {
	channels: null
	,samplesPerSecond: null
	,data: null
	,size: null
	,readLocation: null
	,writeLocation: null
	,__class__: kha_audio2_Buffer
};
var kha_audio2_ResamplingAudioChannel = function(looping,sampleRate) {
	kha_audio2_AudioChannel.call(this,looping);
	this.sampleRate = sampleRate;
};
$hxClasses["kha.audio2.ResamplingAudioChannel"] = kha_audio2_ResamplingAudioChannel;
kha_audio2_ResamplingAudioChannel.__name__ = "kha.audio2.ResamplingAudioChannel";
kha_audio2_ResamplingAudioChannel.max = function(a,b) {
	if(a > b) {
		return a;
	} else {
		return b;
	}
};
kha_audio2_ResamplingAudioChannel.min = function(a,b) {
	if(a < b) {
		return a;
	} else {
		return b;
	}
};
kha_audio2_ResamplingAudioChannel.__super__ = kha_audio2_AudioChannel;
kha_audio2_ResamplingAudioChannel.prototype = $extend(kha_audio2_AudioChannel.prototype,{
	sampleRate: null
	,nextSamples: function(requestedSamples,requestedLength,sampleRate) {
		if(this.paused || this.stopped) {
			var _g = 0;
			var _g1 = requestedLength;
			while(_g < _g1) {
				var i = _g++;
				requestedSamples[i] = 0;
			}
			return;
		}
		var requestedSamplesIndex = 0;
		while(requestedSamplesIndex < requestedLength) {
			var _g2 = 0;
			var value = Math.ceil(this.data.length * (sampleRate / this.sampleRate));
			var a = (value % 2 == 0 ? value : value + 1) - this.myPosition;
			var b = requestedLength - requestedSamplesIndex;
			var _g11 = a < b ? a : b;
			while(_g2 < _g11) {
				var i1 = _g2++;
				var index = requestedSamplesIndex++;
				var position = this.myPosition++;
				var even = position % 2 == 0;
				var factor = this.sampleRate / sampleRate;
				var value1;
				if(even) {
					position = position / 2 | 0;
					var pos = factor * position;
					var pos1 = Math.floor(pos);
					var pos2 = Math.floor(pos + 1);
					pos1 *= 2;
					pos2 *= 2;
					var minimum = 0;
					var maximum = this.data.length - 1;
					if(maximum % 2 == 0) {
						maximum = maximum;
					} else {
						--maximum;
					}
					var a1 = pos1 < minimum || pos1 > maximum ? 0 : this.data[pos1];
					var b1 = pos2 < minimum || pos2 > maximum ? 0 : this.data[pos2];
					var t = pos - Math.floor(pos);
					value1 = (1 - t) * a1 + t * b1;
				} else {
					position = position / 2 | 0;
					var pos3 = factor * position;
					var pos11 = Math.floor(pos3);
					var pos21 = Math.floor(pos3 + 1);
					pos11 = pos11 * 2 + 1;
					pos21 = pos21 * 2 + 1;
					var minimum1 = 1;
					var maximum1 = this.data.length - 1;
					if(maximum1 % 2 != 0) {
						maximum1 = maximum1;
					} else {
						--maximum1;
					}
					var a2 = pos11 < minimum1 || pos11 > maximum1 ? 0 : this.data[pos11];
					var b2 = pos21 < minimum1 || pos21 > maximum1 ? 0 : this.data[pos21];
					var t1 = pos3 - Math.floor(pos3);
					value1 = (1 - t1) * a2 + t1 * b2;
				}
				requestedSamples[index] = value1;
			}
			var value2 = Math.ceil(this.data.length * (sampleRate / this.sampleRate));
			if(this.myPosition >= (value2 % 2 == 0 ? value2 : value2 + 1)) {
				this.myPosition = 0;
				if(!this.looping) {
					this.stopped = true;
					break;
				}
			}
		}
		while(requestedSamplesIndex < requestedLength) requestedSamples[requestedSamplesIndex++] = 0;
	}
	,sample: function(position,sampleRate) {
		var even = position % 2 == 0;
		var factor = this.sampleRate / sampleRate;
		if(even) {
			position = position / 2 | 0;
			var pos = factor * position;
			var pos1 = Math.floor(pos);
			var pos2 = Math.floor(pos + 1);
			pos1 *= 2;
			pos2 *= 2;
			var minimum = 0;
			var maximum = this.data.length - 1;
			if(maximum % 2 == 0) {
				maximum = maximum;
			} else {
				--maximum;
			}
			var a = pos1 < minimum || pos1 > maximum ? 0 : this.data[pos1];
			var b = pos2 < minimum || pos2 > maximum ? 0 : this.data[pos2];
			var t = pos - Math.floor(pos);
			return (1 - t) * a + t * b;
		} else {
			position = position / 2 | 0;
			var pos3 = factor * position;
			var pos11 = Math.floor(pos3);
			var pos21 = Math.floor(pos3 + 1);
			pos11 = pos11 * 2 + 1;
			pos21 = pos21 * 2 + 1;
			var minimum1 = 1;
			var maximum1 = this.data.length - 1;
			if(maximum1 % 2 != 0) {
				maximum1 = maximum1;
			} else {
				--maximum1;
			}
			var a1 = pos11 < minimum1 || pos11 > maximum1 ? 0 : this.data[pos11];
			var b1 = pos21 < minimum1 || pos21 > maximum1 ? 0 : this.data[pos21];
			var t1 = pos3 - Math.floor(pos3);
			return (1 - t1) * a1 + t1 * b1;
		}
	}
	,lerp: function(v0,v1,t) {
		return (1 - t) * v0 + t * v1;
	}
	,sampleLength: function(sampleRate) {
		var value = Math.ceil(this.data.length * (sampleRate / this.sampleRate));
		if(value % 2 == 0) {
			return value;
		} else {
			return value + 1;
		}
	}
	,play: function() {
		this.paused = false;
		this.stopped = false;
		kha_audio2_Audio1._playAgain(this);
	}
	,pause: function() {
		this.paused = true;
	}
	,stop: function() {
		this.myPosition = 0;
		this.stopped = true;
	}
	,get_length: function() {
		return this.data.length / this.sampleRate / 2;
	}
	,get_position: function() {
		return this.myPosition / this.sampleRate / 2;
	}
	,set_position: function(value) {
		this.myPosition = Math.round(value * this.sampleRate * 2);
		var a = this.myPosition;
		var value1 = Math.ceil(this.data.length * (kha_audio2_Audio.samplesPerSecond / this.sampleRate));
		var b = value1 % 2 == 0 ? value1 : value1 + 1;
		var a1 = a < b ? a : b;
		this.myPosition = a1 > 0 ? a1 : 0;
		return value;
	}
	,get_volume: function() {
		return this.myVolume;
	}
	,set_volume: function(value) {
		return this.myVolume = value;
	}
	,get_finished: function() {
		return this.stopped;
	}
	,__class__: kha_audio2_ResamplingAudioChannel
});
var kha_audio2_StreamChannel = function(data,loop) {
	this.paused = false;
	this.atend = false;
	this.myVolume = 1;
	this.loop = loop;
	this.reader = kha_audio2_ogg_vorbis_Reader.openFromBytes(data);
};
$hxClasses["kha.audio2.StreamChannel"] = kha_audio2_StreamChannel;
kha_audio2_StreamChannel.__name__ = "kha.audio2.StreamChannel";
kha_audio2_StreamChannel.__interfaces__ = [kha_audio1_AudioChannel];
kha_audio2_StreamChannel.prototype = {
	reader: null
	,atend: null
	,loop: null
	,myVolume: null
	,paused: null
	,nextSamples: function(samples,length,sampleRate) {
		if(this.paused) {
			var _g = 0;
			var _g1 = length;
			while(_g < _g1) {
				var i = _g++;
				samples[i] = 0;
			}
			return;
		}
		var count = this.reader.read(samples,length / 2 | 0,2,sampleRate,true) * 2;
		if(count < length) {
			if(this.loop) {
				this.reader.set_currentMillisecond(0);
			} else {
				this.atend = true;
			}
			var _g2 = count;
			var _g11 = length;
			while(_g2 < _g11) {
				var i1 = _g2++;
				samples[i1] = 0;
			}
		}
	}
	,play: function() {
		this.paused = false;
	}
	,pause: function() {
		this.paused = true;
	}
	,stop: function() {
		this.atend = true;
	}
	,length: null
	,get_length: function() {
		return this.reader.get_totalMillisecond() / 1000.0;
	}
	,get_position: function() {
		return this.reader.get_currentMillisecond() / 1000.0;
	}
	,set_position: function(value) {
		return value;
	}
	,get_volume: function() {
		return this.myVolume;
	}
	,set_volume: function(value) {
		return this.myVolume = value;
	}
	,finished: null
	,get_finished: function() {
		return this.atend;
	}
	,__class__: kha_audio2_StreamChannel
	,__properties__: {get_finished:"get_finished",set_volume:"set_volume",get_volume:"get_volume",set_position:"set_position",get_position:"get_position",get_length:"get_length"}
};
var kha_audio2_PlayMode = $hxEnums["kha.audio2.PlayMode"] = { __ename__ : "kha.audio2.PlayMode", __constructs__ : ["Stopped","Paused","Playing"]
	,Stopped: {_hx_index:0,__enum__:"kha.audio2.PlayMode",toString:$estr}
	,Paused: {_hx_index:1,__enum__:"kha.audio2.PlayMode",toString:$estr}
	,Playing: {_hx_index:2,__enum__:"kha.audio2.PlayMode",toString:$estr}
};
var kha_audio2_VirtualStreamChannel = function(aeChannel,looping) {
	this.mode = kha_audio2_PlayMode.Playing;
	this.aeChannel = aeChannel;
	this.looping = looping;
	this.lastTickTime = kha_Scheduler.realTime();
	this.lastPosition = 0;
};
$hxClasses["kha.audio2.VirtualStreamChannel"] = kha_audio2_VirtualStreamChannel;
kha_audio2_VirtualStreamChannel.__name__ = "kha.audio2.VirtualStreamChannel";
kha_audio2_VirtualStreamChannel.__interfaces__ = [kha_audio1_AudioChannel];
kha_audio2_VirtualStreamChannel.prototype = {
	aeChannel: null
	,mode: null
	,lastTickTime: null
	,lastPosition: null
	,looping: null
	,wake: function() {
		this.updatePosition();
		this.aeChannel.set_position(this.lastPosition);
		this.aeChannel.play();
	}
	,updatePosition: function() {
		var now = kha_Scheduler.realTime();
		switch(this.mode._hx_index) {
		case 0:
			this.lastPosition = 0;
			break;
		case 1:
			break;
		case 2:
			this.lastPosition += now - this.lastTickTime;
			while(this.lastPosition > this.get_length()) this.lastPosition -= this.get_length();
			break;
		}
		this.lastTickTime = now;
	}
	,play: function() {
		if(kha_SystemImpl.mobileAudioPlaying) {
			this.aeChannel.play();
		} else {
			this.updatePosition();
			this.mode = kha_audio2_PlayMode.Playing;
		}
	}
	,pause: function() {
		if(kha_SystemImpl.mobileAudioPlaying) {
			this.aeChannel.pause();
		} else {
			this.updatePosition();
			this.mode = kha_audio2_PlayMode.Paused;
		}
	}
	,stop: function() {
		if(kha_SystemImpl.mobileAudioPlaying) {
			this.aeChannel.stop();
		} else {
			this.updatePosition();
			this.mode = kha_audio2_PlayMode.Stopped;
		}
	}
	,length: null
	,get_length: function() {
		return this.aeChannel.get_length();
	}
	,get_position: function() {
		if(kha_SystemImpl.mobileAudioPlaying) {
			return this.aeChannel.get_position();
		} else {
			this.updatePosition();
			return this.lastPosition;
		}
	}
	,set_position: function(value) {
		if(kha_SystemImpl.mobileAudioPlaying) {
			return this.aeChannel.set_position(value);
		} else {
			this.updatePosition();
			return this.lastPosition = value;
		}
	}
	,get_volume: function() {
		return this.aeChannel.get_volume();
	}
	,set_volume: function(value) {
		return this.aeChannel.set_volume(value);
	}
	,finished: null
	,get_finished: function() {
		if(kha_SystemImpl.mobileAudioPlaying) {
			return this.aeChannel.get_finished();
		} else if(this.mode != kha_audio2_PlayMode.Stopped) {
			if(!this.looping) {
				return this.get_position() >= this.get_length();
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,__class__: kha_audio2_VirtualStreamChannel
	,__properties__: {get_finished:"get_finished",set_volume:"set_volume",get_volume:"get_volume",set_position:"set_position",get_position:"get_position",get_length:"get_length"}
};
var kha_audio2_ogg_tools_Crc32 = function() { };
$hxClasses["kha.audio2.ogg.tools.Crc32"] = kha_audio2_ogg_tools_Crc32;
kha_audio2_ogg_tools_Crc32.__name__ = "kha.audio2.ogg.tools.Crc32";
kha_audio2_ogg_tools_Crc32.init = function() {
	if(kha_audio2_ogg_tools_Crc32.table != null) {
		return;
	}
	var this1 = new Array(256);
	kha_audio2_ogg_tools_Crc32.table = this1;
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		var s = i << 24;
		s = s << 1 ^ (_$UInt_UInt_$Impl_$.gte(s,1 << 31) ? 79764919 : 0);
		s = s << 1 ^ (_$UInt_UInt_$Impl_$.gte(s,1 << 31) ? 79764919 : 0);
		s = s << 1 ^ (_$UInt_UInt_$Impl_$.gte(s,1 << 31) ? 79764919 : 0);
		s = s << 1 ^ (_$UInt_UInt_$Impl_$.gte(s,1 << 31) ? 79764919 : 0);
		s = s << 1 ^ (_$UInt_UInt_$Impl_$.gte(s,1 << 31) ? 79764919 : 0);
		s = s << 1 ^ (_$UInt_UInt_$Impl_$.gte(s,1 << 31) ? 79764919 : 0);
		s = s << 1 ^ (_$UInt_UInt_$Impl_$.gte(s,1 << 31) ? 79764919 : 0);
		s = s << 1 ^ (_$UInt_UInt_$Impl_$.gte(s,1 << 31) ? 79764919 : 0);
		kha_audio2_ogg_tools_Crc32.table[i] = s;
	}
};
kha_audio2_ogg_tools_Crc32.update = function(crc,byte) {
	return crc << 8 ^ kha_audio2_ogg_tools_Crc32.table[byte ^ crc >>> 24];
};
var kha_audio2_ogg_tools_MathTools = function() { };
$hxClasses["kha.audio2.ogg.tools.MathTools"] = kha_audio2_ogg_tools_MathTools;
kha_audio2_ogg_tools_MathTools.__name__ = "kha.audio2.ogg.tools.MathTools";
kha_audio2_ogg_tools_MathTools.ilog = function(n) {
	var log2_4 = [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];
	if(n < 16384) {
		if(n < 16) {
			return log2_4[n];
		} else if(n < 512) {
			return 5 + log2_4[n >> 5];
		} else {
			return 10 + log2_4[n >> 10];
		}
	} else if(n < 16777216) {
		if(n < 524288) {
			return 15 + log2_4[n >> 15];
		} else {
			return 20 + log2_4[n >> 20];
		}
	} else if(n < 536870912) {
		return 25 + log2_4[n >> 25];
	} else if(n < -2147483648) {
		return 30 + log2_4[n >> 30];
	} else {
		return 0;
	}
};
var kha_audio2_ogg_tools_Mdct = function() { };
$hxClasses["kha.audio2.ogg.tools.Mdct"] = kha_audio2_ogg_tools_Mdct;
kha_audio2_ogg_tools_Mdct.__name__ = "kha.audio2.ogg.tools.Mdct";
kha_audio2_ogg_tools_Mdct.inverseTransform = function(buffer,n,a,b,c,bitReverse) {
	var n2 = n >> 1;
	var n4 = n >> 2;
	var n8 = n >> 3;
	var this1 = new Array(n2);
	var buf2 = this1;
	var dOffset = n2 - 2;
	var aaOffset = 0;
	var eOffset = 0;
	var eStopOffset = n2;
	while(eOffset != eStopOffset) {
		buf2[dOffset + 1] = buffer[eOffset] * a[aaOffset] - buffer[eOffset + 2] * a[aaOffset + 1];
		buf2[dOffset] = buffer[eOffset] * a[aaOffset + 1] + buffer[eOffset + 2] * a[aaOffset];
		dOffset -= 2;
		aaOffset += 2;
		eOffset += 4;
	}
	eOffset = n2 - 3;
	while(dOffset >= 0) {
		buf2[dOffset + 1] = -buffer[eOffset + 2] * a[aaOffset] - -buffer[eOffset] * a[aaOffset + 1];
		buf2[dOffset] = -buffer[eOffset + 2] * a[aaOffset + 1] + -buffer[eOffset] * a[aaOffset];
		dOffset -= 2;
		aaOffset += 2;
		eOffset -= 4;
	}
	var u = buffer;
	var v = buf2;
	var aaOffset1 = n2 - 8;
	var eOffset0 = n4;
	var eOffset1 = 0;
	var dOffset0 = n4;
	var dOffset1 = 0;
	while(aaOffset1 >= 0) {
		var v41_21 = v[eOffset0 + 1] - v[eOffset1 + 1];
		var v40_20 = v[eOffset0] - v[eOffset1];
		u[dOffset0 + 1] = v[eOffset0 + 1] + v[eOffset1 + 1];
		u[dOffset0] = v[eOffset0] + v[eOffset1];
		u[dOffset1 + 1] = v41_21 * a[aaOffset1 + 4] - v40_20 * a[aaOffset1 + 5];
		u[dOffset1] = v40_20 * a[aaOffset1 + 4] + v41_21 * a[aaOffset1 + 5];
		v41_21 = v[eOffset0 + 3] - v[eOffset1 + 3];
		v40_20 = v[eOffset0 + 2] - v[eOffset1 + 2];
		u[dOffset0 + 3] = v[eOffset0 + 3] + v[eOffset1 + 3];
		u[dOffset0 + 2] = v[eOffset0 + 2] + v[eOffset1 + 2];
		u[dOffset1 + 3] = v41_21 * a[aaOffset1] - v40_20 * a[aaOffset1 + 1];
		u[dOffset1 + 2] = v40_20 * a[aaOffset1] + v41_21 * a[aaOffset1 + 1];
		aaOffset1 -= 8;
		dOffset0 += 4;
		dOffset1 += 4;
		eOffset0 += 4;
		eOffset1 += 4;
	}
	var log2_4 = [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];
	var ld = (n < 16384 ? n < 16 ? log2_4[n] : n < 512 ? 5 + log2_4[n >> 5] : 10 + log2_4[n >> 10] : n < 16777216 ? n < 524288 ? 15 + log2_4[n >> 15] : 20 + log2_4[n >> 20] : n < 536870912 ? 25 + log2_4[n >> 25] : n < -2147483648 ? 30 + log2_4[n >> 30] : 0) - 1;
	var i_off = n2 - 1 - n4 * 0;
	var eeOffset0 = i_off;
	var eeOffset2 = i_off + -(n >> 3);
	var aOffset = 0;
	var i = (n >> 4 >> 2) + 1;
	while(--i > 0) {
		var k00_20 = u[eeOffset0] - u[eeOffset2];
		var k01_21 = u[eeOffset0 + (-1)] - u[eeOffset2 + (-1)];
		var _g = eeOffset0;
		var _g1 = u;
		_g1[_g] = _g1[_g] + u[eeOffset2];
		var _g2 = eeOffset0 + (-1);
		var _g11 = u;
		_g11[_g2] = _g11[_g2] + u[eeOffset2 + (-1)];
		u[eeOffset2] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		u[eeOffset2 + (-1)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += 8;
		k00_20 = u[eeOffset0 + (-2)] - u[eeOffset2 + (-2)];
		k01_21 = u[eeOffset0 + (-3)] - u[eeOffset2 + (-3)];
		var _g3 = eeOffset0 + (-2);
		var _g12 = u;
		_g12[_g3] = _g12[_g3] + u[eeOffset2 + (-2)];
		var _g4 = eeOffset0 + (-3);
		var _g13 = u;
		_g13[_g4] = _g13[_g4] + u[eeOffset2 + (-3)];
		u[eeOffset2 + (-2)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		u[eeOffset2 + (-3)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += 8;
		k00_20 = u[eeOffset0 + (-4)] - u[eeOffset2 + (-4)];
		k01_21 = u[eeOffset0 + (-5)] - u[eeOffset2 + (-5)];
		var _g5 = eeOffset0 + (-4);
		var _g14 = u;
		_g14[_g5] = _g14[_g5] + u[eeOffset2 + (-4)];
		var _g6 = eeOffset0 + (-5);
		var _g15 = u;
		_g15[_g6] = _g15[_g6] + u[eeOffset2 + (-5)];
		u[eeOffset2 + (-4)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		u[eeOffset2 + (-5)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += 8;
		k00_20 = u[eeOffset0 + (-6)] - u[eeOffset2 + (-6)];
		k01_21 = u[eeOffset0 + (-7)] - u[eeOffset2 + (-7)];
		var _g7 = eeOffset0 + (-6);
		var _g16 = u;
		_g16[_g7] = _g16[_g7] + u[eeOffset2 + (-6)];
		var _g8 = eeOffset0 + (-7);
		var _g17 = u;
		_g17[_g8] = _g17[_g8] + u[eeOffset2 + (-7)];
		u[eeOffset2 + (-6)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		u[eeOffset2 + (-7)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += 8;
		eeOffset0 -= 8;
		eeOffset2 -= 8;
	}
	var i_off1 = n2 - 1 - n4;
	var eeOffset01 = i_off1;
	var eeOffset21 = i_off1 + -(n >> 3);
	var aOffset1 = 0;
	var i1 = (n >> 4 >> 2) + 1;
	while(--i1 > 0) {
		var k00_201 = u[eeOffset01] - u[eeOffset21];
		var k01_211 = u[eeOffset01 + (-1)] - u[eeOffset21 + (-1)];
		var _g9 = eeOffset01;
		var _g18 = u;
		_g18[_g9] = _g18[_g9] + u[eeOffset21];
		var _g10 = eeOffset01 + (-1);
		var _g19 = u;
		_g19[_g10] = _g19[_g10] + u[eeOffset21 + (-1)];
		u[eeOffset21] = k00_201 * a[aOffset1] - k01_211 * a[aOffset1 + 1];
		u[eeOffset21 + (-1)] = k01_211 * a[aOffset1] + k00_201 * a[aOffset1 + 1];
		aOffset1 += 8;
		k00_201 = u[eeOffset01 + (-2)] - u[eeOffset21 + (-2)];
		k01_211 = u[eeOffset01 + (-3)] - u[eeOffset21 + (-3)];
		var _g20 = eeOffset01 + (-2);
		var _g110 = u;
		_g110[_g20] = _g110[_g20] + u[eeOffset21 + (-2)];
		var _g21 = eeOffset01 + (-3);
		var _g111 = u;
		_g111[_g21] = _g111[_g21] + u[eeOffset21 + (-3)];
		u[eeOffset21 + (-2)] = k00_201 * a[aOffset1] - k01_211 * a[aOffset1 + 1];
		u[eeOffset21 + (-3)] = k01_211 * a[aOffset1] + k00_201 * a[aOffset1 + 1];
		aOffset1 += 8;
		k00_201 = u[eeOffset01 + (-4)] - u[eeOffset21 + (-4)];
		k01_211 = u[eeOffset01 + (-5)] - u[eeOffset21 + (-5)];
		var _g22 = eeOffset01 + (-4);
		var _g112 = u;
		_g112[_g22] = _g112[_g22] + u[eeOffset21 + (-4)];
		var _g23 = eeOffset01 + (-5);
		var _g113 = u;
		_g113[_g23] = _g113[_g23] + u[eeOffset21 + (-5)];
		u[eeOffset21 + (-4)] = k00_201 * a[aOffset1] - k01_211 * a[aOffset1 + 1];
		u[eeOffset21 + (-5)] = k01_211 * a[aOffset1] + k00_201 * a[aOffset1 + 1];
		aOffset1 += 8;
		k00_201 = u[eeOffset01 + (-6)] - u[eeOffset21 + (-6)];
		k01_211 = u[eeOffset01 + (-7)] - u[eeOffset21 + (-7)];
		var _g24 = eeOffset01 + (-6);
		var _g114 = u;
		_g114[_g24] = _g114[_g24] + u[eeOffset21 + (-6)];
		var _g25 = eeOffset01 + (-7);
		var _g115 = u;
		_g115[_g25] = _g115[_g25] + u[eeOffset21 + (-7)];
		u[eeOffset21 + (-6)] = k00_201 * a[aOffset1] - k01_211 * a[aOffset1 + 1];
		u[eeOffset21 + (-7)] = k01_211 * a[aOffset1] + k00_201 * a[aOffset1 + 1];
		aOffset1 += 8;
		eeOffset01 -= 8;
		eeOffset21 -= 8;
	}
	var d0 = n2 - 1 - n8 * 0;
	var aOffset2 = 0;
	var eOffset01 = d0;
	var eOffset2 = d0 + -(n >> 4);
	var i2 = (n >> 5 >> 2) + 1;
	while(--i2 > 0) {
		var k00_202 = u[eOffset01] - u[eOffset2];
		var k01_212 = u[eOffset01 + (-1)] - u[eOffset2 + (-1)];
		var _g26 = eOffset01;
		var _g116 = u;
		_g116[_g26] = _g116[_g26] + u[eOffset2];
		var _g27 = eOffset01 + (-1);
		var _g117 = u;
		_g117[_g27] = _g117[_g27] + u[eOffset2 + (-1)];
		u[eOffset2] = k00_202 * a[aOffset2] - k01_212 * a[aOffset2 + 1];
		u[eOffset2 + (-1)] = k01_212 * a[aOffset2] + k00_202 * a[aOffset2 + 1];
		aOffset2 += 16;
		k00_202 = u[eOffset01 + (-2)] - u[eOffset2 + (-2)];
		k01_212 = u[eOffset01 + (-3)] - u[eOffset2 + (-3)];
		var _g28 = eOffset01 + (-2);
		var _g118 = u;
		_g118[_g28] = _g118[_g28] + u[eOffset2 + (-2)];
		var _g29 = eOffset01 + (-3);
		var _g119 = u;
		_g119[_g29] = _g119[_g29] + u[eOffset2 + (-3)];
		u[eOffset2 + (-2)] = k00_202 * a[aOffset2] - k01_212 * a[aOffset2 + 1];
		u[eOffset2 + (-3)] = k01_212 * a[aOffset2] + k00_202 * a[aOffset2 + 1];
		aOffset2 += 16;
		k00_202 = u[eOffset01 + (-4)] - u[eOffset2 + (-4)];
		k01_212 = u[eOffset01 + (-5)] - u[eOffset2 + (-5)];
		var _g30 = eOffset01 + (-4);
		var _g120 = u;
		_g120[_g30] = _g120[_g30] + u[eOffset2 + (-4)];
		var _g31 = eOffset01 + (-5);
		var _g121 = u;
		_g121[_g31] = _g121[_g31] + u[eOffset2 + (-5)];
		u[eOffset2 + (-4)] = k00_202 * a[aOffset2] - k01_212 * a[aOffset2 + 1];
		u[eOffset2 + (-5)] = k01_212 * a[aOffset2] + k00_202 * a[aOffset2 + 1];
		aOffset2 += 16;
		k00_202 = u[eOffset01 + (-6)] - u[eOffset2 + (-6)];
		k01_212 = u[eOffset01 + (-7)] - u[eOffset2 + (-7)];
		var _g32 = eOffset01 + (-6);
		var _g122 = u;
		_g122[_g32] = _g122[_g32] + u[eOffset2 + (-6)];
		var _g33 = eOffset01 + (-7);
		var _g123 = u;
		_g123[_g33] = _g123[_g33] + u[eOffset2 + (-7)];
		u[eOffset2 + (-6)] = k00_202 * a[aOffset2] - k01_212 * a[aOffset2 + 1];
		u[eOffset2 + (-7)] = k01_212 * a[aOffset2] + k00_202 * a[aOffset2 + 1];
		eOffset01 -= 8;
		eOffset2 -= 8;
		aOffset2 += 16;
	}
	var d01 = n2 - 1 - n8;
	var aOffset3 = 0;
	var eOffset02 = d01;
	var eOffset21 = d01 + -(n >> 4);
	var i3 = (n >> 5 >> 2) + 1;
	while(--i3 > 0) {
		var k00_203 = u[eOffset02] - u[eOffset21];
		var k01_213 = u[eOffset02 + (-1)] - u[eOffset21 + (-1)];
		var _g34 = eOffset02;
		var _g124 = u;
		_g124[_g34] = _g124[_g34] + u[eOffset21];
		var _g35 = eOffset02 + (-1);
		var _g125 = u;
		_g125[_g35] = _g125[_g35] + u[eOffset21 + (-1)];
		u[eOffset21] = k00_203 * a[aOffset3] - k01_213 * a[aOffset3 + 1];
		u[eOffset21 + (-1)] = k01_213 * a[aOffset3] + k00_203 * a[aOffset3 + 1];
		aOffset3 += 16;
		k00_203 = u[eOffset02 + (-2)] - u[eOffset21 + (-2)];
		k01_213 = u[eOffset02 + (-3)] - u[eOffset21 + (-3)];
		var _g36 = eOffset02 + (-2);
		var _g126 = u;
		_g126[_g36] = _g126[_g36] + u[eOffset21 + (-2)];
		var _g37 = eOffset02 + (-3);
		var _g127 = u;
		_g127[_g37] = _g127[_g37] + u[eOffset21 + (-3)];
		u[eOffset21 + (-2)] = k00_203 * a[aOffset3] - k01_213 * a[aOffset3 + 1];
		u[eOffset21 + (-3)] = k01_213 * a[aOffset3] + k00_203 * a[aOffset3 + 1];
		aOffset3 += 16;
		k00_203 = u[eOffset02 + (-4)] - u[eOffset21 + (-4)];
		k01_213 = u[eOffset02 + (-5)] - u[eOffset21 + (-5)];
		var _g38 = eOffset02 + (-4);
		var _g128 = u;
		_g128[_g38] = _g128[_g38] + u[eOffset21 + (-4)];
		var _g39 = eOffset02 + (-5);
		var _g129 = u;
		_g129[_g39] = _g129[_g39] + u[eOffset21 + (-5)];
		u[eOffset21 + (-4)] = k00_203 * a[aOffset3] - k01_213 * a[aOffset3 + 1];
		u[eOffset21 + (-5)] = k01_213 * a[aOffset3] + k00_203 * a[aOffset3 + 1];
		aOffset3 += 16;
		k00_203 = u[eOffset02 + (-6)] - u[eOffset21 + (-6)];
		k01_213 = u[eOffset02 + (-7)] - u[eOffset21 + (-7)];
		var _g40 = eOffset02 + (-6);
		var _g130 = u;
		_g130[_g40] = _g130[_g40] + u[eOffset21 + (-6)];
		var _g41 = eOffset02 + (-7);
		var _g131 = u;
		_g131[_g41] = _g131[_g41] + u[eOffset21 + (-7)];
		u[eOffset21 + (-6)] = k00_203 * a[aOffset3] - k01_213 * a[aOffset3 + 1];
		u[eOffset21 + (-7)] = k01_213 * a[aOffset3] + k00_203 * a[aOffset3 + 1];
		eOffset02 -= 8;
		eOffset21 -= 8;
		aOffset3 += 16;
	}
	var d02 = n2 - 1 - n8 * 2;
	var aOffset4 = 0;
	var eOffset03 = d02;
	var eOffset22 = d02 + -(n >> 4);
	var i4 = (n >> 5 >> 2) + 1;
	while(--i4 > 0) {
		var k00_204 = u[eOffset03] - u[eOffset22];
		var k01_214 = u[eOffset03 + (-1)] - u[eOffset22 + (-1)];
		var _g42 = eOffset03;
		var _g132 = u;
		_g132[_g42] = _g132[_g42] + u[eOffset22];
		var _g43 = eOffset03 + (-1);
		var _g133 = u;
		_g133[_g43] = _g133[_g43] + u[eOffset22 + (-1)];
		u[eOffset22] = k00_204 * a[aOffset4] - k01_214 * a[aOffset4 + 1];
		u[eOffset22 + (-1)] = k01_214 * a[aOffset4] + k00_204 * a[aOffset4 + 1];
		aOffset4 += 16;
		k00_204 = u[eOffset03 + (-2)] - u[eOffset22 + (-2)];
		k01_214 = u[eOffset03 + (-3)] - u[eOffset22 + (-3)];
		var _g44 = eOffset03 + (-2);
		var _g134 = u;
		_g134[_g44] = _g134[_g44] + u[eOffset22 + (-2)];
		var _g45 = eOffset03 + (-3);
		var _g135 = u;
		_g135[_g45] = _g135[_g45] + u[eOffset22 + (-3)];
		u[eOffset22 + (-2)] = k00_204 * a[aOffset4] - k01_214 * a[aOffset4 + 1];
		u[eOffset22 + (-3)] = k01_214 * a[aOffset4] + k00_204 * a[aOffset4 + 1];
		aOffset4 += 16;
		k00_204 = u[eOffset03 + (-4)] - u[eOffset22 + (-4)];
		k01_214 = u[eOffset03 + (-5)] - u[eOffset22 + (-5)];
		var _g46 = eOffset03 + (-4);
		var _g136 = u;
		_g136[_g46] = _g136[_g46] + u[eOffset22 + (-4)];
		var _g47 = eOffset03 + (-5);
		var _g137 = u;
		_g137[_g47] = _g137[_g47] + u[eOffset22 + (-5)];
		u[eOffset22 + (-4)] = k00_204 * a[aOffset4] - k01_214 * a[aOffset4 + 1];
		u[eOffset22 + (-5)] = k01_214 * a[aOffset4] + k00_204 * a[aOffset4 + 1];
		aOffset4 += 16;
		k00_204 = u[eOffset03 + (-6)] - u[eOffset22 + (-6)];
		k01_214 = u[eOffset03 + (-7)] - u[eOffset22 + (-7)];
		var _g48 = eOffset03 + (-6);
		var _g138 = u;
		_g138[_g48] = _g138[_g48] + u[eOffset22 + (-6)];
		var _g49 = eOffset03 + (-7);
		var _g139 = u;
		_g139[_g49] = _g139[_g49] + u[eOffset22 + (-7)];
		u[eOffset22 + (-6)] = k00_204 * a[aOffset4] - k01_214 * a[aOffset4 + 1];
		u[eOffset22 + (-7)] = k01_214 * a[aOffset4] + k00_204 * a[aOffset4 + 1];
		eOffset03 -= 8;
		eOffset22 -= 8;
		aOffset4 += 16;
	}
	var d03 = n2 - 1 - n8 * 3;
	var aOffset5 = 0;
	var eOffset04 = d03;
	var eOffset23 = d03 + -(n >> 4);
	var i5 = (n >> 5 >> 2) + 1;
	while(--i5 > 0) {
		var k00_205 = u[eOffset04] - u[eOffset23];
		var k01_215 = u[eOffset04 + (-1)] - u[eOffset23 + (-1)];
		var _g50 = eOffset04;
		var _g140 = u;
		_g140[_g50] = _g140[_g50] + u[eOffset23];
		var _g51 = eOffset04 + (-1);
		var _g141 = u;
		_g141[_g51] = _g141[_g51] + u[eOffset23 + (-1)];
		u[eOffset23] = k00_205 * a[aOffset5] - k01_215 * a[aOffset5 + 1];
		u[eOffset23 + (-1)] = k01_215 * a[aOffset5] + k00_205 * a[aOffset5 + 1];
		aOffset5 += 16;
		k00_205 = u[eOffset04 + (-2)] - u[eOffset23 + (-2)];
		k01_215 = u[eOffset04 + (-3)] - u[eOffset23 + (-3)];
		var _g52 = eOffset04 + (-2);
		var _g142 = u;
		_g142[_g52] = _g142[_g52] + u[eOffset23 + (-2)];
		var _g53 = eOffset04 + (-3);
		var _g143 = u;
		_g143[_g53] = _g143[_g53] + u[eOffset23 + (-3)];
		u[eOffset23 + (-2)] = k00_205 * a[aOffset5] - k01_215 * a[aOffset5 + 1];
		u[eOffset23 + (-3)] = k01_215 * a[aOffset5] + k00_205 * a[aOffset5 + 1];
		aOffset5 += 16;
		k00_205 = u[eOffset04 + (-4)] - u[eOffset23 + (-4)];
		k01_215 = u[eOffset04 + (-5)] - u[eOffset23 + (-5)];
		var _g54 = eOffset04 + (-4);
		var _g144 = u;
		_g144[_g54] = _g144[_g54] + u[eOffset23 + (-4)];
		var _g55 = eOffset04 + (-5);
		var _g145 = u;
		_g145[_g55] = _g145[_g55] + u[eOffset23 + (-5)];
		u[eOffset23 + (-4)] = k00_205 * a[aOffset5] - k01_215 * a[aOffset5 + 1];
		u[eOffset23 + (-5)] = k01_215 * a[aOffset5] + k00_205 * a[aOffset5 + 1];
		aOffset5 += 16;
		k00_205 = u[eOffset04 + (-6)] - u[eOffset23 + (-6)];
		k01_215 = u[eOffset04 + (-7)] - u[eOffset23 + (-7)];
		var _g56 = eOffset04 + (-6);
		var _g146 = u;
		_g146[_g56] = _g146[_g56] + u[eOffset23 + (-6)];
		var _g57 = eOffset04 + (-7);
		var _g147 = u;
		_g147[_g57] = _g147[_g57] + u[eOffset23 + (-7)];
		u[eOffset23 + (-6)] = k00_205 * a[aOffset5] - k01_215 * a[aOffset5 + 1];
		u[eOffset23 + (-7)] = k01_215 * a[aOffset5] + k00_205 * a[aOffset5 + 1];
		eOffset04 -= 8;
		eOffset23 -= 8;
		aOffset5 += 16;
	}
	var _g58 = 2;
	var _g148 = ld - 3 >> 1;
	while(_g58 < _g148) {
		var l = _g58++;
		var k0 = n >> l + 2;
		var k0_2 = k0 >> 1;
		var lim = 1 << l + 1;
		var _g59 = 0;
		var _g149 = lim;
		while(_g59 < _g149) {
			var i6 = _g59++;
			var d04 = n2 - 1 - k0 * i6;
			var k1 = 1 << l + 3;
			var aOffset6 = 0;
			var eOffset05 = d04;
			var eOffset24 = d04 + -k0_2;
			var i7 = (n >> l + 4 >> 2) + 1;
			while(--i7 > 0) {
				var k00_206 = u[eOffset05] - u[eOffset24];
				var k01_216 = u[eOffset05 + (-1)] - u[eOffset24 + (-1)];
				var _g60 = eOffset05;
				var _g150 = u;
				_g150[_g60] = _g150[_g60] + u[eOffset24];
				var _g61 = eOffset05 + (-1);
				var _g151 = u;
				_g151[_g61] = _g151[_g61] + u[eOffset24 + (-1)];
				u[eOffset24] = k00_206 * a[aOffset6] - k01_216 * a[aOffset6 + 1];
				u[eOffset24 + (-1)] = k01_216 * a[aOffset6] + k00_206 * a[aOffset6 + 1];
				aOffset6 += k1;
				k00_206 = u[eOffset05 + (-2)] - u[eOffset24 + (-2)];
				k01_216 = u[eOffset05 + (-3)] - u[eOffset24 + (-3)];
				var _g62 = eOffset05 + (-2);
				var _g152 = u;
				_g152[_g62] = _g152[_g62] + u[eOffset24 + (-2)];
				var _g63 = eOffset05 + (-3);
				var _g153 = u;
				_g153[_g63] = _g153[_g63] + u[eOffset24 + (-3)];
				u[eOffset24 + (-2)] = k00_206 * a[aOffset6] - k01_216 * a[aOffset6 + 1];
				u[eOffset24 + (-3)] = k01_216 * a[aOffset6] + k00_206 * a[aOffset6 + 1];
				aOffset6 += k1;
				k00_206 = u[eOffset05 + (-4)] - u[eOffset24 + (-4)];
				k01_216 = u[eOffset05 + (-5)] - u[eOffset24 + (-5)];
				var _g64 = eOffset05 + (-4);
				var _g154 = u;
				_g154[_g64] = _g154[_g64] + u[eOffset24 + (-4)];
				var _g65 = eOffset05 + (-5);
				var _g155 = u;
				_g155[_g65] = _g155[_g65] + u[eOffset24 + (-5)];
				u[eOffset24 + (-4)] = k00_206 * a[aOffset6] - k01_216 * a[aOffset6 + 1];
				u[eOffset24 + (-5)] = k01_216 * a[aOffset6] + k00_206 * a[aOffset6 + 1];
				aOffset6 += k1;
				k00_206 = u[eOffset05 + (-6)] - u[eOffset24 + (-6)];
				k01_216 = u[eOffset05 + (-7)] - u[eOffset24 + (-7)];
				var _g66 = eOffset05 + (-6);
				var _g156 = u;
				_g156[_g66] = _g156[_g66] + u[eOffset24 + (-6)];
				var _g67 = eOffset05 + (-7);
				var _g157 = u;
				_g157[_g67] = _g157[_g67] + u[eOffset24 + (-7)];
				u[eOffset24 + (-6)] = k00_206 * a[aOffset6] - k01_216 * a[aOffset6 + 1];
				u[eOffset24 + (-7)] = k01_216 * a[aOffset6] + k00_206 * a[aOffset6 + 1];
				eOffset05 -= 8;
				eOffset24 -= 8;
				aOffset6 += k1;
			}
		}
	}
	var _g210 = ld - 3 >> 1;
	var _g310 = ld - 6;
	while(_g210 < _g310) {
		var l1 = _g210++;
		var k01 = n >> l1 + 2;
		var k11 = 1 << l1 + 3;
		var k0_21 = k01 >> 1;
		var rlim = n >> l1 + 6;
		var lim1 = 1 << l1 + 1;
		var aOffset7 = 0;
		var i_off2 = n2 - 1;
		var r = rlim + 1;
		while(--r > 0) {
			var A0 = a[aOffset7];
			var A1 = a[aOffset7 + 1];
			var A2 = a[aOffset7 + k11];
			var A3 = a[aOffset7 + k11 + 1];
			var A4 = a[aOffset7 + k11 * 2];
			var A5 = a[aOffset7 + k11 * 2 + 1];
			var A6 = a[aOffset7 + k11 * 3];
			var A7 = a[aOffset7 + k11 * 3 + 1];
			var eeOffset02 = i_off2;
			var eeOffset22 = i_off2 + -k0_21;
			var i8 = lim1 + 1;
			while(--i8 > 0) {
				var k00 = u[eeOffset02] - u[eeOffset22];
				var k111 = u[eeOffset02 + (-1)] - u[eeOffset22 + (-1)];
				u[eeOffset02] = u[eeOffset02] + u[eeOffset22];
				u[eeOffset02 + (-1)] = u[eeOffset02 + (-1)] + u[eeOffset22 + (-1)];
				u[eeOffset22] = k00 * A0 - k111 * A1;
				u[eeOffset22 + (-1)] = k111 * A0 + k00 * A1;
				k00 = u[eeOffset02 + (-2)] - u[eeOffset22 + (-2)];
				k111 = u[eeOffset02 + (-3)] - u[eeOffset22 + (-3)];
				u[eeOffset02 + (-2)] = u[eeOffset02 + (-2)] + u[eeOffset22 + (-2)];
				u[eeOffset02 + (-3)] = u[eeOffset02 + (-3)] + u[eeOffset22 + (-3)];
				u[eeOffset22 + (-2)] = k00 * A2 - k111 * A3;
				u[eeOffset22 + (-3)] = k111 * A2 + k00 * A3;
				k00 = u[eeOffset02 + (-4)] - u[eeOffset22 + (-4)];
				k111 = u[eeOffset02 + (-5)] - u[eeOffset22 + (-5)];
				u[eeOffset02 + (-4)] = u[eeOffset02 + (-4)] + u[eeOffset22 + (-4)];
				u[eeOffset02 + (-5)] = u[eeOffset02 + (-5)] + u[eeOffset22 + (-5)];
				u[eeOffset22 + (-4)] = k00 * A4 - k111 * A5;
				u[eeOffset22 + (-5)] = k111 * A4 + k00 * A5;
				k00 = u[eeOffset02 + (-6)] - u[eeOffset22 + (-6)];
				k111 = u[eeOffset02 + (-7)] - u[eeOffset22 + (-7)];
				u[eeOffset02 + (-6)] = u[eeOffset02 + (-6)] + u[eeOffset22 + (-6)];
				u[eeOffset02 + (-7)] = u[eeOffset02 + (-7)] + u[eeOffset22 + (-7)];
				u[eeOffset22 + (-6)] = k00 * A6 - k111 * A7;
				u[eeOffset22 + (-7)] = k111 * A6 + k00 * A7;
				eeOffset02 -= k01;
				eeOffset22 -= k01;
			}
			aOffset7 += k11 * 4;
			i_off2 -= 8;
		}
	}
	var i_off3 = n2 - 1;
	var A21 = a[n >> 3];
	var zOffset = i_off3;
	var baseOffset = i_off3 - 16 * (n >> 5);
	while(zOffset > baseOffset) {
		var t0 = u[zOffset];
		var t1 = u[zOffset + (-8)];
		u[zOffset + (-8)] = t0 - t1;
		u[zOffset] = t0 + t1;
		t0 = u[zOffset + (-1)];
		t1 = u[zOffset + (-9)];
		u[zOffset + (-9)] = t0 - t1;
		u[zOffset + (-1)] = t0 + t1;
		t0 = u[zOffset + (-2)];
		t1 = u[zOffset + (-10)];
		var k001 = t0 - t1;
		u[zOffset + (-2)] = t0 + t1;
		t0 = u[zOffset + (-3)];
		t1 = u[zOffset + (-11)];
		var k112 = t0 - t1;
		u[zOffset + (-3)] = t0 + t1;
		u[zOffset + (-10)] = (k001 + k112) * A21;
		u[zOffset + (-11)] = (k112 - k001) * A21;
		t0 = u[zOffset + (-4)];
		t1 = u[zOffset + (-12)];
		k001 = t1 - t0;
		u[zOffset + (-4)] = t0 + t1;
		t0 = u[zOffset + (-5)];
		t1 = u[zOffset + (-13)];
		k112 = t0 - t1;
		u[zOffset + (-5)] = t0 + t1;
		u[zOffset + (-12)] = k112;
		u[zOffset + (-13)] = k001;
		t0 = u[zOffset + (-6)];
		t1 = u[zOffset + (-14)];
		k001 = t1 - t0;
		u[zOffset + (-6)] = t0 + t1;
		t0 = u[zOffset + (-7)];
		t1 = u[zOffset + (-15)];
		k112 = t0 - t1;
		u[zOffset + (-7)] = t0 + t1;
		u[zOffset + (-14)] = (k001 + k112) * A21;
		u[zOffset + (-15)] = (k001 - k112) * A21;
		var t01 = u[zOffset];
		var t11 = u[zOffset + (-4)];
		var k002 = t01 - t11;
		var y0 = t01 + t11;
		t01 = u[zOffset + (-2)];
		t11 = u[zOffset + (-6)];
		var y2 = t01 + t11;
		var k22 = t01 - t11;
		u[zOffset] = y0 + y2;
		u[zOffset + (-2)] = y0 - y2;
		var k33 = u[zOffset + (-3)] - u[zOffset + (-7)];
		u[zOffset + (-4)] = k002 + k33;
		u[zOffset + (-6)] = k002 - k33;
		t01 = u[zOffset + (-1)];
		t11 = u[zOffset + (-5)];
		var k113 = t01 - t11;
		var y1 = t01 + t11;
		var y3 = u[zOffset + (-3)] + u[zOffset + (-7)];
		u[zOffset + (-1)] = y1 + y3;
		u[zOffset + (-3)] = y1 - y3;
		u[zOffset + (-5)] = k113 - k22;
		u[zOffset + (-7)] = k113 + k22;
		var zOffset1 = zOffset - 8;
		var t02 = u[zOffset1];
		var t12 = u[zOffset1 + (-4)];
		var k003 = t02 - t12;
		var y01 = t02 + t12;
		t02 = u[zOffset1 + (-2)];
		t12 = u[zOffset1 + (-6)];
		var y21 = t02 + t12;
		var k221 = t02 - t12;
		u[zOffset1] = y01 + y21;
		u[zOffset1 + (-2)] = y01 - y21;
		var k331 = u[zOffset1 + (-3)] - u[zOffset1 + (-7)];
		u[zOffset1 + (-4)] = k003 + k331;
		u[zOffset1 + (-6)] = k003 - k331;
		t02 = u[zOffset1 + (-1)];
		t12 = u[zOffset1 + (-5)];
		var k114 = t02 - t12;
		var y11 = t02 + t12;
		var y31 = u[zOffset1 + (-3)] + u[zOffset1 + (-7)];
		u[zOffset1 + (-1)] = y11 + y31;
		u[zOffset1 + (-3)] = y11 - y31;
		u[zOffset1 + (-5)] = k114 - k221;
		u[zOffset1 + (-7)] = k114 + k221;
		zOffset -= 16;
	}
	var brOffset = 0;
	var dOffset01 = n4 - 4;
	var dOffset11 = n2 - 4;
	while(dOffset01 >= 0) {
		var k4 = bitReverse[brOffset];
		v[dOffset11 + 3] = u[k4];
		v[dOffset11 + 2] = u[k4 + 1];
		v[dOffset01 + 3] = u[k4 + 2];
		v[dOffset01 + 2] = u[k4 + 3];
		k4 = bitReverse[brOffset + 1];
		v[dOffset11 + 1] = u[k4];
		v[dOffset11] = u[k4 + 1];
		v[dOffset01 + 1] = u[k4 + 2];
		v[dOffset01] = u[k4 + 3];
		dOffset01 -= 4;
		dOffset11 -= 4;
		brOffset += 2;
	}
	var cOffset = 0;
	var dOffset2 = 0;
	var eOffset3 = n2 - 4;
	while(dOffset2 < eOffset3) {
		var a02 = v[dOffset2] - v[eOffset3 + 2];
		var a11 = v[dOffset2 + 1] + v[eOffset3 + 3];
		var b0 = c[cOffset + 1] * a02 + c[cOffset] * a11;
		var b1 = c[cOffset + 1] * a11 - c[cOffset] * a02;
		var b2 = v[dOffset2] + v[eOffset3 + 2];
		var b3 = v[dOffset2 + 1] - v[eOffset3 + 3];
		v[dOffset2] = b2 + b0;
		v[dOffset2 + 1] = b3 + b1;
		v[eOffset3 + 2] = b2 - b0;
		v[eOffset3 + 3] = b1 - b3;
		a02 = v[dOffset2 + 2] - v[eOffset3];
		a11 = v[dOffset2 + 3] + v[eOffset3 + 1];
		b0 = c[cOffset + 3] * a02 + c[cOffset + 2] * a11;
		b1 = c[cOffset + 3] * a11 - c[cOffset + 2] * a02;
		b2 = v[dOffset2 + 2] + v[eOffset3];
		b3 = v[dOffset2 + 3] - v[eOffset3 + 1];
		v[dOffset2 + 2] = b2 + b0;
		v[dOffset2 + 3] = b3 + b1;
		v[eOffset3] = b2 - b0;
		v[eOffset3 + 1] = b1 - b3;
		cOffset += 4;
		dOffset2 += 4;
		eOffset3 -= 4;
	}
	var bOffset = n2 - 8;
	var eOffset4 = n2 - 8;
	var dOffset02 = 0;
	var dOffset12 = n2 - 4;
	var dOffset21 = n2;
	var dOffset3 = n - 4;
	while(eOffset4 >= 0) {
		var p3 = buf2[eOffset4 + 6] * b[bOffset + 7] - buf2[eOffset4 + 7] * b[bOffset + 6];
		var p2 = -buf2[eOffset4 + 6] * b[bOffset + 6] - buf2[eOffset4 + 7] * b[bOffset + 7];
		buffer[dOffset02] = p3;
		buffer[dOffset12 + 3] = -p3;
		buffer[dOffset21] = p2;
		buffer[dOffset3 + 3] = p2;
		var p1 = buf2[eOffset4 + 4] * b[bOffset + 5] - buf2[eOffset4 + 5] * b[bOffset + 4];
		var p0 = -buf2[eOffset4 + 4] * b[bOffset + 4] - buf2[eOffset4 + 5] * b[bOffset + 5];
		buffer[dOffset02 + 1] = p1;
		buffer[dOffset12 + 2] = -p1;
		buffer[dOffset21 + 1] = p0;
		buffer[dOffset3 + 2] = p0;
		p3 = buf2[eOffset4 + 2] * b[bOffset + 3] - buf2[eOffset4 + 3] * b[bOffset + 2];
		p2 = -buf2[eOffset4 + 2] * b[bOffset + 2] - buf2[eOffset4 + 3] * b[bOffset + 3];
		buffer[dOffset02 + 2] = p3;
		buffer[dOffset12 + 1] = -p3;
		buffer[dOffset21 + 2] = p2;
		buffer[dOffset3 + 1] = p2;
		p1 = buf2[eOffset4] * b[bOffset + 1] - buf2[eOffset4 + 1] * b[bOffset];
		p0 = -buf2[eOffset4] * b[bOffset] - buf2[eOffset4 + 1] * b[bOffset + 1];
		buffer[dOffset02 + 3] = p1;
		buffer[dOffset12] = -p1;
		buffer[dOffset21 + 3] = p0;
		buffer[dOffset3] = p0;
		bOffset -= 8;
		eOffset4 -= 8;
		dOffset02 += 4;
		dOffset21 += 4;
		dOffset12 -= 4;
		dOffset3 -= 4;
	}
};
kha_audio2_ogg_tools_Mdct.step3Iter0Loop = function(n,e,i_off,k_off,a) {
	var eeOffset0 = i_off;
	var eeOffset2 = i_off + k_off;
	var aOffset = 0;
	var i = (n >> 2) + 1;
	while(--i > 0) {
		var k00_20 = e[eeOffset0] - e[eeOffset2];
		var k01_21 = e[eeOffset0 + (-1)] - e[eeOffset2 + (-1)];
		var _g = eeOffset0;
		var _g1 = e;
		_g1[_g] = _g1[_g] + e[eeOffset2];
		var _g2 = eeOffset0 + (-1);
		var _g11 = e;
		_g11[_g2] = _g11[_g2] + e[eeOffset2 + (-1)];
		e[eeOffset2] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		e[eeOffset2 + (-1)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += 8;
		k00_20 = e[eeOffset0 + (-2)] - e[eeOffset2 + (-2)];
		k01_21 = e[eeOffset0 + (-3)] - e[eeOffset2 + (-3)];
		var _g3 = eeOffset0 + (-2);
		var _g12 = e;
		_g12[_g3] = _g12[_g3] + e[eeOffset2 + (-2)];
		var _g4 = eeOffset0 + (-3);
		var _g13 = e;
		_g13[_g4] = _g13[_g4] + e[eeOffset2 + (-3)];
		e[eeOffset2 + (-2)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		e[eeOffset2 + (-3)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += 8;
		k00_20 = e[eeOffset0 + (-4)] - e[eeOffset2 + (-4)];
		k01_21 = e[eeOffset0 + (-5)] - e[eeOffset2 + (-5)];
		var _g5 = eeOffset0 + (-4);
		var _g14 = e;
		_g14[_g5] = _g14[_g5] + e[eeOffset2 + (-4)];
		var _g6 = eeOffset0 + (-5);
		var _g15 = e;
		_g15[_g6] = _g15[_g6] + e[eeOffset2 + (-5)];
		e[eeOffset2 + (-4)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		e[eeOffset2 + (-5)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += 8;
		k00_20 = e[eeOffset0 + (-6)] - e[eeOffset2 + (-6)];
		k01_21 = e[eeOffset0 + (-7)] - e[eeOffset2 + (-7)];
		var _g7 = eeOffset0 + (-6);
		var _g16 = e;
		_g16[_g7] = _g16[_g7] + e[eeOffset2 + (-6)];
		var _g8 = eeOffset0 + (-7);
		var _g17 = e;
		_g17[_g8] = _g17[_g8] + e[eeOffset2 + (-7)];
		e[eeOffset2 + (-6)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		e[eeOffset2 + (-7)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += 8;
		eeOffset0 -= 8;
		eeOffset2 -= 8;
	}
};
kha_audio2_ogg_tools_Mdct.step3InnerRLoop = function(lim,e,d0,k_off,a,k1) {
	var aOffset = 0;
	var eOffset0 = d0;
	var eOffset2 = d0 + k_off;
	var i = (lim >> 2) + 1;
	while(--i > 0) {
		var k00_20 = e[eOffset0] - e[eOffset2];
		var k01_21 = e[eOffset0 + (-1)] - e[eOffset2 + (-1)];
		var _g = eOffset0;
		var _g1 = e;
		_g1[_g] = _g1[_g] + e[eOffset2];
		var _g2 = eOffset0 + (-1);
		var _g11 = e;
		_g11[_g2] = _g11[_g2] + e[eOffset2 + (-1)];
		e[eOffset2] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		e[eOffset2 + (-1)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += k1;
		k00_20 = e[eOffset0 + (-2)] - e[eOffset2 + (-2)];
		k01_21 = e[eOffset0 + (-3)] - e[eOffset2 + (-3)];
		var _g3 = eOffset0 + (-2);
		var _g12 = e;
		_g12[_g3] = _g12[_g3] + e[eOffset2 + (-2)];
		var _g4 = eOffset0 + (-3);
		var _g13 = e;
		_g13[_g4] = _g13[_g4] + e[eOffset2 + (-3)];
		e[eOffset2 + (-2)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		e[eOffset2 + (-3)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += k1;
		k00_20 = e[eOffset0 + (-4)] - e[eOffset2 + (-4)];
		k01_21 = e[eOffset0 + (-5)] - e[eOffset2 + (-5)];
		var _g5 = eOffset0 + (-4);
		var _g14 = e;
		_g14[_g5] = _g14[_g5] + e[eOffset2 + (-4)];
		var _g6 = eOffset0 + (-5);
		var _g15 = e;
		_g15[_g6] = _g15[_g6] + e[eOffset2 + (-5)];
		e[eOffset2 + (-4)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		e[eOffset2 + (-5)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += k1;
		k00_20 = e[eOffset0 + (-6)] - e[eOffset2 + (-6)];
		k01_21 = e[eOffset0 + (-7)] - e[eOffset2 + (-7)];
		var _g7 = eOffset0 + (-6);
		var _g16 = e;
		_g16[_g7] = _g16[_g7] + e[eOffset2 + (-6)];
		var _g8 = eOffset0 + (-7);
		var _g17 = e;
		_g17[_g8] = _g17[_g8] + e[eOffset2 + (-7)];
		e[eOffset2 + (-6)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		e[eOffset2 + (-7)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		eOffset0 -= 8;
		eOffset2 -= 8;
		aOffset += k1;
	}
};
kha_audio2_ogg_tools_Mdct.step3InnerSLoop = function(n,e,i_off,k_off,a,aOffset0,aOffset1,k0) {
	var A0 = a[aOffset0];
	var A1 = a[aOffset0 + 1];
	var A2 = a[aOffset0 + aOffset1];
	var A3 = a[aOffset0 + aOffset1 + 1];
	var A4 = a[aOffset0 + aOffset1 * 2];
	var A5 = a[aOffset0 + aOffset1 * 2 + 1];
	var A6 = a[aOffset0 + aOffset1 * 3];
	var A7 = a[aOffset0 + aOffset1 * 3 + 1];
	var eeOffset0 = i_off;
	var eeOffset2 = i_off + k_off;
	var i = n + 1;
	while(--i > 0) {
		var k00 = e[eeOffset0] - e[eeOffset2];
		var k11 = e[eeOffset0 + (-1)] - e[eeOffset2 + (-1)];
		e[eeOffset0] = e[eeOffset0] + e[eeOffset2];
		e[eeOffset0 + (-1)] = e[eeOffset0 + (-1)] + e[eeOffset2 + (-1)];
		e[eeOffset2] = k00 * A0 - k11 * A1;
		e[eeOffset2 + (-1)] = k11 * A0 + k00 * A1;
		k00 = e[eeOffset0 + (-2)] - e[eeOffset2 + (-2)];
		k11 = e[eeOffset0 + (-3)] - e[eeOffset2 + (-3)];
		e[eeOffset0 + (-2)] = e[eeOffset0 + (-2)] + e[eeOffset2 + (-2)];
		e[eeOffset0 + (-3)] = e[eeOffset0 + (-3)] + e[eeOffset2 + (-3)];
		e[eeOffset2 + (-2)] = k00 * A2 - k11 * A3;
		e[eeOffset2 + (-3)] = k11 * A2 + k00 * A3;
		k00 = e[eeOffset0 + (-4)] - e[eeOffset2 + (-4)];
		k11 = e[eeOffset0 + (-5)] - e[eeOffset2 + (-5)];
		e[eeOffset0 + (-4)] = e[eeOffset0 + (-4)] + e[eeOffset2 + (-4)];
		e[eeOffset0 + (-5)] = e[eeOffset0 + (-5)] + e[eeOffset2 + (-5)];
		e[eeOffset2 + (-4)] = k00 * A4 - k11 * A5;
		e[eeOffset2 + (-5)] = k11 * A4 + k00 * A5;
		k00 = e[eeOffset0 + (-6)] - e[eeOffset2 + (-6)];
		k11 = e[eeOffset0 + (-7)] - e[eeOffset2 + (-7)];
		e[eeOffset0 + (-6)] = e[eeOffset0 + (-6)] + e[eeOffset2 + (-6)];
		e[eeOffset0 + (-7)] = e[eeOffset0 + (-7)] + e[eeOffset2 + (-7)];
		e[eeOffset2 + (-6)] = k00 * A6 - k11 * A7;
		e[eeOffset2 + (-7)] = k11 * A6 + k00 * A7;
		eeOffset0 -= k0;
		eeOffset2 -= k0;
	}
};
kha_audio2_ogg_tools_Mdct.iter54 = function(e,zOffset) {
	var t0 = e[zOffset];
	var t1 = e[zOffset + (-4)];
	var k00 = t0 - t1;
	var y0 = t0 + t1;
	t0 = e[zOffset + (-2)];
	t1 = e[zOffset + (-6)];
	var y2 = t0 + t1;
	var k22 = t0 - t1;
	e[zOffset] = y0 + y2;
	e[zOffset + (-2)] = y0 - y2;
	var k33 = e[zOffset + (-3)] - e[zOffset + (-7)];
	e[zOffset + (-4)] = k00 + k33;
	e[zOffset + (-6)] = k00 - k33;
	t0 = e[zOffset + (-1)];
	t1 = e[zOffset + (-5)];
	var k11 = t0 - t1;
	var y1 = t0 + t1;
	var y3 = e[zOffset + (-3)] + e[zOffset + (-7)];
	e[zOffset + (-1)] = y1 + y3;
	e[zOffset + (-3)] = y1 - y3;
	e[zOffset + (-5)] = k11 - k22;
	e[zOffset + (-7)] = k11 + k22;
};
kha_audio2_ogg_tools_Mdct.step3InnerSLoopLd654 = function(n,e,i_off,a,baseN) {
	var A2 = a[baseN >> 3];
	var zOffset = i_off;
	var baseOffset = i_off - 16 * n;
	while(zOffset > baseOffset) {
		var t0 = e[zOffset];
		var t1 = e[zOffset + (-8)];
		e[zOffset + (-8)] = t0 - t1;
		e[zOffset] = t0 + t1;
		t0 = e[zOffset + (-1)];
		t1 = e[zOffset + (-9)];
		e[zOffset + (-9)] = t0 - t1;
		e[zOffset + (-1)] = t0 + t1;
		t0 = e[zOffset + (-2)];
		t1 = e[zOffset + (-10)];
		var k00 = t0 - t1;
		e[zOffset + (-2)] = t0 + t1;
		t0 = e[zOffset + (-3)];
		t1 = e[zOffset + (-11)];
		var k11 = t0 - t1;
		e[zOffset + (-3)] = t0 + t1;
		e[zOffset + (-10)] = (k00 + k11) * A2;
		e[zOffset + (-11)] = (k11 - k00) * A2;
		t0 = e[zOffset + (-4)];
		t1 = e[zOffset + (-12)];
		k00 = t1 - t0;
		e[zOffset + (-4)] = t0 + t1;
		t0 = e[zOffset + (-5)];
		t1 = e[zOffset + (-13)];
		k11 = t0 - t1;
		e[zOffset + (-5)] = t0 + t1;
		e[zOffset + (-12)] = k11;
		e[zOffset + (-13)] = k00;
		t0 = e[zOffset + (-6)];
		t1 = e[zOffset + (-14)];
		k00 = t1 - t0;
		e[zOffset + (-6)] = t0 + t1;
		t0 = e[zOffset + (-7)];
		t1 = e[zOffset + (-15)];
		k11 = t0 - t1;
		e[zOffset + (-7)] = t0 + t1;
		e[zOffset + (-14)] = (k00 + k11) * A2;
		e[zOffset + (-15)] = (k00 - k11) * A2;
		var t01 = e[zOffset];
		var t11 = e[zOffset + (-4)];
		var k001 = t01 - t11;
		var y0 = t01 + t11;
		t01 = e[zOffset + (-2)];
		t11 = e[zOffset + (-6)];
		var y2 = t01 + t11;
		var k22 = t01 - t11;
		e[zOffset] = y0 + y2;
		e[zOffset + (-2)] = y0 - y2;
		var k33 = e[zOffset + (-3)] - e[zOffset + (-7)];
		e[zOffset + (-4)] = k001 + k33;
		e[zOffset + (-6)] = k001 - k33;
		t01 = e[zOffset + (-1)];
		t11 = e[zOffset + (-5)];
		var k111 = t01 - t11;
		var y1 = t01 + t11;
		var y3 = e[zOffset + (-3)] + e[zOffset + (-7)];
		e[zOffset + (-1)] = y1 + y3;
		e[zOffset + (-3)] = y1 - y3;
		e[zOffset + (-5)] = k111 - k22;
		e[zOffset + (-7)] = k111 + k22;
		var zOffset1 = zOffset - 8;
		var t02 = e[zOffset1];
		var t12 = e[zOffset1 + (-4)];
		var k002 = t02 - t12;
		var y01 = t02 + t12;
		t02 = e[zOffset1 + (-2)];
		t12 = e[zOffset1 + (-6)];
		var y21 = t02 + t12;
		var k221 = t02 - t12;
		e[zOffset1] = y01 + y21;
		e[zOffset1 + (-2)] = y01 - y21;
		var k331 = e[zOffset1 + (-3)] - e[zOffset1 + (-7)];
		e[zOffset1 + (-4)] = k002 + k331;
		e[zOffset1 + (-6)] = k002 - k331;
		t02 = e[zOffset1 + (-1)];
		t12 = e[zOffset1 + (-5)];
		var k112 = t02 - t12;
		var y11 = t02 + t12;
		var y31 = e[zOffset1 + (-3)] + e[zOffset1 + (-7)];
		e[zOffset1 + (-1)] = y11 + y31;
		e[zOffset1 + (-3)] = y11 - y31;
		e[zOffset1 + (-5)] = k112 - k221;
		e[zOffset1 + (-7)] = k112 + k221;
		zOffset -= 16;
	}
};
var kha_audio2_ogg_vorbis_Reader = function(input,seekFunc,inputLength) {
	this.seekFunc = seekFunc;
	this.inputLength = inputLength;
	this.decoder = kha_audio2_ogg_vorbis_VorbisDecoder.start(input);
	this.decoder.setupSampleNumber(seekFunc,inputLength);
	this.loopStart = this.get_header().comment.get_loopStart();
	this.loopLength = this.get_header().comment.get_loopLength();
};
$hxClasses["kha.audio2.ogg.vorbis.Reader"] = kha_audio2_ogg_vorbis_Reader;
kha_audio2_ogg_vorbis_Reader.__name__ = "kha.audio2.ogg.vorbis.Reader";
kha_audio2_ogg_vorbis_Reader.openFromBytes = function(bytes) {
	var input = new haxe_io_BytesInput(bytes);
	var bytes1 = input;
	return new kha_audio2_ogg_vorbis_Reader(input,function(pos) {
		kha_audio2_ogg_vorbis_Reader.seekBytes(bytes1,pos);
	},bytes.length);
};
kha_audio2_ogg_vorbis_Reader.seekBytes = function(bytes,pos) {
	bytes.set_position(pos);
};
kha_audio2_ogg_vorbis_Reader.readAll = function(bytes,output,useFloat) {
	if(useFloat == null) {
		useFloat = false;
	}
	var input = new haxe_io_BytesInput(bytes);
	var decoder = kha_audio2_ogg_vorbis_VorbisDecoder.start(input);
	var bytes1 = input;
	decoder.setupSampleNumber(function(pos) {
		kha_audio2_ogg_vorbis_Reader.seekBytes(bytes1,pos);
	},bytes.length);
	var header = decoder.header;
	var count = 0;
	var bufferSize = 4096;
	var this1 = new Float32Array(bufferSize * header.channel);
	var buffer = this1;
	while(true) {
		var n = decoder.read(buffer,bufferSize,header.channel,header.sampleRate,useFloat);
		var _g = 0;
		var _g1 = n * header.channel;
		while(_g < _g1) {
			var i = _g++;
			output.writeFloat(buffer[i]);
		}
		if(n == 0) {
			break;
		}
		count += n;
	}
	return decoder.header;
};
kha_audio2_ogg_vorbis_Reader.prototype = {
	decoder: null
	,get_header: function() {
		return this.decoder.header;
	}
	,get_totalSample: function() {
		return this.decoder.totalSample;
	}
	,get_totalMillisecond: function() {
		var samples = this.decoder.totalSample;
		var b = this.get_header().sampleRate;
		return _$UInt_UInt_$Impl_$.toFloat(samples) / _$UInt_UInt_$Impl_$.toFloat(b) * 1000;
	}
	,get_currentSample: function() {
		return this.decoder.currentSample;
	}
	,set_currentSample: function(value) {
		this.decoder.seek(this.seekFunc,this.inputLength,value);
		return this.decoder.currentSample;
	}
	,get_currentMillisecond: function() {
		var samples = this.get_currentSample();
		var b = this.get_header().sampleRate;
		return _$UInt_UInt_$Impl_$.toFloat(samples) / _$UInt_UInt_$Impl_$.toFloat(b) * 1000;
	}
	,set_currentMillisecond: function(value) {
		this.set_currentSample(Math.floor(_$UInt_UInt_$Impl_$.toFloat(this.get_header().sampleRate) * (value / 1000)));
		return this.get_currentMillisecond();
	}
	,loopStart: null
	,loopLength: null
	,seekFunc: null
	,inputLength: null
	,read: function(output,samples,channels,sampleRate,useFloat) {
		if(useFloat == null) {
			useFloat = false;
		}
		this.decoder.ensurePosition(this.seekFunc);
		if(samples == null) {
			samples = this.decoder.totalSample;
		}
		if(channels == null) {
			channels = this.get_header().channel;
		}
		if(sampleRate == null) {
			sampleRate = this.get_header().sampleRate;
		}
		return this.decoder.read(output,samples,channels,sampleRate,useFloat);
	}
	,clone: function() {
		var reader = Object.create(kha_audio2_ogg_vorbis_Reader.prototype);
		reader.seekFunc = this.seekFunc;
		reader.inputLength = this.inputLength;
		reader.decoder = this.decoder.clone(this.seekFunc);
		reader.loopStart = this.loopStart;
		reader.loopLength = this.loopLength;
		return reader;
	}
	,sampleToMillisecond: function(samples) {
		var b = this.get_header().sampleRate;
		return _$UInt_UInt_$Impl_$.toFloat(samples) / _$UInt_UInt_$Impl_$.toFloat(b) * 1000;
	}
	,millisecondToSample: function(millseconds) {
		return Math.floor(_$UInt_UInt_$Impl_$.toFloat(this.get_header().sampleRate) * (millseconds / 1000));
	}
	,__class__: kha_audio2_ogg_vorbis_Reader
	,__properties__: {set_currentMillisecond:"set_currentMillisecond",get_currentMillisecond:"get_currentMillisecond",set_currentSample:"set_currentSample",get_currentSample:"get_currentSample",get_totalMillisecond:"get_totalMillisecond",get_totalSample:"get_totalSample",get_header:"get_header"}
};
var kha_audio2_ogg_vorbis_VorbisDecodeState = function(input) {
	this.nextSeg = 0;
	this.firstDecode = false;
	this.bytesInSeg = 0;
	this.validBits = 0;
	this.input = input;
	this.inputPosition = 0;
	this.page = new kha_audio2_ogg_vorbis_data_Page();
	kha_audio2_ogg_tools_Crc32.init();
};
$hxClasses["kha.audio2.ogg.vorbis.VorbisDecodeState"] = kha_audio2_ogg_vorbis_VorbisDecodeState;
kha_audio2_ogg_vorbis_VorbisDecodeState.__name__ = "kha.audio2.ogg.vorbis.VorbisDecodeState";
kha_audio2_ogg_vorbis_VorbisDecodeState.prototype = {
	page: null
	,eof: null
	,pFirst: null
	,pLast: null
	,validBits: null
	,inputPosition: null
	,input: null
	,discardSamplesDeferred: null
	,segments: null
	,bytesInSeg: null
	,channelBuffers: null
	,channelBufferStart: null
	,channelBufferEnd: null
	,currentSample: null
	,previousWindow: null
	,previousLength: null
	,finalY: null
	,firstDecode: null
	,nextSeg: null
	,acc: null
	,lastSeg: null
	,lastSegWhich: null
	,endSegWithKnownLoc: null
	,knownLocForPacket: null
	,error: null
	,currentLoc: null
	,currentLocValid: null
	,firstAudioPageOffset: null
	,setup: function(loc0,loc1) {
		this.inputPosition += 1;
		var segmentCount = this.input.readByte();
		this.inputPosition += segmentCount;
		var this1 = new Array(segmentCount);
		var vec = this1;
		var _g = 0;
		var _g1 = segmentCount;
		while(_g < _g1) {
			var i = _g++;
			vec[i] = this.input.readByte();
		}
		this.segments = vec;
		this.endSegWithKnownLoc = -2;
		if(loc0 != -1 || loc1 != -1) {
			var i1 = segmentCount - 1;
			while(i1 >= 0) {
				if(this.segments[i1] < 255) {
					break;
				}
				if(i1 >= 0) {
					this.endSegWithKnownLoc = i1;
					this.knownLocForPacket = loc0;
				}
				--i1;
			}
		}
		if(this.firstDecode) {
			var i2 = 0;
			var len = 0;
			var p = new kha_audio2_ogg_vorbis_data_ProbedPage();
			var _g2 = 0;
			var _g11 = segmentCount;
			while(_g2 < _g11) {
				var i3 = _g2++;
				len += this.segments[i3];
			}
			len += 27 + segmentCount;
			p.pageStart = this.firstAudioPageOffset;
			p.pageEnd = p.pageStart + len;
			p.firstDecodedSample = 0;
			p.lastDecodedSample = loc0;
			this.pFirst = p;
		}
		this.nextSeg = 0;
	}
	,clone: function(seekFunc) {
		var state = Object.create(kha_audio2_ogg_vorbis_VorbisDecodeState.prototype);
		seekFunc(this.inputPosition);
		state.input = this.input;
		state.eof = this.eof;
		state.validBits = this.validBits;
		state.discardSamplesDeferred = this.discardSamplesDeferred;
		state.firstDecode = this.firstDecode;
		state.nextSeg = this.nextSeg;
		state.bytesInSeg = this.bytesInSeg;
		state.acc = state.acc;
		state.lastSeg = this.lastSeg;
		state.lastSegWhich = this.lastSegWhich;
		state.currentLoc = this.currentLoc;
		state.currentLocValid = this.currentLocValid;
		state.inputPosition = this.inputPosition;
		state.firstAudioPageOffset = this.firstAudioPageOffset;
		state.error = this.error;
		state.segments = this.segments;
		state.pFirst = this.pFirst;
		state.pLast = this.pLast;
		state.page = this.page.clone();
		return state;
	}
	,next: function() {
		if(this.lastSeg) {
			return 0;
		}
		if(this.nextSeg == -1) {
			this.lastSegWhich = this.segments.length - 1;
			try {
				this.page.start(this);
			} catch( e ) {
				haxe_CallStack.lastException = e;
				var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
				if(((e1) instanceof kha_audio2_ogg_vorbis_data_ReaderError)) {
					this.lastSeg = true;
					this.error = e1;
					return 0;
				} else {
					throw e;
				}
			}
			if((this.page.flag & 1) == 0) {
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.CONTINUED_PACKET_FLAG_INVALID,null,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecodeState.hx", lineNumber : 171, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "next"}));
			}
		}
		var len = this.segments[this.nextSeg++];
		if(len < 255) {
			this.lastSeg = true;
			this.lastSegWhich = this.nextSeg - 1;
		}
		if(this.nextSeg >= this.segments.length) {
			this.nextSeg = -1;
		}
		if(this.bytesInSeg != 0) {
			throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.OTHER,"",{ fileName : "kha/audio2/ogg/vorbis/VorbisDecodeState.hx", lineNumber : 184, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "next"}));
		}
		this.bytesInSeg = len;
		return len;
	}
	,startPacket: function() {
		while(this.nextSeg == -1) {
			this.page.start(this);
			if((this.page.flag & 1) != 0) {
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.MISSING_CAPTURE_PATTERN,null,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecodeState.hx", lineNumber : 193, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "startPacket"}));
			}
		}
		this.lastSeg = false;
		this.validBits = 0;
		this.bytesInSeg = 0;
	}
	,maybeStartPacket: function() {
		if(this.nextSeg == -1) {
			var eof = false;
			var x;
			try {
				this.inputPosition += 1;
				x = this.input.readByte();
			} catch( e ) {
				haxe_CallStack.lastException = e;
				var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
				if(((e1) instanceof haxe_io_Eof)) {
					var e2 = e1;
					eof = true;
					x = 0;
				} else {
					throw e;
				}
			}
			if(eof) {
				return false;
			}
			var tmp;
			var tmp1;
			var tmp2;
			if(x == 79) {
				this.inputPosition += 1;
				tmp2 = this.input.readByte() != 103;
			} else {
				tmp2 = true;
			}
			if(!tmp2) {
				this.inputPosition += 1;
				tmp1 = this.input.readByte() != 103;
			} else {
				tmp1 = true;
			}
			if(!tmp1) {
				this.inputPosition += 1;
				tmp = this.input.readByte() != 83;
			} else {
				tmp = true;
			}
			if(tmp) {
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.MISSING_CAPTURE_PATTERN,null,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecodeState.hx", lineNumber : 218, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "maybeStartPacket"}));
			}
			this.page.startWithoutCapturePattern(this);
		}
		this.startPacket();
		return true;
	}
	,readBits: function(n) {
		if(this.validBits < 0) {
			return 0;
		} else if(this.validBits < n) {
			if(n > 24) {
				return this.readBits(24) + (this.readBits(n - 24) << 24);
			} else {
				if(this.validBits == 0) {
					this.acc = 0;
				}
				while(true) {
					if(this.bytesInSeg == 0 && (this.lastSeg || this.next() == 0)) {
						this.validBits = -1;
						break;
					} else {
						this.bytesInSeg--;
						this.inputPosition += 1;
						this.acc = this.acc + (this.input.readByte() << this.validBits);
						this.validBits += 8;
					}
					if(!(this.validBits < n)) {
						break;
					}
				}
				if(this.validBits < 0) {
					return 0;
				} else {
					var z = this.acc & (1 << n) - 1;
					this.acc = this.acc >>> n;
					this.validBits -= n;
					return z;
				}
			}
		} else {
			var z1 = this.acc & (1 << n) - 1;
			this.acc = this.acc >>> n;
			this.validBits -= n;
			return z1;
		}
	}
	,readPacketRaw: function() {
		if(this.bytesInSeg == 0 && (this.lastSeg || this.next() == 0)) {
			return -1;
		} else {
			this.bytesInSeg--;
			this.inputPosition += 1;
			return this.input.readByte();
		}
	}
	,readPacket: function() {
		var x;
		if(this.bytesInSeg == 0 && (this.lastSeg || this.next() == 0)) {
			x = -1;
		} else {
			this.bytesInSeg--;
			this.inputPosition += 1;
			x = this.input.readByte();
		}
		this.validBits = 0;
		return x;
	}
	,flushPacket: function() {
		while(this.bytesInSeg != 0 || !this.lastSeg && this.next() != 0) {
			this.bytesInSeg--;
			this.inputPosition += 1;
			this.input.readByte();
		}
	}
	,vorbisValidate: function() {
		var header = new haxe_io_Bytes(new ArrayBuffer(6));
		var x;
		if(this.bytesInSeg == 0 && (this.lastSeg || this.next() == 0)) {
			x = -1;
		} else {
			this.bytesInSeg--;
			this.inputPosition += 1;
			x = this.input.readByte();
		}
		this.validBits = 0;
		header.b[0] = x;
		var x1;
		if(this.bytesInSeg == 0 && (this.lastSeg || this.next() == 0)) {
			x1 = -1;
		} else {
			this.bytesInSeg--;
			this.inputPosition += 1;
			x1 = this.input.readByte();
		}
		this.validBits = 0;
		header.b[1] = x1;
		var x2;
		if(this.bytesInSeg == 0 && (this.lastSeg || this.next() == 0)) {
			x2 = -1;
		} else {
			this.bytesInSeg--;
			this.inputPosition += 1;
			x2 = this.input.readByte();
		}
		this.validBits = 0;
		header.b[2] = x2;
		var x3;
		if(this.bytesInSeg == 0 && (this.lastSeg || this.next() == 0)) {
			x3 = -1;
		} else {
			this.bytesInSeg--;
			this.inputPosition += 1;
			x3 = this.input.readByte();
		}
		this.validBits = 0;
		header.b[3] = x3;
		var x4;
		if(this.bytesInSeg == 0 && (this.lastSeg || this.next() == 0)) {
			x4 = -1;
		} else {
			this.bytesInSeg--;
			this.inputPosition += 1;
			x4 = this.input.readByte();
		}
		this.validBits = 0;
		header.b[4] = x4;
		var x5;
		if(this.bytesInSeg == 0 && (this.lastSeg || this.next() == 0)) {
			x5 = -1;
		} else {
			this.bytesInSeg--;
			this.inputPosition += 1;
			x5 = this.input.readByte();
		}
		this.validBits = 0;
		header.b[5] = x5;
		if(header.toString() != "vorbis") {
			throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,"vorbis header",{ fileName : "kha/audio2/ogg/vorbis/VorbisDecodeState.hx", lineNumber : 301, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "vorbisValidate"}));
		}
	}
	,firstPageValidate: function() {
		if(this.segments.length != 1) {
			throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,"segmentCount",{ fileName : "kha/audio2/ogg/vorbis/VorbisDecodeState.hx", lineNumber : 308, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "firstPageValidate"}));
		}
		if(this.segments[0] != 30) {
			throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,"decodeState head",{ fileName : "kha/audio2/ogg/vorbis/VorbisDecodeState.hx", lineNumber : 311, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "firstPageValidate"}));
		}
	}
	,startFirstDecode: function() {
		this.firstAudioPageOffset = this.inputPosition;
		this.firstDecode = true;
	}
	,capturePattern: function() {
		var tmp;
		var tmp1;
		var tmp2;
		this.inputPosition += 1;
		if(this.input.readByte() == 79) {
			this.inputPosition += 1;
			tmp2 = this.input.readByte() != 103;
		} else {
			tmp2 = true;
		}
		if(!tmp2) {
			this.inputPosition += 1;
			tmp1 = this.input.readByte() != 103;
		} else {
			tmp1 = true;
		}
		if(!tmp1) {
			this.inputPosition += 1;
			tmp = this.input.readByte() != 83;
		} else {
			tmp = true;
		}
		if(tmp) {
			throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.MISSING_CAPTURE_PATTERN,null,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecodeState.hx", lineNumber : 324, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "capturePattern"}));
		}
	}
	,skip: function(len) {
		this.inputPosition += len;
		var this1 = new Array(len);
		var vec = this1;
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			vec[i] = this.input.readByte();
		}
	}
	,prepHuffman: function() {
		if(this.validBits <= 24) {
			if(this.validBits == 0) {
				this.acc = 0;
			}
			while(true) {
				if(this.bytesInSeg == 0 && (this.lastSeg || this.next() == 0)) {
					return;
				} else {
					this.bytesInSeg--;
					this.inputPosition += 1;
					this.acc = this.acc + (this.input.readByte() << this.validBits);
					this.validBits += 8;
				}
				if(!(this.validBits <= 24)) {
					break;
				}
			}
		}
	}
	,decode: function(c) {
		if(this.validBits < 10) {
			this.prepHuffman();
		}
		var i = c.fastHuffman[this.acc & 1023];
		var val;
		if(i >= 0) {
			var l = c.codewordLengths[i];
			this.acc = this.acc >>> l;
			this.validBits -= l;
			if(this.validBits < 0) {
				this.validBits = 0;
				val = -1;
			} else {
				val = i;
			}
		} else {
			val = this.decodeScalarRaw(c);
		}
		if(c.sparse) {
			val = c.sortedValues[val];
		}
		return val;
	}
	,decodeRaw: function(c) {
		if(this.validBits < 10) {
			this.prepHuffman();
		}
		var i = c.fastHuffman[this.acc & 1023];
		if(i >= 0) {
			var l = c.codewordLengths[i];
			this.acc = this.acc >>> l;
			this.validBits -= l;
			if(this.validBits < 0) {
				this.validBits = 0;
				return -1;
			} else {
				return i;
			}
		} else {
			return this.decodeScalarRaw(c);
		}
	}
	,isLastByte: function() {
		if(this.bytesInSeg == 0) {
			return this.lastSeg;
		} else {
			return false;
		}
	}
	,finishDecodePacket: function(previousLength,n,r) {
		var left = r.left.start;
		var currentLocValid = false;
		var n2 = n >> 1;
		if(this.firstDecode) {
			this.currentLoc = -n2;
			this.discardSamplesDeferred = n - r.right.end;
			currentLocValid = true;
			this.firstDecode = false;
		} else if(this.discardSamplesDeferred != 0) {
			r.left.start += this.discardSamplesDeferred;
			left = r.left.start;
			this.discardSamplesDeferred = 0;
		} else {
			var tmp = previousLength == 0 && currentLocValid;
		}
		if(this.lastSegWhich == this.endSegWithKnownLoc) {
			if(currentLocValid && (this.page.flag & 4) != 0) {
				var currentEnd = this.knownLocForPacket - (n - r.right.end);
				if(currentEnd < this.currentLoc + r.right.end) {
					var len = currentEnd < this.currentLoc ? 0 : currentEnd - this.currentLoc;
					len += r.left.start;
					this.currentLoc += len;
					return { len : len, left : left, right : r.right.start};
				}
			}
			this.currentLoc = this.knownLocForPacket - (n2 - r.left.start);
			currentLocValid = true;
		}
		if(currentLocValid) {
			this.currentLoc += r.right.start - r.left.start;
		}
		return { len : r.right.end, left : left, right : r.right.start};
	}
	,readInt32: function() {
		this.inputPosition += 4;
		return this.input.readInt32();
	}
	,readByte: function() {
		this.inputPosition += 1;
		return this.input.readByte();
	}
	,read: function(n) {
		this.inputPosition += n;
		var this1 = new Array(n);
		var vec = this1;
		var _g = 0;
		var _g1 = n;
		while(_g < _g1) {
			var i = _g++;
			vec[i] = this.input.readByte();
		}
		return vec;
	}
	,readBytes: function(n) {
		this.inputPosition += n;
		return this.input.read(n);
	}
	,readString: function(n) {
		this.inputPosition += n;
		return this.input.readString(n);
	}
	,getSampleNumber: function(seekFunc,inputLength) {
		var restoreOffset = this.inputPosition;
		var previousSafe = _$UInt_UInt_$Impl_$.gte(inputLength,65536) && _$UInt_UInt_$Impl_$.gte(inputLength - 65536,this.firstAudioPageOffset) ? inputLength - 65536 : this.firstAudioPageOffset;
		seekFunc(this.inputPosition = previousSafe);
		var end = 0;
		var last = false;
		var _g = this.findPage(seekFunc,inputLength);
		switch(_g._hx_index) {
		case 0:
			var l = _g.last;
			var e = _g.end;
			end = e;
			last = l;
			break;
		case 1:
			throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.CANT_FIND_LAST_PAGE,null,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecodeState.hx", lineNumber : 519, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "getSampleNumber"}));
		}
		var lastPageLoc = this.inputPosition;
		_hx_loop1: while(!last) {
			seekFunc(this.inputPosition = end);
			var _g3 = this.findPage(seekFunc,inputLength);
			switch(_g3._hx_index) {
			case 0:
				var l1 = _g3.last;
				var e1 = _g3.end;
				end = e1;
				last = l1;
				break;
			case 1:
				break _hx_loop1;
			}
			previousSafe = lastPageLoc + 1;
			lastPageLoc = this.inputPosition;
		}
		seekFunc(this.inputPosition = lastPageLoc);
		this.inputPosition += 6;
		var this1 = new Array(6);
		var vec = this1;
		var _g1 = 0;
		var _g11 = 6;
		while(_g1 < _g11) {
			var i = _g1++;
			vec[i] = this.input.readByte();
		}
		var vorbisHeader = vec;
		this.inputPosition += 4;
		var lo = this.input.readInt32();
		this.inputPosition += 4;
		var hi = this.input.readInt32();
		if(lo == -1 && hi == -1 || hi > 0) {
			throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.CANT_FIND_LAST_PAGE,null,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecodeState.hx", lineNumber : 553, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "getSampleNumber"}));
		}
		this.pLast = new kha_audio2_ogg_vorbis_data_ProbedPage();
		this.pLast.pageStart = lastPageLoc;
		this.pLast.pageEnd = end;
		this.pLast.lastDecodedSample = lo;
		this.pLast.firstDecodedSample = null;
		this.pLast.afterPreviousPageStart = previousSafe;
		seekFunc(this.inputPosition = restoreOffset);
		return lo;
	}
	,forcePageResync: function() {
		this.nextSeg = -1;
	}
	,setInputOffset: function(seekFunc,n) {
		seekFunc(this.inputPosition = n);
	}
	,findPage: function(seekFunc,inputLength) {
		try {
			while(true) {
				this.inputPosition += 1;
				var n = this.input.readByte();
				if(n == 79) {
					var retryLoc = this.inputPosition;
					if(retryLoc - 25 > inputLength) {
						return kha_audio2_ogg_vorbis__$VorbisDecodeState_FindPageResult.NotFound;
					}
					var tmp;
					var tmp1;
					this.inputPosition += 1;
					if(this.input.readByte() == 103) {
						this.inputPosition += 1;
						tmp1 = this.input.readByte() != 103;
					} else {
						tmp1 = true;
					}
					if(!tmp1) {
						this.inputPosition += 1;
						tmp = this.input.readByte() != 83;
					} else {
						tmp = true;
					}
					if(tmp) {
						continue;
					}
					var this1 = new Array(27);
					var header = this1;
					header[0] = 79;
					header[1] = 103;
					header[2] = 103;
					header[3] = 83;
					this.inputPosition += 1;
					header[4] = this.input.readByte();
					this.inputPosition += 1;
					header[5] = this.input.readByte();
					this.inputPosition += 1;
					header[6] = this.input.readByte();
					this.inputPosition += 1;
					header[7] = this.input.readByte();
					this.inputPosition += 1;
					header[8] = this.input.readByte();
					this.inputPosition += 1;
					header[9] = this.input.readByte();
					this.inputPosition += 1;
					header[10] = this.input.readByte();
					this.inputPosition += 1;
					header[11] = this.input.readByte();
					this.inputPosition += 1;
					header[12] = this.input.readByte();
					this.inputPosition += 1;
					header[13] = this.input.readByte();
					this.inputPosition += 1;
					header[14] = this.input.readByte();
					this.inputPosition += 1;
					header[15] = this.input.readByte();
					this.inputPosition += 1;
					header[16] = this.input.readByte();
					this.inputPosition += 1;
					header[17] = this.input.readByte();
					this.inputPosition += 1;
					header[18] = this.input.readByte();
					this.inputPosition += 1;
					header[19] = this.input.readByte();
					this.inputPosition += 1;
					header[20] = this.input.readByte();
					this.inputPosition += 1;
					header[21] = this.input.readByte();
					this.inputPosition += 1;
					header[22] = this.input.readByte();
					this.inputPosition += 1;
					header[23] = this.input.readByte();
					this.inputPosition += 1;
					header[24] = this.input.readByte();
					this.inputPosition += 1;
					header[25] = this.input.readByte();
					this.inputPosition += 1;
					header[26] = this.input.readByte();
					if(header[4] != 0) {
						seekFunc(this.inputPosition = retryLoc);
						continue;
					}
					var goal = header[22] + (header[23] << 8) + (header[24] << 16) + (header[25] << 24);
					header[22] = 0;
					header[23] = 0;
					header[24] = 0;
					header[25] = 0;
					var crc = 0;
					var _g = 0;
					while(_g < 27) {
						var i = _g++;
						crc = crc << 8 ^ kha_audio2_ogg_tools_Crc32.table[header[i] ^ crc >>> 24];
					}
					var len = 0;
					try {
						var _g1 = 0;
						var _g2 = header[26];
						while(_g1 < _g2) {
							var i1 = _g1++;
							this.inputPosition += 1;
							var s = this.input.readByte();
							crc = crc << 8 ^ kha_audio2_ogg_tools_Crc32.table[s ^ crc >>> 24];
							len += s;
						}
						var _g3 = 0;
						var _g4 = len;
						while(_g3 < _g4) {
							var i2 = _g3++;
							this.inputPosition += 1;
							var byte = this.input.readByte();
							crc = crc << 8 ^ kha_audio2_ogg_tools_Crc32.table[byte ^ crc >>> 24];
						}
					} catch( e ) {
						haxe_CallStack.lastException = e;
						var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
						if(((e1) instanceof haxe_io_Eof)) {
							var e2 = e1;
							return kha_audio2_ogg_vorbis__$VorbisDecodeState_FindPageResult.NotFound;
						} else {
							throw e;
						}
					}
					if(crc == goal) {
						var end = this.inputPosition;
						seekFunc(this.inputPosition = retryLoc - 1);
						return kha_audio2_ogg_vorbis__$VorbisDecodeState_FindPageResult.Found(end,(header[5] & 4) != 0);
					}
				}
			}
		} catch( e3 ) {
			haxe_CallStack.lastException = e3;
			var e4 = ((e3) instanceof js__$Boot_HaxeError) ? e3.val : e3;
			if(((e4) instanceof haxe_io_Eof)) {
				var e5 = e4;
				return kha_audio2_ogg_vorbis__$VorbisDecodeState_FindPageResult.NotFound;
			} else {
				throw e3;
			}
		}
	}
	,analyzePage: function(seekFunc,h) {
		var z = new kha_audio2_ogg_vorbis_data_ProbedPage();
		var this1 = new Array(255);
		var packetType = this1;
		z.pageStart = this.inputPosition;
		this.inputPosition += 27;
		var this2 = new Array(27);
		var vec = this2;
		var _g = 0;
		var _g1 = 27;
		while(_g < _g1) {
			var i = _g++;
			vec[i] = this.input.readByte();
		}
		var pageHeader = vec;
		if(!(pageHeader[0] == 79 && pageHeader[1] == 103 && pageHeader[2] == 103 && pageHeader[3] == 83)) {
			throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.OTHER,"",{ fileName : "kha/audio2/ogg/vorbis/VorbisDecodeState.hx", lineNumber : 661, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "analyzePage"}));
		}
		var n = pageHeader[26];
		this.inputPosition += n;
		var this3 = new Array(n);
		var vec1 = this3;
		var _g2 = 0;
		var _g11 = n;
		while(_g2 < _g11) {
			var i1 = _g2++;
			vec1[i1] = this.input.readByte();
		}
		var lacing = vec1;
		var len = 0;
		var _g3 = 0;
		var _g12 = pageHeader[26];
		while(_g3 < _g12) {
			var i2 = _g3++;
			len += lacing[i2];
		}
		z.pageEnd = z.pageStart + 27 + pageHeader[26] + len;
		z.lastDecodedSample = pageHeader[6] + (pageHeader[7] << 8) + (pageHeader[8] << 16) + (pageHeader[9] << 16);
		if((pageHeader[5] & 4) != 0) {
			z.firstDecodedSample = null;
			seekFunc(this.inputPosition = z.pageStart);
			return z;
		}
		var numPacket = 0;
		var packetStart = (pageHeader[5] & 1) == 0;
		var modeCount = h.modes.length;
		var _g21 = 0;
		var _g31 = pageHeader[26];
		while(_g21 < _g31) {
			var i3 = _g21++;
			if(packetStart) {
				if(lacing[i3] == 0) {
					seekFunc(this.inputPosition = z.pageStart);
					return null;
				}
				this.inputPosition += 1;
				var n1 = this.input.readByte();
				if((n1 & 1) != 0) {
					seekFunc(this.inputPosition = z.pageStart);
					return null;
				}
				n1 >>= 1;
				var n2 = modeCount - 1;
				var log2_4 = [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];
				var b = n2 < 16384 ? n2 < 16 ? log2_4[n2] : n2 < 512 ? 5 + log2_4[n2 >> 5] : 10 + log2_4[n2 >> 10] : n2 < 16777216 ? n2 < 524288 ? 15 + log2_4[n2 >> 15] : 20 + log2_4[n2 >> 20] : n2 < 536870912 ? 25 + log2_4[n2 >> 25] : n2 < -2147483648 ? 30 + log2_4[n2 >> 30] : 0;
				n1 &= (1 << b) - 1;
				if(n1 >= modeCount) {
					seekFunc(this.inputPosition = z.pageStart);
					return null;
				}
				packetType[numPacket++] = h.modes[n1].blockflag;
				var len1 = lacing[i3] - 1;
				this.inputPosition += len1;
				var this4 = new Array(len1);
				var vec2 = this4;
				var _g4 = 0;
				var _g13 = len1;
				while(_g4 < _g13) {
					var i4 = _g4++;
					vec2[i4] = this.input.readByte();
				}
			} else {
				var len2 = lacing[i3];
				this.inputPosition += len2;
				var this5 = new Array(len2);
				var vec3 = this5;
				var _g5 = 0;
				var _g14 = len2;
				while(_g5 < _g14) {
					var i5 = _g5++;
					vec3[i5] = this.input.readByte();
				}
			}
			packetStart = lacing[i3] < 255;
		}
		var samples = 0;
		if(numPacket > 1) {
			samples += packetType[numPacket - 1] ? h.blocksize1 : h.blocksize0;
		}
		var i6 = numPacket - 2;
		while(i6 >= 1) {
			--i6;
			if(packetType[i6]) {
				if(packetType[i6 + 1]) {
					samples += h.blocksize1 >> 1;
				} else {
					samples += (h.blocksize1 - h.blocksize0 >> 2) + (h.blocksize0 >> 1);
				}
			} else {
				samples += h.blocksize0 >> 1;
			}
			--i6;
		}
		z.firstDecodedSample = z.lastDecodedSample - samples;
		seekFunc(this.inputPosition = z.pageStart);
		return z;
	}
	,decodeScalarRaw: function(c) {
		this.prepHuffman();
		if(!(c.sortedCodewords != null || c.codewords != null)) {
			throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.OTHER,"",{ fileName : "kha/audio2/ogg/vorbis/VorbisDecodeState.hx", lineNumber : 788, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "decodeScalarRaw"}));
		}
		var codewordLengths = c.codewordLengths;
		var codewords = c.codewords;
		var sortedCodewords = c.sortedCodewords;
		if(c.entries > 8 ? sortedCodewords != null : codewords != null) {
			var n = this.acc;
			n = (n & -1431655766) >>> 1 | (n & 1431655765) << 1;
			n = (n & -858993460) >>> 2 | (n & 858993459) << 2;
			n = (n & -252645136) >>> 4 | (n & 252645135) << 4;
			n = (n & -16711936) >>> 8 | (n & 16711935) << 8;
			var code = n >>> 16 | n << 16;
			var x = 0;
			var n1 = c.sortedEntries;
			while(n1 > 1) {
				var m = x + (n1 >> 1);
				if(_$UInt_UInt_$Impl_$.gte(code,sortedCodewords[m])) {
					x = m;
					n1 -= n1 >> 1;
				} else {
					n1 >>= 1;
				}
			}
			if(!c.sparse) {
				x = c.sortedValues[x];
			}
			var len = codewordLengths[x];
			if(this.validBits >= len) {
				this.acc = this.acc >>> len;
				this.validBits -= len;
				return x;
			}
			this.validBits = 0;
			return -1;
		}
		if(!(!c.sparse)) {
			throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.OTHER,"",{ fileName : "kha/audio2/ogg/vorbis/VorbisDecodeState.hx", lineNumber : 830, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "decodeScalarRaw"}));
		}
		var _g = 0;
		var _g1 = c.entries;
		while(_g < _g1) {
			var i = _g++;
			var cl = codewordLengths[i];
			if(cl == 255) {
				continue;
			}
			if(codewords[i] == (this.acc & (1 << cl) - 1)) {
				if(this.validBits >= cl) {
					this.acc = this.acc >>> cl;
					this.validBits -= cl;
					return i;
				}
				this.validBits = 0;
				return -1;
			}
		}
		this.error = new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_STREAM,null,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecodeState.hx", lineNumber : 847, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "decodeScalarRaw"});
		this.validBits = 0;
		return -1;
	}
	,__class__: kha_audio2_ogg_vorbis_VorbisDecodeState
};
var kha_audio2_ogg_vorbis__$VorbisDecodeState_FindPageResult = $hxEnums["kha.audio2.ogg.vorbis._VorbisDecodeState.FindPageResult"] = { __ename__ : "kha.audio2.ogg.vorbis._VorbisDecodeState.FindPageResult", __constructs__ : ["Found","NotFound"]
	,Found: ($_=function(end,last) { return {_hx_index:0,end:end,last:last,__enum__:"kha.audio2.ogg.vorbis._VorbisDecodeState.FindPageResult",toString:$estr}; },$_.__params__ = ["end","last"],$_)
	,NotFound: {_hx_index:1,__enum__:"kha.audio2.ogg.vorbis._VorbisDecodeState.FindPageResult",toString:$estr}
};
var kha_audio2_ogg_vorbis_VorbisDecoder = function(header,decodeState) {
	this.header = header;
	this.decodeState = decodeState;
	this.totalSample = null;
	this.currentSample = 0;
	this.previousLength = 0;
	var this1 = new Array(header.channel);
	this.channelBuffers = this1;
	var this2 = new Array(header.channel);
	this.previousWindow = this2;
	var this3 = new Array(header.channel);
	this.finalY = this3;
	var _g = 0;
	var _g1 = header.channel;
	while(_g < _g1) {
		var i = _g++;
		var this4 = this.channelBuffers;
		var this5 = new Array(header.blocksize1);
		var vec = this5;
		this4[i] = vec;
		var this6 = this.previousWindow;
		var this7 = new Array(header.blocksize1 / 2 | 0);
		var vec1 = this7;
		this6[i] = vec1;
		this.finalY[i] = [];
	}
	var this8 = new Array(2);
	this.a = this8;
	var this9 = new Array(2);
	this.b = this9;
	var this10 = new Array(2);
	this.c = this10;
	var this11 = new Array(2);
	this.window = this11;
	var this12 = new Array(2);
	this.bitReverseData = this12;
	this.initBlocksize(0,header.blocksize0);
	this.initBlocksize(1,header.blocksize1);
};
$hxClasses["kha.audio2.ogg.vorbis.VorbisDecoder"] = kha_audio2_ogg_vorbis_VorbisDecoder;
kha_audio2_ogg_vorbis_VorbisDecoder.__name__ = "kha.audio2.ogg.vorbis.VorbisDecoder";
kha_audio2_ogg_vorbis_VorbisDecoder.start = function(input) {
	var decodeState = new kha_audio2_ogg_vorbis_VorbisDecodeState(input);
	var header = kha_audio2_ogg_vorbis_data_Header.read(decodeState);
	var decoder = new kha_audio2_ogg_vorbis_VorbisDecoder(header,decodeState);
	decodeState.startFirstDecode();
	decoder.pumpFirstFrame();
	return decoder;
};
kha_audio2_ogg_vorbis_VorbisDecoder.prototype = {
	previousWindow: null
	,previousLength: null
	,finalY: null
	,a: null
	,b: null
	,c: null
	,window: null
	,bitReverseData: null
	,channelBuffers: null
	,channelBufferStart: null
	,channelBufferEnd: null
	,header: null
	,currentSample: null
	,totalSample: null
	,decodeState: null
	,read: function(output,samples,channels,sampleRate,useFloat) {
		var b = this.header.sampleRate;
		if((_$UInt_UInt_$Impl_$.toFloat(sampleRate) % _$UInt_UInt_$Impl_$.toFloat(b) | 0) != 0) {
			throw new js__$Boot_HaxeError("Unsupported sampleRate : can't convert " + Std.string(_$UInt_UInt_$Impl_$.toFloat(this.header.sampleRate)) + " to " + sampleRate);
		}
		if(channels % this.header.channel != 0) {
			throw new js__$Boot_HaxeError("Unsupported channels : can't convert " + this.header.channel + " to " + channels);
		}
		var b1 = this.header.sampleRate;
		var sampleRepeat = _$UInt_UInt_$Impl_$.toFloat(sampleRate) / _$UInt_UInt_$Impl_$.toFloat(b1) | 0;
		var channelRepeat = channels / this.header.channel | 0;
		var n = 0;
		var len = Math.floor(samples / sampleRepeat);
		if(this.totalSample != null && len > this.totalSample - this.currentSample) {
			len = this.totalSample - this.currentSample;
		}
		var index = 0;
		while(n < len) {
			var k = this.channelBufferEnd - this.channelBufferStart;
			if(k >= len - n) {
				k = len - n;
			}
			var _g = this.channelBufferStart;
			var _g1 = this.channelBufferStart + k;
			while(_g < _g1) {
				var j = _g++;
				var _g2 = 0;
				var _g11 = sampleRepeat;
				while(_g2 < _g11) {
					var sr = _g2++;
					var _g3 = 0;
					var _g12 = this.header.channel;
					while(_g3 < _g12) {
						var i = _g3++;
						var _g4 = 0;
						var _g13 = channelRepeat;
						while(_g4 < _g13) {
							var cr = _g4++;
							var value = this.channelBuffers[i][j];
							if(value > 1) {
								value = 1;
							} else if(value < -1) {
								value = -1;
							}
							if(useFloat) {
								output[index] = value;
								++index;
							}
						}
					}
				}
			}
			n += k;
			this.channelBufferStart += k;
			if(n == len || this.getFrameFloat() == 0) {
				break;
			}
		}
		var _g5 = n;
		var _g14 = len;
		while(_g5 < _g14) {
			var j1 = _g5++;
			var _g6 = 0;
			var _g15 = sampleRepeat;
			while(_g6 < _g15) {
				var sr1 = _g6++;
				var _g7 = 0;
				var _g16 = this.header.channel;
				while(_g7 < _g16) {
					var i1 = _g7++;
					var _g8 = 0;
					var _g17 = channelRepeat;
					while(_g8 < _g17) {
						var cr1 = _g8++;
						if(useFloat) {
							output[index] = 0;
							++index;
						}
					}
				}
			}
		}
		this.currentSample += len;
		return len * sampleRepeat;
	}
	,skipSamples: function(len) {
		var n = 0;
		if(this.totalSample != null && len > this.totalSample - this.currentSample) {
			len = this.totalSample - this.currentSample;
		}
		while(n < len) {
			var k = this.channelBufferEnd - this.channelBufferStart;
			if(k >= len - n) {
				k = len - n;
			}
			n += k;
			this.channelBufferStart += k;
			if(n == len || this.getFrameFloat() == 0) {
				break;
			}
		}
		this.currentSample += len;
		return len;
	}
	,setupSampleNumber: function(seekFunc,inputLength) {
		if(this.totalSample == null) {
			this.totalSample = this.decodeState.getSampleNumber(seekFunc,inputLength);
		}
	}
	,seek: function(seekFunc,inputLength,sampleNumber) {
		if(this.currentSample == sampleNumber) {
			return;
		}
		if(this.totalSample == null) {
			this.setupSampleNumber(seekFunc,inputLength);
			if(this.totalSample == 0) {
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.CANT_FIND_LAST_PAGE,null,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecoder.hx", lineNumber : 187, className : "kha.audio2.ogg.vorbis.VorbisDecoder", methodName : "seek"}));
			}
		}
		if(sampleNumber < 0) {
			sampleNumber = 0;
		}
		var p0 = this.decodeState.pFirst;
		var p1 = this.decodeState.pLast;
		if(sampleNumber >= p1.lastDecodedSample) {
			sampleNumber = p1.lastDecodedSample - 1;
		}
		if(sampleNumber < p0.lastDecodedSample) {
			this.seekFrameFromPage(seekFunc,p0.pageStart,0,sampleNumber);
		} else {
			var attempts = 0;
			while(p0.pageEnd < p1.pageStart) {
				var startOffset = p0.pageEnd;
				var endOffset = p1.afterPreviousPageStart;
				var startSample = p0.lastDecodedSample;
				var endSample = p1.lastDecodedSample;
				if(startSample == null || endSample == null) {
					throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.SEEK_FAILED,null,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecoder.hx", lineNumber : 219, className : "kha.audio2.ogg.vorbis.VorbisDecoder", methodName : "seek"}));
				}
				if(_$UInt_UInt_$Impl_$.gt(endOffset,startOffset + 4000)) {
					endOffset = endOffset - 4000;
				}
				var probe = startOffset + Math.floor(_$UInt_UInt_$Impl_$.toFloat(endOffset - startOffset) / _$UInt_UInt_$Impl_$.toFloat(endSample - startSample) * (sampleNumber - startSample));
				if(attempts >= 4) {
					var probe2 = startOffset + (endOffset - startOffset >>> 1);
					probe = attempts >= 8 ? probe2 : _$UInt_UInt_$Impl_$.gt(probe2,probe) ? probe + (probe2 - probe >>> 1) : probe2 + (probe - probe2 >>> 1);
				}
				++attempts;
				seekFunc(this.decodeState.inputPosition = probe);
				var _g = this.decodeState.findPage(seekFunc,inputLength);
				switch(_g._hx_index) {
				case 0:
					var _g2 = _g.last;
					var _g1 = _g.end;
					break;
				case 1:
					throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.SEEK_FAILED,null,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecoder.hx", lineNumber : 249, className : "kha.audio2.ogg.vorbis.VorbisDecoder", methodName : "seek"}));
				}
				var q = this.decodeState.analyzePage(seekFunc,this.header);
				if(q == null) {
					throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.SEEK_FAILED,null,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecoder.hx", lineNumber : 255, className : "kha.audio2.ogg.vorbis.VorbisDecoder", methodName : "seek"}));
				}
				q.afterPreviousPageStart = probe;
				if(q.pageStart == p1.pageStart) {
					p1 = q;
					continue;
				}
				if(sampleNumber < q.lastDecodedSample) {
					p1 = q;
				} else {
					p0 = q;
				}
			}
			if(p0.lastDecodedSample <= sampleNumber && sampleNumber < p1.lastDecodedSample) {
				this.seekFrameFromPage(seekFunc,p1.pageStart,p0.lastDecodedSample,sampleNumber);
			} else {
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.SEEK_FAILED,null,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecoder.hx", lineNumber : 275, className : "kha.audio2.ogg.vorbis.VorbisDecoder", methodName : "seek"}));
			}
		}
	}
	,seekFrameFromPage: function(seekFunc,pageStart,firstSample,targetSample) {
		var frame = 0;
		var frameStart = firstSample;
		seekFunc(this.decodeState.inputPosition = pageStart);
		this.decodeState.nextSeg = -1;
		var leftEnd = 0;
		var leftStart = 0;
		var prevState = null;
		var lastState = null;
		while(true) {
			prevState = lastState;
			lastState = this.decodeState.clone(seekFunc);
			var initialResult = this.decodeInitial();
			if(initialResult == null) {
				lastState = prevState;
				break;
			}
			leftStart = initialResult.left.start;
			leftEnd = initialResult.left.end;
			var start = frame == 0 ? leftEnd : leftStart;
			if(targetSample < frameStart + initialResult.right.start - start) {
				break;
			}
			var _this = this.decodeState;
			while(_this.bytesInSeg != 0 || !_this.lastSeg && _this.next() != 0) {
				_this.bytesInSeg--;
				_this.inputPosition += 1;
				_this.input.readByte();
			}
			frameStart += initialResult.right.start - start;
			++frame;
		}
		this.decodeState = lastState;
		seekFunc(this.decodeState.inputPosition);
		this.previousLength = 0;
		this.pumpFirstFrame();
		this.currentSample = frameStart;
		this.skipSamples(targetSample - frameStart);
	}
	,clone: function(seekFunc) {
		var decoder = Object.create(kha_audio2_ogg_vorbis_VorbisDecoder.prototype);
		decoder.currentSample = this.currentSample;
		decoder.totalSample = this.totalSample;
		decoder.previousLength = this.previousLength;
		decoder.channelBufferStart = this.channelBufferStart;
		decoder.channelBufferEnd = this.channelBufferEnd;
		decoder.a = this.a;
		decoder.b = this.b;
		decoder.c = this.c;
		decoder.window = this.window;
		decoder.bitReverseData = this.bitReverseData;
		decoder.header = this.header;
		decoder.decodeState = this.decodeState.clone(seekFunc);
		var this1 = new Array(this.header.channel);
		decoder.channelBuffers = this1;
		var this2 = new Array(this.header.channel);
		decoder.previousWindow = this2;
		var this3 = new Array(this.header.channel);
		decoder.finalY = this3;
		var _g = 0;
		var _g1 = this.header.channel;
		while(_g < _g1) {
			var i = _g++;
			decoder.channelBuffers[i] = kha_audio2_ogg_vorbis_VorbisTools.copyVector(this.channelBuffers[i]);
			decoder.previousWindow[i] = kha_audio2_ogg_vorbis_VorbisTools.copyVector(this.previousWindow[i]);
			decoder.finalY[i] = Lambda.array(this.finalY[i]);
		}
		return decoder;
	}
	,ensurePosition: function(seekFunc) {
		seekFunc(this.decodeState.inputPosition);
	}
	,getFrameFloat: function() {
		var result = this.decodePacket();
		if(result == null) {
			this.channelBufferStart = this.channelBufferEnd = 0;
			return 0;
		}
		var len = this.finishFrame(result);
		this.channelBufferStart = result.left;
		this.channelBufferEnd = result.left + len;
		return len;
	}
	,pumpFirstFrame: function() {
		this.finishFrame(this.decodePacket());
	}
	,finishFrame: function(r) {
		var len = r.len;
		var right = r.right;
		var left = r.left;
		if(this.previousLength != 0) {
			var n = this.previousLength;
			var w = this.getWindow(n);
			var _g = 0;
			var _g1 = this.header.channel;
			while(_g < _g1) {
				var i = _g++;
				var cb = this.channelBuffers[i];
				var pw = this.previousWindow[i];
				var _g2 = 0;
				var _g11 = n;
				while(_g2 < _g11) {
					var j = _g2++;
					cb[left + j] = cb[left + j] * w[j] + pw[j] * w[n - 1 - j];
				}
			}
		}
		var prev = this.previousLength;
		this.previousLength = len - right;
		var _g3 = 0;
		var _g12 = this.header.channel;
		while(_g3 < _g12) {
			var i1 = _g3++;
			var pw1 = this.previousWindow[i1];
			var cb1 = this.channelBuffers[i1];
			var _g4 = 0;
			var _g13 = len - right;
			while(_g4 < _g13) {
				var j1 = _g4++;
				pw1[j1] = cb1[right + j1];
			}
		}
		if(prev == 0) {
			return 0;
		}
		if(len < right) {
			right = len;
		}
		return right - left;
	}
	,getWindow: function(len) {
		len <<= 1;
		if(len == this.header.blocksize0) {
			return this.window[0];
		} else if(len == this.header.blocksize1) {
			return this.window[1];
		} else {
			throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.OTHER,"",{ fileName : "kha/audio2/ogg/vorbis/VorbisDecoder.hx", lineNumber : 466, className : "kha.audio2.ogg.vorbis.VorbisDecoder", methodName : "getWindow"}));
		}
	}
	,initBlocksize: function(bs,n) {
		var n2 = n >> 1;
		var n4 = n >> 2;
		var n8 = n >> 3;
		var this1 = this.a;
		var this2 = new Array(n2);
		this1[bs] = this2;
		var this3 = this.b;
		var this4 = new Array(n2);
		this3[bs] = this4;
		var this5 = this.c;
		var this6 = new Array(n4);
		this5[bs] = this6;
		var this7 = this.window;
		var this8 = new Array(n2);
		this7[bs] = this8;
		var this9 = this.bitReverseData;
		var this10 = new Array(n8);
		this9[bs] = this10;
		kha_audio2_ogg_vorbis_VorbisTools.computeTwiddleFactors(n,this.a[bs],this.b[bs],this.c[bs]);
		kha_audio2_ogg_vorbis_VorbisTools.computeWindow(n,this.window[bs]);
		kha_audio2_ogg_vorbis_VorbisTools.computeBitReverse(n,this.bitReverseData[bs]);
	}
	,inverseMdct: function(buffer,n,blocktype) {
		var bt = blocktype ? 1 : 0;
		var a = this.a[bt];
		var b = this.b[bt];
		var c = this.c[bt];
		var bitReverse = this.bitReverseData[bt];
		var n2 = n >> 1;
		var n4 = n >> 2;
		var n8 = n >> 3;
		var this1 = new Array(n2);
		var buf2 = this1;
		var dOffset = n2 - 2;
		var aaOffset = 0;
		var eOffset = 0;
		var eStopOffset = n2;
		while(eOffset != eStopOffset) {
			buf2[dOffset + 1] = buffer[eOffset] * a[aaOffset] - buffer[eOffset + 2] * a[aaOffset + 1];
			buf2[dOffset] = buffer[eOffset] * a[aaOffset + 1] + buffer[eOffset + 2] * a[aaOffset];
			dOffset -= 2;
			aaOffset += 2;
			eOffset += 4;
		}
		eOffset = n2 - 3;
		while(dOffset >= 0) {
			buf2[dOffset + 1] = -buffer[eOffset + 2] * a[aaOffset] - -buffer[eOffset] * a[aaOffset + 1];
			buf2[dOffset] = -buffer[eOffset + 2] * a[aaOffset + 1] + -buffer[eOffset] * a[aaOffset];
			dOffset -= 2;
			aaOffset += 2;
			eOffset -= 4;
		}
		var u = buffer;
		var v = buf2;
		var aaOffset1 = n2 - 8;
		var eOffset0 = n4;
		var eOffset1 = 0;
		var dOffset0 = n4;
		var dOffset1 = 0;
		while(aaOffset1 >= 0) {
			var v41_21 = v[eOffset0 + 1] - v[eOffset1 + 1];
			var v40_20 = v[eOffset0] - v[eOffset1];
			u[dOffset0 + 1] = v[eOffset0 + 1] + v[eOffset1 + 1];
			u[dOffset0] = v[eOffset0] + v[eOffset1];
			u[dOffset1 + 1] = v41_21 * a[aaOffset1 + 4] - v40_20 * a[aaOffset1 + 5];
			u[dOffset1] = v40_20 * a[aaOffset1 + 4] + v41_21 * a[aaOffset1 + 5];
			v41_21 = v[eOffset0 + 3] - v[eOffset1 + 3];
			v40_20 = v[eOffset0 + 2] - v[eOffset1 + 2];
			u[dOffset0 + 3] = v[eOffset0 + 3] + v[eOffset1 + 3];
			u[dOffset0 + 2] = v[eOffset0 + 2] + v[eOffset1 + 2];
			u[dOffset1 + 3] = v41_21 * a[aaOffset1] - v40_20 * a[aaOffset1 + 1];
			u[dOffset1 + 2] = v40_20 * a[aaOffset1] + v41_21 * a[aaOffset1 + 1];
			aaOffset1 -= 8;
			dOffset0 += 4;
			dOffset1 += 4;
			eOffset0 += 4;
			eOffset1 += 4;
		}
		var log2_4 = [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];
		var ld = (n < 16384 ? n < 16 ? log2_4[n] : n < 512 ? 5 + log2_4[n >> 5] : 10 + log2_4[n >> 10] : n < 16777216 ? n < 524288 ? 15 + log2_4[n >> 15] : 20 + log2_4[n >> 20] : n < 536870912 ? 25 + log2_4[n >> 25] : n < -2147483648 ? 30 + log2_4[n >> 30] : 0) - 1;
		var i_off = n2 - 1 - n4 * 0;
		var eeOffset0 = i_off;
		var eeOffset2 = i_off + -(n >> 3);
		var aOffset = 0;
		var i = (n >> 4 >> 2) + 1;
		while(--i > 0) {
			var k00_20 = u[eeOffset0] - u[eeOffset2];
			var k01_21 = u[eeOffset0 + (-1)] - u[eeOffset2 + (-1)];
			var _g = eeOffset0;
			var _g1 = u;
			_g1[_g] = _g1[_g] + u[eeOffset2];
			var _g2 = eeOffset0 + (-1);
			var _g11 = u;
			_g11[_g2] = _g11[_g2] + u[eeOffset2 + (-1)];
			u[eeOffset2] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
			u[eeOffset2 + (-1)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
			aOffset += 8;
			k00_20 = u[eeOffset0 + (-2)] - u[eeOffset2 + (-2)];
			k01_21 = u[eeOffset0 + (-3)] - u[eeOffset2 + (-3)];
			var _g3 = eeOffset0 + (-2);
			var _g12 = u;
			_g12[_g3] = _g12[_g3] + u[eeOffset2 + (-2)];
			var _g4 = eeOffset0 + (-3);
			var _g13 = u;
			_g13[_g4] = _g13[_g4] + u[eeOffset2 + (-3)];
			u[eeOffset2 + (-2)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
			u[eeOffset2 + (-3)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
			aOffset += 8;
			k00_20 = u[eeOffset0 + (-4)] - u[eeOffset2 + (-4)];
			k01_21 = u[eeOffset0 + (-5)] - u[eeOffset2 + (-5)];
			var _g5 = eeOffset0 + (-4);
			var _g14 = u;
			_g14[_g5] = _g14[_g5] + u[eeOffset2 + (-4)];
			var _g6 = eeOffset0 + (-5);
			var _g15 = u;
			_g15[_g6] = _g15[_g6] + u[eeOffset2 + (-5)];
			u[eeOffset2 + (-4)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
			u[eeOffset2 + (-5)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
			aOffset += 8;
			k00_20 = u[eeOffset0 + (-6)] - u[eeOffset2 + (-6)];
			k01_21 = u[eeOffset0 + (-7)] - u[eeOffset2 + (-7)];
			var _g7 = eeOffset0 + (-6);
			var _g16 = u;
			_g16[_g7] = _g16[_g7] + u[eeOffset2 + (-6)];
			var _g8 = eeOffset0 + (-7);
			var _g17 = u;
			_g17[_g8] = _g17[_g8] + u[eeOffset2 + (-7)];
			u[eeOffset2 + (-6)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
			u[eeOffset2 + (-7)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
			aOffset += 8;
			eeOffset0 -= 8;
			eeOffset2 -= 8;
		}
		var i_off1 = n2 - 1 - n4;
		var eeOffset01 = i_off1;
		var eeOffset21 = i_off1 + -(n >> 3);
		var aOffset1 = 0;
		var i1 = (n >> 4 >> 2) + 1;
		while(--i1 > 0) {
			var k00_201 = u[eeOffset01] - u[eeOffset21];
			var k01_211 = u[eeOffset01 + (-1)] - u[eeOffset21 + (-1)];
			var _g9 = eeOffset01;
			var _g18 = u;
			_g18[_g9] = _g18[_g9] + u[eeOffset21];
			var _g10 = eeOffset01 + (-1);
			var _g19 = u;
			_g19[_g10] = _g19[_g10] + u[eeOffset21 + (-1)];
			u[eeOffset21] = k00_201 * a[aOffset1] - k01_211 * a[aOffset1 + 1];
			u[eeOffset21 + (-1)] = k01_211 * a[aOffset1] + k00_201 * a[aOffset1 + 1];
			aOffset1 += 8;
			k00_201 = u[eeOffset01 + (-2)] - u[eeOffset21 + (-2)];
			k01_211 = u[eeOffset01 + (-3)] - u[eeOffset21 + (-3)];
			var _g20 = eeOffset01 + (-2);
			var _g110 = u;
			_g110[_g20] = _g110[_g20] + u[eeOffset21 + (-2)];
			var _g21 = eeOffset01 + (-3);
			var _g111 = u;
			_g111[_g21] = _g111[_g21] + u[eeOffset21 + (-3)];
			u[eeOffset21 + (-2)] = k00_201 * a[aOffset1] - k01_211 * a[aOffset1 + 1];
			u[eeOffset21 + (-3)] = k01_211 * a[aOffset1] + k00_201 * a[aOffset1 + 1];
			aOffset1 += 8;
			k00_201 = u[eeOffset01 + (-4)] - u[eeOffset21 + (-4)];
			k01_211 = u[eeOffset01 + (-5)] - u[eeOffset21 + (-5)];
			var _g22 = eeOffset01 + (-4);
			var _g112 = u;
			_g112[_g22] = _g112[_g22] + u[eeOffset21 + (-4)];
			var _g23 = eeOffset01 + (-5);
			var _g113 = u;
			_g113[_g23] = _g113[_g23] + u[eeOffset21 + (-5)];
			u[eeOffset21 + (-4)] = k00_201 * a[aOffset1] - k01_211 * a[aOffset1 + 1];
			u[eeOffset21 + (-5)] = k01_211 * a[aOffset1] + k00_201 * a[aOffset1 + 1];
			aOffset1 += 8;
			k00_201 = u[eeOffset01 + (-6)] - u[eeOffset21 + (-6)];
			k01_211 = u[eeOffset01 + (-7)] - u[eeOffset21 + (-7)];
			var _g24 = eeOffset01 + (-6);
			var _g114 = u;
			_g114[_g24] = _g114[_g24] + u[eeOffset21 + (-6)];
			var _g25 = eeOffset01 + (-7);
			var _g115 = u;
			_g115[_g25] = _g115[_g25] + u[eeOffset21 + (-7)];
			u[eeOffset21 + (-6)] = k00_201 * a[aOffset1] - k01_211 * a[aOffset1 + 1];
			u[eeOffset21 + (-7)] = k01_211 * a[aOffset1] + k00_201 * a[aOffset1 + 1];
			aOffset1 += 8;
			eeOffset01 -= 8;
			eeOffset21 -= 8;
		}
		var d0 = n2 - 1 - n8 * 0;
		var aOffset2 = 0;
		var eOffset01 = d0;
		var eOffset2 = d0 + -(n >> 4);
		var i2 = (n >> 5 >> 2) + 1;
		while(--i2 > 0) {
			var k00_202 = u[eOffset01] - u[eOffset2];
			var k01_212 = u[eOffset01 + (-1)] - u[eOffset2 + (-1)];
			var _g26 = eOffset01;
			var _g116 = u;
			_g116[_g26] = _g116[_g26] + u[eOffset2];
			var _g27 = eOffset01 + (-1);
			var _g117 = u;
			_g117[_g27] = _g117[_g27] + u[eOffset2 + (-1)];
			u[eOffset2] = k00_202 * a[aOffset2] - k01_212 * a[aOffset2 + 1];
			u[eOffset2 + (-1)] = k01_212 * a[aOffset2] + k00_202 * a[aOffset2 + 1];
			aOffset2 += 16;
			k00_202 = u[eOffset01 + (-2)] - u[eOffset2 + (-2)];
			k01_212 = u[eOffset01 + (-3)] - u[eOffset2 + (-3)];
			var _g28 = eOffset01 + (-2);
			var _g118 = u;
			_g118[_g28] = _g118[_g28] + u[eOffset2 + (-2)];
			var _g29 = eOffset01 + (-3);
			var _g119 = u;
			_g119[_g29] = _g119[_g29] + u[eOffset2 + (-3)];
			u[eOffset2 + (-2)] = k00_202 * a[aOffset2] - k01_212 * a[aOffset2 + 1];
			u[eOffset2 + (-3)] = k01_212 * a[aOffset2] + k00_202 * a[aOffset2 + 1];
			aOffset2 += 16;
			k00_202 = u[eOffset01 + (-4)] - u[eOffset2 + (-4)];
			k01_212 = u[eOffset01 + (-5)] - u[eOffset2 + (-5)];
			var _g30 = eOffset01 + (-4);
			var _g120 = u;
			_g120[_g30] = _g120[_g30] + u[eOffset2 + (-4)];
			var _g31 = eOffset01 + (-5);
			var _g121 = u;
			_g121[_g31] = _g121[_g31] + u[eOffset2 + (-5)];
			u[eOffset2 + (-4)] = k00_202 * a[aOffset2] - k01_212 * a[aOffset2 + 1];
			u[eOffset2 + (-5)] = k01_212 * a[aOffset2] + k00_202 * a[aOffset2 + 1];
			aOffset2 += 16;
			k00_202 = u[eOffset01 + (-6)] - u[eOffset2 + (-6)];
			k01_212 = u[eOffset01 + (-7)] - u[eOffset2 + (-7)];
			var _g32 = eOffset01 + (-6);
			var _g122 = u;
			_g122[_g32] = _g122[_g32] + u[eOffset2 + (-6)];
			var _g33 = eOffset01 + (-7);
			var _g123 = u;
			_g123[_g33] = _g123[_g33] + u[eOffset2 + (-7)];
			u[eOffset2 + (-6)] = k00_202 * a[aOffset2] - k01_212 * a[aOffset2 + 1];
			u[eOffset2 + (-7)] = k01_212 * a[aOffset2] + k00_202 * a[aOffset2 + 1];
			eOffset01 -= 8;
			eOffset2 -= 8;
			aOffset2 += 16;
		}
		var d01 = n2 - 1 - n8;
		var aOffset3 = 0;
		var eOffset02 = d01;
		var eOffset21 = d01 + -(n >> 4);
		var i3 = (n >> 5 >> 2) + 1;
		while(--i3 > 0) {
			var k00_203 = u[eOffset02] - u[eOffset21];
			var k01_213 = u[eOffset02 + (-1)] - u[eOffset21 + (-1)];
			var _g34 = eOffset02;
			var _g124 = u;
			_g124[_g34] = _g124[_g34] + u[eOffset21];
			var _g35 = eOffset02 + (-1);
			var _g125 = u;
			_g125[_g35] = _g125[_g35] + u[eOffset21 + (-1)];
			u[eOffset21] = k00_203 * a[aOffset3] - k01_213 * a[aOffset3 + 1];
			u[eOffset21 + (-1)] = k01_213 * a[aOffset3] + k00_203 * a[aOffset3 + 1];
			aOffset3 += 16;
			k00_203 = u[eOffset02 + (-2)] - u[eOffset21 + (-2)];
			k01_213 = u[eOffset02 + (-3)] - u[eOffset21 + (-3)];
			var _g36 = eOffset02 + (-2);
			var _g126 = u;
			_g126[_g36] = _g126[_g36] + u[eOffset21 + (-2)];
			var _g37 = eOffset02 + (-3);
			var _g127 = u;
			_g127[_g37] = _g127[_g37] + u[eOffset21 + (-3)];
			u[eOffset21 + (-2)] = k00_203 * a[aOffset3] - k01_213 * a[aOffset3 + 1];
			u[eOffset21 + (-3)] = k01_213 * a[aOffset3] + k00_203 * a[aOffset3 + 1];
			aOffset3 += 16;
			k00_203 = u[eOffset02 + (-4)] - u[eOffset21 + (-4)];
			k01_213 = u[eOffset02 + (-5)] - u[eOffset21 + (-5)];
			var _g38 = eOffset02 + (-4);
			var _g128 = u;
			_g128[_g38] = _g128[_g38] + u[eOffset21 + (-4)];
			var _g39 = eOffset02 + (-5);
			var _g129 = u;
			_g129[_g39] = _g129[_g39] + u[eOffset21 + (-5)];
			u[eOffset21 + (-4)] = k00_203 * a[aOffset3] - k01_213 * a[aOffset3 + 1];
			u[eOffset21 + (-5)] = k01_213 * a[aOffset3] + k00_203 * a[aOffset3 + 1];
			aOffset3 += 16;
			k00_203 = u[eOffset02 + (-6)] - u[eOffset21 + (-6)];
			k01_213 = u[eOffset02 + (-7)] - u[eOffset21 + (-7)];
			var _g40 = eOffset02 + (-6);
			var _g130 = u;
			_g130[_g40] = _g130[_g40] + u[eOffset21 + (-6)];
			var _g41 = eOffset02 + (-7);
			var _g131 = u;
			_g131[_g41] = _g131[_g41] + u[eOffset21 + (-7)];
			u[eOffset21 + (-6)] = k00_203 * a[aOffset3] - k01_213 * a[aOffset3 + 1];
			u[eOffset21 + (-7)] = k01_213 * a[aOffset3] + k00_203 * a[aOffset3 + 1];
			eOffset02 -= 8;
			eOffset21 -= 8;
			aOffset3 += 16;
		}
		var d02 = n2 - 1 - n8 * 2;
		var aOffset4 = 0;
		var eOffset03 = d02;
		var eOffset22 = d02 + -(n >> 4);
		var i4 = (n >> 5 >> 2) + 1;
		while(--i4 > 0) {
			var k00_204 = u[eOffset03] - u[eOffset22];
			var k01_214 = u[eOffset03 + (-1)] - u[eOffset22 + (-1)];
			var _g42 = eOffset03;
			var _g132 = u;
			_g132[_g42] = _g132[_g42] + u[eOffset22];
			var _g43 = eOffset03 + (-1);
			var _g133 = u;
			_g133[_g43] = _g133[_g43] + u[eOffset22 + (-1)];
			u[eOffset22] = k00_204 * a[aOffset4] - k01_214 * a[aOffset4 + 1];
			u[eOffset22 + (-1)] = k01_214 * a[aOffset4] + k00_204 * a[aOffset4 + 1];
			aOffset4 += 16;
			k00_204 = u[eOffset03 + (-2)] - u[eOffset22 + (-2)];
			k01_214 = u[eOffset03 + (-3)] - u[eOffset22 + (-3)];
			var _g44 = eOffset03 + (-2);
			var _g134 = u;
			_g134[_g44] = _g134[_g44] + u[eOffset22 + (-2)];
			var _g45 = eOffset03 + (-3);
			var _g135 = u;
			_g135[_g45] = _g135[_g45] + u[eOffset22 + (-3)];
			u[eOffset22 + (-2)] = k00_204 * a[aOffset4] - k01_214 * a[aOffset4 + 1];
			u[eOffset22 + (-3)] = k01_214 * a[aOffset4] + k00_204 * a[aOffset4 + 1];
			aOffset4 += 16;
			k00_204 = u[eOffset03 + (-4)] - u[eOffset22 + (-4)];
			k01_214 = u[eOffset03 + (-5)] - u[eOffset22 + (-5)];
			var _g46 = eOffset03 + (-4);
			var _g136 = u;
			_g136[_g46] = _g136[_g46] + u[eOffset22 + (-4)];
			var _g47 = eOffset03 + (-5);
			var _g137 = u;
			_g137[_g47] = _g137[_g47] + u[eOffset22 + (-5)];
			u[eOffset22 + (-4)] = k00_204 * a[aOffset4] - k01_214 * a[aOffset4 + 1];
			u[eOffset22 + (-5)] = k01_214 * a[aOffset4] + k00_204 * a[aOffset4 + 1];
			aOffset4 += 16;
			k00_204 = u[eOffset03 + (-6)] - u[eOffset22 + (-6)];
			k01_214 = u[eOffset03 + (-7)] - u[eOffset22 + (-7)];
			var _g48 = eOffset03 + (-6);
			var _g138 = u;
			_g138[_g48] = _g138[_g48] + u[eOffset22 + (-6)];
			var _g49 = eOffset03 + (-7);
			var _g139 = u;
			_g139[_g49] = _g139[_g49] + u[eOffset22 + (-7)];
			u[eOffset22 + (-6)] = k00_204 * a[aOffset4] - k01_214 * a[aOffset4 + 1];
			u[eOffset22 + (-7)] = k01_214 * a[aOffset4] + k00_204 * a[aOffset4 + 1];
			eOffset03 -= 8;
			eOffset22 -= 8;
			aOffset4 += 16;
		}
		var d03 = n2 - 1 - n8 * 3;
		var aOffset5 = 0;
		var eOffset04 = d03;
		var eOffset23 = d03 + -(n >> 4);
		var i5 = (n >> 5 >> 2) + 1;
		while(--i5 > 0) {
			var k00_205 = u[eOffset04] - u[eOffset23];
			var k01_215 = u[eOffset04 + (-1)] - u[eOffset23 + (-1)];
			var _g50 = eOffset04;
			var _g140 = u;
			_g140[_g50] = _g140[_g50] + u[eOffset23];
			var _g51 = eOffset04 + (-1);
			var _g141 = u;
			_g141[_g51] = _g141[_g51] + u[eOffset23 + (-1)];
			u[eOffset23] = k00_205 * a[aOffset5] - k01_215 * a[aOffset5 + 1];
			u[eOffset23 + (-1)] = k01_215 * a[aOffset5] + k00_205 * a[aOffset5 + 1];
			aOffset5 += 16;
			k00_205 = u[eOffset04 + (-2)] - u[eOffset23 + (-2)];
			k01_215 = u[eOffset04 + (-3)] - u[eOffset23 + (-3)];
			var _g52 = eOffset04 + (-2);
			var _g142 = u;
			_g142[_g52] = _g142[_g52] + u[eOffset23 + (-2)];
			var _g53 = eOffset04 + (-3);
			var _g143 = u;
			_g143[_g53] = _g143[_g53] + u[eOffset23 + (-3)];
			u[eOffset23 + (-2)] = k00_205 * a[aOffset5] - k01_215 * a[aOffset5 + 1];
			u[eOffset23 + (-3)] = k01_215 * a[aOffset5] + k00_205 * a[aOffset5 + 1];
			aOffset5 += 16;
			k00_205 = u[eOffset04 + (-4)] - u[eOffset23 + (-4)];
			k01_215 = u[eOffset04 + (-5)] - u[eOffset23 + (-5)];
			var _g54 = eOffset04 + (-4);
			var _g144 = u;
			_g144[_g54] = _g144[_g54] + u[eOffset23 + (-4)];
			var _g55 = eOffset04 + (-5);
			var _g145 = u;
			_g145[_g55] = _g145[_g55] + u[eOffset23 + (-5)];
			u[eOffset23 + (-4)] = k00_205 * a[aOffset5] - k01_215 * a[aOffset5 + 1];
			u[eOffset23 + (-5)] = k01_215 * a[aOffset5] + k00_205 * a[aOffset5 + 1];
			aOffset5 += 16;
			k00_205 = u[eOffset04 + (-6)] - u[eOffset23 + (-6)];
			k01_215 = u[eOffset04 + (-7)] - u[eOffset23 + (-7)];
			var _g56 = eOffset04 + (-6);
			var _g146 = u;
			_g146[_g56] = _g146[_g56] + u[eOffset23 + (-6)];
			var _g57 = eOffset04 + (-7);
			var _g147 = u;
			_g147[_g57] = _g147[_g57] + u[eOffset23 + (-7)];
			u[eOffset23 + (-6)] = k00_205 * a[aOffset5] - k01_215 * a[aOffset5 + 1];
			u[eOffset23 + (-7)] = k01_215 * a[aOffset5] + k00_205 * a[aOffset5 + 1];
			eOffset04 -= 8;
			eOffset23 -= 8;
			aOffset5 += 16;
		}
		var _g58 = 2;
		var _g148 = ld - 3 >> 1;
		while(_g58 < _g148) {
			var l = _g58++;
			var k0 = n >> l + 2;
			var k0_2 = k0 >> 1;
			var lim = 1 << l + 1;
			var _g59 = 0;
			var _g149 = lim;
			while(_g59 < _g149) {
				var i6 = _g59++;
				var d04 = n2 - 1 - k0 * i6;
				var k1 = 1 << l + 3;
				var aOffset6 = 0;
				var eOffset05 = d04;
				var eOffset24 = d04 + -k0_2;
				var i7 = (n >> l + 4 >> 2) + 1;
				while(--i7 > 0) {
					var k00_206 = u[eOffset05] - u[eOffset24];
					var k01_216 = u[eOffset05 + (-1)] - u[eOffset24 + (-1)];
					var _g60 = eOffset05;
					var _g150 = u;
					_g150[_g60] = _g150[_g60] + u[eOffset24];
					var _g61 = eOffset05 + (-1);
					var _g151 = u;
					_g151[_g61] = _g151[_g61] + u[eOffset24 + (-1)];
					u[eOffset24] = k00_206 * a[aOffset6] - k01_216 * a[aOffset6 + 1];
					u[eOffset24 + (-1)] = k01_216 * a[aOffset6] + k00_206 * a[aOffset6 + 1];
					aOffset6 += k1;
					k00_206 = u[eOffset05 + (-2)] - u[eOffset24 + (-2)];
					k01_216 = u[eOffset05 + (-3)] - u[eOffset24 + (-3)];
					var _g62 = eOffset05 + (-2);
					var _g152 = u;
					_g152[_g62] = _g152[_g62] + u[eOffset24 + (-2)];
					var _g63 = eOffset05 + (-3);
					var _g153 = u;
					_g153[_g63] = _g153[_g63] + u[eOffset24 + (-3)];
					u[eOffset24 + (-2)] = k00_206 * a[aOffset6] - k01_216 * a[aOffset6 + 1];
					u[eOffset24 + (-3)] = k01_216 * a[aOffset6] + k00_206 * a[aOffset6 + 1];
					aOffset6 += k1;
					k00_206 = u[eOffset05 + (-4)] - u[eOffset24 + (-4)];
					k01_216 = u[eOffset05 + (-5)] - u[eOffset24 + (-5)];
					var _g64 = eOffset05 + (-4);
					var _g154 = u;
					_g154[_g64] = _g154[_g64] + u[eOffset24 + (-4)];
					var _g65 = eOffset05 + (-5);
					var _g155 = u;
					_g155[_g65] = _g155[_g65] + u[eOffset24 + (-5)];
					u[eOffset24 + (-4)] = k00_206 * a[aOffset6] - k01_216 * a[aOffset6 + 1];
					u[eOffset24 + (-5)] = k01_216 * a[aOffset6] + k00_206 * a[aOffset6 + 1];
					aOffset6 += k1;
					k00_206 = u[eOffset05 + (-6)] - u[eOffset24 + (-6)];
					k01_216 = u[eOffset05 + (-7)] - u[eOffset24 + (-7)];
					var _g66 = eOffset05 + (-6);
					var _g156 = u;
					_g156[_g66] = _g156[_g66] + u[eOffset24 + (-6)];
					var _g67 = eOffset05 + (-7);
					var _g157 = u;
					_g157[_g67] = _g157[_g67] + u[eOffset24 + (-7)];
					u[eOffset24 + (-6)] = k00_206 * a[aOffset6] - k01_216 * a[aOffset6 + 1];
					u[eOffset24 + (-7)] = k01_216 * a[aOffset6] + k00_206 * a[aOffset6 + 1];
					eOffset05 -= 8;
					eOffset24 -= 8;
					aOffset6 += k1;
				}
			}
		}
		var _g210 = ld - 3 >> 1;
		var _g310 = ld - 6;
		while(_g210 < _g310) {
			var l1 = _g210++;
			var k01 = n >> l1 + 2;
			var k11 = 1 << l1 + 3;
			var k0_21 = k01 >> 1;
			var rlim = n >> l1 + 6;
			var lim1 = 1 << l1 + 1;
			var aOffset7 = 0;
			var i_off2 = n2 - 1;
			var r = rlim + 1;
			while(--r > 0) {
				var A0 = a[aOffset7];
				var A1 = a[aOffset7 + 1];
				var A2 = a[aOffset7 + k11];
				var A3 = a[aOffset7 + k11 + 1];
				var A4 = a[aOffset7 + k11 * 2];
				var A5 = a[aOffset7 + k11 * 2 + 1];
				var A6 = a[aOffset7 + k11 * 3];
				var A7 = a[aOffset7 + k11 * 3 + 1];
				var eeOffset02 = i_off2;
				var eeOffset22 = i_off2 + -k0_21;
				var i8 = lim1 + 1;
				while(--i8 > 0) {
					var k00 = u[eeOffset02] - u[eeOffset22];
					var k111 = u[eeOffset02 + (-1)] - u[eeOffset22 + (-1)];
					u[eeOffset02] = u[eeOffset02] + u[eeOffset22];
					u[eeOffset02 + (-1)] = u[eeOffset02 + (-1)] + u[eeOffset22 + (-1)];
					u[eeOffset22] = k00 * A0 - k111 * A1;
					u[eeOffset22 + (-1)] = k111 * A0 + k00 * A1;
					k00 = u[eeOffset02 + (-2)] - u[eeOffset22 + (-2)];
					k111 = u[eeOffset02 + (-3)] - u[eeOffset22 + (-3)];
					u[eeOffset02 + (-2)] = u[eeOffset02 + (-2)] + u[eeOffset22 + (-2)];
					u[eeOffset02 + (-3)] = u[eeOffset02 + (-3)] + u[eeOffset22 + (-3)];
					u[eeOffset22 + (-2)] = k00 * A2 - k111 * A3;
					u[eeOffset22 + (-3)] = k111 * A2 + k00 * A3;
					k00 = u[eeOffset02 + (-4)] - u[eeOffset22 + (-4)];
					k111 = u[eeOffset02 + (-5)] - u[eeOffset22 + (-5)];
					u[eeOffset02 + (-4)] = u[eeOffset02 + (-4)] + u[eeOffset22 + (-4)];
					u[eeOffset02 + (-5)] = u[eeOffset02 + (-5)] + u[eeOffset22 + (-5)];
					u[eeOffset22 + (-4)] = k00 * A4 - k111 * A5;
					u[eeOffset22 + (-5)] = k111 * A4 + k00 * A5;
					k00 = u[eeOffset02 + (-6)] - u[eeOffset22 + (-6)];
					k111 = u[eeOffset02 + (-7)] - u[eeOffset22 + (-7)];
					u[eeOffset02 + (-6)] = u[eeOffset02 + (-6)] + u[eeOffset22 + (-6)];
					u[eeOffset02 + (-7)] = u[eeOffset02 + (-7)] + u[eeOffset22 + (-7)];
					u[eeOffset22 + (-6)] = k00 * A6 - k111 * A7;
					u[eeOffset22 + (-7)] = k111 * A6 + k00 * A7;
					eeOffset02 -= k01;
					eeOffset22 -= k01;
				}
				aOffset7 += k11 * 4;
				i_off2 -= 8;
			}
		}
		var i_off3 = n2 - 1;
		var A21 = a[n >> 3];
		var zOffset = i_off3;
		var baseOffset = i_off3 - 16 * (n >> 5);
		while(zOffset > baseOffset) {
			var t0 = u[zOffset];
			var t1 = u[zOffset + (-8)];
			u[zOffset + (-8)] = t0 - t1;
			u[zOffset] = t0 + t1;
			t0 = u[zOffset + (-1)];
			t1 = u[zOffset + (-9)];
			u[zOffset + (-9)] = t0 - t1;
			u[zOffset + (-1)] = t0 + t1;
			t0 = u[zOffset + (-2)];
			t1 = u[zOffset + (-10)];
			var k001 = t0 - t1;
			u[zOffset + (-2)] = t0 + t1;
			t0 = u[zOffset + (-3)];
			t1 = u[zOffset + (-11)];
			var k112 = t0 - t1;
			u[zOffset + (-3)] = t0 + t1;
			u[zOffset + (-10)] = (k001 + k112) * A21;
			u[zOffset + (-11)] = (k112 - k001) * A21;
			t0 = u[zOffset + (-4)];
			t1 = u[zOffset + (-12)];
			k001 = t1 - t0;
			u[zOffset + (-4)] = t0 + t1;
			t0 = u[zOffset + (-5)];
			t1 = u[zOffset + (-13)];
			k112 = t0 - t1;
			u[zOffset + (-5)] = t0 + t1;
			u[zOffset + (-12)] = k112;
			u[zOffset + (-13)] = k001;
			t0 = u[zOffset + (-6)];
			t1 = u[zOffset + (-14)];
			k001 = t1 - t0;
			u[zOffset + (-6)] = t0 + t1;
			t0 = u[zOffset + (-7)];
			t1 = u[zOffset + (-15)];
			k112 = t0 - t1;
			u[zOffset + (-7)] = t0 + t1;
			u[zOffset + (-14)] = (k001 + k112) * A21;
			u[zOffset + (-15)] = (k001 - k112) * A21;
			var t01 = u[zOffset];
			var t11 = u[zOffset + (-4)];
			var k002 = t01 - t11;
			var y0 = t01 + t11;
			t01 = u[zOffset + (-2)];
			t11 = u[zOffset + (-6)];
			var y2 = t01 + t11;
			var k22 = t01 - t11;
			u[zOffset] = y0 + y2;
			u[zOffset + (-2)] = y0 - y2;
			var k33 = u[zOffset + (-3)] - u[zOffset + (-7)];
			u[zOffset + (-4)] = k002 + k33;
			u[zOffset + (-6)] = k002 - k33;
			t01 = u[zOffset + (-1)];
			t11 = u[zOffset + (-5)];
			var k113 = t01 - t11;
			var y1 = t01 + t11;
			var y3 = u[zOffset + (-3)] + u[zOffset + (-7)];
			u[zOffset + (-1)] = y1 + y3;
			u[zOffset + (-3)] = y1 - y3;
			u[zOffset + (-5)] = k113 - k22;
			u[zOffset + (-7)] = k113 + k22;
			var zOffset1 = zOffset - 8;
			var t02 = u[zOffset1];
			var t12 = u[zOffset1 + (-4)];
			var k003 = t02 - t12;
			var y01 = t02 + t12;
			t02 = u[zOffset1 + (-2)];
			t12 = u[zOffset1 + (-6)];
			var y21 = t02 + t12;
			var k221 = t02 - t12;
			u[zOffset1] = y01 + y21;
			u[zOffset1 + (-2)] = y01 - y21;
			var k331 = u[zOffset1 + (-3)] - u[zOffset1 + (-7)];
			u[zOffset1 + (-4)] = k003 + k331;
			u[zOffset1 + (-6)] = k003 - k331;
			t02 = u[zOffset1 + (-1)];
			t12 = u[zOffset1 + (-5)];
			var k114 = t02 - t12;
			var y11 = t02 + t12;
			var y31 = u[zOffset1 + (-3)] + u[zOffset1 + (-7)];
			u[zOffset1 + (-1)] = y11 + y31;
			u[zOffset1 + (-3)] = y11 - y31;
			u[zOffset1 + (-5)] = k114 - k221;
			u[zOffset1 + (-7)] = k114 + k221;
			zOffset -= 16;
		}
		var brOffset = 0;
		var dOffset01 = n4 - 4;
		var dOffset11 = n2 - 4;
		while(dOffset01 >= 0) {
			var k4 = bitReverse[brOffset];
			v[dOffset11 + 3] = u[k4];
			v[dOffset11 + 2] = u[k4 + 1];
			v[dOffset01 + 3] = u[k4 + 2];
			v[dOffset01 + 2] = u[k4 + 3];
			k4 = bitReverse[brOffset + 1];
			v[dOffset11 + 1] = u[k4];
			v[dOffset11] = u[k4 + 1];
			v[dOffset01 + 1] = u[k4 + 2];
			v[dOffset01] = u[k4 + 3];
			dOffset01 -= 4;
			dOffset11 -= 4;
			brOffset += 2;
		}
		var cOffset = 0;
		var dOffset2 = 0;
		var eOffset3 = n2 - 4;
		while(dOffset2 < eOffset3) {
			var a02 = v[dOffset2] - v[eOffset3 + 2];
			var a11 = v[dOffset2 + 1] + v[eOffset3 + 3];
			var b0 = c[cOffset + 1] * a02 + c[cOffset] * a11;
			var b1 = c[cOffset + 1] * a11 - c[cOffset] * a02;
			var b2 = v[dOffset2] + v[eOffset3 + 2];
			var b3 = v[dOffset2 + 1] - v[eOffset3 + 3];
			v[dOffset2] = b2 + b0;
			v[dOffset2 + 1] = b3 + b1;
			v[eOffset3 + 2] = b2 - b0;
			v[eOffset3 + 3] = b1 - b3;
			a02 = v[dOffset2 + 2] - v[eOffset3];
			a11 = v[dOffset2 + 3] + v[eOffset3 + 1];
			b0 = c[cOffset + 3] * a02 + c[cOffset + 2] * a11;
			b1 = c[cOffset + 3] * a11 - c[cOffset + 2] * a02;
			b2 = v[dOffset2 + 2] + v[eOffset3];
			b3 = v[dOffset2 + 3] - v[eOffset3 + 1];
			v[dOffset2 + 2] = b2 + b0;
			v[dOffset2 + 3] = b3 + b1;
			v[eOffset3] = b2 - b0;
			v[eOffset3 + 1] = b1 - b3;
			cOffset += 4;
			dOffset2 += 4;
			eOffset3 -= 4;
		}
		var bOffset = n2 - 8;
		var eOffset4 = n2 - 8;
		var dOffset02 = 0;
		var dOffset12 = n2 - 4;
		var dOffset21 = n2;
		var dOffset3 = n - 4;
		while(eOffset4 >= 0) {
			var p3 = buf2[eOffset4 + 6] * b[bOffset + 7] - buf2[eOffset4 + 7] * b[bOffset + 6];
			var p2 = -buf2[eOffset4 + 6] * b[bOffset + 6] - buf2[eOffset4 + 7] * b[bOffset + 7];
			buffer[dOffset02] = p3;
			buffer[dOffset12 + 3] = -p3;
			buffer[dOffset21] = p2;
			buffer[dOffset3 + 3] = p2;
			var p1 = buf2[eOffset4 + 4] * b[bOffset + 5] - buf2[eOffset4 + 5] * b[bOffset + 4];
			var p0 = -buf2[eOffset4 + 4] * b[bOffset + 4] - buf2[eOffset4 + 5] * b[bOffset + 5];
			buffer[dOffset02 + 1] = p1;
			buffer[dOffset12 + 2] = -p1;
			buffer[dOffset21 + 1] = p0;
			buffer[dOffset3 + 2] = p0;
			p3 = buf2[eOffset4 + 2] * b[bOffset + 3] - buf2[eOffset4 + 3] * b[bOffset + 2];
			p2 = -buf2[eOffset4 + 2] * b[bOffset + 2] - buf2[eOffset4 + 3] * b[bOffset + 3];
			buffer[dOffset02 + 2] = p3;
			buffer[dOffset12 + 1] = -p3;
			buffer[dOffset21 + 2] = p2;
			buffer[dOffset3 + 1] = p2;
			p1 = buf2[eOffset4] * b[bOffset + 1] - buf2[eOffset4 + 1] * b[bOffset];
			p0 = -buf2[eOffset4] * b[bOffset] - buf2[eOffset4 + 1] * b[bOffset + 1];
			buffer[dOffset02 + 3] = p1;
			buffer[dOffset12] = -p1;
			buffer[dOffset21 + 3] = p0;
			buffer[dOffset3] = p0;
			bOffset -= 8;
			eOffset4 -= 8;
			dOffset02 += 4;
			dOffset21 += 4;
			dOffset12 -= 4;
			dOffset3 -= 4;
		}
	}
	,decodePacket: function() {
		var result = this.decodeInitial();
		if(result == null) {
			return null;
		}
		var rest = this.decodePacketRest(result);
		return rest;
	}
	,decodeInitial: function() {
		this.channelBufferStart = this.channelBufferEnd = 0;
		while(true) {
			if(!this.decodeState.maybeStartPacket()) {
				return null;
			}
			if(this.decodeState.readBits(1) != 0) {
				while(true) {
					var _this = this.decodeState;
					var x;
					if(_this.bytesInSeg == 0 && (_this.lastSeg || _this.next() == 0)) {
						x = -1;
					} else {
						_this.bytesInSeg--;
						_this.inputPosition += 1;
						x = _this.input.readByte();
					}
					_this.validBits = 0;
					if(!(-1 != x)) {
						break;
					}
				}
				continue;
			}
			break;
		}
		var n = this.header.modes.length - 1;
		var log2_4 = [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];
		var i = this.decodeState.readBits(n < 16384 ? n < 16 ? log2_4[n] : n < 512 ? 5 + log2_4[n >> 5] : 10 + log2_4[n >> 10] : n < 16777216 ? n < 524288 ? 15 + log2_4[n >> 15] : 20 + log2_4[n >> 20] : n < 536870912 ? 25 + log2_4[n >> 25] : n < -2147483648 ? 30 + log2_4[n >> 30] : 0);
		if(i == -1 || i >= this.header.modes.length) {
			throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.SEEK_FAILED,null,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecoder.hx", lineNumber : 519, className : "kha.audio2.ogg.vorbis.VorbisDecoder", methodName : "decodeInitial"}));
		}
		var m = this.header.modes[i];
		var n1;
		var prev;
		var next;
		if(m.blockflag) {
			n1 = this.header.blocksize1;
			prev = this.decodeState.readBits(1);
			next = this.decodeState.readBits(1);
		} else {
			next = 0;
			prev = next;
			n1 = this.header.blocksize0;
		}
		var windowCenter = n1 >> 1;
		return { mode : i, left : m.blockflag && prev == 0 ? { start : n1 - this.header.blocksize0 >> 2, end : n1 + this.header.blocksize0 >> 2} : { start : 0, end : windowCenter}, right : m.blockflag && next == 0 ? { start : n1 * 3 - this.header.blocksize0 >> 2, end : n1 * 3 + this.header.blocksize0 >> 2} : { start : windowCenter, end : n1}};
	}
	,decodePacketRest: function(r) {
		var len = 0;
		var m = this.header.modes[r.mode];
		var this1 = new Array(256);
		var zeroChannel = this1;
		var this2 = new Array(256);
		var reallyZeroChannel = this2;
		var n = m.blockflag ? this.header.blocksize1 : this.header.blocksize0;
		var map = this.header.mapping[m.mapping];
		var n2 = n >> 1;
		var rangeList = [256,128,86,64];
		var codebooks = this.header.codebooks;
		var _g = 0;
		var _g1 = this.header.channel;
		while(_g < _g1) {
			var i = _g++;
			var s = map.chan[i].mux;
			zeroChannel[i] = false;
			var floor = this.header.floorConfig[map.submapFloor[s]];
			if(floor.type == 0) {
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_STREAM,null,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecoder.hx", lineNumber : 581, className : "kha.audio2.ogg.vorbis.VorbisDecoder", methodName : "decodePacketRest"}));
			} else {
				var g = floor.floor1;
				if(this.decodeState.readBits(1) != 0) {
					var fy = [];
					var this3 = new Array(256);
					var step2Flag = this3;
					var range = rangeList[g.floor1Multiplier - 1];
					var offset = 2;
					fy = this.finalY[i];
					var log2_4 = [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];
					fy[0] = this.decodeState.readBits((range < 16384 ? range < 16 ? log2_4[range] : range < 512 ? 5 + log2_4[range >> 5] : 10 + log2_4[range >> 10] : range < 16777216 ? range < 524288 ? 15 + log2_4[range >> 15] : 20 + log2_4[range >> 20] : range < 536870912 ? 25 + log2_4[range >> 25] : range < -2147483648 ? 30 + log2_4[range >> 30] : 0) - 1);
					var log2_41 = [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];
					fy[1] = this.decodeState.readBits((range < 16384 ? range < 16 ? log2_41[range] : range < 512 ? 5 + log2_41[range >> 5] : 10 + log2_41[range >> 10] : range < 16777216 ? range < 524288 ? 15 + log2_41[range >> 15] : 20 + log2_41[range >> 20] : range < 536870912 ? 25 + log2_41[range >> 25] : range < -2147483648 ? 30 + log2_41[range >> 30] : 0) - 1);
					var _g2 = 0;
					var _g11 = g.partitions;
					while(_g2 < _g11) {
						var j = _g2++;
						var pclass = g.partitionClassList[j];
						var cdim = g.classDimensions[pclass];
						var cbits = g.classSubclasses[pclass];
						var csub = (1 << cbits) - 1;
						var cval = 0;
						if(cbits != 0) {
							var c = codebooks[g.classMasterbooks[pclass]];
							var _this = this.decodeState;
							if(_this.validBits < 10) {
								_this.prepHuffman();
							}
							var i1 = c.fastHuffman[_this.acc & 1023];
							var val;
							if(i1 >= 0) {
								var l = c.codewordLengths[i1];
								_this.acc = _this.acc >>> l;
								_this.validBits -= l;
								if(_this.validBits < 0) {
									_this.validBits = 0;
									val = -1;
								} else {
									val = i1;
								}
							} else {
								val = _this.decodeScalarRaw(c);
							}
							if(c.sparse) {
								val = c.sortedValues[val];
							}
							cval = val;
						}
						var books = g.subclassBooks[pclass];
						var _g3 = 0;
						var _g12 = cdim;
						while(_g3 < _g12) {
							var k = _g3++;
							var book = books[cval & csub];
							cval >>= cbits;
							var tmp = offset++;
							var tmp1;
							if(book >= 0) {
								var _this1 = this.decodeState;
								var c1 = codebooks[book];
								if(_this1.validBits < 10) {
									_this1.prepHuffman();
								}
								var i2 = c1.fastHuffman[_this1.acc & 1023];
								var val1;
								if(i2 >= 0) {
									var l1 = c1.codewordLengths[i2];
									_this1.acc = _this1.acc >>> l1;
									_this1.validBits -= l1;
									if(_this1.validBits < 0) {
										_this1.validBits = 0;
										val1 = -1;
									} else {
										val1 = i2;
									}
								} else {
									val1 = _this1.decodeScalarRaw(c1);
								}
								if(c1.sparse) {
									val1 = c1.sortedValues[val1];
								}
								tmp1 = val1;
							} else {
								tmp1 = 0;
							}
							fy[tmp] = tmp1;
						}
					}
					if(this.decodeState.validBits == -1) {
						zeroChannel[i] = true;
						continue;
					}
					step2Flag[0] = step2Flag[1] = true;
					var naighbors = g.neighbors;
					var xlist = g.xlist;
					var _g21 = 2;
					var _g31 = g.values;
					while(_g21 < _g31) {
						var j1 = _g21++;
						var low = naighbors[j1][0];
						var high = naighbors[j1][1];
						var x0 = xlist[low];
						var y0 = fy[low];
						var dy = fy[high] - y0;
						var adx = xlist[high] - x0;
						var err = Math.abs(dy) * (xlist[j1] - x0);
						var off = err / adx | 0;
						var lowroom = dy < 0 ? y0 - off : y0 + off;
						var val2 = fy[j1];
						var highroom = range - lowroom;
						var room = highroom < lowroom ? highroom * 2 : lowroom * 2;
						if(val2 != 0) {
							step2Flag[low] = step2Flag[high] = true;
							step2Flag[j1] = true;
							if(val2 >= room) {
								if(highroom > lowroom) {
									fy[j1] = val2 - lowroom + lowroom;
								} else {
									fy[j1] = lowroom - val2 + highroom - 1;
								}
							} else if((val2 & 1) != 0) {
								fy[j1] = lowroom - (val2 + 1 >> 1);
							} else {
								fy[j1] = lowroom + (val2 >> 1);
							}
						} else {
							step2Flag[j1] = false;
							fy[j1] = lowroom;
						}
					}
					var _g4 = 0;
					var _g5 = g.values;
					while(_g4 < _g5) {
						var j2 = _g4++;
						if(!step2Flag[j2]) {
							fy[j2] = -1;
						}
					}
				} else {
					zeroChannel[i] = true;
				}
			}
		}
		var _g22 = 0;
		var _g32 = this.header.channel;
		while(_g22 < _g32) {
			var i3 = _g22++;
			reallyZeroChannel[i3] = zeroChannel[i3];
		}
		var _g41 = 0;
		var _g51 = map.couplingSteps;
		while(_g41 < _g51) {
			var i4 = _g41++;
			if(!zeroChannel[map.chan[i4].magnitude] || !zeroChannel[map.chan[i4].angle]) {
				zeroChannel[map.chan[i4].magnitude] = zeroChannel[map.chan[i4].angle] = false;
			}
		}
		var _g6 = 0;
		var _g7 = map.submaps;
		while(_g6 < _g7) {
			var i5 = _g6++;
			var this4 = new Array(this.header.channel);
			var residueBuffers = this4;
			var this5 = new Array(256);
			var doNotDecode = this5;
			var ch = 0;
			var _g61 = 0;
			var _g71 = this.header.channel;
			while(_g61 < _g71) {
				var j3 = _g61++;
				if(map.chan[j3].mux == i5) {
					if(zeroChannel[j3]) {
						doNotDecode[ch] = true;
						residueBuffers[ch] = null;
					} else {
						doNotDecode[ch] = false;
						residueBuffers[ch] = this.channelBuffers[j3];
					}
					++ch;
				}
			}
			var r1 = map.submapResidue[i5];
			var residue = this.header.residueConfig[r1];
			residue.decode(this.decodeState,this.header,residueBuffers,ch,n2,doNotDecode,this.channelBuffers);
		}
		var i6 = map.couplingSteps;
		var n21 = n >> 1;
		while(--i6 >= 0) {
			var m1 = this.channelBuffers[map.chan[i6].magnitude];
			var a = this.channelBuffers[map.chan[i6].angle];
			var _g8 = 0;
			var _g9 = n21;
			while(_g8 < _g9) {
				var j4 = _g8++;
				var a2;
				var m2;
				if(m1[j4] > 0) {
					if(a[j4] > 0) {
						m2 = m1[j4];
						a2 = m1[j4] - a[j4];
					} else {
						a2 = m1[j4];
						m2 = m1[j4] + a[j4];
					}
				} else if(a[j4] > 0) {
					m2 = m1[j4];
					a2 = m1[j4] + a[j4];
				} else {
					a2 = m1[j4];
					m2 = m1[j4] - a[j4];
				}
				m1[j4] = m2;
				a[j4] = a2;
			}
		}
		var _g81 = 0;
		var _g91 = this.header.channel;
		while(_g81 < _g91) {
			var i7 = _g81++;
			if(reallyZeroChannel[i7]) {
				var _g82 = 0;
				var _g92 = n21;
				while(_g82 < _g92) {
					var j5 = _g82++;
					this.channelBuffers[i7][j5] = 0;
				}
			} else {
				map.doFloor(this.header.floorConfig,i7,n,this.channelBuffers[i7],this.finalY[i7],null);
			}
		}
		var _g10 = 0;
		var _g111 = this.header.channel;
		while(_g10 < _g111) {
			var i8 = _g10++;
			this.inverseMdct(this.channelBuffers[i8],n,m.blockflag);
		}
		var _this2 = this.decodeState;
		while(_this2.bytesInSeg != 0 || !_this2.lastSeg && _this2.next() != 0) {
			_this2.bytesInSeg--;
			_this2.inputPosition += 1;
			_this2.input.readByte();
		}
		return this.decodeState.finishDecodePacket(this.previousLength,n,r);
	}
	,__class__: kha_audio2_ogg_vorbis_VorbisDecoder
};
var kha_audio2_ogg_vorbis_VorbisTools = function() { };
$hxClasses["kha.audio2.ogg.vorbis.VorbisTools"] = kha_audio2_ogg_vorbis_VorbisTools;
kha_audio2_ogg_vorbis_VorbisTools.__name__ = "kha.audio2.ogg.vorbis.VorbisTools";
kha_audio2_ogg_vorbis_VorbisTools.assert = function(b,p) {
	if(!b) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.OTHER,"",p));
	}
};
kha_audio2_ogg_vorbis_VorbisTools.neighbors = function(x,n) {
	var low = -1;
	var high = 65536;
	var plow = 0;
	var phigh = 0;
	var _g = 0;
	var _g1 = n;
	while(_g < _g1) {
		var i = _g++;
		if(x[i] > low && x[i] < x[n]) {
			plow = i;
			low = x[i];
		}
		if(x[i] < high && x[i] > x[n]) {
			phigh = i;
			high = x[i];
		}
	}
	return { low : plow, high : phigh};
};
kha_audio2_ogg_vorbis_VorbisTools.floatUnpack = function(x) {
	var mantissa = _$UInt_UInt_$Impl_$.toFloat(x & 2097151);
	var sign = x & -2147483648;
	var exp = (x & 2145386496) >>> 21;
	var res = sign != 0 ? -mantissa : mantissa;
	return res * Math.pow(2,exp - 788);
};
kha_audio2_ogg_vorbis_VorbisTools.bitReverse = function(n) {
	n = (n & -1431655766) >>> 1 | (n & 1431655765) << 1;
	n = (n & -858993460) >>> 2 | (n & 858993459) << 2;
	n = (n & -252645136) >>> 4 | (n & 252645135) << 4;
	n = (n & -16711936) >>> 8 | (n & 16711935) << 8;
	return n >>> 16 | n << 16;
};
kha_audio2_ogg_vorbis_VorbisTools.pointCompare = function(a,b) {
	if(a.x < b.x) {
		return -1;
	} else if(a.x > b.x) {
		return 1;
	} else {
		return 0;
	}
};
kha_audio2_ogg_vorbis_VorbisTools.uintAsc = function(a,b) {
	if(_$UInt_UInt_$Impl_$.gt(b,a)) {
		return -1;
	} else if(a == b) {
		return 0;
	} else {
		return 1;
	}
};
kha_audio2_ogg_vorbis_VorbisTools.lookup1Values = function(entries,dim) {
	var r = Math.exp(Math.log(entries) / dim) | 0;
	if((Math.pow(r + 1,dim) | 0) <= entries) {
		++r;
	}
	if(!(Math.pow(r + 1,dim) > entries)) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.OTHER,"",{ fileName : "kha/audio2/ogg/vorbis/VorbisTools.hx", lineNumber : 155, className : "kha.audio2.ogg.vorbis.VorbisTools", methodName : "lookup1Values"}));
	}
	if((Math.pow(r,dim) | 0) > entries) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.OTHER,"",{ fileName : "kha/audio2/ogg/vorbis/VorbisTools.hx", lineNumber : 156, className : "kha.audio2.ogg.vorbis.VorbisTools", methodName : "lookup1Values"}));
	}
	return r;
};
kha_audio2_ogg_vorbis_VorbisTools.computeWindow = function(n,$window) {
	var n2 = n >> 1;
	var _g = 0;
	var _g1 = n2;
	while(_g < _g1) {
		var i = _g++;
		$window[i] = Math.sin(1.5707963267948966 * kha_audio2_ogg_vorbis_VorbisTools.square(Math.sin((i + 0.5) / n2 * 0.5 * 3.14159265358979323846264)));
	}
};
kha_audio2_ogg_vorbis_VorbisTools.square = function(f) {
	return f * f;
};
kha_audio2_ogg_vorbis_VorbisTools.computeBitReverse = function(n,rev) {
	var log2_4 = [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];
	var ld = (n < 16384 ? n < 16 ? log2_4[n] : n < 512 ? 5 + log2_4[n >> 5] : 10 + log2_4[n >> 10] : n < 16777216 ? n < 524288 ? 15 + log2_4[n >> 15] : 20 + log2_4[n >> 20] : n < 536870912 ? 25 + log2_4[n >> 25] : n < -2147483648 ? 30 + log2_4[n >> 30] : 0) - 1;
	var n8 = n >> 3;
	var _g = 0;
	var _g1 = n8;
	while(_g < _g1) {
		var i = _g++;
		var n1 = i;
		n1 = (n1 & -1431655766) >>> 1 | (n1 & 1431655765) << 1;
		n1 = (n1 & -858993460) >>> 2 | (n1 & 858993459) << 2;
		n1 = (n1 & -252645136) >>> 4 | (n1 & 252645135) << 4;
		n1 = (n1 & -16711936) >>> 8 | (n1 & 16711935) << 8;
		rev[i] = (n1 >>> 16 | n1 << 16) >>> 32 - ld + 3 << 2;
	}
};
kha_audio2_ogg_vorbis_VorbisTools.computeTwiddleFactors = function(n,af,bf,cf) {
	var n4 = n >> 2;
	var n8 = n >> 3;
	var k2 = 0;
	var _g = 0;
	var _g1 = n4;
	while(_g < _g1) {
		var k = _g++;
		af[k2] = Math.cos(4 * k * 3.14159265358979323846264 / n);
		af[k2 + 1] = -Math.sin(4 * k * 3.14159265358979323846264 / n);
		bf[k2] = Math.cos((k2 + 1) * 3.14159265358979323846264 / n / 2) * 0.5;
		bf[k2 + 1] = Math.sin((k2 + 1) * 3.14159265358979323846264 / n / 2) * 0.5;
		k2 += 2;
	}
	var k21 = 0;
	var _g2 = 0;
	var _g3 = n8;
	while(_g2 < _g3) {
		var k1 = _g2++;
		cf[k21] = Math.cos(2 * (k21 + 1) * 3.14159265358979323846264 / n);
		cf[k21 + 1] = -Math.sin(2 * (k21 + 1) * 3.14159265358979323846264 / n);
		k21 += 2;
	}
};
kha_audio2_ogg_vorbis_VorbisTools.drawLine = function(output,x0,y0,x1,y1,n) {
	if(kha_audio2_ogg_vorbis_VorbisTools.integerDivideTable == null) {
		var this1 = new Array(32);
		kha_audio2_ogg_vorbis_VorbisTools.integerDivideTable = this1;
		var _g = 0;
		while(_g < 32) {
			var i = _g++;
			var this2 = kha_audio2_ogg_vorbis_VorbisTools.integerDivideTable;
			var this3 = new Array(64);
			this2[i] = this3;
			var _g1 = 1;
			while(_g1 < 64) {
				var j = _g1++;
				kha_audio2_ogg_vorbis_VorbisTools.integerDivideTable[i][j] = i / j | 0;
			}
		}
	}
	var dy = y1 - y0;
	var adx = x1 - x0;
	var ady = dy < 0 ? -dy : dy;
	var base;
	var x = x0;
	var y = y0;
	var err = 0;
	var sy;
	if(adx < 64 && ady < 32) {
		if(dy < 0) {
			base = -kha_audio2_ogg_vorbis_VorbisTools.integerDivideTable[ady][adx];
			sy = base - 1;
		} else {
			base = kha_audio2_ogg_vorbis_VorbisTools.integerDivideTable[ady][adx];
			sy = base + 1;
		}
	} else {
		base = dy / adx | 0;
		sy = dy < 0 ? base - 1 : base + 1;
	}
	ady -= (base < 0 ? -base : base) * adx;
	if(x1 > n) {
		x1 = n;
	}
	var _g2 = x;
	var _g11 = output;
	_g11[_g2] = _g11[_g2] * kha_audio2_ogg_vorbis_VorbisTools.INVERSE_DB_TABLE[y];
	var _g3 = x + 1;
	var _g12 = x1;
	while(_g3 < _g12) {
		var i1 = _g3++;
		err += ady;
		if(err >= adx) {
			err -= adx;
			y += sy;
		} else {
			y += base;
		}
		var _g4 = i1;
		var _g13 = output;
		_g13[_g4] = _g13[_g4] * kha_audio2_ogg_vorbis_VorbisTools.INVERSE_DB_TABLE[y];
	}
};
kha_audio2_ogg_vorbis_VorbisTools.predictPoint = function(x,x0,x1,y0,y1) {
	var dy = y1 - y0;
	var adx = x1 - x0;
	var err = Math.abs(dy) * (x - x0);
	var off = err / adx | 0;
	if(dy < 0) {
		return y0 - off;
	} else {
		return y0 + off;
	}
};
kha_audio2_ogg_vorbis_VorbisTools.emptyFloatVector = function(len) {
	var this1 = new Array(len);
	var vec = this1;
	return vec;
};
kha_audio2_ogg_vorbis_VorbisTools.copyVector = function(source) {
	var this1 = new Array(source.length);
	var dest = this1;
	var _g = 0;
	var _g1 = source.length;
	while(_g < _g1) {
		var i = _g++;
		dest[i] = source[i];
	}
	return dest;
};
var kha_audio2_ogg_vorbis_data_Codebook = function() {
};
$hxClasses["kha.audio2.ogg.vorbis.data.Codebook"] = kha_audio2_ogg_vorbis_data_Codebook;
kha_audio2_ogg_vorbis_data_Codebook.__name__ = "kha.audio2.ogg.vorbis.data.Codebook";
kha_audio2_ogg_vorbis_data_Codebook.read = function(decodeState) {
	var c = new kha_audio2_ogg_vorbis_data_Codebook();
	if(decodeState.readBits(8) != 66 || decodeState.readBits(8) != 67 || decodeState.readBits(8) != 86) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Codebook.hx", lineNumber : 40, className : "kha.audio2.ogg.vorbis.data.Codebook", methodName : "read"}));
	}
	var x = decodeState.readBits(8);
	c.dimensions = (decodeState.readBits(8) << 8) + x;
	var x1 = decodeState.readBits(8);
	var y = decodeState.readBits(8);
	c.entries = (decodeState.readBits(8) << 16) + (y << 8) + x1;
	var ordered = decodeState.readBits(1);
	c.sparse = ordered != 0 ? false : decodeState.readBits(1) != 0;
	var this1 = new Array(c.entries);
	var lengths = this1;
	if(!c.sparse) {
		c.codewordLengths = lengths;
	}
	var total = 0;
	if(ordered != 0) {
		var currentEntry = 0;
		var currentLength = decodeState.readBits(5) + 1;
		while(currentEntry < c.entries) {
			var limit = c.entries - currentEntry;
			var log2_4 = [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];
			var n = decodeState.readBits(limit < 16384 ? limit < 16 ? log2_4[limit] : limit < 512 ? 5 + log2_4[limit >> 5] : 10 + log2_4[limit >> 10] : limit < 16777216 ? limit < 524288 ? 15 + log2_4[limit >> 15] : 20 + log2_4[limit >> 20] : limit < 536870912 ? 25 + log2_4[limit >> 25] : limit < -2147483648 ? 30 + log2_4[limit >> 30] : 0);
			if(currentEntry + n > c.entries) {
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,"codebook entrys",{ fileName : "kha/audio2/ogg/vorbis/data/Codebook.hx", lineNumber : 67, className : "kha.audio2.ogg.vorbis.data.Codebook", methodName : "read"}));
			}
			var _g = 0;
			var _g1 = n;
			while(_g < _g1) {
				var i = _g++;
				lengths[currentEntry + i] = currentLength;
			}
			currentEntry += n;
			++currentLength;
		}
	} else {
		var _g2 = 0;
		var _g11 = c.entries;
		while(_g2 < _g11) {
			var j = _g2++;
			var present = c.sparse ? decodeState.readBits(1) : 1;
			if(present != 0) {
				lengths[j] = decodeState.readBits(5) + 1;
				++total;
			} else {
				lengths[j] = 255;
			}
		}
	}
	if(c.sparse && total >= c.entries >> 2) {
		c.codewordLengths = lengths;
		c.sparse = false;
	}
	var tmp;
	if(c.sparse) {
		tmp = total;
	} else {
		var sortedCount = 0;
		var _g3 = 0;
		var _g12 = c.entries;
		while(_g3 < _g12) {
			var j1 = _g3++;
			var l = lengths[j1];
			if(l > 10 && l != 255) {
				++sortedCount;
			}
		}
		tmp = sortedCount;
	}
	c.sortedEntries = tmp;
	var values = null;
	if(!c.sparse) {
		var this2 = new Array(c.entries);
		c.codewords = this2;
	} else {
		if(c.sortedEntries != 0) {
			var this3 = new Array(c.sortedEntries);
			c.codewordLengths = this3;
			var this4 = new Array(c.entries);
			c.codewords = this4;
			var this5 = new Array(c.entries);
			values = this5;
		}
		var size = c.entries + 64 * c.sortedEntries;
	}
	if(!c.computeCodewords(lengths,c.entries,values)) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,"compute codewords",{ fileName : "kha/audio2/ogg/vorbis/data/Codebook.hx", lineNumber : 120, className : "kha.audio2.ogg.vorbis.data.Codebook", methodName : "read"}));
	}
	if(c.sortedEntries != 0) {
		c.sortedCodewords = [];
		var this6 = new Array(c.sortedEntries);
		c.sortedValues = this6;
		c.computeSortedHuffman(lengths,values);
	}
	if(c.sparse) {
		values = null;
		c.codewords = null;
		lengths = null;
	}
	c.computeAcceleratedHuffman();
	c.lookupType = decodeState.readBits(4);
	if(c.lookupType > 2) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,"codebook lookup type",{ fileName : "kha/audio2/ogg/vorbis/data/Codebook.hx", lineNumber : 143, className : "kha.audio2.ogg.vorbis.data.Codebook", methodName : "read"}));
	}
	if(c.lookupType > 0) {
		var x2 = decodeState.readBits(32);
		var mantissa = _$UInt_UInt_$Impl_$.toFloat(x2 & 2097151);
		var sign = x2 & -2147483648;
		var exp = (x2 & 2145386496) >>> 21;
		var res = sign != 0 ? -mantissa : mantissa;
		c.minimumValue = res * Math.pow(2,exp - 788);
		var x3 = decodeState.readBits(32);
		var mantissa1 = _$UInt_UInt_$Impl_$.toFloat(x3 & 2097151);
		var sign1 = x3 & -2147483648;
		var exp1 = (x3 & 2145386496) >>> 21;
		var res1 = sign1 != 0 ? -mantissa1 : mantissa1;
		c.deltaValue = res1 * Math.pow(2,exp1 - 788);
		c.valueBits = decodeState.readBits(4) + 1;
		c.sequenceP = decodeState.readBits(1) != 0;
		if(c.lookupType == 1) {
			c.lookupValues = kha_audio2_ogg_vorbis_VorbisTools.lookup1Values(c.entries,c.dimensions);
		} else {
			c.lookupValues = c.entries * c.dimensions;
		}
		var this7 = new Array(c.lookupValues);
		var mults = this7;
		var _g4 = 0;
		var _g13 = c.lookupValues;
		while(_g4 < _g13) {
			var j2 = _g4++;
			var q = decodeState.readBits(c.valueBits);
			if(q == -1) {
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,"fail lookup",{ fileName : "kha/audio2/ogg/vorbis/data/Codebook.hx", lineNumber : 161, className : "kha.audio2.ogg.vorbis.data.Codebook", methodName : "read"}));
			}
			mults[j2] = q;
		}
		var this8 = new Array(c.lookupValues);
		c.multiplicands = this8;
		var _g21 = 0;
		var _g31 = c.lookupValues;
		while(_g21 < _g31) {
			var j3 = _g21++;
			c.multiplicands[j3] = mults[j3] * c.deltaValue + c.minimumValue;
		}
		if(c.lookupType == 2 && c.sequenceP) {
			var _g22 = 1;
			var _g32 = c.lookupValues;
			while(_g22 < _g32) {
				var j4 = _g22++;
				c.multiplicands[j4] = c.multiplicands[j4 - 1];
			}
			c.sequenceP = false;
		}
	}
	return c;
};
kha_audio2_ogg_vorbis_data_Codebook.prototype = {
	dimensions: null
	,entries: null
	,codewordLengths: null
	,minimumValue: null
	,deltaValue: null
	,valueBits: null
	,lookupType: null
	,sequenceP: null
	,sparse: null
	,lookupValues: null
	,multiplicands: null
	,codewords: null
	,fastHuffman: null
	,sortedCodewords: null
	,sortedValues: null
	,sortedEntries: null
	,addEntry: function(huffCode,symbol,count,len,values) {
		if(!this.sparse) {
			this.codewords[symbol] = huffCode;
		} else {
			this.codewords[count] = huffCode;
			this.codewordLengths[count] = len;
			values[count] = symbol;
		}
	}
	,includeInSort: function(len) {
		if(this.sparse) {
			if(len == 255) {
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.OTHER,"",{ fileName : "kha/audio2/ogg/vorbis/data/Codebook.hx", lineNumber : 201, className : "kha.audio2.ogg.vorbis.data.Codebook", methodName : "includeInSort"}));
			}
			return true;
		} else if(len == 255) {
			return false;
		} else if(len > 10) {
			return true;
		} else {
			return false;
		}
	}
	,computeCodewords: function(len,n,values) {
		var this1 = new Array(32);
		var available = this1;
		available[0] = 0;
		available[1] = 0;
		available[2] = 0;
		available[3] = 0;
		available[4] = 0;
		available[5] = 0;
		available[6] = 0;
		available[7] = 0;
		available[8] = 0;
		available[9] = 0;
		available[10] = 0;
		available[11] = 0;
		available[12] = 0;
		available[13] = 0;
		available[14] = 0;
		available[15] = 0;
		available[16] = 0;
		available[17] = 0;
		available[18] = 0;
		available[19] = 0;
		available[20] = 0;
		available[21] = 0;
		available[22] = 0;
		available[23] = 0;
		available[24] = 0;
		available[25] = 0;
		available[26] = 0;
		available[27] = 0;
		available[28] = 0;
		available[29] = 0;
		available[30] = 0;
		available[31] = 0;
		var k = 0;
		while(k < n) {
			if(len[k] < 255) {
				break;
			}
			++k;
		}
		if(k == n) {
			if(this.sortedEntries != 0) {
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.OTHER,"",{ fileName : "kha/audio2/ogg/vorbis/data/Codebook.hx", lineNumber : 228, className : "kha.audio2.ogg.vorbis.data.Codebook", methodName : "computeCodewords"}));
			}
			return true;
		}
		var m = 0;
		var count = m++;
		if(!this.sparse) {
			this.codewords[k] = 0;
		} else {
			this.codewords[count] = 0;
			this.codewordLengths[count] = len[k];
			values[count] = k;
		}
		var i = 0;
		while(++i <= len[k]) available[i] = 1 << 32 - i;
		i = k;
		while(++i < n) {
			var z = len[i];
			if(z == 255) {
				continue;
			}
			while(z > 0 && available[z] == 0) --z;
			if(z == 0) {
				return false;
			}
			var res = available[z];
			available[z] = 0;
			var n1 = res;
			n1 = (n1 & -1431655766) >>> 1 | (n1 & 1431655765) << 1;
			n1 = (n1 & -858993460) >>> 2 | (n1 & 858993459) << 2;
			n1 = (n1 & -252645136) >>> 4 | (n1 & 252645135) << 4;
			n1 = (n1 & -16711936) >>> 8 | (n1 & 16711935) << 8;
			var huffCode = n1 >>> 16 | n1 << 16;
			var count1 = m++;
			if(!this.sparse) {
				this.codewords[i] = huffCode;
			} else {
				this.codewords[count1] = huffCode;
				this.codewordLengths[count1] = len[i];
				values[count1] = i;
			}
			if(z != len[i]) {
				var y = len[i];
				while(y > z) {
					if(available[y] != 0) {
						throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.OTHER,"",{ fileName : "kha/audio2/ogg/vorbis/data/Codebook.hx", lineNumber : 272, className : "kha.audio2.ogg.vorbis.data.Codebook", methodName : "computeCodewords"}));
					}
					available[y] = res + (1 << 32 - y);
					--y;
				}
			}
		}
		return true;
	}
	,computeSortedHuffman: function(lengths,values) {
		if(!this.sparse) {
			var k = 0;
			var _g = 0;
			var _g1 = this.entries;
			while(_g < _g1) {
				var i = _g++;
				var len = lengths[i];
				var tmp;
				if(this.sparse) {
					if(len == 255) {
						throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.OTHER,"",{ fileName : "kha/audio2/ogg/vorbis/data/Codebook.hx", lineNumber : 201, className : "kha.audio2.ogg.vorbis.data.Codebook", methodName : "includeInSort"}));
					}
					tmp = true;
				} else {
					tmp = len == 255 ? false : len > 10;
				}
				if(tmp) {
					var n = this.codewords[i];
					n = (n & -1431655766) >>> 1 | (n & 1431655765) << 1;
					n = (n & -858993460) >>> 2 | (n & 858993459) << 2;
					n = (n & -252645136) >>> 4 | (n & 252645135) << 4;
					n = (n & -16711936) >>> 8 | (n & 16711935) << 8;
					this.sortedCodewords[k++] = n >>> 16 | n << 16;
				}
			}
			if(k != this.sortedEntries) {
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.OTHER,"",{ fileName : "kha/audio2/ogg/vorbis/data/Codebook.hx", lineNumber : 296, className : "kha.audio2.ogg.vorbis.data.Codebook", methodName : "computeSortedHuffman"}));
			}
		} else {
			var _g2 = 0;
			var _g11 = this.sortedEntries;
			while(_g2 < _g11) {
				var i1 = _g2++;
				var n1 = this.codewords[i1];
				n1 = (n1 & -1431655766) >>> 1 | (n1 & 1431655765) << 1;
				n1 = (n1 & -858993460) >>> 2 | (n1 & 858993459) << 2;
				n1 = (n1 & -252645136) >>> 4 | (n1 & 252645135) << 4;
				n1 = (n1 & -16711936) >>> 8 | (n1 & 16711935) << 8;
				this.sortedCodewords[i1] = n1 >>> 16 | n1 << 16;
			}
		}
		this.sortedCodewords[this.sortedEntries] = -1;
		this.sortedCodewords.sort(kha_audio2_ogg_vorbis_VorbisTools.uintAsc);
		var len1 = this.sparse ? this.sortedEntries : this.entries;
		var _g3 = 0;
		var _g12 = len1;
		while(_g3 < _g12) {
			var i2 = _g3++;
			var huffLen = this.sparse ? lengths[values[i2]] : lengths[i2];
			var tmp1;
			if(this.sparse) {
				if(huffLen == 255) {
					throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.OTHER,"",{ fileName : "kha/audio2/ogg/vorbis/data/Codebook.hx", lineNumber : 201, className : "kha.audio2.ogg.vorbis.data.Codebook", methodName : "includeInSort"}));
				}
				tmp1 = true;
			} else {
				tmp1 = huffLen == 255 ? false : huffLen > 10;
			}
			if(tmp1) {
				var n2 = this.codewords[i2];
				n2 = (n2 & -1431655766) >>> 1 | (n2 & 1431655765) << 1;
				n2 = (n2 & -858993460) >>> 2 | (n2 & 858993459) << 2;
				n2 = (n2 & -252645136) >>> 4 | (n2 & 252645135) << 4;
				n2 = (n2 & -16711936) >>> 8 | (n2 & 16711935) << 8;
				var code = n2 >>> 16 | n2 << 16;
				var x = 0;
				var n3 = this.sortedEntries;
				while(n3 > 1) {
					var m = x + (n3 >> 1);
					if(_$UInt_UInt_$Impl_$.gte(code,this.sortedCodewords[m])) {
						x = m;
						n3 -= n3 >> 1;
					} else {
						n3 >>= 1;
					}
				}
				if(this.sparse) {
					this.sortedValues[x] = values[i2];
					this.codewordLengths[x] = huffLen;
				} else {
					this.sortedValues[x] = i2;
				}
			}
		}
	}
	,computeAcceleratedHuffman: function() {
		var this1 = new Array(1024);
		this.fastHuffman = this1;
		this.fastHuffman[0] = -1;
		var _g = 0;
		var _g1 = 1024;
		while(_g < _g1) {
			var i = _g++;
			this.fastHuffman[i] = -1;
		}
		var len = this.sparse ? this.sortedEntries : this.entries;
		var _g2 = 0;
		var _g3 = len;
		while(_g2 < _g3) {
			var i1 = _g2++;
			if(this.codewordLengths[i1] <= 10) {
				var z;
				if(this.sparse) {
					var n = this.sortedCodewords[i1];
					n = (n & -1431655766) >>> 1 | (n & 1431655765) << 1;
					n = (n & -858993460) >>> 2 | (n & 858993459) << 2;
					n = (n & -252645136) >>> 4 | (n & 252645135) << 4;
					n = (n & -16711936) >>> 8 | (n & 16711935) << 8;
					z = n >>> 16 | n << 16;
				} else {
					z = this.codewords[i1];
				}
				while(z < 1024) {
					this.fastHuffman[z] = i1;
					z += 1 << this.codewordLengths[i1];
				}
			}
		}
	}
	,codebookDecode: function(decodeState,output,offset,len) {
		if(decodeState.validBits < 10) {
			decodeState.prepHuffman();
		}
		var i = this.fastHuffman[decodeState.acc & 1023];
		var val;
		if(i >= 0) {
			var l = this.codewordLengths[i];
			decodeState.acc = decodeState.acc >>> l;
			decodeState.validBits -= l;
			if(decodeState.validBits < 0) {
				decodeState.validBits = 0;
				val = -1;
			} else {
				val = i;
			}
		} else {
			val = decodeState.decodeScalarRaw(this);
		}
		if(this.sparse) {
			val = this.sortedValues[val];
		}
		var z = val;
		var lookupValues = this.lookupValues;
		var sequenceP = this.sequenceP;
		var multiplicands = this.multiplicands;
		var minimumValue = this.minimumValue;
		if(z < 0) {
			return false;
		}
		if(len > this.dimensions) {
			len = this.dimensions;
		}
		if(this.lookupType == 1) {
			var div = 1;
			var last = 0.0;
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i1 = _g++;
				var off = _$UInt_UInt_$Impl_$.toFloat(z / div | 0) % _$UInt_UInt_$Impl_$.toFloat(lookupValues) | 0;
				var val1 = multiplicands[off] + last;
				var _g2 = offset + i1;
				var _g11 = output;
				_g11[_g2] = _g11[_g2] + val1;
				if(sequenceP) {
					last = val1 + minimumValue;
				}
				div = div * lookupValues;
			}
			return true;
		}
		z *= this.dimensions;
		if(sequenceP) {
			var last1 = 0.0;
			var _g3 = 0;
			var _g12 = len;
			while(_g3 < _g12) {
				var i2 = _g3++;
				var val2 = multiplicands[z + i2] + last1;
				var _g4 = offset + i2;
				var _g13 = output;
				_g13[_g4] = _g13[_g4] + val2;
				last1 = val2 + minimumValue;
			}
		} else {
			var last2 = 0.0;
			var _g5 = 0;
			var _g14 = len;
			while(_g5 < _g14) {
				var i3 = _g5++;
				var _g6 = offset + i3;
				var _g15 = output;
				_g15[_g6] = _g15[_g6] + (multiplicands[z + i3] + last2);
			}
		}
		return true;
	}
	,codebookDecodeStep: function(decodeState,output,offset,len,step) {
		if(decodeState.validBits < 10) {
			decodeState.prepHuffman();
		}
		var i = this.fastHuffman[decodeState.acc & 1023];
		var val;
		if(i >= 0) {
			var l = this.codewordLengths[i];
			decodeState.acc = decodeState.acc >>> l;
			decodeState.validBits -= l;
			if(decodeState.validBits < 0) {
				decodeState.validBits = 0;
				val = -1;
			} else {
				val = i;
			}
		} else {
			val = decodeState.decodeScalarRaw(this);
		}
		if(this.sparse) {
			val = this.sortedValues[val];
		}
		var z = val;
		var last = 0.0;
		if(z < 0) {
			return false;
		}
		if(len > this.dimensions) {
			len = this.dimensions;
		}
		var lookupValues = this.lookupValues;
		var sequenceP = this.sequenceP;
		var multiplicands = this.multiplicands;
		if(this.lookupType == 1) {
			var div = 1;
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i1 = _g++;
				var off = _$UInt_UInt_$Impl_$.toFloat(z / div | 0) % _$UInt_UInt_$Impl_$.toFloat(lookupValues) | 0;
				var val1 = multiplicands[off] + last;
				var _g2 = offset + i1 * step;
				var _g11 = output;
				_g11[_g2] = _g11[_g2] + val1;
				if(sequenceP) {
					last = val1;
				}
				div = div * lookupValues;
			}
			return true;
		}
		z *= this.dimensions;
		var _g3 = 0;
		var _g12 = len;
		while(_g3 < _g12) {
			var i2 = _g3++;
			var val2 = multiplicands[z + i2] + last;
			var _g4 = offset + i2 * step;
			var _g13 = output;
			_g13[_g4] = _g13[_g4] + val2;
			if(sequenceP) {
				last = val2;
			}
		}
		return true;
	}
	,decodeStart: function(decodeState) {
		if(decodeState.validBits < 10) {
			decodeState.prepHuffman();
		}
		var i = this.fastHuffman[decodeState.acc & 1023];
		var val;
		if(i >= 0) {
			var l = this.codewordLengths[i];
			decodeState.acc = decodeState.acc >>> l;
			decodeState.validBits -= l;
			if(decodeState.validBits < 0) {
				decodeState.validBits = 0;
				val = -1;
			} else {
				val = i;
			}
		} else {
			val = decodeState.decodeScalarRaw(this);
		}
		if(this.sparse) {
			val = this.sortedValues[val];
		}
		return val;
	}
	,decodeDeinterleaveRepeat: function(decodeState,residueBuffers,ch,cInter,pInter,len,totalDecode) {
		var effective = this.dimensions;
		if(this.lookupType == 0) {
			throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_STREAM,null,{ fileName : "kha/audio2/ogg/vorbis/data/Codebook.hx", lineNumber : 488, className : "kha.audio2.ogg.vorbis.data.Codebook", methodName : "decodeDeinterleaveRepeat"}));
		}
		var multiplicands = this.multiplicands;
		var sequenceP = this.sequenceP;
		var lookupValues = this.lookupValues;
		while(totalDecode > 0) {
			var last = 0.0;
			if(decodeState.validBits < 10) {
				decodeState.prepHuffman();
			}
			var i = this.fastHuffman[decodeState.acc & 1023];
			var val;
			if(i >= 0) {
				var l = this.codewordLengths[i];
				decodeState.acc = decodeState.acc >>> l;
				decodeState.validBits -= l;
				if(decodeState.validBits < 0) {
					decodeState.validBits = 0;
					val = -1;
				} else {
					val = i;
				}
			} else {
				val = decodeState.decodeScalarRaw(this);
			}
			if(this.sparse) {
				val = this.sortedValues[val];
			}
			var z = val;
			if(z < 0) {
				if(decodeState.bytesInSeg == 0 && decodeState.lastSeg) {
					return null;
				}
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_STREAM,null,{ fileName : "kha/audio2/ogg/vorbis/data/Codebook.hx", lineNumber : 503, className : "kha.audio2.ogg.vorbis.data.Codebook", methodName : "decodeDeinterleaveRepeat"}));
			}
			if(cInter + pInter * ch + effective > len * ch) {
				effective = len * ch - (pInter * ch - cInter);
			}
			if(this.lookupType == 1) {
				var div = 1;
				if(sequenceP) {
					var _g = 0;
					var _g1 = effective;
					while(_g < _g1) {
						var i1 = _g++;
						var off = _$UInt_UInt_$Impl_$.toFloat(z / div | 0) % _$UInt_UInt_$Impl_$.toFloat(lookupValues) | 0;
						var val1 = multiplicands[off] + last;
						var _g2 = pInter;
						var _g11 = residueBuffers[cInter];
						_g11[_g2] = _g11[_g2] + val1;
						if(++cInter == ch) {
							cInter = 0;
							++pInter;
						}
						last = val1;
						div = div * lookupValues;
					}
				} else {
					var _g3 = 0;
					var _g12 = effective;
					while(_g3 < _g12) {
						var i2 = _g3++;
						var off1 = _$UInt_UInt_$Impl_$.toFloat(z / div | 0) % _$UInt_UInt_$Impl_$.toFloat(lookupValues) | 0;
						var val2 = multiplicands[off1] + last;
						var _g4 = pInter;
						var _g13 = residueBuffers[cInter];
						_g13[_g4] = _g13[_g4] + val2;
						if(++cInter == ch) {
							cInter = 0;
							++pInter;
						}
						div = div * lookupValues;
					}
				}
			} else {
				z *= this.dimensions;
				if(sequenceP) {
					var _g5 = 0;
					var _g14 = effective;
					while(_g5 < _g14) {
						var i3 = _g5++;
						var val3 = multiplicands[z + i3] + last;
						var _g6 = pInter;
						var _g15 = residueBuffers[cInter];
						_g15[_g6] = _g15[_g6] + val3;
						if(++cInter == ch) {
							cInter = 0;
							++pInter;
						}
						last = val3;
					}
				} else {
					var _g7 = 0;
					var _g16 = effective;
					while(_g7 < _g16) {
						var i4 = _g7++;
						var val4 = multiplicands[z + i4] + last;
						var _g8 = pInter;
						var _g17 = residueBuffers[cInter];
						_g17[_g8] = _g17[_g8] + val4;
						if(++cInter == ch) {
							cInter = 0;
							++pInter;
						}
					}
				}
			}
			totalDecode -= effective;
		}
		return { cInter : cInter, pInter : pInter};
	}
	,residueDecode: function(decodeState,target,offset,n,rtype) {
		if(rtype == 0) {
			var step = n / this.dimensions | 0;
			var _g = 0;
			var _g1 = step;
			while(_g < _g1) {
				var k = _g++;
				if(!this.codebookDecodeStep(decodeState,target,offset + k,n - offset - k,step)) {
					return false;
				}
			}
		} else {
			var k1 = 0;
			while(k1 < n) {
				if(!this.codebookDecode(decodeState,target,offset,n - k1)) {
					return false;
				}
				k1 += this.dimensions;
				offset += this.dimensions;
			}
		}
		return true;
	}
	,__class__: kha_audio2_ogg_vorbis_data_Codebook
};
var kha_audio2_ogg_vorbis_data_Comment = function() {
	this.data = new haxe_ds_StringMap();
};
$hxClasses["kha.audio2.ogg.vorbis.data.Comment"] = kha_audio2_ogg_vorbis_data_Comment;
kha_audio2_ogg_vorbis_data_Comment.__name__ = "kha.audio2.ogg.vorbis.data.Comment";
kha_audio2_ogg_vorbis_data_Comment.prototype = {
	data: null
	,get_title: function() {
		return this.getString("title");
	}
	,get_loopStart: function() {
		return Std.parseInt(this.getString("loopstart"));
	}
	,get_loopLength: function() {
		return Std.parseInt(this.getString("looplength"));
	}
	,get_version: function() {
		return this.getString("version");
	}
	,get_album: function() {
		return this.getString("album");
	}
	,get_organization: function() {
		return this.getString("organization");
	}
	,get_tracknumber: function() {
		return this.getString("tracknumber");
	}
	,get_performer: function() {
		return this.getString("performer");
	}
	,get_copyright: function() {
		return this.getString("copyright");
	}
	,get_license: function() {
		return this.getString("license");
	}
	,get_artist: function() {
		return this.getString("artist");
	}
	,get_description: function() {
		return this.getString("description");
	}
	,get_genre: function() {
		return this.getString("genre");
	}
	,get_date: function() {
		return this.getString("date");
	}
	,get_location: function() {
		return this.getString("location");
	}
	,get_contact: function() {
		return this.getString("contact");
	}
	,get_isrc: function() {
		return this.getString("isrc");
	}
	,get_artists: function() {
		return this.getArray("artist");
	}
	,add: function(key,value) {
		key = key.toLowerCase();
		var _this = this.data;
		if(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key)) {
			var _this1 = this.data;
			(__map_reserved[key] != null ? _this1.getReserved(key) : _this1.h[key]).push(value);
		} else {
			var v = [value];
			var _this2 = this.data;
			if(__map_reserved[key] != null) {
				_this2.setReserved(key,v);
			} else {
				_this2.h[key] = v;
			}
		}
	}
	,getString: function(key) {
		key = key.toLowerCase();
		var _this = this.data;
		if(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key)) {
			var _this1 = this.data;
			return (__map_reserved[key] != null ? _this1.getReserved(key) : _this1.h[key])[0];
		} else {
			return null;
		}
	}
	,getArray: function(key) {
		key = key.toLowerCase();
		var _this = this.data;
		if(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key)) {
			var _this1 = this.data;
			if(__map_reserved[key] != null) {
				return _this1.getReserved(key);
			} else {
				return _this1.h[key];
			}
		} else {
			return null;
		}
	}
	,__class__: kha_audio2_ogg_vorbis_data_Comment
	,__properties__: {get_artists:"get_artists",get_isrc:"get_isrc",get_contact:"get_contact",get_location:"get_location",get_date:"get_date",get_genre:"get_genre",get_description:"get_description",get_artist:"get_artist",get_license:"get_license",get_copyright:"get_copyright",get_performer:"get_performer",get_tracknumber:"get_tracknumber",get_organization:"get_organization",get_album:"get_album",get_version:"get_version",get_loopLength:"get_loopLength",get_loopStart:"get_loopStart",get_title:"get_title"}
};
var kha_audio2_ogg_vorbis_data_Floor = function() {
};
$hxClasses["kha.audio2.ogg.vorbis.data.Floor"] = kha_audio2_ogg_vorbis_data_Floor;
kha_audio2_ogg_vorbis_data_Floor.__name__ = "kha.audio2.ogg.vorbis.data.Floor";
kha_audio2_ogg_vorbis_data_Floor.read = function(decodeState,codebooks) {
	var floor = new kha_audio2_ogg_vorbis_data_Floor();
	floor.type = decodeState.readBits(16);
	if(floor.type > 1) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Floor.hx", lineNumber : 28, className : "kha.audio2.ogg.vorbis.data.Floor", methodName : "read"}));
	}
	if(floor.type == 0) {
		var g = floor.floor0 = new kha_audio2_ogg_vorbis_data_Floor0();
		g.order = decodeState.readBits(8);
		g.rate = decodeState.readBits(16);
		g.barkMapSize = decodeState.readBits(16);
		g.amplitudeBits = decodeState.readBits(6);
		g.amplitudeOffset = decodeState.readBits(8);
		g.numberOfBooks = decodeState.readBits(4) + 1;
		var _g = 0;
		var _g1 = g.numberOfBooks;
		while(_g < _g1) {
			var j = _g++;
			g.bookList[j] = decodeState.readBits(8);
		}
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.FEATURE_NOT_SUPPORTED,null,{ fileName : "kha/audio2/ogg/vorbis/data/Floor.hx", lineNumber : 41, className : "kha.audio2.ogg.vorbis.data.Floor", methodName : "read"}));
	} else {
		var p = [];
		var g1 = floor.floor1 = new kha_audio2_ogg_vorbis_data_Floor1();
		var maxClass = -1;
		g1.partitions = decodeState.readBits(5);
		var this1 = new Array(g1.partitions);
		g1.partitionClassList = this1;
		var _g2 = 0;
		var _g11 = g1.partitions;
		while(_g2 < _g11) {
			var j1 = _g2++;
			g1.partitionClassList[j1] = decodeState.readBits(4);
			if(g1.partitionClassList[j1] > maxClass) {
				maxClass = g1.partitionClassList[j1];
			}
		}
		var this2 = new Array(maxClass + 1);
		g1.classDimensions = this2;
		var this3 = new Array(maxClass + 1);
		g1.classMasterbooks = this3;
		var this4 = new Array(maxClass + 1);
		g1.classSubclasses = this4;
		var this5 = new Array(maxClass + 1);
		g1.subclassBooks = this5;
		var _g21 = 0;
		var _g3 = maxClass + 1;
		while(_g21 < _g3) {
			var j2 = _g21++;
			g1.classDimensions[j2] = decodeState.readBits(3) + 1;
			g1.classSubclasses[j2] = decodeState.readBits(2);
			if(g1.classSubclasses[j2] != 0) {
				g1.classMasterbooks[j2] = decodeState.readBits(8);
				if(g1.classMasterbooks[j2] >= codebooks.length) {
					throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Floor.hx", lineNumber : 64, className : "kha.audio2.ogg.vorbis.data.Floor", methodName : "read"}));
				}
			}
			var kl = 1 << g1.classSubclasses[j2];
			var this6 = g1.subclassBooks;
			var this7 = new Array(kl);
			this6[j2] = this7;
			var _g22 = 0;
			var _g31 = kl;
			while(_g22 < _g31) {
				var k = _g22++;
				g1.subclassBooks[j2][k] = decodeState.readBits(8) - 1;
				if(g1.subclassBooks[j2][k] >= codebooks.length) {
					throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Floor.hx", lineNumber : 73, className : "kha.audio2.ogg.vorbis.data.Floor", methodName : "read"}));
				}
			}
		}
		g1.floor1Multiplier = decodeState.readBits(2) + 1;
		g1.rangebits = decodeState.readBits(4);
		var this8 = new Array(250);
		g1.xlist = this8;
		g1.xlist[0] = 0;
		g1.xlist[1] = 1 << g1.rangebits;
		g1.values = 2;
		var _g4 = 0;
		var _g5 = g1.partitions;
		while(_g4 < _g5) {
			var j3 = _g4++;
			var c = g1.partitionClassList[j3];
			var _g41 = 0;
			var _g51 = g1.classDimensions[c];
			while(_g41 < _g51) {
				var k1 = _g41++;
				g1.xlist[g1.values] = decodeState.readBits(g1.rangebits);
				g1.values++;
			}
		}
		var _g6 = 0;
		var _g7 = g1.values;
		while(_g6 < _g7) {
			var j4 = _g6++;
			p.push(new kha_audio2_ogg_vorbis_data_IntPoint());
			p[j4].x = g1.xlist[j4];
			p[j4].y = j4;
		}
		p.sort(kha_audio2_ogg_vorbis_VorbisTools.pointCompare);
		var this9 = new Array(g1.values);
		g1.sortedOrder = this9;
		var _g8 = 0;
		var _g9 = g1.values;
		while(_g8 < _g9) {
			var j5 = _g8++;
			g1.sortedOrder[j5] = p[j5].y;
		}
		var this10 = new Array(g1.values);
		g1.neighbors = this10;
		var _g10 = 2;
		var _g111 = g1.values;
		while(_g10 < _g111) {
			var j6 = _g10++;
			var x = g1.xlist;
			var low = -1;
			var high = 65536;
			var plow = 0;
			var phigh = 0;
			var _g12 = 0;
			var _g13 = j6;
			while(_g12 < _g13) {
				var i = _g12++;
				if(x[i] > low && x[i] < x[j6]) {
					plow = i;
					low = x[i];
				}
				if(x[i] < high && x[i] > x[j6]) {
					phigh = i;
					high = x[i];
				}
			}
			var ne_low = plow;
			var ne_high = phigh;
			var this11 = g1.neighbors;
			var this12 = new Array(g1.values);
			this11[j6] = this12;
			g1.neighbors[j6][0] = ne_low;
			g1.neighbors[j6][1] = ne_high;
		}
	}
	return floor;
};
kha_audio2_ogg_vorbis_data_Floor.prototype = {
	floor0: null
	,floor1: null
	,type: null
	,__class__: kha_audio2_ogg_vorbis_data_Floor
};
var kha_audio2_ogg_vorbis_data_Floor0 = function() {
};
$hxClasses["kha.audio2.ogg.vorbis.data.Floor0"] = kha_audio2_ogg_vorbis_data_Floor0;
kha_audio2_ogg_vorbis_data_Floor0.__name__ = "kha.audio2.ogg.vorbis.data.Floor0";
kha_audio2_ogg_vorbis_data_Floor0.prototype = {
	order: null
	,rate: null
	,barkMapSize: null
	,amplitudeBits: null
	,amplitudeOffset: null
	,numberOfBooks: null
	,bookList: null
	,__class__: kha_audio2_ogg_vorbis_data_Floor0
};
var kha_audio2_ogg_vorbis_data_Floor1 = function() {
};
$hxClasses["kha.audio2.ogg.vorbis.data.Floor1"] = kha_audio2_ogg_vorbis_data_Floor1;
kha_audio2_ogg_vorbis_data_Floor1.__name__ = "kha.audio2.ogg.vorbis.data.Floor1";
kha_audio2_ogg_vorbis_data_Floor1.prototype = {
	partitions: null
	,partitionClassList: null
	,classDimensions: null
	,classSubclasses: null
	,classMasterbooks: null
	,subclassBooks: null
	,xlist: null
	,sortedOrder: null
	,neighbors: null
	,floor1Multiplier: null
	,rangebits: null
	,values: null
	,__class__: kha_audio2_ogg_vorbis_data_Floor1
};
var kha_audio2_ogg_vorbis_data_Header = function() {
};
$hxClasses["kha.audio2.ogg.vorbis.data.Header"] = kha_audio2_ogg_vorbis_data_Header;
kha_audio2_ogg_vorbis_data_Header.__name__ = "kha.audio2.ogg.vorbis.data.Header";
kha_audio2_ogg_vorbis_data_Header.read = function(decodeState) {
	var page = decodeState.page;
	page.start(decodeState);
	if((page.flag & 2) == 0) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,"not firstPage",{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 46, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	if((page.flag & 4) != 0) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,"lastPage",{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 49, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	if((page.flag & 1) != 0) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,"continuedPacket",{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 52, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	decodeState.firstPageValidate();
	decodeState.inputPosition += 1;
	if(decodeState.input.readByte() != 1) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,"decodeState head",{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 57, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	var header = new haxe_io_Bytes(new ArrayBuffer(6));
	var x;
	if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
		x = -1;
	} else {
		decodeState.bytesInSeg--;
		decodeState.inputPosition += 1;
		x = decodeState.input.readByte();
	}
	decodeState.validBits = 0;
	header.b[0] = x;
	var x1;
	if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
		x1 = -1;
	} else {
		decodeState.bytesInSeg--;
		decodeState.inputPosition += 1;
		x1 = decodeState.input.readByte();
	}
	decodeState.validBits = 0;
	header.b[1] = x1;
	var x2;
	if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
		x2 = -1;
	} else {
		decodeState.bytesInSeg--;
		decodeState.inputPosition += 1;
		x2 = decodeState.input.readByte();
	}
	decodeState.validBits = 0;
	header.b[2] = x2;
	var x3;
	if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
		x3 = -1;
	} else {
		decodeState.bytesInSeg--;
		decodeState.inputPosition += 1;
		x3 = decodeState.input.readByte();
	}
	decodeState.validBits = 0;
	header.b[3] = x3;
	var x4;
	if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
		x4 = -1;
	} else {
		decodeState.bytesInSeg--;
		decodeState.inputPosition += 1;
		x4 = decodeState.input.readByte();
	}
	decodeState.validBits = 0;
	header.b[4] = x4;
	var x5;
	if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
		x5 = -1;
	} else {
		decodeState.bytesInSeg--;
		decodeState.inputPosition += 1;
		x5 = decodeState.input.readByte();
	}
	decodeState.validBits = 0;
	header.b[5] = x5;
	if(header.toString() != "vorbis") {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,"vorbis header",{ fileName : "kha/audio2/ogg/vorbis/VorbisDecodeState.hx", lineNumber : 301, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "vorbisValidate"}));
	}
	decodeState.inputPosition += 4;
	var version = decodeState.input.readInt32();
	if(version != 0) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,"vorbis version : " + version,{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 66, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	var header1 = new kha_audio2_ogg_vorbis_data_Header();
	decodeState.inputPosition += 1;
	header1.channel = decodeState.input.readByte();
	if(header1.channel == 0) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,"no channel",{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 73, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	} else if(header1.channel > 16) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.TOO_MANY_CHANNELS,"too many channels",{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 75, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	decodeState.inputPosition += 4;
	header1.sampleRate = decodeState.input.readInt32();
	if(header1.sampleRate == 0) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,"no sampling rate",{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 80, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	decodeState.inputPosition += 4;
	header1.maximumBitRate = decodeState.input.readInt32();
	decodeState.inputPosition += 4;
	header1.nominalBitRate = decodeState.input.readInt32();
	decodeState.inputPosition += 4;
	header1.minimumBitRate = decodeState.input.readInt32();
	decodeState.inputPosition += 1;
	var x6 = decodeState.input.readByte();
	var log0 = x6 & 15;
	var log1 = x6 >> 4;
	header1.blocksize0 = 1 << log0;
	header1.blocksize1 = 1 << log1;
	if(log0 < 6 || log0 > 13) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 93, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	if(log1 < 6 || log1 > 13) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 96, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	if(log0 > log1) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 99, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	decodeState.inputPosition += 1;
	var x7 = decodeState.input.readByte();
	if((x7 & 1) == 0) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,null,{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 105, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	decodeState.page.start(decodeState);
	decodeState.startPacket();
	var len = 0;
	var output = new haxe_io_BytesOutput();
	while(true) {
		len = decodeState.next();
		if(!(len != 0)) {
			break;
		}
		decodeState.inputPosition += len;
		output.write(decodeState.input.read(len));
		decodeState.bytesInSeg = 0;
	}
	var packetInput = new haxe_io_BytesInput(output.getBytes());
	packetInput.readByte();
	packetInput.read(6);
	var vendorLength = packetInput.readInt32();
	header1.vendor = packetInput.readString(vendorLength);
	header1.comment = new kha_audio2_ogg_vorbis_data_Comment();
	var commentCount = packetInput.readInt32();
	var _g = 0;
	var _g1 = commentCount;
	while(_g < _g1) {
		var i = _g++;
		var n = packetInput.readInt32();
		var str = packetInput.readString(n);
		var splitter = str.indexOf("=");
		if(splitter != -1) {
			header1.comment.add(str.substring(0,splitter),str.substring(splitter + 1));
		}
	}
	var x8 = packetInput.readByte();
	if((x8 & 1) == 0) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 141, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	decodeState.startPacket();
	var x9;
	if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
		x9 = -1;
	} else {
		decodeState.bytesInSeg--;
		decodeState.inputPosition += 1;
		x9 = decodeState.input.readByte();
	}
	decodeState.validBits = 0;
	if(x9 != 5) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,"setup packet",{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 149, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	var header2 = new haxe_io_Bytes(new ArrayBuffer(6));
	var x10;
	if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
		x10 = -1;
	} else {
		decodeState.bytesInSeg--;
		decodeState.inputPosition += 1;
		x10 = decodeState.input.readByte();
	}
	decodeState.validBits = 0;
	header2.b[0] = x10;
	var x11;
	if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
		x11 = -1;
	} else {
		decodeState.bytesInSeg--;
		decodeState.inputPosition += 1;
		x11 = decodeState.input.readByte();
	}
	decodeState.validBits = 0;
	header2.b[1] = x11;
	var x12;
	if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
		x12 = -1;
	} else {
		decodeState.bytesInSeg--;
		decodeState.inputPosition += 1;
		x12 = decodeState.input.readByte();
	}
	decodeState.validBits = 0;
	header2.b[2] = x12;
	var x13;
	if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
		x13 = -1;
	} else {
		decodeState.bytesInSeg--;
		decodeState.inputPosition += 1;
		x13 = decodeState.input.readByte();
	}
	decodeState.validBits = 0;
	header2.b[3] = x13;
	var x14;
	if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
		x14 = -1;
	} else {
		decodeState.bytesInSeg--;
		decodeState.inputPosition += 1;
		x14 = decodeState.input.readByte();
	}
	decodeState.validBits = 0;
	header2.b[4] = x14;
	var x15;
	if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
		x15 = -1;
	} else {
		decodeState.bytesInSeg--;
		decodeState.inputPosition += 1;
		x15 = decodeState.input.readByte();
	}
	decodeState.validBits = 0;
	header2.b[5] = x15;
	if(header2.toString() != "vorbis") {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,"vorbis header",{ fileName : "kha/audio2/ogg/vorbis/VorbisDecodeState.hx", lineNumber : 301, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "vorbisValidate"}));
	}
	var codebookCount = decodeState.readBits(8) + 1;
	var this1 = new Array(codebookCount);
	header1.codebooks = this1;
	var _g2 = 0;
	var _g11 = codebookCount;
	while(_g2 < _g11) {
		var i1 = _g2++;
		header1.codebooks[i1] = kha_audio2_ogg_vorbis_data_Codebook.read(decodeState);
	}
	x7 = decodeState.readBits(6) + 1;
	var _g21 = 0;
	var _g3 = x7;
	while(_g21 < _g3) {
		var i2 = _g21++;
		if(decodeState.readBits(16) != 0) {
			throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 165, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
		}
	}
	var floorCount = decodeState.readBits(6) + 1;
	var this2 = new Array(floorCount);
	header1.floorConfig = this2;
	var _g4 = 0;
	var _g5 = floorCount;
	while(_g4 < _g5) {
		var i3 = _g4++;
		header1.floorConfig[i3] = kha_audio2_ogg_vorbis_data_Floor.read(decodeState,header1.codebooks);
	}
	var residueCount = decodeState.readBits(6) + 1;
	var this3 = new Array(residueCount);
	header1.residueConfig = this3;
	var _g6 = 0;
	var _g7 = residueCount;
	while(_g6 < _g7) {
		var i4 = _g6++;
		header1.residueConfig[i4] = kha_audio2_ogg_vorbis_data_Residue.read(decodeState,header1.codebooks);
	}
	var mappingCount = decodeState.readBits(6) + 1;
	var this4 = new Array(mappingCount);
	header1.mapping = this4;
	var _g8 = 0;
	var _g9 = mappingCount;
	while(_g8 < _g9) {
		var i5 = _g8++;
		var map = kha_audio2_ogg_vorbis_data_Mapping.read(decodeState,header1.channel);
		header1.mapping[i5] = map;
		var _g81 = 0;
		var _g91 = map.submaps;
		while(_g81 < _g91) {
			var j = _g81++;
			if(map.submapFloor[j] >= header1.floorConfig.length) {
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 191, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
			}
			if(map.submapResidue[j] >= header1.residueConfig.length) {
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 194, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
			}
		}
	}
	var modeCount = decodeState.readBits(6) + 1;
	var this5 = new Array(modeCount);
	header1.modes = this5;
	var _g10 = 0;
	var _g111 = modeCount;
	while(_g10 < _g111) {
		var i6 = _g10++;
		var mode = kha_audio2_ogg_vorbis_data_Mode.read(decodeState);
		header1.modes[i6] = mode;
		if(mode.mapping >= header1.mapping.length) {
			throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 205, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
		}
	}
	while(decodeState.bytesInSeg != 0 || !decodeState.lastSeg && decodeState.next() != 0) {
		decodeState.bytesInSeg--;
		decodeState.inputPosition += 1;
		decodeState.input.readByte();
	}
	return header1;
};
kha_audio2_ogg_vorbis_data_Header.prototype = {
	maximumBitRate: null
	,nominalBitRate: null
	,minimumBitRate: null
	,sampleRate: null
	,channel: null
	,blocksize0: null
	,blocksize1: null
	,codebooks: null
	,floorConfig: null
	,residueConfig: null
	,mapping: null
	,modes: null
	,comment: null
	,vendor: null
	,__class__: kha_audio2_ogg_vorbis_data_Header
};
var kha_audio2_ogg_vorbis_data_IntPoint = function() {
};
$hxClasses["kha.audio2.ogg.vorbis.data.IntPoint"] = kha_audio2_ogg_vorbis_data_IntPoint;
kha_audio2_ogg_vorbis_data_IntPoint.__name__ = "kha.audio2.ogg.vorbis.data.IntPoint";
kha_audio2_ogg_vorbis_data_IntPoint.prototype = {
	x: null
	,y: null
	,__class__: kha_audio2_ogg_vorbis_data_IntPoint
};
var kha_audio2_ogg_vorbis_data_Mapping = function() {
};
$hxClasses["kha.audio2.ogg.vorbis.data.Mapping"] = kha_audio2_ogg_vorbis_data_Mapping;
kha_audio2_ogg_vorbis_data_Mapping.__name__ = "kha.audio2.ogg.vorbis.data.Mapping";
kha_audio2_ogg_vorbis_data_Mapping.read = function(decodeState,channels) {
	var m = new kha_audio2_ogg_vorbis_data_Mapping();
	var mappingType = decodeState.readBits(16);
	if(mappingType != 0) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,"mapping type " + mappingType,{ fileName : "kha/audio2/ogg/vorbis/data/Mapping.hx", lineNumber : 22, className : "kha.audio2.ogg.vorbis.data.Mapping", methodName : "read"}));
	}
	var this1 = new Array(channels);
	m.chan = this1;
	var _g = 0;
	var _g1 = channels;
	while(_g < _g1) {
		var j = _g++;
		m.chan[j] = new kha_audio2_ogg_vorbis_data_MappingChannel();
	}
	if(decodeState.readBits(1) != 0) {
		m.submaps = decodeState.readBits(4) + 1;
	} else {
		m.submaps = 1;
	}
	if(decodeState.readBits(1) != 0) {
		m.couplingSteps = decodeState.readBits(8) + 1;
		var _g2 = 0;
		var _g3 = m.couplingSteps;
		while(_g2 < _g3) {
			var k = _g2++;
			var n = channels - 1;
			var log2_4 = [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];
			m.chan[k].magnitude = decodeState.readBits(n < 16384 ? n < 16 ? log2_4[n] : n < 512 ? 5 + log2_4[n >> 5] : 10 + log2_4[n >> 10] : n < 16777216 ? n < 524288 ? 15 + log2_4[n >> 15] : 20 + log2_4[n >> 20] : n < 536870912 ? 25 + log2_4[n >> 25] : n < -2147483648 ? 30 + log2_4[n >> 30] : 0);
			var n1 = channels - 1;
			var log2_41 = [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];
			m.chan[k].angle = decodeState.readBits(n1 < 16384 ? n1 < 16 ? log2_41[n1] : n1 < 512 ? 5 + log2_41[n1 >> 5] : 10 + log2_41[n1 >> 10] : n1 < 16777216 ? n1 < 524288 ? 15 + log2_41[n1 >> 15] : 20 + log2_41[n1 >> 20] : n1 < 536870912 ? 25 + log2_41[n1 >> 25] : n1 < -2147483648 ? 30 + log2_41[n1 >> 30] : 0);
			if(m.chan[k].magnitude >= channels) {
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Mapping.hx", lineNumber : 46, className : "kha.audio2.ogg.vorbis.data.Mapping", methodName : "read"}));
			}
			if(m.chan[k].angle >= channels) {
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Mapping.hx", lineNumber : 49, className : "kha.audio2.ogg.vorbis.data.Mapping", methodName : "read"}));
			}
			if(m.chan[k].magnitude == m.chan[k].angle) {
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Mapping.hx", lineNumber : 52, className : "kha.audio2.ogg.vorbis.data.Mapping", methodName : "read"}));
			}
		}
	} else {
		m.couplingSteps = 0;
	}
	if(decodeState.readBits(2) != 0) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Mapping.hx", lineNumber : 61, className : "kha.audio2.ogg.vorbis.data.Mapping", methodName : "read"}));
	}
	if(m.submaps > 1) {
		var _g21 = 0;
		var _g31 = channels;
		while(_g21 < _g31) {
			var j1 = _g21++;
			m.chan[j1].mux = decodeState.readBits(4);
			if(m.chan[j1].mux >= m.submaps) {
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Mapping.hx", lineNumber : 67, className : "kha.audio2.ogg.vorbis.data.Mapping", methodName : "read"}));
			}
		}
	} else {
		var _g22 = 0;
		var _g32 = channels;
		while(_g22 < _g32) {
			var j2 = _g22++;
			m.chan[j2].mux = 0;
		}
	}
	var this2 = new Array(m.submaps);
	m.submapFloor = this2;
	var this3 = new Array(m.submaps);
	m.submapResidue = this3;
	var _g23 = 0;
	var _g33 = m.submaps;
	while(_g23 < _g33) {
		var j3 = _g23++;
		decodeState.readBits(8);
		m.submapFloor[j3] = decodeState.readBits(8);
		m.submapResidue[j3] = decodeState.readBits(8);
	}
	return m;
};
kha_audio2_ogg_vorbis_data_Mapping.prototype = {
	couplingSteps: null
	,chan: null
	,submaps: null
	,submapFloor: null
	,submapResidue: null
	,doFloor: function(floors,i,n,target,finalY,step2Flag) {
		var n2 = n >> 1;
		var s = this.chan[i].mux;
		var floor;
		var floor1 = floors[this.submapFloor[s]];
		if(floor1.type == 0) {
			throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_STREAM,null,{ fileName : "kha/audio2/ogg/vorbis/data/Mapping.hx", lineNumber : 94, className : "kha.audio2.ogg.vorbis.data.Mapping", methodName : "doFloor"}));
		} else {
			var g = floor1.floor1;
			var lx = 0;
			var ly = finalY[0] * g.floor1Multiplier;
			var _g = 1;
			var _g1 = g.values;
			while(_g < _g1) {
				var q = _g++;
				var j = g.sortedOrder[q];
				if(finalY[j] >= 0) {
					var hy = finalY[j] * g.floor1Multiplier;
					var hx = g.xlist[j];
					kha_audio2_ogg_vorbis_VorbisTools.drawLine(target,lx,ly,hx,hy,n2);
					lx = hx;
					ly = hy;
				}
			}
			if(lx < n2) {
				var _g2 = lx;
				var _g3 = n2;
				while(_g2 < _g3) {
					var j1 = _g2++;
					var _g21 = j1;
					var _g31 = target;
					_g31[_g21] = _g31[_g21] * kha_audio2_ogg_vorbis_VorbisTools.INVERSE_DB_TABLE[ly];
				}
			}
		}
	}
	,__class__: kha_audio2_ogg_vorbis_data_Mapping
};
var kha_audio2_ogg_vorbis_data_MappingChannel = function() {
};
$hxClasses["kha.audio2.ogg.vorbis.data.MappingChannel"] = kha_audio2_ogg_vorbis_data_MappingChannel;
kha_audio2_ogg_vorbis_data_MappingChannel.__name__ = "kha.audio2.ogg.vorbis.data.MappingChannel";
kha_audio2_ogg_vorbis_data_MappingChannel.prototype = {
	magnitude: null
	,angle: null
	,mux: null
	,__class__: kha_audio2_ogg_vorbis_data_MappingChannel
};
var kha_audio2_ogg_vorbis_data_Mode = function() {
};
$hxClasses["kha.audio2.ogg.vorbis.data.Mode"] = kha_audio2_ogg_vorbis_data_Mode;
kha_audio2_ogg_vorbis_data_Mode.__name__ = "kha.audio2.ogg.vorbis.data.Mode";
kha_audio2_ogg_vorbis_data_Mode.read = function(decodeState) {
	var m = new kha_audio2_ogg_vorbis_data_Mode();
	m.blockflag = decodeState.readBits(1) != 0;
	m.windowtype = decodeState.readBits(16);
	m.transformtype = decodeState.readBits(16);
	m.mapping = decodeState.readBits(8);
	if(m.windowtype != 0) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Mode.hx", lineNumber : 22, className : "kha.audio2.ogg.vorbis.data.Mode", methodName : "read"}));
	}
	if(m.transformtype != 0) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Mode.hx", lineNumber : 25, className : "kha.audio2.ogg.vorbis.data.Mode", methodName : "read"}));
	}
	return m;
};
kha_audio2_ogg_vorbis_data_Mode.prototype = {
	blockflag: null
	,mapping: null
	,windowtype: null
	,transformtype: null
	,__class__: kha_audio2_ogg_vorbis_data_Mode
};
var kha_audio2_ogg_vorbis_data_Page = function() {
};
$hxClasses["kha.audio2.ogg.vorbis.data.Page"] = kha_audio2_ogg_vorbis_data_Page;
kha_audio2_ogg_vorbis_data_Page.__name__ = "kha.audio2.ogg.vorbis.data.Page";
kha_audio2_ogg_vorbis_data_Page.prototype = {
	flag: null
	,clone: function() {
		var page = new kha_audio2_ogg_vorbis_data_Page();
		page.flag = this.flag;
		return page;
	}
	,start: function(decodeState) {
		var tmp;
		var tmp1;
		var tmp2;
		decodeState.inputPosition += 1;
		if(decodeState.input.readByte() == 79) {
			decodeState.inputPosition += 1;
			tmp2 = decodeState.input.readByte() != 103;
		} else {
			tmp2 = true;
		}
		if(!tmp2) {
			decodeState.inputPosition += 1;
			tmp1 = decodeState.input.readByte() != 103;
		} else {
			tmp1 = true;
		}
		if(!tmp1) {
			decodeState.inputPosition += 1;
			tmp = decodeState.input.readByte() != 83;
		} else {
			tmp = true;
		}
		if(tmp) {
			throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.MISSING_CAPTURE_PATTERN,null,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecodeState.hx", lineNumber : 324, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "capturePattern"}));
		}
		this.startWithoutCapturePattern(decodeState);
	}
	,startWithoutCapturePattern: function(decodeState) {
		decodeState.inputPosition += 1;
		var version = decodeState.input.readByte();
		if(version != 0) {
			throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_STREAM_STRUCTURE_VERSION,"" + version,{ fileName : "kha/audio2/ogg/vorbis/data/Page.hx", lineNumber : 34, className : "kha.audio2.ogg.vorbis.data.Page", methodName : "startWithoutCapturePattern"}));
		}
		decodeState.inputPosition += 1;
		this.flag = decodeState.input.readByte();
		decodeState.inputPosition += 4;
		var loc0 = decodeState.input.readInt32();
		decodeState.inputPosition += 4;
		var loc1 = decodeState.input.readInt32();
		decodeState.inputPosition += 4;
		decodeState.input.readInt32();
		decodeState.inputPosition += 4;
		decodeState.input.readInt32();
		decodeState.inputPosition += 4;
		decodeState.input.readInt32();
		decodeState.setup(loc0,loc1);
	}
	,__class__: kha_audio2_ogg_vorbis_data_Page
};
var kha_audio2_ogg_vorbis_data_PageFlag = function() { };
$hxClasses["kha.audio2.ogg.vorbis.data.PageFlag"] = kha_audio2_ogg_vorbis_data_PageFlag;
kha_audio2_ogg_vorbis_data_PageFlag.__name__ = "kha.audio2.ogg.vorbis.data.PageFlag";
var kha_audio2_ogg_vorbis_data_ProbedPage = function() {
};
$hxClasses["kha.audio2.ogg.vorbis.data.ProbedPage"] = kha_audio2_ogg_vorbis_data_ProbedPage;
kha_audio2_ogg_vorbis_data_ProbedPage.__name__ = "kha.audio2.ogg.vorbis.data.ProbedPage";
kha_audio2_ogg_vorbis_data_ProbedPage.prototype = {
	pageStart: null
	,pageEnd: null
	,afterPreviousPageStart: null
	,firstDecodedSample: null
	,lastDecodedSample: null
	,__class__: kha_audio2_ogg_vorbis_data_ProbedPage
};
var kha_audio2_ogg_vorbis_data_ReaderError = function(type,message,posInfos) {
	if(message == null) {
		message = "";
	}
	this.type = type;
	this.message = message;
	this.posInfos = posInfos;
};
$hxClasses["kha.audio2.ogg.vorbis.data.ReaderError"] = kha_audio2_ogg_vorbis_data_ReaderError;
kha_audio2_ogg_vorbis_data_ReaderError.__name__ = "kha.audio2.ogg.vorbis.data.ReaderError";
kha_audio2_ogg_vorbis_data_ReaderError.prototype = {
	type: null
	,message: null
	,posInfos: null
	,__class__: kha_audio2_ogg_vorbis_data_ReaderError
};
var kha_audio2_ogg_vorbis_data_ReaderErrorType = $hxEnums["kha.audio2.ogg.vorbis.data.ReaderErrorType"] = { __ename__ : "kha.audio2.ogg.vorbis.data.ReaderErrorType", __constructs__ : ["NEED_MORE_DATA","INVALID_API_MIXING","OUTOFMEM","FEATURE_NOT_SUPPORTED","TOO_MANY_CHANNELS","FILE_OPEN_FAILURE","SEEK_WITHOUT_LENGTH","UNEXPECTED_EOF","SEEK_INVALID","INVALID_SETUP","INVALID_STREAM","MISSING_CAPTURE_PATTERN","INVALID_STREAM_STRUCTURE_VERSION","CONTINUED_PACKET_FLAG_INVALID","INCORRECT_STREAM_SERIAL_NUMBER","INVALID_FIRST_PAGE","BAD_PACKET_TYPE","CANT_FIND_LAST_PAGE","SEEK_FAILED","OTHER"]
	,NEED_MORE_DATA: {_hx_index:0,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,INVALID_API_MIXING: {_hx_index:1,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,OUTOFMEM: {_hx_index:2,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,FEATURE_NOT_SUPPORTED: {_hx_index:3,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,TOO_MANY_CHANNELS: {_hx_index:4,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,FILE_OPEN_FAILURE: {_hx_index:5,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,SEEK_WITHOUT_LENGTH: {_hx_index:6,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,UNEXPECTED_EOF: {_hx_index:7,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,SEEK_INVALID: {_hx_index:8,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,INVALID_SETUP: {_hx_index:9,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,INVALID_STREAM: {_hx_index:10,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,MISSING_CAPTURE_PATTERN: {_hx_index:11,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,INVALID_STREAM_STRUCTURE_VERSION: {_hx_index:12,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,CONTINUED_PACKET_FLAG_INVALID: {_hx_index:13,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,INCORRECT_STREAM_SERIAL_NUMBER: {_hx_index:14,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,INVALID_FIRST_PAGE: {_hx_index:15,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,BAD_PACKET_TYPE: {_hx_index:16,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,CANT_FIND_LAST_PAGE: {_hx_index:17,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,SEEK_FAILED: {_hx_index:18,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,OTHER: {_hx_index:19,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
};
var kha_audio2_ogg_vorbis_data_Residue = function() {
};
$hxClasses["kha.audio2.ogg.vorbis.data.Residue"] = kha_audio2_ogg_vorbis_data_Residue;
kha_audio2_ogg_vorbis_data_Residue.__name__ = "kha.audio2.ogg.vorbis.data.Residue";
kha_audio2_ogg_vorbis_data_Residue.read = function(decodeState,codebooks) {
	var r = new kha_audio2_ogg_vorbis_data_Residue();
	r.type = decodeState.readBits(16);
	if(r.type > 2) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Residue.hx", lineNumber : 29, className : "kha.audio2.ogg.vorbis.data.Residue", methodName : "read"}));
	}
	var this1 = new Array(64);
	var residueCascade = this1;
	r.begin = decodeState.readBits(24);
	r.end = decodeState.readBits(24);
	r.partSize = decodeState.readBits(24) + 1;
	var classifications = r.classifications = decodeState.readBits(6) + 1;
	r.classbook = decodeState.readBits(8);
	var _g = 0;
	var _g1 = r.classifications;
	while(_g < _g1) {
		var j = _g++;
		var highBits = 0;
		var lowBits = decodeState.readBits(3);
		if(decodeState.readBits(1) != 0) {
			highBits = decodeState.readBits(5);
		}
		residueCascade[j] = highBits * 8 + lowBits;
	}
	var this2 = new Array(r.classifications);
	r.residueBooks = this2;
	var _g2 = 0;
	var _g3 = r.classifications;
	while(_g2 < _g3) {
		var j1 = _g2++;
		var this3 = r.residueBooks;
		var this4 = new Array(8);
		this3[j1] = this4;
		var _g21 = 0;
		while(_g21 < 8) {
			var k = _g21++;
			if((residueCascade[j1] & 1 << k) != 0) {
				r.residueBooks[j1][k] = decodeState.readBits(8);
				if(r.residueBooks[j1][k] >= codebooks.length) {
					throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Residue.hx", lineNumber : 55, className : "kha.audio2.ogg.vorbis.data.Residue", methodName : "read"}));
				}
			} else {
				r.residueBooks[j1][k] = -1;
			}
		}
	}
	var el = codebooks[r.classbook].entries;
	var classwords = codebooks[r.classbook].dimensions;
	var this5 = new Array(el);
	r.classdata = this5;
	var _g4 = 0;
	var _g5 = el;
	while(_g4 < _g5) {
		var j2 = _g4++;
		var temp = j2;
		var k1 = classwords;
		var this6 = r.classdata;
		var this7 = new Array(classwords);
		var cd = this6[j2] = this7;
		while(--k1 >= 0) {
			cd[k1] = temp % classifications;
			temp = temp / classifications | 0;
		}
	}
	return r;
};
kha_audio2_ogg_vorbis_data_Residue.prototype = {
	begin: null
	,end: null
	,partSize: null
	,classifications: null
	,classbook: null
	,classdata: null
	,residueBooks: null
	,type: null
	,decode: function(decodeState,header,residueBuffers,ch,n,doNotDecode,channelBuffers) {
		var codebooks = header.codebooks;
		var classwords = codebooks[this.classbook].dimensions;
		var nRead = this.end - this.begin;
		var partSize = this.partSize;
		var partRead = _$UInt_UInt_$Impl_$.toFloat(nRead) / _$UInt_UInt_$Impl_$.toFloat(partSize) | 0;
		var this1 = new Array(header.channel * partRead + 1);
		var classifications = this1;
		var _g = 0;
		var _g1 = ch;
		while(_g < _g1) {
			var i = _g++;
			if(!doNotDecode[i]) {
				var buffer = residueBuffers[i];
				var _g2 = 0;
				var _g11 = buffer.length;
				while(_g2 < _g11) {
					var j = _g2++;
					buffer[j] = 0;
				}
			}
		}
		if(this.type == 2 && ch != 1) {
			var _g21 = 0;
			var _g3 = ch;
			while(_g21 < _g3) {
				var j1 = _g21++;
				if(!doNotDecode[j1]) {
					break;
				} else if(j1 == ch - 1) {
					return;
				}
			}
			var _g4 = 0;
			while(_g4 < 8) {
				var pass = _g4++;
				var pcount = 0;
				var classSet = 0;
				if(ch == 2) {
					while(pcount < partRead) {
						var z = this.begin + pcount * partSize;
						var cInter = z & 1;
						var pInter = z >>> 1;
						if(pass == 0) {
							var c = codebooks[this.classbook];
							if(decodeState.validBits < 10) {
								decodeState.prepHuffman();
							}
							var i1 = c.fastHuffman[decodeState.acc & 1023];
							var val;
							if(i1 >= 0) {
								var l = c.codewordLengths[i1];
								decodeState.acc = decodeState.acc >>> l;
								decodeState.validBits -= l;
								if(decodeState.validBits < 0) {
									decodeState.validBits = 0;
									val = -1;
								} else {
									val = i1;
								}
							} else {
								val = decodeState.decodeScalarRaw(c);
							}
							if(c.sparse) {
								val = c.sortedValues[val];
							}
							var q = val;
							if(q == -1) {
								return;
							}
							var i2 = classwords;
							while(--i2 >= 0) {
								classifications[i2 + pcount] = q % this.classifications;
								q = q / this.classifications | 0;
							}
						}
						var _g41 = 0;
						var _g5 = classwords;
						while(_g41 < _g5) {
							var i3 = _g41++;
							if(pcount >= partRead) {
								break;
							}
							var z1 = this.begin + pcount * partSize;
							var c1 = classifications[pcount];
							var b = this.residueBooks[c1][pass];
							if(b >= 0) {
								var book = codebooks[b];
								var result = book.decodeDeinterleaveRepeat(decodeState,residueBuffers,ch,cInter,pInter,n,partSize);
								if(result == null) {
									return;
								} else {
									cInter = result.cInter;
									pInter = result.pInter;
								}
							} else {
								z1 = z1 + partSize;
								cInter = z1 & 1;
								pInter = z1 >>> 1;
							}
							++pcount;
						}
					}
				} else if(ch == 1) {
					while(pcount < partRead) {
						var z2 = this.begin + pcount * partSize;
						var cInter1 = 0;
						var pInter1 = z2;
						if(pass == 0) {
							var c2 = codebooks[this.classbook];
							if(decodeState.validBits < 10) {
								decodeState.prepHuffman();
							}
							var i4 = c2.fastHuffman[decodeState.acc & 1023];
							var val1;
							if(i4 >= 0) {
								var l1 = c2.codewordLengths[i4];
								decodeState.acc = decodeState.acc >>> l1;
								decodeState.validBits -= l1;
								if(decodeState.validBits < 0) {
									decodeState.validBits = 0;
									val1 = -1;
								} else {
									val1 = i4;
								}
							} else {
								val1 = decodeState.decodeScalarRaw(c2);
							}
							if(c2.sparse) {
								val1 = c2.sortedValues[val1];
							}
							var q1 = val1;
							if(q1 == -1) {
								return;
							}
							var i5 = classwords;
							while(--i5 >= 0) {
								classifications[i5 + pcount] = q1 % this.classifications;
								q1 = q1 / this.classifications | 0;
							}
						}
						var _g42 = 0;
						var _g51 = classwords;
						while(_g42 < _g51) {
							var i6 = _g42++;
							if(pcount >= partRead) {
								break;
							}
							var z3 = this.begin + pcount * partSize;
							var b1 = this.residueBooks[classifications[pcount]][pass];
							if(b1 >= 0) {
								var book1 = codebooks[b1];
								var result1 = book1.decodeDeinterleaveRepeat(decodeState,residueBuffers,ch,cInter1,pInter1,n,partSize);
								if(result1 == null) {
									return;
								} else {
									cInter1 = result1.cInter;
									pInter1 = result1.pInter;
								}
							} else {
								z3 = z3 + partSize;
								cInter1 = 0;
								pInter1 = z3;
							}
							++pcount;
						}
					}
				} else {
					while(pcount < partRead) {
						var z4 = this.begin + pcount * partSize;
						var cInter2 = _$UInt_UInt_$Impl_$.toFloat(z4) % _$UInt_UInt_$Impl_$.toFloat(ch) | 0;
						var pInter2 = _$UInt_UInt_$Impl_$.toFloat(z4) / _$UInt_UInt_$Impl_$.toFloat(ch) | 0;
						if(pass == 0) {
							var c3 = codebooks[this.classbook];
							if(decodeState.validBits < 10) {
								decodeState.prepHuffman();
							}
							var i7 = c3.fastHuffman[decodeState.acc & 1023];
							var val2;
							if(i7 >= 0) {
								var l2 = c3.codewordLengths[i7];
								decodeState.acc = decodeState.acc >>> l2;
								decodeState.validBits -= l2;
								if(decodeState.validBits < 0) {
									decodeState.validBits = 0;
									val2 = -1;
								} else {
									val2 = i7;
								}
							} else {
								val2 = decodeState.decodeScalarRaw(c3);
							}
							if(c3.sparse) {
								val2 = c3.sortedValues[val2];
							}
							var q2 = val2;
							if(q2 == -1) {
								return;
							}
							var i8 = classwords;
							while(--i8 >= 0) {
								classifications[i8 + pcount] = q2 % this.classifications;
								q2 = q2 / this.classifications | 0;
							}
						}
						var _g43 = 0;
						var _g52 = classwords;
						while(_g43 < _g52) {
							var i9 = _g43++;
							if(pcount >= partRead) {
								break;
							}
							var z5 = this.begin + pcount * partSize;
							var b2 = this.residueBooks[classifications[pcount]][pass];
							if(b2 >= 0) {
								var book2 = codebooks[b2];
								var result2 = book2.decodeDeinterleaveRepeat(decodeState,residueBuffers,ch,cInter2,pInter2,n,partSize);
								if(result2 == null) {
									return;
								} else {
									cInter2 = result2.cInter;
									pInter2 = result2.pInter;
								}
							} else {
								z5 = z5 + partSize;
								cInter2 = _$UInt_UInt_$Impl_$.toFloat(z5) % _$UInt_UInt_$Impl_$.toFloat(ch) | 0;
								pInter2 = _$UInt_UInt_$Impl_$.toFloat(z5) / _$UInt_UInt_$Impl_$.toFloat(ch) | 0;
							}
							++pcount;
						}
					}
				}
			}
			return;
		}
		var _g22 = 0;
		while(_g22 < 8) {
			var pass1 = _g22++;
			var pcount1 = 0;
			var classSet1 = 0;
			while(pcount1 < partRead) {
				if(pass1 == 0) {
					var _g23 = 0;
					var _g31 = ch;
					while(_g23 < _g31) {
						var j2 = _g23++;
						if(!doNotDecode[j2]) {
							var c4 = codebooks[this.classbook];
							if(decodeState.validBits < 10) {
								decodeState.prepHuffman();
							}
							var i10 = c4.fastHuffman[decodeState.acc & 1023];
							var val3;
							if(i10 >= 0) {
								var l3 = c4.codewordLengths[i10];
								decodeState.acc = decodeState.acc >>> l3;
								decodeState.validBits -= l3;
								if(decodeState.validBits < 0) {
									decodeState.validBits = 0;
									val3 = -1;
								} else {
									val3 = i10;
								}
							} else {
								val3 = decodeState.decodeScalarRaw(c4);
							}
							if(c4.sparse) {
								val3 = c4.sortedValues[val3];
							}
							var temp = val3;
							if(temp == -1) {
								return;
							}
							var i11 = classwords;
							while(--i11 >= 0) {
								classifications[j2 * partRead + i11 + pcount1] = temp % this.classifications;
								temp = temp / this.classifications | 0;
							}
						}
					}
				}
				var _g24 = 0;
				var _g32 = classwords;
				while(_g24 < _g32) {
					var i12 = _g24++;
					if(pcount1 >= partRead) {
						break;
					}
					var _g25 = 0;
					var _g33 = ch;
					while(_g25 < _g33) {
						var j3 = _g25++;
						if(!doNotDecode[j3]) {
							var c5 = classifications[j3 * partRead + pcount1];
							var b3 = this.residueBooks[c5][pass1];
							if(b3 >= 0) {
								var target = residueBuffers[j3];
								var offset = this.begin + pcount1 * partSize;
								var n1 = partSize;
								var book3 = codebooks[b3];
								if(!book3.residueDecode(decodeState,target,offset,n1,this.type)) {
									return;
								}
							}
						}
					}
					++pcount1;
				}
			}
		}
	}
	,__class__: kha_audio2_ogg_vorbis_data_Residue
};
var kha_audio2_ogg_vorbis_data_Setting = function() { };
$hxClasses["kha.audio2.ogg.vorbis.data.Setting"] = kha_audio2_ogg_vorbis_data_Setting;
kha_audio2_ogg_vorbis_data_Setting.__name__ = "kha.audio2.ogg.vorbis.data.Setting";
var kha_graphics1_Graphics = function() { };
$hxClasses["kha.graphics1.Graphics"] = kha_graphics1_Graphics;
kha_graphics1_Graphics.__name__ = "kha.graphics1.Graphics";
kha_graphics1_Graphics.prototype = {
	begin: null
	,end: null
	,setPixel: null
	,__class__: kha_graphics1_Graphics
};
var kha_graphics2_Graphics = function() {
	this.transformations = [new kha_math_FastMatrix3(1,0,0,0,1,0,0,0,1)];
	this.transformationIndex = 0;
	this.opacities = [1];
	this.myFontSize = 12;
	this.pipe = null;
};
$hxClasses["kha.graphics2.Graphics"] = kha_graphics2_Graphics;
kha_graphics2_Graphics.__name__ = "kha.graphics2.Graphics";
kha_graphics2_Graphics.prototype = {
	begin: function(clear,clearColor) {
		if(clear == null) {
			clear = true;
		}
	}
	,end: function() {
	}
	,flush: function() {
	}
	,clear: function(color) {
	}
	,drawImage: function(img,x,y) {
		this.drawSubImage(img,x,y,0,0,img.get_width(),img.get_height());
	}
	,drawSubImage: function(img,x,y,sx,sy,sw,sh) {
		this.drawScaledSubImage(img,sx,sy,sw,sh,x,y,sw,sh);
	}
	,drawScaledImage: function(img,dx,dy,dw,dh) {
		this.drawScaledSubImage(img,0,0,img.get_width(),img.get_height(),dx,dy,dw,dh);
	}
	,drawScaledSubImage: function(image,sx,sy,sw,sh,dx,dy,dw,dh) {
	}
	,drawRect: function(x,y,width,height,strength) {
		if(strength == null) {
			strength = 1.0;
		}
	}
	,fillRect: function(x,y,width,height) {
	}
	,drawString: function(text,x,y) {
	}
	,drawCharacters: function(text,start,length,x,y) {
	}
	,drawLine: function(x1,y1,x2,y2,strength) {
		if(strength == null) {
			strength = 1.0;
		}
	}
	,drawVideo: function(video,x,y,width,height) {
	}
	,fillTriangle: function(x1,y1,x2,y2,x3,y3) {
	}
	,get_imageScaleQuality: function() {
		return kha_graphics2_ImageScaleQuality.Low;
	}
	,set_imageScaleQuality: function(value) {
		return kha_graphics2_ImageScaleQuality.High;
	}
	,get_mipmapScaleQuality: function() {
		return kha_graphics2_ImageScaleQuality.Low;
	}
	,set_mipmapScaleQuality: function(value) {
		return kha_graphics2_ImageScaleQuality.High;
	}
	,get_color: function() {
		return -16777216;
	}
	,set_color: function(color) {
		return -16777216;
	}
	,get_font: function() {
		return null;
	}
	,set_font: function(font) {
		return null;
	}
	,get_fontSize: function() {
		return this.myFontSize;
	}
	,set_fontSize: function(value) {
		return this.myFontSize = value;
	}
	,get_transformation: function() {
		return this.transformations[this.transformationIndex];
	}
	,set_transformation: function(transformation) {
		this.setTransformation(transformation);
		var _this = this.transformations[this.transformationIndex];
		_this._00 = transformation._00;
		_this._10 = transformation._10;
		_this._20 = transformation._20;
		_this._01 = transformation._01;
		_this._11 = transformation._11;
		_this._21 = transformation._21;
		_this._02 = transformation._02;
		_this._12 = transformation._12;
		_this._22 = transformation._22;
		return transformation;
	}
	,pushTransformation: function(trans) {
		this.transformationIndex++;
		if(this.transformationIndex == this.transformations.length) {
			this.transformations.push(new kha_math_FastMatrix3(1,0,0,0,1,0,0,0,1));
		}
		var _this = this.transformations[this.transformationIndex];
		_this._00 = trans._00;
		_this._10 = trans._10;
		_this._20 = trans._20;
		_this._01 = trans._01;
		_this._11 = trans._11;
		_this._21 = trans._21;
		_this._02 = trans._02;
		_this._12 = trans._12;
		_this._22 = trans._22;
		this.setTransformation(this.transformations[this.transformationIndex]);
	}
	,popTransformation: function() {
		this.transformationIndex--;
		this.setTransformation(this.transformations[this.transformationIndex]);
		return this.transformations[this.transformationIndex + 1];
	}
	,scale: function(x,y) {
		var _this = this.transformations[this.transformationIndex];
		var _this__00 = x;
		var _this__10 = 0;
		var _this__20 = 0;
		var _this__01 = 0;
		var _this__11 = y;
		var _this__21 = 0;
		var _this__02 = 0;
		var _this__12 = 0;
		var _this__22 = 1;
		var m = this.transformations[this.transformationIndex];
		var m__00 = _this__00 * m._00 + _this__10 * m._01 + _this__20 * m._02;
		var m__10 = _this__00 * m._10 + _this__10 * m._11 + _this__20 * m._12;
		var m__20 = _this__00 * m._20 + _this__10 * m._21 + _this__20 * m._22;
		var m__01 = _this__01 * m._00 + _this__11 * m._01 + _this__21 * m._02;
		var m__11 = _this__01 * m._10 + _this__11 * m._11 + _this__21 * m._12;
		var m__21 = _this__01 * m._20 + _this__11 * m._21 + _this__21 * m._22;
		var m__02 = _this__02 * m._00 + _this__12 * m._01 + _this__22 * m._02;
		var m__12 = _this__02 * m._10 + _this__12 * m._11 + _this__22 * m._12;
		var m__22 = _this__02 * m._20 + _this__12 * m._21 + _this__22 * m._22;
		_this._00 = m__00;
		_this._10 = m__10;
		_this._20 = m__20;
		_this._01 = m__01;
		_this._11 = m__11;
		_this._21 = m__21;
		_this._02 = m__02;
		_this._12 = m__12;
		_this._22 = m__22;
	}
	,translation: function(tx,ty) {
		var _this__00 = 1;
		var _this__10 = 0;
		var _this__20 = tx;
		var _this__01 = 0;
		var _this__11 = 1;
		var _this__21 = ty;
		var _this__02 = 0;
		var _this__12 = 0;
		var _this__22 = 1;
		var m = this.transformations[this.transformationIndex];
		return new kha_math_FastMatrix3(_this__00 * m._00 + _this__10 * m._01 + _this__20 * m._02,_this__00 * m._10 + _this__10 * m._11 + _this__20 * m._12,_this__00 * m._20 + _this__10 * m._21 + _this__20 * m._22,_this__01 * m._00 + _this__11 * m._01 + _this__21 * m._02,_this__01 * m._10 + _this__11 * m._11 + _this__21 * m._12,_this__01 * m._20 + _this__11 * m._21 + _this__21 * m._22,_this__02 * m._00 + _this__12 * m._01 + _this__22 * m._02,_this__02 * m._10 + _this__12 * m._11 + _this__22 * m._12,_this__02 * m._20 + _this__12 * m._21 + _this__22 * m._22);
	}
	,translate: function(tx,ty) {
		var _this = this.transformations[this.transformationIndex];
		var _this__00 = 1;
		var _this__10 = 0;
		var _this__20 = tx;
		var _this__01 = 0;
		var _this__11 = 1;
		var _this__21 = ty;
		var _this__02 = 0;
		var _this__12 = 0;
		var _this__22 = 1;
		var m = this.transformations[this.transformationIndex];
		var m__00 = _this__00 * m._00 + _this__10 * m._01 + _this__20 * m._02;
		var m__10 = _this__00 * m._10 + _this__10 * m._11 + _this__20 * m._12;
		var m__20 = _this__00 * m._20 + _this__10 * m._21 + _this__20 * m._22;
		var m__01 = _this__01 * m._00 + _this__11 * m._01 + _this__21 * m._02;
		var m__11 = _this__01 * m._10 + _this__11 * m._11 + _this__21 * m._12;
		var m__21 = _this__01 * m._20 + _this__11 * m._21 + _this__21 * m._22;
		var m__02 = _this__02 * m._00 + _this__12 * m._01 + _this__22 * m._02;
		var m__12 = _this__02 * m._10 + _this__12 * m._11 + _this__22 * m._12;
		var m__22 = _this__02 * m._20 + _this__12 * m._21 + _this__22 * m._22;
		_this._00 = m__00;
		_this._10 = m__10;
		_this._20 = m__20;
		_this._01 = m__01;
		_this._11 = m__11;
		_this._21 = m__21;
		_this._02 = m__02;
		_this._12 = m__12;
		_this._22 = m__22;
	}
	,pushTranslation: function(tx,ty) {
		var _this__00 = 1;
		var _this__10 = 0;
		var _this__20 = tx;
		var _this__01 = 0;
		var _this__11 = 1;
		var _this__21 = ty;
		var _this__02 = 0;
		var _this__12 = 0;
		var _this__22 = 1;
		var m = this.transformations[this.transformationIndex];
		var trans__00 = _this__00 * m._00 + _this__10 * m._01 + _this__20 * m._02;
		var trans__10 = _this__00 * m._10 + _this__10 * m._11 + _this__20 * m._12;
		var trans__20 = _this__00 * m._20 + _this__10 * m._21 + _this__20 * m._22;
		var trans__01 = _this__01 * m._00 + _this__11 * m._01 + _this__21 * m._02;
		var trans__11 = _this__01 * m._10 + _this__11 * m._11 + _this__21 * m._12;
		var trans__21 = _this__01 * m._20 + _this__11 * m._21 + _this__21 * m._22;
		var trans__02 = _this__02 * m._00 + _this__12 * m._01 + _this__22 * m._02;
		var trans__12 = _this__02 * m._10 + _this__12 * m._11 + _this__22 * m._12;
		var trans__22 = _this__02 * m._20 + _this__12 * m._21 + _this__22 * m._22;
		this.transformationIndex++;
		if(this.transformationIndex == this.transformations.length) {
			this.transformations.push(new kha_math_FastMatrix3(1,0,0,0,1,0,0,0,1));
		}
		var _this = this.transformations[this.transformationIndex];
		_this._00 = trans__00;
		_this._10 = trans__10;
		_this._20 = trans__20;
		_this._01 = trans__01;
		_this._11 = trans__11;
		_this._21 = trans__21;
		_this._02 = trans__02;
		_this._12 = trans__12;
		_this._22 = trans__22;
		this.setTransformation(this.transformations[this.transformationIndex]);
	}
	,rotation: function(angle,centerx,centery) {
		var _this__00 = 1;
		var _this__10 = 0;
		var _this__20 = centerx;
		var _this__01 = 0;
		var _this__11 = 1;
		var _this__21 = centery;
		var _this__02 = 0;
		var _this__12 = 0;
		var _this__22 = 1;
		var m__00 = Math.cos(angle);
		var m__10 = -Math.sin(angle);
		var m__20 = 0;
		var m__01 = Math.sin(angle);
		var m__11 = Math.cos(angle);
		var m__21 = 0;
		var m__02 = 0;
		var m__12 = 0;
		var m__22 = 1;
		var _this__001 = _this__00 * m__00 + _this__10 * m__01 + _this__20 * m__02;
		var _this__101 = _this__00 * m__10 + _this__10 * m__11 + _this__20 * m__12;
		var _this__201 = _this__00 * m__20 + _this__10 * m__21 + _this__20 * m__22;
		var _this__011 = _this__01 * m__00 + _this__11 * m__01 + _this__21 * m__02;
		var _this__111 = _this__01 * m__10 + _this__11 * m__11 + _this__21 * m__12;
		var _this__211 = _this__01 * m__20 + _this__11 * m__21 + _this__21 * m__22;
		var _this__021 = _this__02 * m__00 + _this__12 * m__01 + _this__22 * m__02;
		var _this__121 = _this__02 * m__10 + _this__12 * m__11 + _this__22 * m__12;
		var _this__221 = _this__02 * m__20 + _this__12 * m__21 + _this__22 * m__22;
		var m__001 = 1;
		var m__101 = 0;
		var m__201 = -centerx;
		var m__011 = 0;
		var m__111 = 1;
		var m__211 = -centery;
		var m__021 = 0;
		var m__121 = 0;
		var m__221 = 1;
		var _this__002 = _this__001 * m__001 + _this__101 * m__011 + _this__201 * m__021;
		var _this__102 = _this__001 * m__101 + _this__101 * m__111 + _this__201 * m__121;
		var _this__202 = _this__001 * m__201 + _this__101 * m__211 + _this__201 * m__221;
		var _this__012 = _this__011 * m__001 + _this__111 * m__011 + _this__211 * m__021;
		var _this__112 = _this__011 * m__101 + _this__111 * m__111 + _this__211 * m__121;
		var _this__212 = _this__011 * m__201 + _this__111 * m__211 + _this__211 * m__221;
		var _this__022 = _this__021 * m__001 + _this__121 * m__011 + _this__221 * m__021;
		var _this__122 = _this__021 * m__101 + _this__121 * m__111 + _this__221 * m__121;
		var _this__222 = _this__021 * m__201 + _this__121 * m__211 + _this__221 * m__221;
		var m = this.transformations[this.transformationIndex];
		return new kha_math_FastMatrix3(_this__002 * m._00 + _this__102 * m._01 + _this__202 * m._02,_this__002 * m._10 + _this__102 * m._11 + _this__202 * m._12,_this__002 * m._20 + _this__102 * m._21 + _this__202 * m._22,_this__012 * m._00 + _this__112 * m._01 + _this__212 * m._02,_this__012 * m._10 + _this__112 * m._11 + _this__212 * m._12,_this__012 * m._20 + _this__112 * m._21 + _this__212 * m._22,_this__022 * m._00 + _this__122 * m._01 + _this__222 * m._02,_this__022 * m._10 + _this__122 * m._11 + _this__222 * m._12,_this__022 * m._20 + _this__122 * m._21 + _this__222 * m._22);
	}
	,rotate: function(angle,centerx,centery) {
		var _this = this.transformations[this.transformationIndex];
		var _this__00 = 1;
		var _this__10 = 0;
		var _this__20 = centerx;
		var _this__01 = 0;
		var _this__11 = 1;
		var _this__21 = centery;
		var _this__02 = 0;
		var _this__12 = 0;
		var _this__22 = 1;
		var m__00 = Math.cos(angle);
		var m__10 = -Math.sin(angle);
		var m__20 = 0;
		var m__01 = Math.sin(angle);
		var m__11 = Math.cos(angle);
		var m__21 = 0;
		var m__02 = 0;
		var m__12 = 0;
		var m__22 = 1;
		var _this__001 = _this__00 * m__00 + _this__10 * m__01 + _this__20 * m__02;
		var _this__101 = _this__00 * m__10 + _this__10 * m__11 + _this__20 * m__12;
		var _this__201 = _this__00 * m__20 + _this__10 * m__21 + _this__20 * m__22;
		var _this__011 = _this__01 * m__00 + _this__11 * m__01 + _this__21 * m__02;
		var _this__111 = _this__01 * m__10 + _this__11 * m__11 + _this__21 * m__12;
		var _this__211 = _this__01 * m__20 + _this__11 * m__21 + _this__21 * m__22;
		var _this__021 = _this__02 * m__00 + _this__12 * m__01 + _this__22 * m__02;
		var _this__121 = _this__02 * m__10 + _this__12 * m__11 + _this__22 * m__12;
		var _this__221 = _this__02 * m__20 + _this__12 * m__21 + _this__22 * m__22;
		var m__001 = 1;
		var m__101 = 0;
		var m__201 = -centerx;
		var m__011 = 0;
		var m__111 = 1;
		var m__211 = -centery;
		var m__021 = 0;
		var m__121 = 0;
		var m__221 = 1;
		var _this__002 = _this__001 * m__001 + _this__101 * m__011 + _this__201 * m__021;
		var _this__102 = _this__001 * m__101 + _this__101 * m__111 + _this__201 * m__121;
		var _this__202 = _this__001 * m__201 + _this__101 * m__211 + _this__201 * m__221;
		var _this__012 = _this__011 * m__001 + _this__111 * m__011 + _this__211 * m__021;
		var _this__112 = _this__011 * m__101 + _this__111 * m__111 + _this__211 * m__121;
		var _this__212 = _this__011 * m__201 + _this__111 * m__211 + _this__211 * m__221;
		var _this__022 = _this__021 * m__001 + _this__121 * m__011 + _this__221 * m__021;
		var _this__122 = _this__021 * m__101 + _this__121 * m__111 + _this__221 * m__121;
		var _this__222 = _this__021 * m__201 + _this__121 * m__211 + _this__221 * m__221;
		var m = this.transformations[this.transformationIndex];
		var m__002 = _this__002 * m._00 + _this__102 * m._01 + _this__202 * m._02;
		var m__102 = _this__002 * m._10 + _this__102 * m._11 + _this__202 * m._12;
		var m__202 = _this__002 * m._20 + _this__102 * m._21 + _this__202 * m._22;
		var m__012 = _this__012 * m._00 + _this__112 * m._01 + _this__212 * m._02;
		var m__112 = _this__012 * m._10 + _this__112 * m._11 + _this__212 * m._12;
		var m__212 = _this__012 * m._20 + _this__112 * m._21 + _this__212 * m._22;
		var m__022 = _this__022 * m._00 + _this__122 * m._01 + _this__222 * m._02;
		var m__122 = _this__022 * m._10 + _this__122 * m._11 + _this__222 * m._12;
		var m__222 = _this__022 * m._20 + _this__122 * m._21 + _this__222 * m._22;
		_this._00 = m__002;
		_this._10 = m__102;
		_this._20 = m__202;
		_this._01 = m__012;
		_this._11 = m__112;
		_this._21 = m__212;
		_this._02 = m__022;
		_this._12 = m__122;
		_this._22 = m__222;
	}
	,pushRotation: function(angle,centerx,centery) {
		var _this__00 = 1;
		var _this__10 = 0;
		var _this__20 = centerx;
		var _this__01 = 0;
		var _this__11 = 1;
		var _this__21 = centery;
		var _this__02 = 0;
		var _this__12 = 0;
		var _this__22 = 1;
		var m__00 = Math.cos(angle);
		var m__10 = -Math.sin(angle);
		var m__20 = 0;
		var m__01 = Math.sin(angle);
		var m__11 = Math.cos(angle);
		var m__21 = 0;
		var m__02 = 0;
		var m__12 = 0;
		var m__22 = 1;
		var _this__001 = _this__00 * m__00 + _this__10 * m__01 + _this__20 * m__02;
		var _this__101 = _this__00 * m__10 + _this__10 * m__11 + _this__20 * m__12;
		var _this__201 = _this__00 * m__20 + _this__10 * m__21 + _this__20 * m__22;
		var _this__011 = _this__01 * m__00 + _this__11 * m__01 + _this__21 * m__02;
		var _this__111 = _this__01 * m__10 + _this__11 * m__11 + _this__21 * m__12;
		var _this__211 = _this__01 * m__20 + _this__11 * m__21 + _this__21 * m__22;
		var _this__021 = _this__02 * m__00 + _this__12 * m__01 + _this__22 * m__02;
		var _this__121 = _this__02 * m__10 + _this__12 * m__11 + _this__22 * m__12;
		var _this__221 = _this__02 * m__20 + _this__12 * m__21 + _this__22 * m__22;
		var m__001 = 1;
		var m__101 = 0;
		var m__201 = -centerx;
		var m__011 = 0;
		var m__111 = 1;
		var m__211 = -centery;
		var m__021 = 0;
		var m__121 = 0;
		var m__221 = 1;
		var _this__002 = _this__001 * m__001 + _this__101 * m__011 + _this__201 * m__021;
		var _this__102 = _this__001 * m__101 + _this__101 * m__111 + _this__201 * m__121;
		var _this__202 = _this__001 * m__201 + _this__101 * m__211 + _this__201 * m__221;
		var _this__012 = _this__011 * m__001 + _this__111 * m__011 + _this__211 * m__021;
		var _this__112 = _this__011 * m__101 + _this__111 * m__111 + _this__211 * m__121;
		var _this__212 = _this__011 * m__201 + _this__111 * m__211 + _this__211 * m__221;
		var _this__022 = _this__021 * m__001 + _this__121 * m__011 + _this__221 * m__021;
		var _this__122 = _this__021 * m__101 + _this__121 * m__111 + _this__221 * m__121;
		var _this__222 = _this__021 * m__201 + _this__121 * m__211 + _this__221 * m__221;
		var m = this.transformations[this.transformationIndex];
		var trans__00 = _this__002 * m._00 + _this__102 * m._01 + _this__202 * m._02;
		var trans__10 = _this__002 * m._10 + _this__102 * m._11 + _this__202 * m._12;
		var trans__20 = _this__002 * m._20 + _this__102 * m._21 + _this__202 * m._22;
		var trans__01 = _this__012 * m._00 + _this__112 * m._01 + _this__212 * m._02;
		var trans__11 = _this__012 * m._10 + _this__112 * m._11 + _this__212 * m._12;
		var trans__21 = _this__012 * m._20 + _this__112 * m._21 + _this__212 * m._22;
		var trans__02 = _this__022 * m._00 + _this__122 * m._01 + _this__222 * m._02;
		var trans__12 = _this__022 * m._10 + _this__122 * m._11 + _this__222 * m._12;
		var trans__22 = _this__022 * m._20 + _this__122 * m._21 + _this__222 * m._22;
		this.transformationIndex++;
		if(this.transformationIndex == this.transformations.length) {
			this.transformations.push(new kha_math_FastMatrix3(1,0,0,0,1,0,0,0,1));
		}
		var _this = this.transformations[this.transformationIndex];
		_this._00 = trans__00;
		_this._10 = trans__10;
		_this._20 = trans__20;
		_this._01 = trans__01;
		_this._11 = trans__11;
		_this._21 = trans__21;
		_this._02 = trans__02;
		_this._12 = trans__12;
		_this._22 = trans__22;
		this.setTransformation(this.transformations[this.transformationIndex]);
	}
	,pushOpacity: function(opacity) {
		this.setOpacity(opacity);
		this.opacities.push(opacity);
	}
	,popOpacity: function() {
		var ret = this.opacities.pop();
		this.setOpacity(this.get_opacity());
		return ret;
	}
	,get_opacity: function() {
		return this.opacities[this.opacities.length - 1];
	}
	,set_opacity: function(opacity) {
		this.setOpacity(opacity);
		return this.opacities[this.opacities.length - 1] = opacity;
	}
	,scissor: function(x,y,width,height) {
	}
	,disableScissor: function() {
	}
	,pipe: null
	,get_pipeline: function() {
		return this.pipe;
	}
	,set_pipeline: function(pipeline) {
		this.setPipeline(pipeline);
		return this.pipe = pipeline;
	}
	,transformations: null
	,transformationIndex: null
	,opacities: null
	,myFontSize: null
	,setTransformation: function(transformation) {
	}
	,setOpacity: function(opacity) {
	}
	,setPipeline: function(pipeline) {
	}
	,__class__: kha_graphics2_Graphics
	,__properties__: {set_pipeline:"set_pipeline",get_pipeline:"get_pipeline",set_opacity:"set_opacity",get_opacity:"get_opacity",set_transformation:"set_transformation",get_transformation:"get_transformation",set_fontSize:"set_fontSize",get_fontSize:"get_fontSize",set_font:"set_font",get_font:"get_font",set_color:"set_color",get_color:"get_color",set_mipmapScaleQuality:"set_mipmapScaleQuality",get_mipmapScaleQuality:"get_mipmapScaleQuality",set_imageScaleQuality:"set_imageScaleQuality",get_imageScaleQuality:"get_imageScaleQuality"}
};
var kha_graphics2_Graphics1 = function(canvas) {
	this.canvas = canvas;
};
$hxClasses["kha.graphics2.Graphics1"] = kha_graphics2_Graphics1;
kha_graphics2_Graphics1.__name__ = "kha.graphics2.Graphics1";
kha_graphics2_Graphics1.__interfaces__ = [kha_graphics1_Graphics];
kha_graphics2_Graphics1.prototype = {
	canvas: null
	,texture: null
	,pixels: null
	,begin: function() {
		if(this.texture == null || (this.texture.get_realWidth() != this.canvas.get_width() || this.texture.get_realHeight() != this.canvas.get_height())) {
			this.texture = kha_Image.create(this.canvas.get_width(),this.canvas.get_height(),0,2);
		}
		this.pixels = this.texture.lock();
	}
	,end: function() {
		this.texture.unlock();
		this.canvas.get_g2().begin();
		this.canvas.get_g2().drawImage(this.texture,0,0);
		this.canvas.get_g2().end();
	}
	,setPixel: function(x,y,color) {
		this.pixels.setInt32(y * this.texture.get_realWidth() * 4 + x * 4,kha__$Color_Color_$Impl_$.fromBytes(color & 255,(color & 65280) >>> 8,(color & 16711680) >>> 16,color >>> 24));
	}
	,__class__: kha_graphics2_Graphics1
};
var kha_graphics2_ImageScaleQuality = $hxEnums["kha.graphics2.ImageScaleQuality"] = { __ename__ : "kha.graphics2.ImageScaleQuality", __constructs__ : ["Low","High"]
	,Low: {_hx_index:0,__enum__:"kha.graphics2.ImageScaleQuality",toString:$estr}
	,High: {_hx_index:1,__enum__:"kha.graphics2.ImageScaleQuality",toString:$estr}
};
var kha_graphics2_truetype_VectorOfIntPointer = function() {
};
$hxClasses["kha.graphics2.truetype.VectorOfIntPointer"] = kha_graphics2_truetype_VectorOfIntPointer;
kha_graphics2_truetype_VectorOfIntPointer.__name__ = "kha.graphics2.truetype.VectorOfIntPointer";
kha_graphics2_truetype_VectorOfIntPointer.prototype = {
	value: null
	,__class__: kha_graphics2_truetype_VectorOfIntPointer
};
var kha_graphics2_truetype_Stbtt_$temp_$rect = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt_temp_rect"] = kha_graphics2_truetype_Stbtt_$temp_$rect;
kha_graphics2_truetype_Stbtt_$temp_$rect.__name__ = "kha.graphics2.truetype.Stbtt_temp_rect";
kha_graphics2_truetype_Stbtt_$temp_$rect.prototype = {
	x0: null
	,y0: null
	,x1: null
	,y1: null
	,__class__: kha_graphics2_truetype_Stbtt_$temp_$rect
};
var kha_graphics2_truetype_Stbtt_$temp_$glyph_$h_$metrics = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt_temp_glyph_h_metrics"] = kha_graphics2_truetype_Stbtt_$temp_$glyph_$h_$metrics;
kha_graphics2_truetype_Stbtt_$temp_$glyph_$h_$metrics.__name__ = "kha.graphics2.truetype.Stbtt_temp_glyph_h_metrics";
kha_graphics2_truetype_Stbtt_$temp_$glyph_$h_$metrics.prototype = {
	advanceWidth: null
	,leftSideBearing: null
	,__class__: kha_graphics2_truetype_Stbtt_$temp_$glyph_$h_$metrics
};
var kha_graphics2_truetype_Stbtt_$temp_$font_$v_$metrics = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt_temp_font_v_metrics"] = kha_graphics2_truetype_Stbtt_$temp_$font_$v_$metrics;
kha_graphics2_truetype_Stbtt_$temp_$font_$v_$metrics.__name__ = "kha.graphics2.truetype.Stbtt_temp_font_v_metrics";
kha_graphics2_truetype_Stbtt_$temp_$font_$v_$metrics.prototype = {
	ascent: null
	,descent: null
	,lineGap: null
	,__class__: kha_graphics2_truetype_Stbtt_$temp_$font_$v_$metrics
};
var kha_graphics2_truetype_Stbtt_$temp_$region = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt_temp_region"] = kha_graphics2_truetype_Stbtt_$temp_$region;
kha_graphics2_truetype_Stbtt_$temp_$region.__name__ = "kha.graphics2.truetype.Stbtt_temp_region";
kha_graphics2_truetype_Stbtt_$temp_$region.prototype = {
	width: null
	,height: null
	,xoff: null
	,yoff: null
	,__class__: kha_graphics2_truetype_Stbtt_$temp_$region
};
var kha_graphics2_truetype_Stbtt_$bakedchar = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt_bakedchar"] = kha_graphics2_truetype_Stbtt_$bakedchar;
kha_graphics2_truetype_Stbtt_$bakedchar.__name__ = "kha.graphics2.truetype.Stbtt_bakedchar";
kha_graphics2_truetype_Stbtt_$bakedchar.prototype = {
	x0: null
	,y0: null
	,x1: null
	,y1: null
	,xoff: null
	,yoff: null
	,xadvance: null
	,__class__: kha_graphics2_truetype_Stbtt_$bakedchar
};
var kha_graphics2_truetype_Stbtt_$aligned_$quad = function() { };
$hxClasses["kha.graphics2.truetype.Stbtt_aligned_quad"] = kha_graphics2_truetype_Stbtt_$aligned_$quad;
kha_graphics2_truetype_Stbtt_$aligned_$quad.__name__ = "kha.graphics2.truetype.Stbtt_aligned_quad";
kha_graphics2_truetype_Stbtt_$aligned_$quad.prototype = {
	x0: null
	,y0: null
	,s0: null
	,t0: null
	,x1: null
	,y1: null
	,s1: null
	,t1: null
	,__class__: kha_graphics2_truetype_Stbtt_$aligned_$quad
};
var kha_graphics2_truetype_Stbtt_$packedchar = function() { };
$hxClasses["kha.graphics2.truetype.Stbtt_packedchar"] = kha_graphics2_truetype_Stbtt_$packedchar;
kha_graphics2_truetype_Stbtt_$packedchar.__name__ = "kha.graphics2.truetype.Stbtt_packedchar";
kha_graphics2_truetype_Stbtt_$packedchar.prototype = {
	x0: null
	,y0: null
	,x1: null
	,y1: null
	,xoff: null
	,yoff: null
	,xadvance: null
	,xoff2: null
	,yoff2: null
	,__class__: kha_graphics2_truetype_Stbtt_$packedchar
};
var kha_graphics2_truetype_Stbtt_$pack_$range = function() { };
$hxClasses["kha.graphics2.truetype.Stbtt_pack_range"] = kha_graphics2_truetype_Stbtt_$pack_$range;
kha_graphics2_truetype_Stbtt_$pack_$range.__name__ = "kha.graphics2.truetype.Stbtt_pack_range";
kha_graphics2_truetype_Stbtt_$pack_$range.prototype = {
	font_size: null
	,first_unicode_codepoint_in_range: null
	,array_of_unicode_codepoints: null
	,num_chars: null
	,chardata_for_range: null
	,h_oversample: null
	,v_oversample: null
	,__class__: kha_graphics2_truetype_Stbtt_$pack_$range
};
var kha_graphics2_truetype_Stbtt_$pack_$context = function() { };
$hxClasses["kha.graphics2.truetype.Stbtt_pack_context"] = kha_graphics2_truetype_Stbtt_$pack_$context;
kha_graphics2_truetype_Stbtt_$pack_$context.__name__ = "kha.graphics2.truetype.Stbtt_pack_context";
kha_graphics2_truetype_Stbtt_$pack_$context.prototype = {
	width: null
	,height: null
	,stride_in_bytes: null
	,padding: null
	,h_oversample: null
	,v_oversample: null
	,pixels: null
	,__class__: kha_graphics2_truetype_Stbtt_$pack_$context
};
var kha_graphics2_truetype_Stbtt_$fontinfo = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt_fontinfo"] = kha_graphics2_truetype_Stbtt_$fontinfo;
kha_graphics2_truetype_Stbtt_$fontinfo.__name__ = "kha.graphics2.truetype.Stbtt_fontinfo";
kha_graphics2_truetype_Stbtt_$fontinfo.prototype = {
	data: null
	,fontstart: null
	,numGlyphs: null
	,loca: null
	,head: null
	,glyf: null
	,hhea: null
	,hmtx: null
	,kern: null
	,index_map: null
	,indexToLocFormat: null
	,__class__: kha_graphics2_truetype_Stbtt_$fontinfo
};
var kha_graphics2_truetype_Stbtt_$vertex = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt_vertex"] = kha_graphics2_truetype_Stbtt_$vertex;
kha_graphics2_truetype_Stbtt_$vertex.__name__ = "kha.graphics2.truetype.Stbtt_vertex";
kha_graphics2_truetype_Stbtt_$vertex.prototype = {
	x: null
	,y: null
	,cx: null
	,cy: null
	,type: null
	,padding: null
	,__class__: kha_graphics2_truetype_Stbtt_$vertex
};
var kha_graphics2_truetype_Stbtt_$_$bitmap = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt__bitmap"] = kha_graphics2_truetype_Stbtt_$_$bitmap;
kha_graphics2_truetype_Stbtt_$_$bitmap.__name__ = "kha.graphics2.truetype.Stbtt__bitmap";
kha_graphics2_truetype_Stbtt_$_$bitmap.prototype = {
	w: null
	,h: null
	,stride: null
	,pixels: null
	,pixels_offset: null
	,__class__: kha_graphics2_truetype_Stbtt_$_$bitmap
};
var kha_graphics2_truetype_Stbtt_$_$edge = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt__edge"] = kha_graphics2_truetype_Stbtt_$_$edge;
kha_graphics2_truetype_Stbtt_$_$edge.__name__ = "kha.graphics2.truetype.Stbtt__edge";
kha_graphics2_truetype_Stbtt_$_$edge.prototype = {
	x0: null
	,y0: null
	,x1: null
	,y1: null
	,invert: null
	,__class__: kha_graphics2_truetype_Stbtt_$_$edge
};
var kha_graphics2_truetype_Stbtt_$_$active_$edge = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt__active_edge"] = kha_graphics2_truetype_Stbtt_$_$active_$edge;
kha_graphics2_truetype_Stbtt_$_$active_$edge.__name__ = "kha.graphics2.truetype.Stbtt__active_edge";
kha_graphics2_truetype_Stbtt_$_$active_$edge.prototype = {
	next: null
	,fx: null
	,fdx: null
	,fdy: null
	,direction: null
	,sy: null
	,ey: null
	,__class__: kha_graphics2_truetype_Stbtt_$_$active_$edge
};
var kha_graphics2_truetype_Stbtt_$_$point = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt__point"] = kha_graphics2_truetype_Stbtt_$_$point;
kha_graphics2_truetype_Stbtt_$_$point.__name__ = "kha.graphics2.truetype.Stbtt__point";
kha_graphics2_truetype_Stbtt_$_$point.prototype = {
	x: null
	,y: null
	,__class__: kha_graphics2_truetype_Stbtt_$_$point
};
var kha_graphics2_truetype_StbTruetype = function() { };
$hxClasses["kha.graphics2.truetype.StbTruetype"] = kha_graphics2_truetype_StbTruetype;
kha_graphics2_truetype_StbTruetype.__name__ = "kha.graphics2.truetype.StbTruetype";
kha_graphics2_truetype_StbTruetype.STBTT_assert = function(value) {
	if(!value) {
		throw new js__$Boot_HaxeError("Error");
	}
};
kha_graphics2_truetype_StbTruetype.STBTT_POINT_SIZE = function(x) {
	return -x;
};
kha_graphics2_truetype_StbTruetype.ttBYTE = function(p,pos) {
	if(pos == null) {
		pos = 0;
	}
	return p.readU8(pos);
};
kha_graphics2_truetype_StbTruetype.ttCHAR = function(p,pos) {
	if(pos == null) {
		pos = 0;
	}
	var n = p.readU8(pos);
	if(n >= 128) {
		return n - 256;
	}
	return n;
};
kha_graphics2_truetype_StbTruetype.ttUSHORT = function(p,pos) {
	if(pos == null) {
		pos = 0;
	}
	var ch1 = p.readU8(pos);
	var ch2 = p.readU8(pos + 1);
	return ch2 | ch1 << 8;
};
kha_graphics2_truetype_StbTruetype.ttSHORT = function(p,pos) {
	if(pos == null) {
		pos = 0;
	}
	var ch1 = p.readU8(pos);
	var ch2 = p.readU8(pos + 1);
	var n = ch2 | ch1 << 8;
	if((n & 32768) != 0) {
		return n - 65536;
	}
	return n;
};
kha_graphics2_truetype_StbTruetype.ttULONG = function(p,pos) {
	if(pos == null) {
		pos = 0;
	}
	var ch1 = p.readU8(pos);
	var ch2 = p.readU8(pos + 1);
	var ch3 = p.readU8(pos + 2);
	var ch4 = p.readU8(pos + 3);
	return ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24;
};
kha_graphics2_truetype_StbTruetype.ttLONG = function(p,pos) {
	if(pos == null) {
		pos = 0;
	}
	var ch1 = p.readU8(pos);
	var ch2 = p.readU8(pos + 1);
	var ch3 = p.readU8(pos + 2);
	var ch4 = p.readU8(pos + 3);
	return ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24;
};
kha_graphics2_truetype_StbTruetype.ttFixed = function(p,pos) {
	if(pos == null) {
		pos = 0;
	}
	var ch1 = p.readU8(pos);
	var ch2 = p.readU8(pos + 1);
	var ch3 = p.readU8(pos + 2);
	var ch4 = p.readU8(pos + 3);
	return ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24;
};
kha_graphics2_truetype_StbTruetype.stbtt_tag4 = function(p,pos,c0,c1,c2,c3) {
	if(p.readU8(pos) == c0 && p.readU8(pos + 1) == c1 && p.readU8(pos + 2) == c2) {
		return p.readU8(pos + 3) == c3;
	} else {
		return false;
	}
};
kha_graphics2_truetype_StbTruetype.stbtt_tag = function(p,pos,str) {
	var c0 = HxOverrides.cca(str,0);
	var c1 = HxOverrides.cca(str,1);
	var c2 = HxOverrides.cca(str,2);
	var c3 = HxOverrides.cca(str,3);
	if(p.readU8(pos) == c0 && p.readU8(pos + 1) == c1 && p.readU8(pos + 2) == c2) {
		return p.readU8(pos + 3) == c3;
	} else {
		return false;
	}
};
kha_graphics2_truetype_StbTruetype.stbtt__isfont = function(font) {
	var c0 = HxOverrides.cca("1",0);
	if(font.readU8(0) == c0 && font.readU8(1) == 0 && font.readU8(2) == 0 && font.readU8(3) == 0) {
		return true;
	}
	var c01 = HxOverrides.cca("typ1",0);
	var c1 = HxOverrides.cca("typ1",1);
	var c2 = HxOverrides.cca("typ1",2);
	var c3 = HxOverrides.cca("typ1",3);
	if(font.readU8(0) == c01 && font.readU8(1) == c1 && font.readU8(2) == c2 && font.readU8(3) == c3) {
		return true;
	}
	var c02 = HxOverrides.cca("OTTO",0);
	var c11 = HxOverrides.cca("OTTO",1);
	var c21 = HxOverrides.cca("OTTO",2);
	var c31 = HxOverrides.cca("OTTO",3);
	if(font.readU8(0) == c02 && font.readU8(1) == c11 && font.readU8(2) == c21 && font.readU8(3) == c31) {
		return true;
	}
	if(font.readU8(0) == 0 && font.readU8(1) == 1 && font.readU8(2) == 0 && font.readU8(3) == 0) {
		return true;
	}
	return false;
};
kha_graphics2_truetype_StbTruetype.stbtt__find_table = function(data,fontstart,tag) {
	var pos = fontstart + 4;
	var ch1 = data.readU8(pos);
	var ch2 = data.readU8(pos + 1);
	var num_tables = ch2 | ch1 << 8;
	var tabledir = fontstart + 12;
	var _g = 0;
	var _g1 = num_tables;
	while(_g < _g1) {
		var i = _g++;
		var loc = tabledir + 16 * i;
		var c0 = HxOverrides.cca(tag,0);
		var c1 = HxOverrides.cca(tag,1);
		var c2 = HxOverrides.cca(tag,2);
		var c3 = HxOverrides.cca(tag,3);
		if(data.readU8(loc) == c0 && data.readU8(loc + 1) == c1 && data.readU8(loc + 2) == c2 && data.readU8(loc + 3) == c3) {
			var pos1 = loc + 8;
			var ch11 = data.readU8(pos1);
			var ch21 = data.readU8(pos1 + 1);
			var ch3 = data.readU8(pos1 + 2);
			var ch4 = data.readU8(pos1 + 3);
			return ch4 | ch3 << 8 | ch21 << 16 | ch11 << 24;
		}
	}
	return 0;
};
kha_graphics2_truetype_StbTruetype.stbtt_GetFontOffsetForIndex = function(font_collection,index) {
	if(kha_graphics2_truetype_StbTruetype.stbtt__isfont(font_collection)) {
		if(index == 0) {
			return 0;
		} else {
			return -1;
		}
	}
	var c0 = HxOverrides.cca("ttcf",0);
	var c1 = HxOverrides.cca("ttcf",1);
	var c2 = HxOverrides.cca("ttcf",2);
	var c3 = HxOverrides.cca("ttcf",3);
	if(font_collection.readU8(0) == c0 && font_collection.readU8(1) == c1 && font_collection.readU8(2) == c2 && font_collection.readU8(3) == c3) {
		var tmp;
		var ch1 = font_collection.readU8(4);
		var ch2 = font_collection.readU8(5);
		var ch3 = font_collection.readU8(6);
		var ch4 = font_collection.readU8(7);
		if((ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24) != 65536) {
			var ch11 = font_collection.readU8(4);
			var ch21 = font_collection.readU8(5);
			var ch31 = font_collection.readU8(6);
			var ch41 = font_collection.readU8(7);
			tmp = (ch41 | ch31 << 8 | ch21 << 16 | ch11 << 24) == 131072;
		} else {
			tmp = true;
		}
		if(tmp) {
			var ch12 = font_collection.readU8(8);
			var ch22 = font_collection.readU8(9);
			var ch32 = font_collection.readU8(10);
			var ch42 = font_collection.readU8(11);
			var n = ch42 | ch32 << 8 | ch22 << 16 | ch12 << 24;
			if(index >= n) {
				return -1;
			}
			var pos = 12 + index * 4;
			var ch13 = font_collection.readU8(pos);
			var ch23 = font_collection.readU8(pos + 1);
			var ch33 = font_collection.readU8(pos + 2);
			var ch43 = font_collection.readU8(pos + 3);
			return ch43 | ch33 << 8 | ch23 << 16 | ch13 << 24;
		}
	}
	return -1;
};
kha_graphics2_truetype_StbTruetype.stbtt_InitFont = function(info,data,fontstart) {
	info.data = data;
	info.fontstart = fontstart;
	var cmap = kha_graphics2_truetype_StbTruetype.stbtt__find_table(data,fontstart,"cmap");
	info.loca = kha_graphics2_truetype_StbTruetype.stbtt__find_table(data,fontstart,"loca");
	info.head = kha_graphics2_truetype_StbTruetype.stbtt__find_table(data,fontstart,"head");
	info.glyf = kha_graphics2_truetype_StbTruetype.stbtt__find_table(data,fontstart,"glyf");
	info.hhea = kha_graphics2_truetype_StbTruetype.stbtt__find_table(data,fontstart,"hhea");
	info.hmtx = kha_graphics2_truetype_StbTruetype.stbtt__find_table(data,fontstart,"hmtx");
	info.kern = kha_graphics2_truetype_StbTruetype.stbtt__find_table(data,fontstart,"kern");
	if(cmap == 0 || info.loca == 0 || info.head == 0 || info.glyf == 0 || info.hhea == 0 || info.hmtx == 0) {
		return false;
	}
	var t = kha_graphics2_truetype_StbTruetype.stbtt__find_table(data,fontstart,"maxp");
	if(t != 0) {
		var pos = t + 4;
		var ch1 = data.readU8(pos);
		var ch2 = data.readU8(pos + 1);
		info.numGlyphs = ch2 | ch1 << 8;
	} else {
		info.numGlyphs = 65535;
	}
	var pos1 = cmap + 2;
	var ch11 = data.readU8(pos1);
	var ch21 = data.readU8(pos1 + 1);
	var numTables = ch21 | ch11 << 8;
	info.index_map = 0;
	var _g = 0;
	var _g1 = numTables;
	while(_g < _g1) {
		var i = _g++;
		var encoding_record = cmap + 4 + 8 * i;
		var ch12 = data.readU8(encoding_record);
		var ch22 = data.readU8(encoding_record + 1);
		switch(ch22 | ch12 << 8) {
		case 0:
			var pos2 = encoding_record + 4;
			var ch13 = data.readU8(pos2);
			var ch23 = data.readU8(pos2 + 1);
			var ch3 = data.readU8(pos2 + 2);
			var ch4 = data.readU8(pos2 + 3);
			info.index_map = cmap + (ch4 | ch3 << 8 | ch23 << 16 | ch13 << 24);
			break;
		case 3:
			var pos3 = encoding_record + 2;
			var ch14 = data.readU8(pos3);
			var ch24 = data.readU8(pos3 + 1);
			switch(ch24 | ch14 << 8) {
			case 1:case 10:
				var pos4 = encoding_record + 4;
				var ch15 = data.readU8(pos4);
				var ch25 = data.readU8(pos4 + 1);
				var ch31 = data.readU8(pos4 + 2);
				var ch41 = data.readU8(pos4 + 3);
				info.index_map = cmap + (ch41 | ch31 << 8 | ch25 << 16 | ch15 << 24);
				break;
			}
			break;
		}
	}
	if(info.index_map == 0) {
		return false;
	}
	var pos5 = info.head + 50;
	var ch16 = data.readU8(pos5);
	var ch26 = data.readU8(pos5 + 1);
	info.indexToLocFormat = ch26 | ch16 << 8;
	return true;
};
kha_graphics2_truetype_StbTruetype.stbtt_FindGlyphIndex = function(info,unicode_codepoint) {
	var data = info.data;
	var index_map = info.index_map;
	var ch1 = data.readU8(index_map);
	var ch2 = data.readU8(index_map + 1);
	var format = ch2 | ch1 << 8;
	if(format == 0) {
		var pos = index_map + 2;
		var ch11 = data.readU8(pos);
		var ch21 = data.readU8(pos + 1);
		var bytes = ch21 | ch11 << 8;
		if(unicode_codepoint < bytes - 6) {
			return data.readU8(index_map + 6 + unicode_codepoint);
		}
		return 0;
	} else if(format == 6) {
		var pos1 = index_map + 6;
		var ch12 = data.readU8(pos1);
		var ch22 = data.readU8(pos1 + 1);
		var first = ch22 | ch12 << 8;
		var pos2 = index_map + 8;
		var ch13 = data.readU8(pos2);
		var ch23 = data.readU8(pos2 + 1);
		var count = ch23 | ch13 << 8;
		if(unicode_codepoint >= first && unicode_codepoint < first + count) {
			var pos3 = index_map + 10 + (unicode_codepoint - first) * 2;
			var ch14 = data.readU8(pos3);
			var ch24 = data.readU8(pos3 + 1);
			return ch24 | ch14 << 8;
		}
		return 0;
	} else if(format == 2) {
		throw new js__$Boot_HaxeError("Error");
	} else if(format == 4) {
		var pos4 = index_map + 6;
		var ch15 = data.readU8(pos4);
		var ch25 = data.readU8(pos4 + 1);
		var segcount = (ch25 | ch15 << 8) >> 1;
		var pos5 = index_map + 8;
		var ch16 = data.readU8(pos5);
		var ch26 = data.readU8(pos5 + 1);
		var searchRange = (ch26 | ch16 << 8) >> 1;
		var pos6 = index_map + 10;
		var ch17 = data.readU8(pos6);
		var ch27 = data.readU8(pos6 + 1);
		var entrySelector = ch27 | ch17 << 8;
		var pos7 = index_map + 12;
		var ch18 = data.readU8(pos7);
		var ch28 = data.readU8(pos7 + 1);
		var rangeShift = (ch28 | ch18 << 8) >> 1;
		var endCount = index_map + 14;
		var search = endCount;
		if(unicode_codepoint > 65535) {
			return 0;
		}
		var pos8 = search + rangeShift * 2;
		var ch19 = data.readU8(pos8);
		var ch29 = data.readU8(pos8 + 1);
		if(unicode_codepoint >= (ch29 | ch19 << 8)) {
			search += rangeShift * 2;
		}
		search -= 2;
		while(entrySelector != 0) {
			searchRange >>= 1;
			var pos9 = search + searchRange * 2;
			var ch110 = data.readU8(pos9);
			var ch210 = data.readU8(pos9 + 1);
			var end = ch210 | ch110 << 8;
			if(unicode_codepoint > end) {
				search += searchRange * 2;
			}
			--entrySelector;
		}
		search += 2;
		var item = search - endCount >> 1;
		var pos10 = endCount + 2 * item;
		var ch111 = data.readU8(pos10);
		var ch211 = data.readU8(pos10 + 1);
		if(unicode_codepoint > (ch211 | ch111 << 8)) {
			throw new js__$Boot_HaxeError("Error");
		}
		var pos11 = index_map + 14 + segcount * 2 + 2 + 2 * item;
		var ch112 = data.readU8(pos11);
		var ch212 = data.readU8(pos11 + 1);
		var start = ch212 | ch112 << 8;
		if(unicode_codepoint < start) {
			return 0;
		}
		var pos12 = index_map + 14 + segcount * 6 + 2 + 2 * item;
		var ch113 = data.readU8(pos12);
		var ch213 = data.readU8(pos12 + 1);
		var offset = ch213 | ch113 << 8;
		if(offset == 0) {
			var pos13 = index_map + 14 + segcount * 4 + 2 + 2 * item;
			var ch114 = data.readU8(pos13);
			var ch214 = data.readU8(pos13 + 1);
			var n = ch214 | ch114 << 8;
			return unicode_codepoint + ((n & 32768) != 0 ? n - 65536 : n);
		}
		var pos14 = offset + (unicode_codepoint - start) * 2 + index_map + 14 + segcount * 6 + 2 + 2 * item;
		var ch115 = data.readU8(pos14);
		var ch215 = data.readU8(pos14 + 1);
		return ch215 | ch115 << 8;
	} else if(format == 12 || format == 13) {
		var pos15 = index_map + 12;
		var ch116 = data.readU8(pos15);
		var ch216 = data.readU8(pos15 + 1);
		var ch3 = data.readU8(pos15 + 2);
		var ch4 = data.readU8(pos15 + 3);
		var ngroups = ch4 | ch3 << 8 | ch216 << 16 | ch116 << 24;
		var low = 0;
		var high = ngroups;
		while(low < high) {
			var mid = low + (high - low >> 1);
			var pos16 = index_map + 16 + mid * 12;
			var ch117 = data.readU8(pos16);
			var ch217 = data.readU8(pos16 + 1);
			var ch31 = data.readU8(pos16 + 2);
			var ch41 = data.readU8(pos16 + 3);
			var start_char = ch41 | ch31 << 8 | ch217 << 16 | ch117 << 24;
			var pos17 = index_map + 16 + mid * 12 + 4;
			var ch118 = data.readU8(pos17);
			var ch218 = data.readU8(pos17 + 1);
			var ch32 = data.readU8(pos17 + 2);
			var ch42 = data.readU8(pos17 + 3);
			var end_char = ch42 | ch32 << 8 | ch218 << 16 | ch118 << 24;
			if(unicode_codepoint < start_char) {
				high = mid;
			} else if(unicode_codepoint > end_char) {
				low = mid + 1;
			} else {
				var pos18 = index_map + 16 + mid * 12 + 8;
				var ch119 = data.readU8(pos18);
				var ch219 = data.readU8(pos18 + 1);
				var ch33 = data.readU8(pos18 + 2);
				var ch43 = data.readU8(pos18 + 3);
				var start_glyph = ch43 | ch33 << 8 | ch219 << 16 | ch119 << 24;
				if(format == 12) {
					return start_glyph + unicode_codepoint - start_char;
				} else {
					return start_glyph;
				}
			}
		}
		return 0;
	}
	throw new js__$Boot_HaxeError("Error");
};
kha_graphics2_truetype_StbTruetype.stbtt_GetCodepointShape = function(info,unicode_codepoint) {
	return kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphShape(info,kha_graphics2_truetype_StbTruetype.stbtt_FindGlyphIndex(info,unicode_codepoint));
};
kha_graphics2_truetype_StbTruetype.stbtt_setvertex = function(v,type,x,y,cx,cy) {
	v.type = type;
	v.x = x;
	v.y = y;
	v.cx = cx;
	v.cy = cy;
};
kha_graphics2_truetype_StbTruetype.stbtt__GetGlyfOffset = function(info,glyph_index) {
	var g1;
	var g2;
	if(glyph_index >= info.numGlyphs) {
		return -1;
	}
	if(info.indexToLocFormat >= 2) {
		return -1;
	}
	if(info.indexToLocFormat == 0) {
		var info1 = info.glyf;
		var p = info.data;
		var pos = info.loca + glyph_index * 2;
		var ch1 = p.readU8(pos);
		var ch2 = p.readU8(pos + 1);
		g1 = info1 + (ch2 | ch1 << 8) * 2;
		var info2 = info.glyf;
		var p1 = info.data;
		var pos1 = info.loca + glyph_index * 2 + 2;
		var ch11 = p1.readU8(pos1);
		var ch21 = p1.readU8(pos1 + 1);
		g2 = info2 + (ch21 | ch11 << 8) * 2;
	} else {
		var info3 = info.glyf;
		var p2 = info.data;
		var pos2 = info.loca + glyph_index * 4;
		var ch12 = p2.readU8(pos2);
		var ch22 = p2.readU8(pos2 + 1);
		var ch3 = p2.readU8(pos2 + 2);
		var ch4 = p2.readU8(pos2 + 3);
		g1 = info3 + (ch4 | ch3 << 8 | ch22 << 16 | ch12 << 24);
		var info4 = info.glyf;
		var p3 = info.data;
		var pos3 = info.loca + glyph_index * 4 + 4;
		var ch13 = p3.readU8(pos3);
		var ch23 = p3.readU8(pos3 + 1);
		var ch31 = p3.readU8(pos3 + 2);
		var ch41 = p3.readU8(pos3 + 3);
		g2 = info4 + (ch41 | ch31 << 8 | ch23 << 16 | ch13 << 24);
	}
	if(g1 == g2) {
		return -1;
	} else {
		return g1;
	}
};
kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBox = function(info,glyph_index,rect) {
	var g = kha_graphics2_truetype_StbTruetype.stbtt__GetGlyfOffset(info,glyph_index);
	if(g < 0) {
		return false;
	}
	var p = info.data;
	var pos = g + 2;
	var ch1 = p.readU8(pos);
	var ch2 = p.readU8(pos + 1);
	var n = ch2 | ch1 << 8;
	rect.x0 = (n & 32768) != 0 ? n - 65536 : n;
	var p1 = info.data;
	var pos1 = g + 4;
	var ch11 = p1.readU8(pos1);
	var ch21 = p1.readU8(pos1 + 1);
	var n1 = ch21 | ch11 << 8;
	rect.y0 = (n1 & 32768) != 0 ? n1 - 65536 : n1;
	var p2 = info.data;
	var pos2 = g + 6;
	var ch12 = p2.readU8(pos2);
	var ch22 = p2.readU8(pos2 + 1);
	var n2 = ch22 | ch12 << 8;
	rect.x1 = (n2 & 32768) != 0 ? n2 - 65536 : n2;
	var p3 = info.data;
	var pos3 = g + 8;
	var ch13 = p3.readU8(pos3);
	var ch23 = p3.readU8(pos3 + 1);
	var n3 = ch23 | ch13 << 8;
	rect.y1 = (n3 & 32768) != 0 ? n3 - 65536 : n3;
	return true;
};
kha_graphics2_truetype_StbTruetype.stbtt_GetCodepointBox = function(info,codepoint,rect) {
	return kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBox(info,kha_graphics2_truetype_StbTruetype.stbtt_FindGlyphIndex(info,codepoint),rect);
};
kha_graphics2_truetype_StbTruetype.stbtt_IsGlyphEmpty = function(info,glyph_index) {
	var g = kha_graphics2_truetype_StbTruetype.stbtt__GetGlyfOffset(info,glyph_index);
	if(g < 0) {
		return true;
	}
	var p = info.data;
	var ch1 = p.readU8(g);
	var ch2 = p.readU8(g + 1);
	var n = ch2 | ch1 << 8;
	var numberOfContours = (n & 32768) != 0 ? n - 65536 : n;
	return numberOfContours == 0;
};
kha_graphics2_truetype_StbTruetype.stbtt__close_shape = function(vertices,num_vertices,was_off,start_off,sx,sy,scx,scy,cx,cy) {
	if(start_off) {
		if(was_off) {
			kha_graphics2_truetype_StbTruetype.stbtt_setvertex(vertices[num_vertices++],3,cx + scx >> 1,cy + scy >> 1,cx,cy);
		}
		kha_graphics2_truetype_StbTruetype.stbtt_setvertex(vertices[num_vertices++],3,sx,sy,scx,scy);
	} else if(was_off) {
		kha_graphics2_truetype_StbTruetype.stbtt_setvertex(vertices[num_vertices++],3,sx,sy,cx,cy);
	} else {
		kha_graphics2_truetype_StbTruetype.stbtt_setvertex(vertices[num_vertices++],2,sx,sy,0,0);
	}
	return num_vertices;
};
kha_graphics2_truetype_StbTruetype.copyVertices = function(from,to,offset,count) {
	var _g = 0;
	var _g1 = count;
	while(_g < _g1) {
		var i = _g++;
		to[offset + i] = from[i];
	}
};
kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphShape = function(info,glyph_index) {
	var data = info.data;
	var vertices = null;
	var num_vertices = 0;
	var g = kha_graphics2_truetype_StbTruetype.stbtt__GetGlyfOffset(info,glyph_index);
	if(g < 0) {
		return null;
	}
	var ch1 = data.readU8(g);
	var ch2 = data.readU8(g + 1);
	var n = ch2 | ch1 << 8;
	var numberOfContours = (n & 32768) != 0 ? n - 65536 : n;
	if(numberOfContours > 0) {
		var flags = 0;
		var j = 0;
		var next_move = 0;
		var off = 0;
		var was_off = false;
		var start_off = false;
		var endPtsOfContoursOffset = g + 10;
		var pos = endPtsOfContoursOffset + numberOfContours * 2;
		var ch11 = data.readU8(pos);
		var ch21 = data.readU8(pos + 1);
		var ins = ch21 | ch11 << 8;
		var pointsIndex = endPtsOfContoursOffset + numberOfContours * 2 + 2 + ins;
		var pos1 = endPtsOfContoursOffset + numberOfContours * 2 - 2;
		var ch12 = data.readU8(pos1);
		var ch22 = data.readU8(pos1 + 1);
		var n1 = 1 + (ch22 | ch12 << 8);
		var m = n1 + 2 * numberOfContours;
		var this1 = new Array(m);
		vertices = this1;
		if(vertices == null) {
			return null;
		} else {
			var _g = 0;
			var _g1 = vertices.length;
			while(_g < _g1) {
				var i = _g++;
				vertices[i] = new kha_graphics2_truetype_Stbtt_$vertex();
			}
		}
		next_move = 0;
		var flagcount = 0;
		off = m - n1;
		var _g2 = 0;
		var _g11 = n1;
		while(_g2 < _g11) {
			var i1 = _g2++;
			if(flagcount == 0) {
				flags = data.readU8(pointsIndex++);
				if((flags & 8) != 0) {
					flagcount = data.readU8(pointsIndex++);
				}
			} else {
				--flagcount;
			}
			vertices[off + i1].type = flags;
		}
		var x = 0;
		var _g21 = 0;
		var _g3 = n1;
		while(_g21 < _g3) {
			var i2 = _g21++;
			flags = vertices[off + i2].type;
			if((flags & 2) != 0) {
				var dx = data.readU8(pointsIndex++);
				x += (flags & 16) != 0 ? dx : -dx;
			} else if((flags & 16) == 0) {
				var value;
				var ch13 = data.readU8(pointsIndex);
				var ch23 = data.readU8(pointsIndex + 1);
				var n2 = ch23 | ch13 << 8;
				if((n2 & 32768) != 0) {
					value = n2 - 65536;
				} else {
					value = n2;
				}
				x += value;
				pointsIndex += 2;
			}
			vertices[off + i2].x = x;
		}
		var y = 0;
		var _g4 = 0;
		var _g5 = n1;
		while(_g4 < _g5) {
			var i3 = _g4++;
			flags = vertices[off + i3].type;
			if((flags & 4) != 0) {
				var dy = data.readU8(pointsIndex++);
				y += (flags & 32) != 0 ? dy : -dy;
			} else if((flags & 32) == 0) {
				var value1;
				var ch14 = data.readU8(pointsIndex);
				var ch24 = data.readU8(pointsIndex + 1);
				var n3 = ch24 | ch14 << 8;
				if((n3 & 32768) != 0) {
					value1 = n3 - 65536;
				} else {
					value1 = n3;
				}
				y += value1;
				pointsIndex += 2;
			}
			vertices[off + i3].y = y;
		}
		num_vertices = 0;
		var scy = 0;
		var scx = scy;
		var cy = scx;
		var cx = cy;
		var sy = cx;
		var sx = sy;
		var i4 = 0;
		while(i4 < n1) {
			flags = vertices[off + i4].type;
			x = vertices[off + i4].x;
			y = vertices[off + i4].y;
			if(next_move == i4) {
				if(i4 != 0) {
					num_vertices = kha_graphics2_truetype_StbTruetype.stbtt__close_shape(vertices,num_vertices,was_off,start_off,sx,sy,scx,scy,cx,cy);
				}
				start_off = (flags & 1) == 0;
				if(start_off) {
					scx = x;
					scy = y;
					if((vertices[off + i4 + 1].type & 1) == 0) {
						sx = x + vertices[off + i4 + 1].x >> 1;
						sy = y + vertices[off + i4 + 1].y >> 1;
					} else {
						sx = vertices[off + i4 + 1].x;
						sy = vertices[off + i4 + 1].y;
						++i4;
					}
				} else {
					sx = x;
					sy = y;
				}
				kha_graphics2_truetype_StbTruetype.stbtt_setvertex(vertices[num_vertices++],1,sx,sy,0,0);
				was_off = false;
				var pos2 = endPtsOfContoursOffset + j * 2;
				var ch15 = data.readU8(pos2);
				var ch25 = data.readU8(pos2 + 1);
				next_move = 1 + (ch25 | ch15 << 8);
				++j;
			} else if((flags & 1) == 0) {
				if(was_off) {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(vertices[num_vertices++],3,cx + x >> 1,cy + y >> 1,cx,cy);
				}
				cx = x;
				cy = y;
				was_off = true;
			} else {
				if(was_off) {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(vertices[num_vertices++],3,x,y,cx,cy);
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(vertices[num_vertices++],2,x,y,0,0);
				}
				was_off = false;
			}
			++i4;
		}
		num_vertices = kha_graphics2_truetype_StbTruetype.stbtt__close_shape(vertices,num_vertices,was_off,start_off,sx,sy,scx,scy,cx,cy);
	} else if(numberOfContours == -1) {
		var more = 1;
		var compIndex = g + 10;
		num_vertices = 0;
		vertices = null;
		while(more != 0) {
			var comp_num_verts = 0;
			var i5;
			var comp_verts = null;
			var tmp = null;
			var mtx0 = 1;
			var mtx1 = 0;
			var mtx2 = 0;
			var mtx3 = 1;
			var mtx4 = 0;
			var mtx5 = 0;
			var ch16 = data.readU8(compIndex);
			var ch26 = data.readU8(compIndex + 1);
			var n4 = ch26 | ch16 << 8;
			var flags1 = (n4 & 32768) != 0 ? n4 - 65536 : n4;
			compIndex += 2;
			var ch17 = data.readU8(compIndex);
			var ch27 = data.readU8(compIndex + 1);
			var n5 = ch27 | ch17 << 8;
			var gidx = (n5 & 32768) != 0 ? n5 - 65536 : n5;
			compIndex += 2;
			if((flags1 & 2) != 0) {
				if((flags1 & 1) != 0) {
					var ch18 = data.readU8(compIndex);
					var ch28 = data.readU8(compIndex + 1);
					var n6 = ch28 | ch18 << 8;
					mtx4 = (n6 & 32768) != 0 ? n6 - 65536 : n6;
					compIndex += 2;
					var ch19 = data.readU8(compIndex);
					var ch29 = data.readU8(compIndex + 1);
					var n7 = ch29 | ch19 << 8;
					mtx5 = (n7 & 32768) != 0 ? n7 - 65536 : n7;
					compIndex += 2;
				} else {
					var n8 = data.readU8(compIndex);
					mtx4 = n8 >= 128 ? n8 - 256 : n8;
					++compIndex;
					var n9 = data.readU8(compIndex);
					mtx5 = n9 >= 128 ? n9 - 256 : n9;
					++compIndex;
				}
			} else {
				throw new js__$Boot_HaxeError("Error");
			}
			if((flags1 & 8) != 0) {
				var ch110 = data.readU8(compIndex);
				var ch210 = data.readU8(compIndex + 1);
				var n10 = ch210 | ch110 << 8;
				mtx3 = ((n10 & 32768) != 0 ? n10 - 65536 : n10) / 16384.0;
				mtx0 = mtx3;
				compIndex += 2;
				mtx2 = 0;
				mtx1 = mtx2;
			} else if((flags1 & 64) != 0) {
				var ch111 = data.readU8(compIndex);
				var ch211 = data.readU8(compIndex + 1);
				var n11 = ch211 | ch111 << 8;
				mtx0 = ((n11 & 32768) != 0 ? n11 - 65536 : n11) / 16384.0;
				compIndex += 2;
				mtx2 = 0;
				mtx1 = mtx2;
				var ch112 = data.readU8(compIndex);
				var ch212 = data.readU8(compIndex + 1);
				var n12 = ch212 | ch112 << 8;
				mtx3 = ((n12 & 32768) != 0 ? n12 - 65536 : n12) / 16384.0;
				compIndex += 2;
			} else if((flags1 & 128) != 0) {
				var ch113 = data.readU8(compIndex);
				var ch213 = data.readU8(compIndex + 1);
				var n13 = ch213 | ch113 << 8;
				mtx0 = ((n13 & 32768) != 0 ? n13 - 65536 : n13) / 16384.0;
				compIndex += 2;
				var ch114 = data.readU8(compIndex);
				var ch214 = data.readU8(compIndex + 1);
				var n14 = ch214 | ch114 << 8;
				mtx1 = ((n14 & 32768) != 0 ? n14 - 65536 : n14) / 16384.0;
				compIndex += 2;
				var ch115 = data.readU8(compIndex);
				var ch215 = data.readU8(compIndex + 1);
				var n15 = ch215 | ch115 << 8;
				mtx2 = ((n15 & 32768) != 0 ? n15 - 65536 : n15) / 16384.0;
				compIndex += 2;
				var ch116 = data.readU8(compIndex);
				var ch216 = data.readU8(compIndex + 1);
				var n16 = ch216 | ch116 << 8;
				mtx3 = ((n16 & 32768) != 0 ? n16 - 65536 : n16) / 16384.0;
				compIndex += 2;
			}
			var m1 = Math.sqrt(mtx0 * mtx0 + mtx1 * mtx1);
			var n17 = Math.sqrt(mtx2 * mtx2 + mtx3 * mtx3);
			comp_verts = kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphShape(info,gidx);
			comp_num_verts = comp_verts == null ? 0 : comp_verts.length;
			if(comp_num_verts > 0) {
				var _g6 = 0;
				var _g12 = comp_num_verts;
				while(_g6 < _g12) {
					var i6 = _g6++;
					var v = comp_verts[i6];
					var x1 = v.x;
					var y1 = v.y;
					v.x = m1 * (mtx0 * x1 + mtx2 * y1 + mtx4) | 0;
					v.y = n17 * (mtx1 * x1 + mtx3 * y1 + mtx5) | 0;
					x1 = v.cx;
					y1 = v.cy;
					v.cx = m1 * (mtx0 * x1 + mtx2 * y1 + mtx4) | 0;
					v.cy = n17 * (mtx1 * x1 + mtx3 * y1 + mtx5) | 0;
				}
				var this2 = new Array(num_vertices + comp_num_verts);
				tmp = this2;
				if(tmp == null) {
					return null;
				}
				if(num_vertices > 0) {
					kha_graphics2_truetype_StbTruetype.copyVertices(vertices,tmp,0,num_vertices);
				}
				kha_graphics2_truetype_StbTruetype.copyVertices(comp_verts,tmp,num_vertices,comp_num_verts);
				vertices = tmp;
				num_vertices += comp_num_verts;
			}
			more = flags1 & 32;
		}
	} else if(numberOfContours < 0) {
		throw new js__$Boot_HaxeError("Error");
	}
	if(vertices == null) {
		return null;
	}
	if(vertices.length < num_vertices) {
		throw new js__$Boot_HaxeError("Error");
	}
	if(num_vertices < vertices.length) {
		var this3 = new Array(num_vertices);
		var tmp1 = this3;
		kha_graphics2_truetype_StbTruetype.copyVertices(vertices,tmp1,0,num_vertices);
		return tmp1;
	} else {
		return vertices;
	}
};
kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphHMetrics = function(info,glyph_index) {
	var p = info.data;
	var pos = info.hhea + 34;
	var ch1 = p.readU8(pos);
	var ch2 = p.readU8(pos + 1);
	var numOfLongHorMetrics = ch2 | ch1 << 8;
	var metrics = new kha_graphics2_truetype_Stbtt_$temp_$glyph_$h_$metrics();
	if(glyph_index < numOfLongHorMetrics) {
		var p1 = info.data;
		var pos1 = info.hmtx + 4 * glyph_index;
		var ch11 = p1.readU8(pos1);
		var ch21 = p1.readU8(pos1 + 1);
		var n = ch21 | ch11 << 8;
		metrics.advanceWidth = (n & 32768) != 0 ? n - 65536 : n;
		var p2 = info.data;
		var pos2 = info.hmtx + 4 * glyph_index + 2;
		var ch12 = p2.readU8(pos2);
		var ch22 = p2.readU8(pos2 + 1);
		var n1 = ch22 | ch12 << 8;
		metrics.leftSideBearing = (n1 & 32768) != 0 ? n1 - 65536 : n1;
	} else {
		var p3 = info.data;
		var pos3 = info.hmtx + 4 * (numOfLongHorMetrics - 1);
		var ch13 = p3.readU8(pos3);
		var ch23 = p3.readU8(pos3 + 1);
		var n2 = ch23 | ch13 << 8;
		metrics.advanceWidth = (n2 & 32768) != 0 ? n2 - 65536 : n2;
		var p4 = info.data;
		var pos4 = info.hmtx + 4 * numOfLongHorMetrics + 2 * (glyph_index - numOfLongHorMetrics);
		var ch14 = p4.readU8(pos4);
		var ch24 = p4.readU8(pos4 + 1);
		var n3 = ch24 | ch14 << 8;
		metrics.leftSideBearing = (n3 & 32768) != 0 ? n3 - 65536 : n3;
	}
	return metrics;
};
kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphKernAdvance = function(info,glyph1,glyph2) {
	var kern = info.kern;
	var data = info.data;
	var straw;
	var m;
	if(info.kern == 0) {
		return 0;
	}
	var pos = kern + 2;
	var ch1 = data.readU8(pos);
	var ch2 = data.readU8(pos + 1);
	if((ch2 | ch1 << 8) < 1) {
		return 0;
	}
	var pos1 = kern + 8;
	var ch11 = data.readU8(pos1);
	var ch21 = data.readU8(pos1 + 1);
	if((ch21 | ch11 << 8) != 1) {
		return 0;
	}
	var l = 0;
	var pos2 = kern + 10;
	var ch12 = data.readU8(pos2);
	var ch22 = data.readU8(pos2 + 1);
	var r = (ch22 | ch12 << 8) - 1;
	var needle = glyph1 << 16 | glyph2;
	while(l <= r) {
		m = l + r >> 1;
		var pos3 = kern + 18 + m * 6;
		var ch13 = data.readU8(pos3);
		var ch23 = data.readU8(pos3 + 1);
		var ch3 = data.readU8(pos3 + 2);
		var ch4 = data.readU8(pos3 + 3);
		straw = ch4 | ch3 << 8 | ch23 << 16 | ch13 << 24;
		if(needle < straw) {
			r = m - 1;
		} else if(needle > straw) {
			l = m + 1;
		} else {
			var pos4 = kern + 22 + m * 6;
			var ch14 = data.readU8(pos4);
			var ch24 = data.readU8(pos4 + 1);
			var n = ch24 | ch14 << 8;
			if((n & 32768) != 0) {
				return n - 65536;
			} else {
				return n;
			}
		}
	}
	return 0;
};
kha_graphics2_truetype_StbTruetype.stbtt_GetCodepointKernAdvance = function(info,ch1,ch2) {
	if(info.kern == 0) {
		return 0;
	}
	return kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphKernAdvance(info,kha_graphics2_truetype_StbTruetype.stbtt_FindGlyphIndex(info,ch1),kha_graphics2_truetype_StbTruetype.stbtt_FindGlyphIndex(info,ch2));
};
kha_graphics2_truetype_StbTruetype.stbtt_GetCodepointHMetrics = function(info,codepoint) {
	return kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphHMetrics(info,kha_graphics2_truetype_StbTruetype.stbtt_FindGlyphIndex(info,codepoint));
};
kha_graphics2_truetype_StbTruetype.stbtt_GetFontVMetrics = function(info) {
	var metrics = new kha_graphics2_truetype_Stbtt_$temp_$font_$v_$metrics();
	var p = info.data;
	var pos = info.hhea + 4;
	var ch1 = p.readU8(pos);
	var ch2 = p.readU8(pos + 1);
	var n = ch2 | ch1 << 8;
	metrics.ascent = (n & 32768) != 0 ? n - 65536 : n;
	var p1 = info.data;
	var pos1 = info.hhea + 6;
	var ch11 = p1.readU8(pos1);
	var ch21 = p1.readU8(pos1 + 1);
	var n1 = ch21 | ch11 << 8;
	metrics.descent = (n1 & 32768) != 0 ? n1 - 65536 : n1;
	var p2 = info.data;
	var pos2 = info.hhea + 8;
	var ch12 = p2.readU8(pos2);
	var ch22 = p2.readU8(pos2 + 1);
	var n2 = ch22 | ch12 << 8;
	metrics.lineGap = (n2 & 32768) != 0 ? n2 - 65536 : n2;
	return metrics;
};
kha_graphics2_truetype_StbTruetype.stbtt_GetFontBoundingBox = function(info) {
	var rect = new kha_graphics2_truetype_Stbtt_$temp_$rect();
	var p = info.data;
	var pos = info.head + 36;
	var ch1 = p.readU8(pos);
	var ch2 = p.readU8(pos + 1);
	var n = ch2 | ch1 << 8;
	rect.x0 = (n & 32768) != 0 ? n - 65536 : n;
	var p1 = info.data;
	var pos1 = info.head + 38;
	var ch11 = p1.readU8(pos1);
	var ch21 = p1.readU8(pos1 + 1);
	var n1 = ch21 | ch11 << 8;
	rect.y0 = (n1 & 32768) != 0 ? n1 - 65536 : n1;
	var p2 = info.data;
	var pos2 = info.head + 40;
	var ch12 = p2.readU8(pos2);
	var ch22 = p2.readU8(pos2 + 1);
	var n2 = ch22 | ch12 << 8;
	rect.x1 = (n2 & 32768) != 0 ? n2 - 65536 : n2;
	var p3 = info.data;
	var pos3 = info.head + 42;
	var ch13 = p3.readU8(pos3);
	var ch23 = p3.readU8(pos3 + 1);
	var n3 = ch23 | ch13 << 8;
	rect.y1 = (n3 & 32768) != 0 ? n3 - 65536 : n3;
	return rect;
};
kha_graphics2_truetype_StbTruetype.stbtt_ScaleForPixelHeight = function(info,height) {
	var p = info.data;
	var pos = info.hhea + 4;
	var ch1 = p.readU8(pos);
	var ch2 = p.readU8(pos + 1);
	var n = ch2 | ch1 << 8;
	var p1 = info.data;
	var pos1 = info.hhea + 6;
	var ch11 = p1.readU8(pos1);
	var ch21 = p1.readU8(pos1 + 1);
	var n1 = ch21 | ch11 << 8;
	var fheight = ((n & 32768) != 0 ? n - 65536 : n) - ((n1 & 32768) != 0 ? n1 - 65536 : n1);
	return height / fheight;
};
kha_graphics2_truetype_StbTruetype.stbtt_ScaleForMappingEmToPixels = function(info,pixels) {
	var p = info.data;
	var pos = info.head + 18;
	var ch1 = p.readU8(pos);
	var ch2 = p.readU8(pos + 1);
	var unitsPerEm = ch2 | ch1 << 8;
	return pixels / unitsPerEm;
};
kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBitmapBoxSubpixel = function(font,glyph,scale_x,scale_y,shift_x,shift_y) {
	var rect = new kha_graphics2_truetype_Stbtt_$temp_$rect();
	if(!kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBox(font,glyph,rect)) {
		rect.x0 = 0;
		rect.y0 = 0;
		rect.x1 = 0;
		rect.y1 = 0;
	} else {
		var x0 = rect.x0;
		var x1 = rect.x1;
		var y0 = rect.y0;
		var y1 = rect.y1;
		rect.x0 = Math.floor(x0 * scale_x + shift_x);
		rect.y0 = Math.floor(-y1 * scale_y + shift_y);
		rect.x1 = Math.ceil(x1 * scale_x + shift_x);
		rect.y1 = Math.ceil(-y0 * scale_y + shift_y);
	}
	return rect;
};
kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBitmapBox = function(font,glyph,scale_x,scale_y) {
	return kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBitmapBoxSubpixel(font,glyph,scale_x,scale_y,0.0,0.0);
};
kha_graphics2_truetype_StbTruetype.stbtt_GetCodepointBitmapBoxSubpixel = function(font,codepoint,scale_x,scale_y,shift_x,shift_y) {
	return kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBitmapBoxSubpixel(font,kha_graphics2_truetype_StbTruetype.stbtt_FindGlyphIndex(font,codepoint),scale_x,scale_y,shift_x,shift_y);
};
kha_graphics2_truetype_StbTruetype.stbtt_GetCodepointBitmapBox = function(font,codepoint,scale_x,scale_y) {
	return kha_graphics2_truetype_StbTruetype.stbtt_GetCodepointBitmapBoxSubpixel(font,codepoint,scale_x,scale_y,0.0,0.0);
};
kha_graphics2_truetype_StbTruetype.stbtt__new_active = function(e,eIndex,off_x,start_point) {
	var z = new kha_graphics2_truetype_Stbtt_$_$active_$edge();
	var dxdy = (e[eIndex].x1 - e[eIndex].x0) / (e[eIndex].y1 - e[eIndex].y0);
	if(z == null) {
		return z;
	}
	z.fdx = dxdy;
	z.fdy = dxdy != 0.0 ? 1.0 / dxdy : 0.0;
	z.fx = e[eIndex].x0 + dxdy * (start_point - e[eIndex].y0);
	z.fx -= off_x;
	z.direction = e[eIndex].invert ? 1.0 : -1.0;
	z.sy = e[eIndex].y0;
	z.ey = e[eIndex].y1;
	z.next = null;
	return z;
};
kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge = function(scanline,scanlineIndex,x,e,x0,y0,x1,y1) {
	if(y0 == y1) {
		return;
	}
	if(!(y0 < y1)) {
		throw new js__$Boot_HaxeError("Error");
	}
	if(!(e.sy <= e.ey)) {
		throw new js__$Boot_HaxeError("Error");
	}
	if(y0 > e.ey) {
		return;
	}
	if(y1 < e.sy) {
		return;
	}
	if(y0 < e.sy) {
		x0 += (x1 - x0) * (e.sy - y0) / (y1 - y0);
		y0 = e.sy;
	}
	if(y1 > e.ey) {
		x1 += (x1 - x0) * (e.ey - y1) / (y1 - y0);
		y1 = e.ey;
	}
	if(x0 == x) {
		if(!(x1 <= x + 1)) {
			throw new js__$Boot_HaxeError("Error");
		}
	} else if(x0 == x + 1) {
		if(!(x1 >= x)) {
			throw new js__$Boot_HaxeError("Error");
		}
	} else if(x0 <= x) {
		if(!(x1 <= x)) {
			throw new js__$Boot_HaxeError("Error");
		}
	} else if(x0 >= x + 1) {
		if(!(x1 >= x + 1)) {
			throw new js__$Boot_HaxeError("Error");
		}
	} else if(!(x1 >= x && x1 <= x + 1)) {
		throw new js__$Boot_HaxeError("Error");
	}
	if(x0 <= x && x1 <= x) {
		var _g = scanlineIndex + x;
		var _g1 = scanline;
		_g1[_g] = _g1[_g] + e.direction * (y1 - y0);
	} else if(!(x0 >= x + 1 && x1 >= x + 1)) {
		if(!(x0 >= x && x0 <= x + 1 && x1 >= x && x1 <= x + 1)) {
			throw new js__$Boot_HaxeError("Error");
		}
		var _g2 = scanlineIndex + x;
		var _g11 = scanline;
		_g11[_g2] = _g11[_g2] + e.direction * (y1 - y0) * (1 - (x0 - x + (x1 - x)) / 2);
	}
};
kha_graphics2_truetype_StbTruetype.stbtt__fill_active_edges_new = function(scanline,scanline_fill,scanline_fillIndex,len,e,y_top) {
	var y_bottom = y_top + 1;
	while(e != null) {
		if(!(e.ey >= y_top)) {
			throw new js__$Boot_HaxeError("Error");
		}
		if(e.fdx == 0) {
			var x0 = e.fx;
			if(x0 < len) {
				if(x0 >= 0) {
					kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x0 | 0,e,x0,y_top,x0,y_bottom);
					kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline_fill,scanline_fillIndex - 1,x0 + 1 | 0,e,x0,y_top,x0,y_bottom);
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline_fill,scanline_fillIndex - 1,0,e,x0,y_top,x0,y_bottom);
				}
			}
		} else {
			var x01 = e.fx;
			var dx = e.fdx;
			var xb = x01 + dx;
			var x_top;
			var x_bottom;
			var sy0;
			var sy1;
			var dy = e.fdy;
			if(!(e.sy <= y_bottom && e.ey >= y_top)) {
				throw new js__$Boot_HaxeError("Error");
			}
			if(e.sy > y_top) {
				x_top = x01 + dx * (e.sy - y_top);
				sy0 = e.sy;
			} else {
				x_top = x01;
				sy0 = y_top;
			}
			if(e.ey < y_bottom) {
				x_bottom = x01 + dx * (e.ey - y_top);
				sy1 = e.ey;
			} else {
				x_bottom = xb;
				sy1 = y_bottom;
			}
			if(x_top >= 0 && x_bottom >= 0 && x_top < len && x_bottom < len) {
				if((x_top | 0) == (x_bottom | 0)) {
					var x = x_top | 0;
					var height = sy1 - sy0;
					if(!(x >= 0 && x < len)) {
						throw new js__$Boot_HaxeError("Error");
					}
					var _g = x;
					var _g1 = scanline;
					_g1[_g] = _g1[_g] + e.direction * (1 - (x_top - x + (x_bottom - x)) / 2) * height;
					var _g2 = scanline_fillIndex + x;
					var _g11 = scanline_fill;
					_g11[_g2] = _g11[_g2] + e.direction * height;
				} else {
					var x1;
					if(x_top > x_bottom) {
						sy0 = y_bottom - (sy0 - y_top);
						sy1 = y_bottom - (sy1 - y_top);
						var t = sy0;
						sy0 = sy1;
						sy1 = t;
						t = x_bottom;
						x_bottom = x_top;
						x_top = t;
						dx = -dx;
						dy = -dy;
						t = x01;
						x01 = xb;
						xb = t;
					}
					var x11 = x_top | 0;
					var x2 = x_bottom | 0;
					var y_crossing = (x11 + 1 - x01) * dy + y_top;
					var sign = e.direction;
					var area = sign * (y_crossing - sy0);
					var _g3 = x11;
					var _g12 = scanline;
					_g12[_g3] = _g12[_g3] + area * (1 - (x_top - x11 + (x11 + 1 - x11)) / 2);
					var step = sign * dy;
					var _g4 = x11 + 1;
					var _g13 = x2;
					while(_g4 < _g13) {
						var x3 = _g4++;
						var _g5 = x3;
						var _g14 = scanline;
						_g14[_g5] = _g14[_g5] + (area + step / 2);
						area += step;
					}
					y_crossing += dy * (x2 - (x11 + 1));
					if(!(Math.abs(area) <= 1.01)) {
						throw new js__$Boot_HaxeError("Error");
					}
					var _g21 = x2;
					var _g31 = scanline;
					_g31[_g21] = _g31[_g21] + (area + sign * (1 - (x2 - x2 + (x_bottom - x2)) / 2) * (sy1 - y_crossing));
					var _g22 = scanline_fillIndex + x2;
					var _g32 = scanline_fill;
					_g32[_g22] = _g32[_g22] + sign * (sy1 - sy0);
				}
			} else {
				var _g6 = 0;
				var _g15 = len;
				while(_g6 < _g15) {
					var x4 = _g6++;
					var y0 = y_top;
					var x12 = x4;
					var x21 = x4 + 1;
					var x31 = xb;
					var y3 = y_bottom;
					var y1 = (x4 - x01) / dx + y_top;
					var y2 = (x4 + 1 - x01) / dx + y_top;
					if(x01 < x12 && x31 > x21) {
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x01,y0,x12,y1);
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x12,y1,x21,y2);
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x21,y2,x31,y3);
					} else if(x31 < x12 && x01 > x21) {
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x01,y0,x21,y2);
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x21,y2,x12,y1);
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x12,y1,x31,y3);
					} else if(x01 < x12 && x31 > x12) {
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x01,y0,x12,y1);
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x12,y1,x31,y3);
					} else if(x31 < x12 && x01 > x12) {
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x01,y0,x12,y1);
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x12,y1,x31,y3);
					} else if(x01 < x21 && x31 > x21) {
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x01,y0,x21,y2);
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x21,y2,x31,y3);
					} else if(x31 < x21 && x01 > x21) {
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x01,y0,x21,y2);
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x21,y2,x31,y3);
					} else {
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x01,y0,x31,y3);
					}
				}
			}
		}
		e = e.next;
	}
};
kha_graphics2_truetype_StbTruetype.stbtt__rasterize_sorted_edges = function(result,e,n,vsubsample,off_x,off_y) {
	var active = null;
	var j = 0;
	var scanline;
	var scanline2Index = 0;
	var eIndex = 0;
	if(result.w > 64) {
		var this1 = new Array(result.w * 2 + 1);
		scanline = this1;
	} else {
		var this2 = new Array(129);
		scanline = this2;
	}
	var scanline2 = scanline;
	scanline2Index = result.w;
	var y = off_y;
	e[eIndex + n].y0 = off_y + result.h + 1;
	while(j < result.h) {
		var scan_y_top = y + 0.0;
		var scan_y_bottom = y + 1.0;
		var step_value = active;
		var step_parent = null;
		var _g = 0;
		var _g1 = result.w;
		while(_g < _g1) {
			var i = _g++;
			scanline[i] = 0;
		}
		var _g2 = 0;
		var _g3 = result.w + 1;
		while(_g2 < _g3) {
			var i1 = _g2++;
			scanline2[scanline2Index + i1] = 0;
		}
		while(step_value != null) {
			var z = step_value;
			if(z.ey <= scan_y_top) {
				if(step_parent == null) {
					active = z.next;
					step_value = z.next;
				} else {
					step_parent.next = z.next;
					step_value = z.next;
				}
				if(z.direction == 0) {
					throw new js__$Boot_HaxeError("Error");
				}
				z.direction = 0;
			} else {
				step_parent = step_value;
				step_value = step_value.next;
			}
		}
		while(e[eIndex].y0 <= scan_y_bottom) {
			if(e[eIndex].y0 != e[eIndex].y1) {
				var z1 = kha_graphics2_truetype_StbTruetype.stbtt__new_active(e,eIndex,off_x,scan_y_top);
				if(!(z1.ey >= scan_y_top)) {
					throw new js__$Boot_HaxeError("Error");
				}
				z1.next = active;
				active = z1;
			}
			++eIndex;
		}
		if(active != null) {
			kha_graphics2_truetype_StbTruetype.stbtt__fill_active_edges_new(scanline,scanline2,scanline2Index + 1,result.w,active,scan_y_top);
		}
		var sum = 0;
		var _g4 = 0;
		var _g5 = result.w;
		while(_g4 < _g5) {
			var i2 = _g4++;
			sum += scanline2[scanline2Index + i2];
			var k = scanline[i2] + sum;
			k = Math.abs(k) * 255.0 + 0.5;
			var m = k | 0;
			if(m > 255) {
				m = 255;
			}
			result.pixels.writeU8(result.pixels_offset + j * result.stride + i2,m);
		}
		step_parent = null;
		step_value = active;
		while(step_value != null) {
			var z2 = step_value;
			z2.fx += z2.fdx;
			step_parent = step_value;
			step_value = step_value.next;
		}
		++y;
		++j;
	}
};
kha_graphics2_truetype_StbTruetype.STBTT__COMPARE = function(a,b) {
	return a.y0 < b.y0;
};
kha_graphics2_truetype_StbTruetype.stbtt__sort_edges_ins_sort = function(p,n) {
	var i;
	var j;
	var _g = 1;
	var _g1 = n;
	while(_g < _g1) {
		var i1 = _g++;
		var t = p[i1];
		var a = t;
		j = i1;
		while(j > 0) {
			var b = p[j - 1];
			var c = kha_graphics2_truetype_StbTruetype.STBTT__COMPARE(a,b);
			if(!c) {
				break;
			}
			p[j] = p[j - 1];
			--j;
		}
		if(i1 != j) {
			p[j] = t;
		}
	}
};
kha_graphics2_truetype_StbTruetype.stbtt__sort_edges_quicksort = function(p,pIndex,n) {
	while(n > 12) {
		var t;
		var c;
		var m = n >> 1;
		var c01 = kha_graphics2_truetype_StbTruetype.STBTT__COMPARE(p[pIndex],p[pIndex + m]);
		var c12 = kha_graphics2_truetype_StbTruetype.STBTT__COMPARE(p[pIndex + m],p[pIndex + n - 1]);
		if(c01 != c12) {
			c = kha_graphics2_truetype_StbTruetype.STBTT__COMPARE(p[pIndex],p[pIndex + n - 1]);
			var z = c == c12 ? 0 : n - 1;
			t = p[pIndex + z];
			p[pIndex + z] = p[pIndex + m];
			p[pIndex + m] = t;
		}
		t = p[pIndex];
		p[pIndex] = p[pIndex + m];
		p[pIndex + m] = t;
		var i = 1;
		var j = n - 1;
		while(true) {
			while(kha_graphics2_truetype_StbTruetype.STBTT__COMPARE(p[pIndex + i],p[pIndex])) ++i;
			while(kha_graphics2_truetype_StbTruetype.STBTT__COMPARE(p[pIndex],p[pIndex + j])) --j;
			if(i >= j) {
				break;
			}
			t = p[pIndex + i];
			p[pIndex + i] = p[pIndex + j];
			p[pIndex + j] = t;
			++i;
			--j;
		}
		if(j < n - i) {
			kha_graphics2_truetype_StbTruetype.stbtt__sort_edges_quicksort(p,pIndex,j);
			pIndex += i;
			n -= i;
		} else {
			kha_graphics2_truetype_StbTruetype.stbtt__sort_edges_quicksort(p,pIndex + i,n - i);
			n = j;
		}
	}
};
kha_graphics2_truetype_StbTruetype.stbtt__sort_edges = function(p,n) {
	kha_graphics2_truetype_StbTruetype.stbtt__sort_edges_quicksort(p,0,n);
	kha_graphics2_truetype_StbTruetype.stbtt__sort_edges_ins_sort(p,n);
};
kha_graphics2_truetype_StbTruetype.stbtt__rasterize = function(result,pts,wcount,windings,scale_x,scale_y,shift_x,shift_y,off_x,off_y,invert) {
	var y_scale_inv = invert ? -scale_y : scale_y;
	var i;
	var j;
	var k;
	var vsubsample = 1;
	var ptsIndex = 0;
	var n = 0;
	var _g = 0;
	var _g1 = windings;
	while(_g < _g1) {
		var i1 = _g++;
		n += wcount[i1];
	}
	var this1 = new Array(n + 1);
	var e = this1;
	if(e == null) {
		return;
	} else {
		var _g2 = 0;
		var _g3 = e.length;
		while(_g2 < _g3) {
			var i2 = _g2++;
			e[i2] = new kha_graphics2_truetype_Stbtt_$_$edge();
		}
	}
	n = 0;
	var m = 0;
	var _g21 = 0;
	var _g31 = windings;
	while(_g21 < _g31) {
		var i3 = _g21++;
		var p = pts;
		var pIndex = ptsIndex + m;
		m += wcount[i3];
		j = wcount[i3] - 1;
		var _g22 = 0;
		var _g32 = wcount[i3];
		while(_g22 < _g32) {
			var k1 = _g22++;
			var a = k1;
			var b = j;
			if(p[pIndex + j].y == p[pIndex + k1].y) {
				j = k1;
				continue;
			}
			e[n].invert = false;
			if(invert ? p[pIndex + j].y > p[pIndex + k1].y : p[pIndex + j].y < p[pIndex + k1].y) {
				e[n].invert = true;
				a = j;
				b = k1;
			}
			e[n].x0 = p[pIndex + a].x * scale_x + shift_x;
			e[n].y0 = (p[pIndex + a].y * y_scale_inv + shift_y) * vsubsample;
			e[n].x1 = p[pIndex + b].x * scale_x + shift_x;
			e[n].y1 = (p[pIndex + b].y * y_scale_inv + shift_y) * vsubsample;
			++n;
			j = k1;
		}
	}
	kha_graphics2_truetype_StbTruetype.stbtt__sort_edges(e,n);
	kha_graphics2_truetype_StbTruetype.stbtt__rasterize_sorted_edges(result,e,n,vsubsample,off_x,off_y);
};
kha_graphics2_truetype_StbTruetype.stbtt__add_point = function(points,n,x,y) {
	if(points == null) {
		return;
	}
	points[n].x = x;
	points[n].y = y;
};
kha_graphics2_truetype_StbTruetype.stbtt__tesselate_curve = function(points,num_points,x0,y0,x1,y1,x2,y2,objspace_flatness_squared,n) {
	var mx = (x0 + 2 * x1 + x2) / 4;
	var my = (y0 + 2 * y1 + y2) / 4;
	var dx = (x0 + x2) / 2 - mx;
	var dy = (y0 + y2) / 2 - my;
	if(n > 16) {
		return 1;
	}
	if(dx * dx + dy * dy > objspace_flatness_squared) {
		kha_graphics2_truetype_StbTruetype.stbtt__tesselate_curve(points,num_points,x0,y0,(x0 + x1) / 2.0,(y0 + y1) / 2.0,mx,my,objspace_flatness_squared,n + 1);
		kha_graphics2_truetype_StbTruetype.stbtt__tesselate_curve(points,num_points,mx,my,(x1 + x2) / 2.0,(y1 + y2) / 2.0,x2,y2,objspace_flatness_squared,n + 1);
	} else {
		kha_graphics2_truetype_StbTruetype.stbtt__add_point(points,num_points.value,x2,y2);
		num_points.value += 1;
	}
	return 1;
};
kha_graphics2_truetype_StbTruetype.stbtt_FlattenCurves = function(vertices,num_verts,objspace_flatness,contour_lengths,num_contours) {
	var points = null;
	var num_points = 0;
	var objspace_flatness_squared = objspace_flatness * objspace_flatness;
	var i;
	var n = 0;
	var start = 0;
	var pass;
	var _g = 0;
	var _g1 = num_verts;
	while(_g < _g1) {
		var i1 = _g++;
		if(vertices[i1].type == 1) {
			++n;
		}
	}
	num_contours.value = n;
	if(n == 0) {
		return null;
	}
	var this1 = new Array(n);
	contour_lengths.value = this1;
	if(contour_lengths.value == null) {
		num_contours.value = 0;
		return null;
	}
	var _g2 = 0;
	while(_g2 < 2) {
		var pass1 = _g2++;
		var x = 0;
		var y = 0;
		if(pass1 == 1) {
			var this2 = new Array(num_points);
			points = this2;
			if(points == null) {
				contour_lengths.value = null;
				num_contours.value = 0;
				return null;
			} else {
				var _g21 = 0;
				var _g3 = points.length;
				while(_g21 < _g3) {
					var i2 = _g21++;
					points[i2] = new kha_graphics2_truetype_Stbtt_$_$point();
				}
			}
		}
		num_points = 0;
		n = -1;
		var _g22 = 0;
		var _g31 = num_verts;
		while(_g22 < _g31) {
			var i3 = _g22++;
			switch(vertices[i3].type) {
			case 1:
				if(n >= 0) {
					contour_lengths.value[n] = num_points - start;
				}
				++n;
				start = num_points;
				x = vertices[i3].x;
				y = vertices[i3].y;
				kha_graphics2_truetype_StbTruetype.stbtt__add_point(points,num_points++,x,y);
				break;
			case 2:
				x = vertices[i3].x;
				y = vertices[i3].y;
				kha_graphics2_truetype_StbTruetype.stbtt__add_point(points,num_points++,x,y);
				break;
			case 3:
				var num_points_reference = { value : num_points};
				kha_graphics2_truetype_StbTruetype.stbtt__tesselate_curve(points,num_points_reference,x,y,vertices[i3].cx,vertices[i3].cy,vertices[i3].x,vertices[i3].y,objspace_flatness_squared,0);
				num_points = num_points_reference.value;
				x = vertices[i3].x;
				y = vertices[i3].y;
				break;
			}
		}
		contour_lengths.value[n] = num_points - start;
	}
	return points;
};
kha_graphics2_truetype_StbTruetype.stbtt_Rasterize = function(result,flatness_in_pixels,vertices,num_verts,scale_x,scale_y,shift_x,shift_y,x_off,y_off,invert) {
	var scale = scale_x > scale_y ? scale_y : scale_x;
	var winding_count = 0;
	var winding_lengths = null;
	var winding_count_reference = { value : winding_count};
	var winding_lengths_reference = new kha_graphics2_truetype_VectorOfIntPointer();
	var windings = kha_graphics2_truetype_StbTruetype.stbtt_FlattenCurves(vertices,num_verts,flatness_in_pixels / scale,winding_lengths_reference,winding_count_reference);
	winding_count = winding_count_reference.value;
	winding_lengths = winding_lengths_reference.value;
	if(windings != null) {
		kha_graphics2_truetype_StbTruetype.stbtt__rasterize(result,windings,winding_lengths,winding_count,scale_x,scale_y,shift_x,shift_y,x_off,y_off,invert);
	}
};
kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBitmapSubpixel = function(info,scale_x,scale_y,shift_x,shift_y,glyph,region) {
	var gbm = new kha_graphics2_truetype_Stbtt_$_$bitmap();
	var vertices = kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphShape(info,glyph);
	var num_verts = vertices.length;
	if(scale_x == 0) {
		scale_x = scale_y;
	}
	if(scale_y == 0) {
		if(scale_x == 0) {
			return null;
		}
		scale_y = scale_x;
	}
	var rect = kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBitmapBoxSubpixel(info,glyph,scale_x,scale_y,shift_x,shift_y);
	var ix0 = rect.x0;
	var iy0 = rect.y0;
	var ix1 = rect.x1;
	var iy1 = rect.y1;
	gbm.w = ix1 - ix0;
	gbm.h = iy1 - iy0;
	gbm.pixels = null;
	region.width = gbm.w;
	region.height = gbm.h;
	region.xoff = ix0;
	region.yoff = iy0;
	if(gbm.w != 0 && gbm.h != 0) {
		gbm.pixels = kha_internal_BytesBlob.alloc(gbm.w * gbm.h);
		if(gbm.pixels != null) {
			gbm.stride = gbm.w;
			kha_graphics2_truetype_StbTruetype.stbtt_Rasterize(gbm,0.35,vertices,num_verts,scale_x,scale_y,shift_x,shift_y,ix0,iy0,true);
		}
	}
	return gbm.pixels;
};
kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBitmap = function(info,scale_x,scale_y,glyph,region) {
	return kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBitmapSubpixel(info,scale_x,scale_y,0.0,0.0,glyph,region);
};
kha_graphics2_truetype_StbTruetype.stbtt_MakeGlyphBitmapSubpixel = function(info,output,output_offset,out_w,out_h,out_stride,scale_x,scale_y,shift_x,shift_y,glyph) {
	var ix0 = 0;
	var iy0 = 0;
	var vertices = kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphShape(info,glyph);
	var num_verts = vertices == null ? 0 : vertices.length;
	var gbm = new kha_graphics2_truetype_Stbtt_$_$bitmap();
	var rect = kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBitmapBoxSubpixel(info,glyph,scale_x,scale_y,shift_x,shift_y);
	ix0 = rect.x0;
	iy0 = rect.y0;
	gbm.pixels = output;
	gbm.pixels_offset = output_offset;
	gbm.w = out_w;
	gbm.h = out_h;
	gbm.stride = out_stride;
	if(gbm.w != 0 && gbm.h != 0) {
		kha_graphics2_truetype_StbTruetype.stbtt_Rasterize(gbm,0.35,vertices,num_verts,scale_x,scale_y,shift_x,shift_y,ix0,iy0,true);
	}
};
kha_graphics2_truetype_StbTruetype.stbtt_MakeGlyphBitmap = function(info,output,output_offset,out_w,out_h,out_stride,scale_x,scale_y,glyph) {
	kha_graphics2_truetype_StbTruetype.stbtt_MakeGlyphBitmapSubpixel(info,output,output_offset,out_w,out_h,out_stride,scale_x,scale_y,0.0,0.0,glyph);
};
kha_graphics2_truetype_StbTruetype.stbtt_GetCodepointBitmapSubpixel = function(info,scale_x,scale_y,shift_x,shift_y,codepoint,region) {
	return kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBitmapSubpixel(info,scale_x,scale_y,shift_x,shift_y,kha_graphics2_truetype_StbTruetype.stbtt_FindGlyphIndex(info,codepoint),region);
};
kha_graphics2_truetype_StbTruetype.stbtt_MakeCodepointBitmapSubpixel = function(info,output,output_offset,out_w,out_h,out_stride,scale_x,scale_y,shift_x,shift_y,codepoint) {
	kha_graphics2_truetype_StbTruetype.stbtt_MakeGlyphBitmapSubpixel(info,output,output_offset,out_w,out_h,out_stride,scale_x,scale_y,shift_x,shift_y,kha_graphics2_truetype_StbTruetype.stbtt_FindGlyphIndex(info,codepoint));
};
kha_graphics2_truetype_StbTruetype.stbtt_GetCodepointBitmap = function(info,scale_x,scale_y,codepoint,region) {
	return kha_graphics2_truetype_StbTruetype.stbtt_GetCodepointBitmapSubpixel(info,scale_x,scale_y,0.0,0.0,codepoint,region);
};
kha_graphics2_truetype_StbTruetype.stbtt_MakeCodepointBitmap = function(info,output,output_offset,out_w,out_h,out_stride,scale_x,scale_y,codepoint) {
	kha_graphics2_truetype_StbTruetype.stbtt_MakeCodepointBitmapSubpixel(info,output,output_offset,out_w,out_h,out_stride,scale_x,scale_y,0.0,0.0,codepoint);
};
kha_graphics2_truetype_StbTruetype.stbtt_BakeFontBitmap = function(data,offset,pixel_height,pixels,pw,ph,chars,chardata) {
	var f = new kha_graphics2_truetype_Stbtt_$fontinfo();
	if(!kha_graphics2_truetype_StbTruetype.stbtt_InitFont(f,data,offset)) {
		return -1;
	}
	var y = 1;
	var x = y;
	var bottom_y = 1;
	var scale = kha_graphics2_truetype_StbTruetype.stbtt_ScaleForPixelHeight(f,pixel_height);
	var i = 0;
	var _g = 0;
	while(_g < chars.length) {
		var index = chars[_g];
		++_g;
		var g = kha_graphics2_truetype_StbTruetype.stbtt_FindGlyphIndex(f,index);
		var metrics = kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphHMetrics(f,g);
		var advance = metrics.advanceWidth;
		var lsb = metrics.leftSideBearing;
		var rect = kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBitmapBox(f,g,scale,scale);
		var x0 = rect.x0;
		var y0 = rect.y0;
		var x1 = rect.x1;
		var y1 = rect.y1;
		var gw = x1 - x0;
		var gh = y1 - y0;
		if(x + gw + 1 >= pw) {
			y = bottom_y;
			x = 1;
		}
		if(y + gh + 1 >= ph) {
			return -i;
		}
		if(x + gw >= pw) {
			throw new js__$Boot_HaxeError("Error");
		}
		if(y + gh >= ph) {
			throw new js__$Boot_HaxeError("Error");
		}
		chardata[i].x0 = x;
		chardata[i].y0 = y;
		chardata[i].x1 = x + gw;
		chardata[i].y1 = y + gh;
		chardata[i].xadvance = scale * advance;
		chardata[i].xoff = x0;
		chardata[i].yoff = y0;
		x = x + gw + 1;
		if(y + gh + 1 > bottom_y) {
			bottom_y = y + gh + 1;
		}
		++i;
	}
	var _g1 = 0;
	var _g2 = pw * ph;
	while(_g1 < _g2) {
		var i1 = _g1++;
		pixels.writeU8(i1,0);
	}
	i = 0;
	var ch;
	var _g3 = 0;
	while(_g3 < chars.length) {
		var index1 = chars[_g3];
		++_g3;
		var g1 = kha_graphics2_truetype_StbTruetype.stbtt_FindGlyphIndex(f,index1);
		ch = chardata[i];
		kha_graphics2_truetype_StbTruetype.stbtt_MakeGlyphBitmap(f,pixels,ch.x0 + ch.y0 * pw,ch.x1 - ch.x0,ch.y1 - ch.y0,pw,scale,scale,g1);
		++i;
	}
	return bottom_y;
};
kha_graphics2_truetype_StbTruetype.stbtt_GetBakedQuad = function(chardata,pw,ph,char_index,xpos,ypos,q,opengl_fillrule) {
	var d3d_bias = opengl_fillrule ? 0 : -0.5;
	var ipw = 1.0 / pw;
	var iph = 1.0 / ph;
	var b = chardata[char_index];
	var round_x = Math.floor(xpos.value + b.xoff + 0.5);
	var round_y = Math.floor(ypos.value + b.yoff + 0.5);
	q.x0 = round_x + d3d_bias;
	q.y0 = round_y + d3d_bias;
	q.x1 = round_x + b.x1 - b.x0 + d3d_bias;
	q.y1 = round_y + b.y1 - b.y0 + d3d_bias;
	q.s0 = b.x0 * ipw;
	q.t0 = b.y0 * iph;
	q.s1 = b.x1 * ipw;
	q.t1 = b.y1 * iph;
	xpos.value += b.xadvance;
};
var kha_graphics4_ConstantLocation = function() { };
$hxClasses["kha.graphics4.ConstantLocation"] = kha_graphics4_ConstantLocation;
kha_graphics4_ConstantLocation.__name__ = "kha.graphics4.ConstantLocation";
var kha_graphics4_CubeMap = function(size,format,renderTarget,depthStencilFormat) {
	this.isDepthAttachment = false;
	this.depthTexture = null;
	this.texture = null;
	this.frameBuffer = null;
	this.myWidth = size;
	this.myHeight = size;
	this.format = format;
	this.renderTarget = renderTarget;
	this.depthStencilFormat = depthStencilFormat;
	if(renderTarget) {
		this.createTexture();
	}
};
$hxClasses["kha.graphics4.CubeMap"] = kha_graphics4_CubeMap;
kha_graphics4_CubeMap.__name__ = "kha.graphics4.CubeMap";
kha_graphics4_CubeMap.__interfaces__ = [kha_Resource,kha_Canvas];
kha_graphics4_CubeMap.createRenderTarget = function(size,format,depthStencil,contextId) {
	if(contextId == null) {
		contextId = 0;
	}
	if(format == null) {
		format = 0;
	}
	if(depthStencil == null) {
		depthStencil = 0;
	}
	return new kha_graphics4_CubeMap(size,format,true,depthStencil);
};
kha_graphics4_CubeMap.prototype = {
	myWidth: null
	,myHeight: null
	,format: null
	,renderTarget: null
	,depthStencilFormat: null
	,graphics4: null
	,frameBuffer: null
	,texture: null
	,depthTexture: null
	,isDepthAttachment: null
	,createTexture: function() {
		if(kha_SystemImpl.gl == null) {
			return;
		}
		this.texture = kha_SystemImpl.gl.createTexture();
		kha_SystemImpl.gl.bindTexture(34067,this.texture);
		kha_SystemImpl.gl.texParameteri(34067,10240,9729);
		kha_SystemImpl.gl.texParameteri(34067,10241,9729);
		kha_SystemImpl.gl.texParameteri(34067,10242,33071);
		kha_SystemImpl.gl.texParameteri(34067,10243,33071);
		if(this.renderTarget) {
			this.frameBuffer = kha_SystemImpl.gl.createFramebuffer();
			kha_SystemImpl.gl.bindFramebuffer(36160,this.frameBuffer);
			switch(this.format) {
			case 0:
				kha_SystemImpl.gl.texImage2D(34069,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
				kha_SystemImpl.gl.texImage2D(34070,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
				kha_SystemImpl.gl.texImage2D(34071,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
				kha_SystemImpl.gl.texImage2D(34072,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
				kha_SystemImpl.gl.texImage2D(34073,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
				kha_SystemImpl.gl.texImage2D(34074,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
				break;
			case 2:
				kha_SystemImpl.gl.texImage2D(34069,0,kha_SystemImpl.gl2 ? 34836 : 6408,this.myWidth,this.myHeight,0,6408,5126,null);
				kha_SystemImpl.gl.texImage2D(34070,0,kha_SystemImpl.gl2 ? 34836 : 6408,this.myWidth,this.myHeight,0,6408,5126,null);
				kha_SystemImpl.gl.texImage2D(34071,0,kha_SystemImpl.gl2 ? 34836 : 6408,this.myWidth,this.myHeight,0,6408,5126,null);
				kha_SystemImpl.gl.texImage2D(34072,0,kha_SystemImpl.gl2 ? 34836 : 6408,this.myWidth,this.myHeight,0,6408,5126,null);
				kha_SystemImpl.gl.texImage2D(34073,0,kha_SystemImpl.gl2 ? 34836 : 6408,this.myWidth,this.myHeight,0,6408,5126,null);
				kha_SystemImpl.gl.texImage2D(34074,0,kha_SystemImpl.gl2 ? 34836 : 6408,this.myWidth,this.myHeight,0,6408,5126,null);
				break;
			case 3:
				kha_SystemImpl.gl.texImage2D(34069,0,kha_SystemImpl.gl2 ? 33189 : 6402,this.myWidth,this.myHeight,0,6402,5123,null);
				kha_SystemImpl.gl.texImage2D(34070,0,kha_SystemImpl.gl2 ? 33189 : 6402,this.myWidth,this.myHeight,0,6402,5123,null);
				kha_SystemImpl.gl.texImage2D(34071,0,kha_SystemImpl.gl2 ? 33189 : 6402,this.myWidth,this.myHeight,0,6402,5123,null);
				kha_SystemImpl.gl.texImage2D(34072,0,kha_SystemImpl.gl2 ? 33189 : 6402,this.myWidth,this.myHeight,0,6402,5123,null);
				kha_SystemImpl.gl.texImage2D(34073,0,kha_SystemImpl.gl2 ? 33189 : 6402,this.myWidth,this.myHeight,0,6402,5123,null);
				kha_SystemImpl.gl.texImage2D(34074,0,kha_SystemImpl.gl2 ? 33189 : 6402,this.myWidth,this.myHeight,0,6402,5123,null);
				break;
			case 4:
				kha_SystemImpl.gl.texImage2D(34069,0,kha_SystemImpl.gl2 ? 34842 : 6408,this.myWidth,this.myHeight,0,6408,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,null);
				kha_SystemImpl.gl.texImage2D(34070,0,kha_SystemImpl.gl2 ? 34842 : 6408,this.myWidth,this.myHeight,0,6408,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,null);
				kha_SystemImpl.gl.texImage2D(34071,0,kha_SystemImpl.gl2 ? 34842 : 6408,this.myWidth,this.myHeight,0,6408,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,null);
				kha_SystemImpl.gl.texImage2D(34072,0,kha_SystemImpl.gl2 ? 34842 : 6408,this.myWidth,this.myHeight,0,6408,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,null);
				kha_SystemImpl.gl.texImage2D(34073,0,kha_SystemImpl.gl2 ? 34842 : 6408,this.myWidth,this.myHeight,0,6408,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,null);
				kha_SystemImpl.gl.texImage2D(34074,0,kha_SystemImpl.gl2 ? 34842 : 6408,this.myWidth,this.myHeight,0,6408,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,null);
				break;
			case 5:
				kha_SystemImpl.gl.texImage2D(34069,0,kha_SystemImpl.gl2 ? 33326 : 6406,this.myWidth,this.myHeight,0,6406,5126,null);
				kha_SystemImpl.gl.texImage2D(34070,0,kha_SystemImpl.gl2 ? 33326 : 6406,this.myWidth,this.myHeight,0,6406,5126,null);
				kha_SystemImpl.gl.texImage2D(34071,0,kha_SystemImpl.gl2 ? 33326 : 6406,this.myWidth,this.myHeight,0,6406,5126,null);
				kha_SystemImpl.gl.texImage2D(34072,0,kha_SystemImpl.gl2 ? 33326 : 6406,this.myWidth,this.myHeight,0,6406,5126,null);
				kha_SystemImpl.gl.texImage2D(34073,0,kha_SystemImpl.gl2 ? 33326 : 6406,this.myWidth,this.myHeight,0,6406,5126,null);
				kha_SystemImpl.gl.texImage2D(34074,0,kha_SystemImpl.gl2 ? 33326 : 6406,this.myWidth,this.myHeight,0,6406,5126,null);
				break;
			case 6:
				kha_SystemImpl.gl.texImage2D(34069,0,kha_SystemImpl.gl2 ? 33325 : 6406,this.myWidth,this.myHeight,0,6406,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,null);
				kha_SystemImpl.gl.texImage2D(34070,0,kha_SystemImpl.gl2 ? 33325 : 6406,this.myWidth,this.myHeight,0,6406,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,null);
				kha_SystemImpl.gl.texImage2D(34071,0,kha_SystemImpl.gl2 ? 33325 : 6406,this.myWidth,this.myHeight,0,6406,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,null);
				kha_SystemImpl.gl.texImage2D(34072,0,kha_SystemImpl.gl2 ? 33325 : 6406,this.myWidth,this.myHeight,0,6406,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,null);
				kha_SystemImpl.gl.texImage2D(34073,0,kha_SystemImpl.gl2 ? 33325 : 6406,this.myWidth,this.myHeight,0,6406,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,null);
				kha_SystemImpl.gl.texImage2D(34074,0,kha_SystemImpl.gl2 ? 33325 : 6406,this.myWidth,this.myHeight,0,6406,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,null);
				break;
			default:
				kha_SystemImpl.gl.texImage2D(34069,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
				kha_SystemImpl.gl.texImage2D(34070,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
				kha_SystemImpl.gl.texImage2D(34071,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
				kha_SystemImpl.gl.texImage2D(34072,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
				kha_SystemImpl.gl.texImage2D(34073,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
				kha_SystemImpl.gl.texImage2D(34074,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
			}
			if(this.format == 3) {
				kha_SystemImpl.gl.texParameteri(34067,10240,9728);
				kha_SystemImpl.gl.texParameteri(34067,10241,9728);
				this.isDepthAttachment = true;
				if(!kha_SystemImpl.gl2) {
					var colortex = kha_SystemImpl.gl.createTexture();
					kha_SystemImpl.gl.bindTexture(34067,colortex);
					kha_SystemImpl.gl.texImage2D(34069,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
					kha_SystemImpl.gl.framebufferTexture2D(36160,36064,34069,colortex,0);
					kha_SystemImpl.gl.texImage2D(34070,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
					kha_SystemImpl.gl.framebufferTexture2D(36160,36064,34070,colortex,0);
					kha_SystemImpl.gl.texImage2D(34071,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
					kha_SystemImpl.gl.framebufferTexture2D(36160,36064,34071,colortex,0);
					kha_SystemImpl.gl.texImage2D(34072,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
					kha_SystemImpl.gl.framebufferTexture2D(36160,36064,34072,colortex,0);
					kha_SystemImpl.gl.texImage2D(34073,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
					kha_SystemImpl.gl.framebufferTexture2D(36160,36064,34073,colortex,0);
					kha_SystemImpl.gl.texImage2D(34074,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
					kha_SystemImpl.gl.framebufferTexture2D(36160,36064,34074,colortex,0);
					kha_SystemImpl.gl.bindTexture(34067,this.texture);
				}
			}
			this.initDepthStencilBuffer(this.depthStencilFormat);
			kha_SystemImpl.gl.bindFramebuffer(36160,null);
		}
		kha_SystemImpl.gl.bindTexture(34067,null);
	}
	,initDepthStencilBuffer: function(depthStencilFormat) {
		switch(depthStencilFormat) {
		case 0:
			break;
		case 1:case 5:
			this.depthTexture = kha_SystemImpl.gl.createTexture();
			kha_SystemImpl.gl.bindTexture(34067,this.depthTexture);
			if(depthStencilFormat == 1) {
				kha_SystemImpl.gl.texImage2D(34067,0,kha_SystemImpl.gl2 ? 33190 : 6402,this.myWidth,this.myHeight,0,6402,5125,null);
			} else {
				kha_SystemImpl.gl.texImage2D(34067,0,kha_SystemImpl.gl2 ? 33189 : 6402,this.myWidth,this.myHeight,0,6402,5123,null);
			}
			kha_SystemImpl.gl.texParameteri(34067,10240,9728);
			kha_SystemImpl.gl.texParameteri(34067,10241,9728);
			kha_SystemImpl.gl.texParameteri(34067,10242,33071);
			kha_SystemImpl.gl.texParameteri(34067,10243,33071);
			kha_SystemImpl.gl.bindFramebuffer(36160,this.frameBuffer);
			kha_SystemImpl.gl.framebufferTexture2D(36160,36096,34067,this.depthTexture,0);
			break;
		case 2:case 3:case 4:
			this.depthTexture = kha_SystemImpl.gl.createTexture();
			kha_SystemImpl.gl.bindTexture(34067,this.depthTexture);
			kha_SystemImpl.gl.texImage2D(34067,0,kha_SystemImpl.gl2 ? 35056 : 34041,this.myWidth,this.myHeight,0,34041,kha_SystemImpl.depthTexture.UNSIGNED_INT_24_8_WEBGL,null);
			kha_SystemImpl.gl.texParameteri(34067,10240,9728);
			kha_SystemImpl.gl.texParameteri(34067,10241,9728);
			kha_SystemImpl.gl.texParameteri(34067,10242,33071);
			kha_SystemImpl.gl.texParameteri(34067,10243,33071);
			kha_SystemImpl.gl.bindFramebuffer(36160,this.frameBuffer);
			kha_SystemImpl.gl.framebufferTexture2D(36160,33306,34067,this.depthTexture,0);
			break;
		}
	}
	,set: function(stage) {
		kha_SystemImpl.gl.activeTexture(33984 + stage);
		kha_SystemImpl.gl.bindTexture(34067,this.texture);
	}
	,setDepth: function(stage) {
		kha_SystemImpl.gl.activeTexture(33984 + stage);
		kha_SystemImpl.gl.bindTexture(34067,this.depthTexture);
	}
	,unload: function() {
	}
	,lock: function(level) {
		if(level == null) {
			level = 0;
		}
		return null;
	}
	,unlock: function() {
	}
	,width: null
	,get_width: function() {
		return this.myWidth;
	}
	,height: null
	,get_height: function() {
		return this.myHeight;
	}
	,g1: null
	,get_g1: function() {
		return null;
	}
	,g2: null
	,get_g2: function() {
		return null;
	}
	,g4: null
	,get_g4: function() {
		if(this.graphics4 == null) {
			this.graphics4 = new kha_js_graphics4_Graphics(this);
		}
		return this.graphics4;
	}
	,__class__: kha_graphics4_CubeMap
	,__properties__: {get_g4:"get_g4",get_g2:"get_g2",get_g1:"get_g1",get_height:"get_height",get_width:"get_width"}
};
var kha_graphics4_FragmentShader = function(sources,files) {
	this.sources = [];
	var _g = 0;
	while(_g < sources.length) {
		var source = sources[_g];
		++_g;
		this.sources.push(source.toString());
	}
	this.type = 35632;
	this.shader = null;
	this.files = files;
};
$hxClasses["kha.graphics4.FragmentShader"] = kha_graphics4_FragmentShader;
kha_graphics4_FragmentShader.__name__ = "kha.graphics4.FragmentShader";
kha_graphics4_FragmentShader.fromSource = function(source) {
	var shader = new kha_graphics4_FragmentShader([],["runtime-string"]);
	shader.sources.push(source);
	return shader;
};
kha_graphics4_FragmentShader.prototype = {
	sources: null
	,type: null
	,shader: null
	,files: null
	,'delete': function() {
		kha_SystemImpl.gl.deleteShader(this.shader);
		this.shader = null;
		this.sources = null;
	}
	,__class__: kha_graphics4_FragmentShader
};
var kha_graphics4_GeometryShader = function(source) {
};
$hxClasses["kha.graphics4.GeometryShader"] = kha_graphics4_GeometryShader;
kha_graphics4_GeometryShader.__name__ = "kha.graphics4.GeometryShader";
kha_graphics4_GeometryShader.prototype = {
	'delete': function() {
	}
	,__class__: kha_graphics4_GeometryShader
};
var kha_graphics4_Graphics = function() { };
$hxClasses["kha.graphics4.Graphics"] = kha_graphics4_Graphics;
kha_graphics4_Graphics.__name__ = "kha.graphics4.Graphics";
kha_graphics4_Graphics.prototype = {
	begin: null
	,beginFace: null
	,beginEye: null
	,end: null
	,vsynced: null
	,refreshRate: null
	,clear: null
	,viewport: null
	,scissor: null
	,disableScissor: null
	,setVertexBuffer: null
	,setVertexBuffers: null
	,setIndexBuffer: null
	,setTexture: null
	,setTextureDepth: null
	,setTextureArray: null
	,setVideoTexture: null
	,setImageTexture: null
	,setTextureParameters: null
	,setTexture3DParameters: null
	,setTextureCompareMode: null
	,setCubeMapCompareMode: null
	,setCubeMap: null
	,setCubeMapDepth: null
	,setStencilReferenceValue: null
	,instancedRenderingAvailable: null
	,setPipeline: null
	,setBool: null
	,setInt: null
	,setFloat: null
	,setFloat2: null
	,setFloat3: null
	,setFloat4: null
	,setFloats: null
	,setVector2: null
	,setVector3: null
	,setVector4: null
	,setMatrix: null
	,setMatrix3: null
	,drawIndexedVertices: null
	,drawIndexedVerticesInstanced: null
	,flush: null
	,__class__: kha_graphics4_Graphics
};
var kha_graphics4_PipelineCache = function(pipeline) {
	this.pipeline = pipeline;
	this.projectionLocation = pipeline.getConstantLocation("projectionMatrix");
	this.textureLocation = pipeline.getTextureUnit("tex");
};
$hxClasses["kha.graphics4.PipelineCache"] = kha_graphics4_PipelineCache;
kha_graphics4_PipelineCache.__name__ = "kha.graphics4.PipelineCache";
kha_graphics4_PipelineCache.prototype = {
	pipeline: null
	,projectionLocation: null
	,textureLocation: null
	,__class__: kha_graphics4_PipelineCache
};
var kha_graphics4_ImageShaderPainter = function(g4) {
	this.myPipeline = null;
	this.bilinearMipmaps = false;
	this.bilinear = false;
	this.g = g4;
	kha_graphics4_ImageShaderPainter.bufferIndex = 0;
	kha_graphics4_ImageShaderPainter.initShaders();
	this.myPipeline = kha_graphics4_ImageShaderPainter.standardImagePipeline;
	this.initBuffers();
};
$hxClasses["kha.graphics4.ImageShaderPainter"] = kha_graphics4_ImageShaderPainter;
kha_graphics4_ImageShaderPainter.__name__ = "kha.graphics4.ImageShaderPainter";
kha_graphics4_ImageShaderPainter.initShaders = function() {
	if(kha_graphics4_ImageShaderPainter.structure == null) {
		kha_graphics4_ImageShaderPainter.structure = kha_graphics4_Graphics2.createImageVertexStructure();
	}
	if(kha_graphics4_ImageShaderPainter.standardImagePipeline == null) {
		var pipeline = kha_graphics4_Graphics2.createImagePipeline(kha_graphics4_ImageShaderPainter.structure);
		pipeline.compile();
		kha_graphics4_ImageShaderPainter.standardImagePipeline = new kha_graphics4_PipelineCache(pipeline);
	}
};
kha_graphics4_ImageShaderPainter.prototype = {
	projectionMatrix: null
	,bilinear: null
	,bilinearMipmaps: null
	,g: null
	,myPipeline: null
	,get_pipeline: function() {
		return this.myPipeline;
	}
	,set_pipeline: function(pipe) {
		this.myPipeline = pipe != null ? pipe : kha_graphics4_ImageShaderPainter.standardImagePipeline;
		return this.myPipeline;
	}
	,setProjection: function(projectionMatrix) {
		this.projectionMatrix = projectionMatrix;
	}
	,initBuffers: function() {
		if(kha_graphics4_ImageShaderPainter.rectVertexBuffer == null) {
			kha_graphics4_ImageShaderPainter.rectVertexBuffer = new kha_graphics4_VertexBuffer(6000,kha_graphics4_ImageShaderPainter.structure,1);
			kha_graphics4_ImageShaderPainter.rectVertices = kha_graphics4_ImageShaderPainter.rectVertexBuffer.lock();
			kha_graphics4_ImageShaderPainter.indexBuffer = new kha_graphics4_IndexBuffer(9000,0);
			var indices = kha_graphics4_ImageShaderPainter.indexBuffer.lock();
			var _g = 0;
			while(_g < 1500) {
				var i = _g++;
				indices[i * 3 * 2] = i * 4;
				indices[i * 3 * 2 + 1] = i * 4 + 1;
				indices[i * 3 * 2 + 2] = i * 4 + 2;
				indices[i * 3 * 2 + 3] = i * 4;
				indices[i * 3 * 2 + 4] = i * 4 + 2;
				indices[i * 3 * 2 + 5] = i * 4 + 3;
			}
			kha_graphics4_ImageShaderPainter.indexBuffer.unlock();
		}
	}
	,setRectVertices: function(bottomleftx,bottomlefty,topleftx,toplefty,toprightx,toprighty,bottomrightx,bottomrighty) {
		var baseIndex = kha_graphics4_ImageShaderPainter.bufferIndex * 9 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex] = bottomleftx;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 1] = bottomlefty;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 2] = -5.0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 9] = topleftx;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 10] = toplefty;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 11] = -5.0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 18] = toprightx;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 19] = toprighty;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 20] = -5.0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 27] = bottomrightx;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 28] = bottomrighty;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 29] = -5.0;
	}
	,setRectTexCoords: function(left,top,right,bottom) {
		var baseIndex = kha_graphics4_ImageShaderPainter.bufferIndex * 9 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 3] = left;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 4] = bottom;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 12] = left;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 13] = top;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 21] = right;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 22] = top;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 30] = right;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 31] = bottom;
	}
	,setRectColor: function(r,g,b,a) {
		var baseIndex = kha_graphics4_ImageShaderPainter.bufferIndex * 9 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 5] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 6] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 7] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 8] = a;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 14] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 15] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 16] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 17] = a;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 23] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 24] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 25] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 26] = a;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 32] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 33] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 34] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 35] = a;
	}
	,drawBuffer: function() {
		kha_graphics4_ImageShaderPainter.rectVertexBuffer.unlock(kha_graphics4_ImageShaderPainter.bufferIndex * 4);
		this.g.setVertexBuffer(kha_graphics4_ImageShaderPainter.rectVertexBuffer);
		this.g.setIndexBuffer(kha_graphics4_ImageShaderPainter.indexBuffer);
		this.g.setPipeline(this.myPipeline.pipeline);
		this.g.setTexture(this.myPipeline.textureLocation,kha_graphics4_ImageShaderPainter.lastTexture);
		this.g.setTextureParameters(this.myPipeline.textureLocation,2,2,this.bilinear ? 1 : 0,this.bilinear ? 1 : 0,this.bilinearMipmaps ? 2 : 0);
		this.g.setMatrix(this.myPipeline.projectionLocation,this.projectionMatrix);
		this.g.drawIndexedVertices(0,kha_graphics4_ImageShaderPainter.bufferIndex * 2 * 3);
		this.g.setTexture(this.myPipeline.textureLocation,null);
		kha_graphics4_ImageShaderPainter.bufferIndex = 0;
		kha_graphics4_ImageShaderPainter.rectVertices = kha_graphics4_ImageShaderPainter.rectVertexBuffer.lock();
	}
	,setBilinearFilter: function(bilinear) {
		this.end();
		this.bilinear = bilinear;
	}
	,setBilinearMipmapFilter: function(bilinear) {
		this.end();
		this.bilinearMipmaps = bilinear;
	}
	,drawImage: function(img,bottomleftx,bottomlefty,topleftx,toplefty,toprightx,toprighty,bottomrightx,bottomrighty,opacity,color) {
		var tex = img;
		if(kha_graphics4_ImageShaderPainter.bufferIndex + 1 >= 1500 || kha_graphics4_ImageShaderPainter.lastTexture != null && tex != kha_graphics4_ImageShaderPainter.lastTexture) {
			this.drawBuffer();
		}
		var r = ((color & 16711680) >>> 16) * 0.00392156862745098;
		var g = ((color & 65280) >>> 8) * 0.00392156862745098;
		var b = (color & 255) * 0.00392156862745098;
		var a = (color >>> 24) * 0.00392156862745098 * opacity;
		var baseIndex = kha_graphics4_ImageShaderPainter.bufferIndex * 9 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 5] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 6] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 7] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 8] = a;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 14] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 15] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 16] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 17] = a;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 23] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 24] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 25] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 26] = a;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 32] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 33] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 34] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 35] = a;
		var right = tex.get_width() / tex.get_realWidth();
		var bottom = tex.get_height() / tex.get_realHeight();
		var baseIndex1 = kha_graphics4_ImageShaderPainter.bufferIndex * 9 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 3] = 0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 4] = bottom;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 12] = 0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 13] = 0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 21] = right;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 22] = 0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 30] = right;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 31] = bottom;
		var baseIndex2 = kha_graphics4_ImageShaderPainter.bufferIndex * 9 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2] = bottomleftx;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 1] = bottomlefty;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 2] = -5.0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 9] = topleftx;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 10] = toplefty;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 11] = -5.0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 18] = toprightx;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 19] = toprighty;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 20] = -5.0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 27] = bottomrightx;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 28] = bottomrighty;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 29] = -5.0;
		++kha_graphics4_ImageShaderPainter.bufferIndex;
		kha_graphics4_ImageShaderPainter.lastTexture = tex;
	}
	,drawImage2: function(img,sx,sy,sw,sh,bottomleftx,bottomlefty,topleftx,toplefty,toprightx,toprighty,bottomrightx,bottomrighty,opacity,color) {
		var tex = img;
		if(kha_graphics4_ImageShaderPainter.bufferIndex + 1 >= 1500 || kha_graphics4_ImageShaderPainter.lastTexture != null && tex != kha_graphics4_ImageShaderPainter.lastTexture) {
			this.drawBuffer();
		}
		var left = sx / tex.get_realWidth();
		var top = sy / tex.get_realHeight();
		var right = (sx + sw) / tex.get_realWidth();
		var bottom = (sy + sh) / tex.get_realHeight();
		var baseIndex = kha_graphics4_ImageShaderPainter.bufferIndex * 9 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 3] = left;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 4] = bottom;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 12] = left;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 13] = top;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 21] = right;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 22] = top;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 30] = right;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 31] = bottom;
		var r = ((color & 16711680) >>> 16) * 0.00392156862745098;
		var g = ((color & 65280) >>> 8) * 0.00392156862745098;
		var b = (color & 255) * 0.00392156862745098;
		var a = (color >>> 24) * 0.00392156862745098 * opacity;
		var baseIndex1 = kha_graphics4_ImageShaderPainter.bufferIndex * 9 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 5] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 6] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 7] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 8] = a;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 14] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 15] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 16] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 17] = a;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 23] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 24] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 25] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 26] = a;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 32] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 33] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 34] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 35] = a;
		var baseIndex2 = kha_graphics4_ImageShaderPainter.bufferIndex * 9 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2] = bottomleftx;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 1] = bottomlefty;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 2] = -5.0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 9] = topleftx;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 10] = toplefty;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 11] = -5.0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 18] = toprightx;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 19] = toprighty;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 20] = -5.0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 27] = bottomrightx;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 28] = bottomrighty;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 29] = -5.0;
		++kha_graphics4_ImageShaderPainter.bufferIndex;
		kha_graphics4_ImageShaderPainter.lastTexture = tex;
	}
	,drawImageScale: function(img,sx,sy,sw,sh,left,top,right,bottom,opacity,color) {
		var tex = img;
		if(kha_graphics4_ImageShaderPainter.bufferIndex + 1 >= 1500 || kha_graphics4_ImageShaderPainter.lastTexture != null && tex != kha_graphics4_ImageShaderPainter.lastTexture) {
			this.drawBuffer();
		}
		var left1 = sx / tex.get_realWidth();
		var top1 = sy / tex.get_realHeight();
		var right1 = (sx + sw) / tex.get_realWidth();
		var bottom1 = (sy + sh) / tex.get_realHeight();
		var baseIndex = kha_graphics4_ImageShaderPainter.bufferIndex * 9 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 3] = left1;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 4] = bottom1;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 12] = left1;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 13] = top1;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 21] = right1;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 22] = top1;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 30] = right1;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 31] = bottom1;
		var r = ((color & 16711680) >>> 16) * 0.00392156862745098;
		var g = ((color & 65280) >>> 8) * 0.00392156862745098;
		var b = (color & 255) * 0.00392156862745098;
		var baseIndex1 = kha_graphics4_ImageShaderPainter.bufferIndex * 9 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 5] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 6] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 7] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 8] = opacity;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 14] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 15] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 16] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 17] = opacity;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 23] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 24] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 25] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 26] = opacity;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 32] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 33] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 34] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 35] = opacity;
		var baseIndex2 = kha_graphics4_ImageShaderPainter.bufferIndex * 9 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2] = left;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 1] = bottom;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 2] = -5.0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 9] = left;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 10] = top;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 11] = -5.0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 18] = right;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 19] = top;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 20] = -5.0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 27] = right;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 28] = bottom;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 29] = -5.0;
		++kha_graphics4_ImageShaderPainter.bufferIndex;
		kha_graphics4_ImageShaderPainter.lastTexture = tex;
	}
	,end: function() {
		if(kha_graphics4_ImageShaderPainter.bufferIndex > 0) {
			this.drawBuffer();
		}
		kha_graphics4_ImageShaderPainter.lastTexture = null;
	}
	,__class__: kha_graphics4_ImageShaderPainter
	,__properties__: {set_pipeline:"set_pipeline",get_pipeline:"get_pipeline"}
};
var kha_graphics4_ColoredShaderPainter = function(g4) {
	this.myPipeline = null;
	this.g = g4;
	kha_graphics4_ColoredShaderPainter.bufferIndex = 0;
	kha_graphics4_ColoredShaderPainter.triangleBufferIndex = 0;
	kha_graphics4_ColoredShaderPainter.initShaders();
	this.myPipeline = kha_graphics4_ColoredShaderPainter.standardColorPipeline;
	this.initBuffers();
};
$hxClasses["kha.graphics4.ColoredShaderPainter"] = kha_graphics4_ColoredShaderPainter;
kha_graphics4_ColoredShaderPainter.__name__ = "kha.graphics4.ColoredShaderPainter";
kha_graphics4_ColoredShaderPainter.initShaders = function() {
	if(kha_graphics4_ColoredShaderPainter.structure == null) {
		kha_graphics4_ColoredShaderPainter.structure = kha_graphics4_Graphics2.createColoredVertexStructure();
	}
	if(kha_graphics4_ColoredShaderPainter.standardColorPipeline == null) {
		var pipeline = kha_graphics4_Graphics2.createColoredPipeline(kha_graphics4_ColoredShaderPainter.structure);
		pipeline.compile();
		kha_graphics4_ColoredShaderPainter.standardColorPipeline = new kha_graphics4_PipelineCache(pipeline);
	}
};
kha_graphics4_ColoredShaderPainter.prototype = {
	projectionMatrix: null
	,g: null
	,myPipeline: null
	,get_pipeline: function() {
		return this.myPipeline;
	}
	,set_pipeline: function(pipe) {
		this.myPipeline = pipe != null ? pipe : kha_graphics4_ColoredShaderPainter.standardColorPipeline;
		return this.myPipeline;
	}
	,setProjection: function(projectionMatrix) {
		this.projectionMatrix = projectionMatrix;
	}
	,initBuffers: function() {
		if(kha_graphics4_ColoredShaderPainter.rectVertexBuffer == null) {
			kha_graphics4_ColoredShaderPainter.rectVertexBuffer = new kha_graphics4_VertexBuffer(4000,kha_graphics4_ColoredShaderPainter.structure,1);
			kha_graphics4_ColoredShaderPainter.rectVertices = kha_graphics4_ColoredShaderPainter.rectVertexBuffer.lock();
			kha_graphics4_ColoredShaderPainter.indexBuffer = new kha_graphics4_IndexBuffer(6000,0);
			var indices = kha_graphics4_ColoredShaderPainter.indexBuffer.lock();
			var _g = 0;
			while(_g < 1000) {
				var i = _g++;
				indices[i * 3 * 2] = i * 4;
				indices[i * 3 * 2 + 1] = i * 4 + 1;
				indices[i * 3 * 2 + 2] = i * 4 + 2;
				indices[i * 3 * 2 + 3] = i * 4;
				indices[i * 3 * 2 + 4] = i * 4 + 2;
				indices[i * 3 * 2 + 5] = i * 4 + 3;
			}
			kha_graphics4_ColoredShaderPainter.indexBuffer.unlock();
			kha_graphics4_ColoredShaderPainter.triangleVertexBuffer = new kha_graphics4_VertexBuffer(3000,kha_graphics4_ColoredShaderPainter.structure,1);
			kha_graphics4_ColoredShaderPainter.triangleVertices = kha_graphics4_ColoredShaderPainter.triangleVertexBuffer.lock();
			kha_graphics4_ColoredShaderPainter.triangleIndexBuffer = new kha_graphics4_IndexBuffer(3000,0);
			var triIndices = kha_graphics4_ColoredShaderPainter.triangleIndexBuffer.lock();
			var _g1 = 0;
			while(_g1 < 1000) {
				var i1 = _g1++;
				triIndices[i1 * 3] = i1 * 3;
				triIndices[i1 * 3 + 1] = i1 * 3 + 1;
				triIndices[i1 * 3 + 2] = i1 * 3 + 2;
			}
			kha_graphics4_ColoredShaderPainter.triangleIndexBuffer.unlock();
		}
	}
	,setRectVertices: function(bottomleftx,bottomlefty,topleftx,toplefty,toprightx,toprighty,bottomrightx,bottomrighty) {
		var baseIndex = kha_graphics4_ColoredShaderPainter.bufferIndex * 7 * 4;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex] = bottomleftx;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 1] = bottomlefty;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 2] = -5.0;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 7] = topleftx;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 8] = toplefty;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 9] = -5.0;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 14] = toprightx;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 15] = toprighty;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 16] = -5.0;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 21] = bottomrightx;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 22] = bottomrighty;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 23] = -5.0;
	}
	,setRectColors: function(opacity,color) {
		var baseIndex = kha_graphics4_ColoredShaderPainter.bufferIndex * 7 * 4;
		var a = opacity * ((color >>> 24) * 0.00392156862745098);
		var r = a * (((color & 16711680) >>> 16) * 0.00392156862745098);
		var g = a * (((color & 65280) >>> 8) * 0.00392156862745098);
		var b = a * ((color & 255) * 0.00392156862745098);
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 3] = r;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 4] = g;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 5] = b;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 6] = a;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 10] = r;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 11] = g;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 12] = b;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 13] = a;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 17] = r;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 18] = g;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 19] = b;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 20] = a;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 24] = r;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 25] = g;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 26] = b;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 27] = a;
	}
	,setTriVertices: function(x1,y1,x2,y2,x3,y3) {
		var baseIndex = kha_graphics4_ColoredShaderPainter.triangleBufferIndex * 7 * 3;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex] = x1;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 1] = y1;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 2] = -5.0;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 7] = x2;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 8] = y2;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 9] = -5.0;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 14] = x3;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 15] = y3;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 16] = -5.0;
	}
	,setTriColors: function(opacity,color) {
		var baseIndex = kha_graphics4_ColoredShaderPainter.triangleBufferIndex * 7 * 3;
		var a = opacity * ((color >>> 24) * 0.00392156862745098);
		var r = a * (((color & 16711680) >>> 16) * 0.00392156862745098);
		var g = a * (((color & 65280) >>> 8) * 0.00392156862745098);
		var b = a * ((color & 255) * 0.00392156862745098);
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 3] = r;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 4] = g;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 5] = b;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 6] = a;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 10] = r;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 11] = g;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 12] = b;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 13] = a;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 17] = r;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 18] = g;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 19] = b;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 20] = a;
	}
	,drawBuffer: function(trisDone) {
		if(!trisDone) {
			if(kha_graphics4_ColoredShaderPainter.triangleBufferIndex > 0) {
				this.drawTriBuffer(true);
			}
		}
		kha_graphics4_ColoredShaderPainter.rectVertexBuffer.unlock(kha_graphics4_ColoredShaderPainter.bufferIndex * 4);
		this.g.setVertexBuffer(kha_graphics4_ColoredShaderPainter.rectVertexBuffer);
		this.g.setIndexBuffer(kha_graphics4_ColoredShaderPainter.indexBuffer);
		this.g.setPipeline(this.myPipeline.pipeline);
		this.g.setMatrix(this.myPipeline.projectionLocation,this.projectionMatrix);
		this.g.drawIndexedVertices(0,kha_graphics4_ColoredShaderPainter.bufferIndex * 2 * 3);
		kha_graphics4_ColoredShaderPainter.bufferIndex = 0;
		kha_graphics4_ColoredShaderPainter.rectVertices = kha_graphics4_ColoredShaderPainter.rectVertexBuffer.lock();
	}
	,drawTriBuffer: function(rectsDone) {
		if(!rectsDone) {
			if(kha_graphics4_ColoredShaderPainter.bufferIndex > 0) {
				this.drawBuffer(true);
			}
		}
		kha_graphics4_ColoredShaderPainter.triangleVertexBuffer.unlock(kha_graphics4_ColoredShaderPainter.triangleBufferIndex * 3);
		this.g.setVertexBuffer(kha_graphics4_ColoredShaderPainter.triangleVertexBuffer);
		this.g.setIndexBuffer(kha_graphics4_ColoredShaderPainter.triangleIndexBuffer);
		this.g.setPipeline(this.myPipeline.pipeline);
		this.g.setMatrix(this.myPipeline.projectionLocation,this.projectionMatrix);
		this.g.drawIndexedVertices(0,kha_graphics4_ColoredShaderPainter.triangleBufferIndex * 3);
		kha_graphics4_ColoredShaderPainter.triangleBufferIndex = 0;
		kha_graphics4_ColoredShaderPainter.triangleVertices = kha_graphics4_ColoredShaderPainter.triangleVertexBuffer.lock();
	}
	,fillRect: function(opacity,color,bottomleftx,bottomlefty,topleftx,toplefty,toprightx,toprighty,bottomrightx,bottomrighty) {
		if(kha_graphics4_ColoredShaderPainter.triangleBufferIndex > 0) {
			this.drawTriBuffer(true);
		}
		if(kha_graphics4_ColoredShaderPainter.bufferIndex + 1 >= 1000) {
			this.drawBuffer(false);
		}
		this.setRectColors(opacity,color);
		this.setRectVertices(bottomleftx,bottomlefty,topleftx,toplefty,toprightx,toprighty,bottomrightx,bottomrighty);
		++kha_graphics4_ColoredShaderPainter.bufferIndex;
	}
	,fillTriangle: function(opacity,color,x1,y1,x2,y2,x3,y3) {
		if(kha_graphics4_ColoredShaderPainter.bufferIndex > 0) {
			this.drawBuffer(true);
		}
		if(kha_graphics4_ColoredShaderPainter.triangleBufferIndex + 1 >= 1000) {
			this.drawTriBuffer(false);
		}
		this.setTriColors(opacity,color);
		this.setTriVertices(x1,y1,x2,y2,x3,y3);
		++kha_graphics4_ColoredShaderPainter.triangleBufferIndex;
	}
	,endTris: function(rectsDone) {
		if(kha_graphics4_ColoredShaderPainter.triangleBufferIndex > 0) {
			this.drawTriBuffer(rectsDone);
		}
	}
	,endRects: function(trisDone) {
		if(kha_graphics4_ColoredShaderPainter.bufferIndex > 0) {
			this.drawBuffer(trisDone);
		}
	}
	,end: function() {
		if(kha_graphics4_ColoredShaderPainter.triangleBufferIndex > 0) {
			this.drawTriBuffer(false);
		}
		if(kha_graphics4_ColoredShaderPainter.bufferIndex > 0) {
			this.drawBuffer(false);
		}
	}
	,__class__: kha_graphics4_ColoredShaderPainter
	,__properties__: {set_pipeline:"set_pipeline",get_pipeline:"get_pipeline"}
};
var kha_graphics4_TextShaderPainter = function(g4) {
	this.bakedQuadCache = new kha_AlignedQuad();
	this.bilinear = false;
	this.myPipeline = null;
	this.g = g4;
	kha_graphics4_TextShaderPainter.bufferIndex = 0;
	kha_graphics4_TextShaderPainter.initShaders();
	this.myPipeline = kha_graphics4_TextShaderPainter.standardTextPipeline;
	this.initBuffers();
};
$hxClasses["kha.graphics4.TextShaderPainter"] = kha_graphics4_TextShaderPainter;
kha_graphics4_TextShaderPainter.__name__ = "kha.graphics4.TextShaderPainter";
kha_graphics4_TextShaderPainter.initShaders = function() {
	if(kha_graphics4_TextShaderPainter.structure == null) {
		kha_graphics4_TextShaderPainter.structure = kha_graphics4_Graphics2.createTextVertexStructure();
	}
	if(kha_graphics4_TextShaderPainter.standardTextPipeline == null) {
		var pipeline = kha_graphics4_Graphics2.createTextPipeline(kha_graphics4_TextShaderPainter.structure);
		pipeline.compile();
		kha_graphics4_TextShaderPainter.standardTextPipeline = new kha_graphics4_PipelineCache(pipeline);
	}
};
kha_graphics4_TextShaderPainter.findIndex = function(charCode) {
	var glyphs = kha_graphics2_Graphics.fontGlyphs;
	var blocks = kha_KravurImage.charBlocks;
	var offset = 0;
	var _g = 0;
	var _g1 = blocks.length / 2 | 0;
	while(_g < _g1) {
		var i = _g++;
		var start = blocks[i * 2];
		var end = blocks[i * 2 + 1];
		if(charCode >= start && charCode <= end) {
			return offset + charCode - start;
		}
		offset += end - start + 1;
	}
	return 0;
};
kha_graphics4_TextShaderPainter.prototype = {
	projectionMatrix: null
	,font: null
	,g: null
	,myPipeline: null
	,fontSize: null
	,bilinear: null
	,get_pipeline: function() {
		return this.myPipeline;
	}
	,set_pipeline: function(pipe) {
		this.myPipeline = pipe != null ? pipe : kha_graphics4_TextShaderPainter.standardTextPipeline;
		return this.myPipeline;
	}
	,setProjection: function(projectionMatrix) {
		this.projectionMatrix = projectionMatrix;
	}
	,initBuffers: function() {
		if(kha_graphics4_TextShaderPainter.rectVertexBuffer == null) {
			kha_graphics4_TextShaderPainter.rectVertexBuffer = new kha_graphics4_VertexBuffer(4000,kha_graphics4_TextShaderPainter.structure,1);
			kha_graphics4_TextShaderPainter.rectVertices = kha_graphics4_TextShaderPainter.rectVertexBuffer.lock();
			kha_graphics4_TextShaderPainter.indexBuffer = new kha_graphics4_IndexBuffer(6000,0);
			var indices = kha_graphics4_TextShaderPainter.indexBuffer.lock();
			var _g = 0;
			while(_g < 1000) {
				var i = _g++;
				indices[i * 3 * 2] = i * 4;
				indices[i * 3 * 2 + 1] = i * 4 + 1;
				indices[i * 3 * 2 + 2] = i * 4 + 2;
				indices[i * 3 * 2 + 3] = i * 4;
				indices[i * 3 * 2 + 4] = i * 4 + 2;
				indices[i * 3 * 2 + 5] = i * 4 + 3;
			}
			kha_graphics4_TextShaderPainter.indexBuffer.unlock();
		}
	}
	,setRectVertices: function(bottomleftx,bottomlefty,topleftx,toplefty,toprightx,toprighty,bottomrightx,bottomrighty) {
		var baseIndex = kha_graphics4_TextShaderPainter.bufferIndex * 9 * 4;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex] = bottomleftx;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 1] = bottomlefty;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 2] = -5.0;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 9] = topleftx;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 10] = toplefty;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 11] = -5.0;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 18] = toprightx;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 19] = toprighty;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 20] = -5.0;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 27] = bottomrightx;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 28] = bottomrighty;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 29] = -5.0;
	}
	,setRectTexCoords: function(left,top,right,bottom) {
		var baseIndex = kha_graphics4_TextShaderPainter.bufferIndex * 9 * 4;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 3] = left;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 4] = bottom;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 12] = left;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 13] = top;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 21] = right;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 22] = top;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 30] = right;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 31] = bottom;
	}
	,setRectColors: function(opacity,color) {
		var baseIndex = kha_graphics4_TextShaderPainter.bufferIndex * 9 * 4;
		var a = opacity * ((color >>> 24) * 0.00392156862745098);
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 5] = ((color & 16711680) >>> 16) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 6] = ((color & 65280) >>> 8) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 7] = (color & 255) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 8] = a;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 14] = ((color & 16711680) >>> 16) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 15] = ((color & 65280) >>> 8) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 16] = (color & 255) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 17] = a;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 23] = ((color & 16711680) >>> 16) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 24] = ((color & 65280) >>> 8) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 25] = (color & 255) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 26] = a;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 32] = ((color & 16711680) >>> 16) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 33] = ((color & 65280) >>> 8) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 34] = (color & 255) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 35] = a;
	}
	,drawBuffer: function() {
		kha_graphics4_TextShaderPainter.rectVertexBuffer.unlock(kha_graphics4_TextShaderPainter.bufferIndex * 4);
		this.g.setVertexBuffer(kha_graphics4_TextShaderPainter.rectVertexBuffer);
		this.g.setIndexBuffer(kha_graphics4_TextShaderPainter.indexBuffer);
		this.g.setPipeline(this.myPipeline.pipeline);
		this.g.setTexture(this.myPipeline.textureLocation,kha_graphics4_TextShaderPainter.lastTexture);
		this.g.setMatrix(this.myPipeline.projectionLocation,this.projectionMatrix);
		this.g.setTextureParameters(this.myPipeline.textureLocation,2,2,this.bilinear ? 1 : 0,this.bilinear ? 1 : 0,0);
		this.g.drawIndexedVertices(0,kha_graphics4_TextShaderPainter.bufferIndex * 2 * 3);
		this.g.setTexture(this.myPipeline.textureLocation,null);
		kha_graphics4_TextShaderPainter.bufferIndex = 0;
		kha_graphics4_TextShaderPainter.rectVertices = kha_graphics4_TextShaderPainter.rectVertexBuffer.lock();
	}
	,setBilinearFilter: function(bilinear) {
		this.end();
		this.bilinear = bilinear;
	}
	,setFont: function(font) {
		this.font = js_Boot.__cast(font , kha_Kravur);
	}
	,bakedQuadCache: null
	,drawString: function(text,opacity,color,x,y,transformation) {
		var font = this.font._get(this.fontSize);
		var tex = font.getTexture();
		if(kha_graphics4_TextShaderPainter.lastTexture != null && tex != kha_graphics4_TextShaderPainter.lastTexture) {
			this.drawBuffer();
		}
		kha_graphics4_TextShaderPainter.lastTexture = tex;
		var xpos = x;
		var ypos = y;
		var _g = 0;
		var _g1 = text.length;
		while(_g < _g1) {
			var i = _g++;
			var charCode = text.charCodeAt(i);
			var q = font.getBakedQuad(this.bakedQuadCache,kha_graphics4_TextShaderPainter.findIndex(charCode),xpos,ypos);
			if(q != null) {
				if(kha_graphics4_TextShaderPainter.bufferIndex + 1 >= 1000) {
					this.drawBuffer();
				}
				this.setRectColors(opacity,color);
				this.setRectTexCoords(q.s0 * tex.get_width() / tex.get_realWidth(),q.t0 * tex.get_height() / tex.get_realHeight(),q.s1 * tex.get_width() / tex.get_realWidth(),q.t1 * tex.get_height() / tex.get_realHeight());
				var value_x = q.x0;
				var value_y = q.y1;
				var w = transformation._02 * value_x + transformation._12 * value_y + transformation._22;
				var x1 = (transformation._00 * value_x + transformation._10 * value_y + transformation._20) / w;
				var y1 = (transformation._01 * value_x + transformation._11 * value_y + transformation._21) / w;
				var p0_x = x1;
				var p0_y = y1;
				var value_x1 = q.x0;
				var value_y1 = q.y0;
				var w1 = transformation._02 * value_x1 + transformation._12 * value_y1 + transformation._22;
				var x2 = (transformation._00 * value_x1 + transformation._10 * value_y1 + transformation._20) / w1;
				var y2 = (transformation._01 * value_x1 + transformation._11 * value_y1 + transformation._21) / w1;
				var p1_x = x2;
				var p1_y = y2;
				var value_x2 = q.x1;
				var value_y2 = q.y0;
				var w2 = transformation._02 * value_x2 + transformation._12 * value_y2 + transformation._22;
				var x3 = (transformation._00 * value_x2 + transformation._10 * value_y2 + transformation._20) / w2;
				var y3 = (transformation._01 * value_x2 + transformation._11 * value_y2 + transformation._21) / w2;
				var p2_x = x3;
				var p2_y = y3;
				var value_x3 = q.x1;
				var value_y3 = q.y1;
				var w3 = transformation._02 * value_x3 + transformation._12 * value_y3 + transformation._22;
				var x4 = (transformation._00 * value_x3 + transformation._10 * value_y3 + transformation._20) / w3;
				var y4 = (transformation._01 * value_x3 + transformation._11 * value_y3 + transformation._21) / w3;
				var p3_x = x4;
				var p3_y = y4;
				this.setRectVertices(p0_x,p0_y,p1_x,p1_y,p2_x,p2_y,p3_x,p3_y);
				xpos += q.xadvance;
				++kha_graphics4_TextShaderPainter.bufferIndex;
			}
		}
	}
	,drawCharacters: function(text,start,length,opacity,color,x,y,transformation) {
		var font = this.font._get(this.fontSize);
		var tex = font.getTexture();
		if(kha_graphics4_TextShaderPainter.lastTexture != null && tex != kha_graphics4_TextShaderPainter.lastTexture) {
			this.drawBuffer();
		}
		kha_graphics4_TextShaderPainter.lastTexture = tex;
		var xpos = x;
		var ypos = y;
		var _g = start;
		var _g1 = start + length;
		while(_g < _g1) {
			var i = _g++;
			var q = font.getBakedQuad(this.bakedQuadCache,kha_graphics4_TextShaderPainter.findIndex(text[i]),xpos,ypos);
			if(q != null) {
				if(kha_graphics4_TextShaderPainter.bufferIndex + 1 >= 1000) {
					this.drawBuffer();
				}
				this.setRectColors(opacity,color);
				this.setRectTexCoords(q.s0 * tex.get_width() / tex.get_realWidth(),q.t0 * tex.get_height() / tex.get_realHeight(),q.s1 * tex.get_width() / tex.get_realWidth(),q.t1 * tex.get_height() / tex.get_realHeight());
				var value_x = q.x0;
				var value_y = q.y1;
				var w = transformation._02 * value_x + transformation._12 * value_y + transformation._22;
				var x1 = (transformation._00 * value_x + transformation._10 * value_y + transformation._20) / w;
				var y1 = (transformation._01 * value_x + transformation._11 * value_y + transformation._21) / w;
				var p0_x = x1;
				var p0_y = y1;
				var value_x1 = q.x0;
				var value_y1 = q.y0;
				var w1 = transformation._02 * value_x1 + transformation._12 * value_y1 + transformation._22;
				var x2 = (transformation._00 * value_x1 + transformation._10 * value_y1 + transformation._20) / w1;
				var y2 = (transformation._01 * value_x1 + transformation._11 * value_y1 + transformation._21) / w1;
				var p1_x = x2;
				var p1_y = y2;
				var value_x2 = q.x1;
				var value_y2 = q.y0;
				var w2 = transformation._02 * value_x2 + transformation._12 * value_y2 + transformation._22;
				var x3 = (transformation._00 * value_x2 + transformation._10 * value_y2 + transformation._20) / w2;
				var y3 = (transformation._01 * value_x2 + transformation._11 * value_y2 + transformation._21) / w2;
				var p2_x = x3;
				var p2_y = y3;
				var value_x3 = q.x1;
				var value_y3 = q.y1;
				var w3 = transformation._02 * value_x3 + transformation._12 * value_y3 + transformation._22;
				var x4 = (transformation._00 * value_x3 + transformation._10 * value_y3 + transformation._20) / w3;
				var y4 = (transformation._01 * value_x3 + transformation._11 * value_y3 + transformation._21) / w3;
				var p3_x = x4;
				var p3_y = y4;
				this.setRectVertices(p0_x,p0_y,p1_x,p1_y,p2_x,p2_y,p3_x,p3_y);
				xpos += q.xadvance;
				++kha_graphics4_TextShaderPainter.bufferIndex;
			}
		}
	}
	,end: function() {
		if(kha_graphics4_TextShaderPainter.bufferIndex > 0) {
			this.drawBuffer();
		}
		kha_graphics4_TextShaderPainter.lastTexture = null;
	}
	,__class__: kha_graphics4_TextShaderPainter
	,__properties__: {set_pipeline:"set_pipeline",get_pipeline:"get_pipeline"}
};
var kha_graphics4_Graphics2 = function(canvas) {
	this.scissorH = -1;
	this.scissorW = -1;
	this.scissorY = -1;
	this.scissorX = -1;
	this.scissorEnabled = false;
	this.lastPipeline = null;
	this.pipelineCache = new haxe_ds_ObjectMap();
	this.myMipmapScaleQuality = kha_graphics2_ImageScaleQuality.Low;
	this.myImageScaleQuality = kha_graphics2_ImageScaleQuality.Low;
	kha_graphics2_Graphics.call(this);
	this.set_color(-1);
	this.canvas = canvas;
	this.g = canvas.get_g4();
	this.imagePainter = new kha_graphics4_ImageShaderPainter(this.g);
	this.coloredPainter = new kha_graphics4_ColoredShaderPainter(this.g);
	this.textPainter = new kha_graphics4_TextShaderPainter(this.g);
	this.textPainter.fontSize = this.get_fontSize();
	this.projectionMatrix = new kha_math_FastMatrix4(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);
	this.setProjection();
	if(kha_graphics4_Graphics2.videoPipeline == null) {
		kha_graphics4_Graphics2.videoPipeline = kha_graphics4_Graphics2.createImagePipeline(kha_graphics4_Graphics2.createImageVertexStructure());
		kha_graphics4_Graphics2.videoPipeline.fragmentShader = kha_Shaders.painter_video_frag;
		kha_graphics4_Graphics2.videoPipeline.vertexShader = kha_Shaders.painter_video_vert;
		kha_graphics4_Graphics2.videoPipeline.compile();
	}
};
$hxClasses["kha.graphics4.Graphics2"] = kha_graphics4_Graphics2;
kha_graphics4_Graphics2.__name__ = "kha.graphics4.Graphics2";
kha_graphics4_Graphics2.upperPowerOfTwo = function(v) {
	--v;
	v |= v >>> 1;
	v |= v >>> 2;
	v |= v >>> 4;
	v |= v >>> 8;
	v |= v >>> 16;
	return ++v;
};
kha_graphics4_Graphics2.createImageVertexStructure = function() {
	var structure = new kha_graphics4_VertexStructure();
	structure.add("vertexPosition",2);
	structure.add("texPosition",1);
	structure.add("vertexColor",3);
	return structure;
};
kha_graphics4_Graphics2.createImagePipeline = function(structure) {
	var shaderPipeline = new kha_graphics4_PipelineState();
	shaderPipeline.fragmentShader = kha_Shaders.painter_image_frag;
	shaderPipeline.vertexShader = kha_Shaders.painter_image_vert;
	shaderPipeline.inputLayout = [structure];
	shaderPipeline.blendSource = 1;
	shaderPipeline.blendDestination = 5;
	shaderPipeline.alphaBlendSource = 1;
	shaderPipeline.alphaBlendDestination = 5;
	return shaderPipeline;
};
kha_graphics4_Graphics2.createColoredVertexStructure = function() {
	var structure = new kha_graphics4_VertexStructure();
	structure.add("vertexPosition",2);
	structure.add("vertexColor",3);
	return structure;
};
kha_graphics4_Graphics2.createColoredPipeline = function(structure) {
	var shaderPipeline = new kha_graphics4_PipelineState();
	shaderPipeline.fragmentShader = kha_Shaders.painter_colored_frag;
	shaderPipeline.vertexShader = kha_Shaders.painter_colored_vert;
	shaderPipeline.inputLayout = [structure];
	shaderPipeline.blendSource = 1;
	shaderPipeline.blendDestination = 5;
	shaderPipeline.alphaBlendSource = 1;
	shaderPipeline.alphaBlendDestination = 5;
	return shaderPipeline;
};
kha_graphics4_Graphics2.createTextVertexStructure = function() {
	var structure = new kha_graphics4_VertexStructure();
	structure.add("vertexPosition",2);
	structure.add("texPosition",1);
	structure.add("vertexColor",3);
	return structure;
};
kha_graphics4_Graphics2.createTextPipeline = function(structure) {
	var shaderPipeline = new kha_graphics4_PipelineState();
	shaderPipeline.fragmentShader = kha_Shaders.painter_text_frag;
	shaderPipeline.vertexShader = kha_Shaders.painter_text_vert;
	shaderPipeline.inputLayout = [structure];
	shaderPipeline.blendSource = 3;
	shaderPipeline.blendDestination = 5;
	shaderPipeline.alphaBlendSource = 3;
	shaderPipeline.alphaBlendDestination = 5;
	return shaderPipeline;
};
kha_graphics4_Graphics2.__super__ = kha_graphics2_Graphics;
kha_graphics4_Graphics2.prototype = $extend(kha_graphics2_Graphics.prototype,{
	myColor: null
	,myFont: null
	,projectionMatrix: null
	,imagePainter: null
	,coloredPainter: null
	,textPainter: null
	,canvas: null
	,g: null
	,setProjection: function() {
		var width = this.canvas.get_width();
		var height = this.canvas.get_height();
		if(((this.canvas) instanceof kha_Framebuffer)) {
			var _this = this.projectionMatrix;
			var tx = -width / width;
			var ty = -height / (0 - height);
			var tz = -1.0002000200020003;
			var m__00 = 2 / width;
			var m__10 = 0;
			var m__20 = 0;
			var m__30 = tx;
			var m__01 = 0;
			var m__11 = 2.0 / (0 - height);
			var m__21 = 0;
			var m__31 = ty;
			var m__02 = 0;
			var m__12 = 0;
			var m__22 = -0.002000200020002;
			var m__32 = tz;
			var m__03 = 0;
			var m__13 = 0;
			var m__23 = 0;
			var m__33 = 1;
			_this._00 = m__00;
			_this._10 = m__10;
			_this._20 = m__20;
			_this._30 = m__30;
			_this._01 = m__01;
			_this._11 = m__11;
			_this._21 = m__21;
			_this._31 = m__31;
			_this._02 = m__02;
			_this._12 = m__12;
			_this._22 = m__22;
			_this._32 = m__32;
			_this._03 = m__03;
			_this._13 = m__13;
			_this._23 = m__23;
			_this._33 = m__33;
		} else {
			if(!kha_Image.get_nonPow2Supported()) {
				width = kha_graphics4_Graphics2.upperPowerOfTwo(width);
				height = kha_graphics4_Graphics2.upperPowerOfTwo(height);
			}
			if(kha_Image.renderTargetsInvertedY()) {
				var _this1 = this.projectionMatrix;
				var tx1 = -width / width;
				var ty1 = -height / height;
				var tz1 = -1.0002000200020003;
				var m__001 = 2 / width;
				var m__101 = 0;
				var m__201 = 0;
				var m__301 = tx1;
				var m__011 = 0;
				var m__111 = 2.0 / height;
				var m__211 = 0;
				var m__311 = ty1;
				var m__021 = 0;
				var m__121 = 0;
				var m__221 = -0.002000200020002;
				var m__321 = tz1;
				var m__031 = 0;
				var m__131 = 0;
				var m__231 = 0;
				var m__331 = 1;
				_this1._00 = m__001;
				_this1._10 = m__101;
				_this1._20 = m__201;
				_this1._30 = m__301;
				_this1._01 = m__011;
				_this1._11 = m__111;
				_this1._21 = m__211;
				_this1._31 = m__311;
				_this1._02 = m__021;
				_this1._12 = m__121;
				_this1._22 = m__221;
				_this1._32 = m__321;
				_this1._03 = m__031;
				_this1._13 = m__131;
				_this1._23 = m__231;
				_this1._33 = m__331;
			} else {
				var _this2 = this.projectionMatrix;
				var tx2 = -width / width;
				var ty2 = -height / (0 - height);
				var tz2 = -1.0002000200020003;
				var m__002 = 2 / width;
				var m__102 = 0;
				var m__202 = 0;
				var m__302 = tx2;
				var m__012 = 0;
				var m__112 = 2.0 / (0 - height);
				var m__212 = 0;
				var m__312 = ty2;
				var m__022 = 0;
				var m__122 = 0;
				var m__222 = -0.002000200020002;
				var m__322 = tz2;
				var m__032 = 0;
				var m__132 = 0;
				var m__232 = 0;
				var m__332 = 1;
				_this2._00 = m__002;
				_this2._10 = m__102;
				_this2._20 = m__202;
				_this2._30 = m__302;
				_this2._01 = m__012;
				_this2._11 = m__112;
				_this2._21 = m__212;
				_this2._31 = m__312;
				_this2._02 = m__022;
				_this2._12 = m__122;
				_this2._22 = m__222;
				_this2._32 = m__322;
				_this2._03 = m__032;
				_this2._13 = m__132;
				_this2._23 = m__232;
				_this2._33 = m__332;
			}
		}
		this.imagePainter.setProjection(this.projectionMatrix);
		this.coloredPainter.setProjection(this.projectionMatrix);
		this.textPainter.setProjection(this.projectionMatrix);
	}
	,drawImage: function(img,x,y) {
		var _this = this.coloredPainter;
		if(kha_graphics4_ColoredShaderPainter.triangleBufferIndex > 0) {
			_this.drawTriBuffer(false);
		}
		if(kha_graphics4_ColoredShaderPainter.bufferIndex > 0) {
			_this.drawBuffer(false);
		}
		this.textPainter.end();
		var xw = x + img.get_width();
		var yh = y + img.get_height();
		var _this1 = this.transformations[this.transformationIndex];
		var value_x = x;
		var value_y = yh;
		var w = _this1._02 * value_x + _this1._12 * value_y + _this1._22;
		var x1 = (_this1._00 * value_x + _this1._10 * value_y + _this1._20) / w;
		var y1 = (_this1._01 * value_x + _this1._11 * value_y + _this1._21) / w;
		var p1_x = x1;
		var p1_y = y1;
		var _this2 = this.transformations[this.transformationIndex];
		var value_x1 = x;
		var value_y1 = y;
		var w1 = _this2._02 * value_x1 + _this2._12 * value_y1 + _this2._22;
		var x2 = (_this2._00 * value_x1 + _this2._10 * value_y1 + _this2._20) / w1;
		var y2 = (_this2._01 * value_x1 + _this2._11 * value_y1 + _this2._21) / w1;
		var p2_x = x2;
		var p2_y = y2;
		var _this3 = this.transformations[this.transformationIndex];
		var value_x2 = xw;
		var value_y2 = y;
		var w2 = _this3._02 * value_x2 + _this3._12 * value_y2 + _this3._22;
		var x3 = (_this3._00 * value_x2 + _this3._10 * value_y2 + _this3._20) / w2;
		var y3 = (_this3._01 * value_x2 + _this3._11 * value_y2 + _this3._21) / w2;
		var p3_x = x3;
		var p3_y = y3;
		var _this4 = this.transformations[this.transformationIndex];
		var value_x3 = xw;
		var value_y3 = yh;
		var w3 = _this4._02 * value_x3 + _this4._12 * value_y3 + _this4._22;
		var x4 = (_this4._00 * value_x3 + _this4._10 * value_y3 + _this4._20) / w3;
		var y4 = (_this4._01 * value_x3 + _this4._11 * value_y3 + _this4._21) / w3;
		var p4_x = x4;
		var p4_y = y4;
		var _this5 = this.imagePainter;
		var opacity = this.get_opacity();
		var color = this.get_color();
		var tex = img;
		if(kha_graphics4_ImageShaderPainter.bufferIndex + 1 >= 1500 || kha_graphics4_ImageShaderPainter.lastTexture != null && tex != kha_graphics4_ImageShaderPainter.lastTexture) {
			_this5.drawBuffer();
		}
		var r = ((color & 16711680) >>> 16) * 0.00392156862745098;
		var g = ((color & 65280) >>> 8) * 0.00392156862745098;
		var b = (color & 255) * 0.00392156862745098;
		var a = (color >>> 24) * 0.00392156862745098 * opacity;
		var baseIndex = kha_graphics4_ImageShaderPainter.bufferIndex * 9 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 5] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 6] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 7] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 8] = a;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 14] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 15] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 16] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 17] = a;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 23] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 24] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 25] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 26] = a;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 32] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 33] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 34] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 35] = a;
		var right = tex.get_width() / tex.get_realWidth();
		var bottom = tex.get_height() / tex.get_realHeight();
		var baseIndex1 = kha_graphics4_ImageShaderPainter.bufferIndex * 9 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 3] = 0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 4] = bottom;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 12] = 0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 13] = 0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 21] = right;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 22] = 0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 30] = right;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 31] = bottom;
		var baseIndex2 = kha_graphics4_ImageShaderPainter.bufferIndex * 9 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2] = p1_x;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 1] = p1_y;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 2] = -5.0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 9] = p2_x;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 10] = p2_y;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 11] = -5.0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 18] = p3_x;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 19] = p3_y;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 20] = -5.0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 27] = p4_x;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 28] = p4_y;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 29] = -5.0;
		++kha_graphics4_ImageShaderPainter.bufferIndex;
		kha_graphics4_ImageShaderPainter.lastTexture = tex;
	}
	,drawScaledSubImage: function(img,sx,sy,sw,sh,dx,dy,dw,dh) {
		var _this = this.coloredPainter;
		if(kha_graphics4_ColoredShaderPainter.triangleBufferIndex > 0) {
			_this.drawTriBuffer(false);
		}
		if(kha_graphics4_ColoredShaderPainter.bufferIndex > 0) {
			_this.drawBuffer(false);
		}
		this.textPainter.end();
		var _this1 = this.transformations[this.transformationIndex];
		var value_x = dx;
		var value_y = dy + dh;
		var w = _this1._02 * value_x + _this1._12 * value_y + _this1._22;
		var x = (_this1._00 * value_x + _this1._10 * value_y + _this1._20) / w;
		var y = (_this1._01 * value_x + _this1._11 * value_y + _this1._21) / w;
		var p1_x = x;
		var p1_y = y;
		var _this2 = this.transformations[this.transformationIndex];
		var value_x1 = dx;
		var value_y1 = dy;
		var w1 = _this2._02 * value_x1 + _this2._12 * value_y1 + _this2._22;
		var x1 = (_this2._00 * value_x1 + _this2._10 * value_y1 + _this2._20) / w1;
		var y1 = (_this2._01 * value_x1 + _this2._11 * value_y1 + _this2._21) / w1;
		var p2_x = x1;
		var p2_y = y1;
		var _this3 = this.transformations[this.transformationIndex];
		var value_x2 = dx + dw;
		var value_y2 = dy;
		var w2 = _this3._02 * value_x2 + _this3._12 * value_y2 + _this3._22;
		var x2 = (_this3._00 * value_x2 + _this3._10 * value_y2 + _this3._20) / w2;
		var y2 = (_this3._01 * value_x2 + _this3._11 * value_y2 + _this3._21) / w2;
		var p3_x = x2;
		var p3_y = y2;
		var _this4 = this.transformations[this.transformationIndex];
		var value_x3 = dx + dw;
		var value_y3 = dy + dh;
		var w3 = _this4._02 * value_x3 + _this4._12 * value_y3 + _this4._22;
		var x3 = (_this4._00 * value_x3 + _this4._10 * value_y3 + _this4._20) / w3;
		var y3 = (_this4._01 * value_x3 + _this4._11 * value_y3 + _this4._21) / w3;
		var p4_x = x3;
		var p4_y = y3;
		var _this5 = this.imagePainter;
		var opacity = this.get_opacity();
		var color = this.get_color();
		var tex = img;
		if(kha_graphics4_ImageShaderPainter.bufferIndex + 1 >= 1500 || kha_graphics4_ImageShaderPainter.lastTexture != null && tex != kha_graphics4_ImageShaderPainter.lastTexture) {
			_this5.drawBuffer();
		}
		var left = sx / tex.get_realWidth();
		var top = sy / tex.get_realHeight();
		var right = (sx + sw) / tex.get_realWidth();
		var bottom = (sy + sh) / tex.get_realHeight();
		var baseIndex = kha_graphics4_ImageShaderPainter.bufferIndex * 9 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 3] = left;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 4] = bottom;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 12] = left;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 13] = top;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 21] = right;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 22] = top;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 30] = right;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 31] = bottom;
		var r = ((color & 16711680) >>> 16) * 0.00392156862745098;
		var g = ((color & 65280) >>> 8) * 0.00392156862745098;
		var b = (color & 255) * 0.00392156862745098;
		var a = (color >>> 24) * 0.00392156862745098 * opacity;
		var baseIndex1 = kha_graphics4_ImageShaderPainter.bufferIndex * 9 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 5] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 6] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 7] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 8] = a;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 14] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 15] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 16] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 17] = a;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 23] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 24] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 25] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 26] = a;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 32] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 33] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 34] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 35] = a;
		var baseIndex2 = kha_graphics4_ImageShaderPainter.bufferIndex * 9 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2] = p1_x;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 1] = p1_y;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 2] = -5.0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 9] = p2_x;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 10] = p2_y;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 11] = -5.0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 18] = p3_x;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 19] = p3_y;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 20] = -5.0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 27] = p4_x;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 28] = p4_y;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 29] = -5.0;
		++kha_graphics4_ImageShaderPainter.bufferIndex;
		kha_graphics4_ImageShaderPainter.lastTexture = tex;
	}
	,get_color: function() {
		return this.myColor;
	}
	,set_color: function(color) {
		return this.myColor = color;
	}
	,drawRect: function(x,y,width,height,strength) {
		if(strength == null) {
			strength = 1.0;
		}
		this.imagePainter.end();
		this.textPainter.end();
		var _this = this.transformations[this.transformationIndex];
		var value_x = x - strength / 2;
		var value_y = y + strength / 2;
		var w = _this._02 * value_x + _this._12 * value_y + _this._22;
		var x1 = (_this._00 * value_x + _this._10 * value_y + _this._20) / w;
		var y1 = (_this._01 * value_x + _this._11 * value_y + _this._21) / w;
		var p1_x = x1;
		var p1_y = y1;
		var _this1 = this.transformations[this.transformationIndex];
		var value_x1 = x - strength / 2;
		var value_y1 = y - strength / 2;
		var w1 = _this1._02 * value_x1 + _this1._12 * value_y1 + _this1._22;
		var x2 = (_this1._00 * value_x1 + _this1._10 * value_y1 + _this1._20) / w1;
		var y2 = (_this1._01 * value_x1 + _this1._11 * value_y1 + _this1._21) / w1;
		var p2_x = x2;
		var p2_y = y2;
		var _this2 = this.transformations[this.transformationIndex];
		var value_x2 = x + width + strength / 2;
		var value_y2 = y - strength / 2;
		var w2 = _this2._02 * value_x2 + _this2._12 * value_y2 + _this2._22;
		var x3 = (_this2._00 * value_x2 + _this2._10 * value_y2 + _this2._20) / w2;
		var y3 = (_this2._01 * value_x2 + _this2._11 * value_y2 + _this2._21) / w2;
		var p3_x = x3;
		var p3_y = y3;
		var _this3 = this.transformations[this.transformationIndex];
		var value_x3 = x + width + strength / 2;
		var value_y3 = y + strength / 2;
		var w3 = _this3._02 * value_x3 + _this3._12 * value_y3 + _this3._22;
		var x4 = (_this3._00 * value_x3 + _this3._10 * value_y3 + _this3._20) / w3;
		var y4 = (_this3._01 * value_x3 + _this3._11 * value_y3 + _this3._21) / w3;
		var p4_x = x4;
		var p4_y = y4;
		this.coloredPainter.fillRect(this.get_opacity(),this.get_color(),p1_x,p1_y,p2_x,p2_y,p3_x,p3_y,p4_x,p4_y);
		var _this4 = this.transformations[this.transformationIndex];
		var value_x4 = x - strength / 2;
		var value_y4 = y + height - strength / 2;
		var w4 = _this4._02 * value_x4 + _this4._12 * value_y4 + _this4._22;
		var x5 = (_this4._00 * value_x4 + _this4._10 * value_y4 + _this4._20) / w4;
		var y5 = (_this4._01 * value_x4 + _this4._11 * value_y4 + _this4._21) / w4;
		var v_x = x5;
		var v_y = y5;
		p1_x = v_x;
		p1_y = v_y;
		var _this5 = this.transformations[this.transformationIndex];
		var value_x5 = x - strength / 2;
		var value_y5 = y + strength / 2;
		var w5 = _this5._02 * value_x5 + _this5._12 * value_y5 + _this5._22;
		var x6 = (_this5._00 * value_x5 + _this5._10 * value_y5 + _this5._20) / w5;
		var y6 = (_this5._01 * value_x5 + _this5._11 * value_y5 + _this5._21) / w5;
		var v_x1 = x6;
		var v_y1 = y6;
		p2_x = v_x1;
		p2_y = v_y1;
		var _this6 = this.transformations[this.transformationIndex];
		var value_x6 = x + strength / 2;
		var value_y6 = y + strength / 2;
		var w6 = _this6._02 * value_x6 + _this6._12 * value_y6 + _this6._22;
		var x7 = (_this6._00 * value_x6 + _this6._10 * value_y6 + _this6._20) / w6;
		var y7 = (_this6._01 * value_x6 + _this6._11 * value_y6 + _this6._21) / w6;
		var v_x2 = x7;
		var v_y2 = y7;
		p3_x = v_x2;
		p3_y = v_y2;
		var _this7 = this.transformations[this.transformationIndex];
		var value_x7 = x + strength / 2;
		var value_y7 = y + height - strength / 2;
		var w7 = _this7._02 * value_x7 + _this7._12 * value_y7 + _this7._22;
		var x8 = (_this7._00 * value_x7 + _this7._10 * value_y7 + _this7._20) / w7;
		var y8 = (_this7._01 * value_x7 + _this7._11 * value_y7 + _this7._21) / w7;
		var v_x3 = x8;
		var v_y3 = y8;
		p4_x = v_x3;
		p4_y = v_y3;
		this.coloredPainter.fillRect(this.get_opacity(),this.get_color(),p1_x,p1_y,p2_x,p2_y,p3_x,p3_y,p4_x,p4_y);
		var _this8 = this.transformations[this.transformationIndex];
		var value_x8 = x - strength / 2;
		var value_y8 = y + height + strength / 2;
		var w8 = _this8._02 * value_x8 + _this8._12 * value_y8 + _this8._22;
		var x9 = (_this8._00 * value_x8 + _this8._10 * value_y8 + _this8._20) / w8;
		var y9 = (_this8._01 * value_x8 + _this8._11 * value_y8 + _this8._21) / w8;
		var v_x4 = x9;
		var v_y4 = y9;
		p1_x = v_x4;
		p1_y = v_y4;
		var _this9 = this.transformations[this.transformationIndex];
		var value_x9 = x - strength / 2;
		var value_y9 = y + height - strength / 2;
		var w9 = _this9._02 * value_x9 + _this9._12 * value_y9 + _this9._22;
		var x10 = (_this9._00 * value_x9 + _this9._10 * value_y9 + _this9._20) / w9;
		var y10 = (_this9._01 * value_x9 + _this9._11 * value_y9 + _this9._21) / w9;
		var v_x5 = x10;
		var v_y5 = y10;
		p2_x = v_x5;
		p2_y = v_y5;
		var _this10 = this.transformations[this.transformationIndex];
		var value_x10 = x + width + strength / 2;
		var value_y10 = y + height - strength / 2;
		var w10 = _this10._02 * value_x10 + _this10._12 * value_y10 + _this10._22;
		var x11 = (_this10._00 * value_x10 + _this10._10 * value_y10 + _this10._20) / w10;
		var y11 = (_this10._01 * value_x10 + _this10._11 * value_y10 + _this10._21) / w10;
		var v_x6 = x11;
		var v_y6 = y11;
		p3_x = v_x6;
		p3_y = v_y6;
		var _this11 = this.transformations[this.transformationIndex];
		var value_x11 = x + width + strength / 2;
		var value_y11 = y + height + strength / 2;
		var w11 = _this11._02 * value_x11 + _this11._12 * value_y11 + _this11._22;
		var x12 = (_this11._00 * value_x11 + _this11._10 * value_y11 + _this11._20) / w11;
		var y12 = (_this11._01 * value_x11 + _this11._11 * value_y11 + _this11._21) / w11;
		var v_x7 = x12;
		var v_y7 = y12;
		p4_x = v_x7;
		p4_y = v_y7;
		this.coloredPainter.fillRect(this.get_opacity(),this.get_color(),p1_x,p1_y,p2_x,p2_y,p3_x,p3_y,p4_x,p4_y);
		var _this12 = this.transformations[this.transformationIndex];
		var value_x12 = x + width - strength / 2;
		var value_y12 = y + height - strength / 2;
		var w12 = _this12._02 * value_x12 + _this12._12 * value_y12 + _this12._22;
		var x13 = (_this12._00 * value_x12 + _this12._10 * value_y12 + _this12._20) / w12;
		var y13 = (_this12._01 * value_x12 + _this12._11 * value_y12 + _this12._21) / w12;
		var v_x8 = x13;
		var v_y8 = y13;
		p1_x = v_x8;
		p1_y = v_y8;
		var _this13 = this.transformations[this.transformationIndex];
		var value_x13 = x + width - strength / 2;
		var value_y13 = y + strength / 2;
		var w13 = _this13._02 * value_x13 + _this13._12 * value_y13 + _this13._22;
		var x14 = (_this13._00 * value_x13 + _this13._10 * value_y13 + _this13._20) / w13;
		var y14 = (_this13._01 * value_x13 + _this13._11 * value_y13 + _this13._21) / w13;
		var v_x9 = x14;
		var v_y9 = y14;
		p2_x = v_x9;
		p2_y = v_y9;
		var _this14 = this.transformations[this.transformationIndex];
		var value_x14 = x + width + strength / 2;
		var value_y14 = y + strength / 2;
		var w14 = _this14._02 * value_x14 + _this14._12 * value_y14 + _this14._22;
		var x15 = (_this14._00 * value_x14 + _this14._10 * value_y14 + _this14._20) / w14;
		var y15 = (_this14._01 * value_x14 + _this14._11 * value_y14 + _this14._21) / w14;
		var v_x10 = x15;
		var v_y10 = y15;
		p3_x = v_x10;
		p3_y = v_y10;
		var _this15 = this.transformations[this.transformationIndex];
		var value_x15 = x + width + strength / 2;
		var value_y15 = y + height - strength / 2;
		var w15 = _this15._02 * value_x15 + _this15._12 * value_y15 + _this15._22;
		var x16 = (_this15._00 * value_x15 + _this15._10 * value_y15 + _this15._20) / w15;
		var y16 = (_this15._01 * value_x15 + _this15._11 * value_y15 + _this15._21) / w15;
		var v_x11 = x16;
		var v_y11 = y16;
		p4_x = v_x11;
		p4_y = v_y11;
		this.coloredPainter.fillRect(this.get_opacity(),this.get_color(),p1_x,p1_y,p2_x,p2_y,p3_x,p3_y,p4_x,p4_y);
	}
	,fillRect: function(x,y,width,height) {
		this.imagePainter.end();
		this.textPainter.end();
		var _this = this.transformations[this.transformationIndex];
		var value_x = x;
		var value_y = y + height;
		var w = _this._02 * value_x + _this._12 * value_y + _this._22;
		var x1 = (_this._00 * value_x + _this._10 * value_y + _this._20) / w;
		var y1 = (_this._01 * value_x + _this._11 * value_y + _this._21) / w;
		var p1_x = x1;
		var p1_y = y1;
		var _this1 = this.transformations[this.transformationIndex];
		var value_x1 = x;
		var value_y1 = y;
		var w1 = _this1._02 * value_x1 + _this1._12 * value_y1 + _this1._22;
		var x2 = (_this1._00 * value_x1 + _this1._10 * value_y1 + _this1._20) / w1;
		var y2 = (_this1._01 * value_x1 + _this1._11 * value_y1 + _this1._21) / w1;
		var p2_x = x2;
		var p2_y = y2;
		var _this2 = this.transformations[this.transformationIndex];
		var value_x2 = x + width;
		var value_y2 = y;
		var w2 = _this2._02 * value_x2 + _this2._12 * value_y2 + _this2._22;
		var x3 = (_this2._00 * value_x2 + _this2._10 * value_y2 + _this2._20) / w2;
		var y3 = (_this2._01 * value_x2 + _this2._11 * value_y2 + _this2._21) / w2;
		var p3_x = x3;
		var p3_y = y3;
		var _this3 = this.transformations[this.transformationIndex];
		var value_x3 = x + width;
		var value_y3 = y + height;
		var w3 = _this3._02 * value_x3 + _this3._12 * value_y3 + _this3._22;
		var x4 = (_this3._00 * value_x3 + _this3._10 * value_y3 + _this3._20) / w3;
		var y4 = (_this3._01 * value_x3 + _this3._11 * value_y3 + _this3._21) / w3;
		var p4_x = x4;
		var p4_y = y4;
		this.coloredPainter.fillRect(this.get_opacity(),this.get_color(),p1_x,p1_y,p2_x,p2_y,p3_x,p3_y,p4_x,p4_y);
	}
	,drawString: function(text,x,y) {
		this.imagePainter.end();
		var _this = this.coloredPainter;
		if(kha_graphics4_ColoredShaderPainter.triangleBufferIndex > 0) {
			_this.drawTriBuffer(false);
		}
		if(kha_graphics4_ColoredShaderPainter.bufferIndex > 0) {
			_this.drawBuffer(false);
		}
		this.textPainter.drawString(text,this.get_opacity(),this.get_color(),x,y,this.transformations[this.transformationIndex]);
	}
	,drawCharacters: function(text,start,length,x,y) {
		this.imagePainter.end();
		var _this = this.coloredPainter;
		if(kha_graphics4_ColoredShaderPainter.triangleBufferIndex > 0) {
			_this.drawTriBuffer(false);
		}
		if(kha_graphics4_ColoredShaderPainter.bufferIndex > 0) {
			_this.drawBuffer(false);
		}
		this.textPainter.drawCharacters(text,start,length,this.get_opacity(),this.get_color(),x,y,this.transformations[this.transformationIndex]);
	}
	,get_font: function() {
		return this.myFont;
	}
	,set_font: function(font) {
		this.textPainter.setFont(font);
		return this.myFont = font;
	}
	,set_fontSize: function(value) {
		return kha_graphics2_Graphics.prototype.set_fontSize.call(this,this.textPainter.fontSize = value);
	}
	,drawLine: function(x1,y1,x2,y2,strength) {
		if(strength == null) {
			strength = 1.0;
		}
		this.imagePainter.end();
		this.textPainter.end();
		var vec_x = 0;
		var vec_y = 0;
		if(y2 == y1) {
			var v_x = 0;
			var v_y = -1;
			vec_x = v_x;
			vec_y = v_y;
		} else {
			var v_x1 = 1;
			var v_y1 = -(x2 - x1) / (y2 - y1);
			vec_x = v_x1;
			vec_y = v_y1;
		}
		var currentLength = Math.sqrt(vec_x * vec_x + vec_y * vec_y);
		if(currentLength != 0) {
			var mul = strength / currentLength;
			vec_x *= mul;
			vec_y *= mul;
		}
		var p1_x = x1 + 0.5 * vec_x;
		var p1_y = y1 + 0.5 * vec_y;
		var p2_x = x2 + 0.5 * vec_x;
		var p2_y = y2 + 0.5 * vec_y;
		var p3_x = p1_x - vec_x;
		var p3_y = p1_y - vec_y;
		var p4_x = p2_x - vec_x;
		var p4_y = p2_y - vec_y;
		var _this = this.transformations[this.transformationIndex];
		var w = _this._02 * p1_x + _this._12 * p1_y + _this._22;
		var x = (_this._00 * p1_x + _this._10 * p1_y + _this._20) / w;
		var y = (_this._01 * p1_x + _this._11 * p1_y + _this._21) / w;
		var v_x2 = x;
		var v_y2 = y;
		p1_x = v_x2;
		p1_y = v_y2;
		var _this1 = this.transformations[this.transformationIndex];
		var w1 = _this1._02 * p2_x + _this1._12 * p2_y + _this1._22;
		var x3 = (_this1._00 * p2_x + _this1._10 * p2_y + _this1._20) / w1;
		var y3 = (_this1._01 * p2_x + _this1._11 * p2_y + _this1._21) / w1;
		var v_x3 = x3;
		var v_y3 = y3;
		p2_x = v_x3;
		p2_y = v_y3;
		var _this2 = this.transformations[this.transformationIndex];
		var w2 = _this2._02 * p3_x + _this2._12 * p3_y + _this2._22;
		var x4 = (_this2._00 * p3_x + _this2._10 * p3_y + _this2._20) / w2;
		var y4 = (_this2._01 * p3_x + _this2._11 * p3_y + _this2._21) / w2;
		var v_x4 = x4;
		var v_y4 = y4;
		p3_x = v_x4;
		p3_y = v_y4;
		var _this3 = this.transformations[this.transformationIndex];
		var w3 = _this3._02 * p4_x + _this3._12 * p4_y + _this3._22;
		var x5 = (_this3._00 * p4_x + _this3._10 * p4_y + _this3._20) / w3;
		var y5 = (_this3._01 * p4_x + _this3._11 * p4_y + _this3._21) / w3;
		var v_x5 = x5;
		var v_y5 = y5;
		p4_x = v_x5;
		p4_y = v_y5;
		this.coloredPainter.fillTriangle(this.get_opacity(),this.get_color(),p1_x,p1_y,p2_x,p2_y,p3_x,p3_y);
		this.coloredPainter.fillTriangle(this.get_opacity(),this.get_color(),p3_x,p3_y,p2_x,p2_y,p4_x,p4_y);
	}
	,fillTriangle: function(x1,y1,x2,y2,x3,y3) {
		this.imagePainter.end();
		this.textPainter.end();
		var _this = this.transformations[this.transformationIndex];
		var value_x = x1;
		var value_y = y1;
		var w = _this._02 * value_x + _this._12 * value_y + _this._22;
		var x = (_this._00 * value_x + _this._10 * value_y + _this._20) / w;
		var y = (_this._01 * value_x + _this._11 * value_y + _this._21) / w;
		var p1_x = x;
		var p1_y = y;
		var _this1 = this.transformations[this.transformationIndex];
		var value_x1 = x2;
		var value_y1 = y2;
		var w1 = _this1._02 * value_x1 + _this1._12 * value_y1 + _this1._22;
		var x4 = (_this1._00 * value_x1 + _this1._10 * value_y1 + _this1._20) / w1;
		var y4 = (_this1._01 * value_x1 + _this1._11 * value_y1 + _this1._21) / w1;
		var p2_x = x4;
		var p2_y = y4;
		var _this2 = this.transformations[this.transformationIndex];
		var value_x2 = x3;
		var value_y2 = y3;
		var w2 = _this2._02 * value_x2 + _this2._12 * value_y2 + _this2._22;
		var x5 = (_this2._00 * value_x2 + _this2._10 * value_y2 + _this2._20) / w2;
		var y5 = (_this2._01 * value_x2 + _this2._11 * value_y2 + _this2._21) / w2;
		var p3_x = x5;
		var p3_y = y5;
		this.coloredPainter.fillTriangle(this.get_opacity(),this.get_color(),p1_x,p1_y,p2_x,p2_y,p3_x,p3_y);
	}
	,myImageScaleQuality: null
	,get_imageScaleQuality: function() {
		return this.myImageScaleQuality;
	}
	,set_imageScaleQuality: function(value) {
		if(value == this.myImageScaleQuality) {
			return value;
		}
		this.imagePainter.setBilinearFilter(value == kha_graphics2_ImageScaleQuality.High);
		this.textPainter.setBilinearFilter(value == kha_graphics2_ImageScaleQuality.High);
		return this.myImageScaleQuality = value;
	}
	,myMipmapScaleQuality: null
	,get_mipmapScaleQuality: function() {
		return this.myMipmapScaleQuality;
	}
	,set_mipmapScaleQuality: function(value) {
		this.imagePainter.setBilinearMipmapFilter(value == kha_graphics2_ImageScaleQuality.High);
		return this.myMipmapScaleQuality = value;
	}
	,pipelineCache: null
	,lastPipeline: null
	,setPipeline: function(pipeline) {
		if(pipeline == this.lastPipeline) {
			return;
		}
		this.lastPipeline = pipeline;
		this.flush();
		if(pipeline == null) {
			this.imagePainter.set_pipeline(null);
			this.coloredPainter.set_pipeline(null);
			this.textPainter.set_pipeline(null);
		} else {
			var cache = this.pipelineCache.h[pipeline.__id__];
			if(cache == null) {
				cache = new kha_graphics4_PipelineCache(pipeline);
				this.pipelineCache.set(pipeline,cache);
			}
			this.imagePainter.set_pipeline(cache);
			this.coloredPainter.set_pipeline(cache);
			this.textPainter.set_pipeline(cache);
		}
	}
	,scissorEnabled: null
	,scissorX: null
	,scissorY: null
	,scissorW: null
	,scissorH: null
	,scissor: function(x,y,width,height) {
		this.scissorEnabled = true;
		this.scissorX = x;
		this.scissorY = y;
		this.scissorW = width;
		this.scissorH = height;
		this.flush();
		this.g.scissor(x,y,width,height);
	}
	,disableScissor: function() {
		this.scissorEnabled = false;
		this.flush();
		this.g.disableScissor();
	}
	,begin: function(clear,clearColor) {
		if(clear == null) {
			clear = true;
		}
		if(kha_graphics4_Graphics2.current == null) {
			kha_graphics4_Graphics2.current = this;
		} else {
			throw new js__$Boot_HaxeError("End before you begin");
		}
		this.g.begin();
		if(clear) {
			this.clear(clearColor);
		}
		this.setProjection();
	}
	,clear: function(color) {
		this.flush();
		this.g.clear(color == null ? -16777216 : color);
	}
	,flush: function() {
		this.imagePainter.end();
		this.textPainter.end();
		var _this = this.coloredPainter;
		if(kha_graphics4_ColoredShaderPainter.triangleBufferIndex > 0) {
			_this.drawTriBuffer(false);
		}
		if(kha_graphics4_ColoredShaderPainter.bufferIndex > 0) {
			_this.drawBuffer(false);
		}
	}
	,end: function() {
		this.flush();
		this.g.end();
		if(kha_graphics4_Graphics2.current == this) {
			kha_graphics4_Graphics2.current = null;
		} else {
			throw new js__$Boot_HaxeError("Begin before you end");
		}
	}
	,drawVideoInternal: function(video,x,y,width,height) {
	}
	,drawVideo: function(video,x,y,width,height) {
		this.setPipeline(kha_graphics4_Graphics2.videoPipeline);
		this.drawVideoInternal(video,x,y,width,height);
		this.setPipeline(null);
	}
	,__class__: kha_graphics4_Graphics2
});
var kha_graphics4_IndexBuffer = function(indexCount,usage,canRead) {
	if(canRead == null) {
		canRead = false;
	}
	this.usage = usage;
	this.mySize = indexCount;
	this.buffer = kha_SystemImpl.gl.createBuffer();
	var this1 = new Uint32Array(indexCount);
	this._data = this1;
};
$hxClasses["kha.graphics4.IndexBuffer"] = kha_graphics4_IndexBuffer;
kha_graphics4_IndexBuffer.__name__ = "kha.graphics4.IndexBuffer";
kha_graphics4_IndexBuffer.prototype = {
	buffer: null
	,_data: null
	,mySize: null
	,usage: null
	,'delete': function() {
		this._data = null;
		kha_SystemImpl.gl.deleteBuffer(this.buffer);
	}
	,lock: function(start,count) {
		if(start == null) {
			start = 0;
		}
		if(count == null) {
			count = this.mySize;
		}
		return this._data.subarray(start,start + count);
	}
	,unlock: function() {
		kha_SystemImpl.gl.bindBuffer(34963,this.buffer);
		var glData = kha_SystemImpl.elementIndexUint == null ? new Uint16Array(this._data) : this._data;
		kha_SystemImpl.gl.bufferData(34963,glData,this.usage == 1 ? 35048 : 35044);
	}
	,set: function() {
		kha_SystemImpl.gl.bindBuffer(34963,this.buffer);
	}
	,count: function() {
		return this.mySize;
	}
	,__class__: kha_graphics4_IndexBuffer
};
var kha_graphics4_PipelineStateBase = function() {
	this.inputLayout = null;
	this.vertexShader = null;
	this.fragmentShader = null;
	this.geometryShader = null;
	this.tessellationControlShader = null;
	this.tessellationEvaluationShader = null;
	this.cullMode = 2;
	this.depthWrite = false;
	this.depthMode = 0;
	this.stencilMode = 0;
	this.stencilBothPass = 0;
	this.stencilDepthFail = 0;
	this.stencilFail = 0;
	this.stencilReferenceValue = kha_graphics4_StencilValue.Static(0);
	this.stencilReadMask = 255;
	this.stencilWriteMask = 255;
	this.blendSource = 1;
	this.blendDestination = 2;
	this.blendOperation = 0;
	this.alphaBlendSource = 1;
	this.alphaBlendDestination = 2;
	this.alphaBlendOperation = 0;
	this.colorWriteMasksRed = [];
	this.colorWriteMasksGreen = [];
	this.colorWriteMasksBlue = [];
	this.colorWriteMasksAlpha = [];
	this.colorWriteMasksRed.push(true);
	this.colorWriteMasksRed.push(true);
	this.colorWriteMasksRed.push(true);
	this.colorWriteMasksRed.push(true);
	this.colorWriteMasksRed.push(true);
	this.colorWriteMasksRed.push(true);
	this.colorWriteMasksRed.push(true);
	this.colorWriteMasksRed.push(true);
	this.colorWriteMasksGreen.push(true);
	this.colorWriteMasksGreen.push(true);
	this.colorWriteMasksGreen.push(true);
	this.colorWriteMasksGreen.push(true);
	this.colorWriteMasksGreen.push(true);
	this.colorWriteMasksGreen.push(true);
	this.colorWriteMasksGreen.push(true);
	this.colorWriteMasksGreen.push(true);
	this.colorWriteMasksBlue.push(true);
	this.colorWriteMasksBlue.push(true);
	this.colorWriteMasksBlue.push(true);
	this.colorWriteMasksBlue.push(true);
	this.colorWriteMasksBlue.push(true);
	this.colorWriteMasksBlue.push(true);
	this.colorWriteMasksBlue.push(true);
	this.colorWriteMasksBlue.push(true);
	this.colorWriteMasksAlpha.push(true);
	this.colorWriteMasksAlpha.push(true);
	this.colorWriteMasksAlpha.push(true);
	this.colorWriteMasksAlpha.push(true);
	this.colorWriteMasksAlpha.push(true);
	this.colorWriteMasksAlpha.push(true);
	this.colorWriteMasksAlpha.push(true);
	this.colorWriteMasksAlpha.push(true);
	this.conservativeRasterization = false;
};
$hxClasses["kha.graphics4.PipelineStateBase"] = kha_graphics4_PipelineStateBase;
kha_graphics4_PipelineStateBase.__name__ = "kha.graphics4.PipelineStateBase";
kha_graphics4_PipelineStateBase.prototype = {
	inputLayout: null
	,vertexShader: null
	,fragmentShader: null
	,geometryShader: null
	,tessellationControlShader: null
	,tessellationEvaluationShader: null
	,cullMode: null
	,depthWrite: null
	,depthMode: null
	,stencilMode: null
	,stencilBothPass: null
	,stencilDepthFail: null
	,stencilFail: null
	,stencilReferenceValue: null
	,stencilReadMask: null
	,stencilWriteMask: null
	,blendSource: null
	,blendDestination: null
	,blendOperation: null
	,alphaBlendSource: null
	,alphaBlendDestination: null
	,alphaBlendOperation: null
	,colorWriteMasksRed: null
	,colorWriteMasksGreen: null
	,colorWriteMasksBlue: null
	,colorWriteMasksAlpha: null
	,set_colorWriteMask: function(value) {
		var value1 = this.colorWriteMasksAlpha[0] = value;
		var value2 = this.colorWriteMasksGreen[0] = value1;
		var value3 = this.colorWriteMasksBlue[0] = value2;
		return this.colorWriteMasksRed[0] = value3;
	}
	,get_colorWriteMaskRed: function() {
		return this.colorWriteMasksRed[0];
	}
	,set_colorWriteMaskRed: function(value) {
		return this.colorWriteMasksRed[0] = value;
	}
	,get_colorWriteMaskGreen: function() {
		return this.colorWriteMasksGreen[0];
	}
	,set_colorWriteMaskGreen: function(value) {
		return this.colorWriteMasksGreen[0] = value;
	}
	,get_colorWriteMaskBlue: function() {
		return this.colorWriteMasksBlue[0];
	}
	,set_colorWriteMaskBlue: function(value) {
		return this.colorWriteMasksBlue[0] = value;
	}
	,get_colorWriteMaskAlpha: function() {
		return this.colorWriteMasksAlpha[0];
	}
	,set_colorWriteMaskAlpha: function(value) {
		return this.colorWriteMasksAlpha[0] = value;
	}
	,conservativeRasterization: null
	,__class__: kha_graphics4_PipelineStateBase
	,__properties__: {set_colorWriteMaskAlpha:"set_colorWriteMaskAlpha",get_colorWriteMaskAlpha:"get_colorWriteMaskAlpha",set_colorWriteMaskBlue:"set_colorWriteMaskBlue",get_colorWriteMaskBlue:"get_colorWriteMaskBlue",set_colorWriteMaskGreen:"set_colorWriteMaskGreen",get_colorWriteMaskGreen:"get_colorWriteMaskGreen",set_colorWriteMaskRed:"set_colorWriteMaskRed",get_colorWriteMaskRed:"get_colorWriteMaskRed",set_colorWriteMask:"set_colorWriteMask"}
};
var kha_graphics4_PipelineState = function() {
	this.program = null;
	kha_graphics4_PipelineStateBase.call(this);
	this.textures = [];
	this.textureValues = [];
};
$hxClasses["kha.graphics4.PipelineState"] = kha_graphics4_PipelineState;
kha_graphics4_PipelineState.__name__ = "kha.graphics4.PipelineState";
kha_graphics4_PipelineState.__super__ = kha_graphics4_PipelineStateBase;
kha_graphics4_PipelineState.prototype = $extend(kha_graphics4_PipelineStateBase.prototype,{
	program: null
	,textures: null
	,textureValues: null
	,'delete': function() {
		if(this.program != null) {
			kha_SystemImpl.gl.deleteProgram(this.program);
		}
	}
	,compile: function() {
		if(this.program != null) {
			kha_SystemImpl.gl.deleteProgram(this.program);
		}
		this.program = kha_SystemImpl.gl.createProgram();
		this.compileShader(this.vertexShader);
		this.compileShader(this.fragmentShader);
		kha_SystemImpl.gl.attachShader(this.program,this.vertexShader.shader);
		kha_SystemImpl.gl.attachShader(this.program,this.fragmentShader.shader);
		var index = 0;
		var _g = 0;
		var _g1 = this.inputLayout;
		while(_g < _g1.length) {
			var structure = _g1[_g];
			++_g;
			var _g2 = 0;
			var _g11 = structure.elements;
			while(_g2 < _g11.length) {
				var element = _g11[_g2];
				++_g2;
				kha_SystemImpl.gl.bindAttribLocation(this.program,index,element.name);
				if(element.data == 4) {
					index += 4;
				} else {
					++index;
				}
			}
		}
		kha_SystemImpl.gl.linkProgram(this.program);
		if(!kha_SystemImpl.gl.getProgramParameter(this.program,35714)) {
			throw new js__$Boot_HaxeError("Could not link the shader program:\n" + kha_SystemImpl.gl.getProgramInfoLog(this.program));
		}
	}
	,set: function() {
		kha_SystemImpl.gl.useProgram(this.program);
		var _g = 0;
		var _g1 = this.textureValues.length;
		while(_g < _g1) {
			var index = _g++;
			kha_SystemImpl.gl.uniform1i(this.textureValues[index],index);
		}
		kha_SystemImpl.gl.colorMask(this.colorWriteMasksRed[0],this.colorWriteMasksGreen[0],this.colorWriteMasksBlue[0],this.colorWriteMasksAlpha[0]);
	}
	,compileShader: function(shader) {
		if(shader.shader != null) {
			return;
		}
		var s = kha_SystemImpl.gl.createShader(shader.type);
		var highp = kha_SystemImpl.gl.getShaderPrecisionFormat(35632,36338);
		var highpSupported = highp.precision != 0;
		var files = shader.files;
		var _g = 0;
		var _g1 = files.length;
		while(_g < _g1) {
			var i = _g++;
			if(kha_SystemImpl.gl2) {
				if(files[i].indexOf("-webgl2") >= 0 || files[i].indexOf("runtime-string") >= 0) {
					kha_SystemImpl.gl.shaderSource(s,shader.sources[i]);
					break;
				}
			} else {
				if(!highpSupported && (files[i].indexOf("-relaxed") >= 0 || files[i].indexOf("runtime-string") >= 0)) {
					kha_SystemImpl.gl.shaderSource(s,shader.sources[i]);
					break;
				}
				if(highpSupported && (files[i].indexOf("-relaxed") < 0 || files[i].indexOf("runtime-string") >= 0)) {
					kha_SystemImpl.gl.shaderSource(s,shader.sources[i]);
					break;
				}
			}
		}
		kha_SystemImpl.gl.compileShader(s);
		if(!kha_SystemImpl.gl.getShaderParameter(s,35713)) {
			throw new js__$Boot_HaxeError("Could not compile shader:\n" + kha_SystemImpl.gl.getShaderInfoLog(s));
		}
		shader.shader = s;
	}
	,getConstantLocation: function(name) {
		var location = kha_SystemImpl.gl.getUniformLocation(this.program,name);
		if(location == null) {
			haxe_Log.trace("Warning: Uniform " + name + " not found.",{ fileName : "kha/graphics4/PipelineState.hx", lineNumber : 92, className : "kha.graphics4.PipelineState", methodName : "getConstantLocation"});
		}
		var type = 5126;
		var count = kha_SystemImpl.gl.getProgramParameter(this.program,35718);
		var _g = 0;
		var _g1 = count;
		while(_g < _g1) {
			var i = _g++;
			var info = kha_SystemImpl.gl.getActiveUniform(this.program,i);
			if(info.name == name || info.name == name + "[0]") {
				type = info.type;
				break;
			}
		}
		return new kha_js_graphics4_ConstantLocation(location,type);
	}
	,getTextureUnit: function(name) {
		var index = this.findTexture(name);
		if(index < 0) {
			var location = kha_SystemImpl.gl.getUniformLocation(this.program,name);
			if(location == null) {
				haxe_Log.trace("Warning: Sampler " + name + " not found.",{ fileName : "kha/graphics4/PipelineState.hx", lineNumber : 111, className : "kha.graphics4.PipelineState", methodName : "getTextureUnit"});
			}
			index = this.textures.length;
			this.textureValues.push(location);
			this.textures.push(name);
		}
		return new kha_js_graphics4_TextureUnit(index);
	}
	,findTexture: function(name) {
		var _g = 0;
		var _g1 = this.textures.length;
		while(_g < _g1) {
			var index = _g++;
			if(this.textures[index] == name) {
				return index;
			}
		}
		return -1;
	}
	,__class__: kha_graphics4_PipelineState
});
var kha_graphics4_StencilValue = $hxEnums["kha.graphics4.StencilValue"] = { __ename__ : "kha.graphics4.StencilValue", __constructs__ : ["Dynamic","Static"]
	,Dynamic: {_hx_index:0,__enum__:"kha.graphics4.StencilValue",toString:$estr}
	,Static: ($_=function(value) { return {_hx_index:1,value:value,__enum__:"kha.graphics4.StencilValue",toString:$estr}; },$_.__params__ = ["value"],$_)
};
var kha_graphics4_TessellationControlShader = function(source,file) {
};
$hxClasses["kha.graphics4.TessellationControlShader"] = kha_graphics4_TessellationControlShader;
kha_graphics4_TessellationControlShader.__name__ = "kha.graphics4.TessellationControlShader";
kha_graphics4_TessellationControlShader.prototype = {
	'delete': function() {
	}
	,__class__: kha_graphics4_TessellationControlShader
};
var kha_graphics4_TessellationEvaluationShader = function(source,file) {
};
$hxClasses["kha.graphics4.TessellationEvaluationShader"] = kha_graphics4_TessellationEvaluationShader;
kha_graphics4_TessellationEvaluationShader.__name__ = "kha.graphics4.TessellationEvaluationShader";
kha_graphics4_TessellationEvaluationShader.prototype = {
	'delete': function() {
	}
	,__class__: kha_graphics4_TessellationEvaluationShader
};
var kha_graphics4_TextureUnit = function() { };
$hxClasses["kha.graphics4.TextureUnit"] = kha_graphics4_TextureUnit;
kha_graphics4_TextureUnit.__name__ = "kha.graphics4.TextureUnit";
var kha_graphics4_VertexBuffer = function(vertexCount,structure,usage,instanceDataStepRate,canRead) {
	if(canRead == null) {
		canRead = false;
	}
	if(instanceDataStepRate == null) {
		instanceDataStepRate = 0;
	}
	this.usage = usage;
	this.instanceDataStepRate = instanceDataStepRate;
	this.mySize = vertexCount;
	this.myStride = 0;
	var _g = 0;
	var _g1 = structure.elements;
	while(_g < _g1.length) {
		var element = _g1[_g];
		++_g;
		switch(element.data) {
		case 0:
			this.myStride += 4;
			break;
		case 1:
			this.myStride += 8;
			break;
		case 2:
			this.myStride += 12;
			break;
		case 3:
			this.myStride += 16;
			break;
		case 4:
			this.myStride += 64;
			break;
		case 5:
			this.myStride += 4;
			break;
		case 6:
			this.myStride += 8;
			break;
		}
	}
	this.buffer = kha_SystemImpl.gl.createBuffer();
	var this1 = new Float32Array(vertexCount * this.myStride / 4 | 0);
	this._data = this1;
	this.sizes = [];
	this.offsets = [];
	this.types = [];
	this.sizes[structure.elements.length - 1] = 0;
	this.offsets[structure.elements.length - 1] = 0;
	this.types[structure.elements.length - 1] = 0;
	var offset = 0;
	var index = 0;
	var _g2 = 0;
	var _g3 = structure.elements;
	while(_g2 < _g3.length) {
		var element1 = _g3[_g2];
		++_g2;
		var size;
		var type;
		switch(element1.data) {
		case 0:
			size = 1;
			type = 5126;
			break;
		case 1:
			size = 2;
			type = 5126;
			break;
		case 2:
			size = 3;
			type = 5126;
			break;
		case 3:
			size = 4;
			type = 5126;
			break;
		case 4:
			size = 16;
			type = 5126;
			break;
		case 5:
			size = 2;
			type = 5122;
			break;
		case 6:
			size = 4;
			type = 5122;
			break;
		}
		this.sizes[index] = size;
		this.offsets[index] = offset;
		this.types[index] = type;
		switch(element1.data) {
		case 0:
			offset += 4;
			break;
		case 1:
			offset += 8;
			break;
		case 2:
			offset += 12;
			break;
		case 3:
			offset += 16;
			break;
		case 4:
			offset += 64;
			break;
		case 5:
			offset += 4;
			break;
		case 6:
			offset += 8;
			break;
		}
		++index;
	}
};
$hxClasses["kha.graphics4.VertexBuffer"] = kha_graphics4_VertexBuffer;
kha_graphics4_VertexBuffer.__name__ = "kha.graphics4.VertexBuffer";
kha_graphics4_VertexBuffer.prototype = {
	buffer: null
	,_data: null
	,mySize: null
	,myStride: null
	,sizes: null
	,offsets: null
	,types: null
	,usage: null
	,instanceDataStepRate: null
	,'delete': function() {
		this._data = null;
		kha_SystemImpl.gl.deleteBuffer(this.buffer);
	}
	,lock: function(start,count) {
		if(start == null) {
			start = 0;
		}
		if(count == null) {
			count = this.mySize;
		}
		return this._data.subarray(start * this.stride(),(start + count) * this.stride());
	}
	,lockInt16: function(start,count) {
		var this1 = new Int16Array(this.lock(start,count).buffer);
		return this1;
	}
	,unlock: function(count) {
		kha_SystemImpl.gl.bindBuffer(34962,this.buffer);
		kha_SystemImpl.gl.bufferData(34962,this._data,this.usage == 1 ? 35048 : 35044);
	}
	,stride: function() {
		return this.myStride;
	}
	,count: function() {
		return this.mySize;
	}
	,set: function(offset) {
		var ext = kha_SystemImpl.gl2 ? true : kha_SystemImpl.gl.getExtension("ANGLE_instanced_arrays");
		kha_SystemImpl.gl.bindBuffer(34962,this.buffer);
		var attributesOffset = 0;
		var _g = 0;
		var _g1 = this.sizes.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.sizes[i] > 4) {
				var size = this.sizes[i];
				var addonOffset = 0;
				while(size > 0) {
					kha_SystemImpl.gl.enableVertexAttribArray(offset + attributesOffset);
					kha_SystemImpl.gl.vertexAttribPointer(offset + attributesOffset,4,5126,false,this.myStride,this.offsets[i] + addonOffset);
					if(ext) {
						if(kha_SystemImpl.gl2) {
							kha_SystemImpl.gl.vertexAttribDivisor(offset + attributesOffset,this.instanceDataStepRate);
						} else {
							ext.vertexAttribDivisorANGLE(offset + attributesOffset,this.instanceDataStepRate);
						}
					}
					size -= 4;
					addonOffset += 16;
					++attributesOffset;
				}
			} else {
				var normalized = this.types[i] == 5126 ? false : true;
				kha_SystemImpl.gl.enableVertexAttribArray(offset + attributesOffset);
				kha_SystemImpl.gl.vertexAttribPointer(offset + attributesOffset,this.sizes[i],this.types[i],normalized,this.myStride,this.offsets[i]);
				if(ext) {
					if(kha_SystemImpl.gl2) {
						kha_SystemImpl.gl.vertexAttribDivisor(offset + attributesOffset,this.instanceDataStepRate);
					} else {
						ext.vertexAttribDivisorANGLE(offset + attributesOffset,this.instanceDataStepRate);
					}
				}
				++attributesOffset;
			}
		}
		return attributesOffset;
	}
	,__class__: kha_graphics4_VertexBuffer
};
var kha_graphics4_VertexElement = function(name,data) {
	this.name = name;
	this.data = data;
};
$hxClasses["kha.graphics4.VertexElement"] = kha_graphics4_VertexElement;
kha_graphics4_VertexElement.__name__ = "kha.graphics4.VertexElement";
kha_graphics4_VertexElement.prototype = {
	name: null
	,data: null
	,__class__: kha_graphics4_VertexElement
};
var kha_graphics4_VertexShader = function(sources,files) {
	this.sources = [];
	var _g = 0;
	while(_g < sources.length) {
		var source = sources[_g];
		++_g;
		this.sources.push(source.toString());
	}
	this.type = 35633;
	this.shader = null;
	this.files = files;
};
$hxClasses["kha.graphics4.VertexShader"] = kha_graphics4_VertexShader;
kha_graphics4_VertexShader.__name__ = "kha.graphics4.VertexShader";
kha_graphics4_VertexShader.fromSource = function(source) {
	var shader = new kha_graphics4_VertexShader([],["runtime-string"]);
	shader.sources.push(source);
	return shader;
};
kha_graphics4_VertexShader.prototype = {
	sources: null
	,type: null
	,shader: null
	,files: null
	,'delete': function() {
		kha_SystemImpl.gl.deleteShader(this.shader);
		this.shader = null;
		this.sources = null;
	}
	,__class__: kha_graphics4_VertexShader
};
var kha_graphics4_VertexStructure = function() {
	this.elements = [];
	this.instanced = false;
};
$hxClasses["kha.graphics4.VertexStructure"] = kha_graphics4_VertexStructure;
kha_graphics4_VertexStructure.__name__ = "kha.graphics4.VertexStructure";
kha_graphics4_VertexStructure.prototype = {
	elements: null
	,instanced: null
	,add: function(name,data) {
		this.elements.push(new kha_graphics4_VertexElement(name,data));
	}
	,size: function() {
		return this.elements.length;
	}
	,byteSize: function() {
		var byteSize = 0;
		var _g = 0;
		var _g1 = this.elements.length;
		while(_g < _g1) {
			var i = _g++;
			byteSize += this.dataByteSize(this.elements[i].data);
		}
		return byteSize;
	}
	,dataByteSize: function(data) {
		switch(data) {
		case 0:
			return 4;
		case 1:
			return 8;
		case 2:
			return 12;
		case 3:
			return 16;
		case 4:
			return 64;
		case 5:
			return 4;
		case 6:
			return 8;
		}
	}
	,get: function(index) {
		return this.elements[index];
	}
	,__class__: kha_graphics4_VertexStructure
};
var kha_input_Gamepad = $hx_exports["kha"]["input"]["Gamepad"] = function(index,id) {
	if(id == null) {
		id = "unknown";
	}
	if(index == null) {
		index = 0;
	}
	this.index = index;
	this.axisListeners = [];
	this.buttonListeners = [];
	kha_input_Gamepad.instances[index] = this;
};
$hxClasses["kha.input.Gamepad"] = kha_input_Gamepad;
kha_input_Gamepad.__name__ = "kha.input.Gamepad";
kha_input_Gamepad.get = function(index) {
	if(index == null) {
		index = 0;
	}
	if(index >= kha_input_Gamepad.instances.length) {
		return null;
	}
	return kha_input_Gamepad.instances[index];
};
kha_input_Gamepad.notifyOnConnect = function(connectListener,disconnectListener) {
	if(connectListener != null) {
		kha_input_Gamepad.connectListeners.push(connectListener);
	}
	if(disconnectListener != null) {
		kha_input_Gamepad.disconnectListeners.push(disconnectListener);
	}
};
kha_input_Gamepad.removeConnect = function(connectListener,disconnectListener) {
	if(connectListener != null) {
		HxOverrides.remove(kha_input_Gamepad.connectListeners,connectListener);
	}
	if(disconnectListener != null) {
		HxOverrides.remove(kha_input_Gamepad.disconnectListeners,disconnectListener);
	}
};
kha_input_Gamepad.sendConnectEvent = function(index) {
	kha_input_Gamepad.instances[index].connected = true;
	var _g = 0;
	var _g1 = kha_input_Gamepad.connectListeners;
	while(_g < _g1.length) {
		var listener = _g1[_g];
		++_g;
		listener(index);
	}
};
kha_input_Gamepad.sendDisconnectEvent = function(index) {
	kha_input_Gamepad.instances[index].connected = false;
	var _g = 0;
	var _g1 = kha_input_Gamepad.disconnectListeners;
	while(_g < _g1.length) {
		var listener = _g1[_g];
		++_g;
		listener(index);
	}
};
kha_input_Gamepad.prototype = {
	index: null
	,notify: function(axisListener,buttonListener) {
		if(axisListener != null) {
			this.axisListeners.push(axisListener);
		}
		if(buttonListener != null) {
			this.buttonListeners.push(buttonListener);
		}
	}
	,remove: function(axisListener,buttonListener) {
		if(axisListener != null) {
			HxOverrides.remove(this.axisListeners,axisListener);
		}
		if(buttonListener != null) {
			HxOverrides.remove(this.buttonListeners,buttonListener);
		}
	}
	,axisListeners: null
	,buttonListeners: null
	,id: null
	,connected: null
	,get_id: function() {
		return kha_SystemImpl.getGamepadId(this.index);
	}
	,sendAxisEvent: function(axis,value) {
		var _g = 0;
		var _g1 = this.axisListeners;
		while(_g < _g1.length) {
			var listener = _g1[_g];
			++_g;
			listener(axis,value);
		}
	}
	,sendButtonEvent: function(button,value) {
		var _g = 0;
		var _g1 = this.buttonListeners;
		while(_g < _g1.length) {
			var listener = _g1[_g];
			++_g;
			listener(button,value);
		}
	}
	,__class__: kha_input_Gamepad
	,__properties__: {get_id:"get_id"}
};
var kha_input_BlockInterventions = $hxEnums["kha.input.BlockInterventions"] = { __ename__ : "kha.input.BlockInterventions", __constructs__ : ["Default","Full","None","Custom"]
	,Default: {_hx_index:0,__enum__:"kha.input.BlockInterventions",toString:$estr}
	,Full: {_hx_index:1,__enum__:"kha.input.BlockInterventions",toString:$estr}
	,None: {_hx_index:2,__enum__:"kha.input.BlockInterventions",toString:$estr}
	,Custom: ($_=function(func) { return {_hx_index:3,func:func,__enum__:"kha.input.BlockInterventions",toString:$estr}; },$_.__params__ = ["func"],$_)
};
var kha_netsync_Controller = function() {
	this.__id = kha_netsync_ControllerBuilder.nextId++;
	this._inputBuffer = new haxe_io_Bytes(new ArrayBuffer(1));
};
$hxClasses["kha.netsync.Controller"] = kha_netsync_Controller;
kha_netsync_Controller.__name__ = "kha.netsync.Controller";
kha_netsync_Controller.prototype = {
	__id: null
	,_inputBufferIndex: null
	,_inputBuffer: null
	,_id: function() {
		return this.__id;
	}
	,_receive: function(bytes) {
	}
	,__class__: kha_netsync_Controller
};
var kha_input_Keyboard = $hx_exports["kha"]["input"]["Keyboard"] = function() {
	kha_netsync_Controller.call(this);
	this.downListeners = [];
	this.upListeners = [];
	this.pressListeners = [];
	kha_input_Keyboard.instance = this;
};
$hxClasses["kha.input.Keyboard"] = kha_input_Keyboard;
kha_input_Keyboard.__name__ = "kha.input.Keyboard";
kha_input_Keyboard.get = function(num) {
	if(num == null) {
		num = 0;
	}
	return kha_SystemImpl.getKeyboard(num);
};
kha_input_Keyboard.disableSystemInterventions = function(behavior) {
	kha_input_Keyboard.keyBehavior = behavior;
};
kha_input_Keyboard.__super__ = kha_netsync_Controller;
kha_input_Keyboard.prototype = $extend(kha_netsync_Controller.prototype,{
	notify: function(downListener,upListener,pressListener) {
		if(downListener != null) {
			this.downListeners.push(downListener);
		}
		if(upListener != null) {
			this.upListeners.push(upListener);
		}
		if(pressListener != null) {
			this.pressListeners.push(pressListener);
		}
	}
	,remove: function(downListener,upListener,pressListener) {
		if(downListener != null) {
			HxOverrides.remove(this.downListeners,downListener);
		}
		if(upListener != null) {
			HxOverrides.remove(this.upListeners,upListener);
		}
		if(pressListener != null) {
			HxOverrides.remove(this.pressListeners,pressListener);
		}
	}
	,show: function() {
	}
	,hide: function() {
	}
	,downListeners: null
	,upListeners: null
	,pressListeners: null
	,sendDownEvent: function(code) {
		if(kha_netsync_Session.the() != null) {
			var bytes = new haxe_io_Bytes(new ArrayBuffer(5));
			bytes.setInt32(0,0);
			bytes.b[4] = code;
			kha_netsync_Session.the().sendControllerUpdate(this._id(),bytes);
		}
		var _g = 0;
		var _g1 = this.downListeners;
		while(_g < _g1.length) {
			var listener = _g1[_g];
			++_g;
			listener(code);
		}
	}
	,sendUpEvent: function(code) {
		if(kha_netsync_Session.the() != null) {
			var bytes = new haxe_io_Bytes(new ArrayBuffer(5));
			bytes.setInt32(0,1);
			bytes.b[4] = code;
			kha_netsync_Session.the().sendControllerUpdate(this._id(),bytes);
		}
		var _g = 0;
		var _g1 = this.upListeners;
		while(_g < _g1.length) {
			var listener = _g1[_g];
			++_g;
			listener(code);
		}
	}
	,sendPressEvent: function(char) {
		if(kha_netsync_Session.the() != null) {
			var bytes = new haxe_io_Bytes(new ArrayBuffer(5));
			bytes.setInt32(0,2);
			bytes.b[4] = HxOverrides.cca(char,0);
			kha_netsync_Session.the().sendControllerUpdate(this._id(),bytes);
		}
		var _g = 0;
		var _g1 = this.pressListeners;
		while(_g < _g1.length) {
			var listener = _g1[_g];
			++_g;
			listener(char);
		}
	}
	,_receive: function(bytes) {
		var funcindex = bytes.getInt32(0);
		if(funcindex == 0) {
			var input0 = bytes.b[4];
			this.sendDownEvent(input0);
			return;
		}
		if(funcindex == 1) {
			var input01 = bytes.b[4];
			this.sendUpEvent(input01);
			return;
		}
		if(funcindex == 2) {
			var code = bytes.b[4];
			var input02 = String.fromCodePoint(code);
			this.sendPressEvent(input02);
			return;
		}
	}
	,__class__: kha_input_Keyboard
});
var kha_input_Mouse = $hx_exports["kha"]["input"]["Mouse"] = function() {
	kha_netsync_Controller.call(this);
	kha_input_Mouse.instance = this;
};
$hxClasses["kha.input.Mouse"] = kha_input_Mouse;
kha_input_Mouse.__name__ = "kha.input.Mouse";
kha_input_Mouse.get = function(num) {
	if(num == null) {
		num = 0;
	}
	return kha_SystemImpl.getMouse(num);
};
kha_input_Mouse.__super__ = kha_netsync_Controller;
kha_input_Mouse.prototype = $extend(kha_netsync_Controller.prototype,{
	notify: function(downListener,upListener,moveListener,wheelListener,leaveListener) {
		this.notifyWindowed(0,downListener,upListener,moveListener,wheelListener,leaveListener);
	}
	,remove: function(downListener,upListener,moveListener,wheelListener,leaveListener) {
		this.removeWindowed(0,downListener,upListener,moveListener,wheelListener,leaveListener);
	}
	,notifyWindowed: function(windowId,downListener,upListener,moveListener,wheelListener,leaveListener) {
		if(downListener != null) {
			if(this.windowDownListeners == null) {
				this.windowDownListeners = [];
			}
			while(this.windowDownListeners.length <= windowId) this.windowDownListeners.push([]);
			this.windowDownListeners[windowId].push(downListener);
		}
		if(upListener != null) {
			if(this.windowUpListeners == null) {
				this.windowUpListeners = [];
			}
			while(this.windowUpListeners.length <= windowId) this.windowUpListeners.push([]);
			this.windowUpListeners[windowId].push(upListener);
		}
		if(moveListener != null) {
			if(this.windowMoveListeners == null) {
				this.windowMoveListeners = [];
			}
			while(this.windowMoveListeners.length <= windowId) this.windowMoveListeners.push([]);
			this.windowMoveListeners[windowId].push(moveListener);
		}
		if(wheelListener != null) {
			if(this.windowWheelListeners == null) {
				this.windowWheelListeners = [];
			}
			while(this.windowWheelListeners.length <= windowId) this.windowWheelListeners.push([]);
			this.windowWheelListeners[windowId].push(wheelListener);
		}
		if(leaveListener != null) {
			if(this.windowLeaveListeners == null) {
				this.windowLeaveListeners = [];
			}
			while(this.windowLeaveListeners.length <= windowId) this.windowLeaveListeners.push([]);
			this.windowLeaveListeners[windowId].push(leaveListener);
		}
	}
	,removeWindowed: function(windowId,downListener,upListener,moveListener,wheelListener,leaveListener) {
		if(downListener != null) {
			if(this.windowDownListeners != null) {
				if(windowId < this.windowDownListeners.length) {
					HxOverrides.remove(this.windowDownListeners[windowId],downListener);
				} else {
					haxe_Log.trace("no downListeners for window \"" + windowId + "\" are registered",{ fileName : "kha/input/Mouse.hx", lineNumber : 110, className : "kha.input.Mouse", methodName : "removeWindowed"});
				}
			} else {
				haxe_Log.trace("no downListeners were ever registered",{ fileName : "kha/input/Mouse.hx", lineNumber : 114, className : "kha.input.Mouse", methodName : "removeWindowed"});
			}
		}
		if(upListener != null) {
			if(this.windowUpListeners != null) {
				if(windowId < this.windowUpListeners.length) {
					HxOverrides.remove(this.windowUpListeners[windowId],upListener);
				} else {
					haxe_Log.trace("no upListeners for window \"" + windowId + "\" are registered",{ fileName : "kha/input/Mouse.hx", lineNumber : 124, className : "kha.input.Mouse", methodName : "removeWindowed"});
				}
			} else {
				haxe_Log.trace("no upListeners were ever registered",{ fileName : "kha/input/Mouse.hx", lineNumber : 128, className : "kha.input.Mouse", methodName : "removeWindowed"});
			}
		}
		if(moveListener != null) {
			if(this.windowMoveListeners != null) {
				if(windowId < this.windowMoveListeners.length) {
					HxOverrides.remove(this.windowMoveListeners[windowId],moveListener);
				} else {
					haxe_Log.trace("no moveListeners for window \"" + windowId + "\" are registered",{ fileName : "kha/input/Mouse.hx", lineNumber : 138, className : "kha.input.Mouse", methodName : "removeWindowed"});
				}
			} else {
				haxe_Log.trace("no moveListeners were ever registered",{ fileName : "kha/input/Mouse.hx", lineNumber : 142, className : "kha.input.Mouse", methodName : "removeWindowed"});
			}
		}
		if(wheelListener != null) {
			if(this.windowWheelListeners != null) {
				if(windowId < this.windowWheelListeners.length) {
					HxOverrides.remove(this.windowWheelListeners[windowId],wheelListener);
				} else {
					haxe_Log.trace("no wheelListeners for window \"" + windowId + "\" are registered",{ fileName : "kha/input/Mouse.hx", lineNumber : 152, className : "kha.input.Mouse", methodName : "removeWindowed"});
				}
			} else {
				haxe_Log.trace("no wheelListeners were ever registered",{ fileName : "kha/input/Mouse.hx", lineNumber : 156, className : "kha.input.Mouse", methodName : "removeWindowed"});
			}
		}
		if(leaveListener != null) {
			if(this.windowLeaveListeners != null) {
				if(windowId < this.windowLeaveListeners.length) {
					HxOverrides.remove(this.windowLeaveListeners[windowId],leaveListener);
				} else {
					haxe_Log.trace("no leaveListeners for window \"" + windowId + "\" are registered",{ fileName : "kha/input/Mouse.hx", lineNumber : 166, className : "kha.input.Mouse", methodName : "removeWindowed"});
				}
			} else {
				haxe_Log.trace("no leaveListeners were ever registered",{ fileName : "kha/input/Mouse.hx", lineNumber : 170, className : "kha.input.Mouse", methodName : "removeWindowed"});
			}
		}
	}
	,lock: function() {
	}
	,unlock: function() {
	}
	,canLock: function() {
		return false;
	}
	,isLocked: function() {
		return false;
	}
	,notifyOnLockChange: function(change,error) {
	}
	,removeFromLockChange: function(change,error) {
	}
	,hideSystemCursor: function() {
	}
	,showSystemCursor: function() {
	}
	,windowDownListeners: null
	,windowUpListeners: null
	,windowMoveListeners: null
	,windowWheelListeners: null
	,windowLeaveListeners: null
	,sendLeaveEvent: function(windowId) {
		if(kha_netsync_Session.the() != null) {
			var bytes = new haxe_io_Bytes(new ArrayBuffer(8));
			bytes.setInt32(0,0);
			bytes.setInt32(4,windowId);
			kha_netsync_Session.the().sendControllerUpdate(this._id(),bytes);
		}
		if(this.windowLeaveListeners != null) {
			var _g = 0;
			var _g1 = this.windowLeaveListeners[windowId];
			while(_g < _g1.length) {
				var listener = _g1[_g];
				++_g;
				listener();
			}
		}
	}
	,sendDownEvent: function(windowId,button,x,y) {
		if(kha_netsync_Session.the() != null) {
			var bytes = new haxe_io_Bytes(new ArrayBuffer(20));
			bytes.setInt32(0,1);
			bytes.setInt32(4,windowId);
			bytes.setInt32(8,button);
			bytes.setInt32(12,x);
			bytes.setInt32(16,y);
			kha_netsync_Session.the().sendControllerUpdate(this._id(),bytes);
		}
		if(this.windowDownListeners != null) {
			var _g = 0;
			var _g1 = this.windowDownListeners[windowId];
			while(_g < _g1.length) {
				var listener = _g1[_g];
				++_g;
				listener(button,x,y);
			}
		}
	}
	,sendUpEvent: function(windowId,button,x,y) {
		if(kha_netsync_Session.the() != null) {
			var bytes = new haxe_io_Bytes(new ArrayBuffer(20));
			bytes.setInt32(0,2);
			bytes.setInt32(4,windowId);
			bytes.setInt32(8,button);
			bytes.setInt32(12,x);
			bytes.setInt32(16,y);
			kha_netsync_Session.the().sendControllerUpdate(this._id(),bytes);
		}
		if(this.windowUpListeners != null) {
			var _g = 0;
			var _g1 = this.windowUpListeners[windowId];
			while(_g < _g1.length) {
				var listener = _g1[_g];
				++_g;
				listener(button,x,y);
			}
		}
	}
	,sendMoveEvent: function(windowId,x,y,movementX,movementY) {
		if(kha_netsync_Session.the() != null) {
			var bytes = new haxe_io_Bytes(new ArrayBuffer(24));
			bytes.setInt32(0,3);
			bytes.setInt32(4,windowId);
			bytes.setInt32(8,x);
			bytes.setInt32(12,y);
			bytes.setInt32(16,movementX);
			bytes.setInt32(20,movementY);
			kha_netsync_Session.the().sendControllerUpdate(this._id(),bytes);
		}
		if(this.windowMoveListeners != null) {
			var _g = 0;
			var _g1 = this.windowMoveListeners[windowId];
			while(_g < _g1.length) {
				var listener = _g1[_g];
				++_g;
				listener(x,y,movementX,movementY);
			}
		}
	}
	,sendWheelEvent: function(windowId,delta) {
		if(kha_netsync_Session.the() != null) {
			var bytes = new haxe_io_Bytes(new ArrayBuffer(12));
			bytes.setInt32(0,4);
			bytes.setInt32(4,windowId);
			bytes.setInt32(8,delta);
			kha_netsync_Session.the().sendControllerUpdate(this._id(),bytes);
		}
		if(this.windowWheelListeners != null) {
			var _g = 0;
			var _g1 = this.windowWheelListeners[windowId];
			while(_g < _g1.length) {
				var listener = _g1[_g];
				++_g;
				listener(delta);
			}
		}
	}
	,_receive: function(bytes) {
		var funcindex = bytes.getInt32(0);
		if(funcindex == 0) {
			var input0 = bytes.getInt32(4);
			this.sendLeaveEvent(input0);
			return;
		}
		if(funcindex == 1) {
			var input01 = bytes.getInt32(4);
			var input1 = bytes.getInt32(8);
			var input2 = bytes.getInt32(12);
			var input3 = bytes.getInt32(16);
			this.sendDownEvent(input01,input1,input2,input3);
			return;
		}
		if(funcindex == 2) {
			var input02 = bytes.getInt32(4);
			var input11 = bytes.getInt32(8);
			var input21 = bytes.getInt32(12);
			var input31 = bytes.getInt32(16);
			this.sendUpEvent(input02,input11,input21,input31);
			return;
		}
		if(funcindex == 3) {
			var input03 = bytes.getInt32(4);
			var input12 = bytes.getInt32(8);
			var input22 = bytes.getInt32(12);
			var input32 = bytes.getInt32(16);
			var input4 = bytes.getInt32(20);
			this.sendMoveEvent(input03,input12,input22,input32,input4);
			return;
		}
		if(funcindex == 4) {
			var input04 = bytes.getInt32(4);
			var input13 = bytes.getInt32(8);
			this.sendWheelEvent(input04,input13);
			return;
		}
	}
	,__class__: kha_input_Mouse
});
var kha_input_MouseImpl = function() {
	kha_input_Mouse.call(this);
};
$hxClasses["kha.input.MouseImpl"] = kha_input_MouseImpl;
kha_input_MouseImpl.__name__ = "kha.input.MouseImpl";
kha_input_MouseImpl.__super__ = kha_input_Mouse;
kha_input_MouseImpl.prototype = $extend(kha_input_Mouse.prototype,{
	lock: function() {
		kha_SystemImpl.lockMouse();
	}
	,unlock: function() {
		kha_SystemImpl.unlockMouse();
	}
	,canLock: function() {
		return kha_SystemImpl.canLockMouse();
	}
	,isLocked: function() {
		return kha_SystemImpl.isMouseLocked();
	}
	,notifyOnLockChange: function(func,error) {
		kha_SystemImpl.notifyOfMouseLockChange(func,error);
	}
	,removeFromLockChange: function(func,error) {
		kha_SystemImpl.removeFromMouseLockChange(func,error);
	}
	,hideSystemCursor: function() {
		kha_SystemImpl.khanvas.style.cursor = "none";
	}
	,showSystemCursor: function() {
		kha_SystemImpl.khanvas.style.cursor = "default";
	}
	,_receive: function(bytes) {
		var funcindex = bytes.getInt32(0);
	}
	,__class__: kha_input_MouseImpl
});
var kha_input_Pen = function() {
	kha_input_Pen.instance = this;
};
$hxClasses["kha.input.Pen"] = kha_input_Pen;
kha_input_Pen.__name__ = "kha.input.Pen";
kha_input_Pen.get = function(num) {
	if(num == null) {
		num = 0;
	}
	return kha_SystemImpl.getPen(num);
};
kha_input_Pen.prototype = {
	notify: function(downListener,upListener,moveListener) {
		this.notifyWindowed(0,downListener,upListener,moveListener);
	}
	,remove: function(downListener,upListener,moveListener) {
		this.removeWindowed(0,downListener,upListener,moveListener);
	}
	,notifyWindowed: function(windowId,downListener,upListener,moveListener) {
		if(downListener != null) {
			if(this.windowDownListeners == null) {
				this.windowDownListeners = [];
			}
			while(this.windowDownListeners.length <= windowId) this.windowDownListeners.push([]);
			this.windowDownListeners[windowId].push(downListener);
		}
		if(upListener != null) {
			if(this.windowUpListeners == null) {
				this.windowUpListeners = [];
			}
			while(this.windowUpListeners.length <= windowId) this.windowUpListeners.push([]);
			this.windowUpListeners[windowId].push(upListener);
		}
		if(moveListener != null) {
			if(this.windowMoveListeners == null) {
				this.windowMoveListeners = [];
			}
			while(this.windowMoveListeners.length <= windowId) this.windowMoveListeners.push([]);
			this.windowMoveListeners[windowId].push(moveListener);
		}
	}
	,removeWindowed: function(windowId,downListener,upListener,moveListener) {
		if(downListener != null && this.windowDownListeners != null) {
			if(windowId < this.windowDownListeners.length) {
				HxOverrides.remove(this.windowDownListeners[windowId],downListener);
			}
		}
		if(upListener != null && this.windowUpListeners != null) {
			if(windowId < this.windowUpListeners.length) {
				HxOverrides.remove(this.windowUpListeners[windowId],upListener);
			}
		}
		if(moveListener != null && this.windowMoveListeners != null) {
			if(windowId < this.windowMoveListeners.length) {
				HxOverrides.remove(this.windowMoveListeners[windowId],moveListener);
			}
		}
	}
	,windowDownListeners: null
	,windowUpListeners: null
	,windowMoveListeners: null
	,sendDownEvent: function(windowId,x,y,pressure) {
		if(this.windowDownListeners != null) {
			var _g = 0;
			var _g1 = this.windowDownListeners[windowId];
			while(_g < _g1.length) {
				var listener = _g1[_g];
				++_g;
				listener(x,y,pressure);
			}
		}
	}
	,sendUpEvent: function(windowId,x,y,pressure) {
		if(this.windowUpListeners != null) {
			var _g = 0;
			var _g1 = this.windowUpListeners[windowId];
			while(_g < _g1.length) {
				var listener = _g1[_g];
				++_g;
				listener(x,y,pressure);
			}
		}
	}
	,sendMoveEvent: function(windowId,x,y,pressure) {
		if(this.windowMoveListeners != null) {
			var _g = 0;
			var _g1 = this.windowMoveListeners[windowId];
			while(_g < _g1.length) {
				var listener = _g1[_g];
				++_g;
				listener(x,y,pressure);
			}
		}
	}
	,__class__: kha_input_Pen
};
var kha_input_Sensor = function() {
	this.listeners = [];
};
$hxClasses["kha.input.Sensor"] = kha_input_Sensor;
kha_input_Sensor.__name__ = "kha.input.Sensor";
kha_input_Sensor.get = function(type) {
	switch(type._hx_index) {
	case 0:
		return kha_input_Sensor.accelerometer;
	case 1:
		return kha_input_Sensor.gyroscope;
	}
};
kha_input_Sensor._changed = function(type,x,y,z) {
	var sensor = kha_input_Sensor.get(type == 0 ? kha_input_SensorType.Accelerometer : kha_input_SensorType.Gyroscope);
	var _g = 0;
	var _g1 = sensor.listeners;
	while(_g < _g1.length) {
		var listener = _g1[_g];
		++_g;
		listener(x,y,z);
	}
};
kha_input_Sensor.prototype = {
	listeners: null
	,notify: function(listener) {
		if(!kha_input_Sensor.isInited) {
			kha_SystemImpl.initSensor();
			kha_input_Sensor.isInited = true;
		}
		this.listeners.push(listener);
	}
	,__class__: kha_input_Sensor
};
var kha_input_SensorType = $hxEnums["kha.input.SensorType"] = { __ename__ : "kha.input.SensorType", __constructs__ : ["Accelerometer","Gyroscope"]
	,Accelerometer: {_hx_index:0,__enum__:"kha.input.SensorType",toString:$estr}
	,Gyroscope: {_hx_index:1,__enum__:"kha.input.SensorType",toString:$estr}
};
var kha_input_Surface = $hx_exports["kha"]["input"]["Surface"] = function() {
	this.touchStartListeners = [];
	this.touchEndListeners = [];
	this.moveListeners = [];
	kha_input_Surface.instance = this;
};
$hxClasses["kha.input.Surface"] = kha_input_Surface;
kha_input_Surface.__name__ = "kha.input.Surface";
kha_input_Surface.get = function(num) {
	if(num == null) {
		num = 0;
	}
	if(num != 0) {
		return null;
	}
	return kha_input_Surface.instance;
};
kha_input_Surface.prototype = {
	notify: function(touchStartListener,touchEndListener,moveListener) {
		if(touchStartListener != null) {
			this.touchStartListeners.push(touchStartListener);
		}
		if(touchEndListener != null) {
			this.touchEndListeners.push(touchEndListener);
		}
		if(moveListener != null) {
			this.moveListeners.push(moveListener);
		}
	}
	,remove: function(touchStartListener,touchEndListener,moveListener) {
		if(touchStartListener != null) {
			HxOverrides.remove(this.touchStartListeners,touchStartListener);
		}
		if(touchEndListener != null) {
			HxOverrides.remove(this.touchEndListeners,touchEndListener);
		}
		if(moveListener != null) {
			HxOverrides.remove(this.moveListeners,moveListener);
		}
	}
	,touchStartListeners: null
	,touchEndListeners: null
	,moveListeners: null
	,sendTouchStartEvent: function(index,x,y) {
		var _g = 0;
		var _g1 = this.touchStartListeners;
		while(_g < _g1.length) {
			var listener = _g1[_g];
			++_g;
			listener(index,x,y);
		}
	}
	,sendTouchEndEvent: function(index,x,y) {
		var _g = 0;
		var _g1 = this.touchEndListeners;
		while(_g < _g1.length) {
			var listener = _g1[_g];
			++_g;
			listener(index,x,y);
		}
	}
	,sendMoveEvent: function(index,x,y) {
		var _g = 0;
		var _g1 = this.moveListeners;
		while(_g < _g1.length) {
			var listener = _g1[_g];
			++_g;
			listener(index,x,y);
		}
	}
	,__class__: kha_input_Surface
};
var kha_internal_BytesBlob = function(bytes) {
	this.bytes = bytes;
};
$hxClasses["kha.internal.BytesBlob"] = kha_internal_BytesBlob;
kha_internal_BytesBlob.__name__ = "kha.internal.BytesBlob";
kha_internal_BytesBlob.__interfaces__ = [kha_Resource];
kha_internal_BytesBlob.fromBytes = function(bytes) {
	return new kha_internal_BytesBlob(bytes);
};
kha_internal_BytesBlob.alloc = function(size) {
	return new kha_internal_BytesBlob(new haxe_io_Bytes(new ArrayBuffer(size)));
};
kha_internal_BytesBlob.readF32 = function(i) {
	var sign = (i & -2147483648) == 0 ? 1 : -1;
	var exp = i >> 23 & 255;
	var man = i & 8388607;
	switch(exp) {
	case 0:
		return 0.0;
	case 255:
		if(man != 0) {
			return NaN;
		} else if(sign > 0) {
			return Infinity;
		} else {
			return -Infinity;
		}
		break;
	default:
		return sign * ((man + 8388608) / 8388608.0) * Math.pow(2,exp - 127);
	}
};
kha_internal_BytesBlob.bit = function(value,position) {
	var b = (value >>> position & 1) == 1;
	if(b) {
		var a = 3;
		++a;
		return true;
	} else {
		var c = 4;
		--c;
		return false;
	}
};
kha_internal_BytesBlob.toText = function(chars,length) {
	var value = "";
	var _g = 0;
	var _g1 = length;
	while(_g < _g1) {
		var i = _g++;
		value += String.fromCodePoint(chars[i]);
	}
	return value;
};
kha_internal_BytesBlob.prototype = {
	bytes: null
	,sub: function(start,length) {
		return new kha_internal_BytesBlob(this.bytes.sub(start,length));
	}
	,length: null
	,get_length: function() {
		return this.bytes.length;
	}
	,writeU8: function(position,value) {
		this.bytes.b[position] = value;
	}
	,readU8: function(position) {
		var byte = this.bytes.b[position];
		++position;
		return byte;
	}
	,readS8: function(position) {
		var byte = this.bytes.b[position];
		++position;
		var sign = (byte & 128) == 0 ? 1 : -1;
		byte &= 127;
		return sign * byte;
	}
	,readU16BE: function(position) {
		var first = this.bytes.b[position];
		var second = this.bytes.b[position + 1];
		position += 2;
		return first * 256 + second;
	}
	,readU16LE: function(position) {
		var first = this.bytes.b[position];
		var second = this.bytes.b[position + 1];
		position += 2;
		return second * 256 + first;
	}
	,readU32LE: function(position) {
		var fourth = this.bytes.b[position];
		var third = this.bytes.b[position + 1];
		var second = this.bytes.b[position + 2];
		var first = this.bytes.b[position + 3];
		position += 4;
		return fourth + third * 256 + second * 256 * 256 + first * 256 * 256 * 256;
	}
	,readU32BE: function(position) {
		var fourth = this.bytes.b[position];
		var third = this.bytes.b[position + 1];
		var second = this.bytes.b[position + 2];
		var first = this.bytes.b[position + 3];
		position += 4;
		return first + second * 256 + third * 256 * 256 + fourth * 256 * 256 * 256;
	}
	,readS16BE: function(position) {
		var first = this.bytes.b[position];
		var second = this.bytes.b[position + 1];
		position += 2;
		var sign = (first & 128) == 0 ? 1 : -1;
		first &= 127;
		if(sign == -1) {
			return -32767 + first * 256 + second;
		} else {
			return first * 256 + second;
		}
	}
	,readS16LE: function(position) {
		var first = this.bytes.b[position];
		var second = this.bytes.b[position + 1];
		var sign = (second & 128) == 0 ? 1 : -1;
		second &= 127;
		position += 2;
		if(sign == -1) {
			return -32767 + second * 256 + first;
		} else {
			return second * 256 + first;
		}
	}
	,readS32LE: function(position) {
		var fourth = this.bytes.b[position];
		var third = this.bytes.b[position + 1];
		var second = this.bytes.b[position + 2];
		var first = this.bytes.b[position + 3];
		var sign = (first & 128) == 0 ? 1 : -1;
		first &= 127;
		position += 4;
		if(sign == -1) {
			return -2147483647 + fourth + third * 256 + second * 256 * 256 + first * 256 * 256 * 256;
		} else {
			return fourth + third * 256 + second * 256 * 256 + first * 256 * 256 * 256;
		}
	}
	,readS32BE: function(position) {
		var fourth = this.bytes.b[position];
		var third = this.bytes.b[position + 1];
		var second = this.bytes.b[position + 2];
		var first = this.bytes.b[position + 3];
		var sign = (fourth & 128) == 0 ? 1 : -1;
		fourth &= 127;
		position += 4;
		if(sign == -1) {
			return -2147483647 + first + second * 256 + third * 256 * 256 + fourth * 256 * 256 * 256;
		}
		return first + second * 256 + third * 256 * 256 + fourth * 256 * 256 * 256;
	}
	,readF32LE: function(position) {
		return kha_internal_BytesBlob.readF32(this.readS32LE(position));
	}
	,readF32BE: function(position) {
		return kha_internal_BytesBlob.readF32(this.readS32BE(position));
	}
	,toString: function() {
		return this.bytes.toString();
	}
	,readUtf8String: function() {
		return this.bytes.toString();
	}
	,toBytes: function() {
		return this.bytes;
	}
	,unload: function() {
		this.bytes = null;
	}
	,__class__: kha_internal_BytesBlob
	,__properties__: {get_length:"get_length"}
};
var kha_internal_HdrFormat = function() {
};
$hxClasses["kha.internal.HdrFormat"] = kha_internal_HdrFormat;
kha_internal_HdrFormat.__name__ = "kha.internal.HdrFormat";
kha_internal_HdrFormat.readBuf = function(buf) {
	var bytesRead = 0;
	while(true) {
		buf[bytesRead++] = kha_internal_HdrFormat.buffer[kha_internal_HdrFormat.fileOffset] & 255;
		if(!(++kha_internal_HdrFormat.fileOffset < kha_internal_HdrFormat.bufferLength && bytesRead < buf.length)) {
			break;
		}
	}
	return bytesRead;
};
kha_internal_HdrFormat.readBufOffset = function(buf,offset,length) {
	var bytesRead = 0;
	while(true) {
		buf[offset + bytesRead++] = kha_internal_HdrFormat.buffer[kha_internal_HdrFormat.fileOffset] & 255;
		if(!(++kha_internal_HdrFormat.fileOffset < kha_internal_HdrFormat.bufferLength && bytesRead < length)) {
			break;
		}
	}
	return bytesRead;
};
kha_internal_HdrFormat.readPixelsRaw = function(buffer,data,offset,numpixels) {
	var numExpected = 4 * numpixels;
	var numRead = kha_internal_HdrFormat.readBufOffset(data,offset,numExpected);
	if(numRead < numExpected) {
		haxe_Log.trace("Error reading raw pixels: got " + numRead + " bytes, expected " + numExpected,{ fileName : "kha/internal/HdrFormat.hx", lineNumber : 43, className : "kha.internal.HdrFormat", methodName : "readPixelsRaw"});
		return;
	}
};
kha_internal_HdrFormat.readPixelsRawRLE = function(buffer,data,offset,scanline_width,num_scanlines) {
	var this1 = new Uint8Array(4);
	var rgbe = this1;
	var scanline_buffer = null;
	var ptr;
	var ptr_end;
	var count;
	var this2 = new Uint8Array(2);
	var buf = this2;
	var bufferLength = buffer.length;
	while(num_scanlines > 0) {
		if(kha_internal_HdrFormat.readBuf(rgbe) < rgbe.length) {
			haxe_Log.trace("Error reading bytes: expected " + rgbe.length,{ fileName : "kha/internal/HdrFormat.hx", lineNumber : 59, className : "kha.internal.HdrFormat", methodName : "readPixelsRawRLE"});
			return;
		}
		if(rgbe[0] != 2 || rgbe[1] != 2 || (rgbe[2] & 128) != 0) {
			data[offset++] = rgbe[0] & 255;
			data[offset++] = rgbe[1] & 255;
			data[offset++] = rgbe[2] & 255;
			data[offset++] = rgbe[3] & 255;
			kha_internal_HdrFormat.readPixelsRaw(buffer,data,offset,scanline_width * num_scanlines - 1);
			return;
		}
		if(((rgbe[2] & 255) << 8 | rgbe[3] & 255) != scanline_width) {
			haxe_Log.trace("Wrong scanline width " + ((rgbe[2] & 255) << 8 | rgbe[3] & 255) + ", expected " + scanline_width,{ fileName : "kha/internal/HdrFormat.hx", lineNumber : 74, className : "kha.internal.HdrFormat", methodName : "readPixelsRawRLE"});
			return;
		}
		if(scanline_buffer == null) {
			var this3 = new Uint8Array(4 * scanline_width);
			scanline_buffer = this3;
		}
		ptr = 0;
		var _g = 0;
		while(_g < 4) {
			var i = _g++;
			ptr_end = (i + 1) * scanline_width;
			while(ptr < ptr_end) {
				if(kha_internal_HdrFormat.readBuf(buf) < buf.length) {
					haxe_Log.trace("Error reading 2-byte buffer",{ fileName : "kha/internal/HdrFormat.hx", lineNumber : 88, className : "kha.internal.HdrFormat", methodName : "readPixelsRawRLE"});
					return;
				}
				if((buf[0] & 255) > 128) {
					count = (buf[0] & 255) - 128;
					if(count == 0 || count > ptr_end - ptr) {
						haxe_Log.trace("Bad scanline data",{ fileName : "kha/internal/HdrFormat.hx", lineNumber : 95, className : "kha.internal.HdrFormat", methodName : "readPixelsRawRLE"});
						return;
					}
					while(count-- > 0) scanline_buffer[ptr++] = buf[1] & 255;
				} else {
					count = buf[0] & 255;
					if(count == 0 || count > ptr_end - ptr) {
						haxe_Log.trace("Bad scanline data",{ fileName : "kha/internal/HdrFormat.hx", lineNumber : 106, className : "kha.internal.HdrFormat", methodName : "readPixelsRawRLE"});
						return;
					}
					scanline_buffer[ptr++] = buf[1] & 255;
					if(--count > 0) {
						if(kha_internal_HdrFormat.readBufOffset(scanline_buffer,ptr,count) < count) {
							haxe_Log.trace("Error reading non-run data",{ fileName : "kha/internal/HdrFormat.hx", lineNumber : 112, className : "kha.internal.HdrFormat", methodName : "readPixelsRawRLE"});
							return;
						}
						ptr += count;
					}
				}
			}
		}
		var _g1 = 0;
		var _g2 = scanline_width;
		while(_g1 < _g2) {
			var i1 = _g1++;
			data[offset] = scanline_buffer[i1] & 255;
			data[offset + 1] = scanline_buffer[i1 + scanline_width] & 255;
			data[offset + 2] = scanline_buffer[i1 + 2 * scanline_width] & 255;
			data[offset + 3] = scanline_buffer[i1 + 3 * scanline_width] & 255;
			offset += 4;
		}
		--num_scanlines;
	}
};
kha_internal_HdrFormat.readLine = function() {
	var buf = "";
	while(true) {
		var b = kha_internal_HdrFormat.buffer[kha_internal_HdrFormat.fileOffset];
		if(b == 10) {
			++kha_internal_HdrFormat.fileOffset;
			break;
		}
		buf += String.fromCodePoint(b);
		if(!(++kha_internal_HdrFormat.fileOffset < kha_internal_HdrFormat.bufferLength)) {
			break;
		}
	}
	return buf;
};
kha_internal_HdrFormat.parse = function(bytes) {
	kha_internal_HdrFormat.buffer = haxe_io__$UInt8Array_UInt8Array_$Impl_$.fromBytes(bytes);
	kha_internal_HdrFormat.bufferLength = kha_internal_HdrFormat.buffer.length;
	kha_internal_HdrFormat.fileOffset = 0;
	var width = 0;
	var height = 0;
	var exposure = 1.0;
	var gamma = 1.0;
	var rle = false;
	var _g = 0;
	while(_g < 20) {
		var i = _g++;
		var line = kha_internal_HdrFormat.readLine();
		if(kha_internal_HdrFormat.formatPattern.match(line)) {
			rle = true;
		} else if(kha_internal_HdrFormat.exposurePattern.match(line)) {
			exposure = parseFloat(kha_internal_HdrFormat.exposurePattern.matched(1));
		} else if(kha_internal_HdrFormat.widthHeightPattern.match(line)) {
			height = Std.parseInt(kha_internal_HdrFormat.widthHeightPattern.matched(1));
			width = Std.parseInt(kha_internal_HdrFormat.widthHeightPattern.matched(2));
			break;
		}
	}
	if(!rle) {
		haxe_Log.trace("File is not run length encoded!",{ fileName : "kha/internal/HdrFormat.hx", lineNumber : 175, className : "kha.internal.HdrFormat", methodName : "parse"});
		return null;
	}
	var this1 = new Uint8Array(width * height * 4);
	var data = this1;
	var scanline_width = width;
	var num_scanlines = height;
	kha_internal_HdrFormat.readPixelsRawRLE(kha_internal_HdrFormat.buffer,data,0,scanline_width,num_scanlines);
	var this2 = new Float32Array(width * height * 4);
	var floatData = this2;
	var offset = 0;
	while(offset < data.length) {
		var r = data[offset] / 255;
		var g = data[offset + 1] / 255;
		var b = data[offset + 2] / 255;
		var e = data[offset + 3];
		var f = Math.pow(2.0,e - 128.0);
		r *= f;
		g *= f;
		b *= f;
		floatData[offset] = r;
		floatData[offset + 1] = g;
		floatData[offset + 2] = b;
		floatData[offset + 3] = 1.0;
		offset += 4;
	}
	return { width : width, height : height, data : floatData};
};
kha_internal_HdrFormat.prototype = {
	__class__: kha_internal_HdrFormat
};
var kha_js_AEAudioChannel = function(element,looping) {
	this.stopped = false;
	this.element = element;
	this.looping = looping;
};
$hxClasses["kha.js.AEAudioChannel"] = kha_js_AEAudioChannel;
kha_js_AEAudioChannel.__name__ = "kha.js.AEAudioChannel";
kha_js_AEAudioChannel.__interfaces__ = [kha_audio1_AudioChannel];
kha_js_AEAudioChannel.prototype = {
	element: null
	,stopped: null
	,looping: null
	,play: function() {
		this.stopped = false;
		this.element.play();
	}
	,pause: function() {
		try {
			this.element.pause();
		} catch( e ) {
			haxe_CallStack.lastException = e;
			haxe_Log.trace(((e) instanceof js__$Boot_HaxeError) ? e.val : e,{ fileName : "kha/js/AEAudioChannel.hx", lineNumber : 26, className : "kha.js.AEAudioChannel", methodName : "pause"});
		}
	}
	,stop: function() {
		try {
			this.element.pause();
			this.element.currentTime = 0;
			this.stopped = true;
		} catch( e ) {
			haxe_CallStack.lastException = e;
			haxe_Log.trace(((e) instanceof js__$Boot_HaxeError) ? e.val : e,{ fileName : "kha/js/AEAudioChannel.hx", lineNumber : 37, className : "kha.js.AEAudioChannel", methodName : "stop"});
		}
	}
	,length: null
	,get_length: function() {
		if(isFinite(this.element.duration)) {
			return this.element.duration;
		} else {
			return Infinity;
		}
	}
	,get_position: function() {
		return this.element.currentTime;
	}
	,set_position: function(value) {
		return this.element.currentTime = value;
	}
	,get_volume: function() {
		return this.element.volume;
	}
	,set_volume: function(value) {
		return this.element.volume = value;
	}
	,finished: null
	,get_finished: function() {
		if(!this.stopped) {
			if(!this.looping) {
				return this.get_position() >= this.get_length();
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,__class__: kha_js_AEAudioChannel
	,__properties__: {get_finished:"get_finished",set_volume:"set_volume",get_volume:"get_volume",set_position:"set_position",get_position:"get_position",get_length:"get_length"}
};
var kha_js_AudioElementAudio = function() { };
$hxClasses["kha.js.AudioElementAudio"] = kha_js_AudioElementAudio;
kha_js_AudioElementAudio.__name__ = "kha.js.AudioElementAudio";
kha_js_AudioElementAudio.play = function(sound,loop) {
	if(loop == null) {
		loop = false;
	}
	return kha_js_AudioElementAudio.stream(sound,loop);
};
kha_js_AudioElementAudio.stream = function(sound,loop) {
	if(loop == null) {
		loop = false;
	}
	sound.element.loop = loop;
	var channel = new kha_js_AEAudioChannel(sound.element,loop);
	channel.play();
	return channel;
};
var kha_js_CanvasGraphics = function(canvas) {
	this.bakedQuadCache = new kha_AlignedQuad();
	this.clipping = false;
	kha_graphics2_Graphics.call(this);
	this.canvas = canvas;
	kha_js_CanvasGraphics.instance = this;
	this.myColor = kha__$Color_Color_$Impl_$.fromBytes(0,0,0);
};
$hxClasses["kha.js.CanvasGraphics"] = kha_js_CanvasGraphics;
kha_js_CanvasGraphics.__name__ = "kha.js.CanvasGraphics";
kha_js_CanvasGraphics.stringWidth = function(font,text) {
	if(kha_js_CanvasGraphics.instance == null) {
		return 5 * text.length;
	} else {
		kha_js_CanvasGraphics.instance.set_font(font);
		return kha_js_CanvasGraphics.instance.canvas.measureText(text).width;
	}
};
kha_js_CanvasGraphics.__super__ = kha_graphics2_Graphics;
kha_js_CanvasGraphics.prototype = $extend(kha_graphics2_Graphics.prototype,{
	canvas: null
	,webfont: null
	,myColor: null
	,scaleQuality: null
	,clipping: null
	,begin: function(clear,clearColor) {
		if(clear == null) {
			clear = true;
		}
		if(clear) {
			this.clear(clearColor);
		}
	}
	,clear: function(color) {
		if(color == null) {
			color = 0;
		}
		this.canvas.strokeStyle = "rgba(" + ((color & 16711680) >>> 16) + "," + ((color & 65280) >>> 8) + "," + (color & 255) + "," + (color >>> 24) * 0.00392156862745098 + ")";
		this.canvas.fillStyle = "rgba(" + ((color & 16711680) >>> 16) + "," + ((color & 65280) >>> 8) + "," + (color & 255) + "," + (color >>> 24) * 0.00392156862745098 + ")";
		if((color >>> 24) * 0.00392156862745098 == 0) {
			this.canvas.clearRect(0,0,this.canvas.canvas.width,this.canvas.canvas.height);
		} else {
			this.canvas.fillRect(0,0,this.canvas.canvas.width,this.canvas.canvas.height);
		}
		this.set_color(this.myColor);
	}
	,end: function() {
	}
	,drawImage: function(img,x,y) {
		this.canvas.globalAlpha = this.get_opacity();
		this.canvas.drawImage((js_Boot.__cast(img , kha_CanvasImage)).image,x,y);
		this.canvas.globalAlpha = 1;
	}
	,drawScaledSubImage: function(image,sx,sy,sw,sh,dx,dy,dw,dh) {
		this.canvas.globalAlpha = this.get_opacity();
		try {
			if(dw < 0 || dh < 0) {
				this.canvas.save();
				this.canvas.translate(dx,dy);
				var x = 0.0;
				var y = 0.0;
				if(dw < 0) {
					this.canvas.scale(-1,1);
					x = -dw;
				}
				if(dh < 0) {
					this.canvas.scale(1,-1);
					y = -dh;
				}
				this.canvas.drawImage((js_Boot.__cast(image , kha_CanvasImage)).image,sx,sy,sw,sh,x,y,dw,dh);
				this.canvas.restore();
			} else {
				this.canvas.drawImage((js_Boot.__cast(image , kha_CanvasImage)).image,sx,sy,sw,sh,dx,dy,dw,dh);
			}
		} catch( ex ) {
			haxe_CallStack.lastException = ex;
			var ex1 = ((ex) instanceof js__$Boot_HaxeError) ? ex.val : ex;
		}
		this.canvas.globalAlpha = 1;
	}
	,set_color: function(color) {
		this.myColor = color;
		this.canvas.strokeStyle = "rgba(" + ((color & 16711680) >>> 16) + "," + ((color & 65280) >>> 8) + "," + (color & 255) + "," + (color >>> 24) * 0.00392156862745098 + ")";
		this.canvas.fillStyle = "rgba(" + ((color & 16711680) >>> 16) + "," + ((color & 65280) >>> 8) + "," + (color & 255) + "," + (color >>> 24) * 0.00392156862745098 + ")";
		return color;
	}
	,get_color: function() {
		return this.myColor;
	}
	,get_imageScaleQuality: function() {
		return this.scaleQuality;
	}
	,set_imageScaleQuality: function(value) {
		if(value == kha_graphics2_ImageScaleQuality.Low) {
			this.canvas.mozImageSmoothingEnabled = false;
			this.canvas.webkitImageSmoothingEnabled = false;
			this.canvas.msImageSmoothingEnabled = false;
			this.canvas.imageSmoothingEnabled = false;
		} else {
			this.canvas.mozImageSmoothingEnabled = true;
			this.canvas.webkitImageSmoothingEnabled = true;
			this.canvas.msImageSmoothingEnabled = true;
			this.canvas.imageSmoothingEnabled = true;
		}
		return this.scaleQuality = value;
	}
	,drawRect: function(x,y,width,height,strength) {
		if(strength == null) {
			strength = 1.0;
		}
		this.canvas.beginPath();
		var oldStrength = this.canvas.lineWidth;
		this.canvas.lineWidth = Math.round(strength);
		this.canvas.rect(x,y,width,height);
		this.canvas.stroke();
		this.canvas.lineWidth = oldStrength;
	}
	,fillRect: function(x,y,width,height) {
		var tmp = this.get_opacity();
		this.canvas.globalAlpha = tmp * ((this.myColor >>> 24) * 0.00392156862745098);
		this.canvas.fillRect(x,y,width,height);
		this.canvas.globalAlpha = this.get_opacity();
	}
	,drawArc: function(cx,cy,radius,sAngle,eAngle,strength,ccw) {
		if(ccw == null) {
			ccw = false;
		}
		if(strength == null) {
			strength = 1.0;
		}
		this.canvas.beginPath();
		var oldStrength = this.canvas.lineWidth;
		this.canvas.lineWidth = Math.round(strength);
		this.canvas.arc(cx,cy,radius,sAngle,eAngle,ccw);
		this.canvas.stroke();
		this.canvas.lineWidth = oldStrength;
	}
	,drawCircle: function(cx,cy,radius,strength) {
		if(strength == null) {
			strength = 1.0;
		}
		var eAngle = 2 * Math.PI;
		this.canvas.beginPath();
		var oldStrength = this.canvas.lineWidth;
		this.canvas.lineWidth = Math.round(strength);
		this.canvas.arc(cx,cy,radius,0,eAngle,false);
		this.canvas.stroke();
		this.canvas.lineWidth = oldStrength;
	}
	,_drawArc: function(cx,cy,radius,sAngle,eAngle,strength,ccw) {
		this.canvas.beginPath();
		var oldStrength = this.canvas.lineWidth;
		this.canvas.lineWidth = Math.round(strength);
		this.canvas.arc(cx,cy,radius,sAngle,eAngle,ccw);
		this.canvas.stroke();
		this.canvas.lineWidth = oldStrength;
	}
	,fillArc: function(cx,cy,radius,sAngle,eAngle,ccw) {
		if(ccw == null) {
			ccw = false;
		}
		this.canvas.beginPath();
		this.canvas.arc(cx,cy,radius,sAngle,eAngle,ccw);
		this.canvas.fill();
	}
	,fillCircle: function(cx,cy,radius) {
		this.canvas.beginPath();
		this.canvas.arc(cx,cy,radius,0,2 * Math.PI,false);
		this.canvas.fill();
	}
	,bakedQuadCache: null
	,drawString: function(text,x,y) {
		var image = this.webfont.getImage(this.get_fontSize(),this.myColor);
		if(image.width > 0) {
			var xpos = x;
			var ypos = y;
			var _g = 0;
			var _g1 = text.length;
			while(_g < _g1) {
				var i = _g++;
				var q = this.webfont.kravur._get(this.get_fontSize()).getBakedQuad(this.bakedQuadCache,kha_graphics2_Graphics.fontGlyphs.indexOf(HxOverrides.cca(text,i)),xpos,ypos);
				if(q != null) {
					if(q.s1 - q.s0 > 0 && q.t1 - q.t0 > 0 && q.x1 - q.x0 > 0 && q.y1 - q.y0 > 0) {
						this.canvas.drawImage(image,q.s0 * image.width,q.t0 * image.height,(q.s1 - q.s0) * image.width,(q.t1 - q.t0) * image.height,q.x0,q.y0,q.x1 - q.x0,q.y1 - q.y0);
					}
					xpos += q.xadvance;
				}
			}
		}
	}
	,drawCharacters: function(text,start,length,x,y) {
		var image = this.webfont.getImage(this.get_fontSize(),this.myColor);
		if(image.width > 0) {
			var xpos = x;
			var ypos = y;
			var _g = start;
			var _g1 = start + length;
			while(_g < _g1) {
				var i = _g++;
				var q = this.webfont.kravur._get(this.get_fontSize()).getBakedQuad(this.bakedQuadCache,kha_graphics2_Graphics.fontGlyphs.indexOf(text[i]),xpos,ypos);
				if(q != null) {
					if(q.s1 - q.s0 > 0 && q.t1 - q.t0 > 0 && q.x1 - q.x0 > 0 && q.y1 - q.y0 > 0) {
						this.canvas.drawImage(image,q.s0 * image.width,q.t0 * image.height,(q.s1 - q.s0) * image.width,(q.t1 - q.t0) * image.height,q.x0,q.y0,q.x1 - q.x0,q.y1 - q.y0);
					}
					xpos += q.xadvance;
				}
			}
		}
	}
	,set_font: function(font) {
		this.webfont = js_Boot.__cast(font , kha_js_Font);
		return this.webfont;
	}
	,get_font: function() {
		return this.webfont;
	}
	,drawLine: function(x1,y1,x2,y2,strength) {
		if(strength == null) {
			strength = 1.0;
		}
		this.canvas.beginPath();
		var oldWith = this.canvas.lineWidth;
		this.canvas.lineWidth = Math.round(strength);
		this.canvas.moveTo(x1,y1);
		this.canvas.lineTo(x2,y2);
		this.canvas.moveTo(0,0);
		this.canvas.stroke();
		this.canvas.lineWidth = oldWith;
	}
	,fillTriangle: function(x1,y1,x2,y2,x3,y3) {
		this.canvas.beginPath();
		this.canvas.moveTo(x1,y1);
		this.canvas.lineTo(x2,y2);
		this.canvas.lineTo(x3,y3);
		this.canvas.closePath();
		this.canvas.fill();
	}
	,scissor: function(x,y,width,height) {
		if(!this.clipping) {
			this.canvas.save();
			this.clipping = true;
		}
		this.canvas.beginPath();
		this.canvas.rect(x,y,width,height);
		this.canvas.clip();
	}
	,disableScissor: function() {
		if(this.clipping) {
			this.canvas.restore();
			this.clipping = false;
		}
	}
	,drawVideo: function(video,x,y,width,height) {
		this.canvas.drawImage((js_Boot.__cast(video , kha_js_Video)).element,x,y,width,height);
	}
	,setTransformation: function(transformation) {
		this.canvas.setTransform(transformation._00,transformation._01,transformation._10,transformation._11,transformation._20,transformation._21);
	}
	,__class__: kha_js_CanvasGraphics
});
var kha_js_Font = function(blob) {
	this.images = new haxe_ds_IntMap();
	this.kravur = new kha_js_Font.Kravur(blob);
};
$hxClasses["kha.js.Font"] = kha_js_Font;
kha_js_Font.__name__ = "kha.js.Font";
kha_js_Font.__interfaces__ = [kha_Resource];
kha_js_Font.fromBytes = function(bytes) {
	return new kha_js_Font(kha_internal_BytesBlob.fromBytes(bytes));
};
kha_js_Font.prototype = {
	kravur: null
	,images: null
	,height: function(fontSize) {
		return this.kravur._get(fontSize).getHeight();
	}
	,width: function(fontSize,str) {
		return this.kravur._get(fontSize).stringWidth(str);
	}
	,widthOfCharacters: function(fontSize,characters,start,length) {
		return this.kravur._get(fontSize).charactersWidth(characters,start,length);
	}
	,baseline: function(fontSize) {
		return this.kravur._get(fontSize).getBaselinePosition();
	}
	,getImage: function(fontSize,color) {
		var glyphs = kha_graphics2_Graphics.fontGlyphs;
		var imageIndex = fontSize * 10000 + glyphs.length;
		if(!this.images.h.hasOwnProperty(imageIndex)) {
			var this1 = this.images;
			var v = new haxe_ds_IntMap();
			this1.h[imageIndex] = v;
		}
		if(!this.images.h[imageIndex].h.hasOwnProperty(color)) {
			var kravur = this.kravur._get(fontSize);
			var canvas = window.document.createElement("canvas");
			canvas.width = kravur.width;
			canvas.height = kravur.height;
			var ctx = canvas.getContext("2d");
			ctx.fillStyle = "black";
			ctx.fillRect(0,0,kravur.width,kravur.height);
			var imageData = ctx.getImageData(0,0,kravur.width,kravur.height);
			var bytes = (js_Boot.__cast(kravur.getTexture() , kha_CanvasImage)).bytes;
			var _g = 0;
			var _g1 = bytes.length;
			while(_g < _g1) {
				var i = _g++;
				imageData.data[i * 4] = (color & 16711680) >>> 16;
				imageData.data[i * 4 + 1] = (color & 65280) >>> 8;
				imageData.data[i * 4 + 2] = color & 255;
				imageData.data[i * 4 + 3] = bytes.b[i];
			}
			ctx.putImageData(imageData,0,0);
			var img = window.document.createElement("img");
			img.src = canvas.toDataURL("image/png");
			this.images.h[imageIndex].h[color] = img;
			return img;
		}
		return this.images.h[imageIndex].h[color];
	}
	,unload: function() {
		this.kravur = null;
		this.images = null;
	}
	,__class__: kha_js_Font
};
var kha_js_MobileWebAudio = function() { };
$hxClasses["kha.js.MobileWebAudio"] = kha_js_MobileWebAudio;
kha_js_MobileWebAudio.__name__ = "kha.js.MobileWebAudio";
kha_js_MobileWebAudio._init = function() {
	try {
		kha_js_MobileWebAudio._context = new AudioContext();
		return;
	} catch( e ) {
		haxe_CallStack.lastException = e;
		var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
	}
	try {
		this._context = new webkitAudioContext();
		return;
	} catch( e2 ) {
		haxe_CallStack.lastException = e2;
		var e3 = ((e2) instanceof js__$Boot_HaxeError) ? e2.val : e2;
	}
};
kha_js_MobileWebAudio.play = function(sound,loop) {
	if(loop == null) {
		loop = false;
	}
	var channel = new kha_js_MobileWebAudioChannel(sound,loop);
	channel.play();
	return channel;
};
kha_js_MobileWebAudio.stream = function(sound,loop) {
	if(loop == null) {
		loop = false;
	}
	return kha_js_MobileWebAudio.play(sound,loop);
};
var kha_js_MobileWebAudioChannel = function(sound,loop) {
	this.stopped = false;
	this.paused = false;
	this.buffer = sound._buffer;
	this.loop = loop;
	this.createSource();
};
$hxClasses["kha.js.MobileWebAudioChannel"] = kha_js_MobileWebAudioChannel;
kha_js_MobileWebAudioChannel.__name__ = "kha.js.MobileWebAudioChannel";
kha_js_MobileWebAudioChannel.__interfaces__ = [kha_audio1_AudioChannel];
kha_js_MobileWebAudioChannel.prototype = {
	buffer: null
	,loop: null
	,source: null
	,gain: null
	,startTime: null
	,pauseTime: null
	,paused: null
	,stopped: null
	,createSource: function() {
		var _gthis = this;
		this.source = kha_js_MobileWebAudio._context.createBufferSource();
		this.source.loop = this.loop;
		this.source.buffer = this.buffer;
		this.source.onended = function() {
			_gthis.stopped = true;
		};
		this.gain = kha_js_MobileWebAudio._context.createGain();
		this.source.connect(this.gain);
		this.gain.connect(kha_js_MobileWebAudio._context.destination);
	}
	,play: function() {
		if(this.paused || this.stopped) {
			this.createSource();
		}
		this.stopped = false;
		if(this.paused) {
			this.paused = false;
			this.startTime = kha_js_MobileWebAudio._context.currentTime - this.pauseTime;
			this.source.start(0,this.pauseTime);
		} else {
			this.startTime = kha_js_MobileWebAudio._context.currentTime;
			this.source.start();
		}
	}
	,pause: function() {
		this.pauseTime = kha_js_MobileWebAudio._context.currentTime - this.startTime;
		this.paused = true;
		this.source.stop();
	}
	,stop: function() {
		this.paused = false;
		this.stopped = true;
		this.source.stop();
	}
	,length: null
	,get_length: function() {
		return this.source.buffer.duration;
	}
	,get_position: function() {
		if(this.stopped) {
			return this.get_length();
		}
		if(this.paused) {
			return this.pauseTime;
		} else {
			return kha_js_MobileWebAudio._context.currentTime - this.startTime;
		}
	}
	,set_position: function(value) {
		return value;
	}
	,get_volume: function() {
		return this.gain.gain.value;
	}
	,set_volume: function(value) {
		return this.gain.gain.value = value;
	}
	,finished: null
	,get_finished: function() {
		return this.stopped;
	}
	,__class__: kha_js_MobileWebAudioChannel
	,__properties__: {get_finished:"get_finished",set_volume:"set_volume",get_volume:"get_volume",set_position:"set_position",get_position:"get_position",get_length:"get_length"}
};
var kha_js_MobileWebAudioSound = function(filename,done,failed) {
	var _gthis = this;
	kha_Sound.call(this);
	var request = new XMLHttpRequest();
	request.open("GET",filename,true);
	request.responseType = "arraybuffer";
	request.onerror = function() {
		failed({ url : filename});
	};
	request.onload = function() {
		_gthis.compressedData = haxe_io_Bytes.ofData(request.response);
		_gthis.uncompressedData = null;
		kha_js_MobileWebAudio._context.decodeAudioData(_gthis.compressedData.b.bufferValue,function(buffer) {
			_gthis.length = buffer.duration;
			_gthis.channels = buffer.numberOfChannels;
			_gthis._buffer = buffer;
			done(_gthis);
		},function() {
			failed({ url : filename, error : "Audio format not supported"});
		});
	};
	request.send(null);
};
$hxClasses["kha.js.MobileWebAudioSound"] = kha_js_MobileWebAudioSound;
kha_js_MobileWebAudioSound.__name__ = "kha.js.MobileWebAudioSound";
kha_js_MobileWebAudioSound.__super__ = kha_Sound;
kha_js_MobileWebAudioSound.prototype = $extend(kha_Sound.prototype,{
	_buffer: null
	,uncompress: function(done) {
		done();
	}
	,__class__: kha_js_MobileWebAudioSound
});
var kha_js_Sound = function(filenames,done,failed) {
	kha_Sound.call(this);
	this.done = done;
	this.failed = failed;
	kha_js_Sound.loading.push(this);
	this.element = window.document.createElement("audio");
	this.filenames = [];
	var _g = 0;
	while(_g < filenames.length) {
		var filename = filenames[_g];
		++_g;
		if(this.element.canPlayType("audio/ogg") != "" && StringTools.endsWith(filename,".ogg")) {
			this.filenames.push(filename);
		}
		if(this.element.canPlayType("audio/mp4") != "" && StringTools.endsWith(filename,".mp4")) {
			this.filenames.push(filename);
		}
	}
	this.element.addEventListener("error",$bind(this,this.errorListener),false);
	this.element.addEventListener("canplay",$bind(this,this.canPlayThroughListener),false);
	this.element.src = this.filenames[0];
	this.element.preload = "auto";
	this.element.load();
};
$hxClasses["kha.js.Sound"] = kha_js_Sound;
kha_js_Sound.__name__ = "kha.js.Sound";
kha_js_Sound.__super__ = kha_Sound;
kha_js_Sound.prototype = $extend(kha_Sound.prototype,{
	filenames: null
	,done: null
	,failed: null
	,element: null
	,errorListener: function(eventInfo) {
		if(this.element.error.code == 4) {
			var _g = 0;
			var _g1 = this.filenames.length - 1;
			while(_g < _g1) {
				var i = _g++;
				if(this.element.src == this.filenames[i]) {
					this.element.src = this.filenames[i + 1];
					return;
				}
			}
		}
		this.failed({ url : this.element.src});
		this.finishAsset();
	}
	,canPlayThroughListener: function(eventInfo) {
		this.finishAsset();
	}
	,finishAsset: function() {
		this.element.removeEventListener("error",$bind(this,this.errorListener),false);
		this.element.removeEventListener("canplaythrough",$bind(this,this.canPlayThroughListener),false);
		this.done(this);
		HxOverrides.remove(kha_js_Sound.loading,this);
	}
	,uncompress: function(done) {
		done();
	}
	,__class__: kha_js_Sound
});
var kha_js_Video = function() {
	kha_Video.call(this);
};
$hxClasses["kha.js.Video"] = kha_js_Video;
kha_js_Video.__name__ = "kha.js.Video";
kha_js_Video.fromElement = function(element) {
	var video = new kha_js_Video();
	video.element = element;
	if(kha_SystemImpl.gl != null) {
		video.texture = kha_Image.fromVideo(video);
	}
	return video;
};
kha_js_Video.fromFile = function(filenames,done) {
	var video = new kha_js_Video();
	video.done = done;
	video.element = window.document.createElement("video");
	video.filenames = [];
	var _g = 0;
	while(_g < filenames.length) {
		var filename = filenames[_g];
		++_g;
		if(video.element.canPlayType("video/webm") != "" && StringTools.endsWith(filename,".webm")) {
			video.filenames.push(filename);
		}
	}
	video.element.addEventListener("error",$bind(video,video.errorListener),false);
	video.element.addEventListener("canplaythrough",$bind(video,video.canPlayThroughListener),false);
	video.element.preload = "auto";
	video.element.src = video.filenames[0];
};
kha_js_Video.__super__ = kha_Video;
kha_js_Video.prototype = $extend(kha_Video.prototype,{
	filenames: null
	,element: null
	,done: null
	,texture: null
	,width: function() {
		return this.element.videoWidth;
	}
	,height: function() {
		return this.element.videoHeight;
	}
	,play: function(loop) {
		if(loop == null) {
			loop = false;
		}
		try {
			this.element.loop = loop;
			this.element.play();
		} catch( e ) {
			haxe_CallStack.lastException = e;
			haxe_Log.trace(((e) instanceof js__$Boot_HaxeError) ? e.val : e,{ fileName : "kha/js/Video.hx", lineNumber : 64, className : "kha.js.Video", methodName : "play"});
		}
	}
	,pause: function() {
		try {
			this.element.pause();
		} catch( e ) {
			haxe_CallStack.lastException = e;
			haxe_Log.trace(((e) instanceof js__$Boot_HaxeError) ? e.val : e,{ fileName : "kha/js/Video.hx", lineNumber : 73, className : "kha.js.Video", methodName : "pause"});
		}
	}
	,stop: function() {
		try {
			this.element.pause();
			this.element.currentTime = 0;
		} catch( e ) {
			haxe_CallStack.lastException = e;
			haxe_Log.trace(((e) instanceof js__$Boot_HaxeError) ? e.val : e,{ fileName : "kha/js/Video.hx", lineNumber : 83, className : "kha.js.Video", methodName : "stop"});
		}
	}
	,getCurrentPos: function() {
		return Math.ceil(this.element.currentTime * 1000);
	}
	,get_position: function() {
		return Math.ceil(this.element.currentTime * 1000);
	}
	,set_position: function(value) {
		this.element.currentTime = value / 1000;
		return value;
	}
	,getLength: function() {
		if(isFinite(this.element.duration)) {
			return Math.floor(this.element.duration * 1000);
		} else {
			return -1;
		}
	}
	,errorListener: function(eventInfo) {
		if(this.element.error.code == 4) {
			var _g = 0;
			var _g1 = this.filenames.length - 1;
			while(_g < _g1) {
				var i = _g++;
				if(this.element.src == this.filenames[i]) {
					this.element.src = this.filenames[i + 1];
					return;
				}
			}
		}
		haxe_Log.trace("Error loading " + this.element.src,{ fileName : "kha/js/Video.hx", lineNumber : 120, className : "kha.js.Video", methodName : "errorListener"});
		this.finishAsset();
	}
	,canPlayThroughListener: function(eventInfo) {
		this.finishAsset();
	}
	,finishAsset: function() {
		this.element.removeEventListener("error",$bind(this,this.errorListener),false);
		this.element.removeEventListener("canplaythrough",$bind(this,this.canPlayThroughListener),false);
		if(kha_SystemImpl.gl != null) {
			this.texture = kha_Image.fromVideo(this);
		}
		this.done(this);
	}
	,__class__: kha_js_Video
});
var kha_js_WebAudioSound = function(filename,done,failed) {
	var _gthis = this;
	kha_Sound.call(this);
	var request = new XMLHttpRequest();
	request.open("GET",filename,true);
	request.responseType = "arraybuffer";
	request.onerror = function() {
		failed({ url : filename});
	};
	request.onload = function() {
		_gthis.compressedData = haxe_io_Bytes.ofData(request.response);
		_gthis.uncompressedData = null;
		done(_gthis);
	};
	request.send(null);
};
$hxClasses["kha.js.WebAudioSound"] = kha_js_WebAudioSound;
kha_js_WebAudioSound.__name__ = "kha.js.WebAudioSound";
kha_js_WebAudioSound.__super__ = kha_Sound;
kha_js_WebAudioSound.prototype = $extend(kha_Sound.prototype,{
	superUncompress: function(done) {
		kha_Sound.prototype.uncompress.call(this,done);
	}
	,uncompress: function(done) {
		var _gthis = this;
		kha_audio2_Audio._context.decodeAudioData(this.compressedData.b.bufferValue,function(buffer) {
			var ch0 = buffer.getChannelData(0);
			var len = ch0.length;
			var this1 = new Float32Array(len * 2);
			_gthis.uncompressedData = this1;
			_gthis.length = buffer.duration;
			_gthis.channels = buffer.numberOfChannels;
			_gthis.sampleRate = Math.round(buffer.sampleRate);
			if(buffer.numberOfChannels == 1) {
				var idx = 0;
				var i = 0;
				var lidx = len * 2;
				var uncompressInner = function() {
				};
				uncompressInner = function() {
					var chk_len = idx + 11025;
					var next_chk = chk_len > lidx ? lidx : chk_len;
					while(idx < next_chk) {
						_gthis.uncompressedData[idx] = ch0[i];
						_gthis.uncompressedData[idx + 1] = ch0[i];
						idx += 2;
						i += 1;
					}
					if(idx < lidx) {
						window.setTimeout(uncompressInner,0);
					} else {
						_gthis.compressedData = null;
					}
				};
				uncompressInner();
				window.setTimeout(done,250);
			} else {
				var ch1 = buffer.getChannelData(1);
				var idx1 = 0;
				var i1 = 0;
				var lidx1 = len * 2;
				var uncompressInner1 = function() {
				};
				uncompressInner1 = function() {
					var chk_len1 = idx1 + 11025;
					var next_chk1 = chk_len1 > lidx1 ? lidx1 : chk_len1;
					while(idx1 < next_chk1) {
						_gthis.uncompressedData[idx1] = ch0[i1];
						_gthis.uncompressedData[idx1 + 1] = ch1[i1];
						idx1 += 2;
						i1 += 1;
					}
					if(idx1 < lidx1) {
						window.setTimeout(uncompressInner1,0);
					} else {
						_gthis.compressedData = null;
					}
				};
				uncompressInner1();
				window.setTimeout(done,250);
			}
		},function() {
			_gthis.superUncompress(done);
		});
	}
	,__class__: kha_js_WebAudioSound
});
var kha_js_graphics4_ConstantLocation = function(value,type) {
	this.value = value;
	this.type = type;
};
$hxClasses["kha.js.graphics4.ConstantLocation"] = kha_js_graphics4_ConstantLocation;
kha_js_graphics4_ConstantLocation.__name__ = "kha.js.graphics4.ConstantLocation";
kha_js_graphics4_ConstantLocation.__interfaces__ = [kha_graphics4_ConstantLocation];
kha_js_graphics4_ConstantLocation.prototype = {
	value: null
	,type: null
	,__class__: kha_js_graphics4_ConstantLocation
};
var kha_js_graphics4_Graphics = function(renderTarget) {
	var this1 = new Float32Array(9);
	this.matrix3Cache = this1;
	var this11 = new Float32Array(16);
	this.matrixCache = this11;
	this.useVertexAttributes = 0;
	this.isDepthAttachment = false;
	this.isCubeMap = false;
	this.colorMaskAlpha = true;
	this.colorMaskBlue = true;
	this.colorMaskGreen = true;
	this.colorMaskRed = true;
	this.depthMask = false;
	this.depthTest = false;
	this.currentPipeline = null;
	this.renderTarget = renderTarget;
	this.init();
	if(kha_SystemImpl.gl2) {
		this.instancedExtension = true;
	} else {
		this.instancedExtension = kha_SystemImpl.gl.getExtension("ANGLE_instanced_arrays");
		this.blendMinMaxExtension = kha_SystemImpl.gl.getExtension("EXT_blend_minmax");
	}
};
$hxClasses["kha.js.graphics4.Graphics"] = kha_js_graphics4_Graphics;
kha_js_graphics4_Graphics.__name__ = "kha.js.graphics4.Graphics";
kha_js_graphics4_Graphics.__interfaces__ = [kha_graphics4_Graphics];
kha_js_graphics4_Graphics.getBlendFunc = function(factor) {
	switch(factor) {
	case 1:
		return 1;
	case 0:case 2:
		return 0;
	case 3:
		return 770;
	case 4:
		return 772;
	case 5:
		return 771;
	case 6:
		return 773;
	case 7:
		return 768;
	case 8:
		return 774;
	case 9:
		return 769;
	case 10:
		return 775;
	}
};
kha_js_graphics4_Graphics.getBlendOp = function(op) {
	switch(op) {
	case 0:
		return 32774;
	case 1:
		return 32778;
	case 2:
		return 32779;
	case 3:
		return 32775;
	case 4:
		return 32776;
	}
};
kha_js_graphics4_Graphics.prototype = {
	currentPipeline: null
	,depthTest: null
	,depthMask: null
	,colorMaskRed: null
	,colorMaskGreen: null
	,colorMaskBlue: null
	,colorMaskAlpha: null
	,indicesCount: null
	,renderTarget: null
	,renderTargetFrameBuffer: null
	,renderTargetMSAA: null
	,renderTargetTexture: null
	,isCubeMap: null
	,isDepthAttachment: null
	,instancedExtension: null
	,blendMinMaxExtension: null
	,useVertexAttributes: null
	,init: function() {
		if(this.renderTarget == null) {
			return;
		}
		this.isCubeMap = ((this.renderTarget) instanceof kha_graphics4_CubeMap);
		if(this.isCubeMap) {
			var cubeMap = js_Boot.__cast(this.renderTarget , kha_graphics4_CubeMap);
			this.renderTargetFrameBuffer = cubeMap.frameBuffer;
			this.renderTargetTexture = cubeMap.texture;
			this.isDepthAttachment = cubeMap.isDepthAttachment;
		} else {
			var image = js_Boot.__cast(this.renderTarget , kha_WebGLImage);
			this.renderTargetFrameBuffer = image.frameBuffer;
			this.renderTargetMSAA = image.MSAAFrameBuffer;
			this.renderTargetTexture = image.texture;
		}
	}
	,begin: function(additionalRenderTargets) {
		kha_SystemImpl.gl.enable(3042);
		kha_SystemImpl.gl.blendFunc(770,771);
		if(this.renderTarget == null) {
			kha_SystemImpl.gl.bindFramebuffer(36160,null);
			kha_SystemImpl.gl.viewport(0,0,kha_System.windowWidth(),kha_System.windowHeight());
		} else {
			kha_SystemImpl.gl.bindFramebuffer(36160,this.renderTargetFrameBuffer);
			kha_SystemImpl.gl.viewport(0,0,this.renderTarget.get_width(),this.renderTarget.get_height());
			if(additionalRenderTargets != null) {
				kha_SystemImpl.gl.framebufferTexture2D(36160,kha_SystemImpl.drawBuffers.COLOR_ATTACHMENT0_WEBGL,3553,this.renderTargetTexture,0);
				var _g = 0;
				var _g1 = additionalRenderTargets.length;
				while(_g < _g1) {
					var i = _g++;
					kha_SystemImpl.gl.framebufferTexture2D(36160,kha_SystemImpl.drawBuffers.COLOR_ATTACHMENT0_WEBGL + i + 1,3553,(js_Boot.__cast(additionalRenderTargets[i] , kha_WebGLImage)).texture,0);
				}
				var attachments = [kha_SystemImpl.drawBuffers.COLOR_ATTACHMENT0_WEBGL];
				var _g2 = 0;
				var _g3 = additionalRenderTargets.length;
				while(_g2 < _g3) {
					var i1 = _g2++;
					attachments.push(kha_SystemImpl.drawBuffers.COLOR_ATTACHMENT0_WEBGL + i1 + 1);
				}
				if(kha_SystemImpl.gl2) {
					kha_SystemImpl.gl.drawBuffers(attachments);
				} else {
					kha_SystemImpl.drawBuffers.drawBuffersWEBGL(attachments);
				}
			}
		}
	}
	,beginFace: function(face) {
		kha_SystemImpl.gl.enable(3042);
		kha_SystemImpl.gl.blendFunc(770,771);
		kha_SystemImpl.gl.bindFramebuffer(36160,this.renderTargetFrameBuffer);
		kha_SystemImpl.gl.framebufferTexture2D(36160,this.isDepthAttachment ? 36096 : 36064,34069 + face,this.renderTargetTexture,0);
		kha_SystemImpl.gl.viewport(0,0,this.renderTarget.get_width(),this.renderTarget.get_height());
	}
	,beginEye: function(eye) {
		kha_SystemImpl.gl.enable(3042);
		kha_SystemImpl.gl.blendFunc(770,771);
		kha_SystemImpl.gl.bindFramebuffer(36160,null);
		if(eye == 0) {
			kha_SystemImpl.gl.viewport(0,0,kha_System.windowWidth() * 0.5 | 0,kha_System.windowHeight());
		} else {
			kha_SystemImpl.gl.viewport(kha_System.windowWidth() * 0.5 | 0,0,kha_System.windowWidth() * 0.5 | 0,kha_System.windowHeight());
		}
	}
	,end: function() {
		if(this.renderTargetMSAA != null) {
			kha_SystemImpl.gl.bindFramebuffer(kha_SystemImpl.gl.READ_FRAMEBUFFER,this.renderTargetFrameBuffer);
			kha_SystemImpl.gl.bindFramebuffer(kha_SystemImpl.gl.DRAW_FRAMEBUFFER,this.renderTargetMSAA);
			kha_SystemImpl.gl.blitFramebuffer(0,0,this.renderTarget.get_width(),this.renderTarget.get_height(),0,0,this.renderTarget.get_width(),this.renderTarget.get_height(),16384,9728);
		}
		var error = kha_SystemImpl.gl.getError();
		switch(error) {
		case 0:
			break;
		case 1280:
			haxe_Log.trace("WebGL error: Invalid enum",{ fileName : "kha/js/graphics4/Graphics.hx", lineNumber : 141, className : "kha.js.graphics4.Graphics", methodName : "end"});
			break;
		case 1281:
			haxe_Log.trace("WebGL error: Invalid value",{ fileName : "kha/js/graphics4/Graphics.hx", lineNumber : 143, className : "kha.js.graphics4.Graphics", methodName : "end"});
			break;
		case 1282:
			haxe_Log.trace("WebGL error: Invalid operation",{ fileName : "kha/js/graphics4/Graphics.hx", lineNumber : 145, className : "kha.js.graphics4.Graphics", methodName : "end"});
			break;
		case 1285:
			haxe_Log.trace("WebGL error: Out of memory",{ fileName : "kha/js/graphics4/Graphics.hx", lineNumber : 149, className : "kha.js.graphics4.Graphics", methodName : "end"});
			break;
		case 1286:
			haxe_Log.trace("WebGL error: Invalid framebuffer operation",{ fileName : "kha/js/graphics4/Graphics.hx", lineNumber : 147, className : "kha.js.graphics4.Graphics", methodName : "end"});
			break;
		case 37442:
			haxe_Log.trace("WebGL error: Context lost",{ fileName : "kha/js/graphics4/Graphics.hx", lineNumber : 151, className : "kha.js.graphics4.Graphics", methodName : "end"});
			break;
		default:
			haxe_Log.trace("Unknown WebGL error",{ fileName : "kha/js/graphics4/Graphics.hx", lineNumber : 153, className : "kha.js.graphics4.Graphics", methodName : "end"});
		}
	}
	,flush: function() {
	}
	,vsynced: function() {
		return true;
	}
	,refreshRate: function() {
		return 60;
	}
	,clear: function(color,depth,stencil) {
		var clearMask = 0;
		if(color != null) {
			clearMask |= 16384;
			kha_SystemImpl.gl.colorMask(true,true,true,true);
			kha_SystemImpl.gl.clearColor(((color & 16711680) >>> 16) * 0.00392156862745098,((color & 65280) >>> 8) * 0.00392156862745098,(color & 255) * 0.00392156862745098,(color >>> 24) * 0.00392156862745098);
		}
		if(depth != null) {
			clearMask |= 256;
			kha_SystemImpl.gl.enable(2929);
			kha_SystemImpl.gl.depthMask(true);
			kha_SystemImpl.gl.clearDepth(depth);
		}
		if(stencil != null) {
			clearMask |= 1024;
			kha_SystemImpl.gl.enable(2960);
			kha_SystemImpl.gl.stencilMask(255);
			kha_SystemImpl.gl.clearStencil(stencil);
		}
		kha_SystemImpl.gl.clear(clearMask);
		kha_SystemImpl.gl.colorMask(this.colorMaskRed,this.colorMaskGreen,this.colorMaskBlue,this.colorMaskAlpha);
		if(this.depthTest) {
			kha_SystemImpl.gl.enable(2929);
		} else {
			kha_SystemImpl.gl.disable(2929);
		}
		kha_SystemImpl.gl.depthMask(this.depthMask);
	}
	,viewport: function(x,y,width,height) {
		if(this.renderTarget == null) {
			kha_SystemImpl.gl.viewport(x,kha_System.windowHeight(0) - y - height,width,height);
		} else {
			kha_SystemImpl.gl.viewport(x,y,width,height);
		}
	}
	,scissor: function(x,y,width,height) {
		kha_SystemImpl.gl.enable(3089);
		if(this.renderTarget == null) {
			kha_SystemImpl.gl.scissor(x,kha_System.windowHeight(0) - y - height,width,height);
		} else {
			kha_SystemImpl.gl.scissor(x,y,width,height);
		}
	}
	,disableScissor: function() {
		kha_SystemImpl.gl.disable(3089);
	}
	,setDepthMode: function(write,mode) {
		switch(mode) {
		case 0:
			if(write) {
				kha_SystemImpl.gl.enable(2929);
			} else {
				kha_SystemImpl.gl.disable(2929);
			}
			this.depthTest = write;
			kha_SystemImpl.gl.depthFunc(519);
			break;
		case 1:
			kha_SystemImpl.gl.enable(2929);
			this.depthTest = true;
			kha_SystemImpl.gl.depthFunc(512);
			break;
		case 2:
			kha_SystemImpl.gl.enable(2929);
			this.depthTest = true;
			kha_SystemImpl.gl.depthFunc(514);
			break;
		case 3:
			kha_SystemImpl.gl.enable(2929);
			this.depthTest = true;
			kha_SystemImpl.gl.depthFunc(517);
			break;
		case 4:
			kha_SystemImpl.gl.enable(2929);
			this.depthTest = true;
			kha_SystemImpl.gl.depthFunc(513);
			break;
		case 5:
			kha_SystemImpl.gl.enable(2929);
			this.depthTest = true;
			kha_SystemImpl.gl.depthFunc(515);
			break;
		case 6:
			kha_SystemImpl.gl.enable(2929);
			this.depthTest = true;
			kha_SystemImpl.gl.depthFunc(516);
			break;
		case 7:
			kha_SystemImpl.gl.enable(2929);
			this.depthTest = true;
			kha_SystemImpl.gl.depthFunc(518);
			break;
		}
		kha_SystemImpl.gl.depthMask(write);
		this.depthMask = write;
	}
	,setBlendingMode: function(source,destination,operation,alphaSource,alphaDestination,alphaOperation) {
		if(source == 1 && destination == 2) {
			kha_SystemImpl.gl.disable(3042);
		} else {
			kha_SystemImpl.gl.enable(3042);
			kha_SystemImpl.gl.blendFuncSeparate(kha_js_graphics4_Graphics.getBlendFunc(source),kha_js_graphics4_Graphics.getBlendFunc(destination),kha_js_graphics4_Graphics.getBlendFunc(alphaSource),kha_js_graphics4_Graphics.getBlendFunc(alphaDestination));
			kha_SystemImpl.gl.blendEquationSeparate(kha_js_graphics4_Graphics.getBlendOp(operation),kha_js_graphics4_Graphics.getBlendOp(alphaOperation));
		}
	}
	,createVertexBuffer: function(vertexCount,structure,usage,canRead) {
		if(canRead == null) {
			canRead = false;
		}
		return new kha_graphics4_VertexBuffer(vertexCount,structure,usage);
	}
	,setVertexBuffer: function(vertexBuffer) {
		this.useVertexAttributes = (js_Boot.__cast(vertexBuffer , kha_graphics4_VertexBuffer)).set(0);
	}
	,setVertexBuffers: function(vertexBuffers) {
		var offset = 0;
		var _g = 0;
		while(_g < vertexBuffers.length) {
			var vertexBuffer = vertexBuffers[_g];
			++_g;
			offset += (js_Boot.__cast(vertexBuffer , kha_graphics4_VertexBuffer)).set(offset);
		}
		this.useVertexAttributes = offset;
	}
	,createIndexBuffer: function(indexCount,usage,canRead) {
		if(canRead == null) {
			canRead = false;
		}
		return new kha_graphics4_IndexBuffer(indexCount,usage);
	}
	,setIndexBuffer: function(indexBuffer) {
		this.indicesCount = indexBuffer.count();
		(js_Boot.__cast(indexBuffer , kha_graphics4_IndexBuffer)).set();
	}
	,setTexture: function(stage,texture) {
		if(texture == null) {
			kha_SystemImpl.gl.activeTexture(33984 + (js_Boot.__cast(stage , kha_js_graphics4_TextureUnit)).value);
			kha_SystemImpl.gl.bindTexture(3553,null);
		} else {
			(js_Boot.__cast(texture , kha_WebGLImage)).set((js_Boot.__cast(stage , kha_js_graphics4_TextureUnit)).value);
		}
	}
	,setTextureDepth: function(stage,texture) {
		(js_Boot.__cast(texture , kha_WebGLImage)).setDepth((js_Boot.__cast(stage , kha_js_graphics4_TextureUnit)).value);
	}
	,setTextureArray: function(unit,texture) {
	}
	,setVideoTexture: function(unit,texture) {
		if(texture == null) {
			kha_SystemImpl.gl.activeTexture(33984 + (js_Boot.__cast(unit , kha_js_graphics4_TextureUnit)).value);
			kha_SystemImpl.gl.bindTexture(3553,null);
		} else {
			(js_Boot.__cast((js_Boot.__cast(texture , kha_js_Video)).texture , kha_WebGLImage)).set((js_Boot.__cast(unit , kha_js_graphics4_TextureUnit)).value);
		}
	}
	,setImageTexture: function(unit,texture) {
	}
	,setTextureParameters: function(texunit,uAddressing,vAddressing,minificationFilter,magnificationFilter,mipmapFilter) {
		kha_SystemImpl.gl.activeTexture(33984 + (js_Boot.__cast(texunit , kha_js_graphics4_TextureUnit)).value);
		switch(uAddressing) {
		case 0:
			kha_SystemImpl.gl.texParameteri(3553,10242,10497);
			break;
		case 1:
			kha_SystemImpl.gl.texParameteri(3553,10242,33648);
			break;
		case 2:
			kha_SystemImpl.gl.texParameteri(3553,10242,33071);
			break;
		}
		switch(vAddressing) {
		case 0:
			kha_SystemImpl.gl.texParameteri(3553,10243,10497);
			break;
		case 1:
			kha_SystemImpl.gl.texParameteri(3553,10243,33648);
			break;
		case 2:
			kha_SystemImpl.gl.texParameteri(3553,10243,33071);
			break;
		}
		switch(minificationFilter) {
		case 0:
			switch(mipmapFilter) {
			case 0:
				kha_SystemImpl.gl.texParameteri(3553,10241,9728);
				break;
			case 1:
				kha_SystemImpl.gl.texParameteri(3553,10241,9984);
				break;
			case 2:
				kha_SystemImpl.gl.texParameteri(3553,10241,9986);
				break;
			}
			break;
		case 1:case 2:
			switch(mipmapFilter) {
			case 0:
				kha_SystemImpl.gl.texParameteri(3553,10241,9729);
				break;
			case 1:
				kha_SystemImpl.gl.texParameteri(3553,10241,9985);
				break;
			case 2:
				kha_SystemImpl.gl.texParameteri(3553,10241,9987);
				break;
			}
			if(minificationFilter == 2) {
				kha_SystemImpl.gl.texParameteri(3553,kha_SystemImpl.anisotropicFilter.TEXTURE_MAX_ANISOTROPY_EXT,4);
			}
			break;
		}
		switch(magnificationFilter) {
		case 0:
			kha_SystemImpl.gl.texParameteri(3553,10240,9728);
			break;
		case 1:case 2:
			kha_SystemImpl.gl.texParameteri(3553,10240,9729);
			break;
		}
	}
	,setTexture3DParameters: function(texunit,uAddressing,vAddressing,wAddressing,minificationFilter,magnificationFilter,mipmapFilter) {
	}
	,setTextureCompareMode: function(texunit,enabled) {
		if(enabled) {
			kha_SystemImpl.gl.texParameteri(3553,34892,34894);
			kha_SystemImpl.gl.texParameteri(3553,34893,515);
		} else {
			kha_SystemImpl.gl.texParameteri(3553,34892,0);
		}
	}
	,setCubeMapCompareMode: function(texunit,enabled) {
		if(enabled) {
			kha_SystemImpl.gl.texParameteri(34067,34892,34894);
			kha_SystemImpl.gl.texParameteri(34067,34893,515);
		} else {
			kha_SystemImpl.gl.texParameteri(34067,34892,0);
		}
	}
	,setCubeMap: function(stage,cubeMap) {
		if(cubeMap == null) {
			kha_SystemImpl.gl.activeTexture(33984 + (js_Boot.__cast(stage , kha_js_graphics4_TextureUnit)).value);
			kha_SystemImpl.gl.bindTexture(34067,null);
		} else {
			cubeMap.set((js_Boot.__cast(stage , kha_js_graphics4_TextureUnit)).value);
		}
	}
	,setCubeMapDepth: function(stage,cubeMap) {
		cubeMap.setDepth((js_Boot.__cast(stage , kha_js_graphics4_TextureUnit)).value);
	}
	,setCullMode: function(mode) {
		switch(mode) {
		case 0:
			kha_SystemImpl.gl.enable(2884);
			kha_SystemImpl.gl.cullFace(1029);
			break;
		case 1:
			kha_SystemImpl.gl.enable(2884);
			kha_SystemImpl.gl.cullFace(1028);
			break;
		case 2:
			kha_SystemImpl.gl.disable(2884);
			break;
		}
	}
	,setPipeline: function(pipe) {
		this.setCullMode(pipe.cullMode);
		this.setDepthMode(pipe.depthWrite,pipe.depthMode);
		this.setStencilParameters(pipe.stencilMode,pipe.stencilBothPass,pipe.stencilDepthFail,pipe.stencilFail,pipe.stencilReferenceValue,pipe.stencilReadMask,pipe.stencilWriteMask);
		this.setBlendingMode(pipe.blendSource,pipe.blendDestination,pipe.blendOperation,pipe.alphaBlendSource,pipe.alphaBlendDestination,pipe.alphaBlendOperation);
		this.currentPipeline = pipe;
		pipe.set();
		this.colorMaskRed = pipe.colorWriteMasksRed[0];
		this.colorMaskGreen = pipe.colorWriteMasksGreen[0];
		this.colorMaskBlue = pipe.colorWriteMasksBlue[0];
		this.colorMaskAlpha = pipe.colorWriteMasksAlpha[0];
	}
	,setStencilReferenceValue: function(value) {
		kha_SystemImpl.gl.stencilFunc(this.convertCompareMode(this.currentPipeline.stencilMode),value,this.currentPipeline.stencilReadMask);
	}
	,setBool: function(location,value) {
		kha_SystemImpl.gl.uniform1i((js_Boot.__cast(location , kha_js_graphics4_ConstantLocation)).value,value ? 1 : 0);
	}
	,setInt: function(location,value) {
		kha_SystemImpl.gl.uniform1i((js_Boot.__cast(location , kha_js_graphics4_ConstantLocation)).value,value);
	}
	,setFloat: function(location,value) {
		kha_SystemImpl.gl.uniform1f((js_Boot.__cast(location , kha_js_graphics4_ConstantLocation)).value,value);
	}
	,setFloat2: function(location,value1,value2) {
		kha_SystemImpl.gl.uniform2f((js_Boot.__cast(location , kha_js_graphics4_ConstantLocation)).value,value1,value2);
	}
	,setFloat3: function(location,value1,value2,value3) {
		kha_SystemImpl.gl.uniform3f((js_Boot.__cast(location , kha_js_graphics4_ConstantLocation)).value,value1,value2,value3);
	}
	,setFloat4: function(location,value1,value2,value3,value4) {
		kha_SystemImpl.gl.uniform4f((js_Boot.__cast(location , kha_js_graphics4_ConstantLocation)).value,value1,value2,value3,value4);
	}
	,setFloats: function(location,values) {
		var webglLocation = js_Boot.__cast(location , kha_js_graphics4_ConstantLocation);
		switch(webglLocation.type) {
		case 35664:
			kha_SystemImpl.gl.uniform2fv(webglLocation.value,values);
			break;
		case 35665:
			kha_SystemImpl.gl.uniform3fv(webglLocation.value,values);
			break;
		case 35666:
			kha_SystemImpl.gl.uniform4fv(webglLocation.value,values);
			break;
		case 35676:
			kha_SystemImpl.gl.uniformMatrix4fv(webglLocation.value,false,values);
			break;
		default:
			kha_SystemImpl.gl.uniform1fv(webglLocation.value,values);
		}
	}
	,setVector2: function(location,value) {
		kha_SystemImpl.gl.uniform2f((js_Boot.__cast(location , kha_js_graphics4_ConstantLocation)).value,value.x,value.y);
	}
	,setVector3: function(location,value) {
		kha_SystemImpl.gl.uniform3f((js_Boot.__cast(location , kha_js_graphics4_ConstantLocation)).value,value.x,value.y,value.z);
	}
	,setVector4: function(location,value) {
		kha_SystemImpl.gl.uniform4f((js_Boot.__cast(location , kha_js_graphics4_ConstantLocation)).value,value.x,value.y,value.z,value.w);
	}
	,matrixCache: null
	,setMatrix: function(location,matrix) {
		this.matrixCache[0] = matrix._00;
		this.matrixCache[1] = matrix._01;
		this.matrixCache[2] = matrix._02;
		this.matrixCache[3] = matrix._03;
		this.matrixCache[4] = matrix._10;
		this.matrixCache[5] = matrix._11;
		this.matrixCache[6] = matrix._12;
		this.matrixCache[7] = matrix._13;
		this.matrixCache[8] = matrix._20;
		this.matrixCache[9] = matrix._21;
		this.matrixCache[10] = matrix._22;
		this.matrixCache[11] = matrix._23;
		this.matrixCache[12] = matrix._30;
		this.matrixCache[13] = matrix._31;
		this.matrixCache[14] = matrix._32;
		this.matrixCache[15] = matrix._33;
		kha_SystemImpl.gl.uniformMatrix4fv((js_Boot.__cast(location , kha_js_graphics4_ConstantLocation)).value,false,this.matrixCache);
	}
	,matrix3Cache: null
	,setMatrix3: function(location,matrix) {
		this.matrix3Cache[0] = matrix._00;
		this.matrix3Cache[1] = matrix._01;
		this.matrix3Cache[2] = matrix._02;
		this.matrix3Cache[3] = matrix._10;
		this.matrix3Cache[4] = matrix._11;
		this.matrix3Cache[5] = matrix._12;
		this.matrix3Cache[6] = matrix._20;
		this.matrix3Cache[7] = matrix._21;
		this.matrix3Cache[8] = matrix._22;
		kha_SystemImpl.gl.uniformMatrix3fv((js_Boot.__cast(location , kha_js_graphics4_ConstantLocation)).value,false,this.matrix3Cache);
	}
	,drawIndexedVertices: function(start,count) {
		if(count == null) {
			count = -1;
		}
		if(start == null) {
			start = 0;
		}
		var type = kha_SystemImpl.elementIndexUint == null ? 5123 : 5125;
		var size = type == 5123 ? 2 : 4;
		kha_SystemImpl.gl.drawElements(4,count == -1 ? this.indicesCount : count,type,start * size);
		var _g = 0;
		var _g1 = this.useVertexAttributes;
		while(_g < _g1) {
			var i = _g++;
			kha_SystemImpl.gl.disableVertexAttribArray(i);
		}
	}
	,convertStencilAction: function(action) {
		switch(action) {
		case 0:
			return 7680;
		case 1:
			return 0;
		case 2:
			return 7681;
		case 3:
			return 7682;
		case 4:
			return 34055;
		case 5:
			return 7683;
		case 6:
			return 34056;
		case 7:
			return 5386;
		}
	}
	,convertCompareMode: function(compareMode) {
		switch(compareMode) {
		case 0:
			return 519;
		case 1:
			return 512;
		case 2:
			return 514;
		case 3:
			return 517;
		case 4:
			return 513;
		case 5:
			return 515;
		case 6:
			return 516;
		case 7:
			return 518;
		}
	}
	,setStencilParameters: function(compareMode,bothPass,depthFail,stencilFail,referenceValue,readMask,writeMask) {
		if(writeMask == null) {
			writeMask = 255;
		}
		if(readMask == null) {
			readMask = 255;
		}
		if(compareMode == 0 && bothPass == 0 && depthFail == 0 && stencilFail == 0) {
			kha_SystemImpl.gl.disable(2960);
		} else {
			kha_SystemImpl.gl.enable(2960);
			var stencilFunc = this.convertCompareMode(compareMode);
			kha_SystemImpl.gl.stencilMask(writeMask);
			kha_SystemImpl.gl.stencilOp(this.convertStencilAction(stencilFail),this.convertStencilAction(depthFail),this.convertStencilAction(bothPass));
			switch(referenceValue._hx_index) {
			case 0:
				kha_SystemImpl.gl.stencilFunc(stencilFunc,0,readMask);
				break;
			case 1:
				var value = referenceValue.value;
				kha_SystemImpl.gl.stencilFunc(stencilFunc,value,readMask);
				break;
			}
		}
	}
	,drawIndexedVerticesInstanced: function(instanceCount,start,count) {
		if(count == null) {
			count = -1;
		}
		if(start == null) {
			start = 0;
		}
		if(this.instancedRenderingAvailable()) {
			var type = kha_SystemImpl.elementIndexUint == null ? 5123 : 5125;
			var typeSize = kha_SystemImpl.elementIndexUint == null ? 2 : 4;
			if(kha_SystemImpl.gl2) {
				kha_SystemImpl.gl.drawElementsInstanced(4,count == -1 ? this.indicesCount : count,type,start * typeSize,instanceCount);
			} else {
				this.instancedExtension.drawElementsInstancedANGLE(4,count == -1 ? this.indicesCount : count,type,start * typeSize,instanceCount);
			}
		}
	}
	,instancedRenderingAvailable: function() {
		return this.instancedExtension;
	}
	,__class__: kha_js_graphics4_Graphics
};
var kha_js_graphics4_Graphics2 = function(canvas) {
	kha_graphics4_Graphics2.call(this,canvas);
};
$hxClasses["kha.js.graphics4.Graphics2"] = kha_js_graphics4_Graphics2;
kha_js_graphics4_Graphics2.__name__ = "kha.js.graphics4.Graphics2";
kha_js_graphics4_Graphics2.__super__ = kha_graphics4_Graphics2;
kha_js_graphics4_Graphics2.prototype = $extend(kha_graphics4_Graphics2.prototype,{
	drawVideoInternal: function(video,x,y,width,height) {
		var v = js_Boot.__cast(video , kha_js_Video);
		this.drawScaledSubImage(v.texture,0,0,v.texture.get_width(),v.texture.get_height(),x,y,width,height);
	}
	,begin: function(clear,clearColor) {
		if(clear == null) {
			clear = true;
		}
		kha_SystemImpl.gl.colorMask(true,true,true,true);
		kha_SystemImpl.gl.disable(2929);
		kha_SystemImpl.gl.depthFunc(519);
		kha_graphics4_Graphics2.prototype.begin.call(this,clear,clearColor);
	}
	,__class__: kha_js_graphics4_Graphics2
});
var kha_js_graphics4_TextureUnit = function(value) {
	this.value = value;
};
$hxClasses["kha.js.graphics4.TextureUnit"] = kha_js_graphics4_TextureUnit;
kha_js_graphics4_TextureUnit.__name__ = "kha.js.graphics4.TextureUnit";
kha_js_graphics4_TextureUnit.__interfaces__ = [kha_graphics4_TextureUnit];
kha_js_graphics4_TextureUnit.prototype = {
	value: null
	,__class__: kha_js_graphics4_TextureUnit
};
var kha_vr_VrInterface = function() {
};
$hxClasses["kha.vr.VrInterface"] = kha_vr_VrInterface;
kha_vr_VrInterface.__name__ = "kha.vr.VrInterface";
kha_vr_VrInterface.prototype = {
	GetSensorState: function() {
		return null;
	}
	,GetPredictedSensorState: function(time) {
		return null;
	}
	,WarpSwapBlack: function() {
	}
	,WarpSwapLoadingIcon: function() {
	}
	,WarpSwap: function(parms) {
	}
	,IsPresenting: function() {
		return false;
	}
	,IsVrEnabled: function() {
		return false;
	}
	,GetTimeInSeconds: function() {
		return 0.0;
	}
	,GetProjectionMatrix: function(eye) {
		return null;
	}
	,GetViewMatrix: function(eye) {
		return null;
	}
	,onVRRequestPresent: function() {
	}
	,onVRExitPresent: function() {
	}
	,onResetPose: function() {
	}
	,__class__: kha_vr_VrInterface
};
var kha_js_vr_VrInterface = function() {
	this.vrHeight = 0;
	this.vrWidth = 0;
	this.height = 0;
	this.width = 0;
	this.rightViewMatrix = new kha_math_FastMatrix4(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);
	this.leftViewMatrix = new kha_math_FastMatrix4(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);
	this.rightProjectionMatrix = new kha_math_FastMatrix4(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);
	this.leftProjectionMatrix = new kha_math_FastMatrix4(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);
	this.vrEnabled = false;
	kha_vr_VrInterface.call(this);
	var displayEnabled = false;
	if(displayEnabled) {
		this.vrEnabled = true;
		this.getVRDisplays();
		haxe_Log.trace("Display enabled.",{ fileName : "kha/js/vr/VrInterface.hx", lineNumber : 39, className : "kha.js.vr.VrInterface", methodName : "new"});
	}
};
$hxClasses["kha.js.vr.VrInterface"] = kha_js_vr_VrInterface;
kha_js_vr_VrInterface.__name__ = "kha.js.vr.VrInterface";
kha_js_vr_VrInterface.__super__ = kha_vr_VrInterface;
kha_js_vr_VrInterface.prototype = $extend(kha_vr_VrInterface.prototype,{
	vrEnabled: null
	,vrDisplay: null
	,frameData: null
	,leftProjectionMatrix: null
	,rightProjectionMatrix: null
	,leftViewMatrix: null
	,rightViewMatrix: null
	,width: null
	,height: null
	,vrWidth: null
	,vrHeight: null
	,getVRDisplays: function() {
		var _gthis = this;
		var vrDisplayInstance = navigator.getVRDisplays();
		vrDisplayInstance.then(function(displays) {
			if(displays.length > 0) {
				_gthis.frameData = new VRFrameData();
				_gthis.vrDisplay = displays[0];
				_gthis.vrDisplay.depthNear = 0.1;
				_gthis.vrDisplay.depthFar = 1024.0;
				var leftEye = _gthis.vrDisplay.getEyeParameters("left");
				var rightEye = _gthis.vrDisplay.getEyeParameters("right");
				_gthis.width = kha_SystemImpl.khanvas.width;
				_gthis.height = kha_SystemImpl.khanvas.height;
				_gthis.vrWidth = Math.max(leftEye.renderWidth,rightEye.renderWidth) * 2 | 0;
				_gthis.vrHeight = Math.max(leftEye.renderHeight,rightEye.renderHeight) | 0;
			} else {
				haxe_Log.trace("There are no VR displays connected.",{ fileName : "kha/js/vr/VrInterface.hx", lineNumber : 59, className : "kha.js.vr.VrInterface", methodName : "getVRDisplays"});
			}
		});
	}
	,onVRRequestPresent: function() {
		var _gthis = this;
		try {
			this.vrDisplay.requestPresent([{ source : kha_SystemImpl.khanvas}]).then(function() {
				_gthis.onResize();
				_gthis.vrDisplay.requestAnimationFrame($bind(_gthis,_gthis.onAnimationFrame));
			});
		} catch( err ) {
			haxe_CallStack.lastException = err;
			var err1 = ((err) instanceof js__$Boot_HaxeError) ? err.val : err;
			haxe_Log.trace("Failed to requestPresent.",{ fileName : "kha/js/vr/VrInterface.hx", lineNumber : 71, className : "kha.js.vr.VrInterface", methodName : "onVRRequestPresent"});
			haxe_Log.trace(err1,{ fileName : "kha/js/vr/VrInterface.hx", lineNumber : 72, className : "kha.js.vr.VrInterface", methodName : "onVRRequestPresent"});
		}
	}
	,onVRExitPresent: function() {
		var _gthis = this;
		try {
			this.vrDisplay.exitPresent([{ source : kha_SystemImpl.khanvas}]).then(function() {
				_gthis.onResize();
			});
		} catch( err ) {
			haxe_CallStack.lastException = err;
			var err1 = ((err) instanceof js__$Boot_HaxeError) ? err.val : err;
			haxe_Log.trace("Failed to exitPresent.",{ fileName : "kha/js/vr/VrInterface.hx", lineNumber : 82, className : "kha.js.vr.VrInterface", methodName : "onVRExitPresent"});
			haxe_Log.trace(err1,{ fileName : "kha/js/vr/VrInterface.hx", lineNumber : 83, className : "kha.js.vr.VrInterface", methodName : "onVRExitPresent"});
		}
	}
	,onResetPose: function() {
		try {
			this.vrDisplay.resetPose();
		} catch( err ) {
			haxe_CallStack.lastException = err;
			var err1 = ((err) instanceof js__$Boot_HaxeError) ? err.val : err;
			haxe_Log.trace("Failed to resetPose",{ fileName : "kha/js/vr/VrInterface.hx", lineNumber : 91, className : "kha.js.vr.VrInterface", methodName : "onResetPose"});
			haxe_Log.trace(err1,{ fileName : "kha/js/vr/VrInterface.hx", lineNumber : 92, className : "kha.js.vr.VrInterface", methodName : "onResetPose"});
		}
	}
	,onAnimationFrame: function(timestamp) {
		if(this.vrDisplay != null && this.vrDisplay.isPresenting) {
			this.vrDisplay.requestAnimationFrame($bind(this,this.onAnimationFrame));
			this.vrDisplay.getFrameData(this.frameData);
			this.leftProjectionMatrix = this.createMatrixFromArray(this.frameData.leftProjectionMatrix);
			this.leftViewMatrix = this.createMatrixFromArray(this.frameData.leftViewMatrix);
			this.rightProjectionMatrix = this.createMatrixFromArray(this.frameData.rightProjectionMatrix);
			this.rightViewMatrix = this.createMatrixFromArray(this.frameData.rightViewMatrix);
			this.vrDisplay.submitFrame();
		}
	}
	,onResize: function() {
		if(this.vrDisplay != null && this.vrDisplay.isPresenting) {
			kha_SystemImpl.khanvas.width = this.vrWidth;
			kha_SystemImpl.khanvas.height = this.vrHeight;
		} else {
			kha_SystemImpl.khanvas.width = this.width;
			kha_SystemImpl.khanvas.height = this.height;
		}
	}
	,GetSensorState: function() {
		return this.GetPredictedSensorState(0.0);
	}
	,GetPredictedSensorState: function(time) {
		var result = new kha_vr_SensorState();
		result.Predicted = new kha_vr_PoseState();
		result.Recorded = result.Predicted;
		result.Predicted.AngularAcceleration = new kha_math_Vector3();
		result.Predicted.AngularVelocity = new kha_math_Vector3();
		result.Predicted.LinearAcceleration = new kha_math_Vector3();
		result.Predicted.LinearVelocity = new kha_math_Vector3();
		result.Predicted.TimeInSeconds = time;
		result.Predicted.Pose = new kha_vr_Pose();
		result.Predicted.Pose.Orientation = new kha_math_Quaternion();
		result.Predicted.Pose.Position = new kha_math_Vector3();
		var mPose = this.frameData.pose;
		if(mPose != null) {
			result.Predicted.AngularVelocity = this.createVectorFromArray(mPose.angularVelocity);
			result.Predicted.AngularAcceleration = this.createVectorFromArray(mPose.angularAcceleration);
			result.Predicted.LinearVelocity = this.createVectorFromArray(mPose.linearVelocity);
			result.Predicted.LinearAcceleration = this.createVectorFromArray(mPose.linearAcceleration);
			result.Predicted.Pose.Orientation = this.createQuaternion(mPose.orientation);
			result.Predicted.Pose.Position = this.createVectorFromArray(mPose.position);
		}
		return result;
	}
	,WarpSwapBlack: function() {
	}
	,WarpSwapLoadingIcon: function() {
	}
	,WarpSwap: function(parms) {
	}
	,IsPresenting: function() {
		if(this.vrDisplay != null) {
			return this.vrDisplay.isPresenting;
		}
		return false;
	}
	,IsVrEnabled: function() {
		return this.vrEnabled;
	}
	,GetTimeInSeconds: function() {
		return kha_Scheduler.time();
	}
	,GetProjectionMatrix: function(eye) {
		if(eye == 0) {
			return this.leftProjectionMatrix;
		} else {
			return this.rightProjectionMatrix;
		}
	}
	,GetViewMatrix: function(eye) {
		if(eye == 0) {
			return this.leftViewMatrix;
		} else {
			return this.rightViewMatrix;
		}
	}
	,createMatrixFromArray: function(array) {
		var matrix = new kha_math_FastMatrix4(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);
		matrix._00 = array[0];
		matrix._01 = array[1];
		matrix._02 = array[2];
		matrix._03 = array[3];
		matrix._10 = array[4];
		matrix._11 = array[5];
		matrix._12 = array[6];
		matrix._13 = array[7];
		matrix._20 = array[8];
		matrix._21 = array[9];
		matrix._22 = array[10];
		matrix._23 = array[11];
		matrix._30 = array[12];
		matrix._31 = array[13];
		matrix._32 = array[14];
		matrix._33 = array[15];
		return matrix;
	}
	,createVectorFromArray: function(array) {
		var vector = new kha_math_Vector3(0,0,0);
		if(array != null) {
			vector.x = array[0];
			vector.y = array[1];
			vector.z = array[2];
		}
		return vector;
	}
	,createQuaternion: function(array) {
		var quaternion = new kha_math_Quaternion(0,0,0,0);
		if(array != null) {
			quaternion.set_x(array[0]);
			quaternion.set_y(array[1]);
			quaternion.set_z(array[2]);
			quaternion.set_w(array[3]);
		}
		return quaternion;
	}
	,__class__: kha_js_vr_VrInterface
});
var kha_math_FastMatrix3 = function(_00,_10,_20,_01,_11,_21,_02,_12,_22) {
	this._00 = _00;
	this._10 = _10;
	this._20 = _20;
	this._01 = _01;
	this._11 = _11;
	this._21 = _21;
	this._02 = _02;
	this._12 = _12;
	this._22 = _22;
};
$hxClasses["kha.math.FastMatrix3"] = kha_math_FastMatrix3;
kha_math_FastMatrix3.__name__ = "kha.math.FastMatrix3";
kha_math_FastMatrix3.fromMatrix3 = function(m) {
	return new kha_math_FastMatrix3(m._00,m._10,m._20,m._01,m._11,m._21,m._02,m._12,m._22);
};
kha_math_FastMatrix3.prototype = {
	_00: null
	,_10: null
	,_20: null
	,_01: null
	,_11: null
	,_21: null
	,_02: null
	,_12: null
	,_22: null
	,__class__: kha_math_FastMatrix3
};
var kha_math_FastMatrix4 = function(_00,_10,_20,_30,_01,_11,_21,_31,_02,_12,_22,_32,_03,_13,_23,_33) {
	this._00 = _00;
	this._10 = _10;
	this._20 = _20;
	this._30 = _30;
	this._01 = _01;
	this._11 = _11;
	this._21 = _21;
	this._31 = _31;
	this._02 = _02;
	this._12 = _12;
	this._22 = _22;
	this._32 = _32;
	this._03 = _03;
	this._13 = _13;
	this._23 = _23;
	this._33 = _33;
};
$hxClasses["kha.math.FastMatrix4"] = kha_math_FastMatrix4;
kha_math_FastMatrix4.__name__ = "kha.math.FastMatrix4";
kha_math_FastMatrix4.fromMatrix4 = function(m) {
	return new kha_math_FastMatrix4(m._00,m._10,m._20,m._30,m._01,m._11,m._21,m._31,m._02,m._12,m._22,m._32,m._03,m._13,m._23,m._33);
};
kha_math_FastMatrix4.orthogonalProjection = function(left,right,bottom,top,zn,zf) {
	var tx = -(right + left) / (right - left);
	var ty = -(top + bottom) / (top - bottom);
	var tz = -(zf + zn) / (zf - zn);
	return new kha_math_FastMatrix4(2 / (right - left),0,0,tx,0,2.0 / (top - bottom),0,ty,0,0,-2 / (zf - zn),tz,0,0,0,1);
};
kha_math_FastMatrix4.perspectiveProjection = function(fovY,aspect,zn,zf) {
	var uh = 1.0 / Math.tan(fovY / 2);
	var uw = uh / aspect;
	return new kha_math_FastMatrix4(uw,0,0,0,0,uh,0,0,0,0,(zf + zn) / (zn - zf),2 * zf * zn / (zn - zf),0,0,-1,0);
};
kha_math_FastMatrix4.lookAt = function(eye,at,up) {
	var _this_x = at.x - eye.x;
	var _this_y = at.y - eye.y;
	var _this_z = at.z - eye.z;
	var zaxis_x = _this_x;
	var zaxis_y = _this_y;
	var zaxis_z = _this_z;
	var currentLength = Math.sqrt(zaxis_x * zaxis_x + zaxis_y * zaxis_y + zaxis_z * zaxis_z);
	if(currentLength != 0) {
		var mul = 1 / currentLength;
		zaxis_x *= mul;
		zaxis_y *= mul;
		zaxis_z *= mul;
	}
	var _x = zaxis_y * up.z - zaxis_z * up.y;
	var _y = zaxis_z * up.x - zaxis_x * up.z;
	var _z = zaxis_x * up.y - zaxis_y * up.x;
	var _this_x1 = _x;
	var _this_y1 = _y;
	var _this_z1 = _z;
	var xaxis_x = _this_x1;
	var xaxis_y = _this_y1;
	var xaxis_z = _this_z1;
	var currentLength1 = Math.sqrt(xaxis_x * xaxis_x + xaxis_y * xaxis_y + xaxis_z * xaxis_z);
	if(currentLength1 != 0) {
		var mul1 = 1 / currentLength1;
		xaxis_x *= mul1;
		xaxis_y *= mul1;
		xaxis_z *= mul1;
	}
	var _x1 = xaxis_y * zaxis_z - xaxis_z * zaxis_y;
	var _y1 = xaxis_z * zaxis_x - xaxis_x * zaxis_z;
	var _z1 = xaxis_x * zaxis_y - xaxis_y * zaxis_x;
	var yaxis_x = _x1;
	var yaxis_y = _y1;
	var yaxis_z = _z1;
	return new kha_math_FastMatrix4(xaxis_x,xaxis_y,xaxis_z,-(xaxis_x * eye.x + xaxis_y * eye.y + xaxis_z * eye.z),yaxis_x,yaxis_y,yaxis_z,-(yaxis_x * eye.x + yaxis_y * eye.y + yaxis_z * eye.z),-zaxis_x,-zaxis_y,-zaxis_z,zaxis_x * eye.x + zaxis_y * eye.y + zaxis_z * eye.z,0,0,0,1);
};
kha_math_FastMatrix4.prototype = {
	_00: null
	,_10: null
	,_20: null
	,_30: null
	,_01: null
	,_11: null
	,_21: null
	,_31: null
	,_02: null
	,_12: null
	,_22: null
	,_32: null
	,_03: null
	,_13: null
	,_23: null
	,_33: null
	,__class__: kha_math_FastMatrix4
};
var kha_math_FastVector2 = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
};
$hxClasses["kha.math.FastVector2"] = kha_math_FastVector2;
kha_math_FastVector2.__name__ = "kha.math.FastVector2";
kha_math_FastVector2.fromVector2 = function(v) {
	return new kha_math_FastVector2(v.x,v.y);
};
kha_math_FastVector2.prototype = {
	x: null
	,y: null
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,set_length: function(length) {
		var currentLength = Math.sqrt(this.x * this.x + this.y * this.y);
		if(currentLength == 0) {
			return 0;
		}
		var mul = length / currentLength;
		this.x *= mul;
		this.y *= mul;
		return length;
	}
	,toString: function() {
		return "FastVector2(" + this.x + ", " + this.y + ")";
	}
	,__class__: kha_math_FastVector2
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var kha_math_FastVector3 = function(x,y,z) {
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.z = z;
};
$hxClasses["kha.math.FastVector3"] = kha_math_FastVector3;
kha_math_FastVector3.__name__ = "kha.math.FastVector3";
kha_math_FastVector3.fromVector3 = function(v) {
	return new kha_math_FastVector3(v.x,v.y,v.z);
};
kha_math_FastVector3.prototype = {
	x: null
	,y: null
	,z: null
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
	}
	,set_length: function(length) {
		var currentLength = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
		if(currentLength == 0) {
			return 0;
		}
		var mul = length / currentLength;
		this.x *= mul;
		this.y *= mul;
		this.z *= mul;
		return length;
	}
	,toString: function() {
		return "FastVector3(" + this.x + ", " + this.y + ", " + this.z + ")";
	}
	,__class__: kha_math_FastVector3
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var kha_math_FastVector4 = function(x,y,z,w) {
	if(w == null) {
		w = 1;
	}
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.z = z;
	this.w = w;
};
$hxClasses["kha.math.FastVector4"] = kha_math_FastVector4;
kha_math_FastVector4.__name__ = "kha.math.FastVector4";
kha_math_FastVector4.fromVector4 = function(v) {
	return new kha_math_FastVector4(v.x,v.y,v.z,v.w);
};
kha_math_FastVector4.prototype = {
	x: null
	,y: null
	,z: null
	,w: null
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
	}
	,set_length: function(length) {
		var currentLength = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
		if(currentLength == 0) {
			return 0;
		}
		var mul = length / currentLength;
		this.x *= mul;
		this.y *= mul;
		this.z *= mul;
		this.w *= mul;
		return length;
	}
	,toString: function() {
		return "FastVector4(" + this.x + ", " + this.y + ", " + this.z + ", " + this.w + ")";
	}
	,__class__: kha_math_FastVector4
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var kha_math_Matrix3 = function(_00,_10,_20,_01,_11,_21,_02,_12,_22) {
	this._00 = _00;
	this._10 = _10;
	this._20 = _20;
	this._01 = _01;
	this._11 = _11;
	this._21 = _21;
	this._02 = _02;
	this._12 = _12;
	this._22 = _22;
};
$hxClasses["kha.math.Matrix3"] = kha_math_Matrix3;
kha_math_Matrix3.__name__ = "kha.math.Matrix3";
kha_math_Matrix3.fromFastMatrix3 = function(m) {
	return new kha_math_Matrix3(m._00,m._10,m._20,m._01,m._11,m._21,m._02,m._12,m._22);
};
kha_math_Matrix3.prototype = {
	_00: null
	,_10: null
	,_20: null
	,_01: null
	,_11: null
	,_21: null
	,_02: null
	,_12: null
	,_22: null
	,__class__: kha_math_Matrix3
};
var kha_math_Matrix4 = function(_00,_10,_20,_30,_01,_11,_21,_31,_02,_12,_22,_32,_03,_13,_23,_33) {
	this._00 = _00;
	this._10 = _10;
	this._20 = _20;
	this._30 = _30;
	this._01 = _01;
	this._11 = _11;
	this._21 = _21;
	this._31 = _31;
	this._02 = _02;
	this._12 = _12;
	this._22 = _22;
	this._32 = _32;
	this._03 = _03;
	this._13 = _13;
	this._23 = _23;
	this._33 = _33;
};
$hxClasses["kha.math.Matrix4"] = kha_math_Matrix4;
kha_math_Matrix4.__name__ = "kha.math.Matrix4";
kha_math_Matrix4.fromFastMatrix4 = function(m) {
	return new kha_math_Matrix4(m._00,m._10,m._20,m._30,m._01,m._11,m._21,m._31,m._02,m._12,m._22,m._32,m._03,m._13,m._23,m._33);
};
kha_math_Matrix4.orthogonalProjection = function(left,right,bottom,top,zn,zf) {
	var tx = -(right + left) / (right - left);
	var ty = -(top + bottom) / (top - bottom);
	var tz = -(zf + zn) / (zf - zn);
	return new kha_math_Matrix4(2 / (right - left),0,0,tx,0,2 / (top - bottom),0,ty,0,0,-2 / (zf - zn),tz,0,0,0,1);
};
kha_math_Matrix4.perspectiveProjection = function(fovY,aspect,zn,zf) {
	var uh = 1.0 / Math.tan(fovY / 2);
	var uw = uh / aspect;
	return new kha_math_Matrix4(uw,0,0,0,0,uh,0,0,0,0,(zf + zn) / (zn - zf),2 * zf * zn / (zn - zf),0,0,-1,0);
};
kha_math_Matrix4.lookAt = function(eye,at,up) {
	var _this_x = at.x - eye.x;
	var _this_y = at.y - eye.y;
	var _this_z = at.z - eye.z;
	var zaxis_x = _this_x;
	var zaxis_y = _this_y;
	var zaxis_z = _this_z;
	var currentLength = Math.sqrt(zaxis_x * zaxis_x + zaxis_y * zaxis_y + zaxis_z * zaxis_z);
	if(currentLength != 0) {
		var mul = 1 / currentLength;
		zaxis_x *= mul;
		zaxis_y *= mul;
		zaxis_z *= mul;
	}
	var _x = zaxis_y * up.z - zaxis_z * up.y;
	var _y = zaxis_z * up.x - zaxis_x * up.z;
	var _z = zaxis_x * up.y - zaxis_y * up.x;
	var _this_x1 = _x;
	var _this_y1 = _y;
	var _this_z1 = _z;
	var xaxis_x = _this_x1;
	var xaxis_y = _this_y1;
	var xaxis_z = _this_z1;
	var currentLength1 = Math.sqrt(xaxis_x * xaxis_x + xaxis_y * xaxis_y + xaxis_z * xaxis_z);
	if(currentLength1 != 0) {
		var mul1 = 1 / currentLength1;
		xaxis_x *= mul1;
		xaxis_y *= mul1;
		xaxis_z *= mul1;
	}
	var _x1 = xaxis_y * zaxis_z - xaxis_z * zaxis_y;
	var _y1 = xaxis_z * zaxis_x - xaxis_x * zaxis_z;
	var _z1 = xaxis_x * zaxis_y - xaxis_y * zaxis_x;
	var yaxis_x = _x1;
	var yaxis_y = _y1;
	var yaxis_z = _z1;
	return new kha_math_Matrix4(xaxis_x,xaxis_y,xaxis_z,-(xaxis_x * eye.x + xaxis_y * eye.y + xaxis_z * eye.z),yaxis_x,yaxis_y,yaxis_z,-(yaxis_x * eye.x + yaxis_y * eye.y + yaxis_z * eye.z),-zaxis_x,-zaxis_y,-zaxis_z,zaxis_x * eye.x + zaxis_y * eye.y + zaxis_z * eye.z,0,0,0,1);
};
kha_math_Matrix4.prototype = {
	_00: null
	,_10: null
	,_20: null
	,_30: null
	,_01: null
	,_11: null
	,_21: null
	,_31: null
	,_02: null
	,_12: null
	,_22: null
	,_32: null
	,_03: null
	,_13: null
	,_23: null
	,_33: null
	,__class__: kha_math_Matrix4
};
var kha_math_Quaternion = function(x,y,z,w) {
	if(w == null) {
		w = 1;
	}
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.values = [];
	this.values.push(x);
	this.values.push(y);
	this.values.push(z);
	this.values.push(w);
};
$hxClasses["kha.math.Quaternion"] = kha_math_Quaternion;
kha_math_Quaternion.__name__ = "kha.math.Quaternion";
kha_math_Quaternion.fromAxisAngle = function(axis,radians) {
	var q = new kha_math_Quaternion();
	q.set_w(Math.cos(radians / 2.0));
	q.set_x(q.set_y(q.set_z(Math.sin(radians / 2.0))));
	var _g = q;
	_g.set_x(_g.get_x() * axis.x);
	var _g1 = q;
	_g1.set_y(_g1.get_y() * axis.y);
	var _g2 = q;
	_g2.set_z(_g2.get_z() * axis.z);
	return q;
};
kha_math_Quaternion.prototype = {
	values: null
	,slerp: function(t,q) {
		var epsilon = 0.0005;
		var dot = this.get_x() * q.get_x() + this.get_y() * q.get_y() + this.get_z() * q.get_z() + this.get_w() * q.get_w();
		if(dot > 1 - epsilon) {
			var _this = new kha_math_Quaternion(this.get_x() - q.get_x(),this.get_y() - q.get_y(),this.get_z() - q.get_z(),this.get_w() - q.get_w());
			var q1 = new kha_math_Quaternion(_this.get_x() * t,_this.get_y() * t,_this.get_z() * t,_this.get_w() * t);
			var result = new kha_math_Quaternion(q.get_x() + q1.get_x(),q.get_y() + q1.get_y(),q.get_z() + q1.get_z(),q.get_w() + q1.get_w());
			var scale = 1.0 / result.get_length();
			result.set_x(result.get_x() * scale);
			result.set_y(result.get_y() * scale);
			result.set_z(result.get_z() * scale);
			result.set_w(result.get_w() * scale);
			return result;
		}
		if(dot < 0) {
			dot = 0;
		}
		if(dot > 1) {
			dot = 1;
		}
		var theta0 = Math.acos(dot);
		var theta = theta0 * t;
		var q2 = new kha_math_Quaternion(this.get_x() * dot,this.get_y() * dot,this.get_z() * dot,this.get_w() * dot);
		var q21 = new kha_math_Quaternion(q.get_x() - q2.get_x(),q.get_y() - q2.get_y(),q.get_z() - q2.get_z(),q.get_w() - q2.get_w());
		var scale1 = 1.0 / q21.get_length();
		q21.set_x(q21.get_x() * scale1);
		q21.set_y(q21.get_y() * scale1);
		q21.set_z(q21.get_z() * scale1);
		q21.set_w(q21.get_w() * scale1);
		var scale2 = Math.cos(theta);
		var _this1 = new kha_math_Quaternion(this.get_x() * scale2,this.get_y() * scale2,this.get_z() * scale2,this.get_w() * scale2);
		var scale3 = Math.sin(theta);
		var q3 = new kha_math_Quaternion(q21.get_x() * scale3,q21.get_y() * scale3,q21.get_z() * scale3,q21.get_w() * scale3);
		var result1 = new kha_math_Quaternion(_this1.get_x() + q3.get_x(),_this1.get_y() + q3.get_y(),_this1.get_z() + q3.get_z(),_this1.get_w() + q3.get_w());
		var scale4 = 1.0 / result1.get_length();
		result1.set_x(result1.get_x() * scale4);
		result1.set_y(result1.get_y() * scale4);
		result1.set_z(result1.get_z() * scale4);
		result1.set_w(result1.get_w() * scale4);
		return result1;
	}
	,rotated: function(b) {
		var q = new kha_math_Quaternion();
		q.set_w(this.get_w() * b.get_w() - this.get_x() * b.get_x() - this.get_y() * b.get_y() - this.get_z() * b.get_z());
		q.set_x(this.get_w() * b.get_x() + this.get_x() * b.get_w() + this.get_y() * b.get_z() - this.get_z() * b.get_y());
		q.set_y(this.get_w() * b.get_y() + this.get_y() * b.get_w() + this.get_z() * b.get_x() - this.get_x() * b.get_z());
		q.set_z(this.get_w() * b.get_z() + this.get_z() * b.get_w() + this.get_x() * b.get_y() - this.get_y() * b.get_x());
		var scale = 1.0 / q.get_length();
		q.set_x(q.get_x() * scale);
		q.set_y(q.get_y() * scale);
		q.set_z(q.get_z() * scale);
		q.set_w(q.get_w() * scale);
		return q;
	}
	,scaled: function(scale) {
		return new kha_math_Quaternion(this.get_x() * scale,this.get_y() * scale,this.get_z() * scale,this.get_w() * scale);
	}
	,scale: function(scale) {
		this.set_x(this.get_x() * scale);
		this.set_y(this.get_y() * scale);
		this.set_z(this.get_z() * scale);
		this.set_w(this.get_w() * scale);
	}
	,matrix: function() {
		var s = 2.0;
		var xs = this.get_x() * s;
		var ys = this.get_y() * s;
		var zs = this.get_z() * s;
		var wx = this.get_w() * xs;
		var wy = this.get_w() * ys;
		var wz = this.get_w() * zs;
		var xx = this.get_x() * xs;
		var xy = this.get_x() * ys;
		var xz = this.get_x() * zs;
		var yy = this.get_y() * ys;
		var yz = this.get_y() * zs;
		var zz = this.get_z() * zs;
		return new kha_math_Matrix4(1 - (yy + zz),xy - wz,xz + wy,0,xy + wz,1 - (xx + zz),yz - wx,0,xz - wy,yz + wx,1 - (xx + yy),0,0,0,0,1);
	}
	,get: function(index) {
		return this.values[index];
	}
	,set: function(index,value) {
		this.values[index] = value;
	}
	,get_x: function() {
		return this.values[0];
	}
	,set_x: function(value) {
		return this.values[0] = value;
	}
	,get_y: function() {
		return this.values[1];
	}
	,set_y: function(value) {
		return this.values[1] = value;
	}
	,get_z: function() {
		return this.values[2];
	}
	,set_z: function(value) {
		return this.values[2] = value;
	}
	,get_w: function() {
		return this.values[3];
	}
	,set_w: function(value) {
		return this.values[3] = value;
	}
	,get_length: function() {
		return Math.sqrt(this.get_x() * this.get_x() + this.get_y() * this.get_y() + this.get_z() * this.get_z() + this.get_w() * this.get_w());
	}
	,set_length: function(length) {
		if(this.get_length() == 0) {
			return 0;
		}
		var mul = length / this.get_length();
		var _g = this;
		_g.set_x(_g.get_x() * mul);
		var _g1 = this;
		_g1.set_y(_g1.get_y() * mul);
		var _g2 = this;
		_g2.set_z(_g2.get_z() * mul);
		return length;
	}
	,addVector: function(vec) {
		var result = new kha_math_Quaternion(this.get_x(),this.get_y(),this.get_z(),this.get_w());
		var q1 = new kha_math_Quaternion(0,vec.x,vec.y,vec.z);
		var q = new kha_math_Quaternion();
		q.set_x(q1.get_w() * result.get_x() + q1.get_x() * result.get_w() + q1.get_y() * result.get_z() - q1.get_z() * result.get_y());
		q.set_y(q1.get_w() * result.get_y() - q1.get_x() * result.get_z() + q1.get_y() * result.get_w() + q1.get_z() * result.get_x());
		q.set_z(q1.get_w() * result.get_z() + q1.get_x() * result.get_y() - q1.get_y() * result.get_x() + q1.get_z() * result.get_w());
		q.set_w(q1.get_w() * result.get_w() - q1.get_x() * result.get_x() - q1.get_y() * result.get_y() - q1.get_z() * result.get_z());
		q1 = q;
		var _g = result;
		_g.set_x(_g.get_x() + q1.get_x() * 0.5);
		var _g1 = result;
		_g1.set_y(_g1.get_y() + q1.get_y() * 0.5);
		var _g2 = result;
		_g2.set_z(_g2.get_z() + q1.get_z() * 0.5);
		var _g3 = result;
		_g3.set_w(_g3.get_w() + q1.get_w() * 0.5);
		return result;
	}
	,add: function(q) {
		return new kha_math_Quaternion(this.get_x() + q.get_x(),this.get_y() + q.get_y(),this.get_z() + q.get_z(),this.get_w() + q.get_w());
	}
	,sub: function(q) {
		return new kha_math_Quaternion(this.get_x() - q.get_x(),this.get_y() - q.get_y(),this.get_z() - q.get_z(),this.get_w() - q.get_w());
	}
	,mult: function(r) {
		var q = new kha_math_Quaternion();
		q.set_x(this.get_w() * r.get_x() + this.get_x() * r.get_w() + this.get_y() * r.get_z() - this.get_z() * r.get_y());
		q.set_y(this.get_w() * r.get_y() - this.get_x() * r.get_z() + this.get_y() * r.get_w() + this.get_z() * r.get_x());
		q.set_z(this.get_w() * r.get_z() + this.get_x() * r.get_y() - this.get_y() * r.get_x() + this.get_z() * r.get_w());
		q.set_w(this.get_w() * r.get_w() - this.get_x() * r.get_x() - this.get_y() * r.get_y() - this.get_z() * r.get_z());
		return q;
	}
	,normalize: function() {
		var scale = 1.0 / this.get_length();
		this.set_x(this.get_x() * scale);
		this.set_y(this.get_y() * scale);
		this.set_z(this.get_z() * scale);
		this.set_w(this.get_w() * scale);
	}
	,dot: function(q) {
		return this.get_x() * q.get_x() + this.get_y() * q.get_y() + this.get_z() * q.get_z() + this.get_w() * q.get_w();
	}
	,getEulerAngles: function(A1,A2,A3,S,D) {
		if(D == null) {
			D = 1;
		}
		if(S == null) {
			S = 1;
		}
		var result = new kha_math_Vector3();
		var Q = [];
		Q[0] = this.get_x();
		Q[1] = this.get_y();
		Q[2] = this.get_z();
		var ww = this.get_w() * this.get_w();
		var Q11 = Q[A1] * Q[A1];
		var Q22 = Q[A2] * Q[A2];
		var Q33 = Q[A3] * Q[A3];
		var psign = -1;
		var SingularityRadius = 0.0000001;
		var PiOver2 = Math.PI / 2.0;
		if((A1 + 1) % 3 == A2 && (A2 + 1) % 3 == A3) {
			psign = 1;
		}
		var s2 = psign * 2.0 * (psign * this.get_w() * Q[A2] + Q[A1] * Q[A3]);
		if(s2 < -1 + SingularityRadius) {
			result.x = 0;
			result.y = -S * D * PiOver2;
			result.z = S * D * Math.atan2(2 * (psign * Q[A1] * Q[A2] + this.get_w() * Q[A3]),ww + Q22 - Q11 - Q33);
		} else if(s2 > 1 - SingularityRadius) {
			result.x = 0;
			result.y = S * D * PiOver2;
			result.z = S * D * Math.atan2(2 * (psign * Q[A1] * Q[A2] + this.get_w() * Q[A3]),ww + Q22 - Q11 - Q33);
		} else {
			result.x = -S * D * Math.atan2(-2 * (this.get_w() * Q[A1] - psign * Q[A2] * Q[A3]),ww + Q33 - Q11 - Q22);
			result.y = S * D * Math.asin(s2);
			result.z = S * D * Math.atan2(2 * (this.get_w() * Q[A3] - psign * Q[A1] * Q[A2]),ww + Q11 - Q22 - Q33);
		}
		return result;
	}
	,__class__: kha_math_Quaternion
	,__properties__: {set_length:"set_length",get_length:"get_length",set_w:"set_w",get_w:"get_w",set_z:"set_z",get_z:"get_z",set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x"}
};
var kha_math_Vector2 = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
};
$hxClasses["kha.math.Vector2"] = kha_math_Vector2;
kha_math_Vector2.__name__ = "kha.math.Vector2";
kha_math_Vector2.prototype = {
	x: null
	,y: null
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,set_length: function(length) {
		var currentLength = Math.sqrt(this.x * this.x + this.y * this.y);
		if(currentLength == 0) {
			return 0;
		}
		var mul = length / currentLength;
		this.x *= mul;
		this.y *= mul;
		return length;
	}
	,__class__: kha_math_Vector2
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var kha_math_Vector3 = function(x,y,z) {
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.z = z;
};
$hxClasses["kha.math.Vector3"] = kha_math_Vector3;
kha_math_Vector3.__name__ = "kha.math.Vector3";
kha_math_Vector3.prototype = {
	x: null
	,y: null
	,z: null
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
	}
	,set_length: function(length) {
		var currentLength = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
		if(currentLength == 0) {
			return 0;
		}
		var mul = length / currentLength;
		this.x *= mul;
		this.y *= mul;
		this.z *= mul;
		return length;
	}
	,__class__: kha_math_Vector3
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var kha_math_Vector4 = function(x,y,z,w) {
	if(w == null) {
		w = 1;
	}
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.z = z;
	this.w = w;
};
$hxClasses["kha.math.Vector4"] = kha_math_Vector4;
kha_math_Vector4.__name__ = "kha.math.Vector4";
kha_math_Vector4.prototype = {
	x: null
	,y: null
	,z: null
	,w: null
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
	}
	,set_length: function(length) {
		var currentLength = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
		if(currentLength == 0) {
			return 0;
		}
		var mul = length / currentLength;
		this.x *= mul;
		this.y *= mul;
		this.z *= mul;
		this.w *= mul;
		return length;
	}
	,__class__: kha_math_Vector4
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var kha_netsync_Client = function() { };
$hxClasses["kha.netsync.Client"] = kha_netsync_Client;
kha_netsync_Client.__name__ = "kha.netsync.Client";
kha_netsync_Client.prototype = {
	get_id: null
	,id: null
	,send: null
	,receive: null
	,onClose: null
	,__class__: kha_netsync_Client
	,__properties__: {get_id:"get_id"}
};
var kha_netsync_ControllerBuilder = function() { };
$hxClasses["kha.netsync.ControllerBuilder"] = kha_netsync_ControllerBuilder;
kha_netsync_ControllerBuilder.__name__ = "kha.netsync.ControllerBuilder";
var kha_netsync_Entity = function() { };
$hxClasses["kha.netsync.Entity"] = kha_netsync_Entity;
kha_netsync_Entity.__name__ = "kha.netsync.Entity";
kha_netsync_Entity.prototype = {
	_id: null
	,_size: null
	,_send: null
	,_receive: null
	,__class__: kha_netsync_Entity
};
var kha_netsync_LocalClient = function(id) {
	this.myId = id;
};
$hxClasses["kha.netsync.LocalClient"] = kha_netsync_LocalClient;
kha_netsync_LocalClient.__name__ = "kha.netsync.LocalClient";
kha_netsync_LocalClient.__interfaces__ = [kha_netsync_Client];
kha_netsync_LocalClient.prototype = {
	myId: null
	,send: function(bytes,mandatory) {
	}
	,receive: function(receiver) {
	}
	,onClose: function(close) {
	}
	,controllers: null
	,get_controllers: function() {
		return null;
	}
	,id: null
	,get_id: function() {
		return this.myId;
	}
	,__class__: kha_netsync_LocalClient
	,__properties__: {get_id:"get_id",get_controllers:"get_controllers"}
};
var kha_netsync_Network = function(url,port,errorCallback,closeCallback) {
	this.open = false;
	var _gthis = this;
	this.socket = new WebSocket("ws://" + url + ":" + port);
	this.socket.onerror = function(error) {
		haxe_Log.trace("Network error.",{ fileName : "kha/netsync/Network.hx", lineNumber : 14, className : "kha.netsync.Network", methodName : "new"});
		errorCallback();
	};
	this.socket.binaryType = "arraybuffer";
	this.socket.onopen = function() {
		_gthis.open = true;
	};
	this.socket.onclose = function(event) {
		haxe_Log.trace("Network connection closed. " + kha_netsync_Network.webSocketCloseReason(event.code) + " (" + event.reason + ").",{ fileName : "kha/netsync/Network.hx", lineNumber : 22, className : "kha.netsync.Network", methodName : "new"});
		closeCallback();
	};
};
$hxClasses["kha.netsync.Network"] = kha_netsync_Network;
kha_netsync_Network.__name__ = "kha.netsync.Network";
kha_netsync_Network.webSocketCloseReason = function(code) {
	switch(code) {
	case 1000:
		return "Normal Closure";
	case 1001:
		return "Going Away";
	case 1002:
		return "Protocol error";
	case 1003:
		return "Unsupported Data";
	case 1005:
		return "No Status Rcvd";
	case 1006:
		return "Abnormal Closure";
	case 1007:
		return "Invalid frame";
	case 1008:
		return "Policy Violation";
	case 1009:
		return "Message Too Big";
	case 1010:
		return "Mandatory Ext.";
	case 1011:
		return "Internal Server Error";
	case 1015:
		return "TLS handshake";
	default:
		return "";
	}
};
kha_netsync_Network.prototype = {
	socket: null
	,open: null
	,send: function(bytes,mandatory) {
		if(this.open) {
			this.socket.send(bytes.b.bufferValue);
		}
	}
	,listen: function(listener) {
		this.socket.onmessage = function(message) {
			var tmp = haxe_io_Bytes.ofData(message.data);
			listener(tmp);
		};
	}
	,__class__: kha_netsync_Network
};
var kha_netsync_State = function(time,data) {
	this.time = time;
	this.data = data;
};
$hxClasses["kha.netsync.State"] = kha_netsync_State;
kha_netsync_State.__name__ = "kha.netsync.State";
kha_netsync_State.prototype = {
	time: null
	,data: null
	,__class__: kha_netsync_State
};
var kha_netsync_Session = function(maxPlayers,address,port) {
	this.ping = 1;
	this.currentPlayers = 0;
	this.controllers = new haxe_ds_IntMap();
	this.entities = new haxe_ds_IntMap();
	kha_netsync_Session.instance = this;
	this.maxPlayers = maxPlayers;
	this.address = address;
	this.port = port;
};
$hxClasses["kha.netsync.Session"] = kha_netsync_Session;
kha_netsync_Session.__name__ = "kha.netsync.Session";
kha_netsync_Session.the = function() {
	return kha_netsync_Session.instance;
};
kha_netsync_Session.prototype = {
	entities: null
	,controllers: null
	,maxPlayers: null
	,currentPlayers: null
	,ping: null
	,address: null
	,port: null
	,startCallback: null
	,refusedCallback: null
	,resetCallback: null
	,localClient: null
	,network: null
	,updateTaskId: null
	,pingTaskId: null
	,me: null
	,get_me: function() {
		return this.localClient;
	}
	,addEntity: function(entity) {
		var this1 = this.entities;
		var key = entity._id();
		this1.h[key] = entity;
	}
	,addController: function(controller) {
		haxe_Log.trace("Adding controller id " + controller._id(),{ fileName : "kha/netsync/Session.hx", lineNumber : 88, className : "kha.netsync.Session", methodName : "addController"});
		controller._inputBufferIndex = 0;
		var this1 = this.controllers;
		var key = controller._id();
		this1.h[key] = controller;
	}
	,sendControllerUpdate: function(id,bytes) {
		if(this.controllers.h.hasOwnProperty(id)) {
			if(this.controllers.h[id]._inputBuffer.length < this.controllers.h[id]._inputBufferIndex + 4 + bytes.length) {
				var newBuffer = new haxe_io_Bytes(new ArrayBuffer(this.controllers.h[id]._inputBufferIndex + 4 + bytes.length));
				newBuffer.blit(0,this.controllers.h[id]._inputBuffer,0,this.controllers.h[id]._inputBufferIndex);
				this.controllers.h[id]._inputBuffer = newBuffer;
			}
			this.controllers.h[id]._inputBuffer.setInt32(this.controllers.h[id]._inputBufferIndex,bytes.length);
			this.controllers.h[id]._inputBuffer.blit(this.controllers.h[id]._inputBufferIndex + 4,bytes,0,bytes.length);
			this.controllers.h[id]._inputBufferIndex += 4 + bytes.length;
		}
	}
	,sendPing: function() {
		var bytes = new haxe_io_Bytes(new ArrayBuffer(5));
		bytes.b[0] = 4;
		bytes.setFloat(1,kha_Scheduler.realTime());
		this.sendToServer(bytes);
	}
	,sendPlayerUpdate: function() {
	}
	,receive: function(bytes,client) {
		switch(bytes.b[0]) {
		case 0:
			var index = bytes.b[1];
			this.localClient = new kha_netsync_LocalClient(index);
			kha_Scheduler.resetTime();
			this.startCallback();
			break;
		case 1:
			var time = bytes.getDouble(1);
			var offset = 9;
			var entity = this.entities.iterator();
			while(entity.hasNext()) {
				var entity1 = entity.next();
				entity1._receive(offset,bytes);
				offset += entity1._size();
			}
			kha_Scheduler.warp(time);
			break;
		case 3:
			switch(bytes.b[1]) {
			case 0:
				break;
			case 1:
				this.executeRPC(bytes);
				break;
			}
			break;
		case 4:
			var sendTime = bytes.getFloat(1);
			this.ping = kha_Scheduler.realTime() - sendTime;
			break;
		case 5:
			this.refusedCallback();
			break;
		case 6:
			this.currentPlayers = bytes.getInt32(1);
			break;
		}
	}
	,executeRPC: function(bytes) {
		var args = [];
		var syncId = bytes.getInt32(2);
		var index = 6;
		var classnamelength = bytes.getUInt16(index);
		index += 2;
		var classname = "";
		var _g = 0;
		var _g1 = classnamelength;
		while(_g < _g1) {
			var i = _g++;
			var code = bytes.b[index];
			classname += String.fromCodePoint(code);
			++index;
		}
		var methodnamelength = bytes.getUInt16(index);
		index += 2;
		var methodname = "";
		var _g2 = 0;
		var _g3 = methodnamelength;
		while(_g2 < _g3) {
			var i1 = _g2++;
			var code1 = bytes.b[index];
			methodname += String.fromCodePoint(code1);
			++index;
		}
		while(index < bytes.length) {
			var type = bytes.b[index];
			++index;
			switch(type) {
			case 66:
				var value = bytes.b[index] == 1;
				++index;
				haxe_Log.trace("Bool: " + (value == null ? "null" : "" + value),{ fileName : "kha/netsync/Session.hx", lineNumber : 295, className : "kha.netsync.Session", methodName : "executeRPC"});
				args.push(value);
				break;
			case 70:
				var value1 = bytes.getDouble(index);
				index += 8;
				haxe_Log.trace("Float: " + value1,{ fileName : "kha/netsync/Session.hx", lineNumber : 300, className : "kha.netsync.Session", methodName : "executeRPC"});
				args.push(value1);
				break;
			case 73:
				var value2 = bytes.getInt32(index);
				index += 4;
				haxe_Log.trace("Int: " + value2,{ fileName : "kha/netsync/Session.hx", lineNumber : 305, className : "kha.netsync.Session", methodName : "executeRPC"});
				args.push(value2);
				break;
			case 83:
				var length = bytes.getUInt16(index);
				index += 2;
				var str = "";
				var _g4 = 0;
				var _g5 = length;
				while(_g4 < _g5) {
					var i2 = _g4++;
					var code2 = bytes.b[index];
					str += String.fromCodePoint(code2);
					++index;
				}
				haxe_Log.trace("String: " + str,{ fileName : "kha/netsync/Session.hx", lineNumber : 315, className : "kha.netsync.Session", methodName : "executeRPC"});
				args.push(str);
				break;
			default:
				haxe_Log.trace("Unknown argument type.",{ fileName : "kha/netsync/Session.hx", lineNumber : 318, className : "kha.netsync.Session", methodName : "executeRPC"});
			}
		}
		if(syncId == -1) {
			Reflect.field($hxClasses[classname],methodname + "_remotely").apply(null,args);
		} else {
			Reflect.field(kha_netsync_SyncBuilder.objects[syncId],methodname + "_remotely").apply(kha_netsync_SyncBuilder.objects[syncId],args);
		}
	}
	,waitForStart: function(callback,refuseCallback,errorCallback,closeCallback,resCallback) {
		var _gthis = this;
		this.startCallback = callback;
		this.refusedCallback = refuseCallback;
		this.resetCallback = resCallback;
		this.network = new kha_netsync_Network(this.address,this.port,errorCallback,function() {
			closeCallback();
			_gthis.reset();
		});
		this.network.listen(function(bytes) {
			_gthis.receive(bytes);
		});
		this.updateTaskId = kha_Scheduler.addFrameTask($bind(this,this.update),0);
		this.ping = 1;
		this.pingTaskId = kha_Scheduler.addTimeTask($bind(this,this.sendPing),0,1);
	}
	,reset: function() {
		kha_Scheduler.removeFrameTask(this.updateTaskId);
		kha_Scheduler.removeTimeTask(this.pingTaskId);
		this.currentPlayers = 0;
		this.ping = 1;
		this.controllers = new haxe_ds_IntMap();
		this.entities = new haxe_ds_IntMap();
		this.resetCallback();
	}
	,update: function() {
		var controller = this.controllers.iterator();
		while(controller.hasNext()) {
			var controller1 = controller.next();
			if(controller1._inputBufferIndex > 0) {
				var bytes = new haxe_io_Bytes(new ArrayBuffer(22 + controller1._inputBufferIndex));
				bytes.b[0] = 2;
				bytes.setInt32(1,controller1._id());
				bytes.setDouble(5,kha_Scheduler.time());
				bytes.setInt32(13,kha_System.windowWidth(0));
				bytes.setInt32(17,kha_System.windowHeight(0));
				bytes.b[21] = 0;
				bytes.blit(22,controller1._inputBuffer,0,controller1._inputBufferIndex);
				this.sendToServer(bytes);
				controller1._inputBufferIndex = 0;
			}
		}
	}
	,sendToServer: function(bytes) {
		this.network.send(bytes,false);
	}
	,__class__: kha_netsync_Session
	,__properties__: {get_me:"get_me"}
};
var kha_netsync_SyncBuilder = function() { };
$hxClasses["kha.netsync.SyncBuilder"] = kha_netsync_SyncBuilder;
kha_netsync_SyncBuilder.__name__ = "kha.netsync.SyncBuilder";
var kha_simd_Float32x4 = function(_0,_1,_2,_3) {
	this._0 = _0;
	this._1 = _1;
	this._2 = _2;
	this._3 = _3;
};
$hxClasses["kha.simd.Float32x4"] = kha_simd_Float32x4;
kha_simd_Float32x4.__name__ = "kha.simd.Float32x4";
kha_simd_Float32x4.create = function() {
	return new kha_simd_Float32x4(0,0,0,0);
};
kha_simd_Float32x4.loadAllFast = function(t) {
	return new kha_simd_Float32x4(t,t,t,t);
};
kha_simd_Float32x4.load = function(a,b,c,d) {
	return new kha_simd_Float32x4(a,b,c,d);
};
kha_simd_Float32x4.loadFast = function(a,b,c,d) {
	return new kha_simd_Float32x4(a,b,c,d);
};
kha_simd_Float32x4.get = function(t,index) {
	var value = 0;
	switch(index) {
	case 0:
		value = t._0;
		break;
	case 1:
		value = t._1;
		break;
	case 2:
		value = t._2;
		break;
	case 3:
		value = t._3;
		break;
	}
	return value;
};
kha_simd_Float32x4.getFast = function(t,index) {
	switch(index) {
	case 0:
		return t._0;
	case 1:
		return t._1;
	case 2:
		return t._2;
	case 3:
		return t._3;
	}
	return 0;
};
kha_simd_Float32x4.abs = function(t) {
	return new kha_simd_Float32x4(Math.abs(t._0),Math.abs(t._1),Math.abs(t._2),Math.abs(t._3));
};
kha_simd_Float32x4.add = function(a,b) {
	return new kha_simd_Float32x4(a._0 + b._0,a._1 + b._1,a._2 + b._2,a._3 + b._3);
};
kha_simd_Float32x4.div = function(a,b) {
	return new kha_simd_Float32x4(a._0 / b._0,a._1 / b._1,a._2 / b._2,a._3 / b._3);
};
kha_simd_Float32x4.mul = function(a,b) {
	return new kha_simd_Float32x4(a._0 * b._0,a._1 * b._1,a._2 * b._2,a._3 * b._3);
};
kha_simd_Float32x4.neg = function(t) {
	return new kha_simd_Float32x4(-t._0,-t._1,-t._2,-t._3);
};
kha_simd_Float32x4.reciprocalApproximation = function(t) {
	return new kha_simd_Float32x4(0,0,0,0);
};
kha_simd_Float32x4.reciprocalSqrtApproximation = function(t) {
	return new kha_simd_Float32x4(0,0,0,0);
};
kha_simd_Float32x4.sub = function(a,b) {
	return new kha_simd_Float32x4(a._0 - b._0,a._1 - b._1,a._2 - b._2,a._3 - b._3);
};
kha_simd_Float32x4.sqrt = function(t) {
	return new kha_simd_Float32x4(Math.sqrt(t._0),Math.sqrt(t._1),Math.sqrt(t._2),Math.sqrt(t._3));
};
kha_simd_Float32x4.prototype = {
	_0: null
	,_1: null
	,_2: null
	,_3: null
	,__class__: kha_simd_Float32x4
};
var kha_vr_Pose = function() {
	this.Orientation = new kha_math_Quaternion();
	this.Position = new kha_math_Vector3();
};
$hxClasses["kha.vr.Pose"] = kha_vr_Pose;
kha_vr_Pose.__name__ = "kha.vr.Pose";
kha_vr_Pose.prototype = {
	Orientation: null
	,Position: null
	,__class__: kha_vr_Pose
};
var kha_vr_PoseState = function() {
};
$hxClasses["kha.vr.PoseState"] = kha_vr_PoseState;
kha_vr_PoseState.__name__ = "kha.vr.PoseState";
kha_vr_PoseState.prototype = {
	Pose: null
	,AngularVelocity: null
	,LinearVelocity: null
	,AngularAcceleration: null
	,LinearAcceleration: null
	,TimeInSeconds: null
	,__class__: kha_vr_PoseState
};
var kha_vr_SensorState = function() {
};
$hxClasses["kha.vr.SensorState"] = kha_vr_SensorState;
kha_vr_SensorState.__name__ = "kha.vr.SensorState";
kha_vr_SensorState.prototype = {
	Predicted: null
	,Recorded: null
	,Temperature: null
	,Status: null
	,__class__: kha_vr_SensorState
};
var kha_vr_TimeWarpImage = function() {
};
$hxClasses["kha.vr.TimeWarpImage"] = kha_vr_TimeWarpImage;
kha_vr_TimeWarpImage.__name__ = "kha.vr.TimeWarpImage";
kha_vr_TimeWarpImage.prototype = {
	Image: null
	,TexCoordsFromTanAngles: null
	,Pose: null
	,__class__: kha_vr_TimeWarpImage
};
var kha_vr_TimeWarpParms = function() {
};
$hxClasses["kha.vr.TimeWarpParms"] = kha_vr_TimeWarpParms;
kha_vr_TimeWarpParms.__name__ = "kha.vr.TimeWarpParms";
kha_vr_TimeWarpParms.prototype = {
	LeftImage: null
	,RightImage: null
	,LeftOverlay: null
	,RightOverlay: null
	,__class__: kha_vr_TimeWarpParms
};
var openfl_Lib = function() { };
$hxClasses["openfl.Lib"] = openfl_Lib;
openfl_Lib.__name__ = "openfl.Lib";
openfl_Lib.__properties__ = {get_application:"get_application"};
openfl_Lib.as = function(v,c) {
	if(js_Boot.__instanceof(v,c)) {
		return v;
	} else {
		return null;
	}
};
openfl_Lib.clearInterval = function(id) {
	if(openfl_Lib.__timers.h.hasOwnProperty(id)) {
		var timer = openfl_Lib.__timers.h[id];
		timer.stop();
		openfl_Lib.__timers.remove(id);
	}
};
openfl_Lib.clearTimeout = function(id) {
	if(openfl_Lib.__timers.h.hasOwnProperty(id)) {
		var timer = openfl_Lib.__timers.h[id];
		timer.stop();
		openfl_Lib.__timers.remove(id);
	}
};
openfl_Lib.getDefinitionByName = function(name) {
	return $hxClasses[name];
};
openfl_Lib.getQualifiedClassName = function(value) {
	var o = value;
	var c = o == null ? null : js_Boot.getClass(o);
	return c.__name__;
};
openfl_Lib.getQualifiedSuperclassName = function(value) {
	var o = value;
	var c = o == null ? null : js_Boot.getClass(o);
	var ref = c.__super__;
	if(ref != null) {
		return ref.__name__;
	} else {
		return null;
	}
};
openfl_Lib.getTimer = function() {
	return window.performance.now() | 0;
};
openfl_Lib.getURL = function(request,target) {
	openfl_Lib.navigateToURL(request,target);
};
openfl_Lib.navigateToURL = function(request,$window) {
	if($window == null) {
		$window = "_blank";
	}
	var uri = request.url;
	if(Type.typeof(request.data) == ValueType.TObject) {
		var query = "";
		var fields = Reflect.fields(request.data);
		var _g = 0;
		while(_g < fields.length) {
			var field = fields[_g];
			++_g;
			if(query.length > 0) {
				query += "&";
			}
			var query1 = encodeURIComponent(field) + "=";
			var s = Std.string(Reflect.field(request.data,field));
			query += query1 + encodeURIComponent(s);
		}
		if(uri.indexOf("?") > -1) {
			uri += "&" + query;
		} else {
			uri += "?" + query;
		}
	}
	window.open(uri,$window);
};
openfl_Lib.notImplemented = function(posInfo) {
	var api = posInfo.className + "." + posInfo.methodName;
	var _this = openfl_Lib.__sentWarnings;
	if(!(__map_reserved[api] != null ? _this.existsReserved(api) : _this.h.hasOwnProperty(api))) {
		var _this1 = openfl_Lib.__sentWarnings;
		if(__map_reserved[api] != null) {
			_this1.setReserved(api,true);
		} else {
			_this1.h[api] = true;
		}
		openfl__$internal_utils_Log.warn(posInfo.methodName + " is not implemented",posInfo);
	}
};
openfl_Lib.sendToURL = function(request) {
	var urlLoader = new openfl_net_URLLoader();
	urlLoader.load(request);
};
openfl_Lib.setInterval = function(closure,delay,args) {
	var id = ++openfl_Lib.__lastTimerID;
	var timer = new haxe_Timer(delay);
	openfl_Lib.__timers.h[id] = timer;
	timer.run = function() {
		closure.apply(closure,args);
	};
	return id;
};
openfl_Lib.setTimeout = function(closure,delay,args) {
	var id = ++openfl_Lib.__lastTimerID;
	var this1 = openfl_Lib.__timers;
	var v = haxe_Timer.delay(function() {
		closure.apply(closure,args);
	},delay);
	this1.h[id] = v;
	return id;
};
openfl_Lib.trace = function(arg) {
	haxe_Log.trace(arg,{ fileName : "openfl/Lib.hx", lineNumber : 118, className : "openfl.Lib", methodName : "trace"});
};
openfl_Lib.get_application = function() {
	return openfl__$internal_app_Application.current;
};
var openfl__$Vector_AbstractVector = function(data,array) {
	this.data = data;
	if(array != null) {
		var cacheFixed = data.fixed;
		data.fixed = false;
		var _g = 0;
		var _g1 = array.length;
		while(_g < _g1) {
			var i = _g++;
			data.set(i,array[i]);
		}
		data.fixed = cacheFixed;
	}
};
$hxClasses["openfl._Vector.AbstractVector"] = openfl__$Vector_AbstractVector;
openfl__$Vector_AbstractVector.__name__ = "openfl._Vector.AbstractVector";
openfl__$Vector_AbstractVector.prototype = {
	data: null
	,toJSON: function() {
		return this.data.toJSON();
	}
	,__class__: openfl__$Vector_AbstractVector
};
var openfl__$Vector_IVector = function() { };
$hxClasses["openfl._Vector.IVector"] = openfl__$Vector_IVector;
openfl__$Vector_IVector.__name__ = "openfl._Vector.IVector";
openfl__$Vector_IVector.prototype = {
	set_length: null
	,get_length: null
	,fixed: null
	,concat: null
	,filter: null
	,copy: null
	,get: null
	,indexOf: null
	,insertAt: null
	,iterator: null
	,join: null
	,lastIndexOf: null
	,pop: null
	,push: null
	,removeAt: null
	,reverse: null
	,set: null
	,shift: null
	,slice: null
	,sort: null
	,splice: null
	,toString: null
	,unshift: null
	,toJSON: null
	,__class__: openfl__$Vector_IVector
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var openfl__$Vector_BoolVector = function(length,fixed,array) {
	if(array == null) {
		array = [];
	}
	this.__array = array;
	if(length != null) {
		this.set_length(length);
	}
	this.fixed = fixed == true;
};
$hxClasses["openfl._Vector.BoolVector"] = openfl__$Vector_BoolVector;
openfl__$Vector_BoolVector.__name__ = "openfl._Vector.BoolVector";
openfl__$Vector_BoolVector.__interfaces__ = [openfl__$Vector_IVector];
openfl__$Vector_BoolVector.prototype = {
	fixed: null
	,__array: null
	,concat: function(a) {
		if(a == null) {
			return new openfl__$Vector_BoolVector(null,null,this.__array.slice());
		} else {
			return new openfl__$Vector_BoolVector(null,null,this.__array.concat((js_Boot.__cast(a , openfl__$Vector_BoolVector)).__array));
		}
	}
	,filter: function(callback) {
		return new openfl__$Vector_BoolVector(null,this.fixed,this.__array.filter(callback));
	}
	,copy: function() {
		return new openfl__$Vector_BoolVector(null,this.fixed,this.__array.slice());
	}
	,get: function(index) {
		if(index >= this.__array.length) {
			return false;
		} else {
			return this.__array[index];
		}
	}
	,indexOf: function(x,from) {
		if(from == null) {
			from = 0;
		}
		var _g = from;
		var _g1 = this.__array.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.__array[i] == x) {
				return i;
			}
		}
		return -1;
	}
	,insertAt: function(index,element) {
		if(!this.fixed || index < this.__array.length) {
			this.__array.splice(index,0,element);
		}
	}
	,iterator: function() {
		return HxOverrides.iter(this.__array);
	}
	,join: function(sep) {
		if(sep == null) {
			sep = ",";
		}
		return this.__array.join(sep);
	}
	,lastIndexOf: function(x,from) {
		if(from == null) {
			from = 0;
		}
		var i = this.__array.length - 1;
		while(i >= from) {
			if(this.__array[i] == x) {
				return i;
			}
			--i;
		}
		return -1;
	}
	,pop: function() {
		if(!this.fixed) {
			return this.__array.pop();
		} else {
			return null;
		}
	}
	,push: function(x) {
		if(!this.fixed) {
			return this.__array.push(x);
		} else {
			return this.__array.length;
		}
	}
	,removeAt: function(index) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array.splice(index,1)[0];
		}
		return false;
	}
	,reverse: function() {
		this.__array.reverse();
		return this;
	}
	,set: function(index,value) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array[index] = value;
		} else {
			return value;
		}
	}
	,shift: function() {
		if(!this.fixed) {
			return this.__array.shift();
		} else {
			return null;
		}
	}
	,slice: function(startIndex,endIndex) {
		if(endIndex == null) {
			endIndex = 16777215;
		}
		if(startIndex == null) {
			startIndex = 0;
		}
		return new openfl__$Vector_BoolVector(null,null,this.__array.slice(startIndex,endIndex));
	}
	,sort: function(f) {
		this.__array.sort(f);
	}
	,splice: function(pos,len) {
		return new openfl__$Vector_BoolVector(null,null,this.__array.splice(pos,len));
	}
	,toJSON: function() {
		return this.__array;
	}
	,toString: function() {
		if(this.__array != null) {
			return this.__array.toString();
		} else {
			return null;
		}
	}
	,unshift: function(x) {
		if(!this.fixed) {
			this.__array.unshift(x);
		}
	}
	,get_length: function() {
		return this.__array.length;
	}
	,set_length: function(value) {
		if(!this.fixed) {
			var currentLength = this.__array.length;
			if(value < 0) {
				value = 0;
			}
			if(value > currentLength) {
				var _g = currentLength;
				var _g1 = value;
				while(_g < _g1) {
					var i = _g++;
					this.__array[i] = false;
				}
			} else {
				while(this.__array.length > value) this.__array.pop();
			}
		}
		return this.__array.length;
	}
	,__class__: openfl__$Vector_BoolVector
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var openfl__$Vector_FloatVector = function(length,fixed,array) {
	if(array == null) {
		array = [];
	}
	this.__array = array;
	if(length != null) {
		this.set_length(length);
	}
	this.fixed = fixed == true;
};
$hxClasses["openfl._Vector.FloatVector"] = openfl__$Vector_FloatVector;
openfl__$Vector_FloatVector.__name__ = "openfl._Vector.FloatVector";
openfl__$Vector_FloatVector.__interfaces__ = [openfl__$Vector_IVector];
openfl__$Vector_FloatVector.prototype = {
	fixed: null
	,__array: null
	,concat: function(a) {
		if(a == null) {
			return new openfl__$Vector_FloatVector(null,null,this.__array.slice());
		} else {
			return new openfl__$Vector_FloatVector(null,null,this.__array.concat((js_Boot.__cast(a , openfl__$Vector_FloatVector)).__array));
		}
	}
	,filter: function(callback) {
		return new openfl__$Vector_FloatVector(null,this.fixed,this.__array.filter(callback));
	}
	,copy: function() {
		return new openfl__$Vector_FloatVector(null,this.fixed,this.__array.slice());
	}
	,get: function(index) {
		return this.__array[index];
	}
	,indexOf: function(x,from) {
		if(from == null) {
			from = 0;
		}
		var _g = from;
		var _g1 = this.__array.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.__array[i] == x) {
				return i;
			}
		}
		return -1;
	}
	,insertAt: function(index,element) {
		if(!this.fixed || index < this.__array.length) {
			this.__array.splice(index,0,element);
		}
	}
	,iterator: function() {
		return HxOverrides.iter(this.__array);
	}
	,join: function(sep) {
		if(sep == null) {
			sep = ",";
		}
		return this.__array.join(sep);
	}
	,lastIndexOf: function(x,from) {
		if(from == null) {
			from = 0;
		}
		var i = this.__array.length - 1;
		while(i >= from) {
			if(this.__array[i] == x) {
				return i;
			}
			--i;
		}
		return -1;
	}
	,pop: function() {
		if(!this.fixed) {
			return this.__array.pop();
		} else {
			return null;
		}
	}
	,push: function(x) {
		if(!this.fixed) {
			return this.__array.push(x);
		} else {
			return this.__array.length;
		}
	}
	,removeAt: function(index) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array.splice(index,1)[0];
		}
		return 0;
	}
	,reverse: function() {
		this.__array.reverse();
		return this;
	}
	,set: function(index,value) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array[index] = value;
		} else {
			return value;
		}
	}
	,shift: function() {
		if(!this.fixed) {
			return this.__array.shift();
		} else {
			return null;
		}
	}
	,slice: function(startIndex,endIndex) {
		if(endIndex == null) {
			endIndex = 16777215;
		}
		if(startIndex == null) {
			startIndex = 0;
		}
		return new openfl__$Vector_FloatVector(null,null,this.__array.slice(startIndex,endIndex));
	}
	,sort: function(f) {
		this.__array.sort(f);
	}
	,splice: function(pos,len) {
		return new openfl__$Vector_FloatVector(null,null,this.__array.splice(pos,len));
	}
	,toJSON: function() {
		return this.__array;
	}
	,toString: function() {
		if(this.__array != null) {
			return this.__array.toString();
		} else {
			return null;
		}
	}
	,unshift: function(x) {
		if(!this.fixed) {
			this.__array.unshift(x);
		}
	}
	,get_length: function() {
		return this.__array.length;
	}
	,set_length: function(value) {
		if(!this.fixed) {
			var currentLength = this.__array.length;
			if(value < 0) {
				value = 0;
			}
			if(value > currentLength) {
				var _g = currentLength;
				var _g1 = value;
				while(_g < _g1) {
					var i = _g++;
					this.__array[i] = 0;
				}
			} else {
				while(this.__array.length > value) this.__array.pop();
			}
		}
		return this.__array.length;
	}
	,__class__: openfl__$Vector_FloatVector
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var openfl__$Vector_FunctionVector = function(length,fixed,array) {
	if(array == null) {
		array = [];
	}
	this.__array = array;
	if(length != null) {
		this.set_length(length);
	}
	this.fixed = fixed == true;
};
$hxClasses["openfl._Vector.FunctionVector"] = openfl__$Vector_FunctionVector;
openfl__$Vector_FunctionVector.__name__ = "openfl._Vector.FunctionVector";
openfl__$Vector_FunctionVector.__interfaces__ = [openfl__$Vector_IVector];
openfl__$Vector_FunctionVector.prototype = {
	fixed: null
	,__array: null
	,concat: function(a) {
		if(a == null) {
			return new openfl__$Vector_FunctionVector(null,null,this.__array.slice());
		} else {
			return new openfl__$Vector_FunctionVector(null,null,this.__array.concat((js_Boot.__cast(a , openfl__$Vector_FunctionVector)).__array));
		}
	}
	,filter: function(callback) {
		return new openfl__$Vector_FunctionVector(null,this.fixed,this.__array.filter(callback));
	}
	,copy: function() {
		return new openfl__$Vector_FunctionVector(null,this.fixed,this.__array.slice());
	}
	,get: function(index) {
		if(index >= this.__array.length) {
			return null;
		} else {
			return this.__array[index];
		}
	}
	,indexOf: function(x,from) {
		if(from == null) {
			from = 0;
		}
		var _g = from;
		var _g1 = this.__array.length;
		while(_g < _g1) {
			var i = _g++;
			if(Reflect.compareMethods(this.__array[i],x)) {
				return i;
			}
		}
		return -1;
	}
	,insertAt: function(index,element) {
		if(!this.fixed || index < this.__array.length) {
			this.__array.splice(index,0,element);
		}
	}
	,iterator: function() {
		return HxOverrides.iter(this.__array);
	}
	,join: function(sep) {
		if(sep == null) {
			sep = ",";
		}
		return this.__array.join(sep);
	}
	,lastIndexOf: function(x,from) {
		if(from == null) {
			from = 0;
		}
		var i = this.__array.length - 1;
		while(i >= from) {
			if(Reflect.compareMethods(this.__array[i],x)) {
				return i;
			}
			--i;
		}
		return -1;
	}
	,pop: function() {
		if(!this.fixed) {
			return this.__array.pop();
		} else {
			return null;
		}
	}
	,push: function(x) {
		if(!this.fixed) {
			return this.__array.push(x);
		} else {
			return this.__array.length;
		}
	}
	,removeAt: function(index) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array.splice(index,1)[0];
		}
		return null;
	}
	,reverse: function() {
		this.__array.reverse();
		return this;
	}
	,set: function(index,value) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array[index] = value;
		} else {
			return value;
		}
	}
	,shift: function() {
		if(!this.fixed) {
			return this.__array.shift();
		} else {
			return null;
		}
	}
	,slice: function(startIndex,endIndex) {
		if(endIndex == null) {
			endIndex = 16777215;
		}
		if(startIndex == null) {
			startIndex = 0;
		}
		return new openfl__$Vector_FunctionVector(null,null,this.__array.slice(startIndex,endIndex));
	}
	,sort: function(f) {
		this.__array.sort(f);
	}
	,splice: function(pos,len) {
		return new openfl__$Vector_FunctionVector(null,null,this.__array.splice(pos,len));
	}
	,toJSON: function() {
		return this.__array;
	}
	,toString: function() {
		if(this.__array != null) {
			return this.__array.toString();
		} else {
			return null;
		}
	}
	,unshift: function(x) {
		if(!this.fixed) {
			this.__array.unshift(x);
		}
	}
	,get_length: function() {
		return this.__array.length;
	}
	,set_length: function(value) {
		if(!this.fixed) {
			var currentLength = this.__array.length;
			if(value < 0) {
				value = 0;
			}
			if(value > currentLength) {
				var _g = currentLength;
				var _g1 = value;
				while(_g < _g1) {
					var i = _g++;
					this.__array[i] = null;
				}
			} else {
				while(this.__array.length > value) this.__array.pop();
			}
		}
		return this.__array.length;
	}
	,__class__: openfl__$Vector_FunctionVector
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var openfl__$Vector_IntVector = function(length,fixed,array) {
	if(array == null) {
		array = [];
	}
	this.__array = array;
	if(length != null) {
		this.set_length(length);
	}
	this.fixed = fixed == true;
};
$hxClasses["openfl._Vector.IntVector"] = openfl__$Vector_IntVector;
openfl__$Vector_IntVector.__name__ = "openfl._Vector.IntVector";
openfl__$Vector_IntVector.__interfaces__ = [openfl__$Vector_IVector];
openfl__$Vector_IntVector.prototype = {
	fixed: null
	,__array: null
	,concat: function(a) {
		if(a == null) {
			return new openfl__$Vector_IntVector(null,null,this.__array.slice());
		} else {
			return new openfl__$Vector_IntVector(null,null,this.__array.concat((js_Boot.__cast(a , openfl__$Vector_IntVector)).__array));
		}
	}
	,filter: function(callback) {
		return new openfl__$Vector_IntVector(null,this.fixed,this.__array.filter(callback));
	}
	,copy: function() {
		return new openfl__$Vector_IntVector(null,this.fixed,this.__array.slice());
	}
	,get: function(index) {
		return this.__array[index];
	}
	,indexOf: function(x,from) {
		if(from == null) {
			from = 0;
		}
		var _g = from;
		var _g1 = this.__array.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.__array[i] == x) {
				return i;
			}
		}
		return -1;
	}
	,insertAt: function(index,element) {
		if(!this.fixed || index < this.__array.length) {
			this.__array.splice(index,0,element);
		}
	}
	,iterator: function() {
		return HxOverrides.iter(this.__array);
	}
	,join: function(sep) {
		if(sep == null) {
			sep = ",";
		}
		return this.__array.join(sep);
	}
	,lastIndexOf: function(x,from) {
		if(from == null) {
			from = 0;
		}
		var i = this.__array.length - 1;
		while(i >= from) {
			if(this.__array[i] == x) {
				return i;
			}
			--i;
		}
		return -1;
	}
	,pop: function() {
		if(!this.fixed) {
			return this.__array.pop();
		} else {
			return null;
		}
	}
	,push: function(x) {
		if(!this.fixed) {
			return this.__array.push(x);
		} else {
			return this.__array.length;
		}
	}
	,removeAt: function(index) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array.splice(index,1)[0];
		}
		return 0;
	}
	,reverse: function() {
		this.__array.reverse();
		return this;
	}
	,set: function(index,value) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array[index] = value;
		} else {
			return value;
		}
	}
	,shift: function() {
		if(!this.fixed) {
			return this.__array.shift();
		} else {
			return null;
		}
	}
	,slice: function(startIndex,endIndex) {
		if(endIndex == null) {
			endIndex = 16777215;
		}
		if(startIndex == null) {
			startIndex = 0;
		}
		return new openfl__$Vector_IntVector(null,null,this.__array.slice(startIndex,endIndex));
	}
	,sort: function(f) {
		this.__array.sort(f);
	}
	,splice: function(pos,len) {
		return new openfl__$Vector_IntVector(null,null,this.__array.splice(pos,len));
	}
	,toJSON: function() {
		return this.__array;
	}
	,toString: function() {
		if(this.__array != null) {
			return this.__array.toString();
		} else {
			return null;
		}
	}
	,unshift: function(x) {
		if(!this.fixed) {
			this.__array.unshift(x);
		}
	}
	,get_length: function() {
		return this.__array.length;
	}
	,set_length: function(value) {
		if(!this.fixed) {
			var currentLength = this.__array.length;
			if(value < 0) {
				value = 0;
			}
			if(value > currentLength) {
				var _g = currentLength;
				var _g1 = value;
				while(_g < _g1) {
					var i = _g++;
					this.__array[i] = 0;
				}
			} else {
				while(this.__array.length > value) this.__array.pop();
			}
		}
		return this.__array.length;
	}
	,__class__: openfl__$Vector_IntVector
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var openfl__$Vector_ObjectVector = function(length,fixed,array) {
	if(array == null) {
		array = [];
	}
	this.__array = array;
	if(length != null) {
		this.set_length(length);
	}
	this.fixed = fixed == true;
};
$hxClasses["openfl._Vector.ObjectVector"] = openfl__$Vector_ObjectVector;
openfl__$Vector_ObjectVector.__name__ = "openfl._Vector.ObjectVector";
openfl__$Vector_ObjectVector.__interfaces__ = [openfl__$Vector_IVector];
openfl__$Vector_ObjectVector.prototype = {
	fixed: null
	,__array: null
	,concat: function(a) {
		if(a == null) {
			return new openfl__$Vector_ObjectVector(null,null,this.__array.slice());
		} else {
			return new openfl__$Vector_ObjectVector(null,null,this.__array.concat((js_Boot.__cast(a , openfl__$Vector_ObjectVector)).__array));
		}
	}
	,filter: function(callback) {
		return new openfl__$Vector_ObjectVector(null,this.fixed,this.__array.filter(callback));
	}
	,copy: function() {
		return new openfl__$Vector_ObjectVector(null,null,this.__array.slice());
	}
	,get: function(index) {
		return this.__array[index];
	}
	,indexOf: function(x,from) {
		if(from == null) {
			from = 0;
		}
		var _g = from;
		var _g1 = this.__array.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.__array[i] == x) {
				return i;
			}
		}
		return -1;
	}
	,insertAt: function(index,element) {
		if(!this.fixed || index < this.__array.length) {
			this.__array.splice(index,0,element);
		}
	}
	,iterator: function() {
		return HxOverrides.iter(this.__array);
	}
	,join: function(sep) {
		if(sep == null) {
			sep = ",";
		}
		return this.__array.join(sep);
	}
	,lastIndexOf: function(x,from) {
		if(from == null) {
			from = 0;
		}
		var i = this.__array.length - 1;
		while(i >= from) {
			if(this.__array[i] == x) {
				return i;
			}
			--i;
		}
		return -1;
	}
	,pop: function() {
		if(!this.fixed) {
			return this.__array.pop();
		} else {
			return null;
		}
	}
	,push: function(x) {
		if(!this.fixed) {
			return this.__array.push(x);
		} else {
			return this.__array.length;
		}
	}
	,removeAt: function(index) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array.splice(index,1)[0];
		}
		return null;
	}
	,reverse: function() {
		this.__array.reverse();
		return this;
	}
	,set: function(index,value) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array[index] = value;
		} else {
			return value;
		}
	}
	,shift: function() {
		if(!this.fixed) {
			return this.__array.shift();
		} else {
			return null;
		}
	}
	,slice: function(startIndex,endIndex) {
		if(endIndex == null) {
			endIndex = 16777215;
		}
		if(startIndex == null) {
			startIndex = 0;
		}
		return new openfl__$Vector_ObjectVector(null,null,this.__array.slice(startIndex,endIndex));
	}
	,sort: function(f) {
		this.__array.sort(f);
	}
	,splice: function(pos,len) {
		return new openfl__$Vector_ObjectVector(null,null,this.__array.splice(pos,len));
	}
	,toJSON: function() {
		return this.__array;
	}
	,toString: function() {
		if(this.__array != null) {
			return this.__array.toString();
		} else {
			return null;
		}
	}
	,unshift: function(x) {
		if(!this.fixed) {
			this.__array.unshift(x);
		}
	}
	,get_length: function() {
		return this.__array.length;
	}
	,set_length: function(value) {
		if(!this.fixed) {
			var currentLength = this.__array.length;
			if(value < 0) {
				value = 0;
			}
			if(value > currentLength) {
				var _g = currentLength;
				var _g1 = value;
				while(_g < _g1) {
					var i = _g++;
					this.__array.push(null);
				}
			} else {
				while(this.__array.length > value) this.__array.pop();
			}
		}
		return this.__array.length;
	}
	,__class__: openfl__$Vector_ObjectVector
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var openfl__$internal_HTTPRequest = function() {
	this.contentType = "application/x-www-form-urlencoded";
	this.followRedirects = true;
	this.enableResponseHeaders = false;
	this.formData = new haxe_ds_StringMap();
	this.headers = [];
	this.method = "GET";
	this.timeout = 30000;
	this.withCredentials = false;
};
$hxClasses["openfl._internal.HTTPRequest"] = openfl__$internal_HTTPRequest;
openfl__$internal_HTTPRequest.__name__ = "openfl._internal.HTTPRequest";
openfl__$internal_HTTPRequest.loadImage = function(uri) {
	var this1 = new openfl__$internal_app_Future();
	var promise = this1;
	if(openfl__$internal_HTTPRequest.activeRequests < openfl__$internal_HTTPRequest.requestLimit) {
		openfl__$internal_HTTPRequest.activeRequests++;
		openfl__$internal_HTTPRequest.__loadImage(uri,promise);
	} else {
		openfl__$internal_HTTPRequest.requestQueue.add({ instance : null, uri : uri, promise : promise, type : 1});
	}
	return promise;
};
openfl__$internal_HTTPRequest.processQueue = function() {
	if(openfl__$internal_HTTPRequest.activeRequests < openfl__$internal_HTTPRequest.requestLimit && openfl__$internal_HTTPRequest.requestQueue.length > 0) {
		openfl__$internal_HTTPRequest.activeRequests++;
		var queueItem = openfl__$internal_HTTPRequest.requestQueue.pop();
		switch(queueItem.type) {
		case 0:
			queueItem.instance.__loadData(queueItem.uri,queueItem.promise);
			break;
		case 1:
			openfl__$internal_HTTPRequest.__loadImage(queueItem.uri,queueItem.promise);
			break;
		case 2:
			queueItem.instance.__loadText(queueItem.uri,queueItem.promise);
			break;
		}
	}
};
openfl__$internal_HTTPRequest.__fixHostname = function(hostname) {
	if(hostname == null) {
		return "";
	} else {
		return hostname;
	}
};
openfl__$internal_HTTPRequest.__fixPort = function(port,protocol) {
	if(port == null || port == "") {
		switch(protocol) {
		case "ftp:":
			return "21";
		case "gopher:":
			return "70";
		case "http:":
			return "80";
		case "https:":
			return "443";
		case "ws:":
			return "80";
		case "wss:":
			return "443";
		default:
			return "";
		}
	}
	return port;
};
openfl__$internal_HTTPRequest.__fixProtocol = function(protocol) {
	if(protocol == null || protocol == "") {
		return "http:";
	} else {
		return protocol;
	}
};
openfl__$internal_HTTPRequest.__isSameOrigin = function(path) {
	if(openfl__$internal_HTTPRequest.originElement == null) {
		openfl__$internal_HTTPRequest.originElement = window.document.createElement("a");
		openfl__$internal_HTTPRequest.originHostname = openfl__$internal_HTTPRequest.__fixHostname(window.location.hostname);
		openfl__$internal_HTTPRequest.originProtocol = openfl__$internal_HTTPRequest.__fixProtocol(window.location.protocol);
		openfl__$internal_HTTPRequest.originPort = openfl__$internal_HTTPRequest.__fixPort(window.location.port,openfl__$internal_HTTPRequest.originProtocol);
	}
	var a = openfl__$internal_HTTPRequest.originElement;
	a.href = path;
	if(a.hostname == "") {
		a.href = a.href;
	}
	var hostname = openfl__$internal_HTTPRequest.__fixHostname(a.hostname);
	var protocol = openfl__$internal_HTTPRequest.__fixProtocol(a.protocol);
	var port = openfl__$internal_HTTPRequest.__fixPort(a.port,protocol);
	var sameHost = hostname == "" || hostname == openfl__$internal_HTTPRequest.originHostname;
	var samePort = port == "" || port == openfl__$internal_HTTPRequest.originPort;
	if(protocol != "file:" && sameHost) {
		return samePort;
	} else {
		return false;
	}
};
openfl__$internal_HTTPRequest.__loadImage = function(uri,promise) {
	var image = new Image();
	if(!openfl__$internal_HTTPRequest.__isSameOrigin(uri)) {
		image.crossOrigin = "Anonymous";
	}
	if(openfl__$internal_HTTPRequest.supportsImageProgress == null) {
		openfl__$internal_HTTPRequest.supportsImageProgress = 'onprogress' in image;
	}
	if(openfl__$internal_HTTPRequest.supportsImageProgress || StringTools.startsWith(uri,"data:")) {
		image.addEventListener("load",function(_) {
			var image1 = openfl__$internal_graphics_Image.fromHTMLImage(image);
			openfl__$internal_HTTPRequest.activeRequests--;
			openfl__$internal_HTTPRequest.processQueue();
			openfl__$internal_app__$Promise_Promise_$Impl_$.complete(promise,image1);
		},false);
		image.addEventListener("progress",function(event) {
			openfl__$internal_app__$Promise_Promise_$Impl_$.progress(promise,event.loaded,event.total);
		},false);
		image.addEventListener("error",function(event1) {
			openfl__$internal_HTTPRequest.activeRequests--;
			openfl__$internal_HTTPRequest.processQueue();
			openfl__$internal_app__$Promise_Promise_$Impl_$.error(promise,event1.message);
		},false);
		image.src = uri;
	} else {
		var request = new XMLHttpRequest();
		request.onload = function(_1) {
			openfl__$internal_HTTPRequest.activeRequests--;
			openfl__$internal_HTTPRequest.processQueue();
			var tmp = haxe_io_Bytes.ofData(request.response);
			var _e = promise;
			openfl__$internal_graphics_Image.fromBytes(tmp,function(data) {
				return openfl__$internal_app__$Promise_Promise_$Impl_$.complete(_e,data);
			});
		};
		request.onerror = function(event2) {
			openfl__$internal_app__$Promise_Promise_$Impl_$.error(promise,event2.message);
		};
		request.onprogress = function(event3) {
			if(event3.lengthComputable) {
				openfl__$internal_app__$Promise_Promise_$Impl_$.progress(promise,event3.loaded,event3.total);
			}
		};
		request.open("GET",uri,true);
		request.responseType = "arraybuffer";
		request.overrideMimeType("text/plain; charset=x-user-defined");
		request.send(null);
	}
};
openfl__$internal_HTTPRequest.prototype = {
	contentType: null
	,data: null
	,enableResponseHeaders: null
	,followRedirects: null
	,formData: null
	,headers: null
	,method: null
	,responseHeaders: null
	,responseStatus: null
	,timeout: null
	,uri: null
	,userAgent: null
	,withCredentials: null
	,binary: null
	,request: null
	,cancel: function() {
		if(this.request != null) {
			this.request.abort();
		}
	}
	,loadBytes: function() {
		var this1 = new openfl__$internal_app_Future();
		var promise = this1;
		if(openfl__$internal_HTTPRequest.activeRequests < openfl__$internal_HTTPRequest.requestLimit) {
			openfl__$internal_HTTPRequest.activeRequests++;
			this.__loadData(this.uri,promise);
		} else {
			openfl__$internal_HTTPRequest.requestQueue.add({ instance : this, uri : this.uri, promise : promise, type : 0});
		}
		return promise;
	}
	,loadText: function() {
		var this1 = new openfl__$internal_app_Future();
		var promise = this1;
		if(openfl__$internal_HTTPRequest.activeRequests < openfl__$internal_HTTPRequest.requestLimit) {
			openfl__$internal_HTTPRequest.activeRequests++;
			this.__loadText(this.uri,promise);
		} else {
			openfl__$internal_HTTPRequest.requestQueue.add({ instance : this, uri : this.uri, promise : promise, type : 2});
		}
		return promise;
	}
	,__loadData: function(uri,promise) {
		var _gthis = this;
		this.binary = true;
		this.load(uri,function(event) {
			return openfl__$internal_app__$Promise_Promise_$Impl_$.progress(promise,event.loaded,event.total);
		},function(_) {
			if(_gthis.request.readyState != 4) {
				return;
			}
			if(_gthis.request.status != null && (_gthis.request.status >= 200 && _gthis.request.status < 400 || openfl__$internal_HTTPRequest.validStatus0 && _gthis.request.status == 0)) {
				var bytes = null;
				if(_gthis.request.responseType == "") {
					if(_gthis.request.responseText != null) {
						bytes = haxe_io_Bytes.ofString(_gthis.request.responseText);
					}
				} else if(_gthis.request.response != null) {
					bytes = haxe_io_Bytes.ofData(_gthis.request.response);
				}
				_gthis.processResponse();
				openfl__$internal_app__$Promise_Promise_$Impl_$.complete(promise,bytes);
			} else {
				_gthis.processResponse();
				openfl__$internal_app__$Promise_Promise_$Impl_$.error(promise,_gthis.request.status);
			}
			_gthis.request = null;
			openfl__$internal_HTTPRequest.activeRequests--;
			openfl__$internal_HTTPRequest.processQueue();
		});
	}
	,__loadText: function(uri,promise) {
		var _gthis = this;
		this.binary = false;
		this.load(uri,function(event) {
			return openfl__$internal_app__$Promise_Promise_$Impl_$.progress(promise,event.loaded,event.total);
		},function(_) {
			if(_gthis.request.readyState != 4) {
				return;
			}
			if(_gthis.request.status != null && (_gthis.request.status >= 200 && _gthis.request.status <= 400 || openfl__$internal_HTTPRequest.validStatus0 && _gthis.request.status == 0)) {
				_gthis.processResponse();
				openfl__$internal_app__$Promise_Promise_$Impl_$.complete(promise,_gthis.request.responseText);
			} else {
				_gthis.processResponse();
				openfl__$internal_app__$Promise_Promise_$Impl_$.error(promise,_gthis.request.status);
			}
			_gthis.request = null;
			openfl__$internal_HTTPRequest.activeRequests--;
			openfl__$internal_HTTPRequest.processQueue();
		});
	}
	,load: function(uri,progress,readyStateChange) {
		this.request = new XMLHttpRequest();
		if(this.method == "POST") {
			this.request.upload.addEventListener("progress",progress,false);
		} else {
			this.request.addEventListener("progress",progress,false);
		}
		this.request.onreadystatechange = readyStateChange;
		var query = "";
		if(this.data == null) {
			var key = this.formData.keys();
			while(key.hasNext()) {
				var key1 = key.next();
				if(query.length > 0) {
					query += "&";
				}
				var query1 = encodeURIComponent(key1) + "=";
				var _this = this.formData;
				var s = Std.string(__map_reserved[key1] != null ? _this.getReserved(key1) : _this.h[key1]);
				query += query1 + encodeURIComponent(s);
			}
			if(this.method == "GET" && query != "") {
				if(uri.indexOf("?") > -1) {
					uri += "&" + query;
				} else {
					uri += "?" + query;
				}
				query = "";
			}
		}
		this.request.open(this.method,uri,true);
		if(this.timeout > 0) {
			this.request.timeout = this.timeout;
		}
		if(this.binary) {
			this.request.responseType = "arraybuffer";
		}
		var contentType = null;
		var _g = 0;
		var _g1 = this.headers;
		while(_g < _g1.length) {
			var header = _g1[_g];
			++_g;
			if(header.name == "Content-Type") {
				contentType = header.value;
			} else {
				this.request.setRequestHeader(header.name,header.value);
			}
		}
		if(this.contentType != null) {
			contentType = this.contentType;
		}
		if(contentType == null) {
			if(this.data != null) {
				contentType = "application/octet-stream";
			} else if(query != "") {
				contentType = "application/x-www-form-urlencoded";
			}
		}
		if(contentType != null) {
			this.request.setRequestHeader("Content-Type",contentType);
		}
		if(this.withCredentials) {
			this.request.withCredentials = true;
		}
		if(this.data != null) {
			this.request.send(this.data.b.bufferValue);
		} else {
			this.request.send(query);
		}
	}
	,processResponse: function() {
		if(this.enableResponseHeaders) {
			this.responseHeaders = [];
			var _g = 0;
			var _g1 = this.request.getAllResponseHeaders().split("\n");
			while(_g < _g1.length) {
				var line = _g1[_g];
				++_g;
				var colonIndex = line.indexOf(":");
				var name = StringTools.trim(HxOverrides.substr(line,0,colonIndex));
				if(name != "") {
					var value = StringTools.trim(HxOverrides.substr(line,colonIndex + 1,null));
					this.responseHeaders.push(new openfl_net_URLRequestHeader(name,value));
				}
			}
		}
		this.responseStatus = this.request.status;
	}
	,__class__: openfl__$internal_HTTPRequest
};
var openfl__$internal_app_Application = function(config) {
	this.gameDeviceCache = new haxe_ds_IntMap();
	this.config = config;
	openfl__$internal_app_Application.current = this;
};
$hxClasses["openfl._internal.app.Application"] = openfl__$internal_app_Application;
openfl__$internal_app_Application.__name__ = "openfl._internal.app.Application";
openfl__$internal_app_Application.start = function() {
	var app = new openfl__$internal_app_Application({ });
	app._start();
};
openfl__$internal_app_Application.polyfillPerformance = function() {
	
			if ('performance' in window == false) {
				window.performance = {};
			}

			if ('now' in window.performance == false) {
				var offset = Date.now();
				if (performance.timing && performance.timing.navigationStart) {
					offset = performance.timing.navigationStart
				}
				window.performance.now = function now() {
					return Date.now() - offset;
				}
			}
		;
};
openfl__$internal_app_Application.prototype = {
	window: null
	,config: null
	,stage: null
	,gameDeviceCache: null
	,_start: function() {
		var _gthis = this;
		this.window = new openfl__$internal_ui_Window(this);
		var root = new openfl_display_Sprite();
		root.__loaderInfo = openfl_display_LoaderInfo.create(null);
		root.__loaderInfo.content = root;
		openfl_Lib.current = root;
		this.stage = new openfl_display_Stage(this.window);
		this.window.stage = this.stage;
		if(Object.prototype.hasOwnProperty.call(this.config,"parameters")) {
			this.stage.get_loaderInfo().parameters = this.config.parameters;
		}
		this.stage.__start();
		window.addEventListener("keydown",$bind(this,this.handleKeyEvent),false);
		window.addEventListener("keyup",$bind(this,this.handleKeyEvent),false);
		window.addEventListener("focus",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("blur",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("resize",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("beforeunload",$bind(this,this.handleWindowEvent),false);
		window.document.addEventListener("dragstart",function(e) {
			if(e.target.nodeName.toLowerCase() == "img") {
				e.preventDefault();
				return false;
			}
			return true;
		},false);
		kha_System.notifyOnFrames(function(framebuffers) {
			_gthis.onFrame(framebuffers[0]);
			return;
		});
	}
	,handleKeyEvent: function(event) {
		var keyCode = this.convertKeyCode(event.keyCode != null ? event.keyCode : event.which);
		var modifier = (event.shiftKey ? 3 : 0) | (event.ctrlKey ? 192 : 0) | (event.altKey ? 768 : 0) | (event.metaKey ? 3072 : 0);
		if(event.type == "keydown") {
			this.window.onKeyDown.dispatch(keyCode,modifier);
			if(this.window.onKeyDown.canceled) {
				event.preventDefault();
			}
		} else {
			this.window.onKeyUp.dispatch(keyCode,modifier);
			if(this.window.onKeyUp.canceled) {
				event.preventDefault();
			}
		}
	}
	,convertKeyCode: function(keyCode) {
		if(keyCode >= 65 && keyCode <= 90) {
			return keyCode + 32;
		}
		switch(keyCode) {
		case 16:
			return 1073742049;
		case 17:
			return 1073742048;
		case 18:
			return 1073742050;
		case 20:
			return 1073741881;
		case 33:
			return 1073741899;
		case 34:
			return 1073741902;
		case 35:
			return 1073741901;
		case 36:
			return 1073741898;
		case 37:
			return 1073741904;
		case 38:
			return 1073741906;
		case 39:
			return 1073741903;
		case 40:
			return 1073741905;
		case 45:
			return 1073741897;
		case 46:
			return 127;
		case 96:
			return 1073741922;
		case 97:
			return 1073741913;
		case 98:
			return 1073741914;
		case 99:
			return 1073741915;
		case 100:
			return 1073741916;
		case 101:
			return 1073741917;
		case 102:
			return 1073741918;
		case 103:
			return 1073741919;
		case 104:
			return 1073741920;
		case 105:
			return 1073741921;
		case 106:
			return 1073741909;
		case 107:
			return 1073741911;
		case 109:
			return 1073741910;
		case 110:
			return 1073741923;
		case 111:
			return 1073741908;
		case 112:
			return 1073741882;
		case 113:
			return 1073741883;
		case 114:
			return 1073741884;
		case 115:
			return 1073741885;
		case 116:
			return 1073741886;
		case 117:
			return 1073741887;
		case 118:
			return 1073741888;
		case 119:
			return 1073741889;
		case 120:
			return 1073741890;
		case 121:
			return 1073741891;
		case 122:
			return 1073741892;
		case 123:
			return 1073741893;
		case 124:
			return 1073741928;
		case 125:
			return 1073741929;
		case 126:
			return 1073741930;
		case 144:
			return 1073741907;
		case 186:
			return 59;
		case 187:
			return 61;
		case 188:
			return 44;
		case 189:
			return 45;
		case 190:
			return 46;
		case 191:
			return 47;
		case 192:
			return 96;
		case 219:
			return 91;
		case 220:
			return 92;
		case 221:
			return 93;
		case 222:
			return 39;
		default:
			return keyCode;
		}
	}
	,handleWindowEvent: function(event) {
		switch(event.type) {
		case "beforeunload":
			if(!event.defaultPrevented) {
				this.stage.onWindowClose();
				this.window = null;
			}
			break;
		case "blur":
			this.stage.onWindowFocusOut();
			break;
		case "focus":
			this.stage.onWindowFocusIn();
			break;
		case "resize":
			this.window.handleResizeEvent(event);
			break;
		}
	}
	,onFrame: function(framebuffer) {
		if(this.window == null) {
			return;
		}
		this.window.updateSize();
		this.updateGameDevices();
		this.stage.__onFrame(framebuffer);
	}
	,updateGameDevices: function() {
		var devices = openfl__$internal_ui_Gamepad.__getDeviceData();
		if(devices == null) {
			return;
		}
		var id;
		var gamepad;
		var data;
		var cache;
		var _g = 0;
		var _g1 = devices.length;
		while(_g < _g1) {
			var i = _g++;
			id = i;
			data = devices[id];
			if(data == null) {
				continue;
			}
			if(!this.gameDeviceCache.h.hasOwnProperty(id)) {
				cache = new openfl__$internal_app__$Application_GameDeviceData();
				cache.id = id;
				cache.connected = data.connected;
				var _g2 = 0;
				var _g11 = data.buttons.length;
				while(_g2 < _g11) {
					var i1 = _g2++;
					cache.buttons.push(data.buttons[i1].value);
				}
				var _g21 = 0;
				var _g3 = data.axes.length;
				while(_g21 < _g3) {
					var i2 = _g21++;
					cache.axes.push(data.axes[i2]);
				}
				this.gameDeviceCache.h[id] = cache;
				if(data.connected) {
					openfl__$internal_ui_Gamepad.__connect(id);
				}
			}
			cache = this.gameDeviceCache.h[id];
			gamepad = openfl__$internal_ui_Gamepad.devices.h[id];
			if(data.connected) {
				var button;
				var value;
				var _g4 = 0;
				var _g12 = data.buttons.length;
				while(_g4 < _g12) {
					var i3 = _g4++;
					value = data.buttons[i3].value;
					if(value != cache.buttons[i3]) {
						if(i3 == 6) {
							gamepad.onAxisMove.dispatch(4,value);
						} else if(i3 == 7) {
							gamepad.onAxisMove.dispatch(5,value);
						} else {
							switch(i3) {
							case 0:
								button = 0;
								break;
							case 1:
								button = 1;
								break;
							case 2:
								button = 2;
								break;
							case 3:
								button = 3;
								break;
							case 4:
								button = 9;
								break;
							case 5:
								button = 10;
								break;
							case 8:
								button = 4;
								break;
							case 9:
								button = 6;
								break;
							case 10:
								button = 7;
								break;
							case 11:
								button = 8;
								break;
							case 12:
								button = 11;
								break;
							case 13:
								button = 12;
								break;
							case 14:
								button = 13;
								break;
							case 15:
								button = 14;
								break;
							case 16:
								button = 5;
								break;
							default:
								continue;
							}
							if(value > 0) {
								gamepad.onButtonDown.dispatch(button);
							} else {
								gamepad.onButtonUp.dispatch(button);
							}
						}
						cache.buttons[i3] = value;
					}
				}
				var _g22 = 0;
				var _g31 = data.axes.length;
				while(_g22 < _g31) {
					var i4 = _g22++;
					if(data.axes[i4] != cache.axes[i4]) {
						gamepad.onAxisMove.dispatch(i4,data.axes[i4]);
						cache.axes[i4] = data.axes[i4];
					}
				}
			} else if(cache.connected) {
				cache.connected = false;
				openfl__$internal_ui_Gamepad.__disconnect(id);
			}
		}
	}
	,__class__: openfl__$internal_app_Application
};
var openfl__$internal_app__$Application_GameDeviceData = function() {
	this.connected = true;
	this.buttons = [];
	this.axes = [];
};
$hxClasses["openfl._internal.app._Application.GameDeviceData"] = openfl__$internal_app__$Application_GameDeviceData;
openfl__$internal_app__$Application_GameDeviceData.__name__ = "openfl._internal.app._Application.GameDeviceData";
openfl__$internal_app__$Application_GameDeviceData.prototype = {
	connected: null
	,id: null
	,buttons: null
	,axes: null
	,__class__: openfl__$internal_app__$Application_GameDeviceData
};
var openfl__$internal_app_Event = function() { };
$hxClasses["openfl._internal.app.Event"] = openfl__$internal_app_Event;
openfl__$internal_app_Event.__name__ = "openfl._internal.app.Event";
var openfl__$internal_app__$Event_EventBase = function() {
	this.canceled = false;
	this.__listeners = [];
};
$hxClasses["openfl._internal.app._Event.EventBase"] = openfl__$internal_app__$Event_EventBase;
openfl__$internal_app__$Event_EventBase.__name__ = "openfl._internal.app._Event.EventBase";
openfl__$internal_app__$Event_EventBase.prototype = {
	canceled: null
	,__listeners: null
	,add: function(listener) {
		this.__listeners.push(listener);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
		}
	}
	,__class__: openfl__$internal_app__$Event_EventBase
};
var openfl__$internal_app_Event0 = function() {
	openfl__$internal_app__$Event_EventBase.call(this);
};
$hxClasses["openfl._internal.app.Event0"] = openfl__$internal_app_Event0;
openfl__$internal_app_Event0.__name__ = "openfl._internal.app.Event0";
openfl__$internal_app_Event0.__super__ = openfl__$internal_app__$Event_EventBase;
openfl__$internal_app_Event0.prototype = $extend(openfl__$internal_app__$Event_EventBase.prototype,{
	dispatch: function() {
		this.canceled = false;
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var listener = _g1[_g];
			++_g;
			listener();
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: openfl__$internal_app_Event0
});
var openfl__$internal_app_Event1 = function() {
	openfl__$internal_app__$Event_EventBase.call(this);
};
$hxClasses["openfl._internal.app.Event1"] = openfl__$internal_app_Event1;
openfl__$internal_app_Event1.__name__ = "openfl._internal.app.Event1";
openfl__$internal_app_Event1.__super__ = openfl__$internal_app__$Event_EventBase;
openfl__$internal_app_Event1.prototype = $extend(openfl__$internal_app__$Event_EventBase.prototype,{
	dispatch: function(arg) {
		this.canceled = false;
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var listener = _g1[_g];
			++_g;
			listener(arg);
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: openfl__$internal_app_Event1
});
var openfl__$internal_app_Event2 = function() {
	openfl__$internal_app__$Event_EventBase.call(this);
};
$hxClasses["openfl._internal.app.Event2"] = openfl__$internal_app_Event2;
openfl__$internal_app_Event2.__name__ = "openfl._internal.app.Event2";
openfl__$internal_app_Event2.__super__ = openfl__$internal_app__$Event_EventBase;
openfl__$internal_app_Event2.prototype = $extend(openfl__$internal_app__$Event_EventBase.prototype,{
	dispatch: function(arg1,arg2) {
		this.canceled = false;
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var listener = _g1[_g];
			++_g;
			listener(arg1,arg2);
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: openfl__$internal_app_Event2
});
var openfl__$internal_app_Event3 = function() {
	openfl__$internal_app__$Event_EventBase.call(this);
};
$hxClasses["openfl._internal.app.Event3"] = openfl__$internal_app_Event3;
openfl__$internal_app_Event3.__name__ = "openfl._internal.app.Event3";
openfl__$internal_app_Event3.__super__ = openfl__$internal_app__$Event_EventBase;
openfl__$internal_app_Event3.prototype = $extend(openfl__$internal_app__$Event_EventBase.prototype,{
	dispatch: function(arg1,arg2,arg3) {
		this.canceled = false;
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var listener = _g1[_g];
			++_g;
			listener(arg1,arg2,arg3);
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: openfl__$internal_app_Event3
});
var openfl__$internal_app_Future = function() {
};
$hxClasses["openfl._internal.app.Future"] = openfl__$internal_app_Future;
openfl__$internal_app_Future.__name__ = "openfl._internal.app.Future";
openfl__$internal_app_Future.withError = function(error) {
	var future = new openfl__$internal_app_Future();
	future.isError = true;
	future.error = error;
	return future;
};
openfl__$internal_app_Future.withValue = function(value) {
	var future = new openfl__$internal_app_Future();
	future.isComplete = true;
	future.value = value;
	return future;
};
openfl__$internal_app_Future.prototype = {
	error: null
	,isComplete: null
	,isError: null
	,value: null
	,__completeListeners: null
	,__errorListeners: null
	,__progressListeners: null
	,onComplete: function(listener) {
		if(listener != null) {
			if(this.isComplete) {
				listener(this.value);
			} else if(!this.isError) {
				if(this.__completeListeners == null) {
					this.__completeListeners = [];
				}
				this.__completeListeners.push(listener);
			}
		}
		return this;
	}
	,onError: function(listener) {
		if(listener != null) {
			if(this.isError) {
				listener(this.error);
			} else if(!this.isComplete) {
				if(this.__errorListeners == null) {
					this.__errorListeners = [];
				}
				this.__errorListeners.push(listener);
			}
		}
		return this;
	}
	,onProgress: function(listener) {
		if(listener != null) {
			if(this.__progressListeners == null) {
				this.__progressListeners = [];
			}
			this.__progressListeners.push(listener);
		}
		return this;
	}
	,then: function(next) {
		if(this.isComplete) {
			return next(this.value);
		} else if(this.isError) {
			var future = new openfl__$internal_app_Future();
			future.onError(this.error);
			return future;
		} else {
			var this1 = new openfl__$internal_app_Future();
			var promise = this1;
			var _e = promise;
			this.onError(function(msg) {
				return openfl__$internal_app__$Promise_Promise_$Impl_$.error(_e,msg);
			});
			var _e1 = promise;
			this.onProgress(function(progress,total) {
				return openfl__$internal_app__$Promise_Promise_$Impl_$.progress(_e1,progress,total);
			});
			this.onComplete(function(val) {
				var future1 = next(val);
				var _e2 = promise;
				future1.onError(function(msg1) {
					return openfl__$internal_app__$Promise_Promise_$Impl_$.error(_e2,msg1);
				});
				var _e3 = promise;
				future1.onComplete(function(data) {
					return openfl__$internal_app__$Promise_Promise_$Impl_$.complete(_e3,data);
				});
			});
			return promise;
		}
	}
	,__class__: openfl__$internal_app_Future
};
var openfl__$internal_app__$Promise_Promise_$Impl_$ = {};
$hxClasses["openfl._internal.app._Promise.Promise_Impl_"] = openfl__$internal_app__$Promise_Promise_$Impl_$;
openfl__$internal_app__$Promise_Promise_$Impl_$.__name__ = "openfl._internal.app._Promise.Promise_Impl_";
openfl__$internal_app__$Promise_Promise_$Impl_$.__properties__ = {get_isError:"get_isError",get_isComplete:"get_isComplete",get_future:"get_future"};
openfl__$internal_app__$Promise_Promise_$Impl_$._new = function() {
	var this1 = new openfl__$internal_app_Future();
	return this1;
};
openfl__$internal_app__$Promise_Promise_$Impl_$.complete = function(this1,data) {
	if(!this1.isError) {
		this1.isComplete = true;
		this1.value = data;
		if(this1.__completeListeners != null) {
			var _g = 0;
			var _g1 = this1.__completeListeners;
			while(_g < _g1.length) {
				var listener = _g1[_g];
				++_g;
				listener(data);
			}
			this1.__completeListeners = null;
		}
	}
	return this1;
};
openfl__$internal_app__$Promise_Promise_$Impl_$.completeWith = function(this1,future) {
	var _e = this1;
	future.onComplete(function(data) {
		return openfl__$internal_app__$Promise_Promise_$Impl_$.complete(_e,data);
	});
	var _e1 = this1;
	future.onError(function(msg) {
		return openfl__$internal_app__$Promise_Promise_$Impl_$.error(_e1,msg);
	});
	var _e2 = this1;
	future.onProgress(function(progress,total) {
		return openfl__$internal_app__$Promise_Promise_$Impl_$.progress(_e2,progress,total);
	});
	return this1;
};
openfl__$internal_app__$Promise_Promise_$Impl_$.error = function(this1,msg) {
	if(!this1.isComplete) {
		this1.isError = true;
		this1.error = msg;
		if(this1.__errorListeners != null) {
			var _g = 0;
			var _g1 = this1.__errorListeners;
			while(_g < _g1.length) {
				var listener = _g1[_g];
				++_g;
				listener(msg);
			}
			this1.__errorListeners = null;
		}
	}
	return this1;
};
openfl__$internal_app__$Promise_Promise_$Impl_$.progress = function(this1,progress,total) {
	if(!this1.isError && !this1.isComplete) {
		if(this1.__progressListeners != null) {
			var _g = 0;
			var _g1 = this1.__progressListeners;
			while(_g < _g1.length) {
				var listener = _g1[_g];
				++_g;
				listener(progress,total);
			}
		}
	}
	return this1;
};
openfl__$internal_app__$Promise_Promise_$Impl_$.get_future = function(this1) {
	return this1;
};
openfl__$internal_app__$Promise_Promise_$Impl_$.get_isComplete = function(this1) {
	return this1.isComplete;
};
openfl__$internal_app__$Promise_Promise_$Impl_$.get_isError = function(this1) {
	return this1.isError;
};
var openfl__$internal_graphics_ImageType = $hxEnums["openfl._internal.graphics.ImageType"] = { __ename__ : "openfl._internal.graphics.ImageType", __constructs__ : ["CANVAS","DATA"]
	,CANVAS: {_hx_index:0,__enum__:"openfl._internal.graphics.ImageType",toString:$estr}
	,DATA: {_hx_index:1,__enum__:"openfl._internal.graphics.ImageType",toString:$estr}
};
var openfl__$internal_graphics_Image = function(width,height) {
	this.transparent = true;
	this.width = width;
	this.height = height;
	this.version = 0;
	this.type = openfl__$internal_graphics_ImageType.CANVAS;
};
$hxClasses["openfl._internal.graphics.Image"] = openfl__$internal_graphics_Image;
openfl__$internal_graphics_Image.__name__ = "openfl._internal.graphics.Image";
openfl__$internal_graphics_Image.fromColor = function(width,height,fillColor,transparent) {
	if(transparent) {
		if((fillColor & -16777216) == 0) {
			fillColor = 0;
		}
	} else {
		fillColor = -16777216 | fillColor & 16777215;
	}
	fillColor = fillColor << 8 | fillColor >> 24 & 255;
	var image = new openfl__$internal_graphics_Image(width,height);
	image.transparent = transparent;
	image.createCanvas();
	if(fillColor != 0) {
		image.fillRect(new openfl_geom_Rectangle(0,0,width,height),fillColor,0);
	}
	return image;
};
openfl__$internal_graphics_Image.fromCanvas = function(canvas) {
	var image = new openfl__$internal_graphics_Image(canvas.width,canvas.height);
	image.__srcCanvas = canvas;
	image.__srcContext = canvas.getContext("2d",null);
	return image;
};
openfl__$internal_graphics_Image.fromHTMLImage = function(htmlImage) {
	var image = new openfl__$internal_graphics_Image(htmlImage.width,htmlImage.height);
	image.__srcImage = htmlImage;
	return image;
};
openfl__$internal_graphics_Image.loadFromBase64 = function(base64,type) {
	if(base64 == null || type == null) {
		return openfl__$internal_app_Future.withValue(null);
	}
	return openfl__$internal_HTTPRequest.loadImage("data:" + type + ";base64," + base64);
};
openfl__$internal_graphics_Image.loadFromBytes = function(bytes) {
	if(bytes == null) {
		return openfl__$internal_app_Future.withValue(null);
	}
	var type = "";
	if(openfl__$internal_graphics_Image.__isPNG(bytes)) {
		type = "image/png";
	} else if(openfl__$internal_graphics_Image.__isJPG(bytes)) {
		type = "image/jpeg";
	} else if(openfl__$internal_graphics_Image.__isGIF(bytes)) {
		type = "image/gif";
	} else if(openfl__$internal_graphics_Image.__isWebP(bytes)) {
		type = "image/webp";
	} else {
		return openfl__$internal_app_Future.withValue(null);
	}
	return openfl__$internal_graphics_Image.loadFromBase64(openfl__$internal_graphics_Image.__base64Encode(bytes),type);
};
openfl__$internal_graphics_Image.loadFromFile = function(path) {
	if(path == null) {
		return openfl__$internal_app_Future.withValue(null);
	}
	return openfl__$internal_HTTPRequest.loadImage(path);
};
openfl__$internal_graphics_Image.__base64Encode = function(bytes) {
	var extension;
	switch(bytes.length % 3) {
	case 1:
		extension = "==";
		break;
	case 2:
		extension = "=";
		break;
	default:
		extension = "";
	}
	if(openfl__$internal_graphics_Image.__base64Encoder == null) {
		openfl__$internal_graphics_Image.__base64Encoder = new haxe_crypto_BaseCode(haxe_io_Bytes.ofString("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"));
	}
	return openfl__$internal_graphics_Image.__base64Encoder.encodeBytes(bytes).toString() + extension;
};
openfl__$internal_graphics_Image.fromBytes = function(bytes,onload) {
	var type;
	if(openfl__$internal_graphics_Image.__isPNG(bytes)) {
		type = "image/png";
	} else if(openfl__$internal_graphics_Image.__isJPG(bytes)) {
		type = "image/jpeg";
	} else if(openfl__$internal_graphics_Image.__isGIF(bytes)) {
		type = "image/gif";
	} else {
		haxe_Log.trace("Image tried to read PNG/JPG Bytes, but found an invalid header.",{ fileName : "openfl/_internal/graphics/Image.hx", lineNumber : 480, className : "openfl._internal.graphics.Image", methodName : "fromBytes"});
		return;
	}
	openfl__$internal_graphics_Image.__fromBase64(openfl__$internal_graphics_Image.__base64Encode(bytes),type,onload);
};
openfl__$internal_graphics_Image.__fromBase64 = function(base64,type,onload) {
	var image = new Image();
	image.addEventListener("load",function(_) {
		var tmp = openfl__$internal_graphics_Image.fromHTMLImage(image);
		onload(tmp);
		return;
	},false);
	image.src = "data:" + type + ";base64," + base64;
};
openfl__$internal_graphics_Image.__isGIF = function(bytes) {
	if(bytes.length < 6) {
		return false;
	}
	var header = bytes.getString(0,6);
	if(header != "GIF87a") {
		return header == "GIF89a";
	} else {
		return true;
	}
};
openfl__$internal_graphics_Image.__isJPG = function(bytes) {
	if(bytes.length < 4) {
		return false;
	}
	if(bytes.b[0] == 255 && bytes.b[1] == 216 && bytes.b[bytes.length - 2] == 255) {
		return bytes.b[bytes.length - 1] == 217;
	} else {
		return false;
	}
};
openfl__$internal_graphics_Image.__isPNG = function(bytes) {
	if(bytes.length < 8) {
		return false;
	}
	if(bytes.b[0] == 137 && bytes.b[1] == 80 && bytes.b[2] == 78 && bytes.b[3] == 71 && bytes.b[4] == 13 && bytes.b[5] == 10 && bytes.b[6] == 26) {
		return bytes.b[7] == 10;
	} else {
		return false;
	}
};
openfl__$internal_graphics_Image.__isWebP = function(bytes) {
	if(bytes.length < 16) {
		return false;
	}
	if(bytes.getString(0,4) == "RIFF") {
		return bytes.getString(8,4) == "WEBP";
	} else {
		return false;
	}
};
openfl__$internal_graphics_Image.prototype = {
	width: null
	,height: null
	,dirty: null
	,transparent: null
	,type: null
	,version: null
	,data: null
	,__srcCanvas: null
	,__srcContext: null
	,__srcImage: null
	,__srcImageData: null
	,sync: function() {
		if(this.type == openfl__$internal_graphics_ImageType.CANVAS) {
			openfl__$internal_graphics_utils_ImageCanvasUtil.convertToCanvas(this,false);
		} else {
			openfl__$internal_graphics_utils_ImageCanvasUtil.convertToData(this);
		}
	}
	,createCanvas: function() {
		this.__srcCanvas = window.document.createElement("canvas");
		this.__srcCanvas.width = this.width;
		this.__srcCanvas.height = this.height;
		if(!this.transparent) {
			this.__srcCanvas.setAttribute("moz-opaque","true");
			this.__srcContext = this.__srcCanvas.getContext("2d",{ alpha : false});
		} else {
			this.__srcContext = this.__srcCanvas.getContext("2d",null);
		}
		var context = this.__srcContext;
		context.mozImageSmoothingEnabled = false;
		context.msImageSmoothingEnabled = false;
		context.imageSmoothingEnabled = false;
	}
	,createImageData: function() {
		if(this.__srcImageData == null) {
			if(this.data == null) {
				this.__srcImageData = this.__srcContext.getImageData(0,0,this.width,this.height);
			} else {
				this.__srcImageData = this.__srcContext.createImageData(this.width,this.height);
				this.__srcImageData.data.set(this.data);
			}
			this.data = new Uint8Array(this.__srcImageData.data.buffer);
		}
	}
	,clone: function() {
		this.sync();
		var image = new openfl__$internal_graphics_Image(this.width,this.height);
		image.version = this.version;
		image.type = this.type;
		if(this.data != null) {
			image.data = new Uint8Array(this.data.length);
			image.data.set(new Uint8Array(this.data));
		} else if(this.__srcImageData != null) {
			image.__srcCanvas = window.document.createElement("canvas");
			image.__srcContext = image.__srcCanvas.getContext("2d",null);
			image.__srcCanvas.width = this.__srcImageData.width;
			image.__srcCanvas.height = this.__srcImageData.height;
			image.__srcImageData = image.__srcContext.createImageData(this.__srcImageData.width,this.__srcImageData.height);
			image.__srcImageData.data.set(new Uint8ClampedArray(this.__srcImageData.data));
		} else if(this.__srcCanvas != null) {
			image.__srcCanvas = window.document.createElement("canvas");
			image.__srcContext = image.__srcCanvas.getContext("2d",null);
			image.__srcCanvas.width = this.__srcCanvas.width;
			image.__srcCanvas.height = this.__srcCanvas.height;
			image.__srcContext.drawImage(this.__srcCanvas,0,0);
		} else {
			image.__srcImage = this.__srcImage;
		}
		return image;
	}
	,copyChannel: function(sourceImage,sourceRect,destPoint,sourceChannel,destChannel) {
		sourceRect = this.__clipRect(sourceRect);
		if(sourceRect == null) {
			return;
		}
		if(destChannel == 8 && !this.transparent) {
			return;
		}
		if(sourceRect.width <= 0 || sourceRect.height <= 0) {
			return;
		}
		if(sourceRect.x + sourceRect.width > sourceImage.width) {
			sourceRect.width = sourceImage.width - sourceRect.x;
		}
		if(sourceRect.y + sourceRect.height > sourceImage.height) {
			sourceRect.height = sourceImage.height - sourceRect.y;
		}
		openfl__$internal_graphics_utils_ImageCanvasUtil.convertToData(this);
		openfl__$internal_graphics_utils_ImageCanvasUtil.convertToData(sourceImage);
		openfl__$internal_graphics_utils_ImageDataUtil.copyChannel(this,sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
	}
	,copyPixels: function(sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha) {
		if(mergeAlpha == null) {
			mergeAlpha = false;
		}
		if(sourceImage == null) {
			return;
		}
		if(sourceRect.width <= 0 || sourceRect.height <= 0) {
			return;
		}
		if(this.width <= 0 || this.height <= 0) {
			return;
		}
		if(sourceRect.x + sourceRect.width > sourceImage.width) {
			sourceRect.width = sourceImage.width - sourceRect.x;
		}
		if(sourceRect.y + sourceRect.height > sourceImage.height) {
			sourceRect.height = sourceImage.height - sourceRect.y;
		}
		if(sourceRect.x < 0) {
			sourceRect.width += sourceRect.x;
			sourceRect.x = 0;
		}
		if(sourceRect.y < 0) {
			sourceRect.height += sourceRect.y;
			sourceRect.y = 0;
		}
		if(destPoint.x + sourceRect.width > this.width) {
			sourceRect.width = this.width - destPoint.x;
		}
		if(destPoint.y + sourceRect.height > this.height) {
			sourceRect.height = this.height - destPoint.y;
		}
		if(destPoint.x < 0) {
			sourceRect.width += destPoint.x;
			sourceRect.x -= destPoint.x;
			destPoint.x = 0;
		}
		if(destPoint.y < 0) {
			sourceRect.height += destPoint.y;
			sourceRect.y -= destPoint.y;
			destPoint.y = 0;
		}
		if(sourceImage == this && destPoint.x < sourceRect.get_right() && destPoint.y < sourceRect.get_bottom()) {
			sourceImage = this.clone();
		}
		switch(this.type._hx_index) {
		case 0:
			if(alphaImage != null || sourceImage.type != openfl__$internal_graphics_ImageType.CANVAS) {
				openfl__$internal_graphics_utils_ImageCanvasUtil.convertToData(this);
				openfl__$internal_graphics_utils_ImageCanvasUtil.convertToData(sourceImage);
				if(alphaImage != null) {
					openfl__$internal_graphics_utils_ImageCanvasUtil.convertToData(alphaImage);
				}
				openfl__$internal_graphics_utils_ImageDataUtil.copyPixels(this,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha);
			} else {
				openfl__$internal_graphics_utils_ImageCanvasUtil.convertToCanvas(this);
				openfl__$internal_graphics_utils_ImageCanvasUtil.convertToCanvas(sourceImage);
				openfl__$internal_graphics_utils_ImageCanvasUtil.copyPixels(this,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha);
			}
			break;
		case 1:
			openfl__$internal_graphics_utils_ImageCanvasUtil.convertToData(this);
			openfl__$internal_graphics_utils_ImageCanvasUtil.convertToData(sourceImage);
			if(alphaImage != null) {
				openfl__$internal_graphics_utils_ImageCanvasUtil.convertToData(alphaImage);
			}
			openfl__$internal_graphics_utils_ImageDataUtil.copyPixels(this,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha);
			break;
		}
	}
	,fillRect: function(rect,color,format) {
		rect = this.__clipRect(rect);
		if(rect == null) {
			return;
		}
		switch(this.type._hx_index) {
		case 0:
			openfl__$internal_graphics_utils_ImageCanvasUtil.fillRect(this,rect,color,format);
			break;
		case 1:
			openfl__$internal_graphics_utils_ImageCanvasUtil.convertToData(this);
			if(this.data.length == 0) {
				return;
			}
			openfl__$internal_graphics_utils_ImageDataUtil.fillRect(this,rect,color,format);
			break;
		}
	}
	,floodFill: function(x,y,color) {
		openfl__$internal_graphics_utils_ImageCanvasUtil.convertToData(this);
		openfl__$internal_graphics_utils_ImageDataUtil.floodFill(this,x,y,(color & 16777215) << 8 | color >> 24 & 255);
	}
	,getColorBoundsRect: function(mask,color,findColor,format) {
		if(findColor == null) {
			findColor = true;
		}
		switch(this.type._hx_index) {
		case 0:
			openfl__$internal_graphics_utils_ImageCanvasUtil.convertToData(this);
			return openfl__$internal_graphics_utils_ImageDataUtil.getColorBoundsRect(this,mask,color,findColor,format);
		case 1:
			return openfl__$internal_graphics_utils_ImageDataUtil.getColorBoundsRect(this,mask,color,findColor,format);
		}
	}
	,getPixel: function(x,y,format) {
		if(x < 0 || y < 0 || x >= this.width || y >= this.height) {
			return 0;
		}
		openfl__$internal_graphics_utils_ImageCanvasUtil.convertToData(this);
		return openfl__$internal_graphics_utils_ImageDataUtil.getPixel(this,x,y,format);
	}
	,getPixel32: function(x,y,format) {
		if(x < 0 || y < 0 || x >= this.width || y >= this.height) {
			return 0;
		}
		openfl__$internal_graphics_utils_ImageCanvasUtil.convertToData(this);
		return openfl__$internal_graphics_utils_ImageDataUtil.getPixel32(this,x,y,format);
	}
	,getPixels: function(rect,format) {
		openfl__$internal_graphics_utils_ImageCanvasUtil.convertToData(this);
		return openfl__$internal_graphics_utils_ImageDataUtil.getPixels(this,rect,format);
	}
	,getData: function() {
		if(this.data == null && this.width > 0 && this.height > 0) {
			openfl__$internal_graphics_utils_ImageCanvasUtil.convertToData(this);
		}
		return this.data;
	}
	,merge: function(sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
		if(sourceImage == null) {
			return;
		}
		if(this.type == openfl__$internal_graphics_ImageType.CANVAS) {
			openfl__$internal_graphics_utils_ImageCanvasUtil.convertToCanvas(this);
		}
		openfl__$internal_graphics_utils_ImageCanvasUtil.convertToData(this);
		openfl__$internal_graphics_utils_ImageCanvasUtil.convertToData(sourceImage);
		openfl__$internal_graphics_utils_ImageDataUtil.merge(this,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
	}
	,scroll: function(x,y) {
		switch(this.type._hx_index) {
		case 0:
			openfl__$internal_graphics_utils_ImageCanvasUtil.scroll(this,x,y);
			break;
		case 1:
			this.copyPixels(this,this.get_rect(),new openfl_geom_Point(x,y));
			break;
		}
	}
	,setPixel: function(x,y,color,format) {
		if(x < 0 || y < 0 || x >= this.width || y >= this.height) {
			return;
		}
		openfl__$internal_graphics_utils_ImageCanvasUtil.convertToData(this);
		openfl__$internal_graphics_utils_ImageDataUtil.setPixel(this,x,y,color,format);
	}
	,setPixel32: function(x,y,color,format) {
		if(x < 0 || y < 0 || x >= this.width || y >= this.height) {
			return;
		}
		openfl__$internal_graphics_utils_ImageCanvasUtil.convertToData(this);
		openfl__$internal_graphics_utils_ImageDataUtil.setPixel32(this,x,y,color,format);
	}
	,setPixels: function(rect,bytes,format,endian) {
		rect = this.__clipRect(rect);
		if(rect == null) {
			return;
		}
		openfl__$internal_graphics_utils_ImageCanvasUtil.convertToData(this);
		openfl__$internal_graphics_utils_ImageDataUtil.setPixels(this,rect,bytes,format,endian);
	}
	,threshold: function(sourceImage,sourceRect,destPoint,operation,threshold,color,mask,copySource,format) {
		if(sourceImage == null || sourceRect == null) {
			return 0;
		}
		openfl__$internal_graphics_utils_ImageCanvasUtil.convertToData(this);
		openfl__$internal_graphics_utils_ImageCanvasUtil.convertToData(sourceImage);
		return openfl__$internal_graphics_utils_ImageDataUtil.threshold(this,sourceImage,sourceRect,destPoint,operation,threshold,color,mask,copySource,format);
	}
	,encodePNG: function() {
		return this.__encode("image/png",null);
	}
	,encodeJPEG: function(quality) {
		return this.__encode("image/jpeg",quality / 100);
	}
	,__encode: function(type,encoderOptions) {
		openfl__$internal_graphics_utils_ImageCanvasUtil.convertToCanvas(this,false);
		if(this.__srcCanvas == null) {
			return null;
		}
		var data = this.__srcCanvas.toDataURL("image/jpeg",encoderOptions);
		var buffer = window.atob(data.split(";base64,")[1]);
		var bytes = new haxe_io_Bytes(new ArrayBuffer(buffer.length));
		var _g = 0;
		var _g1 = buffer.length;
		while(_g < _g1) {
			var i = _g++;
			var v = buffer.charCodeAt(i);
			bytes.b[i] = v;
		}
		return bytes;
	}
	,__clipRect: function(r) {
		if(r == null) {
			return null;
		}
		if(r.x < 0) {
			r.width -= -r.x;
			r.x = 0;
			if(r.x + r.width <= 0) {
				return null;
			}
		}
		if(r.y < 0) {
			r.height -= -r.y;
			r.y = 0;
			if(r.y + r.height <= 0) {
				return null;
			}
		}
		if(r.x + r.width >= this.width) {
			r.width -= r.x + r.width - this.width;
			if(r.width <= 0) {
				return null;
			}
		}
		if(r.y + r.height >= this.height) {
			r.height -= r.y + r.height - this.height;
			if(r.height <= 0) {
				return null;
			}
		}
		return r;
	}
	,get_rect: function() {
		return new openfl_geom_Rectangle(0,0,this.width,this.height);
	}
	,get_src: function() {
		if(this.__srcImage != null) {
			return this.__srcImage;
		}
		return this.__srcCanvas;
	}
	,get_stride: function() {
		return this.width * 4;
	}
	,__class__: openfl__$internal_graphics_Image
	,__properties__: {get_stride:"get_stride",get_src:"get_src",get_rect:"get_rect"}
};
var openfl__$internal_graphics_color__$ARGB_ARGB_$Impl_$ = {};
$hxClasses["openfl._internal.graphics.color._ARGB.ARGB_Impl_"] = openfl__$internal_graphics_color__$ARGB_ARGB_$Impl_$;
openfl__$internal_graphics_color__$ARGB_ARGB_$Impl_$.__name__ = "openfl._internal.graphics.color._ARGB.ARGB_Impl_";
openfl__$internal_graphics_color__$ARGB_ARGB_$Impl_$.__properties__ = {set_r:"set_r",get_r:"get_r",set_g:"set_g",get_g:"get_g",set_b:"set_b",get_b:"get_b",set_a:"set_a",get_a:"get_a"};
openfl__$internal_graphics_color__$ARGB_ARGB_$Impl_$.set = function(this1,a,r,g,b) {
	this1 = (a & 255) << 24 | (r & 255) << 16 | (g & 255) << 8 | b & 255;
};
openfl__$internal_graphics_color__$ARGB_ARGB_$Impl_$.__fromRGBA = function(rgba) {
	var argb = 0;
	argb = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
	return argb;
};
openfl__$internal_graphics_color__$ARGB_ARGB_$Impl_$.get_a = function(this1) {
	return this1 >>> 24 & 255;
};
openfl__$internal_graphics_color__$ARGB_ARGB_$Impl_$.set_a = function(this1,value) {
	this1 = (value & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
openfl__$internal_graphics_color__$ARGB_ARGB_$Impl_$.get_b = function(this1) {
	return this1 & 255;
};
openfl__$internal_graphics_color__$ARGB_ARGB_$Impl_$.set_b = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | value & 255;
	return value;
};
openfl__$internal_graphics_color__$ARGB_ARGB_$Impl_$.get_g = function(this1) {
	return this1 >>> 8 & 255;
};
openfl__$internal_graphics_color__$ARGB_ARGB_$Impl_$.set_g = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (value & 255) << 8 | this1 & 255 & 255;
	return value;
};
openfl__$internal_graphics_color__$ARGB_ARGB_$Impl_$.get_r = function(this1) {
	return this1 >>> 16 & 255;
};
openfl__$internal_graphics_color__$ARGB_ARGB_$Impl_$.set_r = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (value & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
var openfl__$internal_graphics_color__$RGBA_RGBA_$Impl_$ = {};
$hxClasses["openfl._internal.graphics.color._RGBA.RGBA_Impl_"] = openfl__$internal_graphics_color__$RGBA_RGBA_$Impl_$;
openfl__$internal_graphics_color__$RGBA_RGBA_$Impl_$.__name__ = "openfl._internal.graphics.color._RGBA.RGBA_Impl_";
openfl__$internal_graphics_color__$RGBA_RGBA_$Impl_$.__properties__ = {set_r:"set_r",get_r:"get_r",set_g:"set_g",get_g:"get_g",set_b:"set_b",get_b:"get_b",set_a:"set_a",get_a:"get_a"};
openfl__$internal_graphics_color__$RGBA_RGBA_$Impl_$._new = function(rgba) {
	if(rgba == null) {
		rgba = 0;
	}
	var this1 = rgba;
	return this1;
};
openfl__$internal_graphics_color__$RGBA_RGBA_$Impl_$.create = function(r,g,b,a) {
	var this1 = 0;
	var rgba = this1;
	rgba = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | a & 255;
	return rgba;
};
openfl__$internal_graphics_color__$RGBA_RGBA_$Impl_$.readUInt8 = function(this1,data,offset) {
	this1 = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
};
openfl__$internal_graphics_color__$RGBA_RGBA_$Impl_$.set = function(this1,r,g,b,a) {
	this1 = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | a & 255;
};
openfl__$internal_graphics_color__$RGBA_RGBA_$Impl_$.writeUInt8 = function(this1,data,offset) {
	data[offset] = this1 >>> 24 & 255;
	data[offset + 1] = this1 >>> 16 & 255;
	data[offset + 2] = this1 >>> 8 & 255;
	data[offset + 3] = this1 & 255;
};
openfl__$internal_graphics_color__$RGBA_RGBA_$Impl_$.__fromARGB = function(argb) {
	var this1 = 0;
	var rgba = this1;
	rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
	return rgba;
};
openfl__$internal_graphics_color__$RGBA_RGBA_$Impl_$.get_a = function(this1) {
	return this1 & 255;
};
openfl__$internal_graphics_color__$RGBA_RGBA_$Impl_$.set_a = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | value & 255;
	return value;
};
openfl__$internal_graphics_color__$RGBA_RGBA_$Impl_$.get_b = function(this1) {
	return this1 >>> 8 & 255;
};
openfl__$internal_graphics_color__$RGBA_RGBA_$Impl_$.set_b = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (value & 255) << 8 | this1 & 255 & 255;
	return value;
};
openfl__$internal_graphics_color__$RGBA_RGBA_$Impl_$.get_g = function(this1) {
	return this1 >>> 16 & 255;
};
openfl__$internal_graphics_color__$RGBA_RGBA_$Impl_$.set_g = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (value & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
openfl__$internal_graphics_color__$RGBA_RGBA_$Impl_$.get_r = function(this1) {
	return this1 >>> 24 & 255;
};
openfl__$internal_graphics_color__$RGBA_RGBA_$Impl_$.set_r = function(this1,value) {
	this1 = (value & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
var openfl__$internal_graphics_utils_ImageCanvasUtil = function() { };
$hxClasses["openfl._internal.graphics.utils.ImageCanvasUtil"] = openfl__$internal_graphics_utils_ImageCanvasUtil;
openfl__$internal_graphics_utils_ImageCanvasUtil.__name__ = "openfl._internal.graphics.utils.ImageCanvasUtil";
openfl__$internal_graphics_utils_ImageCanvasUtil.convertToCanvas = function(image,clear) {
	if(clear == null) {
		clear = false;
	}
	if(image.__srcImage != null) {
		if(image.__srcCanvas == null) {
			image.createCanvas();
			image.__srcContext.drawImage(image.__srcImage,0,0);
		}
		image.__srcImage = null;
	} else if(image.__srcCanvas == null && image.data != null) {
		image.transparent = true;
		image.createCanvas();
		image.createImageData();
		image.__srcContext.putImageData(image.__srcImageData,0,0);
	} else if(image.type == openfl__$internal_graphics_ImageType.DATA && image.__srcImageData != null && image.dirty) {
		image.__srcContext.putImageData(image.__srcImageData,0,0);
		image.dirty = false;
	}
	if(clear) {
		image.data = null;
		image.__srcImageData = null;
	} else if(image.data == null && image.__srcImageData != null) {
		image.data = image.__srcImageData.data;
	}
	image.type = openfl__$internal_graphics_ImageType.CANVAS;
};
openfl__$internal_graphics_utils_ImageCanvasUtil.convertToData = function(image) {
	if(image.__srcImage != null) {
		openfl__$internal_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	}
	if(image.__srcCanvas != null && image.data == null) {
		image.createImageData();
		if(image.type == openfl__$internal_graphics_ImageType.CANVAS) {
			image.dirty = false;
		}
	} else if(image.type == openfl__$internal_graphics_ImageType.CANVAS && image.__srcCanvas != null && image.dirty) {
		if(image.__srcImageData == null) {
			image.createImageData();
		} else {
			image.__srcImageData = image.__srcContext.getImageData(0,0,image.width,image.height);
			image.data = new Uint8Array(image.__srcImageData.data.buffer);
		}
		image.dirty = false;
	}
	image.type = openfl__$internal_graphics_ImageType.DATA;
};
openfl__$internal_graphics_utils_ImageCanvasUtil.copyPixels = function(image,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha) {
	if(mergeAlpha == null) {
		mergeAlpha = false;
	}
	if(destPoint == null || destPoint.x >= image.width || destPoint.y >= image.height || sourceRect == null || sourceRect.width < 1 || sourceRect.height < 1) {
		return;
	}
	if(alphaImage != null && alphaImage.transparent) {
		if(alphaPoint == null) {
			alphaPoint = new openfl_geom_Point();
		}
		var tempData = image.clone();
		tempData.copyChannel(alphaImage,new openfl_geom_Rectangle(alphaPoint.x,alphaPoint.y,sourceRect.width,sourceRect.height),new openfl_geom_Point(sourceRect.x,sourceRect.y),8,8);
		sourceImage = tempData;
	}
	openfl__$internal_graphics_utils_ImageCanvasUtil.convertToCanvas(image,true);
	if(!mergeAlpha) {
		if(image.transparent && sourceImage.transparent) {
			image.__srcContext.clearRect(destPoint.x,destPoint.y,sourceRect.width,sourceRect.height);
		}
	}
	openfl__$internal_graphics_utils_ImageCanvasUtil.convertToCanvas(sourceImage);
	if(sourceImage.get_src() != null) {
		image.__srcContext.globalCompositeOperation = "source-over";
		image.__srcContext.drawImage(sourceImage.get_src(),sourceRect.x | 0,sourceRect.y | 0,sourceRect.width | 0,sourceRect.height | 0,destPoint.x | 0,destPoint.y | 0,sourceRect.width | 0,sourceRect.height | 0);
	}
	image.dirty = true;
	image.version++;
};
openfl__$internal_graphics_utils_ImageCanvasUtil.fillRect = function(image,rect,color,format) {
	openfl__$internal_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	var r;
	var g;
	var b;
	var a;
	if(format == 1) {
		r = color >> 16 & 255;
		g = color >> 8 & 255;
		b = color & 255;
		a = image.transparent ? color >> 24 & 255 : 255;
	} else {
		r = color >> 24 & 255;
		g = color >> 16 & 255;
		b = color >> 8 & 255;
		a = image.transparent ? color & 255 : 255;
	}
	if(rect.x == 0 && rect.y == 0 && rect.width == image.width && rect.height == image.height) {
		if(image.transparent && a == 0) {
			image.__srcCanvas.width = image.width;
			return;
		}
	}
	if(a < 255) {
		image.__srcContext.clearRect(rect.x,rect.y,rect.width,rect.height);
	}
	if(a > 0) {
		image.__srcContext.fillStyle = "rgba(" + r + ", " + g + ", " + b + ", " + a / 255 + ")";
		image.__srcContext.fillRect(rect.x,rect.y,rect.width,rect.height);
	}
	image.dirty = true;
	image.version++;
};
openfl__$internal_graphics_utils_ImageCanvasUtil.scroll = function(image,x,y) {
	if(x % image.width == 0 && y % image.height == 0) {
		return;
	}
	var copy = image.clone();
	openfl__$internal_graphics_utils_ImageCanvasUtil.convertToCanvas(image,true);
	image.__srcContext.clearRect(x,y,image.width,image.height);
	image.__srcContext.drawImage(copy.get_src(),x,y);
	image.dirty = true;
	image.version++;
};
var openfl__$internal_graphics_utils_ImageDataUtil = function() { };
$hxClasses["openfl._internal.graphics.utils.ImageDataUtil"] = openfl__$internal_graphics_utils_ImageDataUtil;
openfl__$internal_graphics_utils_ImageDataUtil.__name__ = "openfl._internal.graphics.utils.ImageDataUtil";
openfl__$internal_graphics_utils_ImageDataUtil.__toColorMatrix = function(colorTransform) {
	if(openfl__$internal_graphics_utils_ImageDataUtil.__tempColorMatrix == null) {
		openfl__$internal_graphics_utils_ImageDataUtil.__tempColorMatrix = new Float32Array(20);
	}
	openfl__$internal_graphics_utils__$ImageDataUtil_ColorMatrix_$Impl_$.set(openfl__$internal_graphics_utils_ImageDataUtil.__tempColorMatrix,0,colorTransform.redMultiplier);
	openfl__$internal_graphics_utils__$ImageDataUtil_ColorMatrix_$Impl_$.set(openfl__$internal_graphics_utils_ImageDataUtil.__tempColorMatrix,4,colorTransform.redOffset / 255);
	openfl__$internal_graphics_utils__$ImageDataUtil_ColorMatrix_$Impl_$.set(openfl__$internal_graphics_utils_ImageDataUtil.__tempColorMatrix,6,colorTransform.greenMultiplier);
	openfl__$internal_graphics_utils__$ImageDataUtil_ColorMatrix_$Impl_$.set(openfl__$internal_graphics_utils_ImageDataUtil.__tempColorMatrix,9,colorTransform.greenOffset / 255);
	openfl__$internal_graphics_utils__$ImageDataUtil_ColorMatrix_$Impl_$.set(openfl__$internal_graphics_utils_ImageDataUtil.__tempColorMatrix,12,colorTransform.blueMultiplier);
	openfl__$internal_graphics_utils__$ImageDataUtil_ColorMatrix_$Impl_$.set(openfl__$internal_graphics_utils_ImageDataUtil.__tempColorMatrix,14,colorTransform.blueOffset / 255);
	openfl__$internal_graphics_utils__$ImageDataUtil_ColorMatrix_$Impl_$.set(openfl__$internal_graphics_utils_ImageDataUtil.__tempColorMatrix,18,colorTransform.alphaMultiplier);
	openfl__$internal_graphics_utils__$ImageDataUtil_ColorMatrix_$Impl_$.set(openfl__$internal_graphics_utils_ImageDataUtil.__tempColorMatrix,19,colorTransform.alphaOffset / 255);
	return openfl__$internal_graphics_utils_ImageDataUtil.__tempColorMatrix;
};
openfl__$internal_graphics_utils_ImageDataUtil.colorTransform = function(image,rect,colorTransform) {
	var data = image.data;
	if(data == null) {
		return;
	}
	var dataView = new openfl__$internal_graphics_utils__$ImageDataUtil_ImageDataView(image,rect);
	var colorMatrix = openfl__$internal_graphics_utils_ImageDataUtil.__toColorMatrix(colorTransform);
	var alphaTable = openfl__$internal_graphics_utils__$ImageDataUtil_ColorMatrix_$Impl_$.getAlphaTable(colorMatrix);
	var redTable = openfl__$internal_graphics_utils__$ImageDataUtil_ColorMatrix_$Impl_$.getRedTable(colorMatrix);
	var greenTable = openfl__$internal_graphics_utils__$ImageDataUtil_ColorMatrix_$Impl_$.getGreenTable(colorMatrix);
	var blueTable = openfl__$internal_graphics_utils__$ImageDataUtil_ColorMatrix_$Impl_$.getBlueTable(colorMatrix);
	var row;
	var offset;
	var pixel;
	var _g = 0;
	var _g1 = dataView.height;
	while(_g < _g1) {
		var y = _g++;
		row = dataView.byteOffset + dataView.stride * y;
		var _g2 = 0;
		var _g11 = dataView.width;
		while(_g2 < _g11) {
			var x = _g2++;
			offset = row + x * 4;
			pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
			pixel = (redTable[pixel >>> 24 & 255] & 255) << 24 | (greenTable[pixel >>> 16 & 255] & 255) << 16 | (blueTable[pixel >>> 8 & 255] & 255) << 8 | alphaTable[pixel & 255] & 255;
			data[offset] = pixel >>> 24 & 255;
			data[offset + 1] = pixel >>> 16 & 255;
			data[offset + 2] = pixel >>> 8 & 255;
			data[offset + 3] = pixel & 255;
		}
	}
	image.dirty = true;
	image.version++;
};
openfl__$internal_graphics_utils_ImageDataUtil.copyChannel = function(image,sourceImage,sourceRect,destPoint,sourceChannel,destChannel) {
	var destIdx;
	switch(destChannel) {
	case 1:
		destIdx = 0;
		break;
	case 2:
		destIdx = 1;
		break;
	case 4:
		destIdx = 2;
		break;
	case 8:
		destIdx = 3;
		break;
	}
	var srcIdx;
	switch(sourceChannel) {
	case 1:
		srcIdx = 0;
		break;
	case 2:
		srcIdx = 1;
		break;
	case 4:
		srcIdx = 2;
		break;
	case 8:
		srcIdx = 3;
		break;
	}
	var srcData = sourceImage.data;
	var destData = image.data;
	if(srcData == null || destData == null) {
		return;
	}
	var srcView = new openfl__$internal_graphics_utils__$ImageDataUtil_ImageDataView(sourceImage,sourceRect);
	var destView = new openfl__$internal_graphics_utils__$ImageDataUtil_ImageDataView(image,new openfl_geom_Rectangle(destPoint.x,destPoint.y,srcView.width,srcView.height));
	var srcPosition;
	var destPosition;
	var srcPixel;
	var destPixel;
	var value = 0;
	var _g = 0;
	var _g1 = destView.height;
	while(_g < _g1) {
		var y = _g++;
		srcPosition = srcView.byteOffset + srcView.stride * y;
		destPosition = destView.byteOffset + destView.stride * y;
		var _g2 = 0;
		var _g11 = destView.width;
		while(_g2 < _g11) {
			var x = _g2++;
			srcPixel = (srcData[srcPosition] & 255) << 24 | (srcData[srcPosition + 1] & 255) << 16 | (srcData[srcPosition + 2] & 255) << 8 | srcData[srcPosition + 3] & 255;
			destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
			switch(srcIdx) {
			case 0:
				value = srcPixel >>> 24 & 255;
				break;
			case 1:
				value = srcPixel >>> 16 & 255;
				break;
			case 2:
				value = srcPixel >>> 8 & 255;
				break;
			case 3:
				value = srcPixel & 255;
				break;
			}
			switch(destIdx) {
			case 0:
				destPixel = (value & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
				break;
			case 1:
				destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (value & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
				break;
			case 2:
				destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (value & 255) << 8 | destPixel & 255 & 255;
				break;
			case 3:
				destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | value & 255;
				break;
			}
			destData[destPosition] = destPixel >>> 24 & 255;
			destData[destPosition + 1] = destPixel >>> 16 & 255;
			destData[destPosition + 2] = destPixel >>> 8 & 255;
			destData[destPosition + 3] = destPixel & 255;
			srcPosition += 4;
			destPosition += 4;
		}
	}
	image.dirty = true;
	image.version++;
};
openfl__$internal_graphics_utils_ImageDataUtil.copyPixels = function(image,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha) {
	if(image.width == sourceImage.width && image.height == sourceImage.height && sourceRect.width == sourceImage.width && sourceRect.height == sourceImage.height && sourceRect.x == 0 && sourceRect.y == 0 && destPoint.x == 0 && destPoint.y == 0 && alphaImage == null && alphaPoint == null && mergeAlpha == false) {
		image.data.set(sourceImage.data);
	} else {
		var sourceData = sourceImage.data;
		var destData = image.data;
		if(sourceData == null || destData == null) {
			return;
		}
		var sourceView = new openfl__$internal_graphics_utils__$ImageDataUtil_ImageDataView(sourceImage,sourceRect);
		var destRect = new openfl_geom_Rectangle(destPoint.x,destPoint.y,sourceView.width,sourceView.height);
		var destView = new openfl__$internal_graphics_utils__$ImageDataUtil_ImageDataView(image,destRect);
		var sourcePosition;
		var destPosition;
		var sourceAlpha;
		var destAlpha;
		var oneMinusSourceAlpha;
		var blendAlpha;
		var sourcePixel;
		var destPixel;
		var useAlphaImage = alphaImage != null && alphaImage.transparent;
		var blend = mergeAlpha || useAlphaImage && !image.transparent;
		if(!useAlphaImage) {
			if(blend) {
				var _g = 0;
				var _g1 = destView.height;
				while(_g < _g1) {
					var y = _g++;
					sourcePosition = sourceView.byteOffset + sourceView.stride * y;
					destPosition = destView.byteOffset + destView.stride * y;
					var _g2 = 0;
					var _g11 = destView.width;
					while(_g2 < _g11) {
						var x = _g2++;
						sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
						destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
						sourceAlpha = (sourcePixel & 255) / 255.0;
						destAlpha = (destPixel & 255) / 255.0;
						oneMinusSourceAlpha = 1 - sourceAlpha;
						blendAlpha = sourceAlpha + destAlpha * oneMinusSourceAlpha;
						if(blendAlpha == 0) {
							destPixel = 0;
						} else {
							var value = openfl__$internal_graphics_utils_ImageDataUtil.__clamp[Math.round(((sourcePixel >>> 24 & 255) * sourceAlpha + (destPixel >>> 24 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)];
							destPixel = (value & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
							var value1 = openfl__$internal_graphics_utils_ImageDataUtil.__clamp[Math.round(((sourcePixel >>> 16 & 255) * sourceAlpha + (destPixel >>> 16 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)];
							destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (value1 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
							var value2 = openfl__$internal_graphics_utils_ImageDataUtil.__clamp[Math.round(((sourcePixel >>> 8 & 255) * sourceAlpha + (destPixel >>> 8 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)];
							destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (value2 & 255) << 8 | destPixel & 255 & 255;
							var value3 = openfl__$internal_graphics_utils_ImageDataUtil.__clamp[Math.round(blendAlpha * 255.0)];
							destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | value3 & 255;
						}
						destData[destPosition] = destPixel >>> 24 & 255;
						destData[destPosition + 1] = destPixel >>> 16 & 255;
						destData[destPosition + 2] = destPixel >>> 8 & 255;
						destData[destPosition + 3] = destPixel & 255;
						sourcePosition += 4;
						destPosition += 4;
					}
				}
			} else {
				var _g3 = 0;
				var _g12 = destView.height;
				while(_g3 < _g12) {
					var y1 = _g3++;
					sourcePosition = sourceView.byteOffset + sourceView.stride * y1;
					destPosition = destView.byteOffset + destView.stride * y1;
					destData.set(sourceData.subarray(sourcePosition,sourcePosition + destView.width * 4),destPosition);
				}
			}
		} else {
			if(alphaPoint == null) {
				alphaPoint = new openfl_geom_Point();
			}
			var alphaData = alphaImage.data;
			var alphaPosition;
			var alphaPixel;
			var alphaView = new openfl__$internal_graphics_utils__$ImageDataUtil_ImageDataView(alphaImage,new openfl_geom_Rectangle(alphaPoint.x,alphaPoint.y,alphaImage.width,alphaImage.height));
			alphaView.offset(sourceView.x,sourceView.y);
			destView.clip(destPoint.x | 0,destPoint.y | 0,alphaView.width,alphaView.height);
			if(blend) {
				var _g4 = 0;
				var _g13 = destView.height;
				while(_g4 < _g13) {
					var y2 = _g4++;
					sourcePosition = sourceView.byteOffset + sourceView.stride * y2;
					destPosition = destView.byteOffset + destView.stride * y2;
					alphaPosition = alphaView.byteOffset + alphaView.stride * y2;
					var _g5 = 0;
					var _g14 = destView.width;
					while(_g5 < _g14) {
						var x1 = _g5++;
						sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
						destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
						alphaPixel = (alphaData[alphaPosition] & 255) << 24 | (alphaData[alphaPosition + 1] & 255) << 16 | (alphaData[alphaPosition + 2] & 255) << 8 | alphaData[alphaPosition + 3] & 255;
						sourceAlpha = (alphaPixel & 255) / 255.0 * ((sourcePixel & 255) / 255.0);
						if(sourceAlpha > 0) {
							destAlpha = (destPixel & 255) / 255.0;
							oneMinusSourceAlpha = 1 - sourceAlpha;
							blendAlpha = sourceAlpha + destAlpha * oneMinusSourceAlpha;
							var value4 = openfl__$internal_graphics_utils_ImageDataUtil.__clamp[Math.round(((sourcePixel >>> 24 & 255) * sourceAlpha + (destPixel >>> 24 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)];
							destPixel = (value4 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
							var value5 = openfl__$internal_graphics_utils_ImageDataUtil.__clamp[Math.round(((sourcePixel >>> 16 & 255) * sourceAlpha + (destPixel >>> 16 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)];
							destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (value5 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
							var value6 = openfl__$internal_graphics_utils_ImageDataUtil.__clamp[Math.round(((sourcePixel >>> 8 & 255) * sourceAlpha + (destPixel >>> 8 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)];
							destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (value6 & 255) << 8 | destPixel & 255 & 255;
							var value7 = openfl__$internal_graphics_utils_ImageDataUtil.__clamp[Math.round(blendAlpha * 255.0)];
							destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | value7 & 255;
							destData[destPosition] = destPixel >>> 24 & 255;
							destData[destPosition + 1] = destPixel >>> 16 & 255;
							destData[destPosition + 2] = destPixel >>> 8 & 255;
							destData[destPosition + 3] = destPixel & 255;
						}
						sourcePosition += 4;
						destPosition += 4;
						alphaPosition += 4;
					}
				}
			} else {
				var _g6 = 0;
				var _g15 = destView.height;
				while(_g6 < _g15) {
					var y3 = _g6++;
					sourcePosition = sourceView.byteOffset + sourceView.stride * y3;
					destPosition = destView.byteOffset + destView.stride * y3;
					alphaPosition = alphaView.byteOffset + alphaView.stride * y3;
					var _g7 = 0;
					var _g16 = destView.width;
					while(_g7 < _g16) {
						var x2 = _g7++;
						sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
						alphaPixel = (alphaData[alphaPosition] & 255) << 24 | (alphaData[alphaPosition + 1] & 255) << 16 | (alphaData[alphaPosition + 2] & 255) << 8 | alphaData[alphaPosition + 3] & 255;
						var value8 = Math.round((sourcePixel & 255) * ((alphaPixel & 255) / 255));
						sourcePixel = (sourcePixel >>> 24 & 255 & 255) << 24 | (sourcePixel >>> 16 & 255 & 255) << 16 | (sourcePixel >>> 8 & 255 & 255) << 8 | value8 & 255;
						destData[destPosition] = sourcePixel >>> 24 & 255;
						destData[destPosition + 1] = sourcePixel >>> 16 & 255;
						destData[destPosition + 2] = sourcePixel >>> 8 & 255;
						destData[destPosition + 3] = sourcePixel & 255;
						sourcePosition += 4;
						destPosition += 4;
						alphaPosition += 4;
					}
				}
			}
		}
	}
	image.dirty = true;
	image.version++;
};
openfl__$internal_graphics_utils_ImageDataUtil.fillRect = function(image,rect,color,format) {
	var fillColor;
	switch(format) {
	case 0:
		fillColor = color;
		break;
	case 1:
		var argb = color;
		var this1 = 0;
		var rgba = this1;
		rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
		fillColor = rgba;
		break;
	}
	if(!image.transparent) {
		fillColor = (fillColor >>> 24 & 255 & 255) << 24 | (fillColor >>> 16 & 255 & 255) << 16 | (fillColor >>> 8 & 255 & 255) << 8 | 255;
	}
	var data = image.data;
	if(data == null) {
		return;
	}
	var dataView = new openfl__$internal_graphics_utils__$ImageDataUtil_ImageDataView(image,rect);
	var row;
	var _g = 0;
	var _g1 = dataView.height;
	while(_g < _g1) {
		var y = _g++;
		row = dataView.byteOffset + dataView.stride * y;
		var _g2 = 0;
		var _g11 = dataView.width;
		while(_g2 < _g11) {
			var x = _g2++;
			var offset = row + x * 4;
			data[offset] = fillColor >>> 24 & 255;
			data[offset + 1] = fillColor >>> 16 & 255;
			data[offset + 2] = fillColor >>> 8 & 255;
			data[offset + 3] = fillColor & 255;
		}
	}
	image.dirty = true;
	image.version++;
};
openfl__$internal_graphics_utils_ImageDataUtil.floodFill = function(image,x,y,fillColor) {
	var data = image.data;
	if(data == null) {
		return;
	}
	var hitColor;
	var offset = y * (image.width * 4) + x * 4;
	hitColor = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
	if(!image.transparent) {
		fillColor = (fillColor >>> 24 & 255 & 255) << 24 | (fillColor >>> 16 & 255 & 255) << 16 | (fillColor >>> 8 & 255 & 255) << 8 | 255;
		hitColor = (hitColor >>> 24 & 255 & 255) << 24 | (hitColor >>> 16 & 255 & 255) << 16 | (hitColor >>> 8 & 255 & 255) << 8 | 255;
	}
	if(fillColor == hitColor) {
		return;
	}
	var dx = [0,-1,1,0];
	var dy = [-1,0,0,1];
	var minX = 0;
	var minY = 0;
	var maxX = minX + image.width;
	var maxY = minY + image.height;
	var queue = [];
	queue.push(x);
	queue.push(y);
	var curPointX;
	var curPointY;
	var nextPointX;
	var nextPointY;
	var nextPointOffset;
	var readColor;
	while(queue.length > 0) {
		curPointY = queue.pop();
		curPointX = queue.pop();
		var _g = 0;
		while(_g < 4) {
			var i = _g++;
			nextPointX = curPointX + dx[i];
			nextPointY = curPointY + dy[i];
			if(nextPointX < minX || nextPointY < minY || nextPointX >= maxX || nextPointY >= maxY) {
				continue;
			}
			nextPointOffset = (nextPointY * image.width + nextPointX) * 4;
			readColor = (data[nextPointOffset] & 255) << 24 | (data[nextPointOffset + 1] & 255) << 16 | (data[nextPointOffset + 2] & 255) << 8 | data[nextPointOffset + 3] & 255;
			if(readColor == hitColor) {
				data[nextPointOffset] = fillColor >>> 24 & 255;
				data[nextPointOffset + 1] = fillColor >>> 16 & 255;
				data[nextPointOffset + 2] = fillColor >>> 8 & 255;
				data[nextPointOffset + 3] = fillColor & 255;
				queue.push(nextPointX);
				queue.push(nextPointY);
			}
		}
	}
	image.dirty = true;
	image.version++;
};
openfl__$internal_graphics_utils_ImageDataUtil.gaussianBlur = function(image,sourceImage,sourceRect,destPoint,blurX,blurY,quality,strength) {
	if(strength == null) {
		strength = 1;
	}
	if(quality == null) {
		quality = 1;
	}
	if(blurY == null) {
		blurY = 4;
	}
	if(blurX == null) {
		blurX = 4;
	}
	var boxesForGauss = function(sigma,n) {
		var wIdeal = Math.sqrt(12 * sigma * sigma / n + 1);
		var wl = Math.floor(wIdeal);
		if(wl % 2 == 0) {
			--wl;
		}
		var wu = wl + 2;
		var mIdeal = (12 * sigma * sigma - n * wl * wl - 4 * n * wl - 3 * n) / (-4 * wl - 4);
		var m = Math.round(mIdeal);
		var sizes = [];
		var _g = 0;
		var _g1 = n;
		while(_g < _g1) {
			var i = _g++;
			sizes.push(i < m ? wl : wu);
		}
		return sizes;
	};
	var boxBlurH = function(imgA,imgB,w,h,r,off) {
		var iarr = 1 / (r + r + 1);
		var _g2 = 0;
		var _g11 = h;
		while(_g2 < _g11) {
			var i1 = _g2++;
			var ti = i1 * w;
			var li = ti;
			var ri = ti + r;
			var fv = imgA[ti * 4 + off];
			var lv = imgA[(ti + w - 1) * 4 + off];
			var val = (r + 1) * fv;
			var _g3 = 0;
			var _g12 = r;
			while(_g3 < _g12) {
				var j = _g3++;
				val += imgA[(ti + j) * 4 + off];
			}
			var _g21 = 0;
			var _g31 = r + 1;
			while(_g21 < _g31) {
				var j1 = _g21++;
				val += imgA[ri * 4 + off] - fv;
				imgB[ti * 4 + off] = Math.round(val * iarr);
				++ri;
				++ti;
			}
			var _g4 = r + 1;
			var _g5 = w - r;
			while(_g4 < _g5) {
				var j2 = _g4++;
				val += imgA[ri * 4 + off] - imgA[li * 4 + off];
				imgB[ti * 4 + off] = Math.round(val * iarr);
				++ri;
				++li;
				++ti;
			}
			var _g6 = w - r;
			var _g7 = w;
			while(_g6 < _g7) {
				var j3 = _g6++;
				val += lv - imgA[li * 4 + off];
				imgB[ti * 4 + off] = Math.round(val * iarr);
				++li;
				++ti;
			}
		}
	};
	var boxBlurT = function(imgA1,imgB1,w1,h1,r1,off1) {
		var iarr1 = 1 / (r1 + r1 + 1);
		var ws = w1 * 4;
		var _g8 = 0;
		var _g13 = w1;
		while(_g8 < _g13) {
			var i2 = _g8++;
			var ti1 = i2 * 4 + off1;
			var li1 = ti1;
			var ri1 = ti1 + r1 * ws;
			var fv1 = imgA1[ti1];
			var lv1 = imgA1[ti1 + ws * (h1 - 1)];
			var val1 = (r1 + 1) * fv1;
			var _g9 = 0;
			var _g14 = r1;
			while(_g9 < _g14) {
				var j4 = _g9++;
				val1 += imgA1[ti1 + j4 * ws];
			}
			var _g22 = 0;
			var _g32 = r1 + 1;
			while(_g22 < _g32) {
				var j5 = _g22++;
				val1 += imgA1[ri1] - fv1;
				imgB1[ti1] = Math.round(val1 * iarr1);
				ri1 += ws;
				ti1 += ws;
			}
			var _g41 = r1 + 1;
			var _g51 = h1 - r1;
			while(_g41 < _g51) {
				var j6 = _g41++;
				val1 += imgA1[ri1] - imgA1[li1];
				imgB1[ti1] = Math.round(val1 * iarr1);
				li1 += ws;
				ri1 += ws;
				ti1 += ws;
			}
			var _g61 = h1 - r1;
			var _g71 = h1;
			while(_g61 < _g71) {
				var j7 = _g61++;
				val1 += lv1 - imgA1[li1];
				imgB1[ti1] = Math.round(val1 * iarr1);
				li1 += ws;
				ti1 += ws;
			}
		}
	};
	var boxBlur = function(imgA2,imgB2,w2,h2,bx,by) {
		var _g10 = 0;
		var _g15 = imgA2.length;
		while(_g10 < _g15) {
			var i3 = _g10++;
			imgB2[i3] = imgA2[i3];
		}
		boxBlurH(imgB2,imgA2,w2,h2,bx | 0,0);
		boxBlurH(imgB2,imgA2,w2,h2,bx | 0,1);
		boxBlurH(imgB2,imgA2,w2,h2,bx | 0,2);
		boxBlurH(imgB2,imgA2,w2,h2,bx | 0,3);
		boxBlurT(imgA2,imgB2,w2,h2,by | 0,0);
		boxBlurT(imgA2,imgB2,w2,h2,by | 0,1);
		boxBlurT(imgA2,imgB2,w2,h2,by | 0,2);
		boxBlurT(imgA2,imgB2,w2,h2,by | 0,3);
	};
	var imgB3 = image.getData();
	var imgA3 = sourceImage.getData();
	var w3 = sourceRect.width | 0;
	var h3 = sourceRect.height | 0;
	var bx1 = blurX | 0;
	var by1 = blurY | 0;
	var oX = destPoint.x | 0;
	var oY = destPoint.y | 0;
	var n1 = quality * 2 - 1;
	var rng = Math.pow(2,quality) * 0.125;
	var bxs = boxesForGauss(bx1 * rng,n1);
	var bys = boxesForGauss(by1 * rng,n1);
	var offset = (w3 * oY + oX) * 4 | 0;
	boxBlur(imgA3,imgB3,w3,h3,(bxs[0] - 1) / 2,(bys[0] - 1) / 2);
	var bIndex = 1;
	var _g16 = 0;
	var _g17 = n1 / 2 | 0;
	while(_g16 < _g17) {
		var i4 = _g16++;
		boxBlur(imgB3,imgA3,w3,h3,(bxs[bIndex] - 1) / 2,(bys[bIndex] - 1) / 2);
		boxBlur(imgA3,imgB3,w3,h3,(bxs[bIndex + 1] - 1) / 2,(bys[bIndex + 1] - 1) / 2);
		bIndex += 2;
	}
	var x;
	var y;
	if(offset <= 0) {
		y = 0;
		while(y < h3) {
			x = 0;
			while(x < w3) {
				var sourceRect1 = sourceImage.get_rect();
				var d = 4 * (y * (image.get_rect().width | 0) + x);
				var sourceX = x - (destPoint.x | 0);
				var sourceY = y - (destPoint.y | 0);
				var s = sourceX < 0 || sourceY < 0 || sourceX >= sourceRect1.width || sourceY >= sourceRect1.height ? -1 : 4 * (sourceY * (sourceRect1.width | 0) + sourceX);
				if(s < 0) {
					imgB3[d] = imgB3[d + 1] = imgB3[d + 2] = imgB3[d + 3] = 0;
				} else {
					imgB3[d] = imgB3[s];
					imgB3[d + 1] = imgB3[s + 1];
					imgB3[d + 2] = imgB3[s + 2];
					var a = imgB3[s + 3] * strength | 0;
					imgB3[d + 3] = a < 0 ? 0 : a > 255 ? 255 : a;
				}
				++x;
			}
			++y;
		}
	} else {
		y = h3 - 1;
		while(y >= 0) {
			x = w3 - 1;
			while(x >= 0) {
				var sourceRect2 = sourceImage.get_rect();
				var d1 = 4 * (y * (image.get_rect().width | 0) + x);
				var sourceX1 = x - (destPoint.x | 0);
				var sourceY1 = y - (destPoint.y | 0);
				var s1 = sourceX1 < 0 || sourceY1 < 0 || sourceX1 >= sourceRect2.width || sourceY1 >= sourceRect2.height ? -1 : 4 * (sourceY1 * (sourceRect2.width | 0) + sourceX1);
				if(s1 < 0) {
					imgB3[d1] = imgB3[d1 + 1] = imgB3[d1 + 2] = imgB3[d1 + 3] = 0;
				} else {
					imgB3[d1] = imgB3[s1];
					imgB3[d1 + 1] = imgB3[s1 + 1];
					imgB3[d1 + 2] = imgB3[s1 + 2];
					var a1 = imgB3[s1 + 3] * strength | 0;
					imgB3[d1 + 3] = a1 < 0 ? 0 : a1 > 255 ? 255 : a1;
				}
				--x;
			}
			--y;
		}
	}
	image.dirty = true;
	image.version++;
	sourceImage.dirty = true;
	sourceImage.version++;
	if(imgB3 == image.getData()) {
		return image;
	}
	return sourceImage;
};
openfl__$internal_graphics_utils_ImageDataUtil.calculateSourceOffset = function(sourceRect,destPoint,destX,destY) {
	var sourceX = destX - (destPoint.x | 0);
	var sourceY = destY - (destPoint.y | 0);
	if(sourceX < 0 || sourceY < 0 || sourceX >= sourceRect.width || sourceY >= sourceRect.height) {
		return -1;
	} else {
		return 4 * (sourceY * (sourceRect.width | 0) + sourceX);
	}
};
openfl__$internal_graphics_utils_ImageDataUtil.translatePixel = function(imgB,sourceRect,destRect,destPoint,destX,destY,strength) {
	var d = 4 * (destY * (destRect.width | 0) + destX);
	var sourceX = destX - (destPoint.x | 0);
	var sourceY = destY - (destPoint.y | 0);
	var s = sourceX < 0 || sourceY < 0 || sourceX >= sourceRect.width || sourceY >= sourceRect.height ? -1 : 4 * (sourceY * (sourceRect.width | 0) + sourceX);
	if(s < 0) {
		imgB[d] = imgB[d + 1] = imgB[d + 2] = imgB[d + 3] = 0;
	} else {
		imgB[d] = imgB[s];
		imgB[d + 1] = imgB[s + 1];
		imgB[d + 2] = imgB[s + 2];
		var a = imgB[s + 3] * strength | 0;
		imgB[d + 3] = a < 0 ? 0 : a > 255 ? 255 : a;
	}
};
openfl__$internal_graphics_utils_ImageDataUtil.getColorBoundsRect = function(image,mask,color,findColor,format) {
	var left = image.width + 1;
	var right = 0;
	var top = image.height + 1;
	var bottom = 0;
	var _color;
	var _mask;
	switch(format) {
	case 0:
		_color = color;
		_mask = mask;
		break;
	case 1:
		var argb = color;
		var this1 = 0;
		var rgba = this1;
		rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
		_color = rgba;
		var argb1 = mask;
		var this2 = 0;
		var rgba1 = this2;
		rgba1 = (argb1 >>> 16 & 255 & 255) << 24 | (argb1 >>> 8 & 255 & 255) << 16 | (argb1 & 255 & 255) << 8 | argb1 >>> 24 & 255 & 255;
		_mask = rgba1;
		break;
	}
	if(!image.transparent) {
		_color = (_color >>> 24 & 255 & 255) << 24 | (_color >>> 16 & 255 & 255) << 16 | (_color >>> 8 & 255 & 255) << 8 | 255;
		_mask = (_mask >>> 24 & 255 & 255) << 24 | (_mask >>> 16 & 255 & 255) << 16 | (_mask >>> 8 & 255 & 255) << 8 | 255;
	}
	var pixel;
	var hit;
	var _g = 0;
	var _g1 = image.width;
	while(_g < _g1) {
		var x = _g++;
		hit = false;
		var _g2 = 0;
		var _g11 = image.height;
		while(_g2 < _g11) {
			var y = _g2++;
			pixel = image.getPixel32(x,y,0);
			hit = findColor ? (pixel & _mask) == _color : (pixel & _mask) != _color;
			if(hit) {
				if(x < left) {
					left = x;
				}
				break;
			}
		}
		if(hit) {
			break;
		}
	}
	var ix;
	var _g21 = 0;
	var _g3 = image.width;
	while(_g21 < _g3) {
		var x1 = _g21++;
		ix = image.width - 1 - x1;
		hit = false;
		var _g22 = 0;
		var _g31 = image.height;
		while(_g22 < _g31) {
			var y1 = _g22++;
			pixel = image.getPixel32(ix,y1,0);
			hit = findColor ? (pixel & _mask) == _color : (pixel & _mask) != _color;
			if(hit) {
				if(ix > right) {
					right = ix;
				}
				break;
			}
		}
		if(hit) {
			break;
		}
	}
	var _g4 = 0;
	var _g5 = image.height;
	while(_g4 < _g5) {
		var y2 = _g4++;
		hit = false;
		var _g41 = 0;
		var _g51 = image.width;
		while(_g41 < _g51) {
			var x2 = _g41++;
			pixel = image.getPixel32(x2,y2,0);
			hit = findColor ? (pixel & _mask) == _color : (pixel & _mask) != _color;
			if(hit) {
				if(y2 < top) {
					top = y2;
				}
				break;
			}
		}
		if(hit) {
			break;
		}
	}
	var iy;
	var _g6 = 0;
	var _g7 = image.height;
	while(_g6 < _g7) {
		var y3 = _g6++;
		iy = image.height - 1 - y3;
		hit = false;
		var _g61 = 0;
		var _g71 = image.width;
		while(_g61 < _g71) {
			var x3 = _g61++;
			pixel = image.getPixel32(x3,iy,0);
			hit = findColor ? (pixel & _mask) == _color : (pixel & _mask) != _color;
			if(hit) {
				if(iy > bottom) {
					bottom = iy;
				}
				break;
			}
		}
		if(hit) {
			break;
		}
	}
	var w = right - left;
	var h = bottom - top;
	if(w > 0) {
		++w;
	}
	if(h > 0) {
		++h;
	}
	if(w < 0) {
		w = 0;
	}
	if(h < 0) {
		h = 0;
	}
	if(left == right) {
		w = 1;
	}
	if(top == bottom) {
		h = 1;
	}
	if(left > image.width) {
		left = 0;
	}
	if(top > image.height) {
		top = 0;
	}
	return new openfl_geom_Rectangle(left,top,w,h);
};
openfl__$internal_graphics_utils_ImageDataUtil.getPixel = function(image,x,y,format) {
	var pixel;
	var data = image.data;
	var offset = 4 * y * image.width + x * 4;
	pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
	pixel = (pixel >>> 24 & 255 & 255) << 24 | (pixel >>> 16 & 255 & 255) << 16 | (pixel >>> 8 & 255 & 255) << 8 | 0;
	switch(format) {
	case 0:
		return pixel;
	case 1:
		var argb = 0;
		argb = (pixel & 255 & 255) << 24 | (pixel >>> 24 & 255 & 255) << 16 | (pixel >>> 16 & 255 & 255) << 8 | pixel >>> 8 & 255 & 255;
		return argb;
	}
};
openfl__$internal_graphics_utils_ImageDataUtil.getPixel32 = function(image,x,y,format) {
	var pixel;
	var data = image.data;
	var offset = 4 * y * image.width + x * 4;
	pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
	switch(format) {
	case 0:
		return pixel;
	case 1:
		var argb = 0;
		argb = (pixel & 255 & 255) << 24 | (pixel >>> 24 & 255 & 255) << 16 | (pixel >>> 16 & 255 & 255) << 8 | pixel >>> 8 & 255 & 255;
		return argb;
	}
};
openfl__$internal_graphics_utils_ImageDataUtil.getPixels = function(image,rect,format) {
	if(image.data == null) {
		return null;
	}
	var length = rect.width * rect.height | 0;
	var bytes = new haxe_io_Bytes(new ArrayBuffer(length * 4));
	var data = image.data;
	var dataView = new openfl__$internal_graphics_utils__$ImageDataUtil_ImageDataView(image,rect);
	var position;
	var pixel;
	var destPosition = 0;
	var _g = 0;
	var _g1 = dataView.height;
	while(_g < _g1) {
		var y = _g++;
		position = dataView.byteOffset + dataView.stride * y;
		var _g2 = 0;
		var _g11 = dataView.width;
		while(_g2 < _g11) {
			var x = _g2++;
			pixel = (data[position] & 255) << 24 | (data[position + 1] & 255) << 16 | (data[position + 2] & 255) << 8 | data[position + 3] & 255;
			switch(format) {
			case 0:
				break;
			case 1:
				var argb = 0;
				argb = (pixel & 255 & 255) << 24 | (pixel >>> 24 & 255 & 255) << 16 | (pixel >>> 16 & 255 & 255) << 8 | pixel >>> 8 & 255 & 255;
				var argb1 = argb;
				pixel = argb1;
				break;
			}
			bytes.b[destPosition++] = pixel >>> 24 & 255;
			bytes.b[destPosition++] = pixel >>> 16 & 255;
			bytes.b[destPosition++] = pixel >>> 8 & 255;
			bytes.b[destPosition++] = pixel & 255;
			position += 4;
		}
	}
	return bytes;
};
openfl__$internal_graphics_utils_ImageDataUtil.merge = function(image,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
	if(image.data == null || sourceImage.data == null) {
		return;
	}
	var sourceView = new openfl__$internal_graphics_utils__$ImageDataUtil_ImageDataView(sourceImage,sourceRect);
	var destView = new openfl__$internal_graphics_utils__$ImageDataUtil_ImageDataView(image,new openfl_geom_Rectangle(destPoint.x,destPoint.y,sourceView.width,sourceView.height));
	var sourceData = sourceImage.data;
	var destData = image.data;
	var sourcePosition;
	var destPosition;
	var sourcePixel;
	var destPixel;
	var _g = 0;
	var _g1 = destView.height;
	while(_g < _g1) {
		var y = _g++;
		sourcePosition = sourceView.byteOffset + sourceView.stride * y;
		destPosition = destView.byteOffset + destView.stride * y;
		var _g2 = 0;
		var _g11 = destView.width;
		while(_g2 < _g11) {
			var x = _g2++;
			sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
			destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
			var value = ((sourcePixel >>> 24 & 255) * redMultiplier + (destPixel >>> 24 & 255) * (256 - redMultiplier)) / 256 | 0;
			destPixel = (value & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
			var value1 = ((sourcePixel >>> 16 & 255) * greenMultiplier + (destPixel >>> 16 & 255) * (256 - greenMultiplier)) / 256 | 0;
			destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (value1 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
			var value2 = ((sourcePixel >>> 8 & 255) * blueMultiplier + (destPixel >>> 8 & 255) * (256 - blueMultiplier)) / 256 | 0;
			destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (value2 & 255) << 8 | destPixel & 255 & 255;
			var value3 = ((sourcePixel & 255) * alphaMultiplier + (destPixel & 255) * (256 - alphaMultiplier)) / 256 | 0;
			destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | value3 & 255;
			destData[destPosition] = destPixel >>> 24 & 255;
			destData[destPosition + 1] = destPixel >>> 16 & 255;
			destData[destPosition + 2] = destPixel >>> 8 & 255;
			destData[destPosition + 3] = destPixel & 255;
			sourcePosition += 4;
			destPosition += 4;
		}
	}
	image.dirty = true;
	image.version++;
};
openfl__$internal_graphics_utils_ImageDataUtil.setPixel = function(image,x,y,color,format) {
	var pixel;
	switch(format) {
	case 0:
		pixel = color;
		break;
	case 1:
		var argb = color;
		var this1 = 0;
		var rgba = this1;
		rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
		pixel = rgba;
		break;
	}
	var this2 = 0;
	var source = this2;
	var data = image.data;
	var offset = 4 * y * image.width + x * 4;
	source = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
	var value = source & 255;
	pixel = (pixel >>> 24 & 255 & 255) << 24 | (pixel >>> 16 & 255 & 255) << 16 | (pixel >>> 8 & 255 & 255) << 8 | value & 255;
	var data1 = image.data;
	var offset1 = 4 * y * image.width + x * 4;
	data1[offset1] = pixel >>> 24 & 255;
	data1[offset1 + 1] = pixel >>> 16 & 255;
	data1[offset1 + 2] = pixel >>> 8 & 255;
	data1[offset1 + 3] = pixel & 255;
	image.dirty = true;
	image.version++;
};
openfl__$internal_graphics_utils_ImageDataUtil.setPixel32 = function(image,x,y,color,format) {
	var pixel;
	switch(format) {
	case 0:
		pixel = color;
		break;
	case 1:
		var argb = color;
		var this1 = 0;
		var rgba = this1;
		rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
		pixel = rgba;
		break;
	}
	if(!image.transparent) {
		pixel = (pixel >>> 24 & 255 & 255) << 24 | (pixel >>> 16 & 255 & 255) << 16 | (pixel >>> 8 & 255 & 255) << 8 | 255;
	}
	var data = image.data;
	var offset = 4 * y * image.width + x * 4;
	data[offset] = pixel >>> 24 & 255;
	data[offset + 1] = pixel >>> 16 & 255;
	data[offset + 2] = pixel >>> 8 & 255;
	data[offset + 3] = pixel & 255;
	image.dirty = true;
	image.version++;
};
openfl__$internal_graphics_utils_ImageDataUtil.setPixels = function(image,rect,bytes,format,endian) {
	if(image.data == null) {
		return;
	}
	var data = image.data;
	var dataView = new openfl__$internal_graphics_utils__$ImageDataUtil_ImageDataView(image,rect);
	var row;
	var color;
	var pixel;
	var transparent = image.transparent;
	var dataPosition = 0;
	var littleEndian = endian != 0;
	var _g = 0;
	var _g1 = dataView.height;
	while(_g < _g1) {
		var y = _g++;
		row = dataView.byteOffset + dataView.stride * y;
		var _g2 = 0;
		var _g11 = dataView.width;
		while(_g2 < _g11) {
			var x = _g2++;
			if(littleEndian) {
				color = bytes.getInt32(dataPosition);
			} else {
				color = bytes.b[dataPosition + 3] | bytes.b[dataPosition + 2] << 8 | bytes.b[dataPosition + 1] << 16 | bytes.b[dataPosition] << 24;
			}
			dataPosition += 4;
			switch(format) {
			case 0:
				pixel = color;
				break;
			case 1:
				var argb = color;
				var this1 = 0;
				var rgba = this1;
				rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
				pixel = rgba;
				break;
			}
			if(!transparent) {
				pixel = (pixel >>> 24 & 255 & 255) << 24 | (pixel >>> 16 & 255 & 255) << 16 | (pixel >>> 8 & 255 & 255) << 8 | 255;
			}
			var offset = row + x * 4;
			data[offset] = pixel >>> 24 & 255;
			data[offset + 1] = pixel >>> 16 & 255;
			data[offset + 2] = pixel >>> 8 & 255;
			data[offset + 3] = pixel & 255;
		}
	}
	image.dirty = true;
	image.version++;
};
openfl__$internal_graphics_utils_ImageDataUtil.threshold = function(image,sourceImage,sourceRect,destPoint,operation,threshold,color,mask,copySource,format) {
	var _color;
	var _mask;
	var _threshold;
	switch(format) {
	case 0:
		_color = color;
		_mask = mask;
		_threshold = threshold;
		break;
	case 1:
		var argb = color;
		var this1 = 0;
		var rgba = this1;
		rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
		_color = rgba;
		var argb1 = mask;
		var this2 = 0;
		var rgba1 = this2;
		rgba1 = (argb1 >>> 16 & 255 & 255) << 24 | (argb1 >>> 8 & 255 & 255) << 16 | (argb1 & 255 & 255) << 8 | argb1 >>> 24 & 255 & 255;
		_mask = rgba1;
		var argb2 = threshold;
		var this3 = 0;
		var rgba2 = this3;
		rgba2 = (argb2 >>> 16 & 255 & 255) << 24 | (argb2 >>> 8 & 255 & 255) << 16 | (argb2 & 255 & 255) << 8 | argb2 >>> 24 & 255 & 255;
		_threshold = rgba2;
		break;
	}
	var _operation;
	switch(operation) {
	case "!=":
		_operation = 0;
		break;
	case "<":
		_operation = 2;
		break;
	case "<=":
		_operation = 3;
		break;
	case "==":
		_operation = 1;
		break;
	case ">":
		_operation = 4;
		break;
	case ">=":
		_operation = 5;
		break;
	default:
		return 0;
	}
	var srcData = sourceImage.data;
	var destData = image.data;
	if(srcData == null || destData == null) {
		return 0;
	}
	var hits = 0;
	var srcView = new openfl__$internal_graphics_utils__$ImageDataUtil_ImageDataView(sourceImage,sourceRect);
	var destView = new openfl__$internal_graphics_utils__$ImageDataUtil_ImageDataView(image,new openfl_geom_Rectangle(destPoint.x,destPoint.y,srcView.width,srcView.height));
	var srcPosition;
	var destPosition;
	var srcPixel;
	var destPixel;
	var pixelMask;
	var test;
	var value;
	var _g = 0;
	var _g1 = destView.height;
	while(_g < _g1) {
		var y = _g++;
		srcPosition = srcView.byteOffset + srcView.stride * y;
		destPosition = destView.byteOffset + destView.stride * y;
		var _g2 = 0;
		var _g11 = destView.width;
		while(_g2 < _g11) {
			var x = _g2++;
			srcPixel = (srcData[srcPosition] & 255) << 24 | (srcData[srcPosition + 1] & 255) << 16 | (srcData[srcPosition + 2] & 255) << 8 | srcData[srcPosition + 3] & 255;
			pixelMask = srcPixel & _mask;
			var tmp1 = pixelMask >>> 24 & 255;
			var tmp2 = _threshold >>> 24 & 255;
			if(tmp1 != tmp2) {
				value = _$UInt_UInt_$Impl_$.gt(tmp1,tmp2) ? 1 : -1;
			} else {
				tmp1 = pixelMask >>> 16 & 255;
				tmp2 = _threshold >>> 16 & 255;
				if(tmp1 != tmp2) {
					value = _$UInt_UInt_$Impl_$.gt(tmp1,tmp2) ? 1 : -1;
				} else {
					tmp1 = pixelMask >>> 8 & 255;
					tmp2 = _threshold >>> 8 & 255;
					if(tmp1 != tmp2) {
						value = _$UInt_UInt_$Impl_$.gt(tmp1,tmp2) ? 1 : -1;
					} else {
						tmp1 = pixelMask & 255;
						tmp2 = _threshold & 255;
						value = tmp1 != tmp2 ? _$UInt_UInt_$Impl_$.gt(tmp1,tmp2) ? 1 : -1 : 0;
					}
				}
			}
			switch(_operation) {
			case 0:
				test = value != 0;
				break;
			case 1:
				test = value == 0;
				break;
			case 2:
				test = value == -1;
				break;
			case 3:
				test = value == 0 || value == -1;
				break;
			case 4:
				test = value == 1;
				break;
			case 5:
				test = value == 0 || value == 1;
				break;
			default:
				test = false;
			}
			if(test) {
				destData[destPosition] = _color >>> 24 & 255;
				destData[destPosition + 1] = _color >>> 16 & 255;
				destData[destPosition + 2] = _color >>> 8 & 255;
				destData[destPosition + 3] = _color & 255;
				++hits;
			} else if(copySource) {
				destData[destPosition] = srcPixel >>> 24 & 255;
				destData[destPosition + 1] = srcPixel >>> 16 & 255;
				destData[destPosition + 2] = srcPixel >>> 8 & 255;
				destData[destPosition + 3] = srcPixel & 255;
			}
			srcPosition += 4;
			destPosition += 4;
		}
	}
	if(hits > 0) {
		image.dirty = true;
		image.version++;
	}
	return hits;
};
openfl__$internal_graphics_utils_ImageDataUtil.__pixelCompare = function(n1,n2) {
	var tmp1 = n1 >>> 24 & 255;
	var tmp2 = n2 >>> 24 & 255;
	if(tmp1 != tmp2) {
		if(_$UInt_UInt_$Impl_$.gt(tmp1,tmp2)) {
			return 1;
		} else {
			return -1;
		}
	} else {
		tmp1 = n1 >>> 16 & 255;
		tmp2 = n2 >>> 16 & 255;
		if(tmp1 != tmp2) {
			if(_$UInt_UInt_$Impl_$.gt(tmp1,tmp2)) {
				return 1;
			} else {
				return -1;
			}
		} else {
			tmp1 = n1 >>> 8 & 255;
			tmp2 = n2 >>> 8 & 255;
			if(tmp1 != tmp2) {
				if(_$UInt_UInt_$Impl_$.gt(tmp1,tmp2)) {
					return 1;
				} else {
					return -1;
				}
			} else {
				tmp1 = n1 & 255;
				tmp2 = n2 & 255;
				if(tmp1 != tmp2) {
					if(_$UInt_UInt_$Impl_$.gt(tmp1,tmp2)) {
						return 1;
					} else {
						return -1;
					}
				} else {
					return 0;
				}
			}
		}
	}
};
var openfl__$internal_graphics_utils__$ImageDataUtil_ImageDataView = function(image,rect) {
	this.image = image;
	if(rect == null) {
		this.rect = image.get_rect();
	} else {
		if(rect.x < 0) {
			rect.x = 0;
		}
		if(rect.y < 0) {
			rect.y = 0;
		}
		if(rect.x + rect.width > image.width) {
			rect.width = image.width - rect.x;
		}
		if(rect.y + rect.height > image.height) {
			rect.height = image.height - rect.y;
		}
		if(rect.width < 0) {
			rect.width = 0;
		}
		if(rect.height < 0) {
			rect.height = 0;
		}
		this.rect = rect;
	}
	this.stride = image.width * 4;
	this.__update();
};
$hxClasses["openfl._internal.graphics.utils._ImageDataUtil.ImageDataView"] = openfl__$internal_graphics_utils__$ImageDataUtil_ImageDataView;
openfl__$internal_graphics_utils__$ImageDataUtil_ImageDataView.__name__ = "openfl._internal.graphics.utils._ImageDataUtil.ImageDataView";
openfl__$internal_graphics_utils__$ImageDataUtil_ImageDataView.prototype = {
	x: null
	,y: null
	,height: null
	,width: null
	,byteOffset: null
	,image: null
	,rect: null
	,stride: null
	,clip: function(x,y,width,height) {
		this.rect.__contract(x,y,width,height);
		this.__update();
	}
	,offset: function(x,y) {
		if(x < 0) {
			this.rect.x += x;
			if(this.rect.x < 0) {
				this.rect.x = 0;
			}
		} else {
			this.rect.x += x;
			this.rect.width -= x;
		}
		if(y < 0) {
			this.rect.y += y;
			if(this.rect.y < 0) {
				this.rect.y = 0;
			}
		} else {
			this.rect.y += y;
			this.rect.height -= y;
		}
		this.__update();
	}
	,row: function(y) {
		return this.byteOffset + this.stride * y;
	}
	,__update: function() {
		this.x = Math.ceil(this.rect.x);
		this.y = Math.ceil(this.rect.y);
		this.width = Math.floor(this.rect.width);
		this.height = Math.floor(this.rect.height);
		this.byteOffset = this.stride * this.y + this.x * 4;
	}
	,__class__: openfl__$internal_graphics_utils__$ImageDataUtil_ImageDataView
};
var openfl__$internal_graphics_utils__$ImageDataUtil_ColorMatrix_$Impl_$ = {};
$hxClasses["openfl._internal.graphics.utils._ImageDataUtil.ColorMatrix_Impl_"] = openfl__$internal_graphics_utils__$ImageDataUtil_ColorMatrix_$Impl_$;
openfl__$internal_graphics_utils__$ImageDataUtil_ColorMatrix_$Impl_$.__name__ = "openfl._internal.graphics.utils._ImageDataUtil.ColorMatrix_Impl_";
openfl__$internal_graphics_utils__$ImageDataUtil_ColorMatrix_$Impl_$.__properties__ = {set_redOffset:"set_redOffset",get_redOffset:"get_redOffset",set_redMultiplier:"set_redMultiplier",get_redMultiplier:"get_redMultiplier",set_greenOffset:"set_greenOffset",get_greenOffset:"get_greenOffset",set_greenMultiplier:"set_greenMultiplier",get_greenMultiplier:"get_greenMultiplier",set_color:"set_color",get_color:"get_color",set_blueOffset:"set_blueOffset",get_blueOffset:"get_blueOffset",set_blueMultiplier:"set_blueMultiplier",get_blueMultiplier:"get_blueMultiplier",set_alphaOffset:"set_alphaOffset",get_alphaOffset:"get_alphaOffset",set_alphaMultiplier:"set_alphaMultiplier",get_alphaMultiplier:"get_alphaMultiplier"};
openfl__$internal_graphics_utils__$ImageDataUtil_ColorMatrix_$Impl_$._new = function(data) {
	var this1;
	if(data != null && data.length == 20) {
		this1 = data;
	} else {
		this1 = new Float32Array(openfl__$internal_graphics_utils__$ImageDataUtil_ColorMatrix_$Impl_$.__identity);
	}
	return this1;
};
openfl__$internal_graphics_utils__$ImageDataUtil_ColorMatrix_$Impl_$.clone = function(this1) {
	return openfl__$internal_graphics_utils__$ImageDataUtil_ColorMatrix_$Impl_$._new(new Float32Array(this1));
};
openfl__$internal_graphics_utils__$ImageDataUtil_ColorMatrix_$Impl_$.concat = function(this1,second) {
	this1[0] += second[0];
	this1[6] += second[6];
	this1[12] += second[12];
	this1[18] += second[18];
};
openfl__$internal_graphics_utils__$ImageDataUtil_ColorMatrix_$Impl_$.copyFrom = function(this1,other) {
	this1.set(other);
};
openfl__$internal_graphics_utils__$ImageDataUtil_ColorMatrix_$Impl_$.identity = function(this1) {
	this1[0] = 1;
	this1[1] = 0;
	this1[2] = 0;
	this1[3] = 0;
	this1[4] = 0;
	this1[5] = 0;
	this1[6] = 1;
	this1[7] = 0;
	this1[8] = 0;
	this1[9] = 0;
	this1[10] = 0;
	this1[11] = 0;
	this1[12] = 1;
	this1[13] = 0;
	this1[14] = 0;
	this1[15] = 0;
	this1[16] = 0;
	this1[17] = 0;
	this1[18] = 1;
	this1[19] = 0;
};
openfl__$internal_graphics_utils__$ImageDataUtil_ColorMatrix_$Impl_$.getAlphaTable = function(this1) {
	if(openfl__$internal_graphics_utils__$ImageDataUtil_ColorMatrix_$Impl_$.__alphaTable == null) {
		openfl__$internal_graphics_utils__$ImageDataUtil_ColorMatrix_$Impl_$.__alphaTable = new Uint8Array(256);
	}
	var value;
	openfl__$internal_graphics_utils__$ImageDataUtil_ColorMatrix_$Impl_$.__alphaTable[0] = 0;
	var _g = 1;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * this1[18] + this1[19] * 255);
		if(value > 255) {
			value = 255;
		}
		if(value < 0) {
			value = 0;
		}
		openfl__$internal_graphics_utils__$ImageDataUtil_ColorMatrix_$Impl_$.__alphaTable[i] = value;
	}
	return openfl__$internal_graphics_utils__$ImageDataUtil_ColorMatrix_$Impl_$.__alphaTable;
};
openfl__$internal_graphics_utils__$ImageDataUtil_ColorMatrix_$Impl_$.getBlueTable = function(this1) {
	if(openfl__$internal_graphics_utils__$ImageDataUtil_ColorMatrix_$Impl_$.__blueTable == null) {
		openfl__$internal_graphics_utils__$ImageDataUtil_ColorMatrix_$Impl_$.__blueTable = new Uint8Array(256);
	}
	var value;
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * this1[12] + this1[14] * 255);
		if(value > 255) {
			value = 255;
		}
		if(value < 0) {
			value = 0;
		}
		openfl__$internal_graphics_utils__$ImageDataUtil_ColorMatrix_$Impl_$.__blueTable[i] = value;
	}
	return openfl__$internal_graphics_utils__$ImageDataUtil_ColorMatrix_$Impl_$.__blueTable;
};
openfl__$internal_graphics_utils__$ImageDataUtil_ColorMatrix_$Impl_$.getGreenTable = function(this1) {
	if(openfl__$internal_graphics_utils__$ImageDataUtil_ColorMatrix_$Impl_$.__greenTable == null) {
		openfl__$internal_graphics_utils__$ImageDataUtil_ColorMatrix_$Impl_$.__greenTable = new Uint8Array(256);
	}
	var value;
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * this1[6] + this1[9] * 255);
		if(value > 255) {
			value = 255;
		}
		if(value < 0) {
			value = 0;
		}
		openfl__$internal_graphics_utils__$ImageDataUtil_ColorMatrix_$Impl_$.__greenTable[i] = value;
	}
	return openfl__$internal_graphics_utils__$ImageDataUtil_ColorMatrix_$Impl_$.__greenTable;
};
openfl__$internal_graphics_utils__$ImageDataUtil_ColorMatrix_$Impl_$.getRedTable = function(this1) {
	if(openfl__$internal_graphics_utils__$ImageDataUtil_ColorMatrix_$Impl_$.__redTable == null) {
		openfl__$internal_graphics_utils__$ImageDataUtil_ColorMatrix_$Impl_$.__redTable = new Uint8Array(256);
	}
	var value;
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * this1[0] + this1[4] * 255);
		if(value > 255) {
			value = 255;
		}
		if(value < 0) {
			value = 0;
		}
		openfl__$internal_graphics_utils__$ImageDataUtil_ColorMatrix_$Impl_$.__redTable[i] = value;
	}
	return openfl__$internal_graphics_utils__$ImageDataUtil_ColorMatrix_$Impl_$.__redTable;
};
openfl__$internal_graphics_utils__$ImageDataUtil_ColorMatrix_$Impl_$.get_alphaMultiplier = function(this1) {
	return this1[18];
};
openfl__$internal_graphics_utils__$ImageDataUtil_ColorMatrix_$Impl_$.set_alphaMultiplier = function(this1,value) {
	return this1[18] = value;
};
openfl__$internal_graphics_utils__$ImageDataUtil_ColorMatrix_$Impl_$.get_alphaOffset = function(this1) {
	return this1[19] * 255;
};
openfl__$internal_graphics_utils__$ImageDataUtil_ColorMatrix_$Impl_$.set_alphaOffset = function(this1,value) {
	return this1[19] = value / 255;
};
openfl__$internal_graphics_utils__$ImageDataUtil_ColorMatrix_$Impl_$.get_blueMultiplier = function(this1) {
	return this1[12];
};
openfl__$internal_graphics_utils__$ImageDataUtil_ColorMatrix_$Impl_$.set_blueMultiplier = function(this1,value) {
	return this1[12] = value;
};
openfl__$internal_graphics_utils__$ImageDataUtil_ColorMatrix_$Impl_$.get_blueOffset = function(this1) {
	return this1[14] * 255;
};
openfl__$internal_graphics_utils__$ImageDataUtil_ColorMatrix_$Impl_$.set_blueOffset = function(this1,value) {
	return this1[14] = value / 255;
};
openfl__$internal_graphics_utils__$ImageDataUtil_ColorMatrix_$Impl_$.get_color = function(this1) {
	return (this1[4] * 255 | 0) << 16 | (this1[9] * 255 | 0) << 8 | (this1[14] * 255 | 0);
};
openfl__$internal_graphics_utils__$ImageDataUtil_ColorMatrix_$Impl_$.set_color = function(this1,value) {
	this1[4] = (value >> 16 & 255) / 255;
	this1[9] = (value >> 8 & 255) / 255;
	this1[14] = (value & 255) / 255;
	this1[0] = 0;
	this1[6] = 0;
	this1[12] = 0;
	return openfl__$internal_graphics_utils__$ImageDataUtil_ColorMatrix_$Impl_$.get_color(this1);
};
openfl__$internal_graphics_utils__$ImageDataUtil_ColorMatrix_$Impl_$.get_greenMultiplier = function(this1) {
	return this1[6];
};
openfl__$internal_graphics_utils__$ImageDataUtil_ColorMatrix_$Impl_$.set_greenMultiplier = function(this1,value) {
	return this1[6] = value;
};
openfl__$internal_graphics_utils__$ImageDataUtil_ColorMatrix_$Impl_$.get_greenOffset = function(this1) {
	return this1[9] * 255;
};
openfl__$internal_graphics_utils__$ImageDataUtil_ColorMatrix_$Impl_$.set_greenOffset = function(this1,value) {
	return this1[9] = value / 255;
};
openfl__$internal_graphics_utils__$ImageDataUtil_ColorMatrix_$Impl_$.get_redMultiplier = function(this1) {
	return this1[0];
};
openfl__$internal_graphics_utils__$ImageDataUtil_ColorMatrix_$Impl_$.set_redMultiplier = function(this1,value) {
	return this1[0] = value;
};
openfl__$internal_graphics_utils__$ImageDataUtil_ColorMatrix_$Impl_$.get_redOffset = function(this1) {
	return this1[4] * 255;
};
openfl__$internal_graphics_utils__$ImageDataUtil_ColorMatrix_$Impl_$.set_redOffset = function(this1,value) {
	return this1[4] = value / 255;
};
openfl__$internal_graphics_utils__$ImageDataUtil_ColorMatrix_$Impl_$.get = function(this1,index) {
	return this1[index];
};
openfl__$internal_graphics_utils__$ImageDataUtil_ColorMatrix_$Impl_$.set = function(this1,index,value) {
	return this1[index] = value;
};
var openfl__$internal_renderer_DrawCommandBuffer = function() {
	if(openfl__$internal_renderer_DrawCommandBuffer.empty == null) {
		this.types = [];
		this.b = [];
		this.i = [];
		this.f = [];
		this.o = [];
		this.ff = [];
		this.ii = [];
		this.copyOnWrite = true;
	} else {
		this.clear();
	}
};
$hxClasses["openfl._internal.renderer.DrawCommandBuffer"] = openfl__$internal_renderer_DrawCommandBuffer;
openfl__$internal_renderer_DrawCommandBuffer.__name__ = "openfl._internal.renderer.DrawCommandBuffer";
openfl__$internal_renderer_DrawCommandBuffer.prototype = {
	types: null
	,b: null
	,copyOnWrite: null
	,f: null
	,ff: null
	,i: null
	,ii: null
	,o: null
	,append: function(other) {
		if(this.get_length() == 0) {
			this.types = other.types;
			this.b = other.b;
			this.i = other.i;
			this.f = other.f;
			this.o = other.o;
			this.ff = other.ff;
			this.ii = other.ii;
			this.copyOnWrite = other.copyOnWrite = true;
			return other;
		}
		var data = new openfl__$internal_renderer_DrawCommandReader(other);
		var _g = 0;
		var _g1 = other.types;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type._hx_index) {
			case 0:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
				var this1 = data;
				var c = this1;
				this.beginBitmapFill(c.buffer.o[c.oPos],c.buffer.o[c.oPos + 1],c.buffer.b[c.bPos],c.buffer.b[c.bPos + 1]);
				break;
			case 1:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_FILL;
				var this2 = data;
				var c1 = this2;
				this.beginFill(c1.buffer.i[c1.iPos],c1.buffer.f[c1.fPos]);
				break;
			case 2:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL;
				var this3 = data;
				var c2 = this3;
				this.beginGradientFill(c2.buffer.o[c2.oPos],c2.buffer.ii[c2.iiPos],c2.buffer.ff[c2.ffPos],c2.buffer.ii[c2.iiPos + 1],c2.buffer.o[c2.oPos + 1],c2.buffer.o[c2.oPos + 2],c2.buffer.o[c2.oPos + 3],c2.buffer.f[c2.fPos]);
				break;
			case 3:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
				var this4 = data;
				var c3 = this4;
				this.cubicCurveTo(c3.buffer.f[c3.fPos],c3.buffer.f[c3.fPos + 1],c3.buffer.f[c3.fPos + 2],c3.buffer.f[c3.fPos + 3],c3.buffer.f[c3.fPos + 4],c3.buffer.f[c3.fPos + 5]);
				break;
			case 4:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
				var this5 = data;
				var c4 = this5;
				this.curveTo(c4.buffer.f[c4.fPos],c4.buffer.f[c4.fPos + 1],c4.buffer.f[c4.fPos + 2],c4.buffer.f[c4.fPos + 3]);
				break;
			case 5:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
				var this6 = data;
				var c5 = this6;
				this.drawCircle(c5.buffer.f[c5.fPos],c5.buffer.f[c5.fPos + 1],c5.buffer.f[c5.fPos + 2]);
				break;
			case 6:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
				var this7 = data;
				var c6 = this7;
				this.drawEllipse(c6.buffer.f[c6.fPos],c6.buffer.f[c6.fPos + 1],c6.buffer.f[c6.fPos + 2],c6.buffer.f[c6.fPos + 3]);
				break;
			case 7:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
				var this8 = data;
				var c7 = this8;
				this.drawRect(c7.buffer.f[c7.fPos],c7.buffer.f[c7.fPos + 1],c7.buffer.f[c7.fPos + 2],c7.buffer.f[c7.fPos + 3]);
				break;
			case 8:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
				var this9 = data;
				var c8 = this9;
				this.drawRoundRect(c8.buffer.f[c8.fPos],c8.buffer.f[c8.fPos + 1],c8.buffer.f[c8.fPos + 2],c8.buffer.f[c8.fPos + 3],c8.buffer.f[c8.fPos + 4],c8.buffer.o[c8.oPos]);
				break;
			case 10:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES;
				var this10 = data;
				var c9 = this10;
				this.drawTriangles(c9.buffer.o[c9.oPos],c9.buffer.o[c9.oPos + 1],c9.buffer.o[c9.oPos + 2],c9.buffer.o[c9.oPos + 3]);
				break;
			case 11:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.END_FILL;
				var this11 = data;
				var c10 = this11;
				this.endFill();
				break;
			case 12:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE;
				var this12 = data;
				var c11 = this12;
				this.lineBitmapStyle(c11.buffer.o[c11.oPos],c11.buffer.o[c11.oPos + 1],c11.buffer.b[c11.bPos],c11.buffer.b[c11.bPos + 1]);
				break;
			case 13:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE;
				var this13 = data;
				var c12 = this13;
				this.lineGradientStyle(c12.buffer.o[c12.oPos],c12.buffer.ii[c12.iiPos],c12.buffer.ff[c12.ffPos],c12.buffer.ii[c12.iiPos + 1],c12.buffer.o[c12.oPos + 1],c12.buffer.o[c12.oPos + 2],c12.buffer.o[c12.oPos + 3],c12.buffer.f[c12.fPos]);
				break;
			case 14:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_STYLE;
				var this14 = data;
				var c13 = this14;
				this.lineStyle(c13.buffer.o[c13.oPos],c13.buffer.i[c13.iPos],c13.buffer.f[c13.fPos],c13.buffer.b[c13.bPos],c13.buffer.o[c13.oPos + 1],c13.buffer.o[c13.oPos + 2],c13.buffer.o[c13.oPos + 3],c13.buffer.f[c13.fPos + 1]);
				break;
			case 15:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
				var this15 = data;
				var c14 = this15;
				this.lineTo(c14.buffer.f[c14.fPos],c14.buffer.f[c14.fPos + 1]);
				break;
			case 16:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
				var this16 = data;
				var c15 = this16;
				this.moveTo(c15.buffer.f[c15.fPos],c15.buffer.f[c15.fPos + 1]);
				break;
			case 17:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX;
				var this17 = data;
				var c16 = this17;
				this.overrideMatrix(c16.buffer.o[c16.oPos]);
				break;
			case 18:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.WINDING_EVEN_ODD;
				var this18 = data;
				var c17 = this18;
				this.windingEvenOdd();
				break;
			case 19:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.WINDING_NON_ZERO;
				var this19 = data;
				var c18 = this19;
				this.windingNonZero();
				break;
			default:
			}
		}
		data.destroy();
		return other;
	}
	,beginBitmapFill: function(bitmap,matrix,repeat,smooth) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL);
		this.o.push(bitmap);
		this.o.push(matrix);
		this.b.push(repeat);
		this.b.push(smooth);
	}
	,beginFill: function(color,alpha) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.BEGIN_FILL);
		this.i.push(color);
		this.f.push(alpha);
	}
	,beginGradientFill: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL);
		this.o.push(type);
		this.ii.push(colors);
		this.ff.push(alphas);
		this.ii.push(ratios);
		this.o.push(matrix);
		this.o.push(spreadMethod);
		this.o.push(interpolationMethod);
		this.f.push(focalPointRatio);
	}
	,clear: function() {
		this.types = openfl__$internal_renderer_DrawCommandBuffer.empty.types;
		this.b = openfl__$internal_renderer_DrawCommandBuffer.empty.b;
		this.i = openfl__$internal_renderer_DrawCommandBuffer.empty.i;
		this.f = openfl__$internal_renderer_DrawCommandBuffer.empty.f;
		this.o = openfl__$internal_renderer_DrawCommandBuffer.empty.o;
		this.ff = openfl__$internal_renderer_DrawCommandBuffer.empty.ff;
		this.ii = openfl__$internal_renderer_DrawCommandBuffer.empty.ii;
		this.copyOnWrite = true;
	}
	,copy: function() {
		var copy = new openfl__$internal_renderer_DrawCommandBuffer();
		copy.append(this);
		return copy;
	}
	,cubicCurveTo: function(controlX1,controlY1,controlX2,controlY2,anchorX,anchorY) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO);
		this.f.push(controlX1);
		this.f.push(controlY1);
		this.f.push(controlX2);
		this.f.push(controlY2);
		this.f.push(anchorX);
		this.f.push(anchorY);
	}
	,curveTo: function(controlX,controlY,anchorX,anchorY) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.CURVE_TO);
		this.f.push(controlX);
		this.f.push(controlY);
		this.f.push(anchorX);
		this.f.push(anchorY);
	}
	,destroy: function() {
		this.clear();
		this.types = null;
		this.b = null;
		this.i = null;
		this.f = null;
		this.o = null;
		this.ff = null;
		this.ii = null;
	}
	,drawCircle: function(x,y,radius) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE);
		this.f.push(x);
		this.f.push(y);
		this.f.push(radius);
	}
	,drawEllipse: function(x,y,width,height) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE);
		this.f.push(x);
		this.f.push(y);
		this.f.push(width);
		this.f.push(height);
	}
	,drawRect: function(x,y,width,height) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_RECT);
		this.f.push(x);
		this.f.push(y);
		this.f.push(width);
		this.f.push(height);
	}
	,drawRoundRect: function(x,y,width,height,ellipseWidth,ellipseHeight) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT);
		this.f.push(x);
		this.f.push(y);
		this.f.push(width);
		this.f.push(height);
		this.f.push(ellipseWidth);
		this.o.push(ellipseHeight);
	}
	,drawTriangles: function(vertices,indices,uvtData,culling) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES);
		this.o.push(vertices);
		this.o.push(indices);
		this.o.push(uvtData);
		this.o.push(culling);
	}
	,endFill: function() {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.END_FILL);
	}
	,lineBitmapStyle: function(bitmap,matrix,repeat,smooth) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE);
		this.o.push(bitmap);
		this.o.push(matrix);
		this.b.push(repeat);
		this.b.push(smooth);
	}
	,lineGradientStyle: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE);
		this.o.push(type);
		this.ii.push(colors);
		this.ff.push(alphas);
		this.ii.push(ratios);
		this.o.push(matrix);
		this.o.push(spreadMethod);
		this.o.push(interpolationMethod);
		this.f.push(focalPointRatio);
	}
	,lineStyle: function(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.LINE_STYLE);
		this.o.push(thickness);
		this.i.push(color);
		this.f.push(alpha);
		this.b.push(pixelHinting);
		this.o.push(scaleMode);
		this.o.push(caps);
		this.o.push(joints);
		this.f.push(miterLimit);
	}
	,lineTo: function(x,y) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.LINE_TO);
		this.f.push(x);
		this.f.push(y);
	}
	,moveTo: function(x,y) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.MOVE_TO);
		this.f.push(x);
		this.f.push(y);
	}
	,prepareWrite: function() {
		if(this.copyOnWrite) {
			this.types = this.types.slice();
			this.b = this.b.slice();
			this.i = this.i.slice();
			this.f = this.f.slice();
			this.o = this.o.slice();
			this.ff = this.ff.slice();
			this.ii = this.ii.slice();
			this.copyOnWrite = false;
		}
	}
	,overrideMatrix: function(matrix) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX);
		this.o.push(matrix);
	}
	,windingEvenOdd: function() {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.WINDING_EVEN_ODD);
	}
	,windingNonZero: function() {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.WINDING_NON_ZERO);
	}
	,get_length: function() {
		return this.types.length;
	}
	,__class__: openfl__$internal_renderer_DrawCommandBuffer
	,__properties__: {get_length:"get_length"}
};
var openfl__$internal_renderer_DrawCommandReader = function(buffer) {
	this.buffer = buffer;
	this.bPos = this.iPos = this.fPos = this.oPos = this.ffPos = this.iiPos = this.tsPos = 0;
	this.prev = openfl__$internal_renderer_DrawCommandType.UNKNOWN;
};
$hxClasses["openfl._internal.renderer.DrawCommandReader"] = openfl__$internal_renderer_DrawCommandReader;
openfl__$internal_renderer_DrawCommandReader.__name__ = "openfl._internal.renderer.DrawCommandReader";
openfl__$internal_renderer_DrawCommandReader.prototype = {
	buffer: null
	,bPos: null
	,iiPos: null
	,iPos: null
	,ffPos: null
	,fPos: null
	,oPos: null
	,prev: null
	,tsPos: null
	,advance: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.fPos += 6;
			break;
		case 4:
			this.fPos += 4;
			break;
		case 5:
			this.fPos += 3;
			break;
		case 6:
			this.fPos += 4;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 10:
			this.oPos += 4;
			break;
		case 11:
			break;
		case 12:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 13:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 14:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 15:
			this.fPos += 2;
			break;
		case 16:
			this.fPos += 2;
			break;
		case 17:
			this.oPos += 1;
			break;
		case 18:case 19:
			break;
		default:
		}
	}
	,bool: function(index) {
		return this.buffer.b[this.bPos + index];
	}
	,destroy: function() {
		this.buffer = null;
		this.reset();
	}
	,fArr: function(index) {
		return this.buffer.ff[this.ffPos + index];
	}
	,float: function(index) {
		return this.buffer.f[this.fPos + index];
	}
	,iArr: function(index) {
		return this.buffer.ii[this.iiPos + index];
	}
	,int: function(index) {
		return this.buffer.i[this.iPos + index];
	}
	,obj: function(index) {
		return this.buffer.o[this.oPos + index];
	}
	,readBeginBitmapFill: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.fPos += 6;
			break;
		case 4:
			this.fPos += 4;
			break;
		case 5:
			this.fPos += 3;
			break;
		case 6:
			this.fPos += 4;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 10:
			this.oPos += 4;
			break;
		case 11:
			break;
		case 12:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 13:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 14:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 15:
			this.fPos += 2;
			break;
		case 16:
			this.fPos += 2;
			break;
		case 17:
			this.oPos += 1;
			break;
		case 18:case 19:
			break;
		default:
		}
		this.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
		var this1 = this;
		return this1;
	}
	,readBeginFill: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.fPos += 6;
			break;
		case 4:
			this.fPos += 4;
			break;
		case 5:
			this.fPos += 3;
			break;
		case 6:
			this.fPos += 4;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 10:
			this.oPos += 4;
			break;
		case 11:
			break;
		case 12:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 13:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 14:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 15:
			this.fPos += 2;
			break;
		case 16:
			this.fPos += 2;
			break;
		case 17:
			this.oPos += 1;
			break;
		case 18:case 19:
			break;
		default:
		}
		this.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_FILL;
		var this1 = this;
		return this1;
	}
	,readBeginGradientFill: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.fPos += 6;
			break;
		case 4:
			this.fPos += 4;
			break;
		case 5:
			this.fPos += 3;
			break;
		case 6:
			this.fPos += 4;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 10:
			this.oPos += 4;
			break;
		case 11:
			break;
		case 12:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 13:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 14:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 15:
			this.fPos += 2;
			break;
		case 16:
			this.fPos += 2;
			break;
		case 17:
			this.oPos += 1;
			break;
		case 18:case 19:
			break;
		default:
		}
		this.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL;
		var this1 = this;
		return this1;
	}
	,readCubicCurveTo: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.fPos += 6;
			break;
		case 4:
			this.fPos += 4;
			break;
		case 5:
			this.fPos += 3;
			break;
		case 6:
			this.fPos += 4;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 10:
			this.oPos += 4;
			break;
		case 11:
			break;
		case 12:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 13:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 14:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 15:
			this.fPos += 2;
			break;
		case 16:
			this.fPos += 2;
			break;
		case 17:
			this.oPos += 1;
			break;
		case 18:case 19:
			break;
		default:
		}
		this.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
		var this1 = this;
		return this1;
	}
	,readCurveTo: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.fPos += 6;
			break;
		case 4:
			this.fPos += 4;
			break;
		case 5:
			this.fPos += 3;
			break;
		case 6:
			this.fPos += 4;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 10:
			this.oPos += 4;
			break;
		case 11:
			break;
		case 12:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 13:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 14:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 15:
			this.fPos += 2;
			break;
		case 16:
			this.fPos += 2;
			break;
		case 17:
			this.oPos += 1;
			break;
		case 18:case 19:
			break;
		default:
		}
		this.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
		var this1 = this;
		return this1;
	}
	,readDrawCircle: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.fPos += 6;
			break;
		case 4:
			this.fPos += 4;
			break;
		case 5:
			this.fPos += 3;
			break;
		case 6:
			this.fPos += 4;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 10:
			this.oPos += 4;
			break;
		case 11:
			break;
		case 12:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 13:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 14:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 15:
			this.fPos += 2;
			break;
		case 16:
			this.fPos += 2;
			break;
		case 17:
			this.oPos += 1;
			break;
		case 18:case 19:
			break;
		default:
		}
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
		var this1 = this;
		return this1;
	}
	,readDrawEllipse: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.fPos += 6;
			break;
		case 4:
			this.fPos += 4;
			break;
		case 5:
			this.fPos += 3;
			break;
		case 6:
			this.fPos += 4;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 10:
			this.oPos += 4;
			break;
		case 11:
			break;
		case 12:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 13:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 14:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 15:
			this.fPos += 2;
			break;
		case 16:
			this.fPos += 2;
			break;
		case 17:
			this.oPos += 1;
			break;
		case 18:case 19:
			break;
		default:
		}
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
		var this1 = this;
		return this1;
	}
	,readDrawRect: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.fPos += 6;
			break;
		case 4:
			this.fPos += 4;
			break;
		case 5:
			this.fPos += 3;
			break;
		case 6:
			this.fPos += 4;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 10:
			this.oPos += 4;
			break;
		case 11:
			break;
		case 12:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 13:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 14:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 15:
			this.fPos += 2;
			break;
		case 16:
			this.fPos += 2;
			break;
		case 17:
			this.oPos += 1;
			break;
		case 18:case 19:
			break;
		default:
		}
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
		var this1 = this;
		return this1;
	}
	,readDrawRoundRect: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.fPos += 6;
			break;
		case 4:
			this.fPos += 4;
			break;
		case 5:
			this.fPos += 3;
			break;
		case 6:
			this.fPos += 4;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 10:
			this.oPos += 4;
			break;
		case 11:
			break;
		case 12:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 13:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 14:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 15:
			this.fPos += 2;
			break;
		case 16:
			this.fPos += 2;
			break;
		case 17:
			this.oPos += 1;
			break;
		case 18:case 19:
			break;
		default:
		}
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
		var this1 = this;
		return this1;
	}
	,readDrawTriangles: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.fPos += 6;
			break;
		case 4:
			this.fPos += 4;
			break;
		case 5:
			this.fPos += 3;
			break;
		case 6:
			this.fPos += 4;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 10:
			this.oPos += 4;
			break;
		case 11:
			break;
		case 12:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 13:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 14:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 15:
			this.fPos += 2;
			break;
		case 16:
			this.fPos += 2;
			break;
		case 17:
			this.oPos += 1;
			break;
		case 18:case 19:
			break;
		default:
		}
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES;
		var this1 = this;
		return this1;
	}
	,readEndFill: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.fPos += 6;
			break;
		case 4:
			this.fPos += 4;
			break;
		case 5:
			this.fPos += 3;
			break;
		case 6:
			this.fPos += 4;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 10:
			this.oPos += 4;
			break;
		case 11:
			break;
		case 12:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 13:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 14:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 15:
			this.fPos += 2;
			break;
		case 16:
			this.fPos += 2;
			break;
		case 17:
			this.oPos += 1;
			break;
		case 18:case 19:
			break;
		default:
		}
		this.prev = openfl__$internal_renderer_DrawCommandType.END_FILL;
		var this1 = this;
		return this1;
	}
	,readLineBitmapStyle: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.fPos += 6;
			break;
		case 4:
			this.fPos += 4;
			break;
		case 5:
			this.fPos += 3;
			break;
		case 6:
			this.fPos += 4;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 10:
			this.oPos += 4;
			break;
		case 11:
			break;
		case 12:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 13:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 14:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 15:
			this.fPos += 2;
			break;
		case 16:
			this.fPos += 2;
			break;
		case 17:
			this.oPos += 1;
			break;
		case 18:case 19:
			break;
		default:
		}
		this.prev = openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE;
		var this1 = this;
		return this1;
	}
	,readLineGradientStyle: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.fPos += 6;
			break;
		case 4:
			this.fPos += 4;
			break;
		case 5:
			this.fPos += 3;
			break;
		case 6:
			this.fPos += 4;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 10:
			this.oPos += 4;
			break;
		case 11:
			break;
		case 12:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 13:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 14:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 15:
			this.fPos += 2;
			break;
		case 16:
			this.fPos += 2;
			break;
		case 17:
			this.oPos += 1;
			break;
		case 18:case 19:
			break;
		default:
		}
		this.prev = openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE;
		var this1 = this;
		return this1;
	}
	,readLineStyle: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.fPos += 6;
			break;
		case 4:
			this.fPos += 4;
			break;
		case 5:
			this.fPos += 3;
			break;
		case 6:
			this.fPos += 4;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 10:
			this.oPos += 4;
			break;
		case 11:
			break;
		case 12:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 13:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 14:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 15:
			this.fPos += 2;
			break;
		case 16:
			this.fPos += 2;
			break;
		case 17:
			this.oPos += 1;
			break;
		case 18:case 19:
			break;
		default:
		}
		this.prev = openfl__$internal_renderer_DrawCommandType.LINE_STYLE;
		var this1 = this;
		return this1;
	}
	,readLineTo: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.fPos += 6;
			break;
		case 4:
			this.fPos += 4;
			break;
		case 5:
			this.fPos += 3;
			break;
		case 6:
			this.fPos += 4;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 10:
			this.oPos += 4;
			break;
		case 11:
			break;
		case 12:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 13:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 14:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 15:
			this.fPos += 2;
			break;
		case 16:
			this.fPos += 2;
			break;
		case 17:
			this.oPos += 1;
			break;
		case 18:case 19:
			break;
		default:
		}
		this.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
		var this1 = this;
		return this1;
	}
	,readMoveTo: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.fPos += 6;
			break;
		case 4:
			this.fPos += 4;
			break;
		case 5:
			this.fPos += 3;
			break;
		case 6:
			this.fPos += 4;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 10:
			this.oPos += 4;
			break;
		case 11:
			break;
		case 12:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 13:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 14:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 15:
			this.fPos += 2;
			break;
		case 16:
			this.fPos += 2;
			break;
		case 17:
			this.oPos += 1;
			break;
		case 18:case 19:
			break;
		default:
		}
		this.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
		var this1 = this;
		return this1;
	}
	,readOverrideMatrix: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.fPos += 6;
			break;
		case 4:
			this.fPos += 4;
			break;
		case 5:
			this.fPos += 3;
			break;
		case 6:
			this.fPos += 4;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 10:
			this.oPos += 4;
			break;
		case 11:
			break;
		case 12:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 13:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 14:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 15:
			this.fPos += 2;
			break;
		case 16:
			this.fPos += 2;
			break;
		case 17:
			this.oPos += 1;
			break;
		case 18:case 19:
			break;
		default:
		}
		this.prev = openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX;
		var this1 = this;
		return this1;
	}
	,readWindingEvenOdd: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.fPos += 6;
			break;
		case 4:
			this.fPos += 4;
			break;
		case 5:
			this.fPos += 3;
			break;
		case 6:
			this.fPos += 4;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 10:
			this.oPos += 4;
			break;
		case 11:
			break;
		case 12:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 13:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 14:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 15:
			this.fPos += 2;
			break;
		case 16:
			this.fPos += 2;
			break;
		case 17:
			this.oPos += 1;
			break;
		case 18:case 19:
			break;
		default:
		}
		this.prev = openfl__$internal_renderer_DrawCommandType.WINDING_EVEN_ODD;
		var this1 = this;
		return this1;
	}
	,readWindingNonZero: function() {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.fPos += 6;
			break;
		case 4:
			this.fPos += 4;
			break;
		case 5:
			this.fPos += 3;
			break;
		case 6:
			this.fPos += 4;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 10:
			this.oPos += 4;
			break;
		case 11:
			break;
		case 12:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 13:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 14:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 15:
			this.fPos += 2;
			break;
		case 16:
			this.fPos += 2;
			break;
		case 17:
			this.oPos += 1;
			break;
		case 18:case 19:
			break;
		default:
		}
		this.prev = openfl__$internal_renderer_DrawCommandType.WINDING_NON_ZERO;
		var this1 = this;
		return this1;
	}
	,reset: function() {
		this.bPos = this.iPos = this.fPos = this.oPos = this.ffPos = this.iiPos = this.tsPos = 0;
	}
	,skip: function(type) {
		switch(this.prev._hx_index) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.fPos += 6;
			break;
		case 4:
			this.fPos += 4;
			break;
		case 5:
			this.fPos += 3;
			break;
		case 6:
			this.fPos += 4;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 10:
			this.oPos += 4;
			break;
		case 11:
			break;
		case 12:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 13:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 14:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 15:
			this.fPos += 2;
			break;
		case 16:
			this.fPos += 2;
			break;
		case 17:
			this.oPos += 1;
			break;
		case 18:case 19:
			break;
		default:
		}
		this.prev = type;
	}
	,__class__: openfl__$internal_renderer_DrawCommandReader
};
var openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.BeginBitmapFillView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.__name__ = "openfl._internal.renderer._DrawCommandReader.BeginBitmapFillView_Impl_";
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.__properties__ = {get_smooth:"get_smooth",get_repeat:"get_repeat",get_matrix:"get_matrix",get_bitmap:"get_bitmap"};
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$._new = function(d) {
	var this1 = d;
	return this1;
};
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_bitmap = function(this1) {
	return this1.buffer.o[this1.oPos];
};
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_matrix = function(this1) {
	return this1.buffer.o[this1.oPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_repeat = function(this1) {
	return this1.buffer.b[this1.bPos];
};
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_smooth = function(this1) {
	return this1.buffer.b[this1.bPos + 1];
};
var openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.BeginFillView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.__name__ = "openfl._internal.renderer._DrawCommandReader.BeginFillView_Impl_";
openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.__properties__ = {get_alpha:"get_alpha",get_color:"get_color"};
openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$._new = function(d) {
	var this1 = d;
	return this1;
};
openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color = function(this1) {
	return this1.buffer.i[this1.iPos];
};
openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_alpha = function(this1) {
	return this1.buffer.f[this1.fPos];
};
var openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.BeginGradientFillView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.__name__ = "openfl._internal.renderer._DrawCommandReader.BeginGradientFillView_Impl_";
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.__properties__ = {get_focalPointRatio:"get_focalPointRatio",get_interpolationMethod:"get_interpolationMethod",get_spreadMethod:"get_spreadMethod",get_matrix:"get_matrix",get_ratios:"get_ratios",get_alphas:"get_alphas",get_colors:"get_colors",get_type:"get_type"};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$._new = function(d) {
	var this1 = d;
	return this1;
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_type = function(this1) {
	return this1.buffer.o[this1.oPos];
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_colors = function(this1) {
	return this1.buffer.ii[this1.iiPos];
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_alphas = function(this1) {
	return this1.buffer.ff[this1.ffPos];
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_ratios = function(this1) {
	return this1.buffer.ii[this1.iiPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_matrix = function(this1) {
	return this1.buffer.o[this1.oPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_spreadMethod = function(this1) {
	return this1.buffer.o[this1.oPos + 2];
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_interpolationMethod = function(this1) {
	return this1.buffer.o[this1.oPos + 3];
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_focalPointRatio = function(this1) {
	return this1.buffer.f[this1.fPos];
};
var openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.CubicCurveToView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.__name__ = "openfl._internal.renderer._DrawCommandReader.CubicCurveToView_Impl_";
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.__properties__ = {get_anchorY:"get_anchorY",get_anchorX:"get_anchorX",get_controlY2:"get_controlY2",get_controlX2:"get_controlX2",get_controlY1:"get_controlY1",get_controlX1:"get_controlX1"};
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$._new = function(d) {
	var this1 = d;
	return this1;
};
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX1 = function(this1) {
	return this1.buffer.f[this1.fPos];
};
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY1 = function(this1) {
	return this1.buffer.f[this1.fPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX2 = function(this1) {
	return this1.buffer.f[this1.fPos + 2];
};
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY2 = function(this1) {
	return this1.buffer.f[this1.fPos + 3];
};
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorX = function(this1) {
	return this1.buffer.f[this1.fPos + 4];
};
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorY = function(this1) {
	return this1.buffer.f[this1.fPos + 5];
};
var openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.CurveToView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.__name__ = "openfl._internal.renderer._DrawCommandReader.CurveToView_Impl_";
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.__properties__ = {get_anchorY:"get_anchorY",get_anchorX:"get_anchorX",get_controlY:"get_controlY",get_controlX:"get_controlX"};
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$._new = function(d) {
	var this1 = d;
	return this1;
};
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlX = function(this1) {
	return this1.buffer.f[this1.fPos];
};
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlY = function(this1) {
	return this1.buffer.f[this1.fPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorX = function(this1) {
	return this1.buffer.f[this1.fPos + 2];
};
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorY = function(this1) {
	return this1.buffer.f[this1.fPos + 3];
};
var openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.DrawCircleView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.__name__ = "openfl._internal.renderer._DrawCommandReader.DrawCircleView_Impl_";
openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.__properties__ = {get_radius:"get_radius",get_y:"get_y",get_x:"get_x"};
openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$._new = function(d) {
	var this1 = d;
	return this1;
};
openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_x = function(this1) {
	return this1.buffer.f[this1.fPos];
};
openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_y = function(this1) {
	return this1.buffer.f[this1.fPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_radius = function(this1) {
	return this1.buffer.f[this1.fPos + 2];
};
var openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.DrawEllipseView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.__name__ = "openfl._internal.renderer._DrawCommandReader.DrawEllipseView_Impl_";
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.__properties__ = {get_height:"get_height",get_width:"get_width",get_y:"get_y",get_x:"get_x"};
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$._new = function(d) {
	var this1 = d;
	return this1;
};
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_x = function(this1) {
	return this1.buffer.f[this1.fPos];
};
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_y = function(this1) {
	return this1.buffer.f[this1.fPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_width = function(this1) {
	return this1.buffer.f[this1.fPos + 2];
};
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_height = function(this1) {
	return this1.buffer.f[this1.fPos + 3];
};
var openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.DrawRectView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.__name__ = "openfl._internal.renderer._DrawCommandReader.DrawRectView_Impl_";
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.__properties__ = {get_height:"get_height",get_width:"get_width",get_y:"get_y",get_x:"get_x"};
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$._new = function(d) {
	var this1 = d;
	return this1;
};
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x = function(this1) {
	return this1.buffer.f[this1.fPos];
};
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y = function(this1) {
	return this1.buffer.f[this1.fPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_width = function(this1) {
	return this1.buffer.f[this1.fPos + 2];
};
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_height = function(this1) {
	return this1.buffer.f[this1.fPos + 3];
};
var openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.DrawRoundRectView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.__name__ = "openfl._internal.renderer._DrawCommandReader.DrawRoundRectView_Impl_";
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.__properties__ = {get_ellipseHeight:"get_ellipseHeight",get_ellipseWidth:"get_ellipseWidth",get_height:"get_height",get_width:"get_width",get_y:"get_y",get_x:"get_x"};
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$._new = function(d) {
	var this1 = d;
	return this1;
};
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_x = function(this1) {
	return this1.buffer.f[this1.fPos];
};
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_y = function(this1) {
	return this1.buffer.f[this1.fPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_width = function(this1) {
	return this1.buffer.f[this1.fPos + 2];
};
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_height = function(this1) {
	return this1.buffer.f[this1.fPos + 3];
};
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseWidth = function(this1) {
	return this1.buffer.f[this1.fPos + 4];
};
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseHeight = function(this1) {
	return this1.buffer.o[this1.oPos];
};
var openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.DrawTrianglesView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.__name__ = "openfl._internal.renderer._DrawCommandReader.DrawTrianglesView_Impl_";
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.__properties__ = {get_culling:"get_culling",get_uvtData:"get_uvtData",get_indices:"get_indices",get_vertices:"get_vertices"};
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$._new = function(d) {
	var this1 = d;
	return this1;
};
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_vertices = function(this1) {
	return this1.buffer.o[this1.oPos];
};
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_indices = function(this1) {
	return this1.buffer.o[this1.oPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_uvtData = function(this1) {
	return this1.buffer.o[this1.oPos + 2];
};
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_culling = function(this1) {
	return this1.buffer.o[this1.oPos + 3];
};
var openfl__$internal_renderer__$DrawCommandReader_EndFillView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.EndFillView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_EndFillView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_EndFillView_$Impl_$.__name__ = "openfl._internal.renderer._DrawCommandReader.EndFillView_Impl_";
openfl__$internal_renderer__$DrawCommandReader_EndFillView_$Impl_$._new = function(d) {
	var this1 = d;
	return this1;
};
var openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.LineBitmapStyleView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.__name__ = "openfl._internal.renderer._DrawCommandReader.LineBitmapStyleView_Impl_";
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.__properties__ = {get_smooth:"get_smooth",get_repeat:"get_repeat",get_matrix:"get_matrix",get_bitmap:"get_bitmap"};
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$._new = function(d) {
	var this1 = d;
	return this1;
};
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_bitmap = function(this1) {
	return this1.buffer.o[this1.oPos];
};
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_matrix = function(this1) {
	return this1.buffer.o[this1.oPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_repeat = function(this1) {
	return this1.buffer.b[this1.bPos];
};
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_smooth = function(this1) {
	return this1.buffer.b[this1.bPos + 1];
};
var openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.LineGradientStyleView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.__name__ = "openfl._internal.renderer._DrawCommandReader.LineGradientStyleView_Impl_";
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.__properties__ = {get_focalPointRatio:"get_focalPointRatio",get_interpolationMethod:"get_interpolationMethod",get_spreadMethod:"get_spreadMethod",get_matrix:"get_matrix",get_ratios:"get_ratios",get_alphas:"get_alphas",get_colors:"get_colors",get_type:"get_type"};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$._new = function(d) {
	var this1 = d;
	return this1;
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_type = function(this1) {
	return this1.buffer.o[this1.oPos];
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_colors = function(this1) {
	return this1.buffer.ii[this1.iiPos];
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_alphas = function(this1) {
	return this1.buffer.ff[this1.ffPos];
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_ratios = function(this1) {
	return this1.buffer.ii[this1.iiPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_matrix = function(this1) {
	return this1.buffer.o[this1.oPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_spreadMethod = function(this1) {
	return this1.buffer.o[this1.oPos + 2];
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_interpolationMethod = function(this1) {
	return this1.buffer.o[this1.oPos + 3];
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_focalPointRatio = function(this1) {
	return this1.buffer.f[this1.fPos];
};
var openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.LineStyleView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.__name__ = "openfl._internal.renderer._DrawCommandReader.LineStyleView_Impl_";
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.__properties__ = {get_miterLimit:"get_miterLimit",get_joints:"get_joints",get_caps:"get_caps",get_scaleMode:"get_scaleMode",get_pixelHinting:"get_pixelHinting",get_alpha:"get_alpha",get_color:"get_color",get_thickness:"get_thickness"};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$._new = function(d) {
	var this1 = d;
	return this1;
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_thickness = function(this1) {
	return this1.buffer.o[this1.oPos];
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_color = function(this1) {
	return this1.buffer.i[this1.iPos];
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_alpha = function(this1) {
	return this1.buffer.f[this1.fPos];
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_pixelHinting = function(this1) {
	return this1.buffer.b[this1.bPos];
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_scaleMode = function(this1) {
	return this1.buffer.o[this1.oPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_caps = function(this1) {
	return this1.buffer.o[this1.oPos + 2];
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_joints = function(this1) {
	return this1.buffer.o[this1.oPos + 3];
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_miterLimit = function(this1) {
	return this1.buffer.f[this1.fPos + 1];
};
var openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.LineToView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.__name__ = "openfl._internal.renderer._DrawCommandReader.LineToView_Impl_";
openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.__properties__ = {get_y:"get_y",get_x:"get_x"};
openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$._new = function(d) {
	var this1 = d;
	return this1;
};
openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x = function(this1) {
	return this1.buffer.f[this1.fPos];
};
openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y = function(this1) {
	return this1.buffer.f[this1.fPos + 1];
};
var openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.MoveToView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.__name__ = "openfl._internal.renderer._DrawCommandReader.MoveToView_Impl_";
openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.__properties__ = {get_y:"get_y",get_x:"get_x"};
openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$._new = function(d) {
	var this1 = d;
	return this1;
};
openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x = function(this1) {
	return this1.buffer.f[this1.fPos];
};
openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y = function(this1) {
	return this1.buffer.f[this1.fPos + 1];
};
var openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.OverrideMatrixView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$.__name__ = "openfl._internal.renderer._DrawCommandReader.OverrideMatrixView_Impl_";
openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$.__properties__ = {get_matrix:"get_matrix"};
openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$._new = function(d) {
	var this1 = d;
	return this1;
};
openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$.get_matrix = function(this1) {
	return this1.buffer.o[this1.oPos];
};
var openfl__$internal_renderer__$DrawCommandReader_WindingEvenOddView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.WindingEvenOddView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_WindingEvenOddView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_WindingEvenOddView_$Impl_$.__name__ = "openfl._internal.renderer._DrawCommandReader.WindingEvenOddView_Impl_";
openfl__$internal_renderer__$DrawCommandReader_WindingEvenOddView_$Impl_$._new = function(d) {
	var this1 = d;
	return this1;
};
var openfl__$internal_renderer__$DrawCommandReader_WindingNonZeroView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.WindingNonZeroView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_WindingNonZeroView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_WindingNonZeroView_$Impl_$.__name__ = "openfl._internal.renderer._DrawCommandReader.WindingNonZeroView_Impl_";
openfl__$internal_renderer__$DrawCommandReader_WindingNonZeroView_$Impl_$._new = function(d) {
	var this1 = d;
	return this1;
};
var openfl__$internal_renderer_DrawCommandType = $hxEnums["openfl._internal.renderer.DrawCommandType"] = { __ename__ : "openfl._internal.renderer.DrawCommandType", __constructs__ : ["BEGIN_BITMAP_FILL","BEGIN_FILL","BEGIN_GRADIENT_FILL","CUBIC_CURVE_TO","CURVE_TO","DRAW_CIRCLE","DRAW_ELLIPSE","DRAW_RECT","DRAW_ROUND_RECT","DRAW_TILES","DRAW_TRIANGLES","END_FILL","LINE_BITMAP_STYLE","LINE_GRADIENT_STYLE","LINE_STYLE","LINE_TO","MOVE_TO","OVERRIDE_MATRIX","WINDING_EVEN_ODD","WINDING_NON_ZERO","UNKNOWN"]
	,BEGIN_BITMAP_FILL: {_hx_index:0,__enum__:"openfl._internal.renderer.DrawCommandType",toString:$estr}
	,BEGIN_FILL: {_hx_index:1,__enum__:"openfl._internal.renderer.DrawCommandType",toString:$estr}
	,BEGIN_GRADIENT_FILL: {_hx_index:2,__enum__:"openfl._internal.renderer.DrawCommandType",toString:$estr}
	,CUBIC_CURVE_TO: {_hx_index:3,__enum__:"openfl._internal.renderer.DrawCommandType",toString:$estr}
	,CURVE_TO: {_hx_index:4,__enum__:"openfl._internal.renderer.DrawCommandType",toString:$estr}
	,DRAW_CIRCLE: {_hx_index:5,__enum__:"openfl._internal.renderer.DrawCommandType",toString:$estr}
	,DRAW_ELLIPSE: {_hx_index:6,__enum__:"openfl._internal.renderer.DrawCommandType",toString:$estr}
	,DRAW_RECT: {_hx_index:7,__enum__:"openfl._internal.renderer.DrawCommandType",toString:$estr}
	,DRAW_ROUND_RECT: {_hx_index:8,__enum__:"openfl._internal.renderer.DrawCommandType",toString:$estr}
	,DRAW_TILES: {_hx_index:9,__enum__:"openfl._internal.renderer.DrawCommandType",toString:$estr}
	,DRAW_TRIANGLES: {_hx_index:10,__enum__:"openfl._internal.renderer.DrawCommandType",toString:$estr}
	,END_FILL: {_hx_index:11,__enum__:"openfl._internal.renderer.DrawCommandType",toString:$estr}
	,LINE_BITMAP_STYLE: {_hx_index:12,__enum__:"openfl._internal.renderer.DrawCommandType",toString:$estr}
	,LINE_GRADIENT_STYLE: {_hx_index:13,__enum__:"openfl._internal.renderer.DrawCommandType",toString:$estr}
	,LINE_STYLE: {_hx_index:14,__enum__:"openfl._internal.renderer.DrawCommandType",toString:$estr}
	,LINE_TO: {_hx_index:15,__enum__:"openfl._internal.renderer.DrawCommandType",toString:$estr}
	,MOVE_TO: {_hx_index:16,__enum__:"openfl._internal.renderer.DrawCommandType",toString:$estr}
	,OVERRIDE_MATRIX: {_hx_index:17,__enum__:"openfl._internal.renderer.DrawCommandType",toString:$estr}
	,WINDING_EVEN_ODD: {_hx_index:18,__enum__:"openfl._internal.renderer.DrawCommandType",toString:$estr}
	,WINDING_NON_ZERO: {_hx_index:19,__enum__:"openfl._internal.renderer.DrawCommandType",toString:$estr}
	,UNKNOWN: {_hx_index:20,__enum__:"openfl._internal.renderer.DrawCommandType",toString:$estr}
};
var openfl__$internal_renderer_canvas_CanvasBitmap = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasBitmap"] = openfl__$internal_renderer_canvas_CanvasBitmap;
openfl__$internal_renderer_canvas_CanvasBitmap.__name__ = "openfl._internal.renderer.canvas.CanvasBitmap";
openfl__$internal_renderer_canvas_CanvasBitmap.render = function(bitmap,renderSession) {
	if(!bitmap.__renderable || bitmap.__worldAlpha <= 0) {
		return;
	}
	var context = renderSession.context;
	if(bitmap.__bitmapData != null && bitmap.__bitmapData.__isValid && bitmap.__bitmapData.__canBeDrawnToCanvas()) {
		renderSession.blendModeManager.setBlendMode(bitmap.__worldBlendMode);
		renderSession.maskManager.pushObject(bitmap,false);
		if(!renderSession.allowSmoothing || !bitmap.smoothing) {
			context.mozImageSmoothingEnabled = false;
			context.msImageSmoothingEnabled = false;
			context.imageSmoothingEnabled = false;
		}
		context.globalAlpha = bitmap.__worldAlpha;
		var _g = bitmap.__pixelSnapping;
		var tmp;
		if(_g == null) {
			tmp = false;
		} else {
			switch(_g) {
			case 0:
				tmp = true;
				break;
			case 1:
				tmp = Math.abs(bitmap.__renderTransform.a) == 1 && Math.abs(bitmap.__renderTransform.d) == 1;
				break;
			case 2:
				tmp = false;
				break;
			}
		}
		bitmap.__bitmapData.__drawToCanvas(context,bitmap.__renderTransform,tmp,renderSession.pixelRatio,bitmap.__scrollRect,true);
		if(!renderSession.allowSmoothing || !bitmap.smoothing) {
			context.mozImageSmoothingEnabled = true;
			context.msImageSmoothingEnabled = true;
			context.imageSmoothingEnabled = true;
		}
		renderSession.maskManager.popObject(bitmap,false);
	}
};
var openfl__$internal_renderer_canvas_CanvasBlendModeManager = function(context) {
	this.context = context;
};
$hxClasses["openfl._internal.renderer.canvas.CanvasBlendModeManager"] = openfl__$internal_renderer_canvas_CanvasBlendModeManager;
openfl__$internal_renderer_canvas_CanvasBlendModeManager.__name__ = "openfl._internal.renderer.canvas.CanvasBlendModeManager";
openfl__$internal_renderer_canvas_CanvasBlendModeManager.prototype = {
	context: null
	,currentBlendMode: null
	,setBlendMode: function(blendMode) {
		if(this.currentBlendMode == blendMode) {
			return;
		}
		this.currentBlendMode = blendMode;
		switch(blendMode) {
		case 0:
			this.context.globalCompositeOperation = "lighter";
			break;
		case 1:
			this.context.globalCompositeOperation = "destination-in";
			break;
		case 2:
			this.context.globalCompositeOperation = "darken";
			break;
		case 3:
			this.context.globalCompositeOperation = "difference";
			break;
		case 4:
			this.context.globalCompositeOperation = "destination-out";
			break;
		case 5:
			this.context.globalCompositeOperation = "hard-light";
			break;
		case 7:
			this.context.globalCompositeOperation = "source-over";
			break;
		case 8:
			this.context.globalCompositeOperation = "lighten";
			break;
		case 9:
			this.context.globalCompositeOperation = "multiply";
			break;
		case 11:
			this.context.globalCompositeOperation = "overlay";
			break;
		case 12:
			this.context.globalCompositeOperation = "screen";
			break;
		default:
			this.context.globalCompositeOperation = "source-over";
		}
	}
	,__class__: openfl__$internal_renderer_canvas_CanvasBlendModeManager
};
var openfl__$internal_renderer_canvas_CanvasDisplayObject = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasDisplayObject"] = openfl__$internal_renderer_canvas_CanvasDisplayObject;
openfl__$internal_renderer_canvas_CanvasDisplayObject.__name__ = "openfl._internal.renderer.canvas.CanvasDisplayObject";
openfl__$internal_renderer_canvas_CanvasDisplayObject.render = function(displayObject,renderSession) {
	if(displayObject.opaqueBackground == null && displayObject.__graphics == null) {
		return;
	}
	if(!displayObject.__renderable || displayObject.__worldAlpha <= 0) {
		return;
	}
	if(displayObject.opaqueBackground != null && !displayObject.__cacheBitmapRender && displayObject.get_width() > 0 && displayObject.get_height() > 0) {
		renderSession.blendModeManager.setBlendMode(displayObject.__worldBlendMode);
		renderSession.maskManager.pushObject(displayObject);
		var context = renderSession.context;
		var transform = displayObject.__renderTransform;
		var pixelRatio = renderSession.pixelRatio;
		context.setTransform(transform.a * pixelRatio,transform.b,transform.c,transform.d * pixelRatio,transform.tx * pixelRatio,transform.ty * pixelRatio);
		var color = displayObject.opaqueBackground;
		context.fillStyle = "rgb(" + (color >>> 16 & 255) + "," + (color >>> 8 & 255) + "," + (color & 255) + ")";
		context.fillRect(0,0,displayObject.get_width(),displayObject.get_height());
		renderSession.maskManager.popObject(displayObject);
	}
	if(displayObject.__graphics != null) {
		var graphics = displayObject.__graphics;
		openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderSession.pixelRatio,renderSession.allowSmoothing);
		var width = graphics.__width;
		var height = graphics.__height;
		if(graphics.__canvas != null) {
			var context1 = renderSession.context;
			var scrollRect = displayObject.__scrollRect;
			if(width > 0 && height > 0 && (scrollRect == null || scrollRect.width > 0 && scrollRect.height > 0)) {
				renderSession.blendModeManager.setBlendMode(displayObject.__worldBlendMode);
				renderSession.maskManager.pushObject(displayObject);
				context1.globalAlpha = displayObject.__worldAlpha;
				var transform1 = graphics.__worldTransform;
				var pixelRatio1 = renderSession.pixelRatio;
				var scale = 1;
				context1.setTransform(transform1.a * scale,transform1.b,transform1.c,transform1.d * scale,transform1.tx * pixelRatio1,transform1.ty * pixelRatio1);
				context1.drawImage(graphics.__canvas,0,0);
				renderSession.maskManager.popObject(displayObject);
			}
		}
	}
};
var openfl__$internal_renderer_canvas_CanvasGraphics = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasGraphics"] = openfl__$internal_renderer_canvas_CanvasGraphics;
openfl__$internal_renderer_canvas_CanvasGraphics.__name__ = "openfl._internal.renderer.canvas.CanvasGraphics";
openfl__$internal_renderer_canvas_CanvasGraphics.setupCanvasContextCompatFunctions = function() {
	var proto = CanvasRenderingContext2D.prototype;
	if(proto.isPointInStroke == null) {
		proto.isPointInStroke = function(path,x,y) {
			return false;
		};
	}
	if(proto.isPointInPath == null) {
		proto.isPointInPath = function(path1,x1,y1) {
			return false;
		};
	}
};
openfl__$internal_renderer_canvas_CanvasGraphics.closePath = function(strokeBefore) {
	if(strokeBefore == null) {
		strokeBefore = false;
	}
	if(openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle == null) {
		return;
	}
	if(!strokeBefore) {
		openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
	}
	openfl__$internal_renderer_canvas_CanvasGraphics.context.stroke();
	if(strokeBefore) {
		openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
	}
	openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
};
openfl__$internal_renderer_canvas_CanvasGraphics.createBitmapFill = function(bitmap,bitmapRepeat,smooth) {
	if(!bitmap.__prepareImage()) {
		return null;
	}
	openfl__$internal_graphics_utils_ImageCanvasUtil.convertToCanvas(bitmap.image);
	openfl__$internal_renderer_canvas_CanvasGraphics.setSmoothing(smooth);
	return openfl__$internal_renderer_canvas_CanvasGraphics.context.createPattern(bitmap.image.get_src(),bitmapRepeat ? "repeat" : "no-repeat");
};
openfl__$internal_renderer_canvas_CanvasGraphics.createGradientPattern = function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
	var gradientFill = null;
	var point = null;
	var point2 = null;
	var releaseMatrix = false;
	if(matrix == null) {
		matrix = openfl_geom_Matrix.__pool.get();
		releaseMatrix = true;
	}
	switch(type) {
	case 0:
		point = openfl_geom_Point.__pool.get();
		point.setTo(-819.2,0);
		var px = point.x;
		var py = point.y;
		point.x = px * matrix.a + py * matrix.c + matrix.tx;
		point.y = px * matrix.b + py * matrix.d + matrix.ty;
		point2 = openfl_geom_Point.__pool.get();
		point2.setTo(819.2,0);
		var px1 = point2.x;
		var py1 = point2.y;
		point2.x = px1 * matrix.a + py1 * matrix.c + matrix.tx;
		point2.y = px1 * matrix.b + py1 * matrix.d + matrix.ty;
		gradientFill = openfl__$internal_renderer_canvas_CanvasGraphics.context.createLinearGradient(point.x,point.y,point2.x,point2.y);
		break;
	case 1:
		point = openfl_geom_Point.__pool.get();
		point.setTo(1638.4,0);
		var px2 = point.x;
		var py2 = point.y;
		point.x = px2 * matrix.a + py2 * matrix.c + matrix.tx;
		point.y = px2 * matrix.b + py2 * matrix.d + matrix.ty;
		gradientFill = openfl__$internal_renderer_canvas_CanvasGraphics.context.createRadialGradient(matrix.tx,matrix.ty,0,matrix.tx,matrix.ty,Math.abs((point.x - matrix.tx) / 2));
		break;
	}
	var _g = 0;
	var _g1 = colors.length;
	while(_g < _g1) {
		var i = _g++;
		var rgb = colors[i];
		var alpha = alphas[i];
		var r = (rgb & 16711680) >>> 16;
		var g = (rgb & 65280) >>> 8;
		var b = rgb & 255;
		var ratio = ratios[i] / 255;
		if(ratio < 0) {
			ratio = 0;
		}
		if(ratio > 1) {
			ratio = 1;
		}
		gradientFill.addColorStop(ratio,"rgba(" + r + ", " + g + ", " + b + ", " + alpha + ")");
	}
	if(point != null) {
		openfl_geom_Point.__pool.release(point);
	}
	if(point2 != null) {
		openfl_geom_Point.__pool.release(point2);
	}
	if(releaseMatrix) {
		openfl_geom_Matrix.__pool.release(matrix);
	}
	return gradientFill;
};
openfl__$internal_renderer_canvas_CanvasGraphics.createTempPatternCanvas = function(bitmap,repeat,width,height) {
	var canvas = window.document.createElement("canvas");
	var context = canvas.getContext("2d");
	canvas.width = width;
	canvas.height = height;
	var tmp = bitmap.image.get_src();
	context.fillStyle = context.createPattern(tmp,repeat ? "repeat" : "no-repeat");
	context.beginPath();
	context.moveTo(0,0);
	context.lineTo(0,height);
	context.lineTo(width,height);
	context.lineTo(width,0);
	context.lineTo(0,0);
	context.closePath();
	if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) {
		context.fill(openfl__$internal_renderer_canvas_CanvasGraphics.windingRule);
	}
	return canvas;
};
openfl__$internal_renderer_canvas_CanvasGraphics.drawRoundRect = function(x,y,width,height,ellipseWidth,ellipseHeight) {
	if(ellipseHeight == null) {
		ellipseHeight = ellipseWidth;
	}
	ellipseWidth *= 0.5;
	ellipseHeight *= 0.5;
	if(ellipseWidth > width / 2) {
		ellipseWidth = width / 2;
	}
	if(ellipseHeight > height / 2) {
		ellipseHeight = height / 2;
	}
	var xe = x + width;
	var ye = y + height;
	var cx1 = -ellipseWidth + ellipseWidth * 0.70710678118654752440084436210485;
	var cx2 = -ellipseWidth + ellipseWidth * 0.4142135623730950488016887242097;
	var cy1 = -ellipseHeight + ellipseHeight * 0.70710678118654752440084436210485;
	var cy2 = -ellipseHeight + ellipseHeight * 0.4142135623730950488016887242097;
	openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(xe,ye - ellipseHeight);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(xe,ye + cy2,xe + cx1,ye + cy1);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(xe + cx2,ye,xe - ellipseWidth,ye);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x + ellipseWidth,ye);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(x - cx2,ye,x - cx1,ye + cy1);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(x,ye + cy2,x,ye - ellipseHeight);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x,y + ellipseHeight);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(x,y - cy2,x - cx1,y - cy1);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(x - cx2,y,x + ellipseWidth,y);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(xe - ellipseWidth,y);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(xe + cx2,y,xe + cx1,y - cy1);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(xe,y - cy2,xe,y + ellipseHeight);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(xe,ye - ellipseHeight);
};
openfl__$internal_renderer_canvas_CanvasGraphics.endFill = function() {
	openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
	openfl__$internal_renderer_canvas_CanvasGraphics.playCommands(openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands,false);
	openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.clear();
};
openfl__$internal_renderer_canvas_CanvasGraphics.endStroke = function() {
	openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
	openfl__$internal_renderer_canvas_CanvasGraphics.playCommands(openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands,true);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
	openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.clear();
};
openfl__$internal_renderer_canvas_CanvasGraphics.hitTest = function(graphics,x,y) {
	openfl__$internal_renderer_canvas_CanvasGraphics.bounds = graphics.__bounds;
	openfl__$internal_renderer_canvas_CanvasGraphics.graphics = graphics;
	if(graphics.__commands.get_length() == 0 || openfl__$internal_renderer_canvas_CanvasGraphics.bounds == null || openfl__$internal_renderer_canvas_CanvasGraphics.bounds.width <= 0 || openfl__$internal_renderer_canvas_CanvasGraphics.bounds.height <= 0) {
		return false;
	} else {
		openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting = true;
		var transform = graphics.__renderTransform;
		var px = x * transform.a + y * transform.c + transform.tx;
		var py = x * transform.b + y * transform.d + transform.ty;
		x = px;
		y = py;
		x -= openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x * transform.a + openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y * transform.c + transform.tx;
		y -= openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x * transform.b + openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y * transform.d + transform.ty;
		var cacheCanvas = graphics.__canvas;
		var cacheContext = graphics.__context;
		graphics.__canvas = openfl__$internal_renderer_canvas_CanvasGraphics.hitTestCanvas;
		graphics.__context = openfl__$internal_renderer_canvas_CanvasGraphics.hitTestContext;
		openfl__$internal_renderer_canvas_CanvasGraphics.context = graphics.__context;
		openfl__$internal_renderer_canvas_CanvasGraphics.context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.clear();
		openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.clear();
		openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
		openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = false;
		openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
		openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat = false;
		openfl__$internal_renderer_canvas_CanvasGraphics.windingRule = "evenodd";
		var data = new openfl__$internal_renderer_DrawCommandReader(graphics.__commands);
		var _g = 0;
		var _g1 = graphics.__commands.types;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type._hx_index) {
			case 0:case 1:case 2:
				openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
				if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInPath(x,y,openfl__$internal_renderer_canvas_CanvasGraphics.windingRule)) {
					data.destroy();
					graphics.__canvas = cacheCanvas;
					graphics.__context = cacheContext;
					return true;
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
				if(openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInStroke(x,y)) {
					data.destroy();
					graphics.__canvas = cacheCanvas;
					graphics.__context = cacheContext;
					return true;
				}
				if(type == openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL) {
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.fPos += 6;
						break;
					case 4:
						data.fPos += 4;
						break;
					case 5:
						data.fPos += 3;
						break;
					case 6:
						data.fPos += 4;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 10:
						data.oPos += 4;
						break;
					case 11:
						break;
					case 12:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 13:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 14:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 15:
						data.fPos += 2;
						break;
					case 16:
						data.fPos += 2;
						break;
					case 17:
						data.oPos += 1;
						break;
					case 18:case 19:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
					var this1 = data;
					var c = this1;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginBitmapFill(c.buffer.o[c.oPos],c.buffer.o[c.oPos + 1],c.buffer.b[c.bPos],c.buffer.b[c.bPos + 1]);
					openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginBitmapFill(c.buffer.o[c.oPos],c.buffer.o[c.oPos + 1],c.buffer.b[c.bPos],c.buffer.b[c.bPos + 1]);
				} else if(type == openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL) {
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.fPos += 6;
						break;
					case 4:
						data.fPos += 4;
						break;
					case 5:
						data.fPos += 3;
						break;
					case 6:
						data.fPos += 4;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 10:
						data.oPos += 4;
						break;
					case 11:
						break;
					case 12:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 13:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 14:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 15:
						data.fPos += 2;
						break;
					case 16:
						data.fPos += 2;
						break;
					case 17:
						data.oPos += 1;
						break;
					case 18:case 19:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL;
					var this2 = data;
					var c1 = this2;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginGradientFill(c1.buffer.o[c1.oPos],c1.buffer.ii[c1.iiPos],c1.buffer.ff[c1.ffPos],c1.buffer.ii[c1.iiPos + 1],c1.buffer.o[c1.oPos + 1],c1.buffer.o[c1.oPos + 2],c1.buffer.o[c1.oPos + 3],c1.buffer.f[c1.fPos]);
					openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginGradientFill(c1.buffer.o[c1.oPos],c1.buffer.ii[c1.iiPos],c1.buffer.ff[c1.ffPos],c1.buffer.ii[c1.iiPos + 1],c1.buffer.o[c1.oPos + 1],c1.buffer.o[c1.oPos + 2],c1.buffer.o[c1.oPos + 3],c1.buffer.f[c1.fPos]);
				} else {
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.fPos += 6;
						break;
					case 4:
						data.fPos += 4;
						break;
					case 5:
						data.fPos += 3;
						break;
					case 6:
						data.fPos += 4;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 10:
						data.oPos += 4;
						break;
					case 11:
						break;
					case 12:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 13:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 14:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 15:
						data.fPos += 2;
						break;
					case 16:
						data.fPos += 2;
						break;
					case 17:
						data.oPos += 1;
						break;
					case 18:case 19:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_FILL;
					var this3 = data;
					var c2 = this3;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginFill(c2.buffer.i[c2.iPos],1);
					openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginFill(c2.buffer.i[c2.iPos],1);
				}
				break;
			case 3:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
				var this4 = data;
				var c3 = this4;
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.cubicCurveTo(c3.buffer.f[c3.fPos],c3.buffer.f[c3.fPos + 1],c3.buffer.f[c3.fPos + 2],c3.buffer.f[c3.fPos + 3],c3.buffer.f[c3.fPos + 4],c3.buffer.f[c3.fPos + 5]);
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.cubicCurveTo(c3.buffer.f[c3.fPos],c3.buffer.f[c3.fPos + 1],c3.buffer.f[c3.fPos + 2],c3.buffer.f[c3.fPos + 3],c3.buffer.f[c3.fPos + 4],c3.buffer.f[c3.fPos + 5]);
				break;
			case 4:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
				var this5 = data;
				var c4 = this5;
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.curveTo(c4.buffer.f[c4.fPos],c4.buffer.f[c4.fPos + 1],c4.buffer.f[c4.fPos + 2],c4.buffer.f[c4.fPos + 3]);
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.curveTo(c4.buffer.f[c4.fPos],c4.buffer.f[c4.fPos + 1],c4.buffer.f[c4.fPos + 2],c4.buffer.f[c4.fPos + 3]);
				break;
			case 5:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
				var this6 = data;
				var c5 = this6;
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawCircle(c5.buffer.f[c5.fPos],c5.buffer.f[c5.fPos + 1],c5.buffer.f[c5.fPos + 2]);
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawCircle(c5.buffer.f[c5.fPos],c5.buffer.f[c5.fPos + 1],c5.buffer.f[c5.fPos + 2]);
				break;
			case 6:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
				var this7 = data;
				var c6 = this7;
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawEllipse(c6.buffer.f[c6.fPos],c6.buffer.f[c6.fPos + 1],c6.buffer.f[c6.fPos + 2],c6.buffer.f[c6.fPos + 3]);
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawEllipse(c6.buffer.f[c6.fPos],c6.buffer.f[c6.fPos + 1],c6.buffer.f[c6.fPos + 2],c6.buffer.f[c6.fPos + 3]);
				break;
			case 7:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
				var this8 = data;
				var c7 = this8;
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawRect(c7.buffer.f[c7.fPos],c7.buffer.f[c7.fPos + 1],c7.buffer.f[c7.fPos + 2],c7.buffer.f[c7.fPos + 3]);
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawRect(c7.buffer.f[c7.fPos],c7.buffer.f[c7.fPos + 1],c7.buffer.f[c7.fPos + 2],c7.buffer.f[c7.fPos + 3]);
				break;
			case 8:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
				var this9 = data;
				var c8 = this9;
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawRoundRect(c8.buffer.f[c8.fPos],c8.buffer.f[c8.fPos + 1],c8.buffer.f[c8.fPos + 2],c8.buffer.f[c8.fPos + 3],c8.buffer.f[c8.fPos + 4],c8.buffer.o[c8.oPos]);
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawRoundRect(c8.buffer.f[c8.fPos],c8.buffer.f[c8.fPos + 1],c8.buffer.f[c8.fPos + 2],c8.buffer.f[c8.fPos + 3],c8.buffer.f[c8.fPos + 4],c8.buffer.o[c8.oPos]);
				break;
			case 11:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.END_FILL;
				var this10 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
				if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInPath(x,y,openfl__$internal_renderer_canvas_CanvasGraphics.windingRule)) {
					data.destroy();
					graphics.__canvas = cacheCanvas;
					graphics.__context = cacheContext;
					return true;
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
				if(openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInStroke(x,y)) {
					data.destroy();
					graphics.__canvas = cacheCanvas;
					graphics.__context = cacheContext;
					return true;
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
				openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
				break;
			case 12:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE;
				var this11 = data;
				var c9 = this11;
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineBitmapStyle(c9.buffer.o[c9.oPos],c9.buffer.o[c9.oPos + 1],c9.buffer.b[c9.bPos],c9.buffer.b[c9.bPos + 1]);
				break;
			case 13:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE;
				var this12 = data;
				var c10 = this12;
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineGradientStyle(c10.buffer.o[c10.oPos],c10.buffer.ii[c10.iiPos],c10.buffer.ff[c10.ffPos],c10.buffer.ii[c10.iiPos + 1],c10.buffer.o[c10.oPos + 1],c10.buffer.o[c10.oPos + 2],c10.buffer.o[c10.oPos + 3],c10.buffer.f[c10.fPos]);
				break;
			case 14:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_STYLE;
				var this13 = data;
				var c11 = this13;
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineStyle(c11.buffer.o[c11.oPos],c11.buffer.i[c11.iPos],1,c11.buffer.b[c11.bPos],c11.buffer.o[c11.oPos + 1],c11.buffer.o[c11.oPos + 2],c11.buffer.o[c11.oPos + 3],c11.buffer.f[c11.fPos + 1]);
				break;
			case 15:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
				var this14 = data;
				var c12 = this14;
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.lineTo(c12.buffer.f[c12.fPos],c12.buffer.f[c12.fPos + 1]);
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineTo(c12.buffer.f[c12.fPos],c12.buffer.f[c12.fPos + 1]);
				break;
			case 16:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
				var this15 = data;
				var c13 = this15;
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.moveTo(c13.buffer.f[c13.fPos],c13.buffer.f[c13.fPos + 1]);
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.moveTo(c13.buffer.f[c13.fPos],c13.buffer.f[c13.fPos + 1]);
				break;
			case 18:
				openfl__$internal_renderer_canvas_CanvasGraphics.windingRule = "evenodd";
				break;
			case 19:
				openfl__$internal_renderer_canvas_CanvasGraphics.windingRule = "nonzero";
				break;
			default:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = type;
			}
		}
		var hitTest = false;
		if(openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.get_length() > 0) {
			openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
		}
		if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInPath(x,y,openfl__$internal_renderer_canvas_CanvasGraphics.windingRule)) {
			hitTest = true;
		}
		if(openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.get_length() > 0) {
			openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
		}
		if(openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInStroke(x,y)) {
			hitTest = true;
		}
		data.destroy();
		graphics.__canvas = cacheCanvas;
		graphics.__context = cacheContext;
		return hitTest;
	}
};
openfl__$internal_renderer_canvas_CanvasGraphics.isCCW = function(x1,y1,x2,y2,x3,y3) {
	return (x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0;
};
openfl__$internal_renderer_canvas_CanvasGraphics.normalizeUVT = function(uvt,skipT) {
	if(skipT == null) {
		skipT = false;
	}
	var max = -Infinity;
	var tmp = -Infinity;
	var len = uvt.data.get_length();
	var _g = 1;
	var _g1 = len + 1;
	while(_g < _g1) {
		var t = _g++;
		if(skipT && t % 3 == 0) {
			continue;
		}
		tmp = uvt.data.get(t - 1);
		if(max < tmp) {
			max = tmp;
		}
	}
	if(!skipT) {
		return { max : max, uvt : uvt};
	}
	var result = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	var _g2 = 1;
	var _g3 = len + 1;
	while(_g2 < _g3) {
		var t1 = _g2++;
		if(skipT && t1 % 3 == 0) {
			continue;
		}
		var x = uvt.data.get(t1 - 1);
		result.data.push(x);
	}
	return { max : max, uvt : result};
};
openfl__$internal_renderer_canvas_CanvasGraphics.playCommands = function(commands,stroke) {
	if(stroke == null) {
		stroke = false;
	}
	openfl__$internal_renderer_canvas_CanvasGraphics.bounds = openfl__$internal_renderer_canvas_CanvasGraphics.graphics.__bounds;
	var offsetX = openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x;
	var offsetY = openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y;
	var positionX = 0.0;
	var positionY = 0.0;
	var closeGap = false;
	var startX = 0.0;
	var startY = 0.0;
	var setStart = false;
	openfl__$internal_renderer_canvas_CanvasGraphics.windingRule = "evenodd";
	openfl__$internal_renderer_canvas_CanvasGraphics.setSmoothing(true);
	var data = new openfl__$internal_renderer_DrawCommandReader(commands);
	var x;
	var y;
	var width;
	var height;
	var kappa = .5522848;
	var ox;
	var oy;
	var xe;
	var ye;
	var xm;
	var ym;
	var r;
	var g;
	var b;
	var optimizationUsed;
	var canOptimizeMatrix;
	var st;
	var sr;
	var sb;
	var sl;
	var stl = null;
	var sbr = null;
	var _g = 0;
	var _g1 = commands.types;
	_hx_loop1: while(_g < _g1.length) {
		var type = _g1[_g];
		++_g;
		switch(type._hx_index) {
		case 0:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.fPos += 6;
				break;
			case 4:
				data.fPos += 4;
				break;
			case 5:
				data.fPos += 3;
				break;
			case 6:
				data.fPos += 4;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 10:
				data.oPos += 4;
				break;
			case 11:
				break;
			case 12:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 13:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 14:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 15:
				data.fPos += 2;
				break;
			case 16:
				data.fPos += 2;
				break;
			case 17:
				data.oPos += 1;
				break;
			case 18:case 19:
				break;
			default:
			}
			data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
			var this1 = data;
			var c = this1;
			openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = c.buffer.o[c.oPos];
			openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createBitmapFill(c.buffer.o[c.oPos],true,c.buffer.b[c.bPos + 1]);
			openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = true;
			if(c.buffer.o[c.oPos + 1] != null) {
				openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix = c.buffer.o[c.oPos + 1];
				openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix = c.buffer.o[c.oPos + 1].clone();
				openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.invert();
			} else {
				openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix = null;
				openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix = null;
			}
			break;
		case 1:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.fPos += 6;
				break;
			case 4:
				data.fPos += 4;
				break;
			case 5:
				data.fPos += 3;
				break;
			case 6:
				data.fPos += 4;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 10:
				data.oPos += 4;
				break;
			case 11:
				break;
			case 12:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 13:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 14:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 15:
				data.fPos += 2;
				break;
			case 16:
				data.fPos += 2;
				break;
			case 17:
				data.oPos += 1;
				break;
			case 18:case 19:
				break;
			default:
			}
			data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_FILL;
			var this2 = data;
			var c1 = this2;
			if(c1.buffer.f[c1.fPos] < 0.005) {
				openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
			} else {
				if(c1.buffer.f[c1.fPos] == 1) {
					var tmp = StringTools.hex(c1.buffer.i[c1.iPos] & 16777215,6);
					openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = "#" + tmp;
				} else {
					r = (c1.buffer.i[c1.iPos] & 16711680) >>> 16;
					g = (c1.buffer.i[c1.iPos] & 65280) >>> 8;
					b = c1.buffer.i[c1.iPos] & 255;
					openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = "rgba(" + r + ", " + g + ", " + b + ", " + c1.buffer.f[c1.fPos] + ")";
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
				openfl__$internal_renderer_canvas_CanvasGraphics.setSmoothing(true);
				openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = true;
			}
			break;
		case 2:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.fPos += 6;
				break;
			case 4:
				data.fPos += 4;
				break;
			case 5:
				data.fPos += 3;
				break;
			case 6:
				data.fPos += 4;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 10:
				data.oPos += 4;
				break;
			case 11:
				break;
			case 12:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 13:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 14:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 15:
				data.fPos += 2;
				break;
			case 16:
				data.fPos += 2;
				break;
			case 17:
				data.oPos += 1;
				break;
			case 18:case 19:
				break;
			default:
			}
			data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL;
			var this3 = data;
			var c2 = this3;
			openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createGradientPattern(c2.buffer.o[c2.oPos],c2.buffer.ii[c2.iiPos],c2.buffer.ff[c2.ffPos],c2.buffer.ii[c2.iiPos + 1],c2.buffer.o[c2.oPos + 1],c2.buffer.o[c2.oPos + 2],c2.buffer.o[c2.oPos + 3],c2.buffer.f[c2.fPos]);
			openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
			openfl__$internal_renderer_canvas_CanvasGraphics.setSmoothing(true);
			openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = true;
			break;
		case 3:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.fPos += 6;
				break;
			case 4:
				data.fPos += 4;
				break;
			case 5:
				data.fPos += 3;
				break;
			case 6:
				data.fPos += 4;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 10:
				data.oPos += 4;
				break;
			case 11:
				break;
			case 12:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 13:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 14:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 15:
				data.fPos += 2;
				break;
			case 16:
				data.fPos += 2;
				break;
			case 17:
				data.oPos += 1;
				break;
			case 18:case 19:
				break;
			default:
			}
			data.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
			var this4 = data;
			var c3 = this4;
			openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(c3.buffer.f[c3.fPos] - offsetX,c3.buffer.f[c3.fPos + 1] - offsetY,c3.buffer.f[c3.fPos + 2] - offsetX,c3.buffer.f[c3.fPos + 3] - offsetY,c3.buffer.f[c3.fPos + 4] - offsetX,c3.buffer.f[c3.fPos + 5] - offsetY);
			break;
		case 4:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.fPos += 6;
				break;
			case 4:
				data.fPos += 4;
				break;
			case 5:
				data.fPos += 3;
				break;
			case 6:
				data.fPos += 4;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 10:
				data.oPos += 4;
				break;
			case 11:
				break;
			case 12:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 13:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 14:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 15:
				data.fPos += 2;
				break;
			case 16:
				data.fPos += 2;
				break;
			case 17:
				data.oPos += 1;
				break;
			case 18:case 19:
				break;
			default:
			}
			data.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
			var this5 = data;
			var c4 = this5;
			openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(c4.buffer.f[c4.fPos] - offsetX,c4.buffer.f[c4.fPos + 1] - offsetY,c4.buffer.f[c4.fPos + 2] - offsetX,c4.buffer.f[c4.fPos + 3] - offsetY);
			break;
		case 5:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.fPos += 6;
				break;
			case 4:
				data.fPos += 4;
				break;
			case 5:
				data.fPos += 3;
				break;
			case 6:
				data.fPos += 4;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 10:
				data.oPos += 4;
				break;
			case 11:
				break;
			case 12:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 13:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 14:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 15:
				data.fPos += 2;
				break;
			case 16:
				data.fPos += 2;
				break;
			case 17:
				data.oPos += 1;
				break;
			case 18:case 19:
				break;
			default:
			}
			data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
			var this6 = data;
			var c5 = this6;
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(c5.buffer.f[c5.fPos] - offsetX + c5.buffer.f[c5.fPos + 2],c5.buffer.f[c5.fPos + 1] - offsetY);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.arc(c5.buffer.f[c5.fPos] - offsetX,c5.buffer.f[c5.fPos + 1] - offsetY,c5.buffer.f[c5.fPos + 2],0,Math.PI * 2,true);
			break;
		case 6:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.fPos += 6;
				break;
			case 4:
				data.fPos += 4;
				break;
			case 5:
				data.fPos += 3;
				break;
			case 6:
				data.fPos += 4;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 10:
				data.oPos += 4;
				break;
			case 11:
				break;
			case 12:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 13:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 14:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 15:
				data.fPos += 2;
				break;
			case 16:
				data.fPos += 2;
				break;
			case 17:
				data.oPos += 1;
				break;
			case 18:case 19:
				break;
			default:
			}
			data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
			var this7 = data;
			var c6 = this7;
			x = c6.buffer.f[c6.fPos];
			y = c6.buffer.f[c6.fPos + 1];
			width = c6.buffer.f[c6.fPos + 2];
			height = c6.buffer.f[c6.fPos + 3];
			x -= offsetX;
			y -= offsetY;
			ox = width / 2 * kappa;
			oy = height / 2 * kappa;
			xe = x + width;
			ye = y + height;
			xm = x + width / 2;
			ym = y + height / 2;
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x,ym);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(x,ym - oy,xm - ox,y,xm,y);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xm + ox,y,xe,ym - oy,xe,ym);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xe,ym + oy,xm + ox,ye,xm,ye);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xm - ox,ye,x,ym + oy,x,ym);
			break;
		case 7:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.fPos += 6;
				break;
			case 4:
				data.fPos += 4;
				break;
			case 5:
				data.fPos += 3;
				break;
			case 6:
				data.fPos += 4;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 10:
				data.oPos += 4;
				break;
			case 11:
				break;
			case 12:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 13:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 14:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 15:
				data.fPos += 2;
				break;
			case 16:
				data.fPos += 2;
				break;
			case 17:
				data.oPos += 1;
				break;
			case 18:case 19:
				break;
			default:
			}
			data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
			var this8 = data;
			var c7 = this8;
			optimizationUsed = false;
			if(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill != null && !openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) {
				st = 0;
				sr = 0;
				sb = 0;
				sl = 0;
				canOptimizeMatrix = true;
				if(openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix != null) {
					if(openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.b != 0 || openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.c != 0) {
						canOptimizeMatrix = false;
					} else {
						if(stl == null) {
							stl = openfl_geom_Point.__pool.get();
						}
						if(sbr == null) {
							sbr = openfl_geom_Point.__pool.get();
						}
						stl.setTo(c7.buffer.f[c7.fPos],c7.buffer.f[c7.fPos + 1]);
						var _this = openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix;
						var px = stl.x;
						var py = stl.y;
						stl.x = px * _this.a + py * _this.c + _this.tx;
						stl.y = px * _this.b + py * _this.d + _this.ty;
						sbr.setTo(c7.buffer.f[c7.fPos] + c7.buffer.f[c7.fPos + 2],c7.buffer.f[c7.fPos + 1] + c7.buffer.f[c7.fPos + 3]);
						var _this1 = openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix;
						var px1 = sbr.x;
						var py1 = sbr.y;
						sbr.x = px1 * _this1.a + py1 * _this1.c + _this1.tx;
						sbr.y = px1 * _this1.b + py1 * _this1.d + _this1.ty;
						st = stl.y;
						sl = stl.x;
						sb = sbr.y;
						sr = sbr.x;
					}
				} else {
					st = c7.buffer.f[c7.fPos + 1];
					sl = c7.buffer.f[c7.fPos];
					sb = c7.buffer.f[c7.fPos + 1] + c7.buffer.f[c7.fPos + 3];
					sr = c7.buffer.f[c7.fPos] + c7.buffer.f[c7.fPos + 2];
				}
				if(canOptimizeMatrix && st >= 0 && sl >= 0 && sr <= openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.width && sb <= openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.height) {
					optimizationUsed = true;
					if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) {
						openfl__$internal_renderer_canvas_CanvasGraphics.context.drawImage(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.image.get_src(),sl,st,sr - sl,sb - st,c7.buffer.f[c7.fPos] - offsetX,c7.buffer.f[c7.fPos + 1] - offsetY,c7.buffer.f[c7.fPos + 2],c7.buffer.f[c7.fPos + 3]);
					}
				}
			}
			if(!optimizationUsed) {
				openfl__$internal_renderer_canvas_CanvasGraphics.context.rect(c7.buffer.f[c7.fPos] - offsetX,c7.buffer.f[c7.fPos + 1] - offsetY,c7.buffer.f[c7.fPos + 2],c7.buffer.f[c7.fPos + 3]);
			}
			break;
		case 8:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.fPos += 6;
				break;
			case 4:
				data.fPos += 4;
				break;
			case 5:
				data.fPos += 3;
				break;
			case 6:
				data.fPos += 4;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 10:
				data.oPos += 4;
				break;
			case 11:
				break;
			case 12:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 13:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 14:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 15:
				data.fPos += 2;
				break;
			case 16:
				data.fPos += 2;
				break;
			case 17:
				data.oPos += 1;
				break;
			case 18:case 19:
				break;
			default:
			}
			data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
			var this9 = data;
			var c8 = this9;
			openfl__$internal_renderer_canvas_CanvasGraphics.drawRoundRect(c8.buffer.f[c8.fPos] - offsetX,c8.buffer.f[c8.fPos + 1] - offsetY,c8.buffer.f[c8.fPos + 2],c8.buffer.f[c8.fPos + 3],c8.buffer.f[c8.fPos + 4],c8.buffer.o[c8.oPos]);
			break;
		case 10:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.fPos += 6;
				break;
			case 4:
				data.fPos += 4;
				break;
			case 5:
				data.fPos += 3;
				break;
			case 6:
				data.fPos += 4;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 10:
				data.oPos += 4;
				break;
			case 11:
				break;
			case 12:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 13:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 14:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 15:
				data.fPos += 2;
				break;
			case 16:
				data.fPos += 2;
				break;
			case 17:
				data.oPos += 1;
				break;
			case 18:case 19:
				break;
			default:
			}
			data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES;
			var this10 = data;
			var c9 = this10;
			var v = c9.buffer.o[c9.oPos];
			var ind = c9.buffer.o[c9.oPos + 1];
			var uvt = c9.buffer.o[c9.oPos + 2];
			var pattern = null;
			var colorFill = openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill == null;
			if(colorFill && uvt != null) {
				break _hx_loop1;
			}
			if(!colorFill) {
				if(uvt == null) {
					uvt = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
					var _g2 = 0;
					var _g11 = v.data.get_length() / 2 | 0;
					while(_g2 < _g11) {
						var i = _g2++;
						var x1 = v.data.get(i * 2);
						uvt.data.push(x1 - offsetX / openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.width);
						var x2 = v.data.get(i * 2 + 1);
						uvt.data.push(x2 - offsetY / openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.height);
					}
				}
				var skipT = uvt.data.get_length() != v.data.get_length();
				var normalizedUVT = openfl__$internal_renderer_canvas_CanvasGraphics.normalizeUVT(uvt,skipT);
				var maxUVT = normalizedUVT.max;
				uvt = normalizedUVT.uvt;
				if(maxUVT > 1) {
					pattern = openfl__$internal_renderer_canvas_CanvasGraphics.createTempPatternCanvas(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill,openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat,openfl__$internal_renderer_canvas_CanvasGraphics.bounds.width | 0,openfl__$internal_renderer_canvas_CanvasGraphics.bounds.height | 0);
				} else {
					pattern = openfl__$internal_renderer_canvas_CanvasGraphics.createTempPatternCanvas(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill,openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat,openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.width,openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.height);
				}
			}
			var i1 = 0;
			var l = ind.data.get_length();
			var a_;
			var b_;
			var c_;
			var iax;
			var iay;
			var ibx;
			var iby;
			var icx;
			var icy;
			var x11;
			var y1;
			var x21;
			var y2;
			var x3;
			var y3;
			var uvx1;
			var uvy1;
			var uvx2;
			var uvy2;
			var uvx3;
			var uvy3;
			var denom;
			var t1;
			var t2;
			var t3;
			var t4;
			var dx;
			var dy;
			while(i1 < l) {
				a_ = i1;
				b_ = i1 + 1;
				c_ = i1 + 2;
				iax = ind.data.get(a_) * 2;
				iay = ind.data.get(a_) * 2 + 1;
				ibx = ind.data.get(b_) * 2;
				iby = ind.data.get(b_) * 2 + 1;
				icx = ind.data.get(c_) * 2;
				icy = ind.data.get(c_) * 2 + 1;
				x11 = v.data.get(iax) - offsetX;
				y1 = v.data.get(iay) - offsetY;
				x21 = v.data.get(ibx) - offsetX;
				y2 = v.data.get(iby) - offsetY;
				x3 = v.data.get(icx) - offsetX;
				y3 = v.data.get(icy) - offsetY;
				switch(c9.buffer.o[c9.oPos + 3]) {
				case 0:
					if((x21 - x11) * (y3 - y1) - (y2 - y1) * (x3 - x11) < 0) {
						i1 += 3;
						continue;
					}
					break;
				case 2:
					if(!((x21 - x11) * (y3 - y1) - (y2 - y1) * (x3 - x11) < 0)) {
						i1 += 3;
						continue;
					}
					break;
				default:
				}
				if(colorFill) {
					openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
					openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x11,y1);
					openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x21,y2);
					openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x3,y3);
					openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
					if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) {
						openfl__$internal_renderer_canvas_CanvasGraphics.context.fill(openfl__$internal_renderer_canvas_CanvasGraphics.windingRule);
					}
					i1 += 3;
					continue;
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.context.save();
				openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
				openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x11,y1);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x21,y2);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x3,y3);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
				openfl__$internal_renderer_canvas_CanvasGraphics.context.clip();
				uvx1 = uvt.data.get(iax) * pattern.width;
				uvx2 = uvt.data.get(ibx) * pattern.width;
				uvx3 = uvt.data.get(icx) * pattern.width;
				uvy1 = uvt.data.get(iay) * pattern.height;
				uvy2 = uvt.data.get(iby) * pattern.height;
				uvy3 = uvt.data.get(icy) * pattern.height;
				denom = uvx1 * (uvy3 - uvy2) - uvx2 * uvy3 + uvx3 * uvy2 + (uvx2 - uvx3) * uvy1;
				if(denom == 0) {
					i1 += 3;
					continue;
				}
				t1 = -(uvy1 * (x3 - x21) - uvy2 * x3 + uvy3 * x21 + (uvy2 - uvy3) * x11) / denom;
				t2 = (uvy2 * y3 + uvy1 * (y2 - y3) - uvy3 * y2 + (uvy3 - uvy2) * y1) / denom;
				t3 = (uvx1 * (x3 - x21) - uvx2 * x3 + uvx3 * x21 + (uvx2 - uvx3) * x11) / denom;
				t4 = -(uvx2 * y3 + uvx1 * (y2 - y3) - uvx3 * y2 + (uvx3 - uvx2) * y1) / denom;
				dx = (uvx1 * (uvy3 * x21 - uvy2 * x3) + uvy1 * (uvx2 * x3 - uvx3 * x21) + (uvx3 * uvy2 - uvx2 * uvy3) * x11) / denom;
				dy = (uvx1 * (uvy3 * y2 - uvy2 * y3) + uvy1 * (uvx2 * y3 - uvx3 * y2) + (uvx3 * uvy2 - uvx2 * uvy3) * y1) / denom;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.transform(t1,t2,t3,t4,dx,dy);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.drawImage(pattern,0,0);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.restore();
				i1 += 3;
			}
			break;
		case 12:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.fPos += 6;
				break;
			case 4:
				data.fPos += 4;
				break;
			case 5:
				data.fPos += 3;
				break;
			case 6:
				data.fPos += 4;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 10:
				data.oPos += 4;
				break;
			case 11:
				break;
			case 12:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 13:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 14:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 15:
				data.fPos += 2;
				break;
			case 16:
				data.fPos += 2;
				break;
			case 17:
				data.oPos += 1;
				break;
			case 18:case 19:
				break;
			default:
			}
			data.prev = openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE;
			var this11 = data;
			var c10 = this11;
			if(stroke && openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke) {
				openfl__$internal_renderer_canvas_CanvasGraphics.closePath();
			}
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(positionX - offsetX,positionY - offsetY);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createBitmapFill(c10.buffer.o[c10.oPos],c10.buffer.b[c10.bPos],c10.buffer.b[c10.bPos + 1]);
			openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = true;
			break;
		case 13:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.fPos += 6;
				break;
			case 4:
				data.fPos += 4;
				break;
			case 5:
				data.fPos += 3;
				break;
			case 6:
				data.fPos += 4;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 10:
				data.oPos += 4;
				break;
			case 11:
				break;
			case 12:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 13:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 14:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 15:
				data.fPos += 2;
				break;
			case 16:
				data.fPos += 2;
				break;
			case 17:
				data.oPos += 1;
				break;
			case 18:case 19:
				break;
			default:
			}
			data.prev = openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE;
			var this12 = data;
			var c11 = this12;
			if(stroke && openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke) {
				openfl__$internal_renderer_canvas_CanvasGraphics.closePath();
			}
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(positionX - offsetX,positionY - offsetY);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createGradientPattern(c11.buffer.o[c11.oPos],c11.buffer.ii[c11.iiPos],c11.buffer.ff[c11.ffPos],c11.buffer.ii[c11.iiPos + 1],c11.buffer.o[c11.oPos + 1],c11.buffer.o[c11.oPos + 2],c11.buffer.o[c11.oPos + 3],c11.buffer.f[c11.fPos]);
			openfl__$internal_renderer_canvas_CanvasGraphics.setSmoothing(true);
			openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = true;
			break;
		case 14:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.fPos += 6;
				break;
			case 4:
				data.fPos += 4;
				break;
			case 5:
				data.fPos += 3;
				break;
			case 6:
				data.fPos += 4;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 10:
				data.oPos += 4;
				break;
			case 11:
				break;
			case 12:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 13:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 14:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 15:
				data.fPos += 2;
				break;
			case 16:
				data.fPos += 2;
				break;
			case 17:
				data.oPos += 1;
				break;
			case 18:case 19:
				break;
			default:
			}
			data.prev = openfl__$internal_renderer_DrawCommandType.LINE_STYLE;
			var this13 = data;
			var c12 = this13;
			if(stroke && openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke) {
				openfl__$internal_renderer_canvas_CanvasGraphics.closePath(true);
			}
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(positionX - offsetX,positionY - offsetY);
			if(c12.buffer.o[c12.oPos] == null) {
				openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = false;
			} else {
				openfl__$internal_renderer_canvas_CanvasGraphics.context.lineWidth = c12.buffer.o[c12.oPos] > 0 ? c12.buffer.o[c12.oPos] : 1;
				var tmp1 = c12.buffer.o[c12.oPos + 3] == null ? "round" : openfl_display__$JointStyle_JointStyle_$Impl_$.toString(c12.buffer.o[c12.oPos + 3]).toLowerCase();
				openfl__$internal_renderer_canvas_CanvasGraphics.context.lineJoin = tmp1;
				var tmp2 = c12.buffer.o[c12.oPos + 2] == null ? "round" : c12.buffer.o[c12.oPos + 2] == 0 ? "butt" : openfl_display__$CapsStyle_CapsStyle_$Impl_$.toString(c12.buffer.o[c12.oPos + 2]).toLowerCase();
				openfl__$internal_renderer_canvas_CanvasGraphics.context.lineCap = tmp2;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.miterLimit = c12.buffer.f[c12.fPos + 1];
				if(c12.buffer.f[c12.fPos] == 1) {
					var tmp3 = StringTools.hex(c12.buffer.i[c12.iPos] & 16777215,6);
					openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = "#" + tmp3;
				} else {
					r = (c12.buffer.i[c12.iPos] & 16711680) >>> 16;
					g = (c12.buffer.i[c12.iPos] & 65280) >>> 8;
					b = c12.buffer.i[c12.iPos] & 255;
					openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = "rgba(" + r + ", " + g + ", " + b + ", " + c12.buffer.f[c12.fPos] + ")";
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.setSmoothing(true);
				openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = true;
			}
			break;
		case 15:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.fPos += 6;
				break;
			case 4:
				data.fPos += 4;
				break;
			case 5:
				data.fPos += 3;
				break;
			case 6:
				data.fPos += 4;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 10:
				data.oPos += 4;
				break;
			case 11:
				break;
			case 12:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 13:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 14:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 15:
				data.fPos += 2;
				break;
			case 16:
				data.fPos += 2;
				break;
			case 17:
				data.oPos += 1;
				break;
			case 18:case 19:
				break;
			default:
			}
			data.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
			var this14 = data;
			var c13 = this14;
			openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(c13.buffer.f[c13.fPos] - offsetX,c13.buffer.f[c13.fPos + 1] - offsetY);
			positionX = c13.buffer.f[c13.fPos];
			positionY = c13.buffer.f[c13.fPos + 1];
			if(positionX == startX && positionY == startY) {
				closeGap = true;
			}
			break;
		case 16:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.fPos += 6;
				break;
			case 4:
				data.fPos += 4;
				break;
			case 5:
				data.fPos += 3;
				break;
			case 6:
				data.fPos += 4;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 10:
				data.oPos += 4;
				break;
			case 11:
				break;
			case 12:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 13:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 14:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 15:
				data.fPos += 2;
				break;
			case 16:
				data.fPos += 2;
				break;
			case 17:
				data.oPos += 1;
				break;
			case 18:case 19:
				break;
			default:
			}
			data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
			var this15 = data;
			var c14 = this15;
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(c14.buffer.f[c14.fPos] - offsetX,c14.buffer.f[c14.fPos + 1] - offsetY);
			positionX = c14.buffer.f[c14.fPos];
			positionY = c14.buffer.f[c14.fPos + 1];
			if(setStart) {
				closeGap = true;
			}
			startX = c14.buffer.f[c14.fPos];
			startY = c14.buffer.f[c14.fPos + 1];
			setStart = true;
			break;
		case 18:
			openfl__$internal_renderer_canvas_CanvasGraphics.windingRule = "evenodd";
			break;
		case 19:
			openfl__$internal_renderer_canvas_CanvasGraphics.windingRule = "nonzero";
			break;
		default:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.fPos += 6;
				break;
			case 4:
				data.fPos += 4;
				break;
			case 5:
				data.fPos += 3;
				break;
			case 6:
				data.fPos += 4;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 10:
				data.oPos += 4;
				break;
			case 11:
				break;
			case 12:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 13:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 14:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 15:
				data.fPos += 2;
				break;
			case 16:
				data.fPos += 2;
				break;
			case 17:
				data.oPos += 1;
				break;
			case 18:case 19:
				break;
			default:
			}
			data.prev = type;
		}
	}
	if(stl != null) {
		openfl_geom_Point.__pool.release(stl);
	}
	if(sbr != null) {
		openfl_geom_Point.__pool.release(sbr);
	}
	data.destroy();
	if(stroke && openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke) {
		if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill && closeGap) {
			openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(startX - offsetX,startY - offsetY);
			openfl__$internal_renderer_canvas_CanvasGraphics.closePath(false);
		} else if(closeGap && positionX == startX && positionY == startY) {
			openfl__$internal_renderer_canvas_CanvasGraphics.closePath(false);
		}
		if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) {
			openfl__$internal_renderer_canvas_CanvasGraphics.context.stroke();
		}
	}
	if(!stroke) {
		if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill || openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill != null) {
			openfl__$internal_renderer_canvas_CanvasGraphics.context.translate(-openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x,-openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y);
			if(openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix != null) {
				openfl__$internal_renderer_canvas_CanvasGraphics.context.transform(openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.a,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.b,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.c,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.d,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.tx,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.ty);
				if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) {
					openfl__$internal_renderer_canvas_CanvasGraphics.context.fill(openfl__$internal_renderer_canvas_CanvasGraphics.windingRule);
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.context.transform(openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.a,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.b,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.c,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.d,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.tx,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.ty);
			} else if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) {
				openfl__$internal_renderer_canvas_CanvasGraphics.context.fill(openfl__$internal_renderer_canvas_CanvasGraphics.windingRule);
			}
			openfl__$internal_renderer_canvas_CanvasGraphics.context.translate(openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x,openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
		}
	}
};
openfl__$internal_renderer_canvas_CanvasGraphics.render = function(graphics,pixelRatio,smoothing) {
	graphics.__update();
	var dirty = graphics.__dirty || graphics.__bitmap != null && graphics.__bitmap.__pixelRatio != pixelRatio;
	if(dirty) {
		openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting = false;
		openfl__$internal_renderer_canvas_CanvasGraphics.graphics = graphics;
		openfl__$internal_renderer_canvas_CanvasGraphics.allowSmoothing = smoothing;
		openfl__$internal_renderer_canvas_CanvasGraphics.bounds = graphics.__bounds;
		var width = graphics.__width;
		var height = graphics.__height;
		if(graphics.__bitmap != null) {
			graphics.__bitmap.dispose();
		}
		if(!graphics.__visible || graphics.__commands.get_length() == 0 || openfl__$internal_renderer_canvas_CanvasGraphics.bounds == null || width < 1 || height < 1) {
			graphics.__canvas = null;
			graphics.__context = null;
			graphics.set___bitmap(null);
		} else {
			if(graphics.__canvas == null) {
				graphics.__canvas = window.document.createElement("canvas");
				graphics.__context = graphics.__canvas.getContext("2d");
			}
			openfl__$internal_renderer_canvas_CanvasGraphics.context = graphics.__context;
			var scaledWidth = width * pixelRatio | 0;
			var scaledHeight = height * pixelRatio | 0;
			var canvas = graphics.__canvas;
			if(canvas.width == scaledWidth && canvas.height == scaledHeight) {
				openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
				openfl__$internal_renderer_canvas_CanvasGraphics.context.setTransform(1,0,0,1,0,0);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.clearRect(0,0,scaledWidth,scaledHeight);
			} else {
				canvas.width = scaledWidth;
				canvas.height = scaledHeight;
			}
			var transform = graphics.__renderTransform;
			openfl__$internal_renderer_canvas_CanvasGraphics.context.setTransform(transform.a * pixelRatio,transform.b,transform.c,transform.d * pixelRatio,transform.tx * pixelRatio,transform.ty * pixelRatio);
			openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.clear();
			openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.clear();
			openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
			openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = false;
			openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
			openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat = false;
			var hasLineStyle = false;
			var initStrokeX = 0.0;
			var initStrokeY = 0.0;
			openfl__$internal_renderer_canvas_CanvasGraphics.windingRule = "evenodd";
			var data = new openfl__$internal_renderer_DrawCommandReader(graphics.__commands);
			var _g = 0;
			var _g1 = graphics.__commands.types;
			while(_g < _g1.length) {
				var type = _g1[_g];
				++_g;
				switch(type._hx_index) {
				case 0:case 1:case 2:
					openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
					openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
					if(type == openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL) {
						switch(data.prev._hx_index) {
						case 0:
							data.oPos += 2;
							data.bPos += 2;
							break;
						case 1:
							data.iPos += 1;
							data.fPos += 1;
							break;
						case 2:
							data.oPos += 4;
							data.iiPos += 2;
							data.ffPos += 1;
							data.fPos += 1;
							break;
						case 3:
							data.fPos += 6;
							break;
						case 4:
							data.fPos += 4;
							break;
						case 5:
							data.fPos += 3;
							break;
						case 6:
							data.fPos += 4;
							break;
						case 7:
							data.fPos += 4;
							break;
						case 8:
							data.fPos += 5;
							data.oPos += 1;
							break;
						case 10:
							data.oPos += 4;
							break;
						case 11:
							break;
						case 12:
							data.oPos += 2;
							data.bPos += 2;
							break;
						case 13:
							data.oPos += 4;
							data.iiPos += 2;
							data.ffPos += 1;
							data.fPos += 1;
							break;
						case 14:
							data.oPos += 4;
							data.iPos += 1;
							data.fPos += 2;
							data.bPos += 1;
							break;
						case 15:
							data.fPos += 2;
							break;
						case 16:
							data.fPos += 2;
							break;
						case 17:
							data.oPos += 1;
							break;
						case 18:case 19:
							break;
						default:
						}
						data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
						var this1 = data;
						var c = this1;
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginBitmapFill(c.buffer.o[c.oPos],c.buffer.o[c.oPos + 1],c.buffer.b[c.bPos],c.buffer.b[c.bPos + 1]);
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginBitmapFill(c.buffer.o[c.oPos],c.buffer.o[c.oPos + 1],c.buffer.b[c.bPos],c.buffer.b[c.bPos + 1]);
					} else if(type == openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL) {
						switch(data.prev._hx_index) {
						case 0:
							data.oPos += 2;
							data.bPos += 2;
							break;
						case 1:
							data.iPos += 1;
							data.fPos += 1;
							break;
						case 2:
							data.oPos += 4;
							data.iiPos += 2;
							data.ffPos += 1;
							data.fPos += 1;
							break;
						case 3:
							data.fPos += 6;
							break;
						case 4:
							data.fPos += 4;
							break;
						case 5:
							data.fPos += 3;
							break;
						case 6:
							data.fPos += 4;
							break;
						case 7:
							data.fPos += 4;
							break;
						case 8:
							data.fPos += 5;
							data.oPos += 1;
							break;
						case 10:
							data.oPos += 4;
							break;
						case 11:
							break;
						case 12:
							data.oPos += 2;
							data.bPos += 2;
							break;
						case 13:
							data.oPos += 4;
							data.iiPos += 2;
							data.ffPos += 1;
							data.fPos += 1;
							break;
						case 14:
							data.oPos += 4;
							data.iPos += 1;
							data.fPos += 2;
							data.bPos += 1;
							break;
						case 15:
							data.fPos += 2;
							break;
						case 16:
							data.fPos += 2;
							break;
						case 17:
							data.oPos += 1;
							break;
						case 18:case 19:
							break;
						default:
						}
						data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL;
						var this2 = data;
						var c1 = this2;
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginGradientFill(c1.buffer.o[c1.oPos],c1.buffer.ii[c1.iiPos],c1.buffer.ff[c1.ffPos],c1.buffer.ii[c1.iiPos + 1],c1.buffer.o[c1.oPos + 1],c1.buffer.o[c1.oPos + 2],c1.buffer.o[c1.oPos + 3],c1.buffer.f[c1.fPos]);
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginGradientFill(c1.buffer.o[c1.oPos],c1.buffer.ii[c1.iiPos],c1.buffer.ff[c1.ffPos],c1.buffer.ii[c1.iiPos + 1],c1.buffer.o[c1.oPos + 1],c1.buffer.o[c1.oPos + 2],c1.buffer.o[c1.oPos + 3],c1.buffer.f[c1.fPos]);
					} else {
						switch(data.prev._hx_index) {
						case 0:
							data.oPos += 2;
							data.bPos += 2;
							break;
						case 1:
							data.iPos += 1;
							data.fPos += 1;
							break;
						case 2:
							data.oPos += 4;
							data.iiPos += 2;
							data.ffPos += 1;
							data.fPos += 1;
							break;
						case 3:
							data.fPos += 6;
							break;
						case 4:
							data.fPos += 4;
							break;
						case 5:
							data.fPos += 3;
							break;
						case 6:
							data.fPos += 4;
							break;
						case 7:
							data.fPos += 4;
							break;
						case 8:
							data.fPos += 5;
							data.oPos += 1;
							break;
						case 10:
							data.oPos += 4;
							break;
						case 11:
							break;
						case 12:
							data.oPos += 2;
							data.bPos += 2;
							break;
						case 13:
							data.oPos += 4;
							data.iiPos += 2;
							data.ffPos += 1;
							data.fPos += 1;
							break;
						case 14:
							data.oPos += 4;
							data.iPos += 1;
							data.fPos += 2;
							data.bPos += 1;
							break;
						case 15:
							data.fPos += 2;
							break;
						case 16:
							data.fPos += 2;
							break;
						case 17:
							data.oPos += 1;
							break;
						case 18:case 19:
							break;
						default:
						}
						data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_FILL;
						var this3 = data;
						var c2 = this3;
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginFill(c2.buffer.i[c2.iPos],c2.buffer.f[c2.fPos]);
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginFill(c2.buffer.i[c2.iPos],c2.buffer.f[c2.fPos]);
					}
					break;
				case 3:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.fPos += 6;
						break;
					case 4:
						data.fPos += 4;
						break;
					case 5:
						data.fPos += 3;
						break;
					case 6:
						data.fPos += 4;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 10:
						data.oPos += 4;
						break;
					case 11:
						break;
					case 12:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 13:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 14:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 15:
						data.fPos += 2;
						break;
					case 16:
						data.fPos += 2;
						break;
					case 17:
						data.oPos += 1;
						break;
					case 18:case 19:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
					var this4 = data;
					var c3 = this4;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.cubicCurveTo(c3.buffer.f[c3.fPos],c3.buffer.f[c3.fPos + 1],c3.buffer.f[c3.fPos + 2],c3.buffer.f[c3.fPos + 3],c3.buffer.f[c3.fPos + 4],c3.buffer.f[c3.fPos + 5]);
					if(hasLineStyle) {
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.cubicCurveTo(c3.buffer.f[c3.fPos],c3.buffer.f[c3.fPos + 1],c3.buffer.f[c3.fPos + 2],c3.buffer.f[c3.fPos + 3],c3.buffer.f[c3.fPos + 4],c3.buffer.f[c3.fPos + 5]);
					} else {
						initStrokeX = c3.buffer.f[c3.fPos + 4];
						initStrokeY = c3.buffer.f[c3.fPos + 5];
					}
					break;
				case 4:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.fPos += 6;
						break;
					case 4:
						data.fPos += 4;
						break;
					case 5:
						data.fPos += 3;
						break;
					case 6:
						data.fPos += 4;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 10:
						data.oPos += 4;
						break;
					case 11:
						break;
					case 12:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 13:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 14:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 15:
						data.fPos += 2;
						break;
					case 16:
						data.fPos += 2;
						break;
					case 17:
						data.oPos += 1;
						break;
					case 18:case 19:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
					var this5 = data;
					var c4 = this5;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.curveTo(c4.buffer.f[c4.fPos],c4.buffer.f[c4.fPos + 1],c4.buffer.f[c4.fPos + 2],c4.buffer.f[c4.fPos + 3]);
					if(hasLineStyle) {
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.curveTo(c4.buffer.f[c4.fPos],c4.buffer.f[c4.fPos + 1],c4.buffer.f[c4.fPos + 2],c4.buffer.f[c4.fPos + 3]);
					} else {
						initStrokeX = c4.buffer.f[c4.fPos + 2];
						initStrokeY = c4.buffer.f[c4.fPos + 3];
					}
					break;
				case 5:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.fPos += 6;
						break;
					case 4:
						data.fPos += 4;
						break;
					case 5:
						data.fPos += 3;
						break;
					case 6:
						data.fPos += 4;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 10:
						data.oPos += 4;
						break;
					case 11:
						break;
					case 12:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 13:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 14:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 15:
						data.fPos += 2;
						break;
					case 16:
						data.fPos += 2;
						break;
					case 17:
						data.oPos += 1;
						break;
					case 18:case 19:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
					var this6 = data;
					var c5 = this6;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawCircle(c5.buffer.f[c5.fPos],c5.buffer.f[c5.fPos + 1],c5.buffer.f[c5.fPos + 2]);
					if(hasLineStyle) {
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawCircle(c5.buffer.f[c5.fPos],c5.buffer.f[c5.fPos + 1],c5.buffer.f[c5.fPos + 2]);
					}
					break;
				case 6:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.fPos += 6;
						break;
					case 4:
						data.fPos += 4;
						break;
					case 5:
						data.fPos += 3;
						break;
					case 6:
						data.fPos += 4;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 10:
						data.oPos += 4;
						break;
					case 11:
						break;
					case 12:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 13:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 14:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 15:
						data.fPos += 2;
						break;
					case 16:
						data.fPos += 2;
						break;
					case 17:
						data.oPos += 1;
						break;
					case 18:case 19:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
					var this7 = data;
					var c6 = this7;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawEllipse(c6.buffer.f[c6.fPos],c6.buffer.f[c6.fPos + 1],c6.buffer.f[c6.fPos + 2],c6.buffer.f[c6.fPos + 3]);
					if(hasLineStyle) {
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawEllipse(c6.buffer.f[c6.fPos],c6.buffer.f[c6.fPos + 1],c6.buffer.f[c6.fPos + 2],c6.buffer.f[c6.fPos + 3]);
					}
					break;
				case 7:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.fPos += 6;
						break;
					case 4:
						data.fPos += 4;
						break;
					case 5:
						data.fPos += 3;
						break;
					case 6:
						data.fPos += 4;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 10:
						data.oPos += 4;
						break;
					case 11:
						break;
					case 12:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 13:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 14:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 15:
						data.fPos += 2;
						break;
					case 16:
						data.fPos += 2;
						break;
					case 17:
						data.oPos += 1;
						break;
					case 18:case 19:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
					var this8 = data;
					var c7 = this8;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawRect(c7.buffer.f[c7.fPos],c7.buffer.f[c7.fPos + 1],c7.buffer.f[c7.fPos + 2],c7.buffer.f[c7.fPos + 3]);
					if(hasLineStyle) {
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawRect(c7.buffer.f[c7.fPos],c7.buffer.f[c7.fPos + 1],c7.buffer.f[c7.fPos + 2],c7.buffer.f[c7.fPos + 3]);
					}
					break;
				case 8:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.fPos += 6;
						break;
					case 4:
						data.fPos += 4;
						break;
					case 5:
						data.fPos += 3;
						break;
					case 6:
						data.fPos += 4;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 10:
						data.oPos += 4;
						break;
					case 11:
						break;
					case 12:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 13:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 14:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 15:
						data.fPos += 2;
						break;
					case 16:
						data.fPos += 2;
						break;
					case 17:
						data.oPos += 1;
						break;
					case 18:case 19:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
					var this9 = data;
					var c8 = this9;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawRoundRect(c8.buffer.f[c8.fPos],c8.buffer.f[c8.fPos + 1],c8.buffer.f[c8.fPos + 2],c8.buffer.f[c8.fPos + 3],c8.buffer.f[c8.fPos + 4],c8.buffer.o[c8.oPos]);
					if(hasLineStyle) {
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawRoundRect(c8.buffer.f[c8.fPos],c8.buffer.f[c8.fPos + 1],c8.buffer.f[c8.fPos + 2],c8.buffer.f[c8.fPos + 3],c8.buffer.f[c8.fPos + 4],c8.buffer.o[c8.oPos]);
					}
					break;
				case 10:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.fPos += 6;
						break;
					case 4:
						data.fPos += 4;
						break;
					case 5:
						data.fPos += 3;
						break;
					case 6:
						data.fPos += 4;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 10:
						data.oPos += 4;
						break;
					case 11:
						break;
					case 12:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 13:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 14:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 15:
						data.fPos += 2;
						break;
					case 16:
						data.fPos += 2;
						break;
					case 17:
						data.oPos += 1;
						break;
					case 18:case 19:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES;
					var this10 = data;
					var c9 = this10;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawTriangles(c9.buffer.o[c9.oPos],c9.buffer.o[c9.oPos + 1],c9.buffer.o[c9.oPos + 2],c9.buffer.o[c9.oPos + 3]);
					break;
				case 11:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.fPos += 6;
						break;
					case 4:
						data.fPos += 4;
						break;
					case 5:
						data.fPos += 3;
						break;
					case 6:
						data.fPos += 4;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 10:
						data.oPos += 4;
						break;
					case 11:
						break;
					case 12:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 13:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 14:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 15:
						data.fPos += 2;
						break;
					case 16:
						data.fPos += 2;
						break;
					case 17:
						data.oPos += 1;
						break;
					case 18:case 19:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.END_FILL;
					var this11 = data;
					openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
					openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
					openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
					hasLineStyle = false;
					openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
					initStrokeX = 0;
					initStrokeY = 0;
					break;
				case 12:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.fPos += 6;
						break;
					case 4:
						data.fPos += 4;
						break;
					case 5:
						data.fPos += 3;
						break;
					case 6:
						data.fPos += 4;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 10:
						data.oPos += 4;
						break;
					case 11:
						break;
					case 12:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 13:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 14:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 15:
						data.fPos += 2;
						break;
					case 16:
						data.fPos += 2;
						break;
					case 17:
						data.oPos += 1;
						break;
					case 18:case 19:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE;
					var this12 = data;
					var c10 = this12;
					if(!hasLineStyle && (initStrokeX != 0 || initStrokeY != 0)) {
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.moveTo(initStrokeX,initStrokeY);
						initStrokeX = 0;
						initStrokeY = 0;
					}
					hasLineStyle = true;
					openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineBitmapStyle(c10.buffer.o[c10.oPos],c10.buffer.o[c10.oPos + 1],c10.buffer.b[c10.bPos],c10.buffer.b[c10.bPos + 1]);
					break;
				case 13:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.fPos += 6;
						break;
					case 4:
						data.fPos += 4;
						break;
					case 5:
						data.fPos += 3;
						break;
					case 6:
						data.fPos += 4;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 10:
						data.oPos += 4;
						break;
					case 11:
						break;
					case 12:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 13:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 14:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 15:
						data.fPos += 2;
						break;
					case 16:
						data.fPos += 2;
						break;
					case 17:
						data.oPos += 1;
						break;
					case 18:case 19:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE;
					var this13 = data;
					var c11 = this13;
					if(!hasLineStyle && (initStrokeX != 0 || initStrokeY != 0)) {
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.moveTo(initStrokeX,initStrokeY);
						initStrokeX = 0;
						initStrokeY = 0;
					}
					hasLineStyle = true;
					openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineGradientStyle(c11.buffer.o[c11.oPos],c11.buffer.ii[c11.iiPos],c11.buffer.ff[c11.ffPos],c11.buffer.ii[c11.iiPos + 1],c11.buffer.o[c11.oPos + 1],c11.buffer.o[c11.oPos + 2],c11.buffer.o[c11.oPos + 3],c11.buffer.f[c11.fPos]);
					break;
				case 14:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.fPos += 6;
						break;
					case 4:
						data.fPos += 4;
						break;
					case 5:
						data.fPos += 3;
						break;
					case 6:
						data.fPos += 4;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 10:
						data.oPos += 4;
						break;
					case 11:
						break;
					case 12:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 13:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 14:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 15:
						data.fPos += 2;
						break;
					case 16:
						data.fPos += 2;
						break;
					case 17:
						data.oPos += 1;
						break;
					case 18:case 19:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.LINE_STYLE;
					var this14 = data;
					var c12 = this14;
					if(!hasLineStyle && c12.buffer.o[c12.oPos] != null) {
						if(initStrokeX != 0 || initStrokeY != 0) {
							openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.moveTo(initStrokeX,initStrokeY);
							initStrokeX = 0;
							initStrokeY = 0;
						}
					}
					hasLineStyle = c12.buffer.o[c12.oPos] != null;
					openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineStyle(c12.buffer.o[c12.oPos],c12.buffer.i[c12.iPos],c12.buffer.f[c12.fPos],c12.buffer.b[c12.bPos],c12.buffer.o[c12.oPos + 1],c12.buffer.o[c12.oPos + 2],c12.buffer.o[c12.oPos + 3],c12.buffer.f[c12.fPos + 1]);
					break;
				case 15:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.fPos += 6;
						break;
					case 4:
						data.fPos += 4;
						break;
					case 5:
						data.fPos += 3;
						break;
					case 6:
						data.fPos += 4;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 10:
						data.oPos += 4;
						break;
					case 11:
						break;
					case 12:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 13:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 14:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 15:
						data.fPos += 2;
						break;
					case 16:
						data.fPos += 2;
						break;
					case 17:
						data.oPos += 1;
						break;
					case 18:case 19:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
					var this15 = data;
					var c13 = this15;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.lineTo(c13.buffer.f[c13.fPos],c13.buffer.f[c13.fPos + 1]);
					if(hasLineStyle) {
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineTo(c13.buffer.f[c13.fPos],c13.buffer.f[c13.fPos + 1]);
					} else {
						initStrokeX = c13.buffer.f[c13.fPos];
						initStrokeY = c13.buffer.f[c13.fPos + 1];
					}
					break;
				case 16:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.fPos += 6;
						break;
					case 4:
						data.fPos += 4;
						break;
					case 5:
						data.fPos += 3;
						break;
					case 6:
						data.fPos += 4;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 10:
						data.oPos += 4;
						break;
					case 11:
						break;
					case 12:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 13:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 14:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 15:
						data.fPos += 2;
						break;
					case 16:
						data.fPos += 2;
						break;
					case 17:
						data.oPos += 1;
						break;
					case 18:case 19:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
					var this16 = data;
					var c14 = this16;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.moveTo(c14.buffer.f[c14.fPos],c14.buffer.f[c14.fPos + 1]);
					if(hasLineStyle) {
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.moveTo(c14.buffer.f[c14.fPos],c14.buffer.f[c14.fPos + 1]);
					} else {
						initStrokeX = c14.buffer.f[c14.fPos];
						initStrokeY = c14.buffer.f[c14.fPos + 1];
					}
					break;
				case 18:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.fPos += 6;
						break;
					case 4:
						data.fPos += 4;
						break;
					case 5:
						data.fPos += 3;
						break;
					case 6:
						data.fPos += 4;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 10:
						data.oPos += 4;
						break;
					case 11:
						break;
					case 12:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 13:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 14:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 15:
						data.fPos += 2;
						break;
					case 16:
						data.fPos += 2;
						break;
					case 17:
						data.oPos += 1;
						break;
					case 18:case 19:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.WINDING_EVEN_ODD;
					var this17 = data;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.windingEvenOdd();
					openfl__$internal_renderer_canvas_CanvasGraphics.windingRule = "evenodd";
					break;
				case 19:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.fPos += 6;
						break;
					case 4:
						data.fPos += 4;
						break;
					case 5:
						data.fPos += 3;
						break;
					case 6:
						data.fPos += 4;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 10:
						data.oPos += 4;
						break;
					case 11:
						break;
					case 12:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 13:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 14:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 15:
						data.fPos += 2;
						break;
					case 16:
						data.fPos += 2;
						break;
					case 17:
						data.oPos += 1;
						break;
					case 18:case 19:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.WINDING_NON_ZERO;
					var this18 = data;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.windingNonZero();
					openfl__$internal_renderer_canvas_CanvasGraphics.windingRule = "nonzero";
					break;
				default:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.fPos += 6;
						break;
					case 4:
						data.fPos += 4;
						break;
					case 5:
						data.fPos += 3;
						break;
					case 6:
						data.fPos += 4;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 10:
						data.oPos += 4;
						break;
					case 11:
						break;
					case 12:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 13:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 14:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 15:
						data.fPos += 2;
						break;
					case 16:
						data.fPos += 2;
						break;
					case 17:
						data.oPos += 1;
						break;
					case 18:case 19:
						break;
					default:
					}
					data.prev = type;
				}
			}
			if(openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.get_length() > 0) {
				openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
			}
			if(openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.get_length() > 0) {
				openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
			}
			data.destroy();
			graphics.set___bitmap(openfl_display_BitmapData.fromCanvas(graphics.__canvas));
			graphics.__bitmap.__pixelRatio = pixelRatio;
		}
		graphics.set___dirty(false);
	}
};
openfl__$internal_renderer_canvas_CanvasGraphics.renderMask = function(graphics,context) {
	if(graphics.__commands.get_length() != 0) {
		openfl__$internal_renderer_canvas_CanvasGraphics.context = context;
		var positionX = 0.0;
		var positionY = 0.0;
		var offsetX = 0;
		var offsetY = 0;
		var data = new openfl__$internal_renderer_DrawCommandReader(graphics.__commands);
		var x;
		var y;
		var width;
		var height;
		var kappa = .5522848;
		var ox;
		var oy;
		var xe;
		var ye;
		var xm;
		var ym;
		var _g = 0;
		var _g1 = graphics.__commands.types;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type._hx_index) {
			case 3:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
				var this1 = data;
				var c = this1;
				context.bezierCurveTo(c.buffer.f[c.fPos] - offsetX,c.buffer.f[c.fPos + 1] - offsetY,c.buffer.f[c.fPos + 2] - offsetX,c.buffer.f[c.fPos + 3] - offsetY,c.buffer.f[c.fPos + 4] - offsetX,c.buffer.f[c.fPos + 5] - offsetY);
				positionX = c.buffer.f[c.fPos + 4];
				positionY = c.buffer.f[c.fPos + 5];
				break;
			case 4:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
				var this2 = data;
				var c1 = this2;
				context.quadraticCurveTo(c1.buffer.f[c1.fPos] - offsetX,c1.buffer.f[c1.fPos + 1] - offsetY,c1.buffer.f[c1.fPos + 2] - offsetX,c1.buffer.f[c1.fPos + 3] - offsetY);
				positionX = c1.buffer.f[c1.fPos + 2];
				positionY = c1.buffer.f[c1.fPos + 3];
				break;
			case 5:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
				var this3 = data;
				var c2 = this3;
				context.arc(c2.buffer.f[c2.fPos] - offsetX,c2.buffer.f[c2.fPos + 1] - offsetY,c2.buffer.f[c2.fPos + 2],0,Math.PI * 2,true);
				break;
			case 6:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
				var this4 = data;
				var c3 = this4;
				x = c3.buffer.f[c3.fPos];
				y = c3.buffer.f[c3.fPos + 1];
				width = c3.buffer.f[c3.fPos + 2];
				height = c3.buffer.f[c3.fPos + 3];
				x -= offsetX;
				y -= offsetY;
				ox = width / 2 * kappa;
				oy = height / 2 * kappa;
				xe = x + width;
				ye = y + height;
				xm = x + width / 2;
				ym = y + height / 2;
				context.moveTo(x,ym);
				context.bezierCurveTo(x,ym - oy,xm - ox,y,xm,y);
				context.bezierCurveTo(xm + ox,y,xe,ym - oy,xe,ym);
				context.bezierCurveTo(xe,ym + oy,xm + ox,ye,xm,ye);
				context.bezierCurveTo(xm - ox,ye,x,ym + oy,x,ym);
				break;
			case 7:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
				var this5 = data;
				var c4 = this5;
				context.rect(c4.buffer.f[c4.fPos] - offsetX,c4.buffer.f[c4.fPos + 1] - offsetY,c4.buffer.f[c4.fPos + 2],c4.buffer.f[c4.fPos + 3]);
				break;
			case 8:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
				var this6 = data;
				var c5 = this6;
				openfl__$internal_renderer_canvas_CanvasGraphics.drawRoundRect(c5.buffer.f[c5.fPos] - offsetX,c5.buffer.f[c5.fPos + 1] - offsetY,c5.buffer.f[c5.fPos + 2],c5.buffer.f[c5.fPos + 3],c5.buffer.f[c5.fPos + 4],c5.buffer.o[c5.oPos]);
				break;
			case 15:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
				var this7 = data;
				var c6 = this7;
				context.lineTo(c6.buffer.f[c6.fPos] - offsetX,c6.buffer.f[c6.fPos + 1] - offsetY);
				positionX = c6.buffer.f[c6.fPos];
				positionY = c6.buffer.f[c6.fPos + 1];
				break;
			case 16:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
				var this8 = data;
				var c7 = this8;
				context.moveTo(c7.buffer.f[c7.fPos] - offsetX,c7.buffer.f[c7.fPos + 1] - offsetY);
				positionX = c7.buffer.f[c7.fPos];
				positionY = c7.buffer.f[c7.fPos + 1];
				break;
			default:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = type;
			}
		}
		data.destroy();
	}
};
openfl__$internal_renderer_canvas_CanvasGraphics.setSmoothing = function(smooth) {
	var context = openfl__$internal_renderer_canvas_CanvasGraphics.context;
	var enabled = openfl__$internal_renderer_canvas_CanvasGraphics.allowSmoothing && smooth;
	context.mozImageSmoothingEnabled = enabled;
	context.msImageSmoothingEnabled = enabled;
	context.imageSmoothingEnabled = enabled;
};
var openfl__$internal_renderer_canvas_CanvasMaskManager = function(renderSession) {
	this.renderSession = renderSession;
};
$hxClasses["openfl._internal.renderer.canvas.CanvasMaskManager"] = openfl__$internal_renderer_canvas_CanvasMaskManager;
openfl__$internal_renderer_canvas_CanvasMaskManager.__name__ = "openfl._internal.renderer.canvas.CanvasMaskManager";
openfl__$internal_renderer_canvas_CanvasMaskManager.prototype = {
	renderSession: null
	,pushMask: function(mask) {
		var context = this.renderSession.context;
		context.save();
		var transform = mask.__renderTransform;
		var pixelRatio = this.renderSession.pixelRatio;
		context.setTransform(transform.a * pixelRatio,transform.b,transform.c,transform.d * pixelRatio,transform.tx * pixelRatio,transform.ty * pixelRatio);
		context.beginPath();
		mask.__renderCanvasMask(this.renderSession);
		context.clip();
	}
	,pushObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(handleScrollRect && object.__scrollRect != null) {
			this.pushRect(object.__scrollRect,object.__renderTransform);
		}
		if(!object.__cacheBitmapRender && object.__mask != null) {
			this.pushMask(object.__mask);
		}
	}
	,pushRect: function(rect,transform) {
		var context = this.renderSession.context;
		context.save();
		var pixelRatio = this.renderSession.pixelRatio;
		context.setTransform(transform.a * pixelRatio,transform.b,transform.c,transform.d * pixelRatio,transform.tx * pixelRatio,transform.ty * pixelRatio);
		context.beginPath();
		context.rect(rect.x,rect.y,rect.width,rect.height);
		context.clip();
	}
	,popMask: function() {
		this.renderSession.context.restore();
	}
	,popObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(!object.__cacheBitmapRender && object.__mask != null) {
			this.popMask();
		}
		if(handleScrollRect && object.__scrollRect != null) {
			this.popRect();
		}
	}
	,popRect: function() {
		this.renderSession.context.restore();
	}
	,__class__: openfl__$internal_renderer_canvas_CanvasMaskManager
};
var openfl__$internal_renderer_canvas_CanvasRenderSession = function(context,clearRenderDirty,pixelRatio,allowSmoothing) {
	this.context = context;
	this.clearRenderDirty = clearRenderDirty;
	this.pixelRatio = pixelRatio;
	this.allowSmoothing = allowSmoothing;
	this.blendModeManager = new openfl__$internal_renderer_canvas_CanvasBlendModeManager(context);
	this.maskManager = new openfl__$internal_renderer_canvas_CanvasMaskManager(this);
};
$hxClasses["openfl._internal.renderer.canvas.CanvasRenderSession"] = openfl__$internal_renderer_canvas_CanvasRenderSession;
openfl__$internal_renderer_canvas_CanvasRenderSession.__name__ = "openfl._internal.renderer.canvas.CanvasRenderSession";
openfl__$internal_renderer_canvas_CanvasRenderSession.prototype = {
	context: null
	,clearRenderDirty: null
	,pixelRatio: null
	,allowSmoothing: null
	,blendModeManager: null
	,maskManager: null
	,__class__: openfl__$internal_renderer_canvas_CanvasRenderSession
};
var openfl__$internal_renderer_canvas_CanvasSmoothing = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasSmoothing"] = openfl__$internal_renderer_canvas_CanvasSmoothing;
openfl__$internal_renderer_canvas_CanvasSmoothing.__name__ = "openfl._internal.renderer.canvas.CanvasSmoothing";
openfl__$internal_renderer_canvas_CanvasSmoothing.setEnabled = function(context,enabled) {
	context.mozImageSmoothingEnabled = enabled;
	context.msImageSmoothingEnabled = enabled;
	context.imageSmoothingEnabled = enabled;
};
var openfl__$internal_renderer_canvas_CanvasTextField = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasTextField"] = openfl__$internal_renderer_canvas_CanvasTextField;
openfl__$internal_renderer_canvas_CanvasTextField.__name__ = "openfl._internal.renderer.canvas.CanvasTextField";
openfl__$internal_renderer_canvas_CanvasTextField.render = function(textField,transform,pixelRatio,smoothing) {
	var textEngine = textField.__textEngine;
	var bounds = textEngine.bounds;
	var graphics = textField.__graphics;
	if(textField.__dirty) {
		textField.__updateLayout();
		if(graphics.__bounds == null) {
			graphics.__bounds = new openfl_geom_Rectangle();
		}
		graphics.__bounds.copyFrom(bounds);
	}
	graphics.__update();
	var dirty = textField.__dirty || graphics.__dirty || graphics.__bitmap != null && graphics.__bitmap.__pixelRatio != pixelRatio;
	if(dirty) {
		var width = graphics.__width;
		var height = graphics.__height;
		if(graphics.__bitmap != null) {
			graphics.__bitmap.dispose();
		}
		if((textEngine.text == null || textEngine.text == "") && !textEngine.background && !textEngine.border && !textEngine.__hasFocus && (textEngine.type != 1 || !textEngine.selectable) || (textEngine.width <= 0 || textEngine.height <= 0) && textEngine.autoSize != 2) {
			textField.__graphics.__canvas = null;
			textField.__graphics.__context = null;
			textField.__graphics.set___bitmap(null);
			textField.__graphics.set___dirty(false);
			textField.__dirty = false;
		} else {
			if(textField.__graphics.__canvas == null) {
				var tmp = window.document.createElement("canvas");
				textField.__graphics.__canvas = tmp;
				var tmp1 = textField.__graphics.__canvas.getContext("2d",null);
				textField.__graphics.__context = tmp1;
			}
			var context = graphics.__context;
			var transform1 = graphics.__renderTransform;
			graphics.__canvas.width = width * pixelRatio | 0;
			graphics.__canvas.height = height * pixelRatio | 0;
			context.setTransform(transform1.a * pixelRatio,transform1.b,transform1.c,transform1.d * pixelRatio,transform1.tx * pixelRatio,transform1.ty * pixelRatio);
			if(textEngine.text != null && textEngine.text != "" || textEngine.__hasFocus) {
				var text = textEngine.text;
				if(!smoothing || textEngine.antiAliasType == 0 && textEngine.sharpness == 400) {
					context.mozImageSmoothingEnabled = false;
					context.msImageSmoothingEnabled = false;
					context.imageSmoothingEnabled = false;
				} else {
					context.mozImageSmoothingEnabled = true;
					context.msImageSmoothingEnabled = true;
					context.imageSmoothingEnabled = true;
				}
				if(textEngine.border || textEngine.background) {
					context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1);
					if(textEngine.background) {
						context.fillStyle = "#" + StringTools.hex(textEngine.backgroundColor & 16777215,6);
						context.fill();
					}
					if(textEngine.border) {
						context.lineWidth = 1;
						context.strokeStyle = "#" + StringTools.hex(textEngine.borderColor & 16777215,6);
						context.stroke();
					}
				}
				context.textBaseline = "bottom";
				context.textAlign = "start";
				var scrollX = -textField.get_scrollH();
				var scrollY = 0.0;
				var _g = 0;
				var _g1 = textField.get_scrollV() - 1;
				while(_g < _g1) {
					var i = _g++;
					scrollY -= textEngine.lineHeights.data.get(i);
				}
				var advance;
				var group = textEngine.layoutGroups.data.iterator();
				while(group.hasNext()) {
					var group1 = group.next();
					if(group1.lineIndex < textField.get_scrollV() - 1) {
						continue;
					}
					if(group1.lineIndex > textEngine.bottomScrollV - 1) {
						break;
					}
					if(group1.format.underline) {
						context.beginPath();
						context.strokeStyle = "#000000";
						context.lineWidth = .5;
						var x = group1.offsetX + scrollX;
						var y = group1.offsetY + scrollY + group1.ascent;
						context.moveTo(x,y);
						context.lineTo(x + group1.width,y);
						context.stroke();
					}
					context.font = openfl__$internal_text_TextEngine.getFont(group1.format);
					context.fillStyle = "#" + StringTools.hex(group1.format.color & 16777215,6);
					var offsetY = group1.format.size * 1.185;
					context.fillText(_$UnicodeString_UnicodeString_$Impl_$.substring(text,group1.startIndex,group1.endIndex),group1.offsetX + scrollX,group1.offsetY + offsetY + scrollY);
					if(textField.__caretIndex > -1 && textEngine.selectable) {
						if(textField.__selectionIndex == textField.__caretIndex) {
							if(textField.__showCursor && group1.startIndex <= textField.__caretIndex && group1.endIndex >= textField.__caretIndex) {
								advance = 0.0;
								var _g3 = 0;
								var _g4 = textField.__caretIndex - group1.startIndex;
								while(_g3 < _g4) {
									var i1 = _g3++;
									if(group1.positions.length <= i1) {
										break;
									}
									advance += group1.positions[i1];
								}
								var scrollY1 = 0.0;
								var _g5 = textField.get_scrollV();
								var _g6 = group1.lineIndex + 1;
								while(_g5 < _g6) {
									var i2 = _g5++;
									scrollY1 += textEngine.lineHeights.data.get(i2 - 1);
								}
								context.beginPath();
								context.strokeStyle = "#" + StringTools.hex(group1.format.color & 16777215,6);
								context.moveTo(group1.offsetX + advance - textField.get_scrollH(),scrollY1 + 2);
								context.lineWidth = 1;
								context.lineTo(group1.offsetX + advance - textField.get_scrollH(),scrollY1 + openfl__$internal_text_TextEngine.getFormatHeight(textField.get_defaultTextFormat()) - 1);
								context.stroke();
								context.closePath();
							}
						} else if(group1.startIndex <= textField.__caretIndex && group1.endIndex >= textField.__caretIndex || group1.startIndex <= textField.__selectionIndex && group1.endIndex >= textField.__selectionIndex || group1.startIndex > textField.__caretIndex && group1.endIndex < textField.__selectionIndex || group1.startIndex > textField.__selectionIndex && group1.endIndex < textField.__caretIndex) {
							var selectionStart = Math.min(textField.__selectionIndex,textField.__caretIndex) | 0;
							var selectionEnd = Math.max(textField.__selectionIndex,textField.__caretIndex) | 0;
							if(group1.startIndex > selectionStart) {
								selectionStart = group1.startIndex;
							}
							if(group1.endIndex < selectionEnd) {
								selectionEnd = group1.endIndex;
							}
							var end;
							var start = textField.getCharBoundaries(selectionStart);
							if(selectionEnd >= _$UnicodeString_UnicodeString_$Impl_$.get_length(textEngine.text)) {
								end = textField.getCharBoundaries(_$UnicodeString_UnicodeString_$Impl_$.get_length(textEngine.text) - 1);
								end.x += end.width + 2;
							} else {
								end = textField.getCharBoundaries(selectionEnd);
							}
							if(start != null && end != null) {
								context.fillStyle = "#000000";
								context.fillRect(start.x + scrollX,start.y + scrollY,end.x - start.x,group1.height);
								context.fillStyle = "#FFFFFF";
								context.fillText(_$UnicodeString_UnicodeString_$Impl_$.substring(text,selectionStart,selectionEnd),scrollX + start.x,group1.offsetY + offsetY + scrollY);
							}
						}
					}
				}
			} else {
				if(textEngine.border || textEngine.background) {
					if(textEngine.border) {
						context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1);
					} else {
						context.rect(0,0,bounds.width,bounds.height);
					}
					if(textEngine.background) {
						context.fillStyle = "#" + StringTools.hex(textEngine.backgroundColor & 16777215,6);
						context.fill();
					}
					if(textEngine.border) {
						context.lineWidth = 1;
						context.lineCap = "square";
						context.strokeStyle = "#" + StringTools.hex(textEngine.borderColor & 16777215,6);
						context.stroke();
					}
				}
				if(textField.__caretIndex > -1 && textEngine.selectable && textField.__showCursor) {
					var scrollX1 = -textField.get_scrollH();
					var scrollY2 = 0.0;
					var _g2 = 0;
					var _g11 = textField.get_scrollV() - 1;
					while(_g2 < _g11) {
						var i3 = _g2++;
						scrollY2 += textEngine.lineHeights.data.get(i3);
					}
					context.beginPath();
					context.strokeStyle = "#" + StringTools.hex(textField.get_defaultTextFormat().color & 16777215,6);
					context.moveTo(scrollX1 + 2.5,scrollY2 + 2.5);
					context.lineWidth = 1;
					context.lineTo(scrollX1 + 2.5,scrollY2 + openfl__$internal_text_TextEngine.getFormatHeight(textField.get_defaultTextFormat()) - 1);
					context.stroke();
					context.closePath();
				}
			}
			graphics.set___bitmap(openfl_display_BitmapData.fromCanvas(textField.__graphics.__canvas));
			graphics.__bitmap.__pixelRatio = pixelRatio;
			graphics.__visible = true;
			textField.__dirty = false;
			graphics.set___dirty(false);
		}
	}
};
var openfl__$internal_renderer_canvas_CanvasVideo = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasVideo"] = openfl__$internal_renderer_canvas_CanvasVideo;
openfl__$internal_renderer_canvas_CanvasVideo.__name__ = "openfl._internal.renderer.canvas.CanvasVideo";
openfl__$internal_renderer_canvas_CanvasVideo.render = function(video,renderSession) {
	if(!video.__renderable || video.__worldAlpha <= 0 || video.__stream == null) {
		return;
	}
	var context = renderSession.context;
	if(video.__stream.__video != null) {
		renderSession.blendModeManager.setBlendMode(video.__worldBlendMode);
		renderSession.maskManager.pushObject(video);
		context.globalAlpha = video.__worldAlpha;
		var transform = video.__worldTransform;
		var scrollRect = video.__scrollRect;
		var smoothing = video.smoothing;
		var pixelRatio = renderSession.pixelRatio;
		context.setTransform(transform.a * pixelRatio,transform.b,transform.c,transform.d * pixelRatio,transform.tx * pixelRatio,transform.ty * pixelRatio);
		if(!smoothing) {
			context.mozImageSmoothingEnabled = false;
			context.msImageSmoothingEnabled = false;
			context.imageSmoothingEnabled = false;
		}
		if(scrollRect == null) {
			context.drawImage(video.__stream.__video,0,0,video.get_width(),video.get_height());
		} else {
			context.drawImage(video.__stream.__video,scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height,scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height);
		}
		if(!smoothing) {
			context.mozImageSmoothingEnabled = true;
			context.msImageSmoothingEnabled = true;
			context.imageSmoothingEnabled = true;
		}
		renderSession.maskManager.popObject(video);
	}
};
var openfl__$internal_renderer_opengl_GLDisplayObject = function() { };
$hxClasses["openfl._internal.renderer.opengl.GLDisplayObject"] = openfl__$internal_renderer_opengl_GLDisplayObject;
openfl__$internal_renderer_opengl_GLDisplayObject.__name__ = "openfl._internal.renderer.opengl.GLDisplayObject";
openfl__$internal_renderer_opengl_GLDisplayObject.render = function(displayObject,renderSession) {
	if(displayObject.opaqueBackground == null && displayObject.__graphics == null) {
		return;
	}
	if(!displayObject.__renderable || displayObject.__worldAlpha <= 0) {
		return;
	}
	var tmp = displayObject.opaqueBackground != null && !displayObject.__cacheBitmapRender && displayObject.get_width() > 0 && displayObject.get_height() > 0;
	if(displayObject.__graphics != null) {
		var graphics = displayObject.__graphics;
		openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderSession.pixelRatio,renderSession.allowSmoothing);
		if(graphics.__bitmap != null && graphics.__visible) {
			renderSession.maskManager.pushObject(displayObject);
			renderSession.batcher.render(graphics.__getBatchQuad(renderSession,displayObject.__worldAlpha,displayObject.__worldColorTransform,displayObject.__worldBlendMode));
			renderSession.maskManager.popObject(displayObject);
		}
	}
};
openfl__$internal_renderer_opengl_GLDisplayObject.renderMask = function(displayObject,renderSession) {
	if(displayObject.opaqueBackground == null && displayObject.__graphics == null) {
		return;
	}
	var tmp = displayObject.opaqueBackground != null && !displayObject.__cacheBitmapRender && displayObject.get_width() > 0 && displayObject.get_height() > 0;
	var graphics = displayObject.__graphics;
	if(graphics != null) {
		openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderSession.pixelRatio,renderSession.allowSmoothing);
		if(graphics.__bitmap != null) {
			renderSession.renderMask(graphics.__bitmap,renderSession.allowSmoothing,graphics.__worldTransform,false);
		}
	}
};
var openfl__$internal_renderer_opengl_GLRenderSession = function(renderer,pixelRatio) {
	this.renderer = renderer;
	this.pixelRatio = pixelRatio;
	this.maskManager = new openfl__$internal_renderer_opengl_MaskManager(this);
	this.batcher = new openfl__$internal_renderer_opengl_batcher_BatchRenderer(this.maskManager,4096);
	this.allowSmoothing = true;
};
$hxClasses["openfl._internal.renderer.opengl.GLRenderSession"] = openfl__$internal_renderer_opengl_GLRenderSession;
openfl__$internal_renderer_opengl_GLRenderSession.__name__ = "openfl._internal.renderer.opengl.GLRenderSession";
openfl__$internal_renderer_opengl_GLRenderSession.prototype = {
	allowSmoothing: null
	,forceSmoothing: null
	,pixelRatio: null
	,g4: null
	,batcher: null
	,renderer: null
	,maskManager: null
	,renderMask: function(bitmapData,smoothing,transform,snapToPixel) {
		this.g4.setTexture(this.maskManager.uImage0,bitmapData.__getTexture().data.image);
		var filter = smoothing ? 1 : 0;
		this.g4.setTextureParameters(this.maskManager.uImage0,2,2,filter,filter,0);
		this.g4.setMatrix(this.maskManager.uMatrix,this.renderer.getMatrix(transform,snapToPixel));
		this.g4.setVertexBuffer(bitmapData.getMaskVertexBuffer(this.maskManager.vertexStructure));
		this.g4.setIndexBuffer(this.maskManager.quadIndexBuffer);
		this.g4.drawIndexedVertices(0,6);
	}
	,__class__: openfl__$internal_renderer_opengl_GLRenderSession
};
var openfl__$internal_renderer_opengl_GLRenderer = function(stage) {
	this.getMatrixHelperMatrix4 = new kha_math_FastMatrix4(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	this.displayTransformTempMatrix = new openfl_geom_Matrix();
	this.projectionMatrix = new kha_math_FastMatrix4(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	this.stage = stage;
	this.width = stage.stageWidth;
	this.height = stage.stageHeight;
	if(openfl_display_Graphics.maxTextureWidth == null) {
		openfl_display_Graphics.maxTextureWidth = openfl_display_Graphics.maxTextureHeight = kha_Image.get_maxSize();
	}
	this.renderSession = new openfl__$internal_renderer_opengl_GLRenderSession(this,stage.window.scale);
	if(stage.window != null) {
		if(stage.stage3Ds.data.get(0).context3D == null) {
			stage.stage3Ds.data.get(0).__createContext(stage,this.renderSession);
		}
		var width = Math.ceil(stage.window.width * stage.window.scale);
		var height = Math.ceil(stage.window.height * stage.window.scale);
		this.resize(width,height);
	}
};
$hxClasses["openfl._internal.renderer.opengl.GLRenderer"] = openfl__$internal_renderer_opengl_GLRenderer;
openfl__$internal_renderer_opengl_GLRenderer.__name__ = "openfl._internal.renderer.opengl.GLRenderer";
openfl__$internal_renderer_opengl_GLRenderer.prototype = {
	height: null
	,width: null
	,backbuffer: null
	,projectionMatrix: null
	,renderSession: null
	,stage: null
	,displayMatrix: null
	,displayHeight: null
	,displayWidth: null
	,offsetX: null
	,offsetY: null
	,begin: function() {
		this.renderSession.g4 = this.backbuffer.get_g4();
		this.renderSession.batcher.g4 = this.renderSession.g4;
		this.renderSession.g4.begin();
	}
	,end: function() {
		this.renderSession.g4.end();
		this.renderSession.g4 = null;
		this.renderSession.batcher.g4 = null;
	}
	,clear: function() {
		this.renderSession.g4.clear(this.stage.__colorKha);
	}
	,displayTransformTempMatrix: null
	,getDisplayTransformTempMatrix: function(transform,snapToPixel) {
		var matrix = this.displayTransformTempMatrix;
		matrix.copyFrom(transform);
		matrix.concat(this.displayMatrix);
		if(snapToPixel) {
			matrix.tx = Math.round(matrix.tx);
			matrix.ty = Math.round(matrix.ty);
		}
		return this.displayTransformTempMatrix;
	}
	,getMatrixHelperMatrix4: null
	,getMatrix: function(transform,snapToPixel) {
		var matrix = this.getDisplayTransformTempMatrix(transform,snapToPixel);
		var _this = this.getMatrixHelperMatrix4;
		var _this1 = this.projectionMatrix;
		var m__00 = matrix.a;
		var m__10 = matrix.b;
		var m__20 = 0;
		var m__30 = matrix.tx;
		var m__01 = matrix.c;
		var m__11 = matrix.d;
		var m__21 = 0;
		var m__31 = matrix.ty;
		var m__02 = 0;
		var m__12 = 0;
		var m__22 = 1;
		var m__32 = 0;
		var m__03 = 0;
		var m__13 = 0;
		var m__23 = 0;
		var m__33 = 1;
		var m__001 = _this1._00 * m__00 + _this1._10 * m__01 + _this1._20 * m__02 + _this1._30 * m__03;
		var m__101 = _this1._00 * m__10 + _this1._10 * m__11 + _this1._20 * m__12 + _this1._30 * m__13;
		var m__201 = _this1._00 * m__20 + _this1._10 * m__21 + _this1._20 * m__22 + _this1._30 * m__23;
		var m__301 = _this1._00 * m__30 + _this1._10 * m__31 + _this1._20 * m__32 + _this1._30 * m__33;
		var m__011 = _this1._01 * m__00 + _this1._11 * m__01 + _this1._21 * m__02 + _this1._31 * m__03;
		var m__111 = _this1._01 * m__10 + _this1._11 * m__11 + _this1._21 * m__12 + _this1._31 * m__13;
		var m__211 = _this1._01 * m__20 + _this1._11 * m__21 + _this1._21 * m__22 + _this1._31 * m__23;
		var m__311 = _this1._01 * m__30 + _this1._11 * m__31 + _this1._21 * m__32 + _this1._31 * m__33;
		var m__021 = _this1._02 * m__00 + _this1._12 * m__01 + _this1._22 * m__02 + _this1._32 * m__03;
		var m__121 = _this1._02 * m__10 + _this1._12 * m__11 + _this1._22 * m__12 + _this1._32 * m__13;
		var m__221 = _this1._02 * m__20 + _this1._12 * m__21 + _this1._22 * m__22 + _this1._32 * m__23;
		var m__321 = _this1._02 * m__30 + _this1._12 * m__31 + _this1._22 * m__32 + _this1._32 * m__33;
		var m__031 = _this1._03 * m__00 + _this1._13 * m__01 + _this1._23 * m__02 + _this1._33 * m__03;
		var m__131 = _this1._03 * m__10 + _this1._13 * m__11 + _this1._23 * m__12 + _this1._33 * m__13;
		var m__231 = _this1._03 * m__20 + _this1._13 * m__21 + _this1._23 * m__22 + _this1._33 * m__23;
		var m__331 = _this1._03 * m__30 + _this1._13 * m__31 + _this1._23 * m__32 + _this1._33 * m__33;
		_this._00 = m__001;
		_this._10 = m__101;
		_this._20 = m__201;
		_this._30 = m__301;
		_this._01 = m__011;
		_this._11 = m__111;
		_this._21 = m__211;
		_this._31 = m__311;
		_this._02 = m__021;
		_this._12 = m__121;
		_this._22 = m__221;
		_this._32 = m__321;
		_this._03 = m__031;
		_this._13 = m__131;
		_this._23 = m__231;
		_this._33 = m__331;
		return this.getMatrixHelperMatrix4;
	}
	,render: function() {
		var gl = kha_SystemImpl.gl;
		gl.viewport(this.offsetX,this.offsetY,this.displayWidth,this.displayHeight);
		this.renderSession.allowSmoothing = this.stage.quality != 2;
		this.renderSession.forceSmoothing = false;
		this.renderSession.batcher.projectionMatrix = this.projectionMatrix;
		this.stage.__renderGL(this.renderSession);
		this.renderSession.batcher.flush();
		if(this.offsetX > 0 || this.offsetY > 0) {
			gl.clearColor(0,0,0,1);
			gl.enable(3089);
			if(this.offsetX > 0) {
				gl.scissor(0,0,this.offsetX,this.height);
				gl.clear(16384);
				gl.scissor(this.offsetX + this.displayWidth,0,this.width,this.height);
				gl.clear(16384);
			}
			if(this.offsetY > 0) {
				gl.scissor(0,0,this.width,this.offsetY);
				gl.clear(16384);
				gl.scissor(0,this.offsetY + this.displayHeight,this.width,this.height);
				gl.clear(16384);
			}
			gl.disable(3089);
		}
	}
	,renderStage3D: function() {
		var stage3D = this.stage.stage3Ds.data.iterator();
		while(stage3D.hasNext()) {
			var stage3D1 = stage3D.next();
			stage3D1.__renderGL(this.stage,this.renderSession);
		}
	}
	,resize: function(width,height) {
		this.width = width;
		this.height = height;
		this.displayMatrix = this.stage.__displayMatrix;
		var w = this.stage.stageWidth;
		var h = this.stage.stageHeight;
		var _this = this.displayMatrix;
		this.offsetX = Math.round(0 * _this.a + 0 * _this.c + _this.tx);
		var _this1 = this.displayMatrix;
		this.offsetY = Math.round(0 * _this1.b + 0 * _this1.d + _this1.ty);
		var _this2 = this.displayMatrix;
		this.displayWidth = Math.round(w * _this2.a + 0 * _this2.c + _this2.tx - this.offsetX);
		var _this3 = this.displayMatrix;
		this.displayHeight = Math.round(0 * _this3.b + h * _this3.d + _this3.ty - this.offsetY);
		if(kha_Image.renderTargetsInvertedY()) {
			var _this4 = this.projectionMatrix;
			var left = this.offsetX;
			var right = this.displayWidth + this.offsetX;
			var bottom = this.offsetY;
			var top = this.displayHeight + this.offsetY;
			var tx = -(right + left) / (right - left);
			var ty = -(top + bottom) / (top - bottom);
			var tz = 0.;
			var m__00 = 2 / (right - left);
			var m__10 = 0;
			var m__20 = 0;
			var m__30 = tx;
			var m__01 = 0;
			var m__11 = 2.0 / (top - bottom);
			var m__21 = 0;
			var m__31 = ty;
			var m__02 = 0;
			var m__12 = 0;
			var m__22 = -0.001;
			var m__32 = tz;
			var m__03 = 0;
			var m__13 = 0;
			var m__23 = 0;
			var m__33 = 1;
			_this4._00 = m__00;
			_this4._10 = m__10;
			_this4._20 = m__20;
			_this4._30 = m__30;
			_this4._01 = m__01;
			_this4._11 = m__11;
			_this4._21 = m__21;
			_this4._31 = m__31;
			_this4._02 = m__02;
			_this4._12 = m__12;
			_this4._22 = m__22;
			_this4._32 = m__32;
			_this4._03 = m__03;
			_this4._13 = m__13;
			_this4._23 = m__23;
			_this4._33 = m__33;
		} else {
			var _this5 = this.projectionMatrix;
			var left1 = this.offsetX;
			var right1 = this.displayWidth + this.offsetX;
			var bottom1 = this.displayHeight + this.offsetY;
			var top1 = this.offsetY;
			var tx1 = -(right1 + left1) / (right1 - left1);
			var ty1 = -(top1 + bottom1) / (top1 - bottom1);
			var tz1 = 0.;
			var m__001 = 2 / (right1 - left1);
			var m__101 = 0;
			var m__201 = 0;
			var m__301 = tx1;
			var m__011 = 0;
			var m__111 = 2.0 / (top1 - bottom1);
			var m__211 = 0;
			var m__311 = ty1;
			var m__021 = 0;
			var m__121 = 0;
			var m__221 = -0.001;
			var m__321 = tz1;
			var m__031 = 0;
			var m__131 = 0;
			var m__231 = 0;
			var m__331 = 1;
			_this5._00 = m__001;
			_this5._10 = m__101;
			_this5._20 = m__201;
			_this5._30 = m__301;
			_this5._01 = m__011;
			_this5._11 = m__111;
			_this5._21 = m__211;
			_this5._31 = m__311;
			_this5._02 = m__021;
			_this5._12 = m__121;
			_this5._22 = m__221;
			_this5._32 = m__321;
			_this5._03 = m__031;
			_this5._13 = m__131;
			_this5._23 = m__231;
			_this5._33 = m__331;
		}
		this.backbuffer = kha_Image.createRenderTarget(width,height,0,2);
	}
	,__class__: openfl__$internal_renderer_opengl_GLRenderer
};
var openfl__$internal_renderer_opengl_GLVideo = function() { };
$hxClasses["openfl._internal.renderer.opengl.GLVideo"] = openfl__$internal_renderer_opengl_GLVideo;
openfl__$internal_renderer_opengl_GLVideo.__name__ = "openfl._internal.renderer.opengl.GLVideo";
openfl__$internal_renderer_opengl_GLVideo.render = function(video,renderSession) {
	if(!video.__renderable || video.__worldAlpha <= 0 || video.__stream == null) {
		return;
	}
	var tmp = video.__stream.__video != null;
};
openfl__$internal_renderer_opengl_GLVideo.renderMask = function(video,renderSession) {
	if(video.__stream == null) {
		return;
	}
	var tmp = video.__stream.__video != null;
};
var openfl__$internal_renderer_opengl_MaskManager = function(renderSession) {
	this.renderSession = renderSession;
	this.quadIndexBuffer = new kha_graphics4_IndexBuffer(6,0);
	var data = this.quadIndexBuffer.lock();
	data[0] = 0;
	data[1] = 1;
	data[2] = 2;
	data[3] = 0;
	data[4] = 2;
	data[5] = 3;
	this.quadIndexBuffer.unlock();
	this.vertexStructure = new kha_graphics4_VertexStructure();
	this.vertexStructure.add("aPosition",1);
	this.vertexStructure.add("aTexCoord",1);
	var vertexShader = kha_Shaders.mask_vert;
	var fragmentShader = kha_Shaders.mask_frag;
	this.incrPipeline = new kha_graphics4_PipelineState();
	this.incrPipeline.inputLayout = [this.vertexStructure];
	this.incrPipeline.vertexShader = vertexShader;
	this.incrPipeline.fragmentShader = fragmentShader;
	var _this = this.incrPipeline;
	var value = _this.colorWriteMasksAlpha[0] = false;
	var value1 = _this.colorWriteMasksGreen[0] = value;
	var value2 = _this.colorWriteMasksBlue[0] = value1;
	_this.colorWriteMasksRed[0] = value2;
	this.incrPipeline.stencilReferenceValue = kha_graphics4_StencilValue.Dynamic;
	this.incrPipeline.stencilReadMask = 255;
	this.incrPipeline.stencilMode = 2;
	this.incrPipeline.stencilFail = 0;
	this.incrPipeline.stencilDepthFail = 0;
	this.incrPipeline.stencilBothPass = 3;
	this.incrPipeline.compile();
	this.incrTexUnit = this.incrPipeline.getTextureUnit("uImage0");
	this.incrMatrix = this.incrPipeline.getConstantLocation("uMatrix");
	this.decrPipeline = new kha_graphics4_PipelineState();
	this.decrPipeline.inputLayout = [this.vertexStructure];
	this.decrPipeline.vertexShader = vertexShader;
	this.decrPipeline.fragmentShader = fragmentShader;
	var _this1 = this.decrPipeline;
	var value3 = _this1.colorWriteMasksAlpha[0] = false;
	var value4 = _this1.colorWriteMasksGreen[0] = value3;
	var value5 = _this1.colorWriteMasksBlue[0] = value4;
	_this1.colorWriteMasksRed[0] = value5;
	this.decrPipeline.stencilReferenceValue = kha_graphics4_StencilValue.Dynamic;
	this.decrPipeline.stencilReadMask = 255;
	this.decrPipeline.stencilMode = 2;
	this.decrPipeline.stencilFail = 0;
	this.decrPipeline.stencilDepthFail = 0;
	this.decrPipeline.stencilBothPass = 5;
	this.decrPipeline.compile();
	this.decrTexUnit = this.incrPipeline.getTextureUnit("uImage0");
	this.decrMatrix = this.incrPipeline.getConstantLocation("uMatrix");
	this.clipRects = [];
	this.maskObjects = [];
	this.numClipRects = 0;
	this.stencilReference = 0;
	this.tempRect = new openfl_geom_Rectangle();
};
$hxClasses["openfl._internal.renderer.opengl.MaskManager"] = openfl__$internal_renderer_opengl_MaskManager;
openfl__$internal_renderer_opengl_MaskManager.__name__ = "openfl._internal.renderer.opengl.MaskManager";
openfl__$internal_renderer_opengl_MaskManager.prototype = {
	renderSession: null
	,incrPipeline: null
	,incrTexUnit: null
	,incrMatrix: null
	,decrPipeline: null
	,decrTexUnit: null
	,decrMatrix: null
	,quadIndexBuffer: null
	,vertexStructure: null
	,uImage0: null
	,uMatrix: null
	,stencilReference: null
	,clipRects: null
	,maskObjects: null
	,numClipRects: null
	,tempRect: null
	,pushMask: function(mask) {
		this.renderSession.batcher.flush();
		var g4 = this.renderSession.g4;
		g4.setPipeline(this.incrPipeline);
		g4.setStencilReferenceValue(this.stencilReference);
		if(this.stencilReference == 0) {
			g4.clear(null,null,0);
		}
		this.uImage0 = this.incrTexUnit;
		this.uMatrix = this.incrMatrix;
		mask.__renderGLMask(this.renderSession);
		this.renderSession.batcher.flush();
		this.maskObjects.push(mask);
		this.stencilReference++;
	}
	,pushObject: function(object) {
		if(object.__scrollRect != null) {
			this.pushRect(object.__scrollRect,object.__renderTransform);
		}
		if(object.__mask != null) {
			this.pushMask(object.__mask);
		}
	}
	,pushRect: function(rect,transform) {
		if(this.numClipRects == this.clipRects.length) {
			this.clipRects[this.numClipRects] = new openfl_geom_Rectangle();
		}
		var clipRect = this.clipRects[this.numClipRects];
		rect.__transform(clipRect,transform);
		if(this.numClipRects > 0) {
			var parentClipRect = this.clipRects[this.numClipRects - 1];
			clipRect.__contract(parentClipRect.x,parentClipRect.y,parentClipRect.width,parentClipRect.height);
		}
		if(clipRect.height < 0) {
			clipRect.height = 0;
		}
		if(clipRect.width < 0) {
			clipRect.width = 0;
		}
		this.scissorRect(clipRect);
		this.numClipRects++;
	}
	,popMask: function() {
		if(this.stencilReference == 0) {
			return;
		}
		this.renderSession.batcher.flush();
		var mask = this.maskObjects.pop();
		if(this.stencilReference > 1) {
			var g4 = this.renderSession.g4;
			g4.setPipeline(this.decrPipeline);
			g4.setStencilReferenceValue(this.stencilReference);
			this.uImage0 = this.decrTexUnit;
			this.uMatrix = this.decrMatrix;
			mask.__renderGLMask(this.renderSession);
			this.renderSession.batcher.flush();
			this.stencilReference--;
		} else {
			this.stencilReference = 0;
		}
	}
	,popObject: function(object) {
		if(object.__mask != null) {
			this.popMask();
		}
		if(object.__scrollRect != null) {
			this.popRect();
		}
	}
	,popRect: function() {
		if(this.numClipRects > 0) {
			this.numClipRects--;
			if(this.numClipRects > 0) {
				this.scissorRect(this.clipRects[this.numClipRects - 1]);
			} else {
				this.scissorRect(null);
			}
		}
	}
	,scissorRect: function(rect) {
		this.renderSession.batcher.flush();
		if(rect != null) {
			var renderer = this.renderSession.renderer;
			var clipRect = this.tempRect;
			rect.__transform(clipRect,renderer.displayMatrix);
			var x = Math.floor(clipRect.x);
			var y = Math.floor(clipRect.y);
			var width = Math.ceil(clipRect.get_right()) - x;
			var height = Math.ceil(clipRect.get_bottom()) - y;
			if(width < 0) {
				width = 0;
			}
			if(height < 0) {
				height = 0;
			}
			this.renderSession.g4.scissor(x,y,width,height);
		} else {
			this.renderSession.g4.disableScissor();
		}
	}
	,__class__: openfl__$internal_renderer_opengl_MaskManager
};
var openfl__$internal_renderer_opengl_batcher_BatchRenderer = function(maskManager,maxQuads) {
	this.textureTick = 0;
	this.tick = 0;
	this.currentGroupCount = 0;
	this.currentQuadIndex = 0;
	this.currentBlendMode = openfl__$internal_renderer_opengl_batcher_BlendMode.NORMAL;
	this.maskManager = maskManager;
	this.maxQuads = maxQuads;
	openfl__$internal_renderer_opengl_batcher_BlendMode.init();
	this.positionScaleY = 1.0;
	this.emptyTexture = kha_Image.create(1,1);
	this.emptyTexture.lock();
	this.emptyTexture.unlock();
	var this1 = new Array(openfl__$internal_renderer_opengl_batcher_PipelineSetup.numTextures);
	this.boundTextures = this1;
	this.vertexBuffer = new kha_graphics4_VertexBuffer(maxQuads * 4,openfl__$internal_renderer_opengl_batcher_PipelineSetup.vertexStructure,1);
	this.vertexBufferData = this.vertexBuffer.lock();
	this.indexBuffer = openfl__$internal_renderer_opengl_batcher_BatchRenderer.createIndicesForQuads(maxQuads);
	var this2 = new Array(maxQuads);
	this.groups = this2;
	var _g = 0;
	var _g1 = maxQuads;
	while(_g < _g1) {
		var i = _g++;
		this.groups[i] = new openfl__$internal_renderer_opengl_batcher__$BatchRenderer_RenderGroup();
	}
	this.currentGroup = this.groups[this.currentGroupCount];
	this.currentGroup.textureCount = 0;
	this.currentGroup.start = this.currentQuadIndex;
	this.currentGroup.blendMode = this.currentBlendMode;
	this.tick++;
	this.currentGroupCount++;
};
$hxClasses["openfl._internal.renderer.opengl.batcher.BatchRenderer"] = openfl__$internal_renderer_opengl_batcher_BatchRenderer;
openfl__$internal_renderer_opengl_batcher_BatchRenderer.__name__ = "openfl._internal.renderer.opengl.batcher.BatchRenderer";
openfl__$internal_renderer_opengl_batcher_BatchRenderer.createIndicesForQuads = function(numQuads) {
	var totalIndices = numQuads * 3 * 2;
	var buffer = new kha_graphics4_IndexBuffer(totalIndices,0);
	var indices = buffer.lock();
	var i = 0;
	var j = 0;
	while(i < totalIndices) {
		indices[i] = j;
		indices[i + 1] = j + 1;
		indices[i + 2] = j + 2;
		indices[i + 3] = j;
		indices[i + 4] = j + 2;
		indices[i + 5] = j + 3;
		i += 6;
		j += 4;
	}
	buffer.unlock();
	return buffer;
};
openfl__$internal_renderer_opengl_batcher_BatchRenderer.prototype = {
	maskManager: null
	,maxQuads: null
	,indexBuffer: null
	,vertexBuffer: null
	,groups: null
	,boundTextures: null
	,emptyTexture: null
	,vertexBufferData: null
	,currentBlendMode: null
	,currentTexture: null
	,currentQuadIndex: null
	,currentGroup: null
	,currentGroupCount: null
	,tick: null
	,textureTick: null
	,positionScaleY: null
	,projectionMatrix: null
	,g4: null
	,finishCurrentGroup: function() {
		this.currentGroup.size = this.currentQuadIndex - this.currentGroup.start;
	}
	,startNextGroup: function() {
		this.currentGroup = this.groups[this.currentGroupCount];
		this.currentGroup.textureCount = 0;
		this.currentGroup.start = this.currentQuadIndex;
		this.currentGroup.blendMode = this.currentBlendMode;
		this.tick++;
		this.currentGroupCount++;
	}
	,flipVertical: function() {
		this.positionScaleY = -1;
	}
	,unflipVertical: function() {
		this.positionScaleY = 1;
	}
	,render: function(quad) {
		var _gthis = this;
		if(this.currentQuadIndex >= this.maxQuads) {
			this.flush();
		}
		var maxTextures = openfl__$internal_renderer_opengl_batcher_PipelineSetup.numTextures;
		var nextTexture = quad.texture.data;
		if(this.currentBlendMode != quad.blendMode) {
			this.currentBlendMode = quad.blendMode;
			this.currentTexture = null;
			this.currentGroup.size = this.currentQuadIndex - this.currentGroup.start;
			this.currentGroup = this.groups[this.currentGroupCount];
			this.currentGroup.textureCount = 0;
			this.currentGroup.start = this.currentQuadIndex;
			this.currentGroup.blendMode = this.currentBlendMode;
			this.tick++;
			this.currentGroupCount++;
		}
		if(nextTexture.enabledTick == this.tick && nextTexture.lastSmoothing != quad.smoothing) {
			this.currentTexture = null;
			this.currentGroup.size = this.currentQuadIndex - this.currentGroup.start;
			this.currentGroup = this.groups[this.currentGroupCount];
			this.currentGroup.textureCount = 0;
			this.currentGroup.start = this.currentQuadIndex;
			this.currentGroup.blendMode = this.currentBlendMode;
			this.tick++;
			this.currentGroupCount++;
		}
		if(this.currentTexture != nextTexture) {
			this.currentTexture = nextTexture;
			if(this.currentTexture.enabledTick != this.tick) {
				if(this.currentGroup.textureCount == maxTextures) {
					this.currentGroup.size = this.currentQuadIndex - this.currentGroup.start;
					this.currentGroup = this.groups[this.currentGroupCount];
					this.currentGroup.textureCount = 0;
					this.currentGroup.start = this.currentQuadIndex;
					this.currentGroup.blendMode = this.currentBlendMode;
					this.tick++;
					this.currentGroupCount++;
				}
				if(nextTexture.textureUnitId == -1) {
					var _g = 0;
					var _g1 = maxTextures;
					while(_g < _g1) {
						var i = _g++;
						var textureUnit = (i + this.textureTick) % maxTextures;
						var boundTexture = this.boundTextures[textureUnit];
						if(boundTexture == null || boundTexture.enabledTick != this.tick) {
							if(boundTexture != null) {
								boundTexture.textureUnitId = -1;
							}
							nextTexture.textureUnitId = textureUnit;
							this.boundTextures[textureUnit] = nextTexture;
							this.textureTick++;
							break;
						}
					}
					if(nextTexture.textureUnitId == -1) {
						throw new js__$Boot_HaxeError("Unable to find free texture unit for the batch render group! This should NOT happen!");
					}
				}
				nextTexture.enabledTick = this.tick;
				nextTexture.lastSmoothing = quad.smoothing;
				this.currentGroup.textures[this.currentGroup.textureCount] = nextTexture;
				this.currentGroup.textureUnits[this.currentGroup.textureCount] = nextTexture.textureUnitId;
				this.currentGroup.textureSmoothing[this.currentGroup.textureCount] = quad.smoothing;
				this.currentGroup.textureCount++;
			}
		}
		var vertexData = quad.vertexData;
		var uvs = quad.texture.uvs;
		var textureUnitId = nextTexture.textureUnitId;
		var alpha = quad.alpha;
		var pma = quad.texture.premultipliedAlpha;
		var colorTransform = quad.colorTransform;
		var currentVertexBufferIndex = this.currentQuadIndex * 56;
		var offset = currentVertexBufferIndex;
		_gthis.vertexBufferData[offset] = vertexData[0];
		_gthis.vertexBufferData[offset + 1] = vertexData[1];
		_gthis.vertexBufferData[offset + 2] = uvs[0];
		_gthis.vertexBufferData[offset + 3] = uvs[1];
		_gthis.vertexBufferData[offset + 4] = textureUnitId;
		if(colorTransform != null) {
			_gthis.vertexBufferData[offset + 5] = colorTransform.redOffset / 255;
			_gthis.vertexBufferData[offset + 6] = colorTransform.greenOffset / 255;
			_gthis.vertexBufferData[offset + 7] = colorTransform.blueOffset / 255;
			_gthis.vertexBufferData[offset + 8] = colorTransform.alphaOffset / 255 * alpha;
			_gthis.vertexBufferData[offset + 9] = colorTransform.redMultiplier;
			_gthis.vertexBufferData[offset + 10] = colorTransform.greenMultiplier;
			_gthis.vertexBufferData[offset + 11] = colorTransform.blueMultiplier;
			_gthis.vertexBufferData[offset + 12] = colorTransform.alphaMultiplier * alpha;
		} else {
			_gthis.vertexBufferData[offset + 5] = 0;
			_gthis.vertexBufferData[offset + 6] = 0;
			_gthis.vertexBufferData[offset + 7] = 0;
			_gthis.vertexBufferData[offset + 8] = 0;
			_gthis.vertexBufferData[offset + 9] = 1;
			_gthis.vertexBufferData[offset + 10] = 1;
			_gthis.vertexBufferData[offset + 11] = 1;
			_gthis.vertexBufferData[offset + 12] = alpha;
		}
		_gthis.vertexBufferData[offset + 13] = pma ? 1 : 0;
		var offset1 = currentVertexBufferIndex + 14;
		_gthis.vertexBufferData[offset1] = vertexData[2];
		_gthis.vertexBufferData[offset1 + 1] = vertexData[3];
		_gthis.vertexBufferData[offset1 + 2] = uvs[2];
		_gthis.vertexBufferData[offset1 + 3] = uvs[3];
		_gthis.vertexBufferData[offset1 + 4] = textureUnitId;
		if(colorTransform != null) {
			_gthis.vertexBufferData[offset1 + 5] = colorTransform.redOffset / 255;
			_gthis.vertexBufferData[offset1 + 6] = colorTransform.greenOffset / 255;
			_gthis.vertexBufferData[offset1 + 7] = colorTransform.blueOffset / 255;
			_gthis.vertexBufferData[offset1 + 8] = colorTransform.alphaOffset / 255 * alpha;
			_gthis.vertexBufferData[offset1 + 9] = colorTransform.redMultiplier;
			_gthis.vertexBufferData[offset1 + 10] = colorTransform.greenMultiplier;
			_gthis.vertexBufferData[offset1 + 11] = colorTransform.blueMultiplier;
			_gthis.vertexBufferData[offset1 + 12] = colorTransform.alphaMultiplier * alpha;
		} else {
			_gthis.vertexBufferData[offset1 + 5] = 0;
			_gthis.vertexBufferData[offset1 + 6] = 0;
			_gthis.vertexBufferData[offset1 + 7] = 0;
			_gthis.vertexBufferData[offset1 + 8] = 0;
			_gthis.vertexBufferData[offset1 + 9] = 1;
			_gthis.vertexBufferData[offset1 + 10] = 1;
			_gthis.vertexBufferData[offset1 + 11] = 1;
			_gthis.vertexBufferData[offset1 + 12] = alpha;
		}
		_gthis.vertexBufferData[offset1 + 13] = pma ? 1 : 0;
		var offset2 = currentVertexBufferIndex + 28;
		_gthis.vertexBufferData[offset2] = vertexData[4];
		_gthis.vertexBufferData[offset2 + 1] = vertexData[5];
		_gthis.vertexBufferData[offset2 + 2] = uvs[4];
		_gthis.vertexBufferData[offset2 + 3] = uvs[5];
		_gthis.vertexBufferData[offset2 + 4] = textureUnitId;
		if(colorTransform != null) {
			_gthis.vertexBufferData[offset2 + 5] = colorTransform.redOffset / 255;
			_gthis.vertexBufferData[offset2 + 6] = colorTransform.greenOffset / 255;
			_gthis.vertexBufferData[offset2 + 7] = colorTransform.blueOffset / 255;
			_gthis.vertexBufferData[offset2 + 8] = colorTransform.alphaOffset / 255 * alpha;
			_gthis.vertexBufferData[offset2 + 9] = colorTransform.redMultiplier;
			_gthis.vertexBufferData[offset2 + 10] = colorTransform.greenMultiplier;
			_gthis.vertexBufferData[offset2 + 11] = colorTransform.blueMultiplier;
			_gthis.vertexBufferData[offset2 + 12] = colorTransform.alphaMultiplier * alpha;
		} else {
			_gthis.vertexBufferData[offset2 + 5] = 0;
			_gthis.vertexBufferData[offset2 + 6] = 0;
			_gthis.vertexBufferData[offset2 + 7] = 0;
			_gthis.vertexBufferData[offset2 + 8] = 0;
			_gthis.vertexBufferData[offset2 + 9] = 1;
			_gthis.vertexBufferData[offset2 + 10] = 1;
			_gthis.vertexBufferData[offset2 + 11] = 1;
			_gthis.vertexBufferData[offset2 + 12] = alpha;
		}
		_gthis.vertexBufferData[offset2 + 13] = pma ? 1 : 0;
		var offset3 = currentVertexBufferIndex + 42;
		_gthis.vertexBufferData[offset3] = vertexData[6];
		_gthis.vertexBufferData[offset3 + 1] = vertexData[7];
		_gthis.vertexBufferData[offset3 + 2] = uvs[6];
		_gthis.vertexBufferData[offset3 + 3] = uvs[7];
		_gthis.vertexBufferData[offset3 + 4] = textureUnitId;
		if(colorTransform != null) {
			_gthis.vertexBufferData[offset3 + 5] = colorTransform.redOffset / 255;
			_gthis.vertexBufferData[offset3 + 6] = colorTransform.greenOffset / 255;
			_gthis.vertexBufferData[offset3 + 7] = colorTransform.blueOffset / 255;
			_gthis.vertexBufferData[offset3 + 8] = colorTransform.alphaOffset / 255 * alpha;
			_gthis.vertexBufferData[offset3 + 9] = colorTransform.redMultiplier;
			_gthis.vertexBufferData[offset3 + 10] = colorTransform.greenMultiplier;
			_gthis.vertexBufferData[offset3 + 11] = colorTransform.blueMultiplier;
			_gthis.vertexBufferData[offset3 + 12] = colorTransform.alphaMultiplier * alpha;
		} else {
			_gthis.vertexBufferData[offset3 + 5] = 0;
			_gthis.vertexBufferData[offset3 + 6] = 0;
			_gthis.vertexBufferData[offset3 + 7] = 0;
			_gthis.vertexBufferData[offset3 + 8] = 0;
			_gthis.vertexBufferData[offset3 + 9] = 1;
			_gthis.vertexBufferData[offset3 + 10] = 1;
			_gthis.vertexBufferData[offset3 + 11] = 1;
			_gthis.vertexBufferData[offset3 + 12] = alpha;
		}
		_gthis.vertexBufferData[offset3 + 13] = pma ? 1 : 0;
		this.currentQuadIndex++;
	}
	,flush: function() {
		if(this.currentQuadIndex == 0) {
			return;
		}
		this.currentGroup.size = this.currentQuadIndex - this.currentGroup.start;
		this.vertexBuffer.unlock();
		var g4 = this.g4;
		var boundTextures = this.boundTextures;
		var groups = this.groups;
		var stencilReferenceValue = this.maskManager.stencilReference;
		var maxTextures = openfl__$internal_renderer_opengl_batcher_PipelineSetup.numTextures;
		var lastBlendMode = null;
		var textureUnits = null;
		var _g = 0;
		var _g1 = this.currentGroupCount;
		while(_g < _g1) {
			var i = _g++;
			var group = groups[i];
			if(group.size == 0) {
				continue;
			}
			if(lastBlendMode != group.blendMode) {
				lastBlendMode = group.blendMode;
				var p = lastBlendMode.setup(g4,stencilReferenceValue);
				g4.setFloat4(p.uPositionScale,1,this.positionScaleY,1,1);
				g4.setMatrix(p.uProjMatrix,this.projectionMatrix);
				g4.setVertexBuffer(this.vertexBuffer);
				g4.setIndexBuffer(this.indexBuffer);
				var _g2 = 0;
				var _g11 = p.textureUnits;
				while(_g2 < _g11.length) {
					var unit = _g11[_g2];
					++_g2;
					g4.setTexture(unit,this.emptyTexture);
				}
				textureUnits = p.textureUnits;
			}
			var _g3 = 0;
			var _g12 = group.textureCount;
			while(_g3 < _g12) {
				var i1 = _g3++;
				var currentTexture = group.textures[i1];
				var textureUnit = textureUnits[group.textureUnits[i1]];
				g4.setTexture(textureUnit,currentTexture.image);
				var filter = group.textureSmoothing[i1] ? 1 : 0;
				g4.setTextureParameters(textureUnit,2,2,filter,filter,0);
				currentTexture.textureUnitId = -1;
			}
			g4.drawIndexedVertices(group.start * 6,group.size * 6);
		}
		var _g21 = 0;
		var _g31 = maxTextures;
		while(_g21 < _g31) {
			var i2 = _g21++;
			boundTextures[i2] = null;
		}
		this.currentTexture = null;
		this.currentQuadIndex = 0;
		this.currentBlendMode = openfl__$internal_renderer_opengl_batcher_BlendMode.NORMAL;
		this.currentGroupCount = 0;
		this.vertexBufferData = this.vertexBuffer.lock();
		this.currentGroup = this.groups[this.currentGroupCount];
		this.currentGroup.textureCount = 0;
		this.currentGroup.start = this.currentQuadIndex;
		this.currentGroup.blendMode = this.currentBlendMode;
		this.tick++;
		this.currentGroupCount++;
	}
	,__class__: openfl__$internal_renderer_opengl_batcher_BatchRenderer
};
var openfl__$internal_renderer_opengl_batcher__$BatchRenderer_PipelineData = function(pipeline,uProjMatrix,uPositionScale,textureUnits) {
	this.pipeline = pipeline;
	this.uProjMatrix = uProjMatrix;
	this.uPositionScale = uPositionScale;
	this.textureUnits = textureUnits;
};
$hxClasses["openfl._internal.renderer.opengl.batcher._BatchRenderer.PipelineData"] = openfl__$internal_renderer_opengl_batcher__$BatchRenderer_PipelineData;
openfl__$internal_renderer_opengl_batcher__$BatchRenderer_PipelineData.__name__ = "openfl._internal.renderer.opengl.batcher._BatchRenderer.PipelineData";
openfl__$internal_renderer_opengl_batcher__$BatchRenderer_PipelineData.prototype = {
	pipeline: null
	,uProjMatrix: null
	,uPositionScale: null
	,textureUnits: null
	,__class__: openfl__$internal_renderer_opengl_batcher__$BatchRenderer_PipelineData
};
var openfl__$internal_renderer_opengl_batcher__$BatchRenderer_RenderGroup = function() {
	this.start = 0;
	this.size = 0;
	this.textureCount = 0;
	this.textureSmoothing = [];
	this.textureUnits = [];
	this.textures = [];
};
$hxClasses["openfl._internal.renderer.opengl.batcher._BatchRenderer.RenderGroup"] = openfl__$internal_renderer_opengl_batcher__$BatchRenderer_RenderGroup;
openfl__$internal_renderer_opengl_batcher__$BatchRenderer_RenderGroup.__name__ = "openfl._internal.renderer.opengl.batcher._BatchRenderer.RenderGroup";
openfl__$internal_renderer_opengl_batcher__$BatchRenderer_RenderGroup.prototype = {
	textures: null
	,textureUnits: null
	,textureSmoothing: null
	,textureCount: null
	,size: null
	,start: null
	,blendMode: null
	,__class__: openfl__$internal_renderer_opengl_batcher__$BatchRenderer_RenderGroup
};
var openfl__$internal_renderer_opengl_batcher_BlendMode = function(normal,masked) {
	this.normalPipeline = normal;
	this.maskedPipeline = masked;
};
$hxClasses["openfl._internal.renderer.opengl.batcher.BlendMode"] = openfl__$internal_renderer_opengl_batcher_BlendMode;
openfl__$internal_renderer_opengl_batcher_BlendMode.__name__ = "openfl._internal.renderer.opengl.batcher.BlendMode";
openfl__$internal_renderer_opengl_batcher_BlendMode.init = function() {
	if(openfl__$internal_renderer_opengl_batcher_BlendMode.NONE != null) {
		return;
	}
	openfl__$internal_renderer_opengl_batcher_PipelineSetup.init();
	var op = 0;
	var src = 1;
	var dst = 2;
	openfl__$internal_renderer_opengl_batcher_BlendMode.NONE = new openfl__$internal_renderer_opengl_batcher_BlendMode(new openfl__$internal_renderer_opengl_batcher_PipelineSetup(op,src,dst,false),new openfl__$internal_renderer_opengl_batcher_PipelineSetup(op,src,dst,true));
	openfl__$internal_renderer_opengl_batcher_BlendMode.NORMAL = new openfl__$internal_renderer_opengl_batcher_BlendMode(openfl__$internal_renderer_opengl_batcher_PipelineSetup.pNormal,new openfl__$internal_renderer_opengl_batcher_PipelineSetup(0,1,5,true));
	var op1 = 0;
	var src1 = 1;
	var dst1 = 1;
	openfl__$internal_renderer_opengl_batcher_BlendMode.ADD = new openfl__$internal_renderer_opengl_batcher_BlendMode(new openfl__$internal_renderer_opengl_batcher_PipelineSetup(op1,src1,dst1,false),new openfl__$internal_renderer_opengl_batcher_PipelineSetup(op1,src1,dst1,true));
	var op2 = 0;
	var src2 = 8;
	var dst2 = 5;
	openfl__$internal_renderer_opengl_batcher_BlendMode.MULTIPLY = new openfl__$internal_renderer_opengl_batcher_BlendMode(new openfl__$internal_renderer_opengl_batcher_PipelineSetup(op2,src2,dst2,false),new openfl__$internal_renderer_opengl_batcher_PipelineSetup(op2,src2,dst2,true));
	var op3 = 0;
	var src3 = 1;
	var dst3 = 9;
	openfl__$internal_renderer_opengl_batcher_BlendMode.SCREEN = new openfl__$internal_renderer_opengl_batcher_BlendMode(new openfl__$internal_renderer_opengl_batcher_PipelineSetup(op3,src3,dst3,false),new openfl__$internal_renderer_opengl_batcher_PipelineSetup(op3,src3,dst3,true));
	var op4 = 2;
	var src4 = 1;
	var dst4 = 1;
	openfl__$internal_renderer_opengl_batcher_BlendMode.SUBTRACT = new openfl__$internal_renderer_opengl_batcher_BlendMode(new openfl__$internal_renderer_opengl_batcher_PipelineSetup(op4,src4,dst4,false),new openfl__$internal_renderer_opengl_batcher_PipelineSetup(op4,src4,dst4,true));
	var op5 = 0;
	var src5 = 2;
	var dst5 = 5;
	openfl__$internal_renderer_opengl_batcher_BlendMode.ERASE = new openfl__$internal_renderer_opengl_batcher_BlendMode(new openfl__$internal_renderer_opengl_batcher_PipelineSetup(op5,src5,dst5,false),new openfl__$internal_renderer_opengl_batcher_PipelineSetup(op5,src5,dst5,true));
	var op6 = 0;
	var src6 = 2;
	var dst6 = 3;
	openfl__$internal_renderer_opengl_batcher_BlendMode.MASK = new openfl__$internal_renderer_opengl_batcher_BlendMode(new openfl__$internal_renderer_opengl_batcher_PipelineSetup(op6,src6,dst6,false),new openfl__$internal_renderer_opengl_batcher_PipelineSetup(op6,src6,dst6,true));
	var op7 = 0;
	var src7 = 6;
	var dst7 = 4;
	openfl__$internal_renderer_opengl_batcher_BlendMode.BELOW = new openfl__$internal_renderer_opengl_batcher_BlendMode(new openfl__$internal_renderer_opengl_batcher_PipelineSetup(op7,src7,dst7,false),new openfl__$internal_renderer_opengl_batcher_PipelineSetup(op7,src7,dst7,true));
	var op8 = 3;
	var src8 = 1;
	var dst8 = 1;
	openfl__$internal_renderer_opengl_batcher_BlendMode.DARKEN = new openfl__$internal_renderer_opengl_batcher_BlendMode(new openfl__$internal_renderer_opengl_batcher_PipelineSetup(op8,src8,dst8,false),new openfl__$internal_renderer_opengl_batcher_PipelineSetup(op8,src8,dst8,true));
	var op9 = 4;
	var src9 = 1;
	var dst9 = 1;
	openfl__$internal_renderer_opengl_batcher_BlendMode.LIGHTEN = new openfl__$internal_renderer_opengl_batcher_BlendMode(new openfl__$internal_renderer_opengl_batcher_PipelineSetup(op9,src9,dst9,false),new openfl__$internal_renderer_opengl_batcher_PipelineSetup(op9,src9,dst9,true));
	var op10 = 0;
	var src10 = 1;
	var dst10 = 2;
	openfl__$internal_renderer_opengl_batcher_BlendMode.NOPREMULT_NONE = new openfl__$internal_renderer_opengl_batcher_BlendMode(new openfl__$internal_renderer_opengl_batcher_PipelineSetup(op10,src10,dst10,false),new openfl__$internal_renderer_opengl_batcher_PipelineSetup(op10,src10,dst10,true));
	var op11 = 0;
	var src11 = 3;
	var dst11 = 5;
	openfl__$internal_renderer_opengl_batcher_BlendMode.NOPREMULT_NORMAL = new openfl__$internal_renderer_opengl_batcher_BlendMode(new openfl__$internal_renderer_opengl_batcher_PipelineSetup(op11,src11,dst11,false),new openfl__$internal_renderer_opengl_batcher_PipelineSetup(op11,src11,dst11,true));
	var op12 = 0;
	var src12 = 3;
	var dst12 = 4;
	openfl__$internal_renderer_opengl_batcher_BlendMode.NOPREMULT_ADD = new openfl__$internal_renderer_opengl_batcher_BlendMode(new openfl__$internal_renderer_opengl_batcher_PipelineSetup(op12,src12,dst12,false),new openfl__$internal_renderer_opengl_batcher_PipelineSetup(op12,src12,dst12,true));
	var op13 = 0;
	var src13 = 8;
	var dst13 = 5;
	openfl__$internal_renderer_opengl_batcher_BlendMode.NOPREMULT_MULTIPLY = new openfl__$internal_renderer_opengl_batcher_BlendMode(new openfl__$internal_renderer_opengl_batcher_PipelineSetup(op13,src13,dst13,false),new openfl__$internal_renderer_opengl_batcher_PipelineSetup(op13,src13,dst13,true));
	var op14 = 0;
	var src14 = 3;
	var dst14 = 1;
	openfl__$internal_renderer_opengl_batcher_BlendMode.NOPREMULT_SCREEN = new openfl__$internal_renderer_opengl_batcher_BlendMode(new openfl__$internal_renderer_opengl_batcher_PipelineSetup(op14,src14,dst14,false),new openfl__$internal_renderer_opengl_batcher_PipelineSetup(op14,src14,dst14,true));
	var op15 = 2;
	var src15 = 1;
	var dst15 = 1;
	openfl__$internal_renderer_opengl_batcher_BlendMode.NOPREMULT_SUBTRACT = new openfl__$internal_renderer_opengl_batcher_BlendMode(new openfl__$internal_renderer_opengl_batcher_PipelineSetup(op15,src15,dst15,false),new openfl__$internal_renderer_opengl_batcher_PipelineSetup(op15,src15,dst15,true));
	var op16 = 0;
	var src16 = 2;
	var dst16 = 5;
	openfl__$internal_renderer_opengl_batcher_BlendMode.NOPREMULT_ERASE = new openfl__$internal_renderer_opengl_batcher_BlendMode(new openfl__$internal_renderer_opengl_batcher_PipelineSetup(op16,src16,dst16,false),new openfl__$internal_renderer_opengl_batcher_PipelineSetup(op16,src16,dst16,true));
	var op17 = 0;
	var src17 = 2;
	var dst17 = 3;
	openfl__$internal_renderer_opengl_batcher_BlendMode.NOPREMULT_MASK = new openfl__$internal_renderer_opengl_batcher_BlendMode(new openfl__$internal_renderer_opengl_batcher_PipelineSetup(op17,src17,dst17,false),new openfl__$internal_renderer_opengl_batcher_PipelineSetup(op17,src17,dst17,true));
	var op18 = 0;
	var src18 = 6;
	var dst18 = 4;
	openfl__$internal_renderer_opengl_batcher_BlendMode.NOPREMULT_BELOW = new openfl__$internal_renderer_opengl_batcher_BlendMode(new openfl__$internal_renderer_opengl_batcher_PipelineSetup(op18,src18,dst18,false),new openfl__$internal_renderer_opengl_batcher_PipelineSetup(op18,src18,dst18,true));
};
openfl__$internal_renderer_opengl_batcher_BlendMode.fromOpenFLBlendMode = function(blendMode) {
	switch(blendMode) {
	case 0:
		return openfl__$internal_renderer_opengl_batcher_BlendMode.ADD;
	case 2:
		return openfl__$internal_renderer_opengl_batcher_BlendMode.DARKEN;
	case 8:
		return openfl__$internal_renderer_opengl_batcher_BlendMode.LIGHTEN;
	case 9:
		return openfl__$internal_renderer_opengl_batcher_BlendMode.MULTIPLY;
	case 12:
		return openfl__$internal_renderer_opengl_batcher_BlendMode.SCREEN;
	case 14:
		return openfl__$internal_renderer_opengl_batcher_BlendMode.SUBTRACT;
	default:
		return openfl__$internal_renderer_opengl_batcher_BlendMode.NORMAL;
	}
};
openfl__$internal_renderer_opengl_batcher_BlendMode.prototype = {
	setup: function(g4,stencilReferenceValue) {
		if(stencilReferenceValue > 0) {
			g4.setPipeline(this.maskedPipeline.pipeline);
			g4.setStencilReferenceValue(stencilReferenceValue);
			return this.maskedPipeline;
		} else {
			g4.setPipeline(this.normalPipeline.pipeline);
			return this.normalPipeline;
		}
	}
	,normalPipeline: null
	,maskedPipeline: null
	,__class__: openfl__$internal_renderer_opengl_batcher_BlendMode
};
var openfl__$internal_renderer_opengl_batcher_PipelineSetup = function(blendOperation,blendSource,blendDestination,masked) {
	this.pipeline = new kha_graphics4_PipelineState();
	this.pipeline.inputLayout = [openfl__$internal_renderer_opengl_batcher_PipelineSetup.vertexStructure];
	this.pipeline.vertexShader = kha_Shaders.batch_vert;
	this.pipeline.fragmentShader = openfl__$internal_renderer_opengl_batcher_PipelineSetup.fragmentShader;
	this.pipeline.blendOperation = blendOperation;
	this.pipeline.blendSource = blendSource;
	this.pipeline.blendDestination = blendDestination;
	this.pipeline.alphaBlendOperation = blendOperation;
	this.pipeline.alphaBlendSource = blendSource;
	this.pipeline.alphaBlendDestination = blendDestination;
	if(masked) {
		this.pipeline.stencilMode = 2;
		this.pipeline.stencilReferenceValue = kha_graphics4_StencilValue.Dynamic;
	}
	this.pipeline.compile();
	this.uProjMatrix = this.pipeline.getConstantLocation("uProjMatrix");
	this.uPositionScale = this.pipeline.getConstantLocation("uPostionScale");
	var _g = [];
	var _g1 = 0;
	var _g2 = openfl__$internal_renderer_opengl_batcher_PipelineSetup.numTextures;
	while(_g1 < _g2) {
		var i = _g1++;
		_g.push(this.pipeline.getTextureUnit("uSamplers[" + i + "]"));
	}
	this.textureUnits = _g;
};
$hxClasses["openfl._internal.renderer.opengl.batcher.PipelineSetup"] = openfl__$internal_renderer_opengl_batcher_PipelineSetup;
openfl__$internal_renderer_opengl_batcher_PipelineSetup.__name__ = "openfl._internal.renderer.opengl.batcher.PipelineSetup";
openfl__$internal_renderer_opengl_batcher_PipelineSetup.init = function() {
	if(openfl__$internal_renderer_opengl_batcher_PipelineSetup.vertexStructure != null) {
		return;
	}
	openfl__$internal_renderer_opengl_batcher_PipelineSetup.vertexStructure = new kha_graphics4_VertexStructure();
	openfl__$internal_renderer_opengl_batcher_PipelineSetup.vertexStructure.add("aVertexPosition",1);
	openfl__$internal_renderer_opengl_batcher_PipelineSetup.vertexStructure.add("aTextureCoord",1);
	openfl__$internal_renderer_opengl_batcher_PipelineSetup.vertexStructure.add("aTextureId",0);
	openfl__$internal_renderer_opengl_batcher_PipelineSetup.vertexStructure.add("aColorOffset",3);
	openfl__$internal_renderer_opengl_batcher_PipelineSetup.vertexStructure.add("aColorMultiplier",3);
	openfl__$internal_renderer_opengl_batcher_PipelineSetup.vertexStructure.add("aPremultipliedAlpha",0);
	openfl__$internal_renderer_opengl_batcher_PipelineSetup.numTextures = kha_SystemImpl.gl.getParameter(34930);
	if(openfl__$internal_renderer_opengl_batcher_PipelineSetup.numTextures > 32) {
		openfl__$internal_renderer_opengl_batcher_PipelineSetup.numTextures = 32;
	} else {
		var v = openfl__$internal_renderer_opengl_batcher_PipelineSetup.nextPowerOfTwo(openfl__$internal_renderer_opengl_batcher_PipelineSetup.numTextures);
		if(openfl__$internal_renderer_opengl_batcher_PipelineSetup.numTextures != v) {
			openfl__$internal_renderer_opengl_batcher_PipelineSetup.numTextures = v >> 1;
		}
	}
	while(openfl__$internal_renderer_opengl_batcher_PipelineSetup.numTextures >= 1) try {
		openfl__$internal_renderer_opengl_batcher_PipelineSetup.fragmentShader = Reflect.field(kha_Shaders,"batch_" + openfl__$internal_renderer_opengl_batcher_PipelineSetup.numTextures + "_frag");
		openfl__$internal_renderer_opengl_batcher_PipelineSetup.pNormal = new openfl__$internal_renderer_opengl_batcher_PipelineSetup(0,1,5,false);
		break;
	} catch( e ) {
		haxe_CallStack.lastException = e;
		openfl__$internal_utils_Log.warn("Coudln't compile multi-texture program for " + openfl__$internal_renderer_opengl_batcher_PipelineSetup.numTextures + " samplers, trying twice as less, error: " + Std.string(((e) instanceof js__$Boot_HaxeError) ? e.val : e),{ fileName : "openfl/_internal/renderer/opengl/batcher/PipelineSetup.hx", lineNumber : 56, className : "openfl._internal.renderer.opengl.batcher.PipelineSetup", methodName : "init"});
		openfl__$internal_renderer_opengl_batcher_PipelineSetup.numTextures >>= 1;
	}
	if(openfl__$internal_renderer_opengl_batcher_PipelineSetup.pNormal == null) {
		throw new js__$Boot_HaxeError("Could not compile a multi-texture shader for any number of textures, something must be horribly broken!");
	}
};
openfl__$internal_renderer_opengl_batcher_PipelineSetup.nextPowerOfTwo = function(v) {
	--v;
	v |= v >>> 1;
	v |= v >>> 2;
	v |= v >>> 4;
	v |= v >>> 8;
	v |= v >>> 16;
	return ++v;
};
openfl__$internal_renderer_opengl_batcher_PipelineSetup.prototype = {
	pipeline: null
	,uProjMatrix: null
	,uPositionScale: null
	,textureUnits: null
	,__class__: openfl__$internal_renderer_opengl_batcher_PipelineSetup
};
var openfl__$internal_renderer_opengl_batcher_Quad = function() {
	var this1 = new Float32Array(8);
	this.vertexData = this1;
	this.alpha = 1;
	this.smoothing = false;
};
$hxClasses["openfl._internal.renderer.opengl.batcher.Quad"] = openfl__$internal_renderer_opengl_batcher_Quad;
openfl__$internal_renderer_opengl_batcher_Quad.__name__ = "openfl._internal.renderer.opengl.batcher.Quad";
openfl__$internal_renderer_opengl_batcher_Quad.prototype = {
	vertexData: null
	,texture: null
	,alpha: null
	,colorTransform: null
	,blendMode: null
	,smoothing: null
	,setup: function(alpha,colorTransform,blendMode,smoothing) {
		this.alpha = alpha;
		this.colorTransform = colorTransform;
		this.blendMode = blendMode;
		this.smoothing = smoothing;
	}
	,cleanup: function() {
		this.texture = null;
		this.colorTransform = null;
	}
	,__class__: openfl__$internal_renderer_opengl_batcher_Quad
};
var openfl__$internal_renderer_opengl_batcher_QuadTextureData = function(data,uvs,premultipliedAlpha) {
	this.data = data;
	this.uvs = uvs;
	this.premultipliedAlpha = premultipliedAlpha;
};
$hxClasses["openfl._internal.renderer.opengl.batcher.QuadTextureData"] = openfl__$internal_renderer_opengl_batcher_QuadTextureData;
openfl__$internal_renderer_opengl_batcher_QuadTextureData.__name__ = "openfl._internal.renderer.opengl.batcher.QuadTextureData";
openfl__$internal_renderer_opengl_batcher_QuadTextureData.createFullFrame = function(data,pma) {
	return new openfl__$internal_renderer_opengl_batcher_QuadTextureData(data,openfl__$internal_renderer_opengl_batcher_QuadTextureData.fullFrameUVs,pma);
};
openfl__$internal_renderer_opengl_batcher_QuadTextureData.createRegion = function(data,u0,v0,u1,v1,u2,v2,u3,v3,pma) {
	return new openfl__$internal_renderer_opengl_batcher_QuadTextureData(data,openfl__$internal_renderer_opengl_batcher_QuadTextureData.createArray(u0,v0,u1,v1,u2,v2,u3,v3),pma);
};
openfl__$internal_renderer_opengl_batcher_QuadTextureData.createArray = function(u0,v0,u1,v1,u2,v2,u3,v3) {
	var this1 = new Float32Array(8);
	var a = this1;
	a[0] = u0;
	a[1] = v0;
	a[2] = u1;
	a[3] = v1;
	a[4] = u2;
	a[5] = v2;
	a[6] = u3;
	a[7] = v3;
	return a;
};
openfl__$internal_renderer_opengl_batcher_QuadTextureData.prototype = {
	data: null
	,uvs: null
	,premultipliedAlpha: null
	,__class__: openfl__$internal_renderer_opengl_batcher_QuadTextureData
};
var openfl__$internal_renderer_opengl_batcher_TextureData = function(image) {
	this.lastSmoothing = false;
	this.enabledTick = 0;
	this.textureUnitId = -1;
	this.image = image;
};
$hxClasses["openfl._internal.renderer.opengl.batcher.TextureData"] = openfl__$internal_renderer_opengl_batcher_TextureData;
openfl__$internal_renderer_opengl_batcher_TextureData.__name__ = "openfl._internal.renderer.opengl.batcher.TextureData";
openfl__$internal_renderer_opengl_batcher_TextureData.createImageFromGLTexture = function(texture) {
	var i = new kha_WebGLImage(0,0,0,false,0,0);
	i.texture = texture;
	return i;
};
openfl__$internal_renderer_opengl_batcher_TextureData.prototype = {
	image: null
	,textureUnitId: null
	,enabledTick: null
	,lastSmoothing: null
	,get_glTexture: function() {
		return this.image.texture;
	}
	,__class__: openfl__$internal_renderer_opengl_batcher_TextureData
	,__properties__: {get_glTexture:"get_glTexture"}
};
var openfl__$internal_sound_AudioBuffer = function() {
};
$hxClasses["openfl._internal.sound.AudioBuffer"] = openfl__$internal_sound_AudioBuffer;
openfl__$internal_sound_AudioBuffer.__name__ = "openfl._internal.sound.AudioBuffer";
openfl__$internal_sound_AudioBuffer.fromBase64 = function(base64String) {
	if(base64String == null) {
		return null;
	}
	if(base64String.indexOf(",") == -1) {
		base64String = "data:" + openfl__$internal_sound_AudioBuffer.__getCodec(haxe_crypto_Base64.decode(base64String)) + ";base64," + base64String;
	}
	var audioBuffer = new openfl__$internal_sound_AudioBuffer();
	audioBuffer.src = new Howl({ src : [base64String], html5 : true, preload : false});
	return audioBuffer;
};
openfl__$internal_sound_AudioBuffer.fromBytes = function(bytes) {
	if(bytes == null) {
		return null;
	}
	var audioBuffer = new openfl__$internal_sound_AudioBuffer();
	audioBuffer.src = new Howl({ src : ["data:" + openfl__$internal_sound_AudioBuffer.__getCodec(bytes) + ";base64," + haxe_crypto_Base64.encode(bytes)], html5 : true, preload : false});
	return audioBuffer;
};
openfl__$internal_sound_AudioBuffer.fromFile = function(path) {
	if(path == null) {
		return null;
	}
	var audioBuffer = new openfl__$internal_sound_AudioBuffer();
	audioBuffer.src = new Howl({ src : [path], preload : false});
	return audioBuffer;
};
openfl__$internal_sound_AudioBuffer.fromFiles = function(paths) {
	var audioBuffer = new openfl__$internal_sound_AudioBuffer();
	audioBuffer.src = new Howl({ src : paths, preload : false});
	return audioBuffer;
};
openfl__$internal_sound_AudioBuffer.loadFromFile = function(path) {
	var this1 = new openfl__$internal_app_Future();
	var promise = this1;
	var audioBuffer = openfl__$internal_sound_AudioBuffer.fromFile(path);
	if(audioBuffer != null) {
		audioBuffer.src.on("load",function() {
			openfl__$internal_app__$Promise_Promise_$Impl_$.complete(promise,audioBuffer);
		});
		audioBuffer.src.on("loaderror",function(id,msg) {
			openfl__$internal_app__$Promise_Promise_$Impl_$.error(promise,msg);
		});
		audioBuffer.src.load();
	} else {
		openfl__$internal_app__$Promise_Promise_$Impl_$.error(promise,null);
	}
	return promise;
};
openfl__$internal_sound_AudioBuffer.loadFromFiles = function(paths) {
	var this1 = new openfl__$internal_app_Future();
	var promise = this1;
	var audioBuffer = openfl__$internal_sound_AudioBuffer.fromFiles(paths);
	if(audioBuffer != null) {
		audioBuffer.src.on("load",function() {
			openfl__$internal_app__$Promise_Promise_$Impl_$.complete(promise,audioBuffer);
		});
		audioBuffer.src.on("loaderror",function() {
			openfl__$internal_app__$Promise_Promise_$Impl_$.error(promise,null);
		});
		audioBuffer.src.load();
	} else {
		openfl__$internal_app__$Promise_Promise_$Impl_$.error(promise,null);
	}
	return promise;
};
openfl__$internal_sound_AudioBuffer.__getCodec = function(bytes) {
	var signature = bytes.getString(0,4);
	switch(signature) {
	case "OggS":
		return "audio/ogg";
	case "RIFF":
		if(bytes.getString(8,4) == "WAVE") {
			return "audio/wav";
		} else {
			var _g = bytes.b[2];
			var _g1 = bytes.b[1];
			switch(bytes.b[0]) {
			case 73:
				if(_g1 == 68) {
					if(_g == 51) {
						return "audio/mp3";
					}
				}
				break;
			case 255:
				switch(_g1) {
				case 250:case 251:
					return "audio/mp3";
				default:
				}
				break;
			default:
			}
		}
		break;
	case "fLaC":
		return "audio/flac";
	default:
		var _g2 = bytes.b[2];
		var _g11 = bytes.b[1];
		switch(bytes.b[0]) {
		case 73:
			if(_g11 == 68) {
				if(_g2 == 51) {
					return "audio/mp3";
				}
			}
			break;
		case 255:
			switch(_g11) {
			case 250:case 251:
				return "audio/mp3";
			default:
			}
			break;
		default:
		}
	}
	openfl__$internal_utils_Log.error("Unsupported sound format",{ fileName : "openfl/_internal/sound/AudioBuffer.hx", lineNumber : 123, className : "openfl._internal.sound.AudioBuffer", methodName : "__getCodec"});
	return null;
};
openfl__$internal_sound_AudioBuffer.prototype = {
	bitsPerSample: null
	,channels: null
	,data: null
	,sampleRate: null
	,src: null
	,dispose: function() {
		this.src.unload();
	}
	,__class__: openfl__$internal_sound_AudioBuffer
};
var openfl__$internal_sound_AudioSource = function(buffer) {
	this.onComplete = new openfl__$internal_app_Event0();
	this.buffer = buffer;
	this.id = -1;
	this.offset = 0;
	this.loops = 0;
	this._gain = 1;
	this._position_x = this._position_z = 0;
};
$hxClasses["openfl._internal.sound.AudioSource"] = openfl__$internal_sound_AudioSource;
openfl__$internal_sound_AudioSource.__name__ = "openfl._internal.sound.AudioSource";
openfl__$internal_sound_AudioSource.prototype = {
	onComplete: null
	,buffer: null
	,loops: null
	,offset: null
	,_gain: null
	,_length: null
	,_position_x: null
	,_position_z: null
	,id: null
	,playing: null
	,completed: null
	,dispose: function() {
	}
	,play: function() {
		if(this.playing || this.buffer == null) {
			return;
		}
		this.playing = true;
		this.completed = false;
		var time = this.get_currentTime();
		var cacheVolume = this.buffer.src._volume;
		this.buffer.src._volume = this.get_gain();
		this.id = this.buffer.src.play();
		this.buffer.src._volume = cacheVolume;
		var pan = this._position_x;
		this._position_x = pan;
		this._position_z = -1 * Math.sqrt(1 - Math.pow(pan,2));
		this.buffer.src.on("end",$bind(this,this.howl_onEnd),this.id);
		this.set_currentTime(time);
	}
	,pause: function() {
		this.playing = false;
		if(this.buffer != null) {
			this.buffer.src.pause(this.id);
		}
	}
	,stop: function() {
		this.playing = false;
		if(this.buffer != null) {
			this.buffer.src.stop(this.id);
		}
	}
	,howl_onEnd: function() {
		this.playing = false;
		if(this.loops > 0) {
			this.loops--;
			this.stop();
			this.play();
		} else {
			this.buffer.src.stop(this.id);
			this.completed = true;
			this.onComplete.dispatch();
		}
	}
	,get_currentTime: function() {
		if(this.id == -1) {
			return 0;
		}
		if(this.completed) {
			return this.get_length();
		} else if(this.buffer != null) {
			var time = (this.buffer.src.seek(this.id) * 1000 | 0) - this.offset;
			if(time < 0) {
				return 0;
			}
			return time;
		}
		return 0;
	}
	,set_currentTime: function(value) {
		if(this.buffer != null) {
			var pos = (value + this.offset) / 1000;
			if(pos < 0) {
				pos = 0;
			}
			this.buffer.src.seek(pos,this.id);
		}
		return value;
	}
	,get_gain: function() {
		return this._gain;
	}
	,set_gain: function(value) {
		if(this.buffer != null && this.id != -1) {
			this.buffer.src.volume(value,this.id);
		}
		return this._gain = value;
	}
	,get_length: function() {
		if(this._length != 0) {
			return this._length;
		}
		if(this.buffer != null) {
			return this.buffer.src.duration() * 1000 | 0;
		}
		return 0;
	}
	,set_length: function(value) {
		return this._length = value;
	}
	,get_pan: function() {
		return this._position_x;
	}
	,set_pan: function(pan) {
		this._position_x = pan;
		this._position_z = -1 * Math.sqrt(1 - Math.pow(pan,2));
		return pan;
	}
	,__class__: openfl__$internal_sound_AudioSource
	,__properties__: {set_pan:"set_pan",get_pan:"get_pan",set_length:"set_length",get_length:"get_length",set_gain:"set_gain",get_gain:"get_gain",set_currentTime:"set_currentTime",get_currentTime:"get_currentTime"}
};
var openfl__$internal_stage3D_AGALConverter = function() { };
$hxClasses["openfl._internal.stage3D.AGALConverter"] = openfl__$internal_stage3D_AGALConverter;
openfl__$internal_stage3D_AGALConverter.__name__ = "openfl._internal.stage3D.AGALConverter";
openfl__$internal_stage3D_AGALConverter.prefixFromType = function(regType,programType) {
	switch(regType) {
	case 0:
		return "va";
	case 1:
		if(programType == openfl__$internal_stage3D__$AGALConverter_ProgramType.VERTEX) {
			return "vc";
		} else {
			return "fc";
		}
		break;
	case 2:
		if(programType == openfl__$internal_stage3D__$AGALConverter_ProgramType.VERTEX) {
			return "vt";
		} else {
			return "ft";
		}
		break;
	case 3:
		return "output_";
	case 4:
		return "v";
	case 5:
		return "sampler";
	default:
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Invalid data!"));
	}
};
openfl__$internal_stage3D_AGALConverter.readUInt64 = function(byteArray) {
	var low = byteArray.readInt();
	var high = byteArray.readInt();
	var this1 = new haxe__$Int64__$_$_$Int64(high,low);
	return this1;
};
openfl__$internal_stage3D_AGALConverter.convertToGLSL = function(gl,agal,samplerState) {
	agal.position = 0;
	agal.__endian = 1;
	var magic = agal.readByte() & 255;
	if(magic == 176) {
		return agal.readUTF();
	}
	if(magic != 160) {
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Magic value must be 0xA0, may not be AGAL"));
	}
	var version = agal.readInt();
	if(version != 1) {
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Version must be 1"));
	}
	var shaderTypeID = agal.readByte() & 255;
	if(shaderTypeID != 161) {
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Shader type ID must be 0xA1"));
	}
	var programType = (agal.readByte() & 255) == 0 ? openfl__$internal_stage3D__$AGALConverter_ProgramType.VERTEX : openfl__$internal_stage3D__$AGALConverter_ProgramType.FRAGMENT;
	var map = new openfl__$internal_stage3D_RegisterMap();
	var sb_b = "";
	while(agal.position < agal.length) {
		var opcode = agal.readInt();
		var dest = agal.readUnsignedInt();
		var source1 = openfl__$internal_stage3D_AGALConverter.readUInt64(agal);
		var source2 = openfl__$internal_stage3D_AGALConverter.readUInt64(agal);
		var dr = openfl__$internal_stage3D__$AGALConverter_DestRegister.parse(dest,programType);
		var sr1 = openfl__$internal_stage3D__$AGALConverter_SourceRegister.parse(source1,programType,dr.mask);
		var sr2 = openfl__$internal_stage3D__$AGALConverter_SourceRegister.parse(source2,programType,dr.mask);
		sb_b += "\t";
		switch(opcode) {
		case 0:
			sb_b += Std.string(dr.toGLSL() + " = " + sr1.toGLSL() + "; // mov");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 1:
			sb_b += Std.string(dr.toGLSL() + " = " + sr1.toGLSL() + " + " + sr2.toGLSL() + "; // add");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 2:
			sb_b += Std.string(dr.toGLSL() + " = " + sr1.toGLSL() + " - " + sr2.toGLSL() + "; // sub");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 3:
			sb_b += Std.string(dr.toGLSL() + " = " + sr1.toGLSL() + " * " + sr2.toGLSL() + "; // mul");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 4:
			sb_b += Std.string(dr.toGLSL() + " = " + sr1.toGLSL() + " / " + sr2.toGLSL() + "; // div");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 5:
			var sr = sr1.toGLSL();
			if(sr.indexOf(".") > -1) {
				sb_b += Std.string(dr.toGLSL() + " = 1.0 / " + sr1.toGLSL() + "; // rcp");
			} else {
				sb_b += Std.string(dr.toGLSL() + " = vec4(1) / " + sr1.toGLSL() + "; // rcp");
			}
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 6:
			sb_b += Std.string(dr.toGLSL() + " = min(" + sr1.toGLSL() + ", " + sr2.toGLSL() + "); // min");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 7:
			sb_b += Std.string(dr.toGLSL() + " = max(" + sr1.toGLSL() + ", " + sr2.toGLSL() + "); // max");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 8:
			sb_b += Std.string(dr.toGLSL() + " = fract(" + sr1.toGLSL() + "); // frc");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 9:
			sb_b += Std.string(dr.toGLSL() + " = sqrt(" + sr1.toGLSL() + "); // sqrt");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 10:
			sb_b += Std.string(dr.toGLSL() + " = inversesqrt(" + sr1.toGLSL() + "); // rsq");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 11:
			sb_b += Std.string(dr.toGLSL() + " = pow(" + sr1.toGLSL() + ", " + sr2.toGLSL() + "); // pow");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 12:
			sb_b += Std.string(dr.toGLSL() + " = log2(" + sr1.toGLSL() + "); // log");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 13:
			sb_b += Std.string(dr.toGLSL() + " = exp2(" + sr1.toGLSL() + "); // exp");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 14:
			sb_b += Std.string(dr.toGLSL() + " = normalize(" + sr1.toGLSL() + "); // normalize");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 15:
			sb_b += Std.string(dr.toGLSL() + " = sin(" + sr1.toGLSL() + "); // sin");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 16:
			sb_b += Std.string(dr.toGLSL() + " = cos(" + sr1.toGLSL() + "); // cos");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 17:
			sr1.sourceMask = sr2.sourceMask = 7;
			sb_b += Std.string(dr.toGLSL() + " = cross(vec3(" + sr1.toGLSL() + "), vec3(" + sr2.toGLSL() + ")); // crs");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 18:
			sr1.sourceMask = sr2.sourceMask = 7;
			sb_b += Std.string(dr.toGLSL() + " = vec4(dot(vec3(" + sr1.toGLSL() + "), vec3(" + sr2.toGLSL() + ")))" + dr.getWriteMask() + "; // dp3");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 19:
			sr1.sourceMask = sr2.sourceMask = 15;
			sb_b += Std.string(dr.toGLSL() + " = vec4(dot(vec4(" + sr1.toGLSL() + "), vec4(" + sr2.toGLSL() + ")))" + dr.getWriteMask() + "; // dp4");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 20:
			sb_b += Std.string(dr.toGLSL() + " = abs(" + sr1.toGLSL() + "); // abs");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 21:
			sb_b += Std.string(dr.toGLSL() + " = -" + sr1.toGLSL() + "; // neg");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 22:
			sb_b += Std.string(dr.toGLSL() + " = clamp(" + sr1.toGLSL() + ", 0.0, 1.0); // saturate");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 23:
			var existingUsage = map.getRegisterUsage(sr2);
			if(existingUsage != openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4 && existingUsage != openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY) {
				sb_b += Std.string(dr.toGLSL() + " = " + sr1.toGLSL() + " * mat3(" + sr2.toGLSL(false) + "); // m33");
				map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.MATRIX_4_4);
			} else {
				sr1.sourceMask = sr2.sourceMask = 7;
				sb_b += Std.string(dr.toGLSL() + " = vec3(" + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,0) + "), " + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,1) + ")," + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,2) + ")); // m33");
				map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4,0);
				map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4,1);
				map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4,2);
			}
			break;
		case 24:
			var existingUsage1 = map.getRegisterUsage(sr2);
			if(existingUsage1 != openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4 && existingUsage1 != openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY) {
				sb_b += Std.string(dr.toGLSL() + " = " + sr1.toGLSL() + " * " + sr2.toGLSL(false) + "; // m44");
				map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.MATRIX_4_4);
			} else {
				sr1.sourceMask = sr2.sourceMask = 15;
				sb_b += Std.string(dr.toGLSL() + " = vec4(" + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,0) + "), " + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,1) + "), " + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,2) + "), " + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,3) + ")); // m44");
				map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4,0);
				map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4,1);
				map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4,2);
				map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4,3);
			}
			break;
		case 25:
			dr.mask &= 7;
			var existingUsage2 = map.getRegisterUsage(sr2);
			if(existingUsage2 != openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4 && existingUsage2 != openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY) {
				sb_b += Std.string(dr.toGLSL() + " = " + sr1.toGLSL() + " * " + sr2.toGLSL(false) + "; // m34");
				map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.MATRIX_4_4);
			} else {
				sr1.sourceMask = sr2.sourceMask = 15;
				sb_b += Std.string(dr.toGLSL() + " = vec3(" + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,0) + "), " + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,1) + ")," + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,2) + ")); // m34");
				map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4,0);
				map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4,1);
				map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4,2);
			}
			break;
		case 39:
			sr1.sourceMask = 15;
			sb_b += Std.string("if (any(lessThan(" + sr1.toGLSL() + ", vec4(0)))) discard;");
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 40:
			var sampler = openfl__$internal_stage3D__$AGALConverter_SamplerRegister.parse(source2,programType);
			switch(sampler.d) {
			case 0:
				sr1.sourceMask = 3;
				map.addSaR(sampler,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.SAMPLER_2D);
				sb_b += Std.string(dr.toGLSL() + " = texture2D(" + sampler.toGLSL() + ", " + sr1.toGLSL() + "); // tex");
				break;
			case 1:
				sr1.sourceMask = 7;
				sb_b += Std.string(dr.toGLSL() + " = textureCube(" + sampler.toGLSL() + ", " + sr1.toGLSL() + "); // tex");
				map.addSaR(sampler,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.SAMPLER_CUBE);
				break;
			}
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			if(samplerState != null) {
				samplerState[sampler.n] = sampler.toSamplerState();
			}
			break;
		case 41:
			sr1.sourceMask = sr2.sourceMask = 15;
			sb_b += Std.string(dr.toGLSL() + " = vec4(greaterThanEqual(" + sr1.toGLSL() + ", " + sr2.toGLSL() + "))" + dr.getWriteMask() + "; // ste");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 42:
			sr1.sourceMask = sr2.sourceMask = 15;
			sb_b += Std.string(dr.toGLSL() + " = vec4(lessThan(" + sr1.toGLSL() + ", " + sr2.toGLSL() + "))" + dr.getWriteMask() + "; // slt");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 44:
			sr1.sourceMask = sr2.sourceMask = 15;
			sb_b += Std.string(dr.toGLSL() + " = vec4(equal(" + sr1.toGLSL() + ", " + sr2.toGLSL() + "))" + dr.getWriteMask() + "; // seq");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 45:
			sr1.sourceMask = sr2.sourceMask = 15;
			sb_b += Std.string(dr.toGLSL() + " = vec4(notEqual(" + sr1.toGLSL() + ", " + sr2.toGLSL() + "))" + dr.getWriteMask() + "; // sne");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Opcode " + opcode));
		}
		sb_b += "\n";
	}
	if(openfl__$internal_stage3D_AGALConverter.limitedProfile == null) {
		var version1 = gl.getParameter(7938);
		openfl__$internal_stage3D_AGALConverter.limitedProfile = version1.indexOf("OpenGL ES") > -1 || version1.indexOf("WebGL") > -1;
	}
	var glsl_b = "";
	glsl_b += Std.string("// AGAL " + (programType == openfl__$internal_stage3D__$AGALConverter_ProgramType.VERTEX ? "vertex" : "fragment") + " shader\n");
	if(openfl__$internal_stage3D_AGALConverter.limitedProfile) {
		glsl_b += "#version 100\n";
		glsl_b += "precision highp float;\n";
	} else {
		glsl_b += "#version 120\n";
	}
	glsl_b += Std.string(map.toGLSL(false));
	if(programType == openfl__$internal_stage3D__$AGALConverter_ProgramType.VERTEX) {
		glsl_b += "uniform vec4 vcPositionScale;\n";
	}
	glsl_b += "void main() {\n";
	glsl_b += Std.string(map.toGLSL(true));
	glsl_b += Std.string(sb_b);
	if(programType == openfl__$internal_stage3D__$AGALConverter_ProgramType.VERTEX) {
		glsl_b += "\tgl_Position *= vcPositionScale;\n";
	}
	glsl_b += "}\n";
	return glsl_b;
};
var openfl__$internal_stage3D__$AGALConverter_DestRegister = function() {
};
$hxClasses["openfl._internal.stage3D._AGALConverter.DestRegister"] = openfl__$internal_stage3D__$AGALConverter_DestRegister;
openfl__$internal_stage3D__$AGALConverter_DestRegister.__name__ = "openfl._internal.stage3D._AGALConverter.DestRegister";
openfl__$internal_stage3D__$AGALConverter_DestRegister.parse = function(v,programType) {
	var dr = new openfl__$internal_stage3D__$AGALConverter_DestRegister();
	dr.programType = programType;
	dr.type = v >>> 24 & 15;
	dr.mask = v >>> 16 & 15;
	dr.n = v & 65535;
	return dr;
};
openfl__$internal_stage3D__$AGALConverter_DestRegister.prototype = {
	mask: null
	,n: null
	,programType: null
	,type: null
	,getWriteMask: function() {
		var str = ".";
		if((this.mask & 1) != 0) {
			str += "x";
		}
		if((this.mask & 2) != 0) {
			str += "y";
		}
		if((this.mask & 4) != 0) {
			str += "z";
		}
		if((this.mask & 8) != 0) {
			str += "w";
		}
		return str;
	}
	,toGLSL: function(useMask) {
		if(useMask == null) {
			useMask = true;
		}
		var str;
		if(this.type == 3) {
			str = this.programType == openfl__$internal_stage3D__$AGALConverter_ProgramType.VERTEX ? "gl_Position" : "gl_FragColor";
		} else {
			str = openfl__$internal_stage3D_AGALConverter.prefixFromType(this.type,this.programType) + this.n;
		}
		if(useMask && this.mask != 15) {
			str += this.getWriteMask();
		}
		return str;
	}
	,__class__: openfl__$internal_stage3D__$AGALConverter_DestRegister
};
var openfl__$internal_stage3D__$AGALConverter_ProgramType = $hxEnums["openfl._internal.stage3D._AGALConverter.ProgramType"] = { __ename__ : "openfl._internal.stage3D._AGALConverter.ProgramType", __constructs__ : ["VERTEX","FRAGMENT"]
	,VERTEX: {_hx_index:0,__enum__:"openfl._internal.stage3D._AGALConverter.ProgramType",toString:$estr}
	,FRAGMENT: {_hx_index:1,__enum__:"openfl._internal.stage3D._AGALConverter.ProgramType",toString:$estr}
};
var openfl__$internal_stage3D_RegisterMap = function() {
	this.mEntries = [];
};
$hxClasses["openfl._internal.stage3D.RegisterMap"] = openfl__$internal_stage3D_RegisterMap;
openfl__$internal_stage3D_RegisterMap.__name__ = "openfl._internal.stage3D.RegisterMap";
openfl__$internal_stage3D_RegisterMap.prototype = {
	mEntries: null
	,add: function(type,name,number,usage) {
		var _g = 0;
		var _g1 = this.mEntries;
		while(_g < _g1.length) {
			var entry = _g1[_g];
			++_g;
			if(entry.type == type && entry.name == name && entry.number == number) {
				if(entry.usage != usage) {
					throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Cannot use register in multiple ways yet (mat4/vec4)"));
				}
				return;
			}
		}
		var entry1 = new openfl__$internal_stage3D__$AGALConverter_RegisterMapEntry();
		entry1.type = type;
		entry1.name = name;
		entry1.number = number;
		entry1.usage = usage;
		this.mEntries.push(entry1);
	}
	,addDR: function(dr,usage) {
		this.add(dr.type,dr.toGLSL(false),dr.n,usage);
	}
	,addSaR: function(sr,usage) {
		this.add(sr.type,sr.toGLSL(),sr.n,usage);
	}
	,addSR: function(sr,usage,offset) {
		if(offset == null) {
			offset = 0;
		}
		if(sr.d != 0) {
			this.add(sr.itype,openfl__$internal_stage3D_AGALConverter.prefixFromType(sr.itype,sr.programType) + sr.n,sr.n,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			this.add(sr.type,openfl__$internal_stage3D_AGALConverter.prefixFromType(sr.type,sr.programType) + sr.o,sr.o,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY);
			return;
		}
		this.add(sr.type,sr.toGLSL(false,offset),sr.n + offset,usage);
	}
	,getRegisterUsage: function(sr) {
		if(sr.d != 0) {
			return openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY;
		}
		return this.getUsage(sr.type,sr.toGLSL(false),sr.n);
	}
	,getUsage: function(type,name,number) {
		var _g = 0;
		var _g1 = this.mEntries;
		while(_g < _g1.length) {
			var entry = _g1[_g];
			++_g;
			if(entry.type == type && entry.name == name && entry.number == number) {
				return entry.usage;
			}
		}
		return openfl__$internal_stage3D__$AGALConverter_RegisterUsage.UNUSED;
	}
	,toGLSL: function(tempRegistersOnly) {
		this.mEntries.sort(function(a,b) {
			return a.number - b.number;
		});
		var arrayCount = new haxe_ds_ObjectMap();
		var entry;
		var _g = 0;
		var _g1 = this.mEntries.length;
		while(_g < _g1) {
			var i = _g++;
			entry = this.mEntries[i];
			if(entry.usage == openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY) {
				if(i < this.mEntries.length - 1) {
					var v = this.mEntries[i + 1].number - entry.number;
					arrayCount.set(entry,v);
				} else {
					arrayCount.set(entry,128);
				}
			}
		}
		this.mEntries.sort(function(a1,b1) {
			return js_Boot.__cast(a1.type , Int) - js_Boot.__cast(b1.type , Int);
		});
		var sb_b = "";
		var _g2 = 0;
		var _g3 = this.mEntries.length;
		while(_g2 < _g3) {
			var i1 = _g2++;
			entry = this.mEntries[i1];
			if(tempRegistersOnly && entry.type != 2 || !tempRegistersOnly && entry.type == 2) {
				continue;
			}
			if(entry.type == 3) {
				continue;
			}
			switch(entry.type) {
			case 0:
				sb_b += "attribute ";
				break;
			case 1:
				sb_b += "uniform ";
				break;
			case 2:
				sb_b += "\t";
				break;
			case 3:
				break;
			case 4:
				sb_b += "varying ";
				break;
			case 5:
				sb_b += "uniform ";
				break;
			default:
				throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
			}
			switch(entry.usage._hx_index) {
			case 0:
				haxe_Log.trace("Missing switch patten: RegisterUsage.UNUSED",{ fileName : "openfl/_internal/stage3D/AGALConverter.hx", lineNumber : 646, className : "openfl._internal.stage3D.RegisterMap", methodName : "toGLSL"});
				break;
			case 1:
				sb_b += "vec4 ";
				break;
			case 2:
				sb_b += "mat4 ";
				break;
			case 3:
				sb_b += "sampler2D ";
				break;
			case 4:
				haxe_Log.trace("Missing switch patten: RegisterUsage.SAMPLER_2D_ALPHA",{ fileName : "openfl/_internal/stage3D/AGALConverter.hx", lineNumber : 649, className : "openfl._internal.stage3D.RegisterMap", methodName : "toGLSL"});
				break;
			case 5:
				sb_b += "samplerCube ";
				break;
			case 6:
				sb_b += "vec4 ";
				break;
			}
			if(entry.usage == openfl__$internal_stage3D__$AGALConverter_RegisterUsage.SAMPLER_2D_ALPHA) {
				sb_b += "sampler2D ";
				sb_b += Std.string(entry.name);
				sb_b += ";\n";
				sb_b += "uniform ";
				sb_b += "sampler2D ";
				sb_b += Std.string(entry.name + "_alpha");
				sb_b += ";\n";
			} else if(entry.usage == openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY) {
				sb_b += Std.string(entry.name + "[" + arrayCount.h[entry.__id__] + "]");
				sb_b += ";\n";
			} else {
				sb_b += Std.string(entry.name);
				sb_b += ";\n";
			}
		}
		return sb_b;
	}
	,__class__: openfl__$internal_stage3D_RegisterMap
};
var openfl__$internal_stage3D__$AGALConverter_RegisterMapEntry = function() {
};
$hxClasses["openfl._internal.stage3D._AGALConverter.RegisterMapEntry"] = openfl__$internal_stage3D__$AGALConverter_RegisterMapEntry;
openfl__$internal_stage3D__$AGALConverter_RegisterMapEntry.__name__ = "openfl._internal.stage3D._AGALConverter.RegisterMapEntry";
openfl__$internal_stage3D__$AGALConverter_RegisterMapEntry.prototype = {
	name: null
	,number: null
	,type: null
	,usage: null
	,__class__: openfl__$internal_stage3D__$AGALConverter_RegisterMapEntry
};
var openfl__$internal_stage3D__$AGALConverter_RegisterUsage = $hxEnums["openfl._internal.stage3D._AGALConverter.RegisterUsage"] = { __ename__ : "openfl._internal.stage3D._AGALConverter.RegisterUsage", __constructs__ : ["UNUSED","VECTOR_4","MATRIX_4_4","SAMPLER_2D","SAMPLER_2D_ALPHA","SAMPLER_CUBE","VECTOR_4_ARRAY"]
	,UNUSED: {_hx_index:0,__enum__:"openfl._internal.stage3D._AGALConverter.RegisterUsage",toString:$estr}
	,VECTOR_4: {_hx_index:1,__enum__:"openfl._internal.stage3D._AGALConverter.RegisterUsage",toString:$estr}
	,MATRIX_4_4: {_hx_index:2,__enum__:"openfl._internal.stage3D._AGALConverter.RegisterUsage",toString:$estr}
	,SAMPLER_2D: {_hx_index:3,__enum__:"openfl._internal.stage3D._AGALConverter.RegisterUsage",toString:$estr}
	,SAMPLER_2D_ALPHA: {_hx_index:4,__enum__:"openfl._internal.stage3D._AGALConverter.RegisterUsage",toString:$estr}
	,SAMPLER_CUBE: {_hx_index:5,__enum__:"openfl._internal.stage3D._AGALConverter.RegisterUsage",toString:$estr}
	,VECTOR_4_ARRAY: {_hx_index:6,__enum__:"openfl._internal.stage3D._AGALConverter.RegisterUsage",toString:$estr}
};
var openfl__$internal_stage3D__$AGALConverter_SamplerRegister = function() {
};
$hxClasses["openfl._internal.stage3D._AGALConverter.SamplerRegister"] = openfl__$internal_stage3D__$AGALConverter_SamplerRegister;
openfl__$internal_stage3D__$AGALConverter_SamplerRegister.__name__ = "openfl._internal.stage3D._AGALConverter.SamplerRegister";
openfl__$internal_stage3D__$AGALConverter_SamplerRegister.parse = function(v,programType) {
	var sr = new openfl__$internal_stage3D__$AGALConverter_SamplerRegister();
	sr.programType = programType;
	var b = 60;
	b &= 63;
	var a;
	if(b == 0) {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a = this1;
	} else if(b < 32) {
		var this2 = new haxe__$Int64__$_$_$Int64(v.high >> b,v.high << 32 - b | v.low >>> b);
		a = this2;
	} else {
		var this3 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b - 32);
		a = this3;
	}
	var b_high = 0;
	var b_low = 15;
	var this_high = a.high & b_high;
	var this_low = a.low & b_low;
	sr.f = this_low;
	var b1 = 56;
	b1 &= 63;
	var a1;
	if(b1 == 0) {
		var this4 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a1 = this4;
	} else if(b1 < 32) {
		var this5 = new haxe__$Int64__$_$_$Int64(v.high >> b1,v.high << 32 - b1 | v.low >>> b1);
		a1 = this5;
	} else {
		var this6 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b1 - 32);
		a1 = this6;
	}
	var b_high1 = 0;
	var b_low1 = 15;
	var this_high1 = a1.high & b_high1;
	var this_low1 = a1.low & b_low1;
	sr.m = this_low1;
	var b2 = 52;
	b2 &= 63;
	var a2;
	if(b2 == 0) {
		var this7 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a2 = this7;
	} else if(b2 < 32) {
		var this8 = new haxe__$Int64__$_$_$Int64(v.high >> b2,v.high << 32 - b2 | v.low >>> b2);
		a2 = this8;
	} else {
		var this9 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b2 - 32);
		a2 = this9;
	}
	var b_high2 = 0;
	var b_low2 = 15;
	var this_high2 = a2.high & b_high2;
	var this_low2 = a2.low & b_low2;
	sr.w = this_low2;
	var b3 = 48;
	b3 &= 63;
	var a3;
	if(b3 == 0) {
		var this10 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a3 = this10;
	} else if(b3 < 32) {
		var this11 = new haxe__$Int64__$_$_$Int64(v.high >> b3,v.high << 32 - b3 | v.low >>> b3);
		a3 = this11;
	} else {
		var this12 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b3 - 32);
		a3 = this12;
	}
	var b_high3 = 0;
	var b_low3 = 15;
	var this_high3 = a3.high & b_high3;
	var this_low3 = a3.low & b_low3;
	sr.s = this_low3;
	var b4 = 44;
	b4 &= 63;
	var a4;
	if(b4 == 0) {
		var this13 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a4 = this13;
	} else if(b4 < 32) {
		var this14 = new haxe__$Int64__$_$_$Int64(v.high >> b4,v.high << 32 - b4 | v.low >>> b4);
		a4 = this14;
	} else {
		var this15 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b4 - 32);
		a4 = this15;
	}
	var b_high4 = 0;
	var b_low4 = 15;
	var this_high4 = a4.high & b_high4;
	var this_low4 = a4.low & b_low4;
	sr.d = this_low4;
	var b5 = 40;
	b5 &= 63;
	var a5;
	if(b5 == 0) {
		var this16 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a5 = this16;
	} else if(b5 < 32) {
		var this17 = new haxe__$Int64__$_$_$Int64(v.high >> b5,v.high << 32 - b5 | v.low >>> b5);
		a5 = this17;
	} else {
		var this18 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b5 - 32);
		a5 = this18;
	}
	var b_high5 = 0;
	var b_low5 = 15;
	var this_high5 = a5.high & b_high5;
	var this_low5 = a5.low & b_low5;
	sr.t = this_low5;
	var b6 = 32;
	b6 &= 63;
	var a6;
	if(b6 == 0) {
		var this19 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a6 = this19;
	} else if(b6 < 32) {
		var this20 = new haxe__$Int64__$_$_$Int64(v.high >> b6,v.high << 32 - b6 | v.low >>> b6);
		a6 = this20;
	} else {
		var this21 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b6 - 32);
		a6 = this21;
	}
	var b_high6 = 0;
	var b_low6 = 15;
	var this_high6 = a6.high & b_high6;
	var this_low6 = a6.low & b_low6;
	sr.type = this_low6;
	var b7 = 16;
	b7 &= 63;
	var a7;
	if(b7 == 0) {
		var this22 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a7 = this22;
	} else if(b7 < 32) {
		var this23 = new haxe__$Int64__$_$_$Int64(v.high >> b7,v.high << 32 - b7 | v.low >>> b7);
		a7 = this23;
	} else {
		var this24 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b7 - 32);
		a7 = this24;
	}
	var b_high7 = 0;
	var b_low7 = 255;
	var this_high7 = a7.high & b_high7;
	var this_low7 = a7.low & b_low7;
	sr.b = this_low7;
	var b_high8 = 0;
	var b_low8 = 65535;
	var this_high8 = v.high & b_high8;
	var this_low8 = v.low & b_low8;
	sr.n = this_low8;
	return sr;
};
openfl__$internal_stage3D__$AGALConverter_SamplerRegister.prototype = {
	b: null
	,d: null
	,f: null
	,m: null
	,n: null
	,programType: null
	,s: null
	,t: null
	,type: null
	,w: null
	,toGLSL: function() {
		var str = openfl__$internal_stage3D_AGALConverter.prefixFromType(this.type,this.programType) + this.n;
		return str;
	}
	,toSamplerState: function() {
		var magFilter = 0;
		var minFilter = 0;
		var wrapModeS = 0;
		var wrapModeT = 0;
		switch(this.f) {
		case 0:
			magFilter = 9728;
			break;
		case 1:
			magFilter = 9729;
			break;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
		}
		switch(this.m) {
		case 0:
			minFilter = this.f != 0 ? 9729 : 9728;
			break;
		case 1:
			minFilter = this.f != 0 ? 9985 : 9984;
			break;
		case 2:
			minFilter = this.f != 0 ? 9987 : 9986;
			break;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
		}
		switch(this.w) {
		case 0:
			wrapModeS = 33071;
			wrapModeT = 33071;
			break;
		case 1:
			wrapModeS = 10497;
			wrapModeT = 10497;
			break;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
		}
		var ignoreSampler = (this.s & 4) == 4;
		var centroid = (this.s & 1) == 1;
		var lodBias = (this.b << 24 >> 24) / 8.0;
		var maxAniso = 0.0;
		return new openfl__$internal_stage3D_SamplerState(minFilter,magFilter,wrapModeS,wrapModeT,lodBias,maxAniso,ignoreSampler,centroid);
	}
	,__class__: openfl__$internal_stage3D__$AGALConverter_SamplerRegister
};
var openfl__$internal_stage3D__$AGALConverter_SourceRegister = function() {
};
$hxClasses["openfl._internal.stage3D._AGALConverter.SourceRegister"] = openfl__$internal_stage3D__$AGALConverter_SourceRegister;
openfl__$internal_stage3D__$AGALConverter_SourceRegister.__name__ = "openfl._internal.stage3D._AGALConverter.SourceRegister";
openfl__$internal_stage3D__$AGALConverter_SourceRegister.parse = function(v,programType,sourceMask) {
	var sr = new openfl__$internal_stage3D__$AGALConverter_SourceRegister();
	sr.programType = programType;
	var b = 63;
	b &= 63;
	var a;
	if(b == 0) {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a = this1;
	} else if(b < 32) {
		var this2 = new haxe__$Int64__$_$_$Int64(v.high >> b,v.high << 32 - b | v.low >>> b);
		a = this2;
	} else {
		var this3 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b - 32);
		a = this3;
	}
	var b_high = 0;
	var b_low = 1;
	var this_high = a.high & b_high;
	var this_low = a.low & b_low;
	sr.d = this_low;
	var b1 = 48;
	b1 &= 63;
	var a1;
	if(b1 == 0) {
		var this4 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a1 = this4;
	} else if(b1 < 32) {
		var this5 = new haxe__$Int64__$_$_$Int64(v.high >> b1,v.high << 32 - b1 | v.low >>> b1);
		a1 = this5;
	} else {
		var this6 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b1 - 32);
		a1 = this6;
	}
	var b_high1 = 0;
	var b_low1 = 3;
	var this_high1 = a1.high & b_high1;
	var this_low1 = a1.low & b_low1;
	sr.q = this_low1;
	var b2 = 40;
	b2 &= 63;
	var a2;
	if(b2 == 0) {
		var this7 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a2 = this7;
	} else if(b2 < 32) {
		var this8 = new haxe__$Int64__$_$_$Int64(v.high >> b2,v.high << 32 - b2 | v.low >>> b2);
		a2 = this8;
	} else {
		var this9 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b2 - 32);
		a2 = this9;
	}
	var b_high2 = 0;
	var b_low2 = 15;
	var this_high2 = a2.high & b_high2;
	var this_low2 = a2.low & b_low2;
	sr.itype = this_low2;
	var b3 = 32;
	b3 &= 63;
	var a3;
	if(b3 == 0) {
		var this10 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a3 = this10;
	} else if(b3 < 32) {
		var this11 = new haxe__$Int64__$_$_$Int64(v.high >> b3,v.high << 32 - b3 | v.low >>> b3);
		a3 = this11;
	} else {
		var this12 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b3 - 32);
		a3 = this12;
	}
	var b_high3 = 0;
	var b_low3 = 15;
	var this_high3 = a3.high & b_high3;
	var this_low3 = a3.low & b_low3;
	sr.type = this_low3;
	var b4 = 24;
	b4 &= 63;
	var a4;
	if(b4 == 0) {
		var this13 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a4 = this13;
	} else if(b4 < 32) {
		var this14 = new haxe__$Int64__$_$_$Int64(v.high >> b4,v.high << 32 - b4 | v.low >>> b4);
		a4 = this14;
	} else {
		var this15 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b4 - 32);
		a4 = this15;
	}
	var b_high4 = 0;
	var b_low4 = 255;
	var this_high4 = a4.high & b_high4;
	var this_low4 = a4.low & b_low4;
	sr.s = this_low4;
	var b5 = 16;
	b5 &= 63;
	var a5;
	if(b5 == 0) {
		var this16 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a5 = this16;
	} else if(b5 < 32) {
		var this17 = new haxe__$Int64__$_$_$Int64(v.high >> b5,v.high << 32 - b5 | v.low >>> b5);
		a5 = this17;
	} else {
		var this18 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b5 - 32);
		a5 = this18;
	}
	var b_high5 = 0;
	var b_low5 = 255;
	var this_high5 = a5.high & b_high5;
	var this_low5 = a5.low & b_low5;
	sr.o = this_low5;
	var b_high6 = 0;
	var b_low6 = 65535;
	var this_high6 = v.high & b_high6;
	var this_low6 = v.low & b_low6;
	sr.n = this_low6;
	sr.sourceMask = sourceMask;
	return sr;
};
openfl__$internal_stage3D__$AGALConverter_SourceRegister.prototype = {
	d: null
	,itype: null
	,n: null
	,o: null
	,programType: null
	,q: null
	,s: null
	,sourceMask: null
	,type: null
	,toGLSL: function(emitSwizzle,offset) {
		if(offset == null) {
			offset = 0;
		}
		if(emitSwizzle == null) {
			emitSwizzle = true;
		}
		if(this.type == 3) {
			if(this.programType == openfl__$internal_stage3D__$AGALConverter_ProgramType.VERTEX) {
				return "gl_Position";
			} else {
				return "gl_FragColor";
			}
		}
		var fullxyzw = this.s == 228 && this.sourceMask == 15;
		var swizzle = "";
		if(this.type != 5 && !fullxyzw) {
			if((this.sourceMask & 1) != 0) {
				switch(this.s & 3) {
				case 0:
					swizzle += "x";
					break;
				case 1:
					swizzle += "y";
					break;
				case 2:
					swizzle += "z";
					break;
				case 3:
					swizzle += "w";
					break;
				}
			}
			if((this.sourceMask & 2) != 0) {
				switch(this.s >> 2 & 3) {
				case 0:
					swizzle += "x";
					break;
				case 1:
					swizzle += "y";
					break;
				case 2:
					swizzle += "z";
					break;
				case 3:
					swizzle += "w";
					break;
				}
			}
			if((this.sourceMask & 4) != 0) {
				switch(this.s >> 4 & 3) {
				case 0:
					swizzle += "x";
					break;
				case 1:
					swizzle += "y";
					break;
				case 2:
					swizzle += "z";
					break;
				case 3:
					swizzle += "w";
					break;
				}
			}
			if((this.sourceMask & 8) != 0) {
				switch(this.s >> 6 & 3) {
				case 0:
					swizzle += "x";
					break;
				case 1:
					swizzle += "y";
					break;
				case 2:
					swizzle += "z";
					break;
				case 3:
					swizzle += "w";
					break;
				}
			}
		}
		var str = openfl__$internal_stage3D_AGALConverter.prefixFromType(this.type,this.programType);
		if(this.d == 0) {
			str += this.n + offset;
		} else {
			str += this.o;
			var indexComponent;
			switch(this.q) {
			case 0:
				indexComponent = "x";
				break;
			case 1:
				indexComponent = "y";
				break;
			case 2:
				indexComponent = "z";
				break;
			case 3:
				indexComponent = "w";
				break;
			default:
				indexComponent = "";
			}
			var indexRegister = openfl__$internal_stage3D_AGALConverter.prefixFromType(this.itype,this.programType) + this.n + "." + indexComponent;
			str += "[ int(" + indexRegister + ") +" + offset + "]";
		}
		if(emitSwizzle && swizzle != "") {
			str += "." + swizzle;
		}
		return str;
	}
	,__class__: openfl__$internal_stage3D__$AGALConverter_SourceRegister
};
var openfl__$internal_stage3D_GLCompressedTextureFormats = function(gl) {
	this.__formatMapAlpha = new haxe_ds_IntMap();
	this.__formatMap = new haxe_ds_IntMap();
	this.checkDXT(gl);
	this.checkETC1(gl);
	this.checkPVRTC(gl);
};
$hxClasses["openfl._internal.stage3D.GLCompressedTextureFormats"] = openfl__$internal_stage3D_GLCompressedTextureFormats;
openfl__$internal_stage3D_GLCompressedTextureFormats.__name__ = "openfl._internal.stage3D.GLCompressedTextureFormats";
openfl__$internal_stage3D_GLCompressedTextureFormats.reset = function() {
	openfl__$internal_stage3D_GLCompressedTextureFormats.__instance = null;
};
openfl__$internal_stage3D_GLCompressedTextureFormats.prototype = {
	__formatMap: null
	,__formatMapAlpha: null
	,checkDXT: function(gl) {
		var compressedExtension = gl.getExtension("WEBGL_compressed_texture_s3tc");
		if(compressedExtension != null) {
			var v = compressedExtension.COMPRESSED_RGBA_S3TC_DXT1_EXT;
			this.__formatMap.set(0,v);
			var v1 = compressedExtension.COMPRESSED_RGBA_S3TC_DXT5_EXT;
			this.__formatMapAlpha.set(0,v1);
		}
	}
	,checkETC1: function(gl) {
		var compressedExtension = gl.getExtension("WEBGL_compressed_texture_etc1");
		if(compressedExtension != null) {
			var v = compressedExtension.COMPRESSED_RGB_ETC1_WEBGL;
			this.__formatMap.set(2,v);
		}
	}
	,checkPVRTC: function(gl) {
		var compressedExtension = gl.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");
		if(compressedExtension != null) {
			var v = compressedExtension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
			this.__formatMap.set(1,v);
			var v1 = compressedExtension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
			this.__formatMapAlpha.set(1,v1);
		}
	}
	,toTextureFormat: function(alpha,gpuFormat) {
		if(alpha) {
			return this.__formatMap.get(gpuFormat);
		} else {
			return this.__formatMapAlpha.get(gpuFormat);
		}
	}
	,__class__: openfl__$internal_stage3D_GLCompressedTextureFormats
};
var openfl__$internal_stage3D_SamplerState = function(minFilter,magFilter,wrapModeS,wrapModeT,lodBias,maxAniso,ignoreSampler,centroid,mipmapGenerated) {
	if(mipmapGenerated == null) {
		mipmapGenerated = false;
	}
	if(centroid == null) {
		centroid = false;
	}
	if(ignoreSampler == null) {
		ignoreSampler = false;
	}
	if(maxAniso == null) {
		maxAniso = 0.0;
	}
	if(lodBias == null) {
		lodBias = 0.0;
	}
	this.set_minFilter(minFilter);
	this.set_magFilter(magFilter);
	this.set_wrapModeS(wrapModeS);
	this.set_wrapModeT(wrapModeT);
	this.set_lodBias(lodBias);
	this.set_maxAniso(maxAniso);
	this.ignoreSampler = ignoreSampler;
	this.centroid = centroid;
	this.mipmapGenerated = mipmapGenerated;
	this.__samplerDirty = true;
};
$hxClasses["openfl._internal.stage3D.SamplerState"] = openfl__$internal_stage3D_SamplerState;
openfl__$internal_stage3D_SamplerState.__name__ = "openfl._internal.stage3D.SamplerState";
openfl__$internal_stage3D_SamplerState.prototype = {
	lodBias: null
	,magFilter: null
	,maxAniso: null
	,minFilter: null
	,wrapModeS: null
	,wrapModeT: null
	,centroid: null
	,ignoreSampler: null
	,mipmapGenerated: null
	,__samplerDirty: null
	,copyFrom: function(other) {
		if(other == null || other.ignoreSampler) {
			return;
		}
		this.set_minFilter(other.minFilter);
		this.set_magFilter(other.magFilter);
		this.set_wrapModeS(other.wrapModeS);
		this.set_wrapModeT(other.wrapModeT);
		this.set_lodBias(other.lodBias);
		this.set_maxAniso(other.maxAniso);
		this.centroid = other.centroid;
		this.mipmapGenerated = other.mipmapGenerated;
	}
	,equals: function(other) {
		if(this == other) {
			return !this.__samplerDirty;
		}
		if(other == null) {
			return false;
		}
		if(this.minFilter == other.minFilter && this.magFilter == other.magFilter && this.wrapModeS == other.wrapModeS && this.wrapModeT == other.wrapModeT && this.lodBias == other.lodBias && this.maxAniso == other.maxAniso) {
			return this.mipmapGenerated == other.mipmapGenerated;
		} else {
			return false;
		}
	}
	,set_lodBias: function(value) {
		if(this.lodBias != value) {
			this.__samplerDirty = true;
		}
		return this.lodBias = value;
	}
	,set_magFilter: function(value) {
		if(this.magFilter != value) {
			this.__samplerDirty = true;
		}
		return this.magFilter = value;
	}
	,set_maxAniso: function(value) {
		if(this.maxAniso != value) {
			this.__samplerDirty = true;
		}
		return this.maxAniso = value;
	}
	,set_minFilter: function(value) {
		if(this.minFilter != value) {
			this.__samplerDirty = true;
		}
		return this.minFilter = value;
	}
	,set_wrapModeS: function(value) {
		if(this.wrapModeS != value) {
			this.__samplerDirty = true;
		}
		return this.wrapModeS = value;
	}
	,set_wrapModeT: function(value) {
		if(this.wrapModeT != value) {
			this.__samplerDirty = true;
		}
		return this.wrapModeT = value;
	}
	,__class__: openfl__$internal_stage3D_SamplerState
	,__properties__: {set_wrapModeT:"set_wrapModeT",set_wrapModeS:"set_wrapModeS",set_minFilter:"set_minFilter",set_maxAniso:"set_maxAniso",set_magFilter:"set_magFilter",set_lodBias:"set_lodBias"}
};
var openfl__$internal_stage3D_atf_ATFReader = function(data,byteArrayOffset) {
	this.version = 0;
	data.position = byteArrayOffset;
	var signature = data.readUTFBytes(3);
	data.position = byteArrayOffset;
	if(signature != "ATF") {
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("ATF signature not found"));
	}
	var length = 0;
	if(data.b[byteArrayOffset + 6] == 255) {
		this.version = data.b[byteArrayOffset + 7];
		data.position = byteArrayOffset + 8;
		var value = data.readUnsignedByte() << 24;
		value |= data.readUnsignedByte() << 16;
		value |= data.readUnsignedByte() << 8;
		value |= data.readUnsignedByte();
		length = value;
	} else {
		this.version = 0;
		data.position = byteArrayOffset + 3;
		var value1 = data.readUnsignedByte() << 16;
		value1 |= data.readUnsignedByte() << 8;
		value1 |= data.readUnsignedByte();
		length = value1;
	}
	if(js_Boot.__cast(byteArrayOffset + length , Int) > data.length) {
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("ATF length exceeds byte array length"));
	}
	this.data = data;
};
$hxClasses["openfl._internal.stage3D.atf.ATFReader"] = openfl__$internal_stage3D_atf_ATFReader;
openfl__$internal_stage3D_atf_ATFReader.__name__ = "openfl._internal.stage3D.atf.ATFReader";
openfl__$internal_stage3D_atf_ATFReader.__readUInt24 = function(data) {
	var value = data.readUnsignedByte() << 16;
	value |= data.readUnsignedByte() << 8;
	value |= data.readUnsignedByte();
	return value;
};
openfl__$internal_stage3D_atf_ATFReader.__readUInt32 = function(data) {
	var value = data.readUnsignedByte() << 24;
	value |= data.readUnsignedByte() << 16;
	value |= data.readUnsignedByte() << 8;
	value |= data.readUnsignedByte();
	return value;
};
openfl__$internal_stage3D_atf_ATFReader.prototype = {
	cubeMap: null
	,data: null
	,height: null
	,mipCount: null
	,version: null
	,width: null
	,readHeader: function(__width,__height,cubeMap) {
		var tdata = this.data.readUnsignedByte();
		var type = tdata >> 7;
		if(!cubeMap && type != 0) {
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("ATF Cube map not expected"));
		}
		if(cubeMap && type != 1) {
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("ATF Cube map expected"));
		}
		this.cubeMap = cubeMap;
		var atfFormat = tdata & 127;
		if(atfFormat != 3 && atfFormat != 5) {
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Only ATF block compressed textures without JPEG-XR+LZMA are supported"));
		}
		this.width = 1 << this.data.readUnsignedByte();
		this.height = 1 << this.data.readUnsignedByte();
		if(this.width != __width || this.height != __height) {
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("ATF width and height dont match"));
		}
		this.mipCount = this.data.readUnsignedByte();
		return atfFormat == 3;
	}
	,readTextures: function(uploadCallback) {
		var gpuFormats = this.version < 3 ? 3 : 4;
		var sideCount = this.cubeMap ? 6 : 1;
		var _g = 0;
		var _g1 = sideCount;
		while(_g < _g1) {
			var side = _g++;
			var _g2 = 0;
			var _g11 = this.mipCount;
			while(_g2 < _g11) {
				var level = _g2++;
				var _g3 = 0;
				var _g12 = gpuFormats;
				while(_g3 < _g12) {
					var gpuFormat = _g3++;
					var blockLength;
					if(this.version == 0) {
						var data = this.data;
						var value = data.readUnsignedByte() << 16;
						value |= data.readUnsignedByte() << 8;
						value |= data.readUnsignedByte();
						blockLength = value;
					} else {
						var data1 = this.data;
						var value1 = data1.readUnsignedByte() << 24;
						value1 |= data1.readUnsignedByte() << 16;
						value1 |= data1.readUnsignedByte() << 8;
						value1 |= data1.readUnsignedByte();
						blockLength = value1;
					}
					if(_$UInt_UInt_$Impl_$.gt(this.data.position + blockLength,this.data.length)) {
						throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Block length exceeds ATF file length"));
					}
					if(_$UInt_UInt_$Impl_$.gt(blockLength,0)) {
						var bufferView = haxe_io__$UInt8Array_UInt8Array_$Impl_$.fromBytes(this.data,this.data.position,blockLength);
						this.data.position = this.data.position + blockLength;
						uploadCallback(side,level,gpuFormat,this.width >> level,this.height >> level,bufferView);
					}
				}
			}
		}
	}
	,__class__: openfl__$internal_stage3D_atf_ATFReader
};
var openfl__$internal_system_Clipboard = function() { };
$hxClasses["openfl._internal.system.Clipboard"] = openfl__$internal_system_Clipboard;
openfl__$internal_system_Clipboard.__name__ = "openfl._internal.system.Clipboard";
openfl__$internal_system_Clipboard.setText = function(value,syncSystemClipboard) {
	openfl__$internal_system_Clipboard.text = value;
	if(syncSystemClipboard) {
		openfl__$internal_app_Application.current.window.setClipboard(value);
	}
};
var openfl__$internal_text_HTMLParser = function() { };
$hxClasses["openfl._internal.text.HTMLParser"] = openfl__$internal_text_HTMLParser;
openfl__$internal_text_HTMLParser.__name__ = "openfl._internal.text.HTMLParser";
openfl__$internal_text_HTMLParser.parse = function(value,textFormat,textFormatRanges) {
	value = value.replace(openfl__$internal_text_HTMLParser.__regexBreakTag.r,"\n");
	value = value.replace(openfl__$internal_text_HTMLParser.__regexEntities[0].r,"\"");
	value = value.replace(openfl__$internal_text_HTMLParser.__regexEntities[1].r,"'");
	value = value.replace(openfl__$internal_text_HTMLParser.__regexEntities[2].r,"&");
	value = value.replace(openfl__$internal_text_HTMLParser.__regexEntities[5].r," ");
	var segments = value.split("<");
	if(segments.length == 1) {
		value = value.replace(openfl__$internal_text_HTMLParser.__regexHTMLTag.r,"");
		if(textFormatRanges.data.get_length() > 1) {
			var len = textFormatRanges.data.get_length() - 1;
			new openfl__$Vector_AbstractVector(textFormatRanges.data.splice(1,len));
		}
		value = value.replace(openfl__$internal_text_HTMLParser.__regexEntities[3].r,"<");
		value = value.replace(openfl__$internal_text_HTMLParser.__regexEntities[4].r,">");
		var range = textFormatRanges.data.get(0);
		range.format = textFormat;
		range.start = 0;
		range.end = value.length;
		return value;
	} else {
		var len1 = textFormatRanges.data.get_length();
		new openfl__$Vector_AbstractVector(textFormatRanges.data.splice(0,len1));
		value = "";
		var segment;
		var _g = 0;
		var _g1 = segments.length;
		while(_g < _g1) {
			var i = _g++;
			segment = segments[i];
			segment = segment.replace(openfl__$internal_text_HTMLParser.__regexEntities[3].r,"<");
			segment = segment.replace(openfl__$internal_text_HTMLParser.__regexEntities[4].r,">");
			segments[i] = segment;
		}
		var formatStack = [textFormat.clone()];
		var sub;
		var noLineBreak = false;
		var _g2 = 0;
		while(_g2 < segments.length) {
			var segment1 = segments[_g2];
			++_g2;
			if(segment1 == "") {
				continue;
			}
			var isClosingTag = HxOverrides.substr(segment1,0,1) == "/";
			var tagEndIndex = segment1.indexOf(">");
			var start = tagEndIndex + 1;
			var spaceIndex = segment1.indexOf(" ");
			var tagName = segment1.substring(isClosingTag ? 1 : 0,spaceIndex > -1 && spaceIndex < tagEndIndex ? spaceIndex : tagEndIndex);
			var format;
			if(isClosingTag) {
				formatStack.pop();
				format = formatStack[formatStack.length - 1].clone();
				if(tagName.toLowerCase() == "p" && textFormatRanges.data.get_length() > 0) {
					value += "\n";
					noLineBreak = true;
				}
				if(start < segment1.length) {
					sub = HxOverrides.substr(segment1,start,null);
					var x = new openfl__$internal_text_TextFormatRange(format,value.length,value.length + sub.length);
					textFormatRanges.data.push(x);
					value += sub;
					noLineBreak = false;
				}
			} else {
				format = formatStack[formatStack.length - 1].clone();
				if(tagEndIndex > -1) {
					switch(tagName.toLowerCase()) {
					case "a":
						if(openfl__$internal_text_HTMLParser.__regexHref.match(segment1)) {
							format.url = openfl__$internal_text_HTMLParser.__getAttributeMatch(openfl__$internal_text_HTMLParser.__regexHref);
						}
						break;
					case "b":
						format.bold = true;
						break;
					case "em":case "i":
						format.italic = true;
						break;
					case "font":
						if(openfl__$internal_text_HTMLParser.__regexFace.match(segment1)) {
							format.font = openfl__$internal_text_HTMLParser.__getAttributeMatch(openfl__$internal_text_HTMLParser.__regexFace);
						}
						if(openfl__$internal_text_HTMLParser.__regexColor.match(segment1)) {
							format.color = Std.parseInt("0x" + openfl__$internal_text_HTMLParser.__getAttributeMatch(openfl__$internal_text_HTMLParser.__regexColor));
						}
						if(openfl__$internal_text_HTMLParser.__regexSize.match(segment1)) {
							var sizeAttr = openfl__$internal_text_HTMLParser.__getAttributeMatch(openfl__$internal_text_HTMLParser.__regexSize);
							var firstChar = HxOverrides.cca(sizeAttr,0);
							if(firstChar == 43 || firstChar == 45) {
								var parentFormat = formatStack.length >= 2 ? formatStack[formatStack.length - 2] : textFormat;
								format.size = parentFormat.size + Std.parseInt(sizeAttr);
							} else {
								format.size = Std.parseInt(sizeAttr);
							}
						}
						break;
					case "p":
						if(textFormatRanges.data.get_length() > 0 && !noLineBreak) {
							value += "\n";
						}
						if(openfl__$internal_text_HTMLParser.__regexAlign.match(segment1)) {
							var align = openfl__$internal_text_HTMLParser.__getAttributeMatch(openfl__$internal_text_HTMLParser.__regexAlign).toLowerCase();
							format.align = openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.fromString(align);
						}
						break;
					case "textformat":
						if(openfl__$internal_text_HTMLParser.__regexBlockIndent.match(segment1)) {
							format.blockIndent = Std.parseInt(openfl__$internal_text_HTMLParser.__getAttributeMatch(openfl__$internal_text_HTMLParser.__regexBlockIndent));
						}
						if(openfl__$internal_text_HTMLParser.__regexIndent.match(segment1)) {
							format.indent = Std.parseInt(openfl__$internal_text_HTMLParser.__getAttributeMatch(openfl__$internal_text_HTMLParser.__regexIndent));
						}
						if(openfl__$internal_text_HTMLParser.__regexLeading.match(segment1)) {
							format.leading = Std.parseInt(openfl__$internal_text_HTMLParser.__getAttributeMatch(openfl__$internal_text_HTMLParser.__regexLeading));
						}
						if(openfl__$internal_text_HTMLParser.__regexLeftMargin.match(segment1)) {
							format.leftMargin = Std.parseInt(openfl__$internal_text_HTMLParser.__getAttributeMatch(openfl__$internal_text_HTMLParser.__regexLeftMargin));
						}
						if(openfl__$internal_text_HTMLParser.__regexRightMargin.match(segment1)) {
							format.rightMargin = Std.parseInt(openfl__$internal_text_HTMLParser.__getAttributeMatch(openfl__$internal_text_HTMLParser.__regexRightMargin));
						}
						if(openfl__$internal_text_HTMLParser.__regexTabStops.match(segment1)) {
							var values = openfl__$internal_text_HTMLParser.__getAttributeMatch(openfl__$internal_text_HTMLParser.__regexTabStops).split(" ");
							var tabStops = [];
							var _g21 = 0;
							while(_g21 < values.length) {
								var stop = values[_g21];
								++_g21;
								tabStops.push(Std.parseInt(stop));
							}
							format.tabStops = tabStops;
						}
						break;
					case "u":
						format.underline = true;
						break;
					}
					formatStack.push(format);
					if(start < segment1.length) {
						sub = segment1.substring(start);
						var x1 = new openfl__$internal_text_TextFormatRange(format,value.length,value.length + sub.length);
						textFormatRanges.data.push(x1);
						value += sub;
						noLineBreak = false;
					}
				} else {
					var x2 = new openfl__$internal_text_TextFormatRange(format,value.length,value.length + segment1.length);
					textFormatRanges.data.push(x2);
					value += segment1;
					noLineBreak = false;
				}
			}
		}
		if(textFormatRanges.data.get_length() == 0) {
			var x3 = new openfl__$internal_text_TextFormatRange(formatStack[0],0,0);
			textFormatRanges.data.push(x3);
		}
	}
	return value;
};
openfl__$internal_text_HTMLParser.__getAttributeMatch = function(regex) {
	if(regex.matched(2) != null) {
		return regex.matched(2);
	} else {
		return regex.matched(3);
	}
};
var openfl__$internal_text_TextEngine = function(textField) {
	this.scrollV = 1;
	this.textField = textField;
	this.width = 100;
	this.height = 100;
	this.set_text("");
	this.bounds = new openfl_geom_Rectangle(0,0,0,0);
	this.type = 0;
	this.autoSize = 2;
	this.embedFonts = false;
	this.selectable = true;
	this.borderColor = 0;
	this.border = false;
	this.backgroundColor = 16777215;
	this.background = false;
	this.gridFitType = 1;
	this.maxChars = 0;
	this.multiline = false;
	this.sharpness = 0;
	this.scrollH = 0;
	this.wordWrap = false;
	this.lineAscents = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	this.lineBreaks = openfl__$Vector_Vector_$Impl_$.toIntVector(null);
	this.lineDescents = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	this.lineLeadings = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	this.lineHeights = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	this.lineWidths = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	this.layoutGroups = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	this.textFormatRanges = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	if(openfl__$internal_text_TextEngine.__context == null) {
		openfl__$internal_text_TextEngine.__context = window.document.createElement("canvas").getContext("2d",null);
	}
};
$hxClasses["openfl._internal.text.TextEngine"] = openfl__$internal_text_TextEngine;
openfl__$internal_text_TextEngine.__name__ = "openfl._internal.text.TextEngine";
openfl__$internal_text_TextEngine.findFont = function(name) {
	return null;
};
openfl__$internal_text_TextEngine.findFontVariant = function(format) {
	var fontName = format.font;
	var bold = format.bold;
	var italic = format.italic;
	var fontNamePrefix = StringTools.replace(StringTools.replace(fontName," Normal","")," Regular","");
	var tmp;
	if(bold && italic) {
		var _this = openfl_text_Font.__fontByName;
		var key = fontNamePrefix + " Bold Italic";
		tmp = __map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key);
	} else {
		tmp = false;
	}
	if(tmp) {
		return openfl__$internal_text_TextEngine.findFont(fontNamePrefix + " Bold Italic");
	} else {
		var tmp1;
		if(bold) {
			var _this1 = openfl_text_Font.__fontByName;
			var key1 = fontNamePrefix + " Bold";
			tmp1 = __map_reserved[key1] != null ? _this1.existsReserved(key1) : _this1.h.hasOwnProperty(key1);
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			return openfl__$internal_text_TextEngine.findFont(fontNamePrefix + " Bold");
		} else {
			var tmp2;
			if(italic) {
				var _this2 = openfl_text_Font.__fontByName;
				var key2 = fontNamePrefix + " Italic";
				tmp2 = __map_reserved[key2] != null ? _this2.existsReserved(key2) : _this2.h.hasOwnProperty(key2);
			} else {
				tmp2 = false;
			}
			if(tmp2) {
				return openfl__$internal_text_TextEngine.findFont(fontNamePrefix + " Italic");
			}
		}
	}
	return openfl__$internal_text_TextEngine.findFont(fontName);
};
openfl__$internal_text_TextEngine.getFormatHeight = function(format) {
	var ascent;
	var descent;
	openfl__$internal_text_TextEngine.__context.font = openfl__$internal_text_TextEngine.getFont(format);
	if(format.__ascent != null) {
		ascent = format.size * format.__ascent;
		descent = format.size * format.__descent;
	} else {
		ascent = format.size;
		descent = format.size * 0.185;
	}
	var leading = format.leading;
	return ascent + descent + leading;
};
openfl__$internal_text_TextEngine.getFont = function(format) {
	var fontName = format.font;
	var bold = format.bold;
	var italic = format.italic;
	if(fontName == null) {
		fontName = "_serif";
	}
	var fontNamePrefix = StringTools.replace(StringTools.replace(fontName," Normal","")," Regular","");
	var tmp;
	if(bold && italic) {
		var _this = openfl_text_Font.__fontByName;
		var key = fontNamePrefix + " Bold Italic";
		tmp = __map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key);
	} else {
		tmp = false;
	}
	if(tmp) {
		fontName = fontNamePrefix + " Bold Italic";
		bold = false;
		italic = false;
	} else {
		var tmp1;
		if(bold) {
			var _this1 = openfl_text_Font.__fontByName;
			var key1 = fontNamePrefix + " Bold";
			tmp1 = __map_reserved[key1] != null ? _this1.existsReserved(key1) : _this1.h.hasOwnProperty(key1);
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			fontName = fontNamePrefix + " Bold";
			bold = false;
		} else {
			var tmp2;
			if(italic) {
				var _this2 = openfl_text_Font.__fontByName;
				var key2 = fontNamePrefix + " Italic";
				tmp2 = __map_reserved[key2] != null ? _this2.existsReserved(key2) : _this2.h.hasOwnProperty(key2);
			} else {
				tmp2 = false;
			}
			if(tmp2) {
				fontName = fontNamePrefix + " Italic";
				italic = false;
			} else {
				if(bold && (fontName.indexOf(" Bold ") > -1 || StringTools.endsWith(fontName," Bold"))) {
					bold = false;
				}
				if(italic && (fontName.indexOf(" Italic ") > -1 || StringTools.endsWith(fontName," Italic"))) {
					italic = false;
				}
			}
		}
	}
	var font = italic ? "italic " : "normal ";
	font += "normal ";
	font += bold ? "bold " : "normal ";
	font += format.size + "px";
	font += "/" + (format.leading + format.size + 3) + "px ";
	var font1;
	switch(fontName) {
	case "_sans":
		font1 = "sans-serif";
		break;
	case "_serif":
		font1 = "serif";
		break;
	case "_typewriter":
		font1 = "monospace";
		break;
	default:
		var _this_r = new RegExp("^[\\s'\"]+(.*)[\\s'\"]+$","".split("u").join(""));
		font1 = "'" + fontName.replace(_this_r,"$1") + "'";
	}
	font += "" + font1;
	return font;
};
openfl__$internal_text_TextEngine.getFontInstance = function(format) {
	return null;
};
openfl__$internal_text_TextEngine.prototype = {
	antiAliasType: null
	,autoSize: null
	,background: null
	,backgroundColor: null
	,border: null
	,borderColor: null
	,bottomScrollV: null
	,bounds: null
	,caretIndex: null
	,embedFonts: null
	,gridFitType: null
	,height: null
	,layoutGroups: null
	,lineAscents: null
	,lineBreaks: null
	,lineDescents: null
	,lineLeadings: null
	,lineHeights: null
	,lineWidths: null
	,maxChars: null
	,maxScrollH: null
	,maxScrollV: null
	,multiline: null
	,numLines: null
	,numVisibleLines: null
	,restrict: null
	,scrollH: null
	,scrollV: null
	,selectable: null
	,sharpness: null
	,text: null
	,textHeight: null
	,textFormatRanges: null
	,textWidth: null
	,type: null
	,width: null
	,wordWrap: null
	,textField: null
	,__cursorTimer: null
	,__hasFocus: null
	,__isKeyDown: null
	,__measuredHeight: null
	,__measuredWidth: null
	,__restrictRegexp: null
	,__selectionStart: null
	,__showCursor: null
	,__textFormat: null
	,__useIntAdvances: null
	,createRestrictRegexp: function(restrict) {
		var declinedRange = new EReg("\\^(.-.|.)","gu");
		var declined = "";
		var accepted = declinedRange.map(restrict,function(ereg) {
			declined += ereg.matched(1);
			return "";
		});
		var testRegexpParts = [];
		if(accepted.length > 0) {
			testRegexpParts.push("[^" + restrict + "]");
		}
		if(declined.length > 0) {
			testRegexpParts.push("[" + declined + "]");
		}
		return new EReg("(" + testRegexpParts.join("|") + ")","g");
	}
	,getBounds: function() {
		var padding = this.border ? 1 : 0;
		this.bounds.width = this.width + padding;
		this.bounds.height = this.height + padding;
	}
	,getLine: function(index) {
		if(index < 0 || index > this.lineBreaks.data.get_length() + 1) {
			return null;
		}
		if(this.lineBreaks.data.get_length() == 0) {
			return this.text;
		} else {
			return _$UnicodeString_UnicodeString_$Impl_$.substring(this.text,index > 0 ? this.lineBreaks.data.get(index - 1) : 0,this.lineBreaks.data.get(index));
		}
	}
	,getLineBreakIndex: function(startIndex) {
		if(startIndex == null) {
			startIndex = 0;
		}
		var cr = _$UnicodeString_UnicodeString_$Impl_$.indexOf(this.text,"\n",startIndex);
		var lf = _$UnicodeString_UnicodeString_$Impl_$.indexOf(this.text,"\r",startIndex);
		if(cr == -1) {
			return lf;
		}
		if(lf == -1) {
			return cr;
		}
		if(cr < lf) {
			return cr;
		} else {
			return lf;
		}
	}
	,getLineMeasurements: function() {
		this.lineAscents.data.set_length(0);
		this.lineDescents.data.set_length(0);
		this.lineLeadings.data.set_length(0);
		this.lineHeights.data.set_length(0);
		this.lineWidths.data.set_length(0);
		var currentLineAscent = 0.0;
		var currentLineDescent = 0.0;
		var currentLineLeading = null;
		var currentLineHeight = 0.0;
		var currentLineWidth = 0.0;
		var currentTextHeight = 0.0;
		this.textWidth = 0;
		this.textHeight = 0;
		this.numLines = 1;
		this.numVisibleLines = 0;
		this.maxScrollH = 0;
		var group = this.layoutGroups.data.iterator();
		while(group.hasNext()) {
			var group1 = group.next();
			while(group1.lineIndex > this.numLines - 1) {
				this.lineAscents.data.push(currentLineAscent);
				this.lineDescents.data.push(currentLineDescent);
				this.lineLeadings.data.push(currentLineLeading != null ? currentLineLeading : 0);
				this.lineHeights.data.push(currentLineHeight);
				this.lineWidths.data.push(currentLineWidth);
				currentLineAscent = 0;
				currentLineDescent = 0;
				currentLineLeading = null;
				currentLineHeight = 0;
				currentLineWidth = 0;
				this.numLines++;
				if(this.textHeight <= this.height - 2.0) {
					this.numVisibleLines++;
				}
			}
			currentLineAscent = Math.max(currentLineAscent,group1.ascent);
			currentLineDescent = Math.max(currentLineDescent,group1.descent);
			if(currentLineLeading == null) {
				currentLineLeading = group1.leading;
			} else {
				currentLineLeading = Math.max(currentLineLeading,group1.leading) | 0;
			}
			currentLineHeight = Math.max(currentLineHeight,group1.height);
			currentLineWidth = group1.offsetX - 2.0 + group1.width;
			if(currentLineWidth > this.textWidth) {
				this.textWidth = currentLineWidth;
			}
			currentTextHeight = group1.offsetY - 2.0 + group1.ascent + group1.descent;
			if(currentTextHeight > this.textHeight) {
				this.textHeight = currentTextHeight;
			}
		}
		if(this.textHeight == 0 && this.textField != null) {
			var currentFormat = this.textField.__textFormat;
			var ascent;
			var descent;
			if(currentFormat.__ascent != null) {
				ascent = currentFormat.size * currentFormat.__ascent;
				descent = currentFormat.size * currentFormat.__descent;
			} else {
				ascent = currentFormat.size;
				descent = currentFormat.size * 0.185;
			}
			var leading = currentFormat.leading;
			var heightValue = ascent + descent + leading;
			currentLineAscent = ascent;
			currentLineDescent = descent;
			currentLineLeading = leading;
			currentTextHeight = ascent + descent;
			this.textHeight = currentTextHeight;
		}
		this.lineAscents.data.push(currentLineAscent);
		this.lineDescents.data.push(currentLineDescent);
		this.lineLeadings.data.push(currentLineLeading != null ? currentLineLeading : 0);
		this.lineHeights.data.push(currentLineHeight);
		this.lineWidths.data.push(currentLineWidth);
		if(this.numLines == 1) {
			this.numVisibleLines = 1;
			if(currentLineLeading > 0) {
				this.textHeight += currentLineLeading;
			}
		} else if(this.textHeight <= this.height - 2.0) {
			this.numVisibleLines++;
		}
		if(this.autoSize != 2) {
			switch(this.autoSize) {
			case 0:case 1:case 3:
				if(!this.wordWrap) {
					this.width = this.textWidth + 4;
				}
				this.height = this.textHeight + 4;
				this.numVisibleLines = this.numLines;
				break;
			default:
			}
		}
		this.updateBottomScrollV();
		if(this.textWidth > this.width - 4) {
			this.maxScrollH = this.textWidth - this.width + 4 | 0;
		} else {
			this.maxScrollH = 0;
		}
		this.maxScrollV = this.numLines - this.numVisibleLines + 1;
	}
	,updateBottomScrollV: function() {
		this.bottomScrollV = this.numVisibleLines + this.scrollV - 1;
		if(this.bottomScrollV < 1) {
			this.bottomScrollV = 1;
		}
		if(this.bottomScrollV > this.numLines) {
			this.bottomScrollV = this.numLines;
		}
	}
	,getLayoutGroups: function() {
		var _gthis = this;
		this.layoutGroups.data.set_length(0);
		if(this.text == null || this.text == "") {
			return;
		}
		var rangeIndex = -1;
		var formatRange = null;
		var font = null;
		var currentFormat = openfl_text_TextField.__defaultTextFormat.clone();
		var leading = 0;
		var ascent = 0.0;
		var maxAscent = 0.0;
		var descent = 0.0;
		var layoutGroup = null;
		var positions = null;
		var widthValue = 0.0;
		var heightValue = 0.0;
		var maxHeightValue = 0.0;
		var previousSpaceIndex = -2;
		var spaceIndex = _$UnicodeString_UnicodeString_$Impl_$.indexOf(this.text," ");
		var breakIndex = this.getLineBreakIndex();
		var offsetX = 2.0;
		var offsetY = 2.0;
		var textIndex = 0;
		var lineIndex = 0;
		var lineFormat = null;
		if(rangeIndex < _gthis.textFormatRanges.data.get_length() - 1) {
			++rangeIndex;
			formatRange = _gthis.textFormatRanges.data.get(rangeIndex);
			currentFormat.__merge(formatRange.format);
			openfl__$internal_text_TextEngine.__context.font = openfl__$internal_text_TextEngine.getFont(currentFormat);
			if(currentFormat.__ascent != null) {
				ascent = currentFormat.size * currentFormat.__ascent;
				descent = currentFormat.size * currentFormat.__descent;
			} else {
				ascent = currentFormat.size;
				descent = currentFormat.size * 0.185;
			}
			leading = currentFormat.leading;
			heightValue = ascent + descent + leading;
		}
		if(heightValue > maxHeightValue) {
			maxHeightValue = heightValue;
		}
		if(ascent > maxAscent) {
			maxAscent = ascent;
		}
		lineFormat = formatRange.format;
		var wrap;
		var maxLoops = _$UnicodeString_UnicodeString_$Impl_$.get_length(this.text) + 1;
		while(textIndex < maxLoops) if(breakIndex > -1 && (spaceIndex == -1 || breakIndex < spaceIndex) && formatRange.end >= breakIndex) {
			if(textIndex <= breakIndex) {
				var text = this.text;
				var positions1 = [];
				if(_gthis.__useIntAdvances == null) {
					_gthis.__useIntAdvances = new EReg("Trident/7.0","").match(window.navigator.userAgent);
				}
				if(_gthis.__useIntAdvances) {
					var previousWidth = 0.0;
					var width;
					var _g = textIndex;
					var _g1 = breakIndex;
					while(_g < _g1) {
						var i = _g++;
						var value = _$UnicodeString_UnicodeString_$Impl_$.substring(text,textIndex,i + 1);
						width = openfl__$internal_text_TextEngine.__context.measureText(value).width;
						positions1.push(width - previousWidth);
						previousWidth = width;
					}
				} else {
					var _g2 = textIndex;
					var _g11 = breakIndex;
					while(_g2 < _g11) {
						var i1 = _g2++;
						var advance;
						if(i1 < _$UnicodeString_UnicodeString_$Impl_$.get_length(text) - 1) {
							var value1 = _$UnicodeString_UnicodeString_$Impl_$.charAt(text,i1 + 1);
							var nextWidth = openfl__$internal_text_TextEngine.__context.measureText(value1).width;
							var value2 = _$UnicodeString_UnicodeString_$Impl_$.substr(text,i1,2);
							var twoWidths = openfl__$internal_text_TextEngine.__context.measureText(value2).width;
							advance = twoWidths - nextWidth;
						} else {
							var value3 = _$UnicodeString_UnicodeString_$Impl_$.charAt(text,i1);
							advance = openfl__$internal_text_TextEngine.__context.measureText(value3).width;
						}
						positions1.push(advance);
					}
				}
				positions = positions1;
				var width1 = 0.0;
				var _g3 = 0;
				while(_g3 < positions.length) {
					var position = positions[_g3];
					++_g3;
					width1 += position;
				}
				widthValue = width1;
				if(this.wordWrap && previousSpaceIndex <= textIndex && this.width >= 4) {
					var groupEndIndex = breakIndex;
					while(offsetX + widthValue > _gthis.width - 2.0) {
						var width2 = _gthis.width - offsetX - 2.0;
						var charIndex = -1;
						var currentWidth = 0.0;
						var _g4 = 0;
						var _g12 = positions.length;
						while(_g4 < _g12) {
							var i2 = _g4++;
							currentWidth += positions[i2];
							if(currentWidth > width2) {
								break;
							} else {
								charIndex = i2;
							}
						}
						var charIndex1 = charIndex;
						var wrapCharOffset = charIndex1 + 1;
						groupEndIndex = textIndex + wrapCharOffset;
						if(groupEndIndex == textIndex) {
							if(positions.length > 0 && positions[0] > _gthis.width - 4.) {
								groupEndIndex = breakIndex + 1;
							} else {
								offsetX = 2.0;
								offsetY += layoutGroup.height;
								++lineIndex;
							}
							break;
						} else {
							if(layoutGroup == null || layoutGroup.startIndex != layoutGroup.endIndex) {
								layoutGroup = new openfl__$internal_text_TextLayoutGroup(formatRange.format,textIndex,groupEndIndex);
								_gthis.layoutGroups.data.push(layoutGroup);
							} else {
								layoutGroup.format = formatRange.format;
								layoutGroup.startIndex = textIndex;
								layoutGroup.endIndex = groupEndIndex;
							}
							layoutGroup.positions = positions.slice(0,wrapCharOffset);
							layoutGroup.offsetX = offsetX;
							layoutGroup.ascent = ascent;
							layoutGroup.descent = descent;
							layoutGroup.leading = leading;
							layoutGroup.lineIndex = lineIndex;
							layoutGroup.offsetY = offsetY;
							var positions2 = layoutGroup.positions;
							var width3 = 0.0;
							var _g5 = 0;
							while(_g5 < positions2.length) {
								var position1 = positions2[_g5];
								++_g5;
								width3 += position1;
							}
							layoutGroup.width = width3;
							layoutGroup.height = heightValue;
							layoutGroup = null;
							if(ascent > maxAscent) {
								maxAscent = ascent;
							}
							if(heightValue > maxHeightValue) {
								maxHeightValue = heightValue;
							}
							var i3 = _gthis.layoutGroups.data.get_length();
							while(--i3 > -1) {
								var lg = _gthis.layoutGroups.data.get(i3);
								if(lg.lineIndex > lineIndex) {
									continue;
								}
								if(lg.lineIndex < lineIndex) {
									break;
								}
								lg.ascent = maxAscent;
								lg.height = maxHeightValue;
							}
							offsetY += maxHeightValue;
							maxAscent = 0.0;
							maxHeightValue = 0.0;
							++lineIndex;
							offsetX = 2.0;
							positions = positions.slice(wrapCharOffset,breakIndex - textIndex);
							var width4 = 0.0;
							var _g6 = 0;
							while(_g6 < positions.length) {
								var position2 = positions[_g6];
								++_g6;
								width4 += position2;
							}
							widthValue = width4;
							textIndex = groupEndIndex;
							groupEndIndex = breakIndex;
						}
					}
				}
				if(layoutGroup == null || layoutGroup.startIndex != layoutGroup.endIndex) {
					layoutGroup = new openfl__$internal_text_TextLayoutGroup(formatRange.format,textIndex,breakIndex);
					_gthis.layoutGroups.data.push(layoutGroup);
				} else {
					layoutGroup.format = formatRange.format;
					layoutGroup.startIndex = textIndex;
					layoutGroup.endIndex = breakIndex;
				}
				layoutGroup.positions = positions;
				layoutGroup.offsetX = offsetX;
				layoutGroup.ascent = ascent;
				layoutGroup.descent = descent;
				layoutGroup.leading = leading;
				layoutGroup.lineIndex = lineIndex;
				layoutGroup.offsetY = offsetY;
				layoutGroup.width = widthValue;
				layoutGroup.height = heightValue;
				layoutGroup = null;
			} else if(layoutGroup != null && layoutGroup.startIndex != layoutGroup.endIndex) {
				if(layoutGroup.endIndex == spaceIndex) {
					layoutGroup.width -= layoutGroup.positions[layoutGroup.positions.length - 1];
				}
				layoutGroup = null;
			}
			if(formatRange.end == breakIndex) {
				if(rangeIndex < _gthis.textFormatRanges.data.get_length() - 1) {
					++rangeIndex;
					formatRange = _gthis.textFormatRanges.data.get(rangeIndex);
					currentFormat.__merge(formatRange.format);
					openfl__$internal_text_TextEngine.__context.font = openfl__$internal_text_TextEngine.getFont(currentFormat);
					if(currentFormat.__ascent != null) {
						ascent = currentFormat.size * currentFormat.__ascent;
						descent = currentFormat.size * currentFormat.__descent;
					} else {
						ascent = currentFormat.size;
						descent = currentFormat.size * 0.185;
					}
					leading = currentFormat.leading;
					heightValue = ascent + descent + leading;
				}
				if(heightValue > maxHeightValue) {
					maxHeightValue = heightValue;
				}
				if(ascent > maxAscent) {
					maxAscent = ascent;
				}
				lineFormat = formatRange.format;
			}
			if(breakIndex >= _$UnicodeString_UnicodeString_$Impl_$.get_length(this.text) - 1) {
				offsetY -= maxHeightValue;
			}
			if(ascent > maxAscent) {
				maxAscent = ascent;
			}
			if(heightValue > maxHeightValue) {
				maxHeightValue = heightValue;
			}
			var i4 = _gthis.layoutGroups.data.get_length();
			while(--i4 > -1) {
				var lg1 = _gthis.layoutGroups.data.get(i4);
				if(lg1.lineIndex > lineIndex) {
					continue;
				}
				if(lg1.lineIndex < lineIndex) {
					break;
				}
				lg1.ascent = maxAscent;
				lg1.height = maxHeightValue;
			}
			offsetY += maxHeightValue;
			maxAscent = 0.0;
			maxHeightValue = 0.0;
			++lineIndex;
			offsetX = 2.0;
			textIndex = breakIndex + 1;
			breakIndex = this.getLineBreakIndex(textIndex);
		} else if(formatRange.end >= spaceIndex && spaceIndex > -1 && textIndex < formatRange.end) {
			if(layoutGroup != null && layoutGroup.startIndex != layoutGroup.endIndex) {
				layoutGroup = null;
			}
			wrap = false;
			while(textIndex != formatRange.end) {
				var endIndex = -1;
				if(spaceIndex == -1) {
					endIndex = breakIndex;
				} else {
					endIndex = spaceIndex + 1;
					if(breakIndex > -1 && breakIndex < endIndex) {
						endIndex = breakIndex;
					}
				}
				if(endIndex == -1 || endIndex > formatRange.end) {
					endIndex = formatRange.end;
				}
				var text1 = this.text;
				var positions3 = [];
				if(_gthis.__useIntAdvances == null) {
					_gthis.__useIntAdvances = new EReg("Trident/7.0","").match(window.navigator.userAgent);
				}
				if(_gthis.__useIntAdvances) {
					var previousWidth1 = 0.0;
					var width5;
					var _g7 = textIndex;
					var _g13 = endIndex;
					while(_g7 < _g13) {
						var i5 = _g7++;
						var value4 = _$UnicodeString_UnicodeString_$Impl_$.substring(text1,textIndex,i5 + 1);
						width5 = openfl__$internal_text_TextEngine.__context.measureText(value4).width;
						positions3.push(width5 - previousWidth1);
						previousWidth1 = width5;
					}
				} else {
					var _g8 = textIndex;
					var _g14 = endIndex;
					while(_g8 < _g14) {
						var i6 = _g8++;
						var advance1;
						if(i6 < _$UnicodeString_UnicodeString_$Impl_$.get_length(text1) - 1) {
							var value5 = _$UnicodeString_UnicodeString_$Impl_$.charAt(text1,i6 + 1);
							var nextWidth1 = openfl__$internal_text_TextEngine.__context.measureText(value5).width;
							var value6 = _$UnicodeString_UnicodeString_$Impl_$.substr(text1,i6,2);
							var twoWidths1 = openfl__$internal_text_TextEngine.__context.measureText(value6).width;
							advance1 = twoWidths1 - nextWidth1;
						} else {
							var value7 = _$UnicodeString_UnicodeString_$Impl_$.charAt(text1,i6);
							advance1 = openfl__$internal_text_TextEngine.__context.measureText(value7).width;
						}
						positions3.push(advance1);
					}
				}
				positions = positions3;
				var width6 = 0.0;
				var _g9 = 0;
				while(_g9 < positions.length) {
					var position3 = positions[_g9];
					++_g9;
					width6 += position3;
				}
				widthValue = width6;
				if(lineFormat.align == 2) {
					if(positions.length > 0 && textIndex == previousSpaceIndex) {
						++textIndex;
						var spaceWidth = positions.shift();
						widthValue -= spaceWidth;
						offsetX += spaceWidth;
					}
					if(positions.length > 0 && endIndex == spaceIndex + 1) {
						--endIndex;
						var spaceWidth1 = positions.pop();
						widthValue -= spaceWidth1;
					}
				}
				if(this.wordWrap) {
					if(offsetX + widthValue > this.width - 2.0) {
						wrap = true;
						if(positions.length > 0 && endIndex == spaceIndex + 1) {
							var lastPosition = positions[positions.length - 1];
							var spaceWidth2 = lastPosition;
							if(offsetX + widthValue - spaceWidth2 <= this.width - 2) {
								wrap = false;
							}
						}
					}
				}
				if(wrap) {
					if(lineFormat.align != 2 && (layoutGroup != null || this.layoutGroups.data.get_length() > 0)) {
						var previous = layoutGroup;
						if(previous == null) {
							var this1 = this.layoutGroups;
							var index = this.layoutGroups.data.get_length() - 1;
							previous = this1.data.get(index);
						}
						previous.width -= previous.positions[previous.positions.length - 1];
						previous.endIndex--;
					}
					var i7 = this.layoutGroups.data.get_length() - 1;
					var offsetCount = 0;
					while(true) {
						layoutGroup = this.layoutGroups.data.get(i7);
						if(i7 > 0 && layoutGroup.startIndex > previousSpaceIndex) {
							++offsetCount;
						} else {
							break;
						}
						--i7;
					}
					if(textIndex == previousSpaceIndex + 1) {
						if(ascent > maxAscent) {
							maxAscent = ascent;
						}
						if(heightValue > maxHeightValue) {
							maxHeightValue = heightValue;
						}
						var i8 = _gthis.layoutGroups.data.get_length();
						while(--i8 > -1) {
							var lg2 = _gthis.layoutGroups.data.get(i8);
							if(lg2.lineIndex > lineIndex) {
								continue;
							}
							if(lg2.lineIndex < lineIndex) {
								break;
							}
							lg2.ascent = maxAscent;
							lg2.height = maxHeightValue;
						}
						offsetY += maxHeightValue;
						maxAscent = 0.0;
						maxHeightValue = 0.0;
						++lineIndex;
						offsetX = 2.0;
					}
					offsetX = 2.0;
					if(offsetCount > 0) {
						var this2 = this.layoutGroups;
						var index1 = this.layoutGroups.data.get_length() - offsetCount;
						var bumpX = this2.data.get(index1).offsetX;
						var _g10 = this.layoutGroups.data.get_length() - offsetCount;
						var _g15 = this.layoutGroups.data.get_length();
						while(_g10 < _g15) {
							var i9 = _g10++;
							layoutGroup = this.layoutGroups.data.get(i9);
							layoutGroup.offsetX -= bumpX;
							layoutGroup.offsetY = offsetY;
							layoutGroup.lineIndex = lineIndex;
							offsetX += layoutGroup.width;
						}
					}
					if(this.width >= 4) {
						var groupEndIndex1 = endIndex;
						while(offsetX + widthValue > _gthis.width - 2.0) {
							var width7 = _gthis.width - offsetX - 2.0;
							var charIndex2 = -1;
							var currentWidth1 = 0.0;
							var _g16 = 0;
							var _g17 = positions.length;
							while(_g16 < _g17) {
								var i10 = _g16++;
								currentWidth1 += positions[i10];
								if(currentWidth1 > width7) {
									break;
								} else {
									charIndex2 = i10;
								}
							}
							var charIndex3 = charIndex2;
							var wrapCharOffset1 = charIndex3 + 1;
							groupEndIndex1 = textIndex + wrapCharOffset1;
							if(groupEndIndex1 == textIndex) {
								if(positions.length > 0 && positions[0] > _gthis.width - 4.) {
									groupEndIndex1 = endIndex + 1;
								} else {
									offsetX = 2.0;
									offsetY += layoutGroup.height;
									++lineIndex;
								}
								break;
							} else {
								if(layoutGroup == null || layoutGroup.startIndex != layoutGroup.endIndex) {
									layoutGroup = new openfl__$internal_text_TextLayoutGroup(formatRange.format,textIndex,groupEndIndex1);
									_gthis.layoutGroups.data.push(layoutGroup);
								} else {
									layoutGroup.format = formatRange.format;
									layoutGroup.startIndex = textIndex;
									layoutGroup.endIndex = groupEndIndex1;
								}
								layoutGroup.positions = positions.slice(0,wrapCharOffset1);
								layoutGroup.offsetX = offsetX;
								layoutGroup.ascent = ascent;
								layoutGroup.descent = descent;
								layoutGroup.leading = leading;
								layoutGroup.lineIndex = lineIndex;
								layoutGroup.offsetY = offsetY;
								var positions4 = layoutGroup.positions;
								var width8 = 0.0;
								var _g18 = 0;
								while(_g18 < positions4.length) {
									var position4 = positions4[_g18];
									++_g18;
									width8 += position4;
								}
								layoutGroup.width = width8;
								layoutGroup.height = heightValue;
								layoutGroup = null;
								if(ascent > maxAscent) {
									maxAscent = ascent;
								}
								if(heightValue > maxHeightValue) {
									maxHeightValue = heightValue;
								}
								var i11 = _gthis.layoutGroups.data.get_length();
								while(--i11 > -1) {
									var lg3 = _gthis.layoutGroups.data.get(i11);
									if(lg3.lineIndex > lineIndex) {
										continue;
									}
									if(lg3.lineIndex < lineIndex) {
										break;
									}
									lg3.ascent = maxAscent;
									lg3.height = maxHeightValue;
								}
								offsetY += maxHeightValue;
								maxAscent = 0.0;
								maxHeightValue = 0.0;
								++lineIndex;
								offsetX = 2.0;
								positions = positions.slice(wrapCharOffset1,endIndex - textIndex);
								var width9 = 0.0;
								var _g19 = 0;
								while(_g19 < positions.length) {
									var position5 = positions[_g19];
									++_g19;
									width9 += position5;
								}
								widthValue = width9;
								textIndex = groupEndIndex1;
								groupEndIndex1 = endIndex;
							}
						}
					}
					if(layoutGroup == null || layoutGroup.startIndex != layoutGroup.endIndex) {
						layoutGroup = new openfl__$internal_text_TextLayoutGroup(formatRange.format,textIndex,endIndex);
						_gthis.layoutGroups.data.push(layoutGroup);
					} else {
						layoutGroup.format = formatRange.format;
						layoutGroup.startIndex = textIndex;
						layoutGroup.endIndex = endIndex;
					}
					layoutGroup.positions = positions;
					layoutGroup.offsetX = offsetX;
					layoutGroup.ascent = ascent;
					layoutGroup.descent = descent;
					layoutGroup.leading = leading;
					layoutGroup.lineIndex = lineIndex;
					layoutGroup.offsetY = offsetY;
					layoutGroup.width = widthValue;
					layoutGroup.height = heightValue;
					offsetX += widthValue;
					textIndex = endIndex;
					wrap = false;
				} else {
					if(layoutGroup != null && textIndex == spaceIndex) {
						if(lineFormat.align != 2) {
							layoutGroup.endIndex = spaceIndex;
							layoutGroup.positions = layoutGroup.positions.concat(positions);
							layoutGroup.width += widthValue;
						}
					} else if(layoutGroup == null || lineFormat.align == 2) {
						if(layoutGroup == null || layoutGroup.startIndex != layoutGroup.endIndex) {
							layoutGroup = new openfl__$internal_text_TextLayoutGroup(formatRange.format,textIndex,endIndex);
							_gthis.layoutGroups.data.push(layoutGroup);
						} else {
							layoutGroup.format = formatRange.format;
							layoutGroup.startIndex = textIndex;
							layoutGroup.endIndex = endIndex;
						}
						layoutGroup.positions = positions;
						layoutGroup.offsetX = offsetX;
						layoutGroup.ascent = ascent;
						layoutGroup.descent = descent;
						layoutGroup.leading = leading;
						layoutGroup.lineIndex = lineIndex;
						layoutGroup.offsetY = offsetY;
						layoutGroup.width = widthValue;
						layoutGroup.height = heightValue;
					} else {
						layoutGroup.endIndex = endIndex;
						layoutGroup.positions = layoutGroup.positions.concat(positions);
						layoutGroup.width += widthValue;
						if(breakIndex == endIndex) {
							++endIndex;
						}
					}
					offsetX += widthValue;
					textIndex = endIndex;
				}
				var nextSpaceIndex = _$UnicodeString_UnicodeString_$Impl_$.indexOf(this.text," ",textIndex);
				if(formatRange.end <= previousSpaceIndex) {
					layoutGroup = null;
					textIndex = formatRange.end;
					if(rangeIndex < _gthis.textFormatRanges.data.get_length() - 1) {
						++rangeIndex;
						formatRange = _gthis.textFormatRanges.data.get(rangeIndex);
						currentFormat.__merge(formatRange.format);
						openfl__$internal_text_TextEngine.__context.font = openfl__$internal_text_TextEngine.getFont(currentFormat);
						if(currentFormat.__ascent != null) {
							ascent = currentFormat.size * currentFormat.__ascent;
							descent = currentFormat.size * currentFormat.__descent;
						} else {
							ascent = currentFormat.size;
							descent = currentFormat.size * 0.185;
						}
						leading = currentFormat.leading;
						heightValue = ascent + descent + leading;
					}
					if(heightValue > maxHeightValue) {
						maxHeightValue = heightValue;
					}
					if(ascent > maxAscent) {
						maxAscent = ascent;
					}
				} else {
					if(breakIndex == previousSpaceIndex) {
						layoutGroup.endIndex = breakIndex;
						if(breakIndex - layoutGroup.startIndex - layoutGroup.positions.length < 0) {
							layoutGroup.positions.push(0.0);
						}
						textIndex = breakIndex + 1;
					}
					previousSpaceIndex = spaceIndex;
					spaceIndex = nextSpaceIndex;
				}
				if(breakIndex > -1 && breakIndex <= textIndex && (spaceIndex > breakIndex || spaceIndex == -1) || textIndex > _$UnicodeString_UnicodeString_$Impl_$.get_length(this.text) || spaceIndex > formatRange.end) {
					break;
				}
			}
		} else {
			if(textIndex > formatRange.end) {
				break;
			} else if(textIndex < formatRange.end || textIndex == _$UnicodeString_UnicodeString_$Impl_$.get_length(this.text)) {
				var text2 = this.text;
				var endIndex1 = formatRange.end;
				var positions5 = [];
				if(_gthis.__useIntAdvances == null) {
					_gthis.__useIntAdvances = new EReg("Trident/7.0","").match(window.navigator.userAgent);
				}
				if(_gthis.__useIntAdvances) {
					var previousWidth2 = 0.0;
					var width10;
					var _g20 = textIndex;
					var _g110 = endIndex1;
					while(_g20 < _g110) {
						var i12 = _g20++;
						var value8 = _$UnicodeString_UnicodeString_$Impl_$.substring(text2,textIndex,i12 + 1);
						width10 = openfl__$internal_text_TextEngine.__context.measureText(value8).width;
						positions5.push(width10 - previousWidth2);
						previousWidth2 = width10;
					}
				} else {
					var _g21 = textIndex;
					var _g111 = endIndex1;
					while(_g21 < _g111) {
						var i13 = _g21++;
						var advance2;
						if(i13 < _$UnicodeString_UnicodeString_$Impl_$.get_length(text2) - 1) {
							var value9 = _$UnicodeString_UnicodeString_$Impl_$.charAt(text2,i13 + 1);
							var nextWidth2 = openfl__$internal_text_TextEngine.__context.measureText(value9).width;
							var value10 = _$UnicodeString_UnicodeString_$Impl_$.substr(text2,i13,2);
							var twoWidths2 = openfl__$internal_text_TextEngine.__context.measureText(value10).width;
							advance2 = twoWidths2 - nextWidth2;
						} else {
							var value11 = _$UnicodeString_UnicodeString_$Impl_$.charAt(text2,i13);
							advance2 = openfl__$internal_text_TextEngine.__context.measureText(value11).width;
						}
						positions5.push(advance2);
					}
				}
				positions = positions5;
				var width11 = 0.0;
				var _g22 = 0;
				while(_g22 < positions.length) {
					var position6 = positions[_g22];
					++_g22;
					width11 += position6;
				}
				widthValue = width11;
				if(this.wordWrap && this.width >= 4) {
					var endIndex2 = formatRange.end;
					var groupEndIndex2 = endIndex2;
					while(offsetX + widthValue > _gthis.width - 2.0) {
						var width12 = _gthis.width - offsetX - 2.0;
						var charIndex4 = -1;
						var currentWidth2 = 0.0;
						var _g23 = 0;
						var _g112 = positions.length;
						while(_g23 < _g112) {
							var i14 = _g23++;
							currentWidth2 += positions[i14];
							if(currentWidth2 > width12) {
								break;
							} else {
								charIndex4 = i14;
							}
						}
						var charIndex5 = charIndex4;
						var wrapCharOffset2 = charIndex5 + 1;
						groupEndIndex2 = textIndex + wrapCharOffset2;
						if(groupEndIndex2 == textIndex) {
							if(positions.length > 0 && positions[0] > _gthis.width - 4.) {
								groupEndIndex2 = endIndex2 + 1;
							} else {
								offsetX = 2.0;
								offsetY += layoutGroup.height;
								++lineIndex;
							}
							break;
						} else {
							if(layoutGroup == null || layoutGroup.startIndex != layoutGroup.endIndex) {
								layoutGroup = new openfl__$internal_text_TextLayoutGroup(formatRange.format,textIndex,groupEndIndex2);
								_gthis.layoutGroups.data.push(layoutGroup);
							} else {
								layoutGroup.format = formatRange.format;
								layoutGroup.startIndex = textIndex;
								layoutGroup.endIndex = groupEndIndex2;
							}
							layoutGroup.positions = positions.slice(0,wrapCharOffset2);
							layoutGroup.offsetX = offsetX;
							layoutGroup.ascent = ascent;
							layoutGroup.descent = descent;
							layoutGroup.leading = leading;
							layoutGroup.lineIndex = lineIndex;
							layoutGroup.offsetY = offsetY;
							var positions6 = layoutGroup.positions;
							var width13 = 0.0;
							var _g24 = 0;
							while(_g24 < positions6.length) {
								var position7 = positions6[_g24];
								++_g24;
								width13 += position7;
							}
							layoutGroup.width = width13;
							layoutGroup.height = heightValue;
							layoutGroup = null;
							if(ascent > maxAscent) {
								maxAscent = ascent;
							}
							if(heightValue > maxHeightValue) {
								maxHeightValue = heightValue;
							}
							var i15 = _gthis.layoutGroups.data.get_length();
							while(--i15 > -1) {
								var lg4 = _gthis.layoutGroups.data.get(i15);
								if(lg4.lineIndex > lineIndex) {
									continue;
								}
								if(lg4.lineIndex < lineIndex) {
									break;
								}
								lg4.ascent = maxAscent;
								lg4.height = maxHeightValue;
							}
							offsetY += maxHeightValue;
							maxAscent = 0.0;
							maxHeightValue = 0.0;
							++lineIndex;
							offsetX = 2.0;
							positions = positions.slice(wrapCharOffset2,endIndex2 - textIndex);
							var width14 = 0.0;
							var _g25 = 0;
							while(_g25 < positions.length) {
								var position8 = positions[_g25];
								++_g25;
								width14 += position8;
							}
							widthValue = width14;
							textIndex = groupEndIndex2;
							groupEndIndex2 = endIndex2;
						}
					}
				}
				var endIndex3 = formatRange.end;
				if(layoutGroup == null || layoutGroup.startIndex != layoutGroup.endIndex) {
					layoutGroup = new openfl__$internal_text_TextLayoutGroup(formatRange.format,textIndex,endIndex3);
					_gthis.layoutGroups.data.push(layoutGroup);
				} else {
					layoutGroup.format = formatRange.format;
					layoutGroup.startIndex = textIndex;
					layoutGroup.endIndex = endIndex3;
				}
				layoutGroup.positions = positions;
				layoutGroup.offsetX = offsetX;
				layoutGroup.ascent = ascent;
				layoutGroup.descent = descent;
				layoutGroup.leading = leading;
				layoutGroup.lineIndex = lineIndex;
				layoutGroup.offsetY = offsetY;
				layoutGroup.width = widthValue;
				layoutGroup.height = heightValue;
				offsetX += widthValue;
				textIndex = formatRange.end;
			}
			if(rangeIndex < _gthis.textFormatRanges.data.get_length() - 1) {
				++rangeIndex;
				formatRange = _gthis.textFormatRanges.data.get(rangeIndex);
				currentFormat.__merge(formatRange.format);
				openfl__$internal_text_TextEngine.__context.font = openfl__$internal_text_TextEngine.getFont(currentFormat);
				if(currentFormat.__ascent != null) {
					ascent = currentFormat.size * currentFormat.__ascent;
					descent = currentFormat.size * currentFormat.__descent;
				} else {
					ascent = currentFormat.size;
					descent = currentFormat.size * 0.185;
				}
				leading = currentFormat.leading;
				heightValue = ascent + descent + leading;
			}
			if(heightValue > maxHeightValue) {
				maxHeightValue = heightValue;
			}
			if(ascent > maxAscent) {
				maxAscent = ascent;
			}
			if(textIndex == formatRange.end) {
				if(ascent > maxAscent) {
					maxAscent = ascent;
				}
				if(heightValue > maxHeightValue) {
					maxHeightValue = heightValue;
				}
				var i16 = _gthis.layoutGroups.data.get_length();
				while(--i16 > -1) {
					var lg5 = _gthis.layoutGroups.data.get(i16);
					if(lg5.lineIndex > lineIndex) {
						continue;
					}
					if(lg5.lineIndex < lineIndex) {
						break;
					}
					lg5.ascent = maxAscent;
					lg5.height = maxHeightValue;
				}
				offsetY += maxHeightValue;
				maxAscent = 0.0;
				maxHeightValue = 0.0;
				++lineIndex;
				offsetX = 2.0;
				++textIndex;
				break;
			}
		}
	}
	,measureTextWidth: function(value) {
		return openfl__$internal_text_TextEngine.__context.measureText(value).width;
	}
	,setTextAlignment: function() {
		var lineIndex = -1;
		var offsetX = 0.0;
		var totalWidth = this.width - 4;
		var group;
		var lineLength;
		var _g = 0;
		var _g1 = this.layoutGroups.data.get_length();
		while(_g < _g1) {
			var i = _g++;
			group = this.layoutGroups.data.get(i);
			if(group.lineIndex != lineIndex) {
				lineIndex = group.lineIndex;
				switch(group.format.align) {
				case 0:
					if(this.lineWidths.data.get(lineIndex) < totalWidth) {
						offsetX = Math.round((totalWidth - this.lineWidths.data.get(lineIndex)) / 2);
					} else {
						offsetX = 0;
					}
					break;
				case 2:
					if(this.lineWidths.data.get(lineIndex) < totalWidth) {
						lineLength = 1;
						var _g2 = i + 1;
						var _g11 = this.layoutGroups.data.get_length();
						while(_g2 < _g11) {
							var j = _g2++;
							if(this.layoutGroups.data.get(j).lineIndex == lineIndex) {
								if(j == 0 || _$UnicodeString_UnicodeString_$Impl_$.charCodeAt(this.text,this.layoutGroups.data.get(j).startIndex - 1) == 32) {
									++lineLength;
								}
							} else {
								break;
							}
						}
						if(lineLength > 1) {
							group = this.layoutGroups.data.get(i + lineLength - 1);
							var endChar = _$UnicodeString_UnicodeString_$Impl_$.charCodeAt(this.text,group.endIndex);
							if(group.endIndex < _$UnicodeString_UnicodeString_$Impl_$.get_length(this.text) && endChar != 10 && endChar != 13) {
								offsetX = (totalWidth - this.lineWidths.data.get(lineIndex)) / (lineLength - 1);
								var j1 = 0;
								while(true) {
									if(j1 > 1 && _$UnicodeString_UnicodeString_$Impl_$.charCodeAt(this.text,this.layoutGroups.data.get(j1).startIndex - 1) != 32) {
										this.layoutGroups.data.get(i + j1).offsetX += offsetX * (j1 - 1);
										++j1;
									}
									this.layoutGroups.data.get(i + j1).offsetX += offsetX * j1;
									if(!(++j1 < lineLength)) {
										break;
									}
								}
							}
						}
					}
					offsetX = 0;
					break;
				case 4:
					if(this.lineWidths.data.get(lineIndex) < totalWidth) {
						offsetX = Math.round(totalWidth - this.lineWidths.data.get(lineIndex));
					} else {
						offsetX = 0;
					}
					break;
				default:
					offsetX = 0;
				}
			}
			if(offsetX > 0) {
				group.offsetX += offsetX;
			}
		}
	}
	,update: function() {
		if(this.text == null || this.textFormatRanges.data.get_length() == 0) {
			this.lineAscents.data.set_length(0);
			this.lineBreaks.data.set_length(0);
			this.lineDescents.data.set_length(0);
			this.lineLeadings.data.set_length(0);
			this.lineHeights.data.set_length(0);
			this.lineWidths.data.set_length(0);
			this.layoutGroups.data.set_length(0);
			this.textWidth = 0;
			this.textHeight = 0;
			this.numLines = 1;
			this.maxScrollH = 0;
			this.maxScrollV = 1;
			this.bottomScrollV = 1;
		} else {
			this.getLayoutGroups();
			this.getLineMeasurements();
			this.setTextAlignment();
		}
		this.getBounds();
	}
	,set_restrict: function(value) {
		if(this.restrict == value) {
			return this.restrict;
		}
		this.restrict = value;
		if(this.restrict == null || _$UnicodeString_UnicodeString_$Impl_$.get_length(this.restrict) == 0) {
			this.__restrictRegexp = null;
		} else {
			this.__restrictRegexp = this.createRestrictRegexp(value);
		}
		return this.restrict;
	}
	,set_scrollV: function(value) {
		this.scrollV = value;
		this.updateBottomScrollV();
		return value;
	}
	,set_text: function(value) {
		if(value == null) {
			return this.text = value;
		}
		if(this.__restrictRegexp != null) {
			value = this.__restrictRegexp.split(value).join("");
		}
		if(this.maxChars > 0 && value.length > this.maxChars) {
			value = HxOverrides.substr(value,0,this.maxChars);
		}
		this.text = value;
		return this.text;
	}
	,__class__: openfl__$internal_text_TextEngine
	,__properties__: {set_text:"set_text",set_scrollV:"set_scrollV",set_restrict:"set_restrict"}
};
var openfl__$internal_text_TextFormatRange = function(format,start,end) {
	this.format = format;
	this.start = start;
	this.end = end;
};
$hxClasses["openfl._internal.text.TextFormatRange"] = openfl__$internal_text_TextFormatRange;
openfl__$internal_text_TextFormatRange.__name__ = "openfl._internal.text.TextFormatRange";
openfl__$internal_text_TextFormatRange.prototype = {
	end: null
	,format: null
	,start: null
	,__class__: openfl__$internal_text_TextFormatRange
};
var openfl__$internal_text_TextLayoutGroup = function(format,startIndex,endIndex) {
	this.format = format;
	this.startIndex = startIndex;
	this.endIndex = endIndex;
};
$hxClasses["openfl._internal.text.TextLayoutGroup"] = openfl__$internal_text_TextLayoutGroup;
openfl__$internal_text_TextLayoutGroup.__name__ = "openfl._internal.text.TextLayoutGroup";
openfl__$internal_text_TextLayoutGroup.prototype = {
	ascent: null
	,descent: null
	,endIndex: null
	,format: null
	,height: null
	,leading: null
	,lineIndex: null
	,offsetX: null
	,offsetY: null
	,positions: null
	,startIndex: null
	,width: null
	,getAdvance: function(index) {
		return this.positions[index];
	}
	,__class__: openfl__$internal_text_TextLayoutGroup
};
var openfl__$internal_ui_Gamepad = function(id) {
	this.onDisconnect = new openfl__$internal_app_Event0();
	this.onButtonUp = new openfl__$internal_app_Event1();
	this.onButtonDown = new openfl__$internal_app_Event1();
	this.onAxisMove = new openfl__$internal_app_Event2();
	this.id = id;
	this.connected = true;
};
$hxClasses["openfl._internal.ui.Gamepad"] = openfl__$internal_ui_Gamepad;
openfl__$internal_ui_Gamepad.__name__ = "openfl._internal.ui.Gamepad";
openfl__$internal_ui_Gamepad.__connect = function(id) {
	if(!openfl__$internal_ui_Gamepad.devices.h.hasOwnProperty(id)) {
		var gamepad = new openfl__$internal_ui_Gamepad(id);
		openfl__$internal_ui_Gamepad.devices.h[id] = gamepad;
		openfl__$internal_ui_Gamepad.onConnect.dispatch(gamepad);
	}
};
openfl__$internal_ui_Gamepad.__disconnect = function(id) {
	var gamepad = openfl__$internal_ui_Gamepad.devices.h[id];
	if(gamepad != null) {
		gamepad.connected = false;
	}
	openfl__$internal_ui_Gamepad.devices.remove(id);
	if(gamepad != null) {
		gamepad.onDisconnect.dispatch();
	}
};
openfl__$internal_ui_Gamepad.__getDeviceData = function() {
	if(navigator.getGamepads) {
		return navigator.getGamepads();
	} else if(navigator.webkitGetGamepads) {
		return navigator.webkitGetGamepads();
	} else {
		return null;
	}
};
openfl__$internal_ui_Gamepad.prototype = {
	connected: null
	,id: null
	,onAxisMove: null
	,onButtonDown: null
	,onButtonUp: null
	,onDisconnect: null
	,get_guid: function() {
		var devices = openfl__$internal_ui_Gamepad.__getDeviceData();
		return devices[this.id].id;
	}
	,get_name: function() {
		var devices = openfl__$internal_ui_Gamepad.__getDeviceData();
		return devices[this.id].id;
	}
	,__class__: openfl__$internal_ui_Gamepad
	,__properties__: {get_name:"get_name",get_guid:"get_guid"}
};
var openfl__$internal_ui__$GamepadAxis_GamepadAxis_$Impl_$ = {};
$hxClasses["openfl._internal.ui._GamepadAxis.GamepadAxis_Impl_"] = openfl__$internal_ui__$GamepadAxis_GamepadAxis_$Impl_$;
openfl__$internal_ui__$GamepadAxis_GamepadAxis_$Impl_$.__name__ = "openfl._internal.ui._GamepadAxis.GamepadAxis_Impl_";
openfl__$internal_ui__$GamepadAxis_GamepadAxis_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 0:
		return "LEFT_X";
	case 1:
		return "LEFT_Y";
	case 2:
		return "RIGHT_X";
	case 3:
		return "RIGHT_Y";
	case 4:
		return "TRIGGER_LEFT";
	case 5:
		return "TRIGGER_RIGHT";
	default:
		return "UNKNOWN (" + this1 + ")";
	}
};
var openfl__$internal_ui__$GamepadButton_GamepadButton_$Impl_$ = {};
$hxClasses["openfl._internal.ui._GamepadButton.GamepadButton_Impl_"] = openfl__$internal_ui__$GamepadButton_GamepadButton_$Impl_$;
openfl__$internal_ui__$GamepadButton_GamepadButton_$Impl_$.__name__ = "openfl._internal.ui._GamepadButton.GamepadButton_Impl_";
openfl__$internal_ui__$GamepadButton_GamepadButton_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 0:
		return "A";
	case 1:
		return "B";
	case 2:
		return "X";
	case 3:
		return "Y";
	case 4:
		return "BACK";
	case 5:
		return "GUIDE";
	case 6:
		return "START";
	case 7:
		return "LEFT_STICK";
	case 8:
		return "RIGHT_STICK";
	case 9:
		return "LEFT_SHOULDER";
	case 10:
		return "RIGHT_SHOULDER";
	case 11:
		return "DPAD_UP";
	case 12:
		return "DPAD_DOWN";
	case 13:
		return "DPAD_LEFT";
	case 14:
		return "DPAD_RIGHT";
	default:
		return "UNKNOWN (" + this1 + ")";
	}
};
var openfl__$internal_ui__$KeyModifier_KeyModifier_$Impl_$ = {};
$hxClasses["openfl._internal.ui._KeyModifier.KeyModifier_Impl_"] = openfl__$internal_ui__$KeyModifier_KeyModifier_$Impl_$;
openfl__$internal_ui__$KeyModifier_KeyModifier_$Impl_$.__name__ = "openfl._internal.ui._KeyModifier.KeyModifier_Impl_";
openfl__$internal_ui__$KeyModifier_KeyModifier_$Impl_$.__properties__ = {set_shiftKey:"set_shiftKey",get_shiftKey:"get_shiftKey",set_numLock:"set_numLock",get_numLock:"get_numLock",set_metaKey:"set_metaKey",get_metaKey:"get_metaKey",set_ctrlKey:"set_ctrlKey",get_ctrlKey:"get_ctrlKey",set_capsLock:"set_capsLock",get_capsLock:"get_capsLock",set_altKey:"set_altKey",get_altKey:"get_altKey"};
openfl__$internal_ui__$KeyModifier_KeyModifier_$Impl_$.get_altKey = function(this1) {
	if((this1 & 256) <= 0) {
		return (this1 & 512) > 0;
	} else {
		return true;
	}
};
openfl__$internal_ui__$KeyModifier_KeyModifier_$Impl_$.set_altKey = function(this1,value) {
	if(value) {
		this1 |= 768;
	} else {
		this1 &= 268435455 - 768;
	}
	return value;
};
openfl__$internal_ui__$KeyModifier_KeyModifier_$Impl_$.get_capsLock = function(this1) {
	if((this1 & 8192) <= 0) {
		return (this1 & 8192) > 0;
	} else {
		return true;
	}
};
openfl__$internal_ui__$KeyModifier_KeyModifier_$Impl_$.set_capsLock = function(this1,value) {
	if(value) {
		this1 |= 8192;
	} else {
		this1 &= 268435455 - 8192;
	}
	return value;
};
openfl__$internal_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey = function(this1) {
	if((this1 & 64) <= 0) {
		return (this1 & 128) > 0;
	} else {
		return true;
	}
};
openfl__$internal_ui__$KeyModifier_KeyModifier_$Impl_$.set_ctrlKey = function(this1,value) {
	if(value) {
		this1 |= 192;
	} else {
		this1 &= 268435455 - 192;
	}
	return value;
};
openfl__$internal_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey = function(this1) {
	if((this1 & 1024) <= 0) {
		return (this1 & 2048) > 0;
	} else {
		return true;
	}
};
openfl__$internal_ui__$KeyModifier_KeyModifier_$Impl_$.set_metaKey = function(this1,value) {
	if(value) {
		this1 |= 3072;
	} else {
		this1 &= 268435455 - 3072;
	}
	return value;
};
openfl__$internal_ui__$KeyModifier_KeyModifier_$Impl_$.get_numLock = function(this1) {
	if((this1 & 4096) <= 0) {
		return (this1 & 4096) > 0;
	} else {
		return true;
	}
};
openfl__$internal_ui__$KeyModifier_KeyModifier_$Impl_$.set_numLock = function(this1,value) {
	if(value) {
		this1 |= 4096;
	} else {
		this1 &= 268435455 - 4096;
	}
	return value;
};
openfl__$internal_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey = function(this1) {
	if((this1 & 1) <= 0) {
		return (this1 & 2) > 0;
	} else {
		return true;
	}
};
openfl__$internal_ui__$KeyModifier_KeyModifier_$Impl_$.set_shiftKey = function(this1,value) {
	if(value) {
		this1 |= 3;
	} else {
		this1 &= 268435455 - 3;
	}
	return value;
};
var openfl__$internal_ui_Window = function(application) {
	this.settingSystemClipboard = false;
	this.onTextPaste = new openfl__$internal_app_Event1();
	this.onTextCut = new openfl__$internal_app_Event1();
	this.onTextCopy = new openfl__$internal_app_Event1();
	this.onTextInput = new openfl__$internal_app_Event1();
	this.onKeyUp = new openfl__$internal_app_Event2();
	this.onKeyDown = new openfl__$internal_app_Event2();
	this.application = application;
	this.__fullscreen = false;
	this.scale = window.devicePixelRatio;
	var canvas = kha_SystemImpl.khanvas;
	this.width = canvas.clientWidth;
	this.height = canvas.clientHeight;
	this.cacheElementWidth = this.width;
	this.cacheElementHeight = this.height;
	canvas.width = Math.round(this.width * this.scale);
	canvas.height = Math.round(this.height * this.scale);
	canvas.style.width = this.width + "px";
	canvas.style.height = this.height + "px";
	kha_input_Gamepad.notifyOnConnect(openfl__$internal_ui_Gamepad.__connect,openfl__$internal_ui_Gamepad.__disconnect);
	kha_System.notifyOnCutCopyPaste($bind(this,this.onCut),$bind(this,this.onCopy),$bind(this,this.onPaste));
	canvas.addEventListener("webglcontextlost",$bind(this,this.handleContextLost),false);
	canvas.addEventListener("webglcontextrestored",$bind(this,this.handleContextRestored),false);
};
$hxClasses["openfl._internal.ui.Window"] = openfl__$internal_ui_Window;
openfl__$internal_ui_Window.__name__ = "openfl._internal.ui.Window";
openfl__$internal_ui_Window.prototype = {
	application: null
	,enableTextEvents: null
	,onKeyDown: null
	,onKeyUp: null
	,onTextInput: null
	,onTextCopy: null
	,onTextCut: null
	,onTextPaste: null
	,scale: null
	,stage: null
	,width: null
	,height: null
	,cacheElementHeight: null
	,cacheElementWidth: null
	,isFullscreen: null
	,requestedFullscreen: null
	,__fullscreen: null
	,updateScale: function() {
		this.scale = window.devicePixelRatio;
	}
	,handleContextLost: function(event) {
		event.preventDefault();
		this.stage.onRenderContextLost();
	}
	,handleContextRestored: function(event) {
		this.stage.onRenderContextRestored();
	}
	,readPixels: function() {
		var canvas = kha_SystemImpl.khanvas;
		var tempCanvas = window.document.createElement("canvas");
		tempCanvas.width = canvas.width | 0;
		tempCanvas.height = canvas.height | 0;
		tempCanvas.getContext("2d",null).drawImage(canvas,0,0);
		return openfl__$internal_graphics_Image.fromCanvas(tempCanvas);
	}
	,updateSize: function() {
		var canvas = kha_SystemImpl.khanvas;
		var elementWidth = canvas.clientWidth;
		var elementHeight = canvas.clientHeight;
		if(elementWidth != this.cacheElementWidth || elementHeight != this.cacheElementHeight) {
			this.cacheElementWidth = elementWidth;
			this.cacheElementHeight = elementHeight;
			if(this.width != elementWidth || this.height != elementHeight) {
				this.width = elementWidth;
				this.height = elementHeight;
				this.stage.onWindowResize(elementWidth,elementHeight);
			}
		}
	}
	,set_enableTextEvents: function(value) {
		if(value) {
			if(openfl__$internal_ui_Window.textInput == null) {
				openfl__$internal_ui_Window.textInput = window.document.createElement("input");
				openfl__$internal_ui_Window.textInput.type = "text";
				openfl__$internal_ui_Window.textInput.style.position = "absolute";
				openfl__$internal_ui_Window.textInput.style.opacity = "0";
				openfl__$internal_ui_Window.textInput.style.color = "transparent";
				openfl__$internal_ui_Window.textInput.value = openfl__$internal_ui_Window.dummyCharacter;
				openfl__$internal_ui_Window.textInput.autocapitalize = "off";
				openfl__$internal_ui_Window.textInput.autocorrect = "off";
				openfl__$internal_ui_Window.textInput.autocomplete = "off";
				openfl__$internal_ui_Window.textInput.style.left = "0px";
				openfl__$internal_ui_Window.textInput.style.top = "50%";
				if(new EReg("(iPad|iPhone|iPod).*OS 8_","gi").match(window.navigator.userAgent)) {
					openfl__$internal_ui_Window.textInput.style.fontSize = "0px";
					openfl__$internal_ui_Window.textInput.style.width = "0px";
					openfl__$internal_ui_Window.textInput.style.height = "0px";
				} else {
					openfl__$internal_ui_Window.textInput.style.width = "1px";
					openfl__$internal_ui_Window.textInput.style.height = "1px";
				}
				openfl__$internal_ui_Window.textInput.style.pointerEvents = "none";
				openfl__$internal_ui_Window.textInput.style.zIndex = "-10000000";
				kha_SystemImpl.khanvas.parentElement.appendChild(openfl__$internal_ui_Window.textInput);
			}
			if(!this.enableTextEvents) {
				openfl__$internal_ui_Window.textInput.addEventListener("input",$bind(this,this.handleInputEvent),true);
				openfl__$internal_ui_Window.textInput.addEventListener("blur",$bind(this,this.handleFocusEvent),true);
			}
			openfl__$internal_ui_Window.textInput.focus();
			openfl__$internal_ui_Window.textInput.select();
		} else if(openfl__$internal_ui_Window.textInput != null) {
			openfl__$internal_ui_Window.textInput.removeEventListener("input",$bind(this,this.handleInputEvent),true);
			openfl__$internal_ui_Window.textInput.removeEventListener("blur",$bind(this,this.handleFocusEvent),true);
			openfl__$internal_ui_Window.textInput.blur();
		}
		return this.enableTextEvents = value;
	}
	,onCopy: function() {
		if(this.settingSystemClipboard) {
			return openfl__$internal_system_Clipboard.text;
		} else {
			var result = null;
			this.onTextCopy.dispatch(function(string) {
				openfl__$internal_system_Clipboard.setText(string,false);
				result = string;
			});
			return result;
		}
	}
	,onCut: function() {
		var result = null;
		this.onTextCut.dispatch(function(string) {
			openfl__$internal_system_Clipboard.setText(string,false);
			result = string;
		});
		return result;
	}
	,onPaste: function(text) {
		if(text == "") {
			return;
		}
		text = StringTools.replace(StringTools.replace(text,"\r\n","\n"),"\r","\n");
		openfl__$internal_system_Clipboard.setText(text,false);
		if(this.enableTextEvents) {
			this.onTextPaste.dispatch(text);
		}
	}
	,handleFocusEvent: function(event) {
		if(this.enableTextEvents) {
			haxe_Timer.delay(function() {
				openfl__$internal_ui_Window.textInput.focus();
				return;
			},20);
		}
	}
	,handleInputEvent: function(event) {
		if(openfl__$internal_ui_Window.textInput.value != openfl__$internal_ui_Window.dummyCharacter) {
			var value = StringTools.replace(StringTools.replace(StringTools.replace(openfl__$internal_ui_Window.textInput.value,openfl__$internal_ui_Window.dummyCharacter,""),"\r\n","\n"),"\r","\n");
			if(value.length > 0) {
				this.onTextInput.dispatch(value);
			}
			openfl__$internal_ui_Window.textInput.value = openfl__$internal_ui_Window.dummyCharacter;
		}
	}
	,normalizeInputNewlines: function(text) {
		return StringTools.replace(StringTools.replace(text,"\r\n","\n"),"\r","\n");
	}
	,handleResizeEvent: function(event) {
		this.scale = window.devicePixelRatio;
		this.updateSize();
	}
	,settingSystemClipboard: null
	,setClipboard: function(value) {
		var inputEnabled = this.enableTextEvents;
		this.set_enableTextEvents(true);
		var cacheText = openfl__$internal_ui_Window.textInput.value;
		openfl__$internal_ui_Window.textInput.value = value;
		openfl__$internal_ui_Window.textInput.select();
		this.settingSystemClipboard = true;
		if(window.document.queryCommandEnabled("copy")) {
			window.document.execCommand("copy");
		}
		this.settingSystemClipboard = false;
		openfl__$internal_ui_Window.textInput.value = cacheText;
		this.set_enableTextEvents(inputEnabled);
	}
	,get_fullscreen: function() {
		return this.__fullscreen;
	}
	,set_fullscreen: function(value) {
		var element = kha_SystemImpl.khanvas;
		if(value) {
			if(!this.requestedFullscreen && !this.isFullscreen) {
				this.requestedFullscreen = true;
				if($bind(element,element.requestFullscreen)) {
					document.addEventListener("fullscreenchange",$bind(this,this.handleFullscreenEvent),false);
					document.addEventListener("fullscreenerror",$bind(this,this.handleFullscreenEvent),false);
					element.requestFullscreen();
				} else if(element.mozRequestFullScreen) {
					document.addEventListener("mozfullscreenchange",$bind(this,this.handleFullscreenEvent),false);
					document.addEventListener("mozfullscreenerror",$bind(this,this.handleFullscreenEvent),false);
					element.mozRequestFullScreen();
				} else if(element.webkitRequestFullscreen) {
					document.addEventListener("webkitfullscreenchange",$bind(this,this.handleFullscreenEvent),false);
					document.addEventListener("webkitfullscreenerror",$bind(this,this.handleFullscreenEvent),false);
					element.webkitRequestFullscreen();
				} else if(element.msRequestFullscreen) {
					document.addEventListener("MSFullscreenChange",$bind(this,this.handleFullscreenEvent),false);
					document.addEventListener("MSFullscreenError",$bind(this,this.handleFullscreenEvent),false);
					element.msRequestFullscreen();
				}
			}
		} else if(this.isFullscreen) {
			this.requestedFullscreen = false;
			if(document.exitFullscreen) {
				document.exitFullscreen();
			} else if(document.mozCancelFullScreen) {
				document.mozCancelFullScreen();
			} else if(document.webkitExitFullscreen) {
				document.webkitExitFullscreen();
			} else if(document.msExitFullscreen) {
				document.msExitFullscreen();
			}
		}
		return this.__fullscreen = value;
	}
	,handleFullscreenEvent: function(event) {
		var fullscreenElement = document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement || document.msFullscreenElement;
		if(fullscreenElement != null) {
			this.isFullscreen = true;
			this.__fullscreen = true;
			if(this.requestedFullscreen) {
				this.requestedFullscreen = false;
				this.stage.onWindowFullscreen();
			}
		} else {
			this.isFullscreen = false;
			this.__fullscreen = false;
			this.stage.onWindowRestore();
			var changeEvents = ["fullscreenchange","mozfullscreenchange","webkitfullscreenchange","MSFullscreenChange"];
			var errorEvents = ["fullscreenerror","mozfullscreenerror","webkitfullscreenerror","MSFullscreenError"];
			var _g = 0;
			var _g1 = changeEvents.length;
			while(_g < _g1) {
				var i = _g++;
				window.document.removeEventListener(changeEvents[i],$bind(this,this.handleFullscreenEvent),false);
				window.document.removeEventListener(errorEvents[i],$bind(this,this.handleFullscreenEvent),false);
			}
		}
	}
	,__class__: openfl__$internal_ui_Window
	,__properties__: {set_fullscreen:"set_fullscreen",get_fullscreen:"get_fullscreen",set_enableTextEvents:"set_enableTextEvents"}
};
var openfl__$internal_utils_Log = function() { };
$hxClasses["openfl._internal.utils.Log"] = openfl__$internal_utils_Log;
openfl__$internal_utils_Log.__name__ = "openfl._internal.utils.Log";
openfl__$internal_utils_Log.debug = function(message,info) {
	if(openfl__$internal_utils_Log.level >= 4) {
		window.console.debug("[" + info.className + "] " + message);
	}
};
openfl__$internal_utils_Log.error = function(message,info) {
	if(openfl__$internal_utils_Log.level >= 1) {
		var message1 = "[" + info.className + "] ERROR: " + message;
		if(openfl__$internal_utils_Log.throwErrors) {
			throw new js__$Boot_HaxeError(message1);
		} else {
			window.console.error(message1);
		}
	}
};
openfl__$internal_utils_Log.info = function(message,info) {
	if(openfl__$internal_utils_Log.level >= 3) {
		window.console.info("[" + info.className + "] " + message);
	}
};
openfl__$internal_utils_Log.print = function(message) {
	window.console.log(message);
};
openfl__$internal_utils_Log.println = function(message) {
	window.console.log(message);
};
openfl__$internal_utils_Log.verbose = function(message,info) {
	if(openfl__$internal_utils_Log.level >= 5) {
		window.console.log("[" + info.className + "] " + message);
	}
};
openfl__$internal_utils_Log.warn = function(message,info) {
	if(openfl__$internal_utils_Log.level >= 2) {
		window.console.warn("[" + info.className + "] WARNING: " + message);
	}
};
var openfl__$internal_utils_PerlinNoise = function(seed,octaves,falloff) {
	if(seed == null) {
		seed = 123;
	}
	if(falloff == null) {
		falloff = .5;
	}
	this.octaves = octaves == null ? 4 : octaves;
	this.baseFactor = 0.015625;
	this.seedOffset(seed);
	this.octFreqPers(falloff);
};
$hxClasses["openfl._internal.utils.PerlinNoise"] = openfl__$internal_utils_PerlinNoise;
openfl__$internal_utils_PerlinNoise.__name__ = "openfl._internal.utils.PerlinNoise";
openfl__$internal_utils_PerlinNoise.prototype = {
	octaves: null
	,aOctFreq: null
	,aOctPers: null
	,fPersMax: null
	,iXoffset: null
	,iYoffset: null
	,iZoffset: null
	,baseFactor: null
	,fill: function(bitmap,_x,_y,_z,_) {
		var baseX = _x * this.baseFactor + this.iXoffset;
		_y = _y * this.baseFactor + this.iYoffset;
		_z = _z * this.baseFactor + this.iZoffset;
		var width = bitmap.width;
		var height = bitmap.height;
		var p = openfl__$internal_utils_PerlinNoise.P;
		var octaves = this.octaves;
		var aOctFreq = this.aOctFreq;
		var aOctPers = this.aOctPers;
		var _g = 0;
		var _g1 = height;
		while(_g < _g1) {
			var py = _g++;
			_x = baseX;
			var _g2 = 0;
			var _g11 = width;
			while(_g2 < _g11) {
				var px = _g2++;
				var s = 0.;
				var _g3 = 0;
				var _g12 = octaves;
				while(_g3 < _g12) {
					var i = _g3++;
					var fFreq = aOctFreq[i];
					var fPers = aOctPers[i];
					var x = _x * fFreq;
					var y = _y * fFreq;
					var z = _z * fFreq;
					var xf = x - x % 1;
					var yf = y - y % 1;
					var zf = z - z % 1;
					var X = (xf | 0) & 255;
					var Y = (yf | 0) & 255;
					var Z = (zf | 0) & 255;
					x -= xf;
					y -= yf;
					z -= zf;
					var u = x * x * x * (x * (x * 6 - 15) + 10);
					var v = y * y * y * (y * (y * 6 - 15) + 10);
					var w = z * z * z * (z * (z * 6 - 15) + 10);
					var A = p[X] + Y;
					var AA = p[A] + Z;
					var AB = p[A + 1] + Z;
					var B = p[X + 1] + Y;
					var BA = p[B] + Z;
					var BB = p[B + 1] + Z;
					var x1 = x - 1;
					var y1 = y - 1;
					var z1 = z - 1;
					var hash = p[BB + 1] & 15;
					var g1 = ((hash & 1) == 0 ? hash < 8 ? x1 : y1 : hash < 8 ? -x1 : -y1) + ((hash & 2) == 0 ? hash < 4 ? y1 : hash == 12 ? x1 : z1 : hash < 4 ? -y1 : hash == 14 ? -x1 : -z1);
					hash = p[AB + 1] & 15;
					var g2 = ((hash & 1) == 0 ? hash < 8 ? x : y1 : hash < 8 ? -x : -y1) + ((hash & 2) == 0 ? hash < 4 ? y1 : hash == 12 ? x : z1 : hash < 4 ? -y1 : hash == 14 ? -x : -z1);
					hash = p[BA + 1] & 15;
					var g3 = ((hash & 1) == 0 ? hash < 8 ? x1 : y : hash < 8 ? -x1 : -y) + ((hash & 2) == 0 ? hash < 4 ? y : hash == 12 ? x1 : z1 : hash < 4 ? -y : hash == 14 ? -x1 : -z1);
					hash = p[AA + 1] & 15;
					var g4 = ((hash & 1) == 0 ? hash < 8 ? x : y : hash < 8 ? -x : -y) + ((hash & 2) == 0 ? hash < 4 ? y : hash == 12 ? x : z1 : hash < 4 ? -y : hash == 14 ? -x : -z1);
					hash = p[BB] & 15;
					var g5 = ((hash & 1) == 0 ? hash < 8 ? x1 : y1 : hash < 8 ? -x1 : -y1) + ((hash & 2) == 0 ? hash < 4 ? y1 : hash == 12 ? x1 : z : hash < 4 ? -y1 : hash == 14 ? -x1 : -z);
					hash = p[AB] & 15;
					var g6 = ((hash & 1) == 0 ? hash < 8 ? x : y1 : hash < 8 ? -x : -y1) + ((hash & 2) == 0 ? hash < 4 ? y1 : hash == 12 ? x : z : hash < 4 ? -y1 : hash == 14 ? -x : -z);
					hash = p[BA] & 15;
					var g7 = ((hash & 1) == 0 ? hash < 8 ? x1 : y : hash < 8 ? -x1 : -y) + ((hash & 2) == 0 ? hash < 4 ? y : hash == 12 ? x1 : z : hash < 4 ? -y : hash == 14 ? -x1 : -z);
					hash = p[AA] & 15;
					var g8 = ((hash & 1) == 0 ? hash < 8 ? x : y : hash < 8 ? -x : -y) + ((hash & 2) == 0 ? hash < 4 ? y : hash == 12 ? x : z : hash < 4 ? -y : hash == 14 ? -x : -z);
					g2 += u * (g1 - g2);
					g4 += u * (g3 - g4);
					g6 += u * (g5 - g6);
					g8 += u * (g7 - g8);
					g4 += v * (g2 - g4);
					g8 += v * (g6 - g8);
					s += (g8 + w * (g4 - g8)) * fPers;
				}
				var color = (s * this.fPersMax + 1) * 128 | 0;
				bitmap.setPixel32(px,py,-16777216 | color << 16 | color << 8 | color);
				_x += this.baseFactor;
			}
			_y += this.baseFactor;
		}
	}
	,octFreqPers: function(fPersistence) {
		var fFreq;
		var fPers;
		this.aOctFreq = [];
		this.aOctPers = [];
		this.fPersMax = 0;
		var _g = 0;
		var _g1 = this.octaves;
		while(_g < _g1) {
			var i = _g++;
			fFreq = Math.pow(2,i);
			fPers = Math.pow(fPersistence,i);
			this.fPersMax += fPers;
			this.aOctFreq.push(fFreq);
			this.aOctPers.push(fPers);
		}
		this.fPersMax = 1 / this.fPersMax;
	}
	,seedOffset: function(iSeed) {
		iSeed = iSeed * 16807. % 2147483647 | 0;
		this.iXoffset = iSeed;
		iSeed = iSeed * 16807. % 2147483647 | 0;
		this.iYoffset = iSeed;
		iSeed = iSeed * 16807. % 2147483647 | 0;
		this.iZoffset = iSeed;
	}
	,__class__: openfl__$internal_utils_PerlinNoise
};
var openfl__$internal_utils_compress_Deflate = function() { };
$hxClasses["openfl._internal.utils.compress.Deflate"] = openfl__$internal_utils_compress_Deflate;
openfl__$internal_utils_compress_Deflate.__name__ = "openfl._internal.utils.compress.Deflate";
openfl__$internal_utils_compress_Deflate.compress = function(bytes) {
	return haxe_io_Bytes.ofData(pako.deflateRaw(bytes.b.bufferValue));
};
openfl__$internal_utils_compress_Deflate.decompress = function(bytes) {
	return haxe_io_Bytes.ofData(pako.inflateRaw(bytes.b.bufferValue));
};
var openfl__$internal_utils_compress_GZip = function() { };
$hxClasses["openfl._internal.utils.compress.GZip"] = openfl__$internal_utils_compress_GZip;
openfl__$internal_utils_compress_GZip.__name__ = "openfl._internal.utils.compress.GZip";
openfl__$internal_utils_compress_GZip.compress = function(bytes) {
	return haxe_io_Bytes.ofData(pako.gzip(bytes.b.bufferValue));
};
openfl__$internal_utils_compress_GZip.decompress = function(bytes) {
	return haxe_io_Bytes.ofData(pako.ungzip(bytes.b.bufferValue));
};
var openfl__$internal_utils_compress_LZMA = function() { };
$hxClasses["openfl._internal.utils.compress.LZMA"] = openfl__$internal_utils_compress_LZMA;
openfl__$internal_utils_compress_LZMA.__name__ = "openfl._internal.utils.compress.LZMA";
openfl__$internal_utils_compress_LZMA.compress = function(bytes) {
	return null;
};
openfl__$internal_utils_compress_LZMA.decompress = function(bytes) {
	return null;
};
var openfl__$internal_utils_compress_Zlib = function() { };
$hxClasses["openfl._internal.utils.compress.Zlib"] = openfl__$internal_utils_compress_Zlib;
openfl__$internal_utils_compress_Zlib.__name__ = "openfl._internal.utils.compress.Zlib";
openfl__$internal_utils_compress_Zlib.compress = function(bytes) {
	return haxe_io_Bytes.ofData(pako.deflate(bytes.b.bufferValue));
};
openfl__$internal_utils_compress_Zlib.decompress = function(bytes) {
	return haxe_io_Bytes.ofData(pako.inflate(bytes.b.bufferValue));
};
var openfl_desktop_Clipboard = function() { };
$hxClasses["openfl.desktop.Clipboard"] = openfl_desktop_Clipboard;
openfl_desktop_Clipboard.__name__ = "openfl.desktop.Clipboard";
openfl_desktop_Clipboard.__properties__ = {get_generalClipboard:"get_generalClipboard"};
openfl_desktop_Clipboard.get_generalClipboard = function() {
	if(openfl_desktop_Clipboard.generalClipboard == null) {
		openfl_desktop_Clipboard.generalClipboard = new openfl_desktop__$Clipboard_GeneralClipboard();
	}
	return openfl_desktop_Clipboard.generalClipboard;
};
openfl_desktop_Clipboard.prototype = {
	__htmlText: null
	,__richText: null
	,__text: null
	,clear: function() {
		this.__htmlText = null;
		this.__richText = null;
		this.__text = null;
	}
	,clearData: function(format) {
		switch(format) {
		case 0:
			this.__htmlText = null;
			break;
		case 1:
			this.__richText = null;
			break;
		case 2:
			this.__text = null;
			break;
		default:
		}
	}
	,getData: function(format,transferMode) {
		if(transferMode == null) {
			transferMode = 3;
		}
		switch(format) {
		case 0:
			return this.__htmlText;
		case 1:
			return this.__richText;
		case 2:
			return this.__text;
		default:
			return null;
		}
	}
	,hasFormat: function(format) {
		switch(format) {
		case 0:
			return this.__htmlText != null;
		case 1:
			return this.__richText != null;
		case 2:
			return this.__text != null;
		default:
			return false;
		}
	}
	,setData: function(format,data,serializable) {
		if(serializable == null) {
			serializable = true;
		}
		switch(format) {
		case 0:
			this.__htmlText = Std.string(data);
			return true;
		case 1:
			this.__richText = Std.string(data);
			return true;
		case 2:
			this.__text = Std.string(data);
			return true;
		default:
			return false;
		}
	}
	,setDataHandler: function(format,handler,serializable) {
		if(serializable == null) {
			serializable = true;
		}
		openfl_Lib.notImplemented({ fileName : "openfl/desktop/Clipboard.hx", lineNumber : 74, className : "openfl.desktop.Clipboard", methodName : "setDataHandler"});
		return false;
	}
	,get_formats: function() {
		var formats = [];
		if(this.hasFormat(0)) {
			formats.push(0);
		}
		if(this.hasFormat(1)) {
			formats.push(1);
		}
		if(this.hasFormat(2)) {
			formats.push(2);
		}
		return formats;
	}
	,__class__: openfl_desktop_Clipboard
	,__properties__: {get_formats:"get_formats"}
};
var openfl_desktop__$Clipboard_GeneralClipboard = function() {
};
$hxClasses["openfl.desktop._Clipboard.GeneralClipboard"] = openfl_desktop__$Clipboard_GeneralClipboard;
openfl_desktop__$Clipboard_GeneralClipboard.__name__ = "openfl.desktop._Clipboard.GeneralClipboard";
openfl_desktop__$Clipboard_GeneralClipboard.__super__ = openfl_desktop_Clipboard;
openfl_desktop__$Clipboard_GeneralClipboard.prototype = $extend(openfl_desktop_Clipboard.prototype,{
	clear: function() {
		openfl__$internal_system_Clipboard.setText(null,true);
	}
	,clearData: function(format) {
		switch(format) {
		case 0:case 1:case 2:
			openfl__$internal_system_Clipboard.setText(null,true);
			break;
		default:
		}
	}
	,getData: function(format,transferMode) {
		if(transferMode == null) {
			transferMode = 3;
		}
		switch(format) {
		case 0:case 1:case 2:
			return openfl__$internal_system_Clipboard.text;
		default:
			return null;
		}
	}
	,hasFormat: function(format) {
		switch(format) {
		case 0:case 1:case 2:
			return openfl__$internal_system_Clipboard.text != null;
		default:
			return false;
		}
	}
	,setData: function(format,data,serializable) {
		if(serializable == null) {
			serializable = true;
		}
		switch(format) {
		case 0:case 1:case 2:
			openfl__$internal_system_Clipboard.setText(Std.string(data),true);
			return true;
		default:
			return false;
		}
	}
	,__class__: openfl_desktop__$Clipboard_GeneralClipboard
});
var openfl_desktop__$ClipboardFormats_ClipboardFormats_$Impl_$ = {};
$hxClasses["openfl.desktop._ClipboardFormats.ClipboardFormats_Impl_"] = openfl_desktop__$ClipboardFormats_ClipboardFormats_$Impl_$;
openfl_desktop__$ClipboardFormats_ClipboardFormats_$Impl_$.__name__ = "openfl.desktop._ClipboardFormats.ClipboardFormats_Impl_";
openfl_desktop__$ClipboardFormats_ClipboardFormats_$Impl_$.fromString = function(value) {
	switch(value) {
	case "air:html":
		return 0;
	case "air:rtf":
		return 1;
	case "air:text":
		return 2;
	default:
		return null;
	}
};
openfl_desktop__$ClipboardFormats_ClipboardFormats_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 0:
		return "air:html";
	case 1:
		return "air:rtf";
	case 2:
		return "air:text";
	default:
		return null;
	}
};
var openfl_desktop__$ClipboardTransferMode_ClipboardTransferMode_$Impl_$ = {};
$hxClasses["openfl.desktop._ClipboardTransferMode.ClipboardTransferMode_Impl_"] = openfl_desktop__$ClipboardTransferMode_ClipboardTransferMode_$Impl_$;
openfl_desktop__$ClipboardTransferMode_ClipboardTransferMode_$Impl_$.__name__ = "openfl.desktop._ClipboardTransferMode.ClipboardTransferMode_Impl_";
openfl_desktop__$ClipboardTransferMode_ClipboardTransferMode_$Impl_$.fromString = function(value) {
	switch(value) {
	case "cloneOnly":
		return 0;
	case "clonePreferred":
		return 1;
	case "originalOnly":
		return 2;
	case "originalPreferred":
		return 3;
	default:
		return null;
	}
};
openfl_desktop__$ClipboardTransferMode_ClipboardTransferMode_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 0:
		return "cloneOnly";
	case 1:
		return "clonePreferred";
	case 2:
		return "originalOnly";
	case 3:
		return "originalPreferred";
	default:
		return null;
	}
};
var openfl_display_Bitmap = function(bitmapData,pixelSnapping,smoothing) {
	if(smoothing == null) {
		smoothing = false;
	}
	this.__batchQuadDirty = true;
	openfl_display_DisplayObject.call(this);
	this.__bitmapData = bitmapData;
	if(pixelSnapping == null) {
		pixelSnapping = 1;
	}
	this.__pixelSnapping = pixelSnapping;
	this.smoothing = smoothing;
};
$hxClasses["openfl.display.Bitmap"] = openfl_display_Bitmap;
openfl_display_Bitmap.__name__ = "openfl.display.Bitmap";
openfl_display_Bitmap.__super__ = openfl_display_DisplayObject;
openfl_display_Bitmap.prototype = $extend(openfl_display_DisplayObject.prototype,{
	smoothing: null
	,__bitmapData: null
	,__imageVersion: null
	,__batchQuad: null
	,__batchQuadDirty: null
	,__cleanup: function() {
		openfl_display_DisplayObject.prototype.__cleanup.call(this);
		if(this.__bitmapData != null) {
			this.__bitmapData.__cleanup();
		}
		if(this.__batchQuad != null) {
			openfl__$internal_renderer_opengl_batcher_Quad.pool.release(this.__batchQuad);
			this.__batchQuad = null;
		}
	}
	,__enterFrame: function(deltaTime) {
		if(this.__bitmapData != null && this.__bitmapData.image != null) {
			var image = this.__bitmapData.image;
			if(this.__bitmapData.image.version != this.__imageVersion) {
				if(!this.__renderDirty) {
					this.__renderDirty = true;
					this.__setParentRenderDirty();
				}
				if(!this.__updateDirty) {
					this.__updateDirty = true;
					this.__setParentUpdateTraverse();
				}
				this.__imageVersion = image.version;
			}
		}
	}
	,__getBounds: function(rect,matrix) {
		if(this.__bitmapData != null) {
			var bounds = openfl_geom_Rectangle.__pool.get();
			bounds.setTo(0,0,this.__bitmapData.width,this.__bitmapData.height);
			bounds.__transform(bounds,matrix);
			rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
			openfl_geom_Rectangle.__pool.release(bounds);
		}
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject,hitTestWhenMouseDisabled) {
		if(hitTestWhenMouseDisabled == null) {
			hitTestWhenMouseDisabled = false;
		}
		if(!hitObject.get_visible() || this.__isMask || this.__bitmapData == null) {
			return false;
		}
		if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
			return false;
		}
		this.__getRenderTransform();
		var _this = this.__renderTransform;
		var norm = _this.a * _this.d - _this.b * _this.c;
		var px = norm == 0 ? -_this.tx : 1.0 / norm * (_this.c * (_this.ty - y) + _this.d * (x - _this.tx));
		var _this1 = this.__renderTransform;
		var norm1 = _this1.a * _this1.d - _this1.b * _this1.c;
		var py = norm1 == 0 ? -_this1.ty : 1.0 / norm1 * (_this1.a * (y - _this1.ty) + _this1.b * (_this1.tx - x));
		if(px > 0 && py > 0 && px <= this.__bitmapData.width && py <= this.__bitmapData.height) {
			if(this.__scrollRect != null && !this.__scrollRect.contains(px,py)) {
				return false;
			}
			if(stack != null && !interactiveOnly && !hitTestWhenMouseDisabled) {
				stack.push(hitObject);
			}
			return true;
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		if(this.__bitmapData == null) {
			return false;
		}
		this.__getRenderTransform();
		var _this = this.__renderTransform;
		var norm = _this.a * _this.d - _this.b * _this.c;
		var px = norm == 0 ? -_this.tx : 1.0 / norm * (_this.c * (_this.ty - y) + _this.d * (x - _this.tx));
		var _this1 = this.__renderTransform;
		var norm1 = _this1.a * _this1.d - _this1.b * _this1.c;
		var py = norm1 == 0 ? -_this1.ty : 1.0 / norm1 * (_this1.a * (y - _this1.ty) + _this1.b * (_this1.tx - x));
		if(px > 0 && py > 0 && px <= this.__bitmapData.width && py <= this.__bitmapData.height) {
			return true;
		}
		return false;
	}
	,__renderCanvas: function(renderSession) {
		this.__updateCacheBitmap(!this.__worldColorTransform.__isDefault(),renderSession.pixelRatio,renderSession.allowSmoothing);
		if(this.__cacheBitmap != null && !this.__cacheBitmapRender) {
			openfl__$internal_renderer_canvas_CanvasBitmap.render(this.__cacheBitmap,renderSession);
		} else {
			openfl__$internal_renderer_canvas_CanvasBitmap.render(this,renderSession);
		}
	}
	,__renderCanvasMask: function(renderSession) {
		renderSession.context.rect(0,0,this.__bitmapData.width,this.__bitmapData.height);
	}
	,__getBatchQuad: function(renderSession) {
		if(this.__batchQuadDirty) {
			if(this.__batchQuad == null) {
				this.__batchQuad = openfl__$internal_renderer_opengl_batcher_Quad.pool.get();
			}
			var snapToPixel;
			var _g = this.__pixelSnapping;
			if(_g == null) {
				snapToPixel = false;
			} else {
				switch(_g) {
				case 0:
					snapToPixel = true;
					break;
				case 1:
					snapToPixel = Math.abs(this.__renderTransform.a) == 1 && Math.abs(this.__renderTransform.d) == 1;
					break;
				case 2:
					snapToPixel = false;
					break;
				}
			}
			var transform = renderSession.renderer.getDisplayTransformTempMatrix(this.__renderTransform,snapToPixel);
			this.get_bitmapData().__fillBatchQuad(transform,this.__batchQuad.vertexData);
			this.__batchQuad.texture = this.__bitmapData.__getTexture();
			this.__batchQuadDirty = false;
		}
		var _this = this.__batchQuad;
		var alpha = this.__worldAlpha;
		var colorTransform = this.__worldColorTransform;
		var blendMode = openfl__$internal_renderer_opengl_batcher_BlendMode.fromOpenFLBlendMode(this.__worldBlendMode);
		_this.alpha = alpha;
		_this.colorTransform = colorTransform;
		_this.blendMode = blendMode;
		_this.smoothing = this.smoothing;
		return this.__batchQuad;
	}
	,__updateTransforms: function() {
		openfl_display_DisplayObject.prototype.__updateTransforms.call(this);
		this.__batchQuadDirty = true;
	}
	,__renderBatched: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0 || this.__bitmapData == null || !this.__bitmapData.__isValid) {
			return;
		}
		renderSession.maskManager.pushObject(this);
		renderSession.batcher.render(this.__getBatchQuad(renderSession));
		renderSession.maskManager.popObject(this);
	}
	,__renderAsMask: function(renderSession) {
		if(this.__bitmapData == null || !this.__bitmapData.__isValid) {
			return;
		}
		var smoothing = renderSession.allowSmoothing && (this.smoothing || renderSession.forceSmoothing);
		var _g = this.__pixelSnapping;
		var tmp;
		if(_g == null) {
			tmp = false;
		} else {
			switch(_g) {
			case 0:
				tmp = true;
				break;
			case 1:
				tmp = Math.abs(this.__renderTransform.a) == 1 && Math.abs(this.__renderTransform.d) == 1;
				break;
			case 2:
				tmp = false;
				break;
			}
		}
		renderSession.renderMask(this.__bitmapData,smoothing,this.__renderTransform,tmp);
	}
	,__renderGL: function(renderSession) {
		this.__updateCacheBitmap(false,renderSession.pixelRatio,renderSession.allowSmoothing);
		if(this.__cacheBitmap != null && !this.__cacheBitmapRender) {
			this.__cacheBitmap.__renderBatched(renderSession);
		} else {
			this.__renderBatched(renderSession);
		}
	}
	,__renderGLMask: function(renderSession) {
		this.__updateCacheBitmap(false,renderSession.pixelRatio,renderSession.allowSmoothing);
		if(this.__cacheBitmap != null && !this.__cacheBitmapRender) {
			this.__cacheBitmap.__renderAsMask(renderSession);
		} else {
			this.__renderAsMask(renderSession);
		}
	}
	,__updateCacheBitmap: function(force,pixelRatio,allowSmoothing) {
		if(!force && !(this.__filters != null && this.__filters.length > 0) && this.__cacheBitmap == null) {
			return false;
		}
		return openfl_display_DisplayObject.prototype.__updateCacheBitmap.call(this,force,pixelRatio,allowSmoothing);
	}
	,__forceRenderDirty: function() {
		openfl_display_DisplayObject.prototype.__forceRenderDirty.call(this);
		this.__batchQuadDirty = true;
	}
	,get_bitmapData: function() {
		return this.__bitmapData;
	}
	,set_bitmapData: function(value) {
		this.__bitmapData = value;
		this.smoothing = false;
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
		if(!this.__updateDirty) {
			this.__updateDirty = true;
			this.__setParentUpdateTraverse();
		}
		this.__batchQuadDirty = true;
		var tmp = this.__filters != null && this.__filters.length > 0;
		this.__imageVersion = -1;
		return this.__bitmapData;
	}
	,get_height: function() {
		if(this.__bitmapData != null) {
			return this.__bitmapData.height * Math.abs(this.get_scaleY());
		}
		return 0;
	}
	,set_height: function(value) {
		if(this.__bitmapData != null) {
			if(value != this.__bitmapData.height * this.__scaleY) {
				if(!this.__renderDirty) {
					this.__renderDirty = true;
					this.__setParentRenderDirty();
				}
				if(!this.__updateDirty) {
					this.__updateDirty = true;
					this.__setParentUpdateTraverse();
				}
				this.set_scaleY(value / this.__bitmapData.height);
			}
			return value;
		}
		return 0;
	}
	,get_width: function() {
		if(this.__bitmapData != null) {
			return this.__bitmapData.width * Math.abs(this.__scaleX);
		}
		return 0;
	}
	,set_width: function(value) {
		if(this.__bitmapData != null) {
			if(value != this.__bitmapData.width * this.__scaleX) {
				if(!this.__renderDirty) {
					this.__renderDirty = true;
					this.__setParentRenderDirty();
				}
				if(!this.__updateDirty) {
					this.__updateDirty = true;
					this.__setParentUpdateTraverse();
				}
				this.set_scaleX(value / this.__bitmapData.width);
			}
			return value;
		}
		return 0;
	}
	,__class__: openfl_display_Bitmap
	,__properties__: $extend(openfl_display_DisplayObject.prototype.__properties__,{set_pixelSnapping:"set_pixelSnapping",get_pixelSnapping:"get_pixelSnapping",set_bitmapData:"set_bitmapData",get_bitmapData:"get_bitmapData"})
});
var openfl_display_BitmapData = function(width,height,transparent,fillColor) {
	if(fillColor == null) {
		fillColor = -1;
	}
	if(transparent == null) {
		transparent = true;
	}
	this.__pixelRatio = 1.0;
	if(width == null || width < 0) {
		width = 0;
	}
	if(height == null || height < 0) {
		height = 0;
	}
	this.width = width;
	this.height = height;
	this.transparent = transparent;
	this.rect = new openfl_geom_Rectangle(0,0,width,height);
	if(width > 0 && height > 0) {
		this.image = openfl__$internal_graphics_Image.fromColor(width,height,fillColor,transparent);
		this.__isValid = true;
		this.__readable = true;
	}
	this.__worldTransform = new openfl_geom_Matrix();
	this.__worldColorTransform = new openfl_geom_ColorTransform();
	this.__renderable = true;
	this.__ownsTexture = false;
};
$hxClasses["openfl.display.BitmapData"] = openfl_display_BitmapData;
openfl_display_BitmapData.__name__ = "openfl.display.BitmapData";
openfl_display_BitmapData.__interfaces__ = [openfl_display_IBitmapDrawable];
openfl_display_BitmapData.fromCanvas = function(canvas,transparent) {
	if(transparent == null) {
		transparent = true;
	}
	if(canvas == null) {
		return null;
	}
	var bitmapData = new openfl_display_BitmapData(0,0,transparent,0);
	bitmapData.__fromImage(openfl__$internal_graphics_Image.fromCanvas(canvas));
	bitmapData.image.transparent = transparent;
	return bitmapData;
};
openfl_display_BitmapData.fromKhaImage = function(image) {
	return openfl_display_BitmapData.fromImage(openfl__$internal_graphics_Image.fromHTMLImage(image.image));
};
openfl_display_BitmapData.fromImage = function(image,transparent) {
	if(transparent == null) {
		transparent = true;
	}
	if(image == null) {
		return null;
	}
	var bitmapData = new openfl_display_BitmapData(0,0,transparent,0);
	bitmapData.__fromImage(image);
	bitmapData.image.transparent = transparent;
	return bitmapData;
};
openfl_display_BitmapData.loadFromBytes = function(bytes) {
	return openfl__$internal_graphics_Image.loadFromBytes(bytes).then(function(image) {
		return openfl__$internal_app_Future.withValue(openfl_display_BitmapData.fromImage(image));
	});
};
openfl_display_BitmapData.loadFromFile = function(path) {
	return openfl__$internal_graphics_Image.loadFromFile(path).then(function(image) {
		return openfl__$internal_app_Future.withValue(openfl_display_BitmapData.fromImage(image));
	});
};
openfl_display_BitmapData.prototype = {
	height: null
	,rect: null
	,transparent: null
	,width: null
	,image: null
	,__readable: null
	,__alpha: null
	,__visible: null
	,__blendMode: null
	,__isMask: null
	,__isValid: null
	,__renderable: null
	,__pixelRatio: null
	,__textureData: null
	,__quadTextureData: null
	,__textureVersion: null
	,__ownsTexture: null
	,__transform: null
	,__worldAlpha: null
	,__worldColorTransform: null
	,__worldTransform: null
	,__maskVertexBuffer: null
	,applyFilter: function(sourceBitmapData,sourceRect,destPoint,filter) {
		if(!this.__readable || sourceBitmapData == null || !sourceBitmapData.__readable) {
			return;
		}
		filter.__applyFilter(this,sourceBitmapData,sourceRect,destPoint);
	}
	,clone: function() {
		if(!this.__isValid) {
			return new openfl_display_BitmapData(this.width,this.height,this.transparent,0);
		} else if(!this.__readable && this.image == null) {
			var bitmapData = new openfl_display_BitmapData(0,0,this.transparent,0);
			bitmapData.width = this.width;
			bitmapData.height = this.height;
			bitmapData.rect.copyFrom(this.rect);
			bitmapData.__textureData = this.__textureData;
			bitmapData.__isValid = true;
			return bitmapData;
		} else {
			return openfl_display_BitmapData.fromImage(this.image.clone(),this.transparent);
		}
	}
	,colorTransform: function(rect,colorTransform) {
		if(!this.__readable) {
			return;
		}
		rect = this.image.__clipRect(rect.clone());
		if(rect == null) {
			return;
		}
		openfl__$internal_graphics_utils_ImageCanvasUtil.convertToData(this.image);
		openfl__$internal_graphics_utils_ImageDataUtil.colorTransform(this.image,rect,colorTransform);
	}
	,compare: function(otherBitmapData) {
		if(otherBitmapData == this) {
			return 0;
		} else if(otherBitmapData == null) {
			return -1;
		} else if(this.__readable == false || otherBitmapData.__readable == false) {
			return -2;
		} else if(this.width != otherBitmapData.width) {
			return -3;
		} else if(this.height != otherBitmapData.height) {
			return -4;
		}
		if(this.image != null && otherBitmapData.image != null) {
			var bytes = this.image.getData();
			var otherBytes = otherBitmapData.image.getData();
			var equal = true;
			var _g = 0;
			var _g1 = bytes.length;
			while(_g < _g1) {
				var i = _g++;
				if(bytes[i] != otherBytes[i]) {
					equal = false;
					break;
				}
			}
			if(equal) {
				return 0;
			}
		}
		var bitmapData = null;
		var foundDifference;
		var pixel;
		var otherPixel;
		var comparePixel;
		var r;
		var g;
		var b;
		var a;
		var _g2 = 0;
		var _g11 = this.height;
		while(_g2 < _g11) {
			var y = _g2++;
			var _g3 = 0;
			var _g12 = this.width;
			while(_g3 < _g12) {
				var x = _g3++;
				foundDifference = false;
				pixel = this.getPixel32(x,y);
				otherPixel = otherBitmapData.getPixel32(x,y);
				comparePixel = 0;
				if(pixel != otherPixel) {
					r = (pixel >>> 16 & 255) - (otherPixel >>> 16 & 255);
					g = (pixel >>> 8 & 255) - (otherPixel >>> 8 & 255);
					b = (pixel & 255) - (otherPixel & 255);
					if(r < 0) {
						r *= -1;
					}
					if(g < 0) {
						g *= -1;
					}
					if(b < 0) {
						b *= -1;
					}
					if(r == 0 && g == 0 && b == 0) {
						a = (pixel >>> 24 & 255) - (otherPixel >>> 24 & 255);
						if(a != 0) {
							comparePixel = (comparePixel >>> 24 & 255 & 255) << 24 | 16711680 | (comparePixel >>> 8 & 255 & 255) << 8 | comparePixel & 255 & 255;
							comparePixel = (comparePixel >>> 24 & 255 & 255) << 24 | (comparePixel >>> 16 & 255 & 255) << 16 | 65280 | comparePixel & 255 & 255;
							comparePixel = (comparePixel >>> 24 & 255 & 255) << 24 | (comparePixel >>> 16 & 255 & 255) << 16 | (comparePixel >>> 8 & 255 & 255) << 8 | 255;
							comparePixel = (a & 255) << 24 | (comparePixel >>> 16 & 255 & 255) << 16 | (comparePixel >>> 8 & 255 & 255) << 8 | comparePixel & 255 & 255;
							foundDifference = true;
						}
					} else {
						comparePixel = (comparePixel >>> 24 & 255 & 255) << 24 | (r & 255) << 16 | (comparePixel >>> 8 & 255 & 255) << 8 | comparePixel & 255 & 255;
						comparePixel = (comparePixel >>> 24 & 255 & 255) << 24 | (comparePixel >>> 16 & 255 & 255) << 16 | (g & 255) << 8 | comparePixel & 255 & 255;
						comparePixel = (comparePixel >>> 24 & 255 & 255) << 24 | (comparePixel >>> 16 & 255 & 255) << 16 | (comparePixel >>> 8 & 255 & 255) << 8 | b & 255;
						comparePixel = -16777216 | (comparePixel >>> 16 & 255 & 255) << 16 | (comparePixel >>> 8 & 255 & 255) << 8 | comparePixel & 255 & 255;
						foundDifference = true;
					}
				}
				if(foundDifference) {
					if(bitmapData == null) {
						bitmapData = new openfl_display_BitmapData(this.width,this.height,this.transparent || otherBitmapData.transparent,0);
					}
					bitmapData.setPixel32(x,y,comparePixel);
				}
			}
		}
		if(bitmapData == null) {
			return 0;
		}
		return bitmapData;
	}
	,copyChannel: function(sourceBitmapData,sourceRect,destPoint,sourceChannel,destChannel) {
		if(!this.__readable) {
			return;
		}
		this.image.copyChannel(sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),sourceChannel,destChannel);
	}
	,copyPixels: function(sourceBitmapData,sourceRect,destPoint,alphaBitmapData,alphaPoint,mergeAlpha) {
		if(mergeAlpha == null) {
			mergeAlpha = false;
		}
		if(!this.__readable || sourceBitmapData == null || !sourceBitmapData.__prepareImage()) {
			return;
		}
		this.image.copyPixels(sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),alphaBitmapData != null ? alphaBitmapData.image : null,alphaPoint,mergeAlpha);
	}
	,dispose: function() {
		this.__cleanup();
		this.image = null;
		this.width = 0;
		this.height = 0;
		this.rect = null;
		this.__isValid = false;
		this.__readable = false;
		if(this.__maskVertexBuffer != null) {
			this.__maskVertexBuffer.delete();
			this.__maskVertexBuffer = null;
		}
		if(this.__ownsTexture) {
			this.__ownsTexture = false;
			this.__textureData.image.unload();
			this.__textureData = null;
		}
	}
	,disposeImage: function() {
		this.__readable = false;
	}
	,draw: function(source,matrix,colorTransform,blendMode,clipRect,smoothing) {
		if(smoothing == null) {
			smoothing = false;
		}
		if(matrix == null) {
			matrix = new openfl_geom_Matrix();
			if(source.__transform != null) {
				matrix.copyFrom(source.__transform);
				matrix.tx = 0;
				matrix.ty = 0;
			}
		}
		if(this.__readable) {
			if(colorTransform != null && !colorTransform.__isDefault()) {
				var bounds = openfl_geom_Rectangle.__pool.get();
				var boundsMatrix = openfl_geom_Matrix.__pool.get();
				source.__getBounds(bounds,boundsMatrix);
				openfl_geom_Matrix.__pool.release(boundsMatrix);
				var width = Math.ceil(bounds.width);
				var height = Math.ceil(bounds.height);
				openfl_geom_Rectangle.__pool.release(bounds);
				var copy = new openfl_display_BitmapData(width,height,true,0);
				copy.__pixelRatio = this.__pixelRatio;
				copy.draw(source);
				copy.colorTransform(copy.rect,colorTransform);
				source = copy;
			}
			this.__draw(source,matrix,smoothing,clipRect,false,blendMode);
		}
	}
	,drawWithQuality: function(source,matrix,colorTransform,blendMode,clipRect,smoothing,quality) {
		if(smoothing == null) {
			smoothing = false;
		}
		this.draw(source,matrix,colorTransform,blendMode,clipRect,quality != 2 && smoothing);
	}
	,encode: function(rect,compressor,byteArray) {
		if(!this.__readable || rect == null) {
			return null;
		}
		if(byteArray == null) {
			var this1 = new openfl_utils_ByteArrayData(0);
			byteArray = this1;
		}
		var image = this.image;
		if(!rect.equals(this.rect)) {
			var matrix = openfl_geom_Matrix.__pool.get();
			matrix.tx = Math.round(-rect.x);
			matrix.ty = Math.round(-rect.y);
			var bitmapData = new openfl_display_BitmapData(Math.ceil(rect.width),Math.ceil(rect.height),true,0);
			bitmapData.draw(this,matrix);
			image = bitmapData.image;
			openfl_geom_Matrix.__pool.release(matrix);
		}
		if(((compressor) instanceof openfl_display_PNGEncoderOptions)) {
			byteArray.writeBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(image.__encode("image/png",null)));
			return byteArray;
		} else if(((compressor) instanceof openfl_display_JPEGEncoderOptions)) {
			byteArray.writeBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(image.__encode("image/jpeg",compressor.quality / 100)));
			return byteArray;
		} else {
			return null;
		}
	}
	,fillRect: function(rect,color) {
		if(rect == null) {
			return;
		}
		if(this.transparent && (color & -16777216) == 0) {
			color = 0;
		}
		if(this.__readable) {
			this.image.fillRect(rect.__toLimeRectangle(),color,1);
		}
	}
	,floodFill: function(x,y,color) {
		if(!this.__readable) {
			return;
		}
		this.image.floodFill(x,y,color);
	}
	,generateFilterRect: function(sourceRect,filter) {
		return sourceRect.clone();
	}
	,getMaskVertexBuffer: function(vertexStructure) {
		var vertexBuffer = this.__maskVertexBuffer;
		if(vertexBuffer == null) {
			vertexBuffer = new kha_graphics4_VertexBuffer(4,vertexStructure,0);
			var data = vertexBuffer.lock();
			var r = this.__pixelRatio;
			data[0] = 0;
			data[1] = 0;
			data[2] = 0;
			data[3] = 0;
			data[4] = this.width / r;
			data[5] = 0;
			data[6] = 1;
			data[7] = 0;
			data[8] = this.width / r;
			data[9] = this.height / r;
			data[10] = 1;
			data[11] = 1;
			data[12] = 0;
			data[13] = this.height / r;
			data[14] = 0;
			data[15] = 1;
			vertexBuffer.unlock();
			this.__maskVertexBuffer = vertexBuffer;
		}
		return vertexBuffer;
	}
	,__getTextureRegion: function(uvX,uvY,uvWidth,uvHeight,result) {
		result.u0 = uvX;
		result.v0 = uvY;
		result.u1 = uvWidth;
		result.v1 = uvY;
		result.u2 = uvWidth;
		result.v2 = uvHeight;
		result.u3 = uvX;
		result.v3 = uvHeight;
	}
	,getColorBoundsRect: function(mask,color,findColor) {
		if(findColor == null) {
			findColor = true;
		}
		if(!this.__readable) {
			return new openfl_geom_Rectangle(0,0,this.width,this.height);
		}
		if(!this.transparent || (mask >> 24 & 255) > 0) {
			var color1 = color;
			if((color1 >>> 24 & 255) == 0) {
				color1 = 0;
			}
		}
		return this.image.getColorBoundsRect(mask,color,findColor,1);
	}
	,getPixel: function(x,y) {
		if(!this.__readable) {
			return 0;
		}
		return this.image.getPixel(x,y,1);
	}
	,getPixel32: function(x,y) {
		if(!this.__readable) {
			return 0;
		}
		return this.image.getPixel32(x,y,1);
	}
	,getPixels: function(rect) {
		if(!this.__readable) {
			return null;
		}
		if(rect == null) {
			rect = this.rect;
		}
		var byteArray = openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(this.image.getPixels(rect.__toLimeRectangle(),1));
		byteArray.__endian = 0;
		return byteArray;
	}
	,__getTexture: function() {
		if(!this.__isValid) {
			return null;
		}
		var gl = kha_SystemImpl.gl;
		if(this.__textureData == null) {
			this.__textureData = new openfl__$internal_renderer_opengl_batcher_TextureData(openfl__$internal_renderer_opengl_batcher_TextureData.createImageFromGLTexture(gl.createTexture()));
			this.__quadTextureData = null;
			this.__ownsTexture = true;
			gl.bindTexture(3553,this.__textureData.image.texture);
			gl.texParameteri(3553,10242,33071);
			gl.texParameteri(3553,10243,33071);
			gl.texParameteri(3553,10240,9728);
			gl.texParameteri(3553,10241,9728);
			this.__textureVersion = -1;
		}
		if(this.image != null && this.image.version != this.__textureVersion) {
			gl.bindTexture(3553,this.__textureData.image.texture);
			var textureImage = this.image;
			gl.pixelStorei(37441,1);
			if(textureImage.type == openfl__$internal_graphics_ImageType.DATA) {
				gl.texImage2D(3553,0,6408,textureImage.width,textureImage.height,0,6408,5121,textureImage.getData());
			} else {
				gl.texImage2D(3553,0,6408,6408,5121,textureImage.get_src());
			}
			gl.bindTexture(3553,null);
			this.__textureVersion = this.image.version;
		}
		if(!this.__readable && this.image != null) {
			this.image = null;
		}
		if(this.__quadTextureData == null) {
			this.__quadTextureData = this.__prepareQuadTextureData(this.__textureData);
		}
		return this.__quadTextureData;
	}
	,__prepareQuadTextureData: function(texture) {
		return new openfl__$internal_renderer_opengl_batcher_QuadTextureData(texture,openfl__$internal_renderer_opengl_batcher_QuadTextureData.fullFrameUVs,true);
	}
	,__fillBatchQuad: function(transform,vertexData) {
		var x1 = this.width / this.__pixelRatio;
		var y1 = this.height / this.__pixelRatio;
		vertexData[0] = 0 * transform.a + 0 * transform.c + transform.tx;
		vertexData[1] = 0 * transform.b + 0 * transform.d + transform.ty;
		vertexData[2] = x1 * transform.a + 0 * transform.c + transform.tx;
		vertexData[3] = x1 * transform.b + 0 * transform.d + transform.ty;
		vertexData[4] = x1 * transform.a + y1 * transform.c + transform.tx;
		vertexData[5] = x1 * transform.b + y1 * transform.d + transform.ty;
		vertexData[6] = 0 * transform.a + y1 * transform.c + transform.tx;
		vertexData[7] = 0 * transform.b + y1 * transform.d + transform.ty;
	}
	,__fillTransformedVertexCoords: function(transform,vertexData,x,y,w,h) {
		var x1 = x + w;
		var y1 = y + h;
		vertexData[0] = x * transform.a + y * transform.c + transform.tx;
		vertexData[1] = x * transform.b + y * transform.d + transform.ty;
		vertexData[2] = x1 * transform.a + y * transform.c + transform.tx;
		vertexData[3] = x1 * transform.b + y * transform.d + transform.ty;
		vertexData[4] = x1 * transform.a + y1 * transform.c + transform.tx;
		vertexData[5] = x1 * transform.b + y1 * transform.d + transform.ty;
		vertexData[6] = x * transform.a + y1 * transform.c + transform.tx;
		vertexData[7] = x * transform.b + y1 * transform.d + transform.ty;
	}
	,getVector: function(rect) {
		var pixels = this.getPixels(rect);
		var length = pixels.length / 4 | 0;
		var result = openfl__$Vector_Vector_$Impl_$.toIntVector(null,length,true);
		var _g = 0;
		var _g1 = length;
		while(_g < _g1) {
			var i = _g++;
			var value = pixels.readUnsignedInt();
			result.data.set(i,value);
		}
		return result;
	}
	,histogram: function(hRect) {
		var rect = hRect != null ? hRect : new openfl_geom_Rectangle(0,0,this.width,this.height);
		var pixels = this.getPixels(rect);
		var _g = [];
		var _g1 = [];
		var _g2 = 0;
		while(_g2 < 256) {
			var j = _g2++;
			_g1.push(0);
		}
		_g.push(_g1);
		var _g11 = [];
		var _g21 = 0;
		while(_g21 < 256) {
			var j1 = _g21++;
			_g11.push(0);
		}
		_g.push(_g11);
		var _g12 = [];
		var _g22 = 0;
		while(_g22 < 256) {
			var j2 = _g22++;
			_g12.push(0);
		}
		_g.push(_g12);
		var _g13 = [];
		var _g23 = 0;
		while(_g23 < 256) {
			var j3 = _g23++;
			_g13.push(0);
		}
		_g.push(_g13);
		var result = _g;
		var _g14 = 0;
		var _g24 = pixels.length;
		while(_g14 < _g24) {
			var i = _g14++;
			var result1 = result[i % 4];
			var tmp = pixels.readUnsignedByte();
			++result1[tmp];
		}
		return result;
	}
	,hitTest: function(firstPoint,firstAlphaThreshold,secondObject,secondBitmapDataPoint,secondAlphaThreshold) {
		if(secondAlphaThreshold == null) {
			secondAlphaThreshold = 1;
		}
		if(!this.__readable) {
			return false;
		}
		if(((secondObject) instanceof openfl_display_Bitmap)) {
			secondObject = secondObject.__bitmapData;
		}
		if(((secondObject) instanceof openfl_geom_Point)) {
			var secondPoint = secondObject;
			var x = secondPoint.x - firstPoint.x | 0;
			var y = secondPoint.y - firstPoint.y | 0;
			if(this.rect.contains(x,y)) {
				var pixel = this.getPixel32(x,y);
				if((pixel >> 24 & 255) > firstAlphaThreshold) {
					return true;
				}
			}
		} else if(((secondObject) instanceof openfl_display_BitmapData)) {
			var secondBitmapData = secondObject;
			var x1;
			var y1;
			if(secondBitmapDataPoint == null) {
				x1 = 0;
				y1 = 0;
			} else {
				x1 = secondBitmapDataPoint.x - firstPoint.x | 0;
				y1 = secondBitmapDataPoint.y - firstPoint.y | 0;
			}
			if(this.rect.contains(x1,y1)) {
				var hitRect = openfl_geom_Rectangle.__pool.get();
				hitRect.setTo(x1,y1,Math.min(secondBitmapData.width,this.width - x1),Math.min(secondBitmapData.height,this.height - y1));
				var pixels = this.getPixels(hitRect);
				hitRect.offset(-x1,-y1);
				var testPixels = secondBitmapData.getPixels(hitRect);
				var length = hitRect.width * hitRect.height | 0;
				var pixel1;
				var testPixel;
				openfl_geom_Rectangle.__pool.release(hitRect);
				var _g = 0;
				var _g1 = length;
				while(_g < _g1) {
					var i = _g++;
					pixel1 = pixels.readUnsignedInt();
					testPixel = testPixels.readUnsignedInt();
					if((pixel1 >> 24 & 255) > firstAlphaThreshold && (testPixel >> 24 & 255) > secondAlphaThreshold) {
						return true;
					}
				}
				return false;
			}
		} else if(((secondObject) instanceof openfl_geom_Rectangle)) {
			var secondRectangle = openfl_geom_Rectangle.__pool.get();
			secondRectangle.copyFrom(secondObject);
			secondRectangle.offset(-firstPoint.x,-firstPoint.y);
			secondRectangle.__contract(0,0,this.width,this.height);
			if(secondRectangle.width > 0 && secondRectangle.height > 0) {
				var pixels1 = this.getPixels(secondRectangle);
				var length1 = pixels1.length / 4 | 0;
				var pixel2;
				var _g2 = 0;
				var _g11 = length1;
				while(_g2 < _g11) {
					var i1 = _g2++;
					pixel2 = pixels1.readUnsignedInt();
					if((pixel2 >> 24 & 255) > firstAlphaThreshold) {
						openfl_geom_Rectangle.__pool.release(secondRectangle);
						return true;
					}
				}
			}
			openfl_geom_Rectangle.__pool.release(secondRectangle);
		}
		return false;
	}
	,lock: function() {
	}
	,merge: function(sourceBitmapData,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
		if(!this.__readable || sourceBitmapData == null || !sourceBitmapData.__readable || sourceRect == null || destPoint == null) {
			return;
		}
		this.image.merge(sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
	}
	,noise: function(randomSeed,low,high,channelOptions,grayScale) {
		if(grayScale == null) {
			grayScale = false;
		}
		if(channelOptions == null) {
			channelOptions = 7;
		}
		if(high == null) {
			high = 255;
		}
		if(low == null) {
			low = 0;
		}
		if(!this.__readable) {
			return;
		}
		var func = function() {
			randomSeed = randomSeed * 1103515245 + 12345;
			return (Math.abs(randomSeed / 65536) | 0) % 32768;
		};
		var rand = func;
		rand();
		var range = high - low;
		var this1 = new openfl_utils_ByteArrayData(0);
		var data = this1;
		var redChannel = (channelOptions & 1) == 1;
		var greenChannel = (channelOptions & 2) >> 1 == 1;
		var blueChannel = (channelOptions & 4) >> 2 == 1;
		var alphaChannel = (channelOptions & 8) >> 3 == 1;
		var _g = 0;
		var _g1 = this.height;
		while(_g < _g1) {
			var y = _g++;
			var _g2 = 0;
			var _g11 = this.width;
			while(_g2 < _g11) {
				var x = _g2++;
				var red = 0;
				var blue = 0;
				var green = 0;
				var alpha = 255;
				if(grayScale) {
					blue = low + rand() % range;
					green = blue;
					red = green;
					alpha = 255;
				} else {
					if(redChannel) {
						red = low + rand() % range;
					}
					if(greenChannel) {
						green = low + rand() % range;
					}
					if(blueChannel) {
						blue = low + rand() % range;
					}
					if(alphaChannel) {
						alpha = low + rand() % range;
					}
				}
				var rgb = alpha;
				rgb = (rgb << 8) + red;
				rgb = (rgb << 8) + green;
				rgb = (rgb << 8) + blue;
				this.setPixel32(x,y,rgb);
			}
		}
	}
	,paletteMap: function(sourceBitmapData,sourceRect,destPoint,redArray,greenArray,blueArray,alphaArray) {
		var sw = sourceRect.width | 0;
		var sh = sourceRect.height | 0;
		var pixels = sourceBitmapData.getPixels(sourceRect);
		var pixelValue;
		var r;
		var g;
		var b;
		var a;
		var color;
		var _g = 0;
		var _g1 = sh * sw;
		while(_g < _g1) {
			var i = _g++;
			pixelValue = pixels.readUnsignedInt();
			a = alphaArray == null ? pixelValue & -16777216 : alphaArray[pixelValue >> 24 & 255];
			r = redArray == null ? pixelValue & 16711680 : redArray[pixelValue >> 16 & 255];
			g = greenArray == null ? pixelValue & 65280 : greenArray[pixelValue >> 8 & 255];
			b = blueArray == null ? pixelValue & 255 : blueArray[pixelValue & 255];
			color = a + r + g + b;
			pixels.position = i * 4;
			pixels.writeUnsignedInt(color);
		}
		pixels.position = 0;
		var destRect = openfl_geom_Rectangle.__pool.get();
		destRect.setTo(destPoint.x,destPoint.y,sw,sh);
		this.setPixels(destRect,pixels);
		openfl_geom_Rectangle.__pool.release(destRect);
	}
	,perlinNoise: function(baseX,baseY,numOctaves,randomSeed,stitch,fractalNoise,channelOptions,grayScale,offsets) {
		if(grayScale == null) {
			grayScale = false;
		}
		if(channelOptions == null) {
			channelOptions = 7;
		}
		if(!this.__readable) {
			return;
		}
		var noise = new openfl__$internal_utils_PerlinNoise(randomSeed,numOctaves,0.01);
		noise.fill(this,baseX,baseY,0);
	}
	,scroll: function(x,y) {
		if(!this.__readable) {
			return;
		}
		this.image.scroll(x,y);
	}
	,setPixel: function(x,y,color) {
		if(!this.__readable) {
			return;
		}
		this.image.setPixel(x,y,color,1);
	}
	,setPixel32: function(x,y,color) {
		if(!this.__readable) {
			return;
		}
		this.image.setPixel32(x,y,color,1);
	}
	,setPixels: function(rect,byteArray) {
		if(!this.__readable || rect == null) {
			return;
		}
		var length = rect.width * rect.height * 4;
		if(_$UInt_UInt_$Impl_$.toFloat(byteArray.length - byteArray.position) < length) {
			throw new js__$Boot_HaxeError(new openfl_errors_Error("End of file was encountered.",2030));
		}
		this.image.setPixels(rect.__toLimeRectangle(),byteArray,1,byteArray.__endian);
	}
	,setVector: function(rect,inputVector) {
		var this1 = new openfl_utils_ByteArrayData(0);
		var byteArray = this1;
		openfl_utils__$ByteArray_ByteArray_$Impl_$.set_length(byteArray,inputVector.data.get_length() * 4);
		var color = inputVector.data.iterator();
		while(color.hasNext()) {
			var color1 = color.next();
			byteArray.writeUnsignedInt(color1);
		}
		byteArray.position = 0;
		this.setPixels(rect,byteArray);
	}
	,threshold: function(sourceBitmapData,sourceRect,destPoint,operation,threshold,color,mask,copySource) {
		if(copySource == null) {
			copySource = false;
		}
		if(mask == null) {
			mask = -1;
		}
		if(color == null) {
			color = 0;
		}
		if(sourceBitmapData == null || sourceRect == null || destPoint == null || sourceRect.x > sourceBitmapData.width || sourceRect.y > sourceBitmapData.height || destPoint.x > this.width || destPoint.y > this.height) {
			return 0;
		}
		return this.image.threshold(sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),operation,threshold,color,mask,copySource,1);
	}
	,unlock: function(changeRect) {
	}
	,__cleanup: function() {
	}
	,__draw: function(source,matrix,smoothing,clipRect,clearRenderDirty,blendMode) {
		openfl__$internal_graphics_utils_ImageCanvasUtil.convertToCanvas(this.image);
		var renderSession = new openfl__$internal_renderer_canvas_CanvasRenderSession(this.image.__srcContext,clearRenderDirty,this.__pixelRatio,smoothing);
		renderSession.blendModeManager.setBlendMode(blendMode);
		this.image.__srcContext.save();
		var context = this.image.__srcContext;
		context.mozImageSmoothingEnabled = smoothing;
		context.msImageSmoothingEnabled = smoothing;
		context.imageSmoothingEnabled = smoothing;
		var matrixCache = openfl_geom_Matrix.__pool.get();
		matrixCache.copyFrom(source.__worldTransform);
		var cacheWorldAlpha = source.__worldAlpha;
		var cacheAlpha = source.__alpha;
		var cacheVisible = source.__visible;
		var cacheIsMask = source.__isMask;
		source.__alpha = 1;
		source.__visible = true;
		source.__isMask = false;
		source.__overrideTransforms(matrix);
		source.__updateChildren(false);
		source.__renderCanvas(renderSession);
		source.__alpha = cacheAlpha;
		source.__visible = cacheVisible;
		source.__isMask = cacheIsMask;
		source.__overrideTransforms(matrixCache);
		openfl_geom_Matrix.__pool.release(matrixCache);
		source.__updateChildren(true);
		source.__worldAlpha = cacheWorldAlpha;
		this.image.__srcContext.restore();
		this.image.__srcImageData = null;
		this.image.data = null;
		this.image.dirty = true;
		this.image.version++;
	}
	,__fromImage: function(image) {
		if(image != null) {
			this.image = image;
			this.width = image.width;
			this.height = image.height;
			this.rect = new openfl_geom_Rectangle(0,0,image.width,image.height);
			this.__readable = true;
			this.__isValid = true;
		}
	}
	,__getBounds: function(rect,matrix) {
		var bounds = openfl_geom_Rectangle.__pool.get();
		this.rect.__transform(bounds,matrix);
		rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
		openfl_geom_Rectangle.__pool.release(bounds);
	}
	,__prepareImage: function() {
		return this.image != null;
	}
	,__loadFromFile: function(path) {
		var _gthis = this;
		return openfl__$internal_graphics_Image.loadFromFile(path).then(function(image) {
			_gthis.__fromImage(image);
			return openfl__$internal_app_Future.withValue(_gthis);
		});
	}
	,__canBeDrawnToCanvas: function() {
		return this.image != null;
	}
	,__drawToCanvas: function(context,transform,roundPixels,pixelRatio,scrollRect,useScrollRectCoords) {
		if(this.image.type == openfl__$internal_graphics_ImageType.DATA) {
			openfl__$internal_graphics_utils_ImageCanvasUtil.convertToCanvas(this.image);
		}
		var scale = pixelRatio / this.__pixelRatio;
		if(roundPixels) {
			context.setTransform(transform.a * scale,transform.b,transform.c,transform.d * scale,Math.round(transform.tx * pixelRatio),Math.round(transform.ty * pixelRatio));
		} else {
			context.setTransform(transform.a * scale,transform.b,transform.c,transform.d * scale,transform.tx * pixelRatio,transform.ty * pixelRatio);
		}
		if(scrollRect == null) {
			context.drawImage(this.image.get_src(),0,0);
		} else {
			var dx;
			var dy;
			if(useScrollRectCoords) {
				dx = scrollRect.x;
				dy = scrollRect.y;
			} else {
				dy = 0;
				dx = dy;
			}
			context.drawImage(this.image.get_src(),scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height,dx,dy,scrollRect.width,scrollRect.height);
		}
	}
	,__renderCanvas: function(renderSession) {
		if(!this.__readable) {
			return;
		}
		renderSession.context.globalAlpha = 1;
		this.__drawToCanvas(renderSession.context,this.__worldTransform,false,renderSession.pixelRatio,null,false);
	}
	,__renderCanvasMask: function(renderSession) {
	}
	,__resize: function(width,height) {
		this.width = width;
		this.height = height;
		this.rect.width = width;
		this.rect.height = height;
	}
	,__updateChildren: function(transformOnly) {
	}
	,__overrideTransforms: function(overrideTransform) {
		if(overrideTransform == null) {
			this.__worldTransform.identity();
		} else {
			this.__worldTransform.copyFrom(overrideTransform);
		}
	}
	,__class__: openfl_display_BitmapData
};
var openfl_display_TextureRegionResult = function() {
};
$hxClasses["openfl.display.TextureRegionResult"] = openfl_display_TextureRegionResult;
openfl_display_TextureRegionResult.__name__ = "openfl.display.TextureRegionResult";
openfl_display_TextureRegionResult.prototype = {
	u0: null
	,v0: null
	,u1: null
	,v1: null
	,u2: null
	,v2: null
	,u3: null
	,v3: null
	,__class__: openfl_display_TextureRegionResult
};
var openfl_display__$BlendMode_BlendMode_$Impl_$ = {};
$hxClasses["openfl.display._BlendMode.BlendMode_Impl_"] = openfl_display__$BlendMode_BlendMode_$Impl_$;
openfl_display__$BlendMode_BlendMode_$Impl_$.__name__ = "openfl.display._BlendMode.BlendMode_Impl_";
openfl_display__$BlendMode_BlendMode_$Impl_$.fromString = function(value) {
	switch(value) {
	case "add":
		return 0;
	case "alpha":
		return 1;
	case "darken":
		return 2;
	case "difference":
		return 3;
	case "erase":
		return 4;
	case "hardlight":
		return 5;
	case "invert":
		return 6;
	case "layer":
		return 7;
	case "lighten":
		return 8;
	case "multiply":
		return 9;
	case "normal":
		return 10;
	case "overlay":
		return 11;
	case "screen":
		return 12;
	case "shader":
		return 13;
	case "subtract":
		return 14;
	default:
		return null;
	}
};
openfl_display__$BlendMode_BlendMode_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 0:
		return "add";
	case 1:
		return "alpha";
	case 2:
		return "darken";
	case 3:
		return "difference";
	case 4:
		return "erase";
	case 5:
		return "hardlight";
	case 6:
		return "invert";
	case 7:
		return "layer";
	case 8:
		return "lighten";
	case 9:
		return "multiply";
	case 10:
		return "normal";
	case 11:
		return "overlay";
	case 12:
		return "screen";
	case 13:
		return "shader";
	case 14:
		return "subtract";
	default:
		return null;
	}
};
var openfl_display__$CapsStyle_CapsStyle_$Impl_$ = {};
$hxClasses["openfl.display._CapsStyle.CapsStyle_Impl_"] = openfl_display__$CapsStyle_CapsStyle_$Impl_$;
openfl_display__$CapsStyle_CapsStyle_$Impl_$.__name__ = "openfl.display._CapsStyle.CapsStyle_Impl_";
openfl_display__$CapsStyle_CapsStyle_$Impl_$.fromString = function(value) {
	switch(value) {
	case "none":
		return 0;
	case "round":
		return 1;
	case "square":
		return 2;
	default:
		return null;
	}
};
openfl_display__$CapsStyle_CapsStyle_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 0:
		return "none";
	case 1:
		return "round";
	case 2:
		return "square";
	default:
		return null;
	}
};
var openfl_display__$GradientType_GradientType_$Impl_$ = {};
$hxClasses["openfl.display._GradientType.GradientType_Impl_"] = openfl_display__$GradientType_GradientType_$Impl_$;
openfl_display__$GradientType_GradientType_$Impl_$.__name__ = "openfl.display._GradientType.GradientType_Impl_";
openfl_display__$GradientType_GradientType_$Impl_$.fromString = function(value) {
	switch(value) {
	case "linear":
		return 0;
	case "radial":
		return 1;
	default:
		return null;
	}
};
openfl_display__$GradientType_GradientType_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 0:
		return "linear";
	case 1:
		return "radial";
	default:
		return null;
	}
};
var openfl_display_Graphics = function(owner) {
	this.__batchQuadDirty = true;
	this.__dirty = true;
	this.__owner = owner;
	this.__commands = new openfl__$internal_renderer_DrawCommandBuffer();
	this.__strokePadding = 0;
	this.__positionX = 0;
	this.__positionY = 0;
	this.__renderTransform = new openfl_geom_Matrix();
	this.__worldTransform = new openfl_geom_Matrix();
	this.__width = 0;
	this.__height = 0;
	this.moveTo(0,0);
};
$hxClasses["openfl.display.Graphics"] = openfl_display_Graphics;
openfl_display_Graphics.__name__ = "openfl.display.Graphics";
openfl_display_Graphics.prototype = {
	__bounds: null
	,__commands: null
	,__dirty: null
	,__height: null
	,__managed: null
	,__positionX: null
	,__positionY: null
	,__renderTransform: null
	,__strokePadding: null
	,__transformDirty: null
	,__visible: null
	,__owner: null
	,__width: null
	,__worldTransform: null
	,__canvas: null
	,__context: null
	,__bitmap: null
	,__batchQuad: null
	,__batchQuadDirty: null
	,beginBitmapFill: function(bitmap,matrix,repeat,smooth) {
		if(smooth == null) {
			smooth = false;
		}
		if(repeat == null) {
			repeat = true;
		}
		this.__commands.beginBitmapFill(bitmap,matrix != null ? matrix.clone() : null,repeat,smooth);
		this.__visible = true;
	}
	,beginFill: function(color,alpha) {
		if(alpha == null) {
			alpha = 1;
		}
		if(color == null) {
			color = 0;
		}
		this.__commands.beginFill(color & 16777215,alpha);
		if(alpha > 0) {
			this.__visible = true;
		}
	}
	,beginGradientFill: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		if(focalPointRatio == null) {
			focalPointRatio = 0;
		}
		if(interpolationMethod == null) {
			interpolationMethod = 1;
		}
		if(spreadMethod == null) {
			spreadMethod = 0;
		}
		this.__commands.beginGradientFill(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio);
		var _g = 0;
		while(_g < alphas.length) {
			var alpha = alphas[_g];
			++_g;
			if(alpha > 0) {
				this.__visible = true;
				break;
			}
		}
	}
	,clear: function() {
		this.__commands.clear();
		this.__strokePadding = 0;
		if(this.__bounds != null) {
			this.set___dirty(true);
			this.__transformDirty = true;
			this.__bounds = null;
		}
		this.__visible = false;
		this.moveTo(0,0);
	}
	,copyFrom: function(sourceGraphics) {
		this.__bounds = sourceGraphics.__bounds != null ? sourceGraphics.__bounds.clone() : null;
		this.__commands = sourceGraphics.__commands.copy();
		this.set___dirty(true);
		this.__strokePadding = sourceGraphics.__strokePadding;
		this.__positionX = sourceGraphics.__positionX;
		this.__positionY = sourceGraphics.__positionY;
		this.__transformDirty = true;
		this.__visible = sourceGraphics.__visible;
	}
	,cubicCurveTo: function(controlX1,controlY1,controlX2,controlY2,anchorX,anchorY) {
		this.__inflateBounds(this.__positionX - this.__strokePadding,this.__positionY - this.__strokePadding);
		this.__inflateBounds(this.__positionX + this.__strokePadding,this.__positionY + this.__strokePadding);
		var ix1 = anchorX;
		var ix2 = anchorX;
		if(!((controlX1 < anchorX && controlX1 > this.__positionX || controlX1 > anchorX && controlX1 < this.__positionX) && (controlX2 < anchorX && controlX2 > this.__positionX || controlX2 > anchorX && controlX2 < this.__positionX))) {
			var u = 2 * this.__positionX - 4 * controlX1 + 2 * controlX2;
			var v = controlX1 - this.__positionX;
			var w = -this.__positionX + 3 * controlX1 + anchorX - 3 * controlX2;
			var t1 = (-u + Math.sqrt(u * u - 4 * v * w)) / (2 * w);
			var t2 = (-u - Math.sqrt(u * u - 4 * v * w)) / (2 * w);
			if(t1 > 0 && t1 < 1) {
				ix1 = this.__calculateBezierCubicPoint(t1,this.__positionX,controlX1,controlX2,anchorX);
			}
			if(t2 > 0 && t2 < 1) {
				ix2 = this.__calculateBezierCubicPoint(t2,this.__positionX,controlX1,controlX2,anchorX);
			}
		}
		var iy1 = anchorY;
		var iy2 = anchorY;
		if(!((controlY1 < anchorY && controlY1 > this.__positionX || controlY1 > anchorY && controlY1 < this.__positionX) && (controlY2 < anchorY && controlY2 > this.__positionX || controlY2 > anchorY && controlY2 < this.__positionX))) {
			var u1 = 2 * this.__positionX - 4 * controlY1 + 2 * controlY2;
			var v1 = controlY1 - this.__positionX;
			var w1 = -this.__positionX + 3 * controlY1 + anchorY - 3 * controlY2;
			var t11 = (-u1 + Math.sqrt(u1 * u1 - 4 * v1 * w1)) / (2 * w1);
			var t21 = (-u1 - Math.sqrt(u1 * u1 - 4 * v1 * w1)) / (2 * w1);
			if(t11 > 0 && t11 < 1) {
				iy1 = this.__calculateBezierCubicPoint(t11,this.__positionX,controlY1,controlY2,anchorY);
			}
			if(t21 > 0 && t21 < 1) {
				iy2 = this.__calculateBezierCubicPoint(t21,this.__positionX,controlY1,controlY2,anchorY);
			}
		}
		this.__inflateBounds(ix1 - this.__strokePadding,iy1 - this.__strokePadding);
		this.__inflateBounds(ix1 + this.__strokePadding,iy1 + this.__strokePadding);
		this.__inflateBounds(ix2 - this.__strokePadding,iy2 - this.__strokePadding);
		this.__inflateBounds(ix2 + this.__strokePadding,iy2 + this.__strokePadding);
		this.__positionX = anchorX;
		this.__positionY = anchorY;
		this.__inflateBounds(this.__positionX - this.__strokePadding,this.__positionY - this.__strokePadding);
		this.__inflateBounds(this.__positionX + this.__strokePadding,this.__positionY + this.__strokePadding);
		this.__commands.cubicCurveTo(controlX1,controlY1,controlX2,controlY2,anchorX,anchorY);
		this.set___dirty(true);
	}
	,curveTo: function(controlX,controlY,anchorX,anchorY) {
		this.__inflateBounds(this.__positionX - this.__strokePadding,this.__positionY - this.__strokePadding);
		this.__inflateBounds(this.__positionX + this.__strokePadding,this.__positionY + this.__strokePadding);
		var ix;
		var iy;
		if(controlX < anchorX && controlX > this.__positionX || controlX > anchorX && controlX < this.__positionX) {
			ix = anchorX;
		} else {
			var tx = (this.__positionX - controlX) / (this.__positionX - 2 * controlX + anchorX);
			ix = this.__calculateBezierQuadPoint(tx,this.__positionX,controlX,anchorX);
		}
		if(controlY < anchorY && controlY > this.__positionY || controlY > anchorY && controlY < this.__positionY) {
			iy = anchorY;
		} else {
			var ty = (this.__positionY - controlY) / (this.__positionY - 2 * controlY + anchorY);
			iy = this.__calculateBezierQuadPoint(ty,this.__positionY,controlY,anchorY);
		}
		this.__inflateBounds(ix - this.__strokePadding,iy - this.__strokePadding);
		this.__inflateBounds(ix + this.__strokePadding,iy + this.__strokePadding);
		this.__positionX = anchorX;
		this.__positionY = anchorY;
		this.__commands.curveTo(controlX,controlY,anchorX,anchorY);
		this.set___dirty(true);
	}
	,drawCircle: function(x,y,radius) {
		if(radius <= 0) {
			return;
		}
		this.__inflateBounds(x - radius - this.__strokePadding,y - radius - this.__strokePadding);
		this.__inflateBounds(x + radius + this.__strokePadding,y + radius + this.__strokePadding);
		this.__commands.drawCircle(x,y,radius);
		this.set___dirty(true);
	}
	,drawEllipse: function(x,y,width,height) {
		if(width <= 0 || height <= 0) {
			return;
		}
		this.__inflateBounds(x - this.__strokePadding,y - this.__strokePadding);
		this.__inflateBounds(x + width + this.__strokePadding,y + height + this.__strokePadding);
		this.__commands.drawEllipse(x,y,width,height);
		this.set___dirty(true);
	}
	,drawGraphicsData: function(graphicsData) {
		var fill;
		var bitmapFill;
		var gradientFill;
		var stroke;
		var path;
		var trianglePath;
		var graphics = graphicsData.data.iterator();
		while(graphics.hasNext()) {
			var graphics1 = graphics.next();
			switch(graphics1.__graphicsDataType) {
			case 0:
				stroke = graphics1;
				if(stroke.fill != null) {
					var thickness = stroke.thickness;
					if(isNaN(thickness)) {
						thickness = null;
					}
					switch(stroke.fill.__graphicsFillType) {
					case 0:
						fill = stroke.fill;
						this.lineStyle(thickness,fill.color,fill.alpha,stroke.pixelHinting,stroke.scaleMode,stroke.caps,stroke.joints,stroke.miterLimit);
						break;
					case 1:
						gradientFill = stroke.fill;
						this.lineStyle(thickness,0,1,stroke.pixelHinting,stroke.scaleMode,stroke.caps,stroke.joints,stroke.miterLimit);
						this.lineGradientStyle(gradientFill.type,gradientFill.colors,gradientFill.alphas,gradientFill.ratios,gradientFill.matrix,gradientFill.spreadMethod,gradientFill.interpolationMethod,gradientFill.focalPointRatio);
						break;
					case 2:
						bitmapFill = stroke.fill;
						this.lineStyle(thickness,0,1,stroke.pixelHinting,stroke.scaleMode,stroke.caps,stroke.joints,stroke.miterLimit);
						this.lineBitmapStyle(bitmapFill.bitmapData,bitmapFill.matrix,bitmapFill.repeat,bitmapFill.smooth);
						break;
					default:
					}
				} else {
					this.lineStyle();
				}
				break;
			case 1:
				fill = graphics1;
				this.beginFill(fill.color,fill.alpha);
				break;
			case 2:
				gradientFill = graphics1;
				this.beginGradientFill(gradientFill.type,gradientFill.colors,gradientFill.alphas,gradientFill.ratios,gradientFill.matrix,gradientFill.spreadMethod,gradientFill.interpolationMethod,gradientFill.focalPointRatio);
				break;
			case 3:
				path = graphics1;
				this.drawPath(path.commands,path.data,path.winding);
				break;
			case 4:
				bitmapFill = graphics1;
				this.beginBitmapFill(bitmapFill.bitmapData,bitmapFill.matrix,bitmapFill.repeat,bitmapFill.smooth);
				break;
			case 5:
				this.endFill();
				break;
			case 6:
				trianglePath = graphics1;
				this.drawTriangles(trianglePath.vertices,trianglePath.indices,trianglePath.uvtData,trianglePath.culling);
				break;
			}
		}
	}
	,drawPath: function(commands,data,winding) {
		if(winding == null) {
			winding = 0;
		}
		var dataIndex = 0;
		if(winding == 1) {
			this.__commands.windingNonZero();
		}
		var command = commands.data.iterator();
		_hx_loop1: while(command.hasNext()) {
			var command1 = command.next();
			switch(command1) {
			case 1:
				this.moveTo(data.data.get(dataIndex),data.data.get(dataIndex + 1));
				dataIndex += 2;
				break;
			case 2:
				this.lineTo(data.data.get(dataIndex),data.data.get(dataIndex + 1));
				dataIndex += 2;
				break;
			case 3:
				this.curveTo(data.data.get(dataIndex),data.data.get(dataIndex + 1),data.data.get(dataIndex + 2),data.data.get(dataIndex + 3));
				dataIndex += 4;
				break;
			case 4:
				this.moveTo(data.data.get(dataIndex + 2),data.data.get(dataIndex + 3));
				break _hx_loop1;
			case 5:
				this.lineTo(data.data.get(dataIndex + 2),data.data.get(dataIndex + 3));
				break _hx_loop1;
			case 6:
				this.cubicCurveTo(data.data.get(dataIndex),data.data.get(dataIndex + 1),data.data.get(dataIndex + 2),data.data.get(dataIndex + 3),data.data.get(dataIndex + 4),data.data.get(dataIndex + 5));
				dataIndex += 6;
				break;
			default:
			}
		}
	}
	,drawRect: function(x,y,width,height) {
		if(width <= 0 || height <= 0) {
			return;
		}
		this.__inflateBounds(x - this.__strokePadding,y - this.__strokePadding);
		this.__inflateBounds(x + width + this.__strokePadding,y + height + this.__strokePadding);
		this.__commands.drawRect(x,y,width,height);
		this.set___dirty(true);
	}
	,drawRoundRect: function(x,y,width,height,ellipseWidth,ellipseHeight) {
		if(width <= 0 || height <= 0) {
			return;
		}
		this.__inflateBounds(x - this.__strokePadding,y - this.__strokePadding);
		this.__inflateBounds(x + width + this.__strokePadding,y + height + this.__strokePadding);
		this.__commands.drawRoundRect(x,y,width,height,ellipseWidth,ellipseHeight);
		this.set___dirty(true);
	}
	,drawRoundRectComplex: function(x,y,width,height,topLeftRadius,topRightRadius,bottomLeftRadius,bottomRightRadius) {
		if(width <= 0 || height <= 0) {
			return;
		}
		this.__inflateBounds(x - this.__strokePadding,y - this.__strokePadding);
		this.__inflateBounds(x + width + this.__strokePadding,y + height + this.__strokePadding);
		var xw = x + width;
		var yh = y + height;
		var minSize = width < height ? width * 2 : height * 2;
		topLeftRadius = topLeftRadius < minSize ? topLeftRadius : minSize;
		topRightRadius = topRightRadius < minSize ? topRightRadius : minSize;
		bottomLeftRadius = bottomLeftRadius < minSize ? bottomLeftRadius : minSize;
		bottomRightRadius = bottomRightRadius < minSize ? bottomRightRadius : minSize;
		var anchor = 1 - Math.sin(45 * (Math.PI / 180));
		var control = 1 - Math.tan(22.5 * (Math.PI / 180));
		var a = bottomRightRadius * anchor;
		var s = bottomRightRadius * control;
		this.moveTo(xw,yh - bottomRightRadius);
		this.curveTo(xw,yh - s,xw - a,yh - a);
		this.curveTo(xw - s,yh,xw - bottomRightRadius,yh);
		a = bottomLeftRadius * anchor;
		s = bottomLeftRadius * control;
		this.lineTo(x + bottomLeftRadius,yh);
		this.curveTo(x + s,yh,x + a,yh - a);
		this.curveTo(x,yh - s,x,yh - bottomLeftRadius);
		a = topLeftRadius * anchor;
		s = topLeftRadius * control;
		this.lineTo(x,y + topLeftRadius);
		this.curveTo(x,y + s,x + a,y + a);
		this.curveTo(x + s,y,x + topLeftRadius,y);
		a = topRightRadius * anchor;
		s = topRightRadius * control;
		this.lineTo(xw - topRightRadius,y);
		this.curveTo(xw - s,y,xw - a,y + a);
		this.curveTo(xw,y + s,xw,y + topRightRadius);
		this.lineTo(xw,yh - bottomRightRadius);
		this.set___dirty(true);
	}
	,drawTriangles: function(vertices,indices,uvtData,culling) {
		if(culling == null) {
			culling = 1;
		}
		if(vertices == null) {
			return;
		}
		var vlen = vertices.data.get_length() / 2 | 0;
		if(culling == null) {
			culling = 1;
		}
		if(indices == null) {
			if(vlen % 3 != 0) {
				throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Not enough vertices to close a triangle."));
			}
			indices = openfl__$Vector_Vector_$Impl_$.toIntVector(null);
			var _g = 0;
			var _g1 = vlen;
			while(_g < _g1) {
				var i = _g++;
				indices.data.push(i);
			}
		}
		this.__inflateBounds(0,0);
		var tmpx = -Infinity;
		var tmpy = -Infinity;
		var maxX = -Infinity;
		var maxY = -Infinity;
		var _g2 = 0;
		var _g11 = vlen;
		while(_g2 < _g11) {
			var i1 = _g2++;
			tmpx = vertices.data.get(i1 * 2);
			tmpy = vertices.data.get(i1 * 2 + 1);
			if(maxX < tmpx) {
				maxX = tmpx;
			}
			if(maxY < tmpy) {
				maxY = tmpy;
			}
		}
		this.__inflateBounds(maxX,maxY);
		this.__commands.drawTriangles(vertices,indices,uvtData,culling);
		this.set___dirty(true);
		this.__visible = true;
	}
	,endFill: function() {
		this.__commands.endFill();
	}
	,lineBitmapStyle: function(bitmap,matrix,repeat,smooth) {
		if(smooth == null) {
			smooth = false;
		}
		if(repeat == null) {
			repeat = true;
		}
		this.__commands.lineBitmapStyle(bitmap,matrix != null ? matrix.clone() : null,repeat,smooth);
	}
	,lineGradientStyle: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		if(focalPointRatio == null) {
			focalPointRatio = 0;
		}
		if(interpolationMethod == null) {
			interpolationMethod = 1;
		}
		if(spreadMethod == null) {
			spreadMethod = 0;
		}
		this.__commands.lineGradientStyle(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio);
	}
	,lineStyle: function(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit) {
		if(miterLimit == null) {
			miterLimit = 3;
		}
		if(scaleMode == null) {
			scaleMode = 2;
		}
		if(pixelHinting == null) {
			pixelHinting = false;
		}
		if(alpha == null) {
			alpha = 1;
		}
		if(color == null) {
			color = 0;
		}
		if(thickness != null) {
			if(joints == 1) {
				if(thickness > this.__strokePadding) {
					this.__strokePadding = thickness;
				}
			} else if(thickness / 2 > this.__strokePadding) {
				this.__strokePadding = thickness / 2;
			}
		}
		this.__commands.lineStyle(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit);
		if(thickness != null) {
			this.__visible = true;
		}
	}
	,lineTo: function(x,y) {
		if(!isFinite(x) || !isFinite(y)) {
			return;
		}
		this.__inflateBounds(this.__positionX - this.__strokePadding,this.__positionY - this.__strokePadding);
		this.__inflateBounds(this.__positionX + this.__strokePadding,this.__positionY + this.__strokePadding);
		this.__positionX = x;
		this.__positionY = y;
		this.__inflateBounds(this.__positionX - this.__strokePadding,this.__positionY - this.__strokePadding);
		this.__inflateBounds(this.__positionX + this.__strokePadding * 2,this.__positionY + this.__strokePadding);
		this.__commands.lineTo(x,y);
		this.set___dirty(true);
	}
	,moveTo: function(x,y) {
		this.__positionX = x;
		this.__positionY = y;
		this.__commands.moveTo(x,y);
	}
	,readGraphicsData: function(recurse) {
		if(recurse == null) {
			recurse = true;
		}
		var graphicsData = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
		this.__owner.__readGraphicsData(graphicsData,recurse);
		return graphicsData;
	}
	,__calculateBezierCubicPoint: function(t,p1,p2,p3,p4) {
		var iT = 1 - t;
		return p1 * (iT * iT * iT) + 3 * p2 * t * (iT * iT) + 3 * p3 * iT * (t * t) + p4 * (t * t * t);
	}
	,__calculateBezierQuadPoint: function(t,p1,p2,p3) {
		var iT = 1 - t;
		return iT * iT * p1 + 2 * iT * t * p2 + t * t * p3;
	}
	,__cleanup: function() {
		if(this.__bounds != null) {
			this.set___dirty(true);
			this.__transformDirty = true;
		}
		this.set___bitmap(null);
		if(this.__batchQuad != null) {
			openfl__$internal_renderer_opengl_batcher_Quad.pool.release(this.__batchQuad);
			this.__batchQuad = null;
		}
		this.__canvas = null;
		this.__context = null;
	}
	,__getBounds: function(rect,matrix) {
		if(this.__bounds == null) {
			return;
		}
		var bounds = openfl_geom_Rectangle.__pool.get();
		this.__bounds.__transform(bounds,matrix);
		rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
		openfl_geom_Rectangle.__pool.release(bounds);
	}
	,__hitTest: function(x,y,shapeFlag,matrix) {
		if(this.__bounds == null) {
			return false;
		}
		var norm = matrix.a * matrix.d - matrix.b * matrix.c;
		var px = norm == 0 ? -matrix.tx : 1.0 / norm * (matrix.c * (matrix.ty - y) + matrix.d * (x - matrix.tx));
		var norm1 = matrix.a * matrix.d - matrix.b * matrix.c;
		var py = norm1 == 0 ? -matrix.ty : 1.0 / norm1 * (matrix.a * (y - matrix.ty) + matrix.b * (matrix.tx - x));
		if(px > this.__bounds.x && py > this.__bounds.y && this.__bounds.contains(px,py)) {
			if(shapeFlag) {
				return openfl__$internal_renderer_canvas_CanvasGraphics.hitTest(this,px,py);
			}
			return true;
		}
		return false;
	}
	,__inflateBounds: function(x,y) {
		if(this.__bounds == null) {
			this.__bounds = new openfl_geom_Rectangle(x,y,0,0);
			this.__transformDirty = true;
			return;
		}
		if(x < this.__bounds.x) {
			this.__bounds.width += this.__bounds.x - x;
			this.__bounds.x = x;
			this.__transformDirty = true;
		}
		if(y < this.__bounds.y) {
			this.__bounds.height += this.__bounds.y - y;
			this.__bounds.y = y;
			this.__transformDirty = true;
		}
		if(x > this.__bounds.x + this.__bounds.width) {
			this.__bounds.width = x - this.__bounds.x;
		}
		if(y > this.__bounds.y + this.__bounds.height) {
			this.__bounds.height = y - this.__bounds.y;
		}
	}
	,__readGraphicsData: function(graphicsData) {
		var data = new openfl__$internal_renderer_DrawCommandReader(this.__commands);
		var path = null;
		var stroke;
		var _g = 0;
		var _g1 = this.__commands.types;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type._hx_index) {
			case 3:case 4:case 5:case 6:case 7:case 8:case 15:case 16:
				if(path == null) {
					path = new openfl_display_GraphicsPath();
				}
				break;
			default:
				if(path != null) {
					graphicsData.data.push(path);
					path = null;
				}
			}
			switch(type._hx_index) {
			case 0:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
				var this1 = data;
				var c = this1;
				var x = new openfl_display_GraphicsBitmapFill(c.buffer.o[c.oPos],c.buffer.o[c.oPos + 1],c.buffer.b[c.bPos],c.buffer.b[c.bPos + 1]);
				graphicsData.data.push(x);
				break;
			case 1:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_FILL;
				var this2 = data;
				var c1 = this2;
				var x1 = new openfl_display_GraphicsSolidFill(c1.buffer.i[c1.iPos],1);
				graphicsData.data.push(x1);
				break;
			case 2:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL;
				var this3 = data;
				var c2 = this3;
				var x2 = new openfl_display_GraphicsGradientFill(c2.buffer.o[c2.oPos],c2.buffer.ii[c2.iiPos],c2.buffer.ff[c2.ffPos],c2.buffer.ii[c2.iiPos + 1],c2.buffer.o[c2.oPos + 1],c2.buffer.o[c2.oPos + 2],c2.buffer.o[c2.oPos + 3],c2.buffer.f[c2.fPos]);
				graphicsData.data.push(x2);
				break;
			case 3:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
				var this4 = data;
				var c3 = this4;
				path.cubicCurveTo(c3.buffer.f[c3.fPos],c3.buffer.f[c3.fPos + 1],c3.buffer.f[c3.fPos + 2],c3.buffer.f[c3.fPos + 3],c3.buffer.f[c3.fPos + 4],c3.buffer.f[c3.fPos + 5]);
				break;
			case 4:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
				var this5 = data;
				var c4 = this5;
				path.curveTo(c4.buffer.f[c4.fPos],c4.buffer.f[c4.fPos + 1],c4.buffer.f[c4.fPos + 2],c4.buffer.f[c4.fPos + 3]);
				break;
			case 5:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
				var this6 = data;
				var c5 = this6;
				path.__drawCircle(c5.buffer.f[c5.fPos],c5.buffer.f[c5.fPos + 1],c5.buffer.f[c5.fPos + 2]);
				break;
			case 6:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
				var this7 = data;
				var c6 = this7;
				path.__drawEllipse(c6.buffer.f[c6.fPos],c6.buffer.f[c6.fPos + 1],c6.buffer.f[c6.fPos + 2],c6.buffer.f[c6.fPos + 3]);
				break;
			case 7:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
				var this8 = data;
				var c7 = this8;
				path.__drawRect(c7.buffer.f[c7.fPos],c7.buffer.f[c7.fPos + 1],c7.buffer.f[c7.fPos + 2],c7.buffer.f[c7.fPos + 3]);
				break;
			case 8:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
				var this9 = data;
				var c8 = this9;
				path.__drawRoundRect(c8.buffer.f[c8.fPos],c8.buffer.f[c8.fPos + 1],c8.buffer.f[c8.fPos + 2],c8.buffer.f[c8.fPos + 3],c8.buffer.f[c8.fPos + 4],c8.buffer.o[c8.oPos] != null ? c8.buffer.o[c8.oPos] : c8.buffer.f[c8.fPos + 4]);
				break;
			case 11:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.END_FILL;
				var this10 = data;
				var x3 = new openfl_display_GraphicsEndFill();
				graphicsData.data.push(x3);
				break;
			case 12:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE;
				var this11 = data;
				var c9 = this11;
				path = null;
				break;
			case 13:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE;
				var this12 = data;
				var c10 = this12;
				break;
			case 14:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_STYLE;
				var this13 = data;
				var c11 = this13;
				stroke = new openfl_display_GraphicsStroke(c11.buffer.o[c11.oPos],c11.buffer.b[c11.bPos],c11.buffer.o[c11.oPos + 1],c11.buffer.o[c11.oPos + 2],c11.buffer.o[c11.oPos + 3],c11.buffer.f[c11.fPos + 1]);
				stroke.fill = new openfl_display_GraphicsSolidFill(c11.buffer.i[c11.iPos],c11.buffer.f[c11.fPos]);
				graphicsData.data.push(stroke);
				break;
			case 15:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
				var this14 = data;
				var c12 = this14;
				path.lineTo(c12.buffer.f[c12.fPos],c12.buffer.f[c12.fPos + 1]);
				break;
			case 16:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
				var this15 = data;
				var c13 = this15;
				path.moveTo(c13.buffer.f[c13.fPos],c13.buffer.f[c13.fPos + 1]);
				break;
			default:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = type;
			}
		}
		if(path != null) {
			graphicsData.data.push(path);
		}
	}
	,__getBatchQuad: function(renderSession,alpha,colorTransform,blendMode) {
		if(this.__batchQuadDirty) {
			if(this.__batchQuad == null) {
				this.__batchQuad = openfl__$internal_renderer_opengl_batcher_Quad.pool.get();
			}
			var transform = renderSession.renderer.getDisplayTransformTempMatrix(this.__worldTransform,false);
			this.__bitmap.__fillBatchQuad(transform,this.__batchQuad.vertexData);
			this.__batchQuad.texture = this.__bitmap.__getTexture();
			this.__batchQuadDirty = false;
		}
		var _this = this.__batchQuad;
		var blendMode1 = openfl__$internal_renderer_opengl_batcher_BlendMode.fromOpenFLBlendMode(blendMode);
		_this.alpha = alpha;
		_this.colorTransform = colorTransform;
		_this.blendMode = blendMode1;
		_this.smoothing = false;
		return this.__batchQuad;
	}
	,set___bitmap: function(value) {
		if(this.__bitmap != value) {
			this.__bitmap = value;
			this.__batchQuadDirty = true;
		}
		return value;
	}
	,__update: function() {
		if(this.__bounds == null || this.__bounds.width <= 0 || this.__bounds.height <= 0) {
			return;
		}
		var parentTransform = this.__owner.__renderTransform;
		if(parentTransform == null) {
			return;
		}
		var scaleX = parentTransform.b == 0 ? Math.abs(parentTransform.a) : Math.sqrt(parentTransform.a * parentTransform.a + parentTransform.b * parentTransform.b);
		var scaleY = parentTransform.c == 0 ? Math.abs(parentTransform.d) : Math.sqrt(parentTransform.c * parentTransform.c + parentTransform.d * parentTransform.d);
		var width = this.__bounds.width * scaleX;
		var height = this.__bounds.height * scaleY;
		if(width < 1 || height < 1) {
			if(this.__width >= 1 || this.__height >= 1) {
				this.set___dirty(true);
			}
			this.__width = 0;
			this.__height = 0;
			return;
		}
		if(openfl_display_Graphics.maxTextureWidth != null && width > openfl_display_Graphics.maxTextureWidth) {
			width = openfl_display_Graphics.maxTextureWidth;
			scaleX = openfl_display_Graphics.maxTextureWidth / this.__bounds.width;
		}
		if(openfl_display_Graphics.maxTextureWidth != null && height > openfl_display_Graphics.maxTextureHeight) {
			height = openfl_display_Graphics.maxTextureHeight;
			scaleY = openfl_display_Graphics.maxTextureHeight / this.__bounds.height;
		}
		this.__renderTransform.a = width / this.__bounds.width;
		this.__renderTransform.d = height / this.__bounds.height;
		var inverseA = 1 / this.__renderTransform.a;
		var inverseD = 1 / this.__renderTransform.d;
		this.__worldTransform.a = inverseA * parentTransform.a;
		this.__worldTransform.b = inverseA * parentTransform.b;
		this.__worldTransform.c = inverseD * parentTransform.c;
		this.__worldTransform.d = inverseD * parentTransform.d;
		var x = this.__bounds.x;
		var y = this.__bounds.y;
		var tx = x * parentTransform.a + y * parentTransform.c + parentTransform.tx;
		var ty = x * parentTransform.b + y * parentTransform.d + parentTransform.ty;
		this.__worldTransform.tx = Math.floor(tx);
		this.__worldTransform.ty = Math.floor(ty);
		var _this = this.__worldTransform;
		var norm = _this.a * _this.d - _this.b * _this.c;
		this.__renderTransform.tx = norm == 0 ? -_this.tx : 1.0 / norm * (_this.c * (_this.ty - ty) + _this.d * (tx - _this.tx));
		var _this1 = this.__worldTransform;
		var norm1 = _this1.a * _this1.d - _this1.b * _this1.c;
		this.__renderTransform.ty = norm1 == 0 ? -_this1.ty : 1.0 / norm1 * (_this1.a * (ty - _this1.ty) + _this1.b * (_this1.tx - tx));
		var newWidth = Math.ceil(width + 1.0);
		var newHeight = Math.ceil(height + 1.0);
		if(newWidth != this.__width || newHeight != this.__height) {
			this.set___dirty(true);
		}
		this.__width = newWidth;
		this.__height = newHeight;
		this.__batchQuadDirty = true;
	}
	,set___dirty: function(value) {
		if(value && this.__owner != null) {
			var _this = this.__owner;
			if(!_this.__renderDirty) {
				_this.__renderDirty = true;
				_this.__setParentRenderDirty();
			}
			if(!_this.__updateDirty) {
				_this.__updateDirty = true;
				_this.__setParentUpdateTraverse();
			}
		}
		return this.__dirty = value;
	}
	,__class__: openfl_display_Graphics
	,__properties__: {set___bitmap:"set___bitmap",set___dirty:"set___dirty"}
};
var openfl_display_IGraphicsFill = function() { };
$hxClasses["openfl.display.IGraphicsFill"] = openfl_display_IGraphicsFill;
openfl_display_IGraphicsFill.__name__ = "openfl.display.IGraphicsFill";
openfl_display_IGraphicsFill.prototype = {
	__graphicsFillType: null
	,__class__: openfl_display_IGraphicsFill
};
var openfl_display_IGraphicsData = function() { };
$hxClasses["openfl.display.IGraphicsData"] = openfl_display_IGraphicsData;
openfl_display_IGraphicsData.__name__ = "openfl.display.IGraphicsData";
openfl_display_IGraphicsData.prototype = {
	__graphicsDataType: null
	,__class__: openfl_display_IGraphicsData
};
var openfl_display_GraphicsBitmapFill = function(bitmapData,matrix,repeat,smooth) {
	if(smooth == null) {
		smooth = false;
	}
	if(repeat == null) {
		repeat = true;
	}
	this.bitmapData = bitmapData;
	this.matrix = matrix;
	this.repeat = repeat;
	this.smooth = smooth;
	this.__graphicsDataType = 4;
	this.__graphicsFillType = 2;
};
$hxClasses["openfl.display.GraphicsBitmapFill"] = openfl_display_GraphicsBitmapFill;
openfl_display_GraphicsBitmapFill.__name__ = "openfl.display.GraphicsBitmapFill";
openfl_display_GraphicsBitmapFill.__interfaces__ = [openfl_display_IGraphicsFill,openfl_display_IGraphicsData];
openfl_display_GraphicsBitmapFill.prototype = {
	bitmapData: null
	,matrix: null
	,repeat: null
	,smooth: null
	,__graphicsDataType: null
	,__graphicsFillType: null
	,__class__: openfl_display_GraphicsBitmapFill
};
var openfl_display_GraphicsEndFill = function() {
	this.__graphicsDataType = 5;
	this.__graphicsFillType = 3;
};
$hxClasses["openfl.display.GraphicsEndFill"] = openfl_display_GraphicsEndFill;
openfl_display_GraphicsEndFill.__name__ = "openfl.display.GraphicsEndFill";
openfl_display_GraphicsEndFill.__interfaces__ = [openfl_display_IGraphicsFill,openfl_display_IGraphicsData];
openfl_display_GraphicsEndFill.prototype = {
	__graphicsDataType: null
	,__graphicsFillType: null
	,__class__: openfl_display_GraphicsEndFill
};
var openfl_display_GraphicsGradientFill = function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
	if(focalPointRatio == null) {
		focalPointRatio = 0;
	}
	if(type == null) {
		type = 0;
	}
	if(spreadMethod == null) {
		spreadMethod = 0;
	}
	if(interpolationMethod == null) {
		interpolationMethod = 1;
	}
	this.type = type;
	this.colors = colors;
	this.alphas = alphas;
	this.ratios = ratios;
	this.matrix = matrix;
	this.spreadMethod = spreadMethod;
	this.interpolationMethod = interpolationMethod;
	this.focalPointRatio = focalPointRatio;
	this.__graphicsDataType = 2;
	this.__graphicsFillType = 1;
};
$hxClasses["openfl.display.GraphicsGradientFill"] = openfl_display_GraphicsGradientFill;
openfl_display_GraphicsGradientFill.__name__ = "openfl.display.GraphicsGradientFill";
openfl_display_GraphicsGradientFill.__interfaces__ = [openfl_display_IGraphicsFill,openfl_display_IGraphicsData];
openfl_display_GraphicsGradientFill.prototype = {
	alphas: null
	,colors: null
	,focalPointRatio: null
	,interpolationMethod: null
	,matrix: null
	,ratios: null
	,spreadMethod: null
	,type: null
	,__graphicsDataType: null
	,__graphicsFillType: null
	,__class__: openfl_display_GraphicsGradientFill
};
var openfl_display_IGraphicsPath = function() { };
$hxClasses["openfl.display.IGraphicsPath"] = openfl_display_IGraphicsPath;
openfl_display_IGraphicsPath.__name__ = "openfl.display.IGraphicsPath";
var openfl_display_GraphicsPath = function(commands,data,winding) {
	if(winding == null) {
		winding = 0;
	}
	this.commands = commands;
	this.data = data;
	this.winding = winding;
	this.__graphicsDataType = 3;
};
$hxClasses["openfl.display.GraphicsPath"] = openfl_display_GraphicsPath;
openfl_display_GraphicsPath.__name__ = "openfl.display.GraphicsPath";
openfl_display_GraphicsPath.__interfaces__ = [openfl_display_IGraphicsPath,openfl_display_IGraphicsData];
openfl_display_GraphicsPath.prototype = {
	commands: null
	,data: null
	,winding: null
	,__graphicsDataType: null
	,cubicCurveTo: function(controlX1,controlY1,controlX2,controlY2,anchorX,anchorY) {
		if(this.commands == null) {
			this.commands = openfl__$Vector_Vector_$Impl_$.toIntVector(null);
		}
		if(this.data == null) {
			this.data = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
		}
		this.commands.data.push(6);
		this.data.data.push(controlX1);
		this.data.data.push(controlY1);
		this.data.data.push(controlX2);
		this.data.data.push(controlY2);
		this.data.data.push(anchorX);
		this.data.data.push(anchorY);
	}
	,curveTo: function(controlX,controlY,anchorX,anchorY) {
		if(this.commands == null) {
			this.commands = openfl__$Vector_Vector_$Impl_$.toIntVector(null);
		}
		if(this.data == null) {
			this.data = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
		}
		this.commands.data.push(3);
		this.data.data.push(controlX);
		this.data.data.push(controlY);
		this.data.data.push(anchorX);
		this.data.data.push(anchorY);
	}
	,lineTo: function(x,y) {
		if(this.commands == null) {
			this.commands = openfl__$Vector_Vector_$Impl_$.toIntVector(null);
		}
		if(this.data == null) {
			this.data = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
		}
		this.commands.data.push(2);
		this.data.data.push(x);
		this.data.data.push(y);
	}
	,moveTo: function(x,y) {
		if(this.commands == null) {
			this.commands = openfl__$Vector_Vector_$Impl_$.toIntVector(null);
		}
		if(this.data == null) {
			this.data = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
		}
		this.commands.data.push(1);
		this.data.data.push(x);
		this.data.data.push(y);
	}
	,wideLineTo: function(x,y) {
		if(this.commands == null) {
			this.commands = openfl__$Vector_Vector_$Impl_$.toIntVector(null);
		}
		if(this.data == null) {
			this.data = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
		}
		this.commands.data.push(2);
		this.data.data.push(x);
		this.data.data.push(y);
	}
	,wideMoveTo: function(x,y) {
		if(this.commands == null) {
			this.commands = openfl__$Vector_Vector_$Impl_$.toIntVector(null);
		}
		if(this.data == null) {
			this.data = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
		}
		this.commands.data.push(1);
		this.data.data.push(x);
		this.data.data.push(y);
	}
	,__drawCircle: function(x,y,radius) {
		this.__drawRoundRect(x - radius,y - radius,radius * 2,radius * 2,radius * 2,radius * 2);
	}
	,__drawEllipse: function(x,y,width,height) {
		this.__drawRoundRect(x,y,width,height,width,height);
	}
	,__drawRect: function(x,y,width,height) {
		this.moveTo(x,y);
		this.lineTo(x + width,y);
		this.lineTo(x + width,y + height);
		this.lineTo(x,y + height);
		this.lineTo(x,y);
	}
	,__drawRoundRect: function(x,y,width,height,ellipseWidth,ellipseHeight) {
		ellipseWidth *= 0.5;
		ellipseHeight *= 0.5;
		if(ellipseWidth > width / 2) {
			ellipseWidth = width / 2;
		}
		if(ellipseHeight > height / 2) {
			ellipseHeight = height / 2;
		}
		var xe = x + width;
		var ye = y + height;
		var cx1 = -ellipseWidth + ellipseWidth * openfl_display_GraphicsPath.SIN45;
		var cx2 = -ellipseWidth + ellipseWidth * openfl_display_GraphicsPath.TAN22;
		var cy1 = -ellipseHeight + ellipseHeight * openfl_display_GraphicsPath.SIN45;
		var cy2 = -ellipseHeight + ellipseHeight * openfl_display_GraphicsPath.TAN22;
		this.moveTo(xe,ye - ellipseHeight);
		this.curveTo(xe,ye + cy2,xe + cx1,ye + cy1);
		this.curveTo(xe + cx2,ye,xe - ellipseWidth,ye);
		this.lineTo(x + ellipseWidth,ye);
		this.curveTo(x - cx2,ye,x - cx1,ye + cy1);
		this.curveTo(x,ye + cy2,x,ye - ellipseHeight);
		this.lineTo(x,y + ellipseHeight);
		this.curveTo(x,y - cy2,x - cx1,y - cy1);
		this.curveTo(x - cx2,y,x + ellipseWidth,y);
		this.lineTo(xe - ellipseWidth,y);
		this.curveTo(xe + cx2,y,xe + cx1,y - cy1);
		this.curveTo(xe,y - cy2,xe,y + ellipseHeight);
		this.lineTo(xe,ye - ellipseHeight);
	}
	,__class__: openfl_display_GraphicsPath
};
var openfl_display__$GraphicsPathWinding_GraphicsPathWinding_$Impl_$ = {};
$hxClasses["openfl.display._GraphicsPathWinding.GraphicsPathWinding_Impl_"] = openfl_display__$GraphicsPathWinding_GraphicsPathWinding_$Impl_$;
openfl_display__$GraphicsPathWinding_GraphicsPathWinding_$Impl_$.__name__ = "openfl.display._GraphicsPathWinding.GraphicsPathWinding_Impl_";
openfl_display__$GraphicsPathWinding_GraphicsPathWinding_$Impl_$.fromString = function(value) {
	switch(value) {
	case "evenOdd":
		return 0;
	case "nonZero":
		return 1;
	default:
		return null;
	}
};
openfl_display__$GraphicsPathWinding_GraphicsPathWinding_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 0:
		return "evenOdd";
	case 1:
		return "nonZero";
	default:
		return null;
	}
};
var openfl_display_GraphicsSolidFill = function(color,alpha) {
	if(alpha == null) {
		alpha = 1;
	}
	if(color == null) {
		color = 0;
	}
	this.alpha = alpha;
	this.color = color;
	this.__graphicsDataType = 1;
	this.__graphicsFillType = 0;
};
$hxClasses["openfl.display.GraphicsSolidFill"] = openfl_display_GraphicsSolidFill;
openfl_display_GraphicsSolidFill.__name__ = "openfl.display.GraphicsSolidFill";
openfl_display_GraphicsSolidFill.__interfaces__ = [openfl_display_IGraphicsFill,openfl_display_IGraphicsData];
openfl_display_GraphicsSolidFill.prototype = {
	alpha: null
	,color: null
	,__graphicsDataType: null
	,__graphicsFillType: null
	,__class__: openfl_display_GraphicsSolidFill
};
var openfl_display_IGraphicsStroke = function() { };
$hxClasses["openfl.display.IGraphicsStroke"] = openfl_display_IGraphicsStroke;
openfl_display_IGraphicsStroke.__name__ = "openfl.display.IGraphicsStroke";
var openfl_display_GraphicsStroke = function(thickness,pixelHinting,scaleMode,caps,joints,miterLimit,fill) {
	if(miterLimit == null) {
		miterLimit = 3;
	}
	if(joints == null) {
		joints = 2;
	}
	if(caps == null) {
		caps = 0;
	}
	if(scaleMode == null) {
		scaleMode = 2;
	}
	if(pixelHinting == null) {
		pixelHinting = false;
	}
	if(thickness == null) {
		thickness = NaN;
	}
	this.caps = caps;
	this.fill = fill;
	this.joints = joints;
	this.miterLimit = miterLimit;
	this.pixelHinting = pixelHinting;
	this.scaleMode = scaleMode;
	this.thickness = thickness;
	this.__graphicsDataType = 0;
};
$hxClasses["openfl.display.GraphicsStroke"] = openfl_display_GraphicsStroke;
openfl_display_GraphicsStroke.__name__ = "openfl.display.GraphicsStroke";
openfl_display_GraphicsStroke.__interfaces__ = [openfl_display_IGraphicsStroke,openfl_display_IGraphicsData];
openfl_display_GraphicsStroke.prototype = {
	caps: null
	,fill: null
	,joints: null
	,miterLimit: null
	,pixelHinting: null
	,scaleMode: null
	,thickness: null
	,__graphicsDataType: null
	,__class__: openfl_display_GraphicsStroke
};
var openfl_display_GraphicsTrianglePath = function(vertices,indices,uvtData,culling) {
	if(culling == null) {
		culling = 1;
	}
	this.vertices = vertices;
	this.indices = indices;
	this.uvtData = uvtData;
	this.culling = culling;
	this.__graphicsDataType = 6;
};
$hxClasses["openfl.display.GraphicsTrianglePath"] = openfl_display_GraphicsTrianglePath;
openfl_display_GraphicsTrianglePath.__name__ = "openfl.display.GraphicsTrianglePath";
openfl_display_GraphicsTrianglePath.__interfaces__ = [openfl_display_IGraphicsPath,openfl_display_IGraphicsData];
openfl_display_GraphicsTrianglePath.prototype = {
	culling: null
	,indices: null
	,uvtData: null
	,vertices: null
	,__graphicsDataType: null
	,__class__: openfl_display_GraphicsTrianglePath
};
var openfl_display__$InterpolationMethod_InterpolationMethod_$Impl_$ = {};
$hxClasses["openfl.display._InterpolationMethod.InterpolationMethod_Impl_"] = openfl_display__$InterpolationMethod_InterpolationMethod_$Impl_$;
openfl_display__$InterpolationMethod_InterpolationMethod_$Impl_$.__name__ = "openfl.display._InterpolationMethod.InterpolationMethod_Impl_";
openfl_display__$InterpolationMethod_InterpolationMethod_$Impl_$.fromString = function(value) {
	switch(value) {
	case "linearRGB":
		return 0;
	case "rgb":
		return 1;
	default:
		return null;
	}
};
openfl_display__$InterpolationMethod_InterpolationMethod_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 0:
		return "linearRGB";
	case 1:
		return "rgb";
	default:
		return null;
	}
};
var openfl_display_JPEGEncoderOptions = function(quality) {
	if(quality == null) {
		quality = 80;
	}
	this.quality = quality;
};
$hxClasses["openfl.display.JPEGEncoderOptions"] = openfl_display_JPEGEncoderOptions;
openfl_display_JPEGEncoderOptions.__name__ = "openfl.display.JPEGEncoderOptions";
openfl_display_JPEGEncoderOptions.prototype = {
	quality: null
	,__class__: openfl_display_JPEGEncoderOptions
};
var openfl_display__$JointStyle_JointStyle_$Impl_$ = {};
$hxClasses["openfl.display._JointStyle.JointStyle_Impl_"] = openfl_display__$JointStyle_JointStyle_$Impl_$;
openfl_display__$JointStyle_JointStyle_$Impl_$.__name__ = "openfl.display._JointStyle.JointStyle_Impl_";
openfl_display__$JointStyle_JointStyle_$Impl_$.fromString = function(value) {
	switch(value) {
	case "bevel":
		return 0;
	case "miter":
		return 1;
	case "round":
		return 2;
	default:
		return null;
	}
};
openfl_display__$JointStyle_JointStyle_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 0:
		return "bevel";
	case 1:
		return "miter";
	case 2:
		return "round";
	default:
		return null;
	}
};
var openfl_display__$LineScaleMode_LineScaleMode_$Impl_$ = {};
$hxClasses["openfl.display._LineScaleMode.LineScaleMode_Impl_"] = openfl_display__$LineScaleMode_LineScaleMode_$Impl_$;
openfl_display__$LineScaleMode_LineScaleMode_$Impl_$.__name__ = "openfl.display._LineScaleMode.LineScaleMode_Impl_";
openfl_display__$LineScaleMode_LineScaleMode_$Impl_$.fromString = function(value) {
	switch(value) {
	case "horizontal":
		return 0;
	case "none":
		return 1;
	case "normal":
		return 2;
	case "vertical":
		return 3;
	default:
		return null;
	}
};
openfl_display__$LineScaleMode_LineScaleMode_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 0:
		return "horizontal";
	case 1:
		return "none";
	case 2:
		return "normal";
	case 3:
		return "vertical";
	default:
		return null;
	}
};
var openfl_display_Loader = function() {
	openfl_display_DisplayObjectContainer.call(this);
	this.contentLoaderInfo = openfl_display_LoaderInfo.create(this);
	this.uncaughtErrorEvents = this.contentLoaderInfo.uncaughtErrorEvents;
};
$hxClasses["openfl.display.Loader"] = openfl_display_Loader;
openfl_display_Loader.__name__ = "openfl.display.Loader";
openfl_display_Loader.__super__ = openfl_display_DisplayObjectContainer;
openfl_display_Loader.prototype = $extend(openfl_display_DisplayObjectContainer.prototype,{
	content: null
	,contentLoaderInfo: null
	,uncaughtErrorEvents: null
	,__path: null
	,__unloaded: null
	,close: function() {
		openfl_Lib.notImplemented({ fileName : "openfl/display/Loader.hx", lineNumber : 32, className : "openfl.display.Loader", methodName : "close"});
	}
	,load: function(request,context) {
		this.contentLoaderInfo.loaderURL = openfl_Lib.current.get_loaderInfo().url;
		this.contentLoaderInfo.url = request.url;
		this.__unloaded = false;
		if(request.contentType == null || request.contentType == "") {
			var extension = "";
			this.__path = request.url;
			var queryIndex = this.__path.indexOf("?");
			if(queryIndex > -1) {
				this.__path = this.__path.substring(0,queryIndex);
			}
			while(StringTools.endsWith(this.__path,"/")) this.__path = this.__path.substring(0,this.__path.length - 1);
			var extIndex = this.__path.lastIndexOf(".");
			if(extIndex > -1) {
				extension = this.__path.substring(extIndex + 1);
			}
			var tmp;
			switch(extension) {
			case "gif":
				tmp = "image/gif";
				break;
			case "jpeg":case "jpg":
				tmp = "image/jpeg";
				break;
			case "js":
				tmp = "application/javascript";
				break;
			case "json":
				tmp = "application/json";
				break;
			case "png":
				tmp = "image/png";
				break;
			case "swf":
				tmp = "application/x-shockwave-flash";
				break;
			default:
				tmp = "application/x-www-form-urlencoded";
			}
			this.contentLoaderInfo.contentType = tmp;
		} else {
			this.contentLoaderInfo.contentType = request.contentType;
		}
		if(this.contentLoaderInfo.contentType.indexOf("image/") > -1 && request.method == "GET" && (request.requestHeaders == null || request.requestHeaders.length == 0) && request.userAgent == null) {
			openfl_display_BitmapData.loadFromFile(request.url).onComplete($bind(this,this.BitmapData_onLoad)).onError($bind(this,this.BitmapData_onError)).onProgress($bind(this,this.BitmapData_onProgress));
			return;
		}
		var loader = new openfl_net_URLLoader();
		loader.dataFormat = 0;
		if(this.contentLoaderInfo.contentType.indexOf("/json") > -1 || this.contentLoaderInfo.contentType.indexOf("/javascript") > -1 || this.contentLoaderInfo.contentType.indexOf("/ecmascript") > -1) {
			loader.dataFormat = 1;
		}
		loader.addEventListener("complete",$bind(this,this.loader_onComplete));
		loader.addEventListener("ioError",$bind(this,this.loader_onError));
		loader.addEventListener("progress",$bind(this,this.loader_onProgress));
		loader.load(request);
	}
	,loadBytes: function(buffer,context) {
		openfl_display_BitmapData.loadFromBytes(buffer).onComplete($bind(this,this.BitmapData_onLoad)).onError($bind(this,this.BitmapData_onError));
	}
	,unload: function() {
		if(!this.__unloaded) {
			while(this.get_numChildren() > 0) this.removeChildAt(0);
			this.content = null;
			this.contentLoaderInfo.url = null;
			this.contentLoaderInfo.contentType = null;
			this.contentLoaderInfo.content = null;
			this.contentLoaderInfo.bytesLoaded = 0;
			this.contentLoaderInfo.bytesTotal = 0;
			this.contentLoaderInfo.width = 0;
			this.contentLoaderInfo.height = 0;
			this.__unloaded = true;
			this.contentLoaderInfo.dispatchEvent(new openfl_events_Event("unload"));
		}
	}
	,unloadAndStop: function(gc) {
		if(gc == null) {
			gc = true;
		}
		if(this.content != null) {
			this.content.__stopAllMovieClips();
		}
		var _g = 0;
		var _g1 = this.get_numChildren();
		while(_g < _g1) {
			var i = _g++;
			this.getChildAt(i).__stopAllMovieClips();
		}
		this.unload();
		var gc1 = gc;
	}
	,__dispatchError: function(text) {
		var event = new openfl_events_IOErrorEvent("ioError");
		event.text = text;
		this.contentLoaderInfo.dispatchEvent(event);
	}
	,BitmapData_onError: function(error) {
		this.__dispatchError(Std.string(error));
	}
	,BitmapData_onLoad: function(bitmapData) {
		this.content = new openfl_display_Bitmap(bitmapData);
		this.contentLoaderInfo.content = this.content;
		this.addChild(this.content);
		this.contentLoaderInfo.dispatchEvent(new openfl_events_Event("complete"));
	}
	,BitmapData_onProgress: function(bytesLoaded,bytesTotal) {
		var event = new openfl_events_ProgressEvent("progress");
		event.bytesLoaded = bytesLoaded;
		event.bytesTotal = bytesTotal;
		this.contentLoaderInfo.dispatchEvent(event);
	}
	,loader_onComplete: function(event) {
		var loader = event.target;
		if(this.contentLoaderInfo.contentType != null && (this.contentLoaderInfo.contentType.indexOf("/javascript") > -1 || this.contentLoaderInfo.contentType.indexOf("/ecmascript") > -1)) {
			this.content = new openfl_display_Sprite();
			this.contentLoaderInfo.content = this.content;
			this.addChild(this.content);
			eval("(function () {" + Std.string(loader.data) + "})()");
			this.contentLoaderInfo.dispatchEvent(new openfl_events_Event("complete"));
		} else {
			openfl_display_BitmapData.loadFromBytes(loader.data).onComplete($bind(this,this.BitmapData_onLoad)).onError($bind(this,this.BitmapData_onError));
		}
	}
	,loader_onError: function(event) {
		event.target = this.contentLoaderInfo;
		this.contentLoaderInfo.dispatchEvent(event);
	}
	,loader_onProgress: function(event) {
		event.target = this.contentLoaderInfo;
		this.contentLoaderInfo.dispatchEvent(event);
	}
	,__class__: openfl_display_Loader
});
var openfl_display_LoaderInfo = function() {
	openfl_events_EventDispatcher.call(this);
	this.applicationDomain = openfl_system_ApplicationDomain.currentDomain;
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.childAllowsParent = true;
	this.parameters = { };
};
$hxClasses["openfl.display.LoaderInfo"] = openfl_display_LoaderInfo;
openfl_display_LoaderInfo.__name__ = "openfl.display.LoaderInfo";
openfl_display_LoaderInfo.create = function(loader) {
	var loaderInfo = new openfl_display_LoaderInfo();
	loaderInfo.uncaughtErrorEvents = new openfl_events_UncaughtErrorEvents();
	if(loader != null) {
		loaderInfo.loader = loader;
	} else {
		loaderInfo.url = openfl_display_LoaderInfo.__rootURL;
	}
	return loaderInfo;
};
openfl_display_LoaderInfo.__super__ = openfl_events_EventDispatcher;
openfl_display_LoaderInfo.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	applicationDomain: null
	,bytes: null
	,bytesLoaded: null
	,bytesTotal: null
	,childAllowsParent: null
	,content: null
	,contentType: null
	,frameRate: null
	,height: null
	,loader: null
	,loaderURL: null
	,parameters: null
	,parentAllowsChild: null
	,sameDomain: null
	,sharedEvents: null
	,uncaughtErrorEvents: null
	,url: null
	,width: null
	,__completed: null
	,__complete: function() {
		if(!this.__completed) {
			if(this.bytesLoaded < this.bytesTotal) {
				this.bytesLoaded = this.bytesTotal;
			}
			this.__update(this.bytesLoaded,this.bytesTotal);
			this.__completed = true;
			this.dispatchEvent(new openfl_events_Event("complete"));
		}
	}
	,__update: function(bytesLoaded,bytesTotal) {
		this.bytesLoaded = bytesLoaded;
		this.bytesTotal = bytesTotal;
		this.dispatchEvent(new openfl_events_ProgressEvent("progress",false,false,bytesLoaded,bytesTotal));
	}
	,__class__: openfl_display_LoaderInfo
});
var openfl_display_PNGEncoderOptions = function(fastCompression) {
	if(fastCompression == null) {
		fastCompression = false;
	}
	this.fastCompression = fastCompression;
};
$hxClasses["openfl.display.PNGEncoderOptions"] = openfl_display_PNGEncoderOptions;
openfl_display_PNGEncoderOptions.__name__ = "openfl.display.PNGEncoderOptions";
openfl_display_PNGEncoderOptions.prototype = {
	fastCompression: null
	,__class__: openfl_display_PNGEncoderOptions
};
var openfl_display__$PixelSnapping_PixelSnapping_$Impl_$ = {};
$hxClasses["openfl.display._PixelSnapping.PixelSnapping_Impl_"] = openfl_display__$PixelSnapping_PixelSnapping_$Impl_$;
openfl_display__$PixelSnapping_PixelSnapping_$Impl_$.__name__ = "openfl.display._PixelSnapping.PixelSnapping_Impl_";
openfl_display__$PixelSnapping_PixelSnapping_$Impl_$.fromString = function(value) {
	switch(value) {
	case "always":
		return 0;
	case "auto":
		return 1;
	case "never":
		return 2;
	default:
		return null;
	}
};
openfl_display__$PixelSnapping_PixelSnapping_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 0:
		return "always";
	case 1:
		return "auto";
	case 2:
		return "never";
	default:
		return null;
	}
};
var openfl_display_Shape = function() {
	openfl_display_DisplayObject.call(this);
};
$hxClasses["openfl.display.Shape"] = openfl_display_Shape;
openfl_display_Shape.__name__ = "openfl.display.Shape";
openfl_display_Shape.__super__ = openfl_display_DisplayObject;
openfl_display_Shape.prototype = $extend(openfl_display_DisplayObject.prototype,{
	get_graphics: function() {
		if(this.__graphics == null) {
			this.__graphics = new openfl_display_Graphics(this);
		}
		return this.__graphics;
	}
	,__class__: openfl_display_Shape
	,__properties__: $extend(openfl_display_DisplayObject.prototype.__properties__,{get_graphics:"get_graphics"})
});
var openfl_display_SimpleButton = function(upState,overState,downState,hitTestState) {
	openfl_display_InteractiveObject.call(this);
	this.enabled = true;
	this.trackAsMenu = false;
	this.useHandCursor = true;
	this.__upState = upState != null ? upState : new openfl_display_DisplayObject();
	this.__overState = overState;
	this.__downState = downState;
	this.__hitTestState = hitTestState != null ? hitTestState : new openfl_display_DisplayObject();
	this.addEventListener("mouseDown",$bind(this,this.__this_onMouseDown));
	this.addEventListener("mouseOut",$bind(this,this.__this_onMouseOut));
	this.addEventListener("mouseOver",$bind(this,this.__this_onMouseOver));
	this.addEventListener("mouseUp",$bind(this,this.__this_onMouseUp));
	this.__tabEnabled = true;
	this.set___currentState(this.__upState);
};
$hxClasses["openfl.display.SimpleButton"] = openfl_display_SimpleButton;
openfl_display_SimpleButton.__name__ = "openfl.display.SimpleButton";
openfl_display_SimpleButton.__super__ = openfl_display_InteractiveObject;
openfl_display_SimpleButton.prototype = $extend(openfl_display_InteractiveObject.prototype,{
	enabled: null
	,trackAsMenu: null
	,useHandCursor: null
	,__currentState: null
	,__downState: null
	,__hitTestState: null
	,__ignoreEvent: null
	,__overState: null
	,__soundTransform: null
	,__upState: null
	,__forceRenderDirty: function() {
		openfl_display_InteractiveObject.prototype.__forceRenderDirty.call(this);
		if(this.__currentState != null) {
			this.__currentState.__forceRenderDirty();
		}
	}
	,__getBounds: function(rect,matrix) {
		openfl_display_InteractiveObject.prototype.__getBounds.call(this,rect,matrix);
		var childWorldTransform = openfl_geom_Matrix.__pool.get();
		var local = this.__currentState.__transform;
		childWorldTransform.a = local.a * matrix.a + local.b * matrix.c;
		childWorldTransform.b = local.a * matrix.b + local.b * matrix.d;
		childWorldTransform.c = local.c * matrix.a + local.d * matrix.c;
		childWorldTransform.d = local.c * matrix.b + local.d * matrix.d;
		childWorldTransform.tx = local.tx * matrix.a + local.ty * matrix.c + matrix.tx;
		childWorldTransform.ty = local.tx * matrix.b + local.ty * matrix.d + matrix.ty;
		this.__currentState.__getBounds(rect,childWorldTransform);
		openfl_geom_Matrix.__pool.release(childWorldTransform);
	}
	,__getRenderBounds: function(rect,matrix) {
		if(this.__scrollRect != null) {
			openfl_display_InteractiveObject.prototype.__getRenderBounds.call(this,rect,matrix);
			return;
		} else {
			openfl_display_InteractiveObject.prototype.__getBounds.call(this,rect,matrix);
		}
		var childWorldTransform = openfl_geom_Matrix.__pool.get();
		var local = this.__currentState.__transform;
		childWorldTransform.a = local.a * matrix.a + local.b * matrix.c;
		childWorldTransform.b = local.a * matrix.b + local.b * matrix.d;
		childWorldTransform.c = local.c * matrix.a + local.d * matrix.c;
		childWorldTransform.d = local.c * matrix.b + local.d * matrix.d;
		childWorldTransform.tx = local.tx * matrix.a + local.ty * matrix.c + matrix.tx;
		childWorldTransform.ty = local.tx * matrix.b + local.ty * matrix.d + matrix.ty;
		this.__currentState.__getRenderBounds(rect,childWorldTransform);
		openfl_geom_Matrix.__pool.release(childWorldTransform);
	}
	,__getCursor: function() {
		if(this.useHandCursor && !this.__ignoreEvent) {
			return "button";
		} else {
			return null;
		}
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject,hitTestWhenMouseDisabled) {
		if(hitTestWhenMouseDisabled == null) {
			hitTestWhenMouseDisabled = false;
		}
		var hitTest = false;
		if(this.get_hitTestState() != null) {
			if(this.get_hitTestState().__hitTest(x,y,shapeFlag,stack,interactiveOnly,hitObject,hitTestWhenMouseDisabled)) {
				if(stack != null && !hitTestWhenMouseDisabled) {
					if(stack.length == 0) {
						stack[0] = hitObject;
					} else {
						stack[stack.length - 1] = hitObject;
					}
				}
				hitTest = true;
			}
		} else if(this.__currentState != null) {
			if(!hitObject.get_visible() || this.__isMask || !hitTestWhenMouseDisabled && interactiveOnly && !this.mouseEnabled) {
				return false;
			}
			if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
				return false;
			}
			if(this.__currentState.__hitTest(x,y,shapeFlag,stack,interactiveOnly,hitObject,hitTestWhenMouseDisabled)) {
				hitTest = interactiveOnly;
			}
		}
		if(stack != null && !hitTestWhenMouseDisabled) {
			while(stack.length > 1 && stack[stack.length - 1] == stack[stack.length - 2]) stack.pop();
		}
		return hitTest;
	}
	,__hitTestMask: function(x,y) {
		var hitTest = false;
		if(this.__currentState.__hitTestMask(x,y)) {
			hitTest = true;
		}
		return hitTest;
	}
	,__renderCanvas: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0 || this.__currentState == null) {
			return;
		}
		renderSession.maskManager.pushObject(this);
		this.__currentState.__renderCanvas(renderSession);
		renderSession.maskManager.popObject(this);
	}
	,__renderCanvasMask: function(renderSession) {
		var bounds = openfl_geom_Rectangle.__pool.get();
		this.__getLocalBounds(bounds);
		renderSession.context.rect(0,0,bounds.width,bounds.height);
		openfl_geom_Rectangle.__pool.release(bounds);
		this.__currentState.__renderCanvasMask(renderSession);
	}
	,__renderGL: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0 || this.__currentState == null) {
			return;
		}
		renderSession.maskManager.pushObject(this);
		this.__currentState.__renderGL(renderSession);
		renderSession.maskManager.popObject(this);
	}
	,__renderGLMask: function(renderSession) {
		if(this.__currentState == null) {
			return;
		}
		this.__currentState.__renderGLMask(renderSession);
	}
	,__setStageReference: function(stage) {
		openfl_display_InteractiveObject.prototype.__setStageReference.call(this,stage);
		if(this.__currentState != null) {
			this.__currentState.__setStageReference(stage);
		}
		if(this.get_hitTestState() != null && this.get_hitTestState() != this.__currentState) {
			this.get_hitTestState().__setStageReference(stage);
		}
	}
	,__setTransformDirty: function() {
		openfl_display_InteractiveObject.prototype.__setTransformDirty.call(this);
		if(this.__currentState != null) {
			this.__currentState.__setTransformDirty();
		}
		if(this.get_hitTestState() != null && this.get_hitTestState() != this.__currentState) {
			this.get_hitTestState().__setTransformDirty();
		}
	}
	,__update: function(transformOnly,updateChildren,resetUpdateDirty) {
		if(resetUpdateDirty == null) {
			resetUpdateDirty = false;
		}
		openfl_display_InteractiveObject.prototype.__update.call(this,transformOnly,updateChildren,resetUpdateDirty);
		if(updateChildren) {
			if(this.__currentState != null) {
				this.__currentState.__update(transformOnly,true,resetUpdateDirty);
			}
			if(this.get_hitTestState() != null && this.get_hitTestState() != this.__currentState) {
				this.get_hitTestState().__update(transformOnly,true,resetUpdateDirty);
			}
		}
	}
	,__updateChildren: function(transformOnly) {
		openfl_display_InteractiveObject.prototype.__updateChildren.call(this,transformOnly);
		if(this.__currentState != null) {
			this.__currentState.__updateChildren(transformOnly);
		}
		if(this.get_hitTestState() != null && this.get_hitTestState() != this.__currentState) {
			this.get_hitTestState().__updateChildren(transformOnly);
		}
	}
	,__updateTransforms: function() {
		openfl_display_InteractiveObject.prototype.__updateTransforms.call(this);
		if(this.__currentState != null) {
			this.__currentState.__updateTransforms();
		}
		if(this.get_hitTestState() != null && this.get_hitTestState() != this.__currentState) {
			this.get_hitTestState().__updateTransforms();
		}
	}
	,__overrideTransforms: function(overrideTransform) {
		openfl_display_InteractiveObject.prototype.__overrideTransforms.call(this,overrideTransform);
		if(this.__currentState != null) {
			this.__currentState.__overrideTransforms(overrideTransform);
		}
		if(this.get_hitTestState() != null && this.get_hitTestState() != this.__currentState) {
			this.get_hitTestState().__overrideTransforms(overrideTransform);
		}
	}
	,get_downState: function() {
		return this.__downState;
	}
	,set_downState: function(downState) {
		if(this.__downState != null && this.__currentState == this.__downState) {
			this.set___currentState(this.__downState);
		}
		return this.__downState = downState;
	}
	,get_hitTestState: function() {
		return this.__hitTestState;
	}
	,set_hitTestState: function(hitTestState) {
		if(this.__hitTestState != null && this.__hitTestState != hitTestState) {
			if(this.__hitTestState != this.get_downState() && this.__hitTestState != this.get_upState() && this.__hitTestState != this.get_overState()) {
				this.__hitTestState.__renderParent = null;
			}
		}
		if(hitTestState != null) {
			hitTestState.__renderParent = this;
			if(!hitTestState.__renderDirty) {
				hitTestState.__renderDirty = true;
				hitTestState.__setParentRenderDirty();
			}
			if(!hitTestState.__updateDirty) {
				hitTestState.__updateDirty = true;
				hitTestState.__setParentUpdateTraverse();
			}
		}
		return this.__hitTestState = hitTestState;
	}
	,get_overState: function() {
		return this.__overState;
	}
	,set_overState: function(overState) {
		if(this.__overState != null && this.__currentState == this.__overState) {
			this.set___currentState(overState);
		}
		return this.__overState = overState;
	}
	,get_soundTransform: function() {
		if(this.__soundTransform == null) {
			this.__soundTransform = new openfl_media_SoundTransform();
		}
		return new openfl_media_SoundTransform(this.__soundTransform.volume,this.__soundTransform.pan);
	}
	,set_soundTransform: function(value) {
		this.__soundTransform = new openfl_media_SoundTransform(value.volume,value.pan);
		return value;
	}
	,get_upState: function() {
		return this.__upState;
	}
	,set_upState: function(upState) {
		if(this.__upState != null && this.__currentState == this.__upState) {
			this.set___currentState(upState);
		}
		return this.__upState = upState;
	}
	,set___currentState: function(value) {
		if(this.__currentState != null && this.__currentState != this.get_hitTestState()) {
			this.__currentState.__renderParent = null;
		}
		if(value != null && value.parent != null) {
			value.parent.removeChild(value);
		}
		if(value != this.__currentState) {
			if(value != null) {
				value.__renderParent = this;
				if(!value.__renderDirty) {
					value.__renderDirty = true;
					value.__setParentRenderDirty();
				}
				if(!value.__updateDirty) {
					value.__updateDirty = true;
					value.__setParentUpdateTraverse();
				}
			}
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
			if(!this.__updateDirty) {
				this.__updateDirty = true;
				this.__setParentUpdateTraverse();
			}
		}
		this.__currentState = value;
		return value;
	}
	,__this_onMouseDown: function(event) {
		this.set___currentState(this.get_downState());
	}
	,__this_onMouseOut: function(event) {
		this.__ignoreEvent = false;
		if(this.get_upState() != this.__currentState) {
			this.set___currentState(this.get_upState());
		}
	}
	,__this_onMouseOver: function(event) {
		if(event.buttonDown) {
			this.__ignoreEvent = true;
		}
		if(this.get_overState() != this.__currentState && this.get_overState() != null && !this.__ignoreEvent) {
			this.set___currentState(this.get_overState());
		}
	}
	,__this_onMouseUp: function(event) {
		this.__ignoreEvent = false;
		if(this.get_overState() != null) {
			this.set___currentState(this.get_overState());
		} else {
			this.set___currentState(this.get_upState());
		}
	}
	,__class__: openfl_display_SimpleButton
	,__properties__: $extend(openfl_display_InteractiveObject.prototype.__properties__,{set___currentState:"set___currentState",set_upState:"set_upState",get_upState:"get_upState",set_soundTransform:"set_soundTransform",get_soundTransform:"get_soundTransform",set_overState:"set_overState",get_overState:"get_overState",set_hitTestState:"set_hitTestState",get_hitTestState:"get_hitTestState",set_downState:"set_downState",get_downState:"get_downState"})
});
var openfl_display__$SpreadMethod_SpreadMethod_$Impl_$ = {};
$hxClasses["openfl.display._SpreadMethod.SpreadMethod_Impl_"] = openfl_display__$SpreadMethod_SpreadMethod_$Impl_$;
openfl_display__$SpreadMethod_SpreadMethod_$Impl_$.__name__ = "openfl.display._SpreadMethod.SpreadMethod_Impl_";
openfl_display__$SpreadMethod_SpreadMethod_$Impl_$.fromString = function(value) {
	switch(value) {
	case "pad":
		return 0;
	case "reflect":
		return 1;
	case "repeat":
		return 2;
	default:
		return null;
	}
};
openfl_display__$SpreadMethod_SpreadMethod_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 0:
		return "pad";
	case 1:
		return "reflect";
	case 2:
		return "repeat";
	default:
		return null;
	}
};
var openfl_display_Stage = function($window) {
	this.framePeriod = -1;
	this.nextUpdate = 0;
	this.lastUpdate = 0;
	this.currentUpdate = 0;
	this.hasPendingMouseMove = false;
	this.__primaryTouchId = -1;
	openfl_display_DisplayObjectContainer.call(this);
	this.window = $window;
	this.set_color(16777215);
	this.set_name(null);
	this.__contentsScaleFactor = $window.scale;
	this.__displayState = 2;
	this.__mouseX = 0;
	this.__mouseY = 0;
	this.__lastClickTime = 0;
	this.__logicalWidth = 0;
	this.__logicalHeight = 0;
	this.__displayMatrix = new openfl_geom_Matrix();
	this.__renderDirty = true;
	this.__wasFullscreen = $window.__fullscreen;
	this.stage3Ds = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	var this1 = this.stage3Ds;
	var x = new openfl_display_Stage3D();
	this1.data.push(x);
	this.__resize();
	this.stage = this;
	this.align = 6;
	this.allowsFullScreen = false;
	this.allowsFullScreenInteractive = false;
	this.quality = 1;
	this.scaleMode = 2;
	this.showDefaultContextMenu = true;
	this.softKeyboardRect = new openfl_geom_Rectangle();
	this.stageFocusRect = true;
	this.__macKeyboard = /AppleWebKit/.test (navigator.userAgent) && /Mobile\/\w+/.test (navigator.userAgent) || /Mac/.test (navigator.platform);
	this.__stack = [];
	this.__rollOutStack = [];
	this.__mouseOutStack = [];
	this.__touchData = new haxe_ds_IntMap();
	if(openfl_Lib.current.stage == null) {
		this.addChild(openfl_Lib.current);
	}
};
$hxClasses["openfl.display.Stage"] = openfl_display_Stage;
openfl_display_Stage.__name__ = "openfl.display.Stage";
openfl_display_Stage.__super__ = openfl_display_DisplayObjectContainer;
openfl_display_Stage.prototype = $extend(openfl_display_DisplayObjectContainer.prototype,{
	align: null
	,allowsFullScreen: null
	,allowsFullScreenInteractive: null
	,quality: null
	,scaleMode: null
	,showDefaultContextMenu: null
	,softKeyboardRect: null
	,stage3Ds: null
	,stageFocusRect: null
	,stageHeight: null
	,stageWidth: null
	,window: null
	,__cacheFocus: null
	,__color: null
	,__colorKha: null
	,__contentsScaleFactor: null
	,__dirty: null
	,__displayMatrix: null
	,__displayState: null
	,__dragBounds: null
	,__dragObject: null
	,__dragOffsetX: null
	,__dragOffsetY: null
	,__focus: null
	,__fullscreen: null
	,__invalidated: null
	,__lastClickTime: null
	,__logicalWidth: null
	,__logicalHeight: null
	,__macKeyboard: null
	,__mouseDownLeft: null
	,__mouseDownMiddle: null
	,__mouseDownRight: null
	,__mouseOverTarget: null
	,__mouseX: null
	,__mouseY: null
	,__primaryTouchId: null
	,__renderer: null
	,__rendering: null
	,__rollOutStack: null
	,__mouseOutStack: null
	,__stack: null
	,__touchData: null
	,__wasFullscreen: null
	,__start: function() {
		kha_input_Mouse.get().notify($bind(this,this.__onMouseDown),$bind(this,this.__onMouseUp),$bind(this,this.__onMouseMove),$bind(this,this.__onMouseWheel),$bind(this,this.__onMouseLeave));
		kha_input_Surface.get().notify($bind(this,this.__onTouchStart),$bind(this,this.__onTouchEnd),$bind(this,this.__onTouchMove));
		var gamepad = openfl__$internal_ui_Gamepad.devices.iterator();
		while(gamepad.hasNext()) {
			var gamepad1 = gamepad.next();
			this.__onGamepadConnect(gamepad1);
		}
		openfl__$internal_ui_Gamepad.onConnect.add($bind(this,this.__onGamepadConnect));
		this.window.onKeyDown.add($bind(this,this.onKeyDown));
		this.window.onKeyUp.add($bind(this,this.onKeyUp));
		this.__createRenderer();
	}
	,invalidate: function() {
		this.__invalidated = true;
	}
	,localToGlobal: function(pos) {
		return pos.clone();
	}
	,onGamepadAxisMove: function(gamepad,axis,value) {
		try {
			openfl_ui_GameInput.__onGamepadAxisMove(gamepad,axis,value);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if(!this.__handleError(((e) instanceof js__$Boot_HaxeError) ? e.val : e)) {
				throw e;
			}
		}
	}
	,onGamepadButtonDown: function(gamepad,button) {
		try {
			openfl_ui_GameInput.__onGamepadButtonDown(gamepad,button);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if(!this.__handleError(((e) instanceof js__$Boot_HaxeError) ? e.val : e)) {
				throw e;
			}
		}
	}
	,onGamepadButtonUp: function(gamepad,button) {
		try {
			openfl_ui_GameInput.__onGamepadButtonUp(gamepad,button);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if(!this.__handleError(((e) instanceof js__$Boot_HaxeError) ? e.val : e)) {
				throw e;
			}
		}
	}
	,onGamepadConnect: function(gamepad) {
		try {
			openfl_ui_GameInput.__onGamepadConnect(gamepad);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if(!this.__handleError(((e) instanceof js__$Boot_HaxeError) ? e.val : e)) {
				throw e;
			}
		}
	}
	,onGamepadDisconnect: function(gamepad) {
		try {
			openfl_ui_GameInput.__onGamepadDisconnect(gamepad);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if(!this.__handleError(((e) instanceof js__$Boot_HaxeError) ? e.val : e)) {
				throw e;
			}
		}
	}
	,onKeyDown: function(keyCode,modifier) {
		this.__onKey("keyDown",keyCode,modifier);
	}
	,onKeyUp: function(keyCode,modifier) {
		this.__onKey("keyUp",keyCode,modifier);
	}
	,__onMouseDown: function(button,x,y) {
		this.__dispatchPendingMouseMove();
		var type;
		switch(button) {
		case 1:
			type = "rightMouseDown";
			break;
		case 2:
			type = "middleMouseDown";
			break;
		default:
			type = "mouseDown";
		}
		this.__onMouse(type,x,y);
	}
	,__onMouseUp: function(button,x,y) {
		this.__dispatchPendingMouseMove();
		var type;
		switch(button) {
		case 1:
			type = "rightMouseUp";
			break;
		case 2:
			type = "middleMouseUp";
			break;
		default:
			type = "mouseUp";
		}
		this.__onMouse(type,x,y);
	}
	,hasPendingMouseMove: null
	,pendingMouseMoveX: null
	,pendingMouseMoveY: null
	,__onMouseMove: function(x,y,moveX,moveY) {
		this.hasPendingMouseMove = true;
		this.pendingMouseMoveX = x;
		this.pendingMouseMoveY = y;
	}
	,__dispatchPendingMouseMove: function() {
		if(this.hasPendingMouseMove) {
			this.__onMouse("mouseMove",this.pendingMouseMoveX,this.pendingMouseMoveY);
			this.hasPendingMouseMove = false;
		}
	}
	,__onMouseWheel: function(delta) {
		this.__dispatchPendingMouseMove();
		delta = -(delta * this.window.scale | 0);
		if(delta < -3) {
			delta = -3;
		} else if(delta > 3) {
			delta = 3;
		}
		var x = this.__mouseX;
		var y = this.__mouseY;
		var stack = [];
		var target = null;
		if(this.__hitTest(this.__mouseX,this.__mouseY,true,stack,true,this)) {
			target = stack[stack.length - 1];
		} else {
			target = this;
			stack = [this];
		}
		if(target == null) {
			target = this;
		}
		var targetPoint = openfl_geom_Point.__pool.get();
		targetPoint.setTo(x,y);
		var _this = this.__displayMatrix;
		var norm = _this.a * _this.d - _this.b * _this.c;
		if(norm == 0) {
			targetPoint.x = -_this.tx;
			targetPoint.y = -_this.ty;
		} else {
			var px = 1.0 / norm * (_this.c * (_this.ty - targetPoint.y) + _this.d * (targetPoint.x - _this.tx));
			targetPoint.y = 1.0 / norm * (_this.a * (targetPoint.y - _this.ty) + _this.b * (_this.tx - targetPoint.x));
			targetPoint.x = px;
		}
		this.__dispatchStack(openfl_events_MouseEvent.__create("mouseWheel",this.__mouseX,this.__mouseY,target.__globalToLocal(targetPoint,targetPoint),target,delta),stack);
		openfl_geom_Point.__pool.release(targetPoint);
	}
	,__onMouseLeave: function() {
		if(openfl_events_MouseEvent.__buttonDown) {
			return;
		}
		this.__dispatchEvent(new openfl_events_Event("mouseLeave"));
	}
	,onRenderContextLost: function() {
		this.__renderer = null;
		var stage3D = this.stage3Ds.data.iterator();
		while(stage3D.hasNext()) {
			var stage3D1 = stage3D.next();
			stage3D1.__loseContext();
		}
	}
	,onRenderContextRestored: function() {
		openfl__$internal_stage3D_GLCompressedTextureFormats.__instance = null;
		this.__createRenderer();
		this.__forceRenderDirty();
	}
	,__onTouchStart: function(touchId,touchX,touchY) {
		if(this.__primaryTouchId == -1) {
			this.__primaryTouchId = touchId;
		}
		this.__onTouch("touchBegin",touchId,touchX,touchY);
	}
	,__onTouchMove: function(touchId,touchX,touchY) {
		this.__onTouch("touchMove",touchId,touchX,touchY);
	}
	,__onTouchEnd: function(touchId,touchX,touchY) {
		if(this.__primaryTouchId == touchId) {
			this.__primaryTouchId = -1;
		}
		this.__onTouch("touchEnd",touchId,touchX,touchY);
	}
	,onWindowClose: function() {
		this.window = null;
		this.__primaryTouchId = -1;
		this.__broadcastEvent(new openfl_events_Event("deactivate"));
	}
	,onWindowFocusIn: function() {
		this.__renderDirty = true;
		this.__broadcastEvent(new openfl_events_Event("activate"));
		this.set_focus(this.__cacheFocus);
	}
	,onWindowFocusOut: function() {
		this.__primaryTouchId = -1;
		this.__broadcastEvent(new openfl_events_Event("deactivate"));
		var currentFocus = this.get_focus();
		this.set_focus(null);
		this.__cacheFocus = currentFocus;
	}
	,onWindowFullscreen: function() {
		this.__resize();
		if(!this.__wasFullscreen) {
			this.__wasFullscreen = true;
			if(this.__displayState == 2) {
				this.__displayState = 1;
			}
			this.__dispatchEvent(new openfl_events_FullScreenEvent("fullScreen",false,false,true,true));
		}
	}
	,onWindowResize: function(width,height) {
		this.__renderDirty = true;
		this.__resize();
		if(this.__wasFullscreen && !this.window.__fullscreen) {
			this.__wasFullscreen = false;
			this.__displayState = 2;
			this.__dispatchEvent(new openfl_events_FullScreenEvent("fullScreen",false,false,false,true));
		}
	}
	,onWindowRestore: function() {
		if(this.__wasFullscreen && !this.window.__fullscreen) {
			this.__wasFullscreen = false;
			this.__displayState = 2;
			this.__dispatchEvent(new openfl_events_FullScreenEvent("fullScreen",false,false,false,true));
		}
	}
	,__handleFullScreenRestore: function() {
		if(this.__wasFullscreen && !this.window.__fullscreen) {
			this.__wasFullscreen = false;
			this.__displayState = 2;
			this.__dispatchEvent(new openfl_events_FullScreenEvent("fullScreen",false,false,false,true));
		}
	}
	,currentUpdate: null
	,lastUpdate: null
	,nextUpdate: null
	,__onFrame: function(framebuffer) {
		this.currentUpdate = new Date().getTime();
		if(this.currentUpdate >= this.nextUpdate) {
			this.__dispatchPendingMouseMove();
			this.__render(this.currentUpdate - this.lastUpdate | 0);
			this.lastUpdate = this.currentUpdate;
			if(this.framePeriod < 0) {
				this.nextUpdate = this.currentUpdate;
			} else {
				this.nextUpdate = this.currentUpdate - this.currentUpdate % this.framePeriod + this.framePeriod;
			}
		}
		framebuffer.get_g2().begin();
		framebuffer.get_g2().drawImage(this.__renderer.backbuffer,0,0);
		framebuffer.get_g2().end();
	}
	,__render: function(deltaTime) {
		if(this.__rendering) {
			return;
		}
		this.__rendering = true;
		if(this.__renderer != null && (openfl_display_Stage3D.__active || this.stage3Ds.data.get(0).__contextRequested)) {
			this.__renderer.begin();
			this.__renderer.clear();
			this.__renderer.renderStage3D();
			this.__renderDirty = true;
		}
		this.__broadcastEvent(new openfl_events_Event("enterFrame"));
		this.__broadcastEvent(new openfl_events_Event("frameConstructed"));
		this.__broadcastEvent(new openfl_events_Event("exitFrame"));
		if(this.__invalidated) {
			this.__invalidated = false;
			this.__broadcastEvent(new openfl_events_Event("render"));
		}
		this.__renderable = true;
		this.__enterFrame(deltaTime);
		this.__traverse();
		if(this.__renderer != null && this.__renderDirty) {
			if(!openfl_display_Stage3D.__active) {
				this.__renderer.begin();
				this.__renderer.clear();
			}
			this.__renderer.render();
			this.__renderer.end();
		}
		this.__rendering = false;
	}
	,__broadcastEvent: function(event) {
		var key = event.type;
		var _this = openfl_display_DisplayObject.__broadcastEvents;
		if(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key)) {
			var key1 = event.type;
			var _this1 = openfl_display_DisplayObject.__broadcastEvents;
			var dispatchers = __map_reserved[key1] != null ? _this1.getReserved(key1) : _this1.h[key1];
			var _g = 0;
			while(_g < dispatchers.length) {
				var dispatcher = dispatchers[_g];
				++_g;
				if(dispatcher.stage == this || dispatcher.stage == null) {
					try {
						dispatcher.__dispatch(event);
					} catch( e ) {
						haxe_CallStack.lastException = e;
						if(!this.__handleError(((e) instanceof js__$Boot_HaxeError) ? e.val : e)) {
							throw e;
						}
					}
				}
			}
		}
	}
	,__createRenderer: function() {
		this.__renderer = new openfl__$internal_renderer_opengl_GLRenderer(this);
	}
	,__dispatchEvent: function(event) {
		try {
			return openfl_display_DisplayObjectContainer.prototype.__dispatchEvent.call(this,event);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if(!this.__handleError(((e) instanceof js__$Boot_HaxeError) ? e.val : e)) {
				throw e;
			}
			return false;
		}
	}
	,__dispatchStack: function(event,stack) {
		try {
			var target;
			var length = stack.length;
			if(length == 0) {
				event.eventPhase = 2;
				target = event.target;
				target.__dispatch(event);
			} else {
				event.eventPhase = 1;
				event.target = stack[stack.length - 1];
				var _g = 0;
				var _g1 = length - 1;
				while(_g < _g1) {
					var i = _g++;
					stack[i].__dispatch(event);
					if(event.__isCanceled) {
						return;
					}
				}
				event.eventPhase = 2;
				target = event.target;
				target.__dispatch(event);
				if(event.__isCanceled) {
					return;
				}
				if(event.bubbles) {
					event.eventPhase = 3;
					var i1 = length - 2;
					while(i1 >= 0) {
						stack[i1].__dispatch(event);
						if(event.__isCanceled) {
							return;
						}
						--i1;
					}
				}
			}
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if(!this.__handleError(((e) instanceof js__$Boot_HaxeError) ? e.val : e)) {
				throw e;
			}
		}
	}
	,__dispatchTarget: function(target,event) {
		try {
			return target.__dispatchEvent(event);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if(!this.__handleError(((e) instanceof js__$Boot_HaxeError) ? e.val : e)) {
				throw e;
			}
			return false;
		}
	}
	,__drag: function(mouse) {
		var parent = this.__dragObject.parent;
		if(parent != null) {
			var _this = parent.__getWorldTransform();
			var norm = _this.a * _this.d - _this.b * _this.c;
			if(norm == 0) {
				mouse.x = -_this.tx;
				mouse.y = -_this.ty;
			} else {
				var px = 1.0 / norm * (_this.c * (_this.ty - mouse.y) + _this.d * (mouse.x - _this.tx));
				mouse.y = 1.0 / norm * (_this.a * (mouse.y - _this.ty) + _this.b * (_this.tx - mouse.x));
				mouse.x = px;
			}
		}
		var x = mouse.x + this.__dragOffsetX;
		var y = mouse.y + this.__dragOffsetY;
		if(this.__dragBounds != null) {
			if(x < this.__dragBounds.x) {
				x = this.__dragBounds.x;
			} else if(x > this.__dragBounds.get_right()) {
				x = this.__dragBounds.get_right();
			}
			if(y < this.__dragBounds.y) {
				y = this.__dragBounds.y;
			} else if(y > this.__dragBounds.get_bottom()) {
				y = this.__dragBounds.get_bottom();
			}
		}
		this.__dragObject.set_x(x);
		this.__dragObject.set_y(y);
	}
	,__getInteractive: function(stack) {
		if(stack != null) {
			stack.push(this);
		}
		return true;
	}
	,__globalToLocal: function(global,local) {
		if(global != local) {
			local.copyFrom(global);
		}
		return local;
	}
	,__handleError: function(e) {
		var event = new openfl_events_UncaughtErrorEvent("uncaughtError",true,true,e);
		openfl_Lib.current.__loaderInfo.uncaughtErrorEvents.dispatchEvent(event);
		if(!event.__preventDefault) {
			try {
				var exc = haxe_CallStack.lastException;
				if(exc != null && Object.prototype.hasOwnProperty.call(exc,"stack") && exc.stack != null && exc.stack != "") {
					window.console.log(exc.stack);
					e.stack = exc.stack;
				} else {
					window.console.log(haxe_CallStack.toString(haxe_CallStack.callStack()));
				}
			} catch( _ ) {
				haxe_CallStack.lastException = _;
				var _1 = ((_) instanceof js__$Boot_HaxeError) ? _.val : _;
			}
		}
		return event.__preventDefault;
	}
	,__onKey: function(type,keyCode,modifier) {
		this.__dispatchPendingMouseMove();
		openfl_events_MouseEvent.__altKey = openfl__$internal_ui__$KeyModifier_KeyModifier_$Impl_$.get_altKey(modifier);
		openfl_events_MouseEvent.__commandKey = openfl__$internal_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier);
		openfl_events_MouseEvent.__ctrlKey = openfl__$internal_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier);
		openfl_events_MouseEvent.__shiftKey = openfl__$internal_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier);
		var stack = [];
		if(this.__focus == null) {
			this.__getInteractive(stack);
		} else {
			this.__focus.__getInteractive(stack);
		}
		if(stack.length > 0) {
			var keyLocation;
			switch(keyCode) {
			case 1073741908:case 1073741909:case 1073741910:case 1073741911:case 1073741912:case 1073741913:case 1073741914:case 1073741915:case 1073741916:case 1073741917:case 1073741918:case 1073741919:case 1073741920:case 1073741921:case 1073741922:case 1073741923:case 1073742044:
				keyLocation = 3;
				break;
			case 1073742048:case 1073742049:case 1073742050:case 1073742051:
				keyLocation = 1;
				break;
			case 1073742052:case 1073742053:case 1073742054:case 1073742055:
				keyLocation = 2;
				break;
			default:
				keyLocation = 0;
			}
			var keyCode1;
			switch(keyCode) {
			case 8:
				keyCode1 = 8;
				break;
			case 9:
				keyCode1 = 9;
				break;
			case 13:
				keyCode1 = 13;
				break;
			case 27:
				keyCode1 = 27;
				break;
			case 32:
				keyCode1 = 32;
				break;
			case 33:
				keyCode1 = 49;
				break;
			case 34:
				keyCode1 = 222;
				break;
			case 35:
				keyCode1 = 51;
				break;
			case 36:
				keyCode1 = 52;
				break;
			case 37:
				keyCode1 = 53;
				break;
			case 38:
				keyCode1 = 55;
				break;
			case 39:
				keyCode1 = 222;
				break;
			case 40:
				keyCode1 = 57;
				break;
			case 41:
				keyCode1 = 48;
				break;
			case 42:
				keyCode1 = 56;
				break;
			case 44:
				keyCode1 = 188;
				break;
			case 45:
				keyCode1 = 189;
				break;
			case 46:
				keyCode1 = 190;
				break;
			case 47:
				keyCode1 = 191;
				break;
			case 48:
				keyCode1 = 48;
				break;
			case 49:
				keyCode1 = 49;
				break;
			case 50:
				keyCode1 = 50;
				break;
			case 51:
				keyCode1 = 51;
				break;
			case 52:
				keyCode1 = 52;
				break;
			case 53:
				keyCode1 = 53;
				break;
			case 54:
				keyCode1 = 54;
				break;
			case 55:
				keyCode1 = 55;
				break;
			case 56:
				keyCode1 = 56;
				break;
			case 57:
				keyCode1 = 57;
				break;
			case 58:
				keyCode1 = 186;
				break;
			case 59:
				keyCode1 = 186;
				break;
			case 60:
				keyCode1 = 60;
				break;
			case 61:
				keyCode1 = 187;
				break;
			case 62:
				keyCode1 = 190;
				break;
			case 63:
				keyCode1 = 191;
				break;
			case 64:
				keyCode1 = 50;
				break;
			case 91:
				keyCode1 = 219;
				break;
			case 92:
				keyCode1 = 220;
				break;
			case 93:
				keyCode1 = 221;
				break;
			case 94:
				keyCode1 = 54;
				break;
			case 95:
				keyCode1 = 189;
				break;
			case 96:
				keyCode1 = 192;
				break;
			case 97:
				keyCode1 = 65;
				break;
			case 98:
				keyCode1 = 66;
				break;
			case 99:
				keyCode1 = 67;
				break;
			case 100:
				keyCode1 = 68;
				break;
			case 101:
				keyCode1 = 69;
				break;
			case 102:
				keyCode1 = 70;
				break;
			case 103:
				keyCode1 = 71;
				break;
			case 104:
				keyCode1 = 72;
				break;
			case 105:
				keyCode1 = 73;
				break;
			case 106:
				keyCode1 = 74;
				break;
			case 107:
				keyCode1 = 75;
				break;
			case 108:
				keyCode1 = 76;
				break;
			case 109:
				keyCode1 = 77;
				break;
			case 110:
				keyCode1 = 78;
				break;
			case 111:
				keyCode1 = 79;
				break;
			case 112:
				keyCode1 = 80;
				break;
			case 113:
				keyCode1 = 81;
				break;
			case 114:
				keyCode1 = 82;
				break;
			case 115:
				keyCode1 = 83;
				break;
			case 116:
				keyCode1 = 84;
				break;
			case 117:
				keyCode1 = 85;
				break;
			case 118:
				keyCode1 = 86;
				break;
			case 119:
				keyCode1 = 87;
				break;
			case 120:
				keyCode1 = 88;
				break;
			case 121:
				keyCode1 = 89;
				break;
			case 122:
				keyCode1 = 90;
				break;
			case 127:
				keyCode1 = 46;
				break;
			case 1073741881:
				keyCode1 = 20;
				break;
			case 1073741882:
				keyCode1 = 112;
				break;
			case 1073741883:
				keyCode1 = 113;
				break;
			case 1073741884:
				keyCode1 = 114;
				break;
			case 1073741885:
				keyCode1 = 115;
				break;
			case 1073741886:
				keyCode1 = 116;
				break;
			case 1073741887:
				keyCode1 = 117;
				break;
			case 1073741888:
				keyCode1 = 118;
				break;
			case 1073741889:
				keyCode1 = 119;
				break;
			case 1073741890:
				keyCode1 = 120;
				break;
			case 1073741891:
				keyCode1 = 121;
				break;
			case 1073741892:
				keyCode1 = 122;
				break;
			case 1073741893:
				keyCode1 = 123;
				break;
			case 1073741894:
				keyCode1 = 301;
				break;
			case 1073741895:
				keyCode1 = 145;
				break;
			case 1073741896:
				keyCode1 = 19;
				break;
			case 1073741897:
				keyCode1 = 45;
				break;
			case 1073741898:
				keyCode1 = 36;
				break;
			case 1073741899:
				keyCode1 = 33;
				break;
			case 1073741901:
				keyCode1 = 35;
				break;
			case 1073741902:
				keyCode1 = 34;
				break;
			case 1073741903:
				keyCode1 = 39;
				break;
			case 1073741904:
				keyCode1 = 37;
				break;
			case 1073741905:
				keyCode1 = 40;
				break;
			case 1073741906:
				keyCode1 = 38;
				break;
			case 1073741907:
				keyCode1 = 144;
				break;
			case 1073741908:
				keyCode1 = 111;
				break;
			case 1073741909:
				keyCode1 = 106;
				break;
			case 1073741910:
				keyCode1 = 109;
				break;
			case 1073741911:
				keyCode1 = 107;
				break;
			case 1073741912:
				keyCode1 = 108;
				break;
			case 1073741913:
				keyCode1 = 97;
				break;
			case 1073741914:
				keyCode1 = 98;
				break;
			case 1073741915:
				keyCode1 = 99;
				break;
			case 1073741916:
				keyCode1 = 100;
				break;
			case 1073741917:
				keyCode1 = 101;
				break;
			case 1073741918:
				keyCode1 = 102;
				break;
			case 1073741919:
				keyCode1 = 103;
				break;
			case 1073741920:
				keyCode1 = 104;
				break;
			case 1073741921:
				keyCode1 = 105;
				break;
			case 1073741922:
				keyCode1 = 96;
				break;
			case 1073741923:
				keyCode1 = 110;
				break;
			case 1073741925:
				keyCode1 = 302;
				break;
			case 1073741928:
				keyCode1 = 124;
				break;
			case 1073741929:
				keyCode1 = 125;
				break;
			case 1073741930:
				keyCode1 = 126;
				break;
			case 1073741982:
				keyCode1 = 13;
				break;
			case 1073742044:
				keyCode1 = 110;
				break;
			case 1073742048:
				keyCode1 = 17;
				break;
			case 1073742049:
				keyCode1 = 16;
				break;
			case 1073742050:
				keyCode1 = 18;
				break;
			case 1073742051:
				keyCode1 = 15;
				break;
			case 1073742052:
				keyCode1 = 17;
				break;
			case 1073742053:
				keyCode1 = 16;
				break;
			case 1073742054:
				keyCode1 = 18;
				break;
			case 1073742055:
				keyCode1 = 15;
				break;
			default:
				keyCode1 = keyCode;
			}
			var charCode = openfl_ui_Keyboard.__getCharCode(keyCode1,openfl__$internal_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier));
			var event = new openfl_events_KeyboardEvent(type,true,true,charCode,keyCode1,keyLocation,this.__macKeyboard ? openfl__$internal_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier) || openfl__$internal_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier) : openfl__$internal_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier),openfl__$internal_ui__$KeyModifier_KeyModifier_$Impl_$.get_altKey(modifier),openfl__$internal_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier),openfl__$internal_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier),openfl__$internal_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier));
			stack.reverse();
			this.__dispatchStack(event,stack);
			if(event.__preventDefault) {
				if(type == "keyDown") {
					this.window.onKeyDown.cancel();
				} else {
					this.window.onKeyUp.cancel();
				}
			}
		}
	}
	,__onGamepadConnect: function(gamepad) {
		this.onGamepadConnect(gamepad);
		var f = $bind(this,this.onGamepadAxisMove);
		var gamepad1 = gamepad;
		var tmp = function(axis,value) {
			f(gamepad1,axis,value);
		};
		gamepad.onAxisMove.add(tmp);
		var f1 = $bind(this,this.onGamepadButtonDown);
		var gamepad2 = gamepad;
		var tmp1 = function(button) {
			f1(gamepad2,button);
		};
		gamepad.onButtonDown.add(tmp1);
		var f2 = $bind(this,this.onGamepadButtonUp);
		var gamepad3 = gamepad;
		var tmp2 = function(button1) {
			f2(gamepad3,button1);
		};
		gamepad.onButtonUp.add(tmp2);
		var f3 = $bind(this,this.onGamepadDisconnect);
		var gamepad4 = gamepad;
		var tmp3 = function() {
			f3(gamepad4);
		};
		gamepad.onDisconnect.add(tmp3);
	}
	,__onMouse: function(type,x,y) {
		var targetPoint = openfl_geom_Point.__pool.get();
		targetPoint.setTo(x * this.window.scale,y * this.window.scale);
		var _this = this.__displayMatrix;
		var norm = _this.a * _this.d - _this.b * _this.c;
		if(norm == 0) {
			targetPoint.x = -_this.tx;
			targetPoint.y = -_this.ty;
		} else {
			var px = 1.0 / norm * (_this.c * (_this.ty - targetPoint.y) + _this.d * (targetPoint.x - _this.tx));
			targetPoint.y = 1.0 / norm * (_this.a * (targetPoint.y - _this.ty) + _this.b * (_this.tx - targetPoint.x));
			targetPoint.x = px;
		}
		this.__mouseX = targetPoint.x;
		this.__mouseY = targetPoint.y;
		var stack = [];
		var target = null;
		if(this.__hitTest(this.__mouseX,this.__mouseY,true,stack,true,this)) {
			target = stack[stack.length - 1];
		} else {
			target = this;
			stack = [this];
		}
		if(target == null) {
			target = this;
		}
		var clickType = null;
		switch(type) {
		case "middleMouseDown":
			this.__mouseDownMiddle = target;
			break;
		case "middleMouseUp":
			if(this.__mouseDownMiddle == target) {
				clickType = "middleClick";
			}
			this.__mouseDownMiddle = null;
			break;
		case "mouseDown":
			this.__maybeChangeFocus(target);
			this.__mouseDownLeft = target;
			openfl_events_MouseEvent.__buttonDown = true;
			break;
		case "mouseUp":
			if(this.__mouseDownLeft != null) {
				openfl_events_MouseEvent.__buttonDown = false;
				if(this.__mouseX < 0 || this.__mouseY < 0 || this.__mouseX > this.stageWidth || this.__mouseY > this.stageHeight) {
					this.__dispatchEvent(openfl_events_MouseEvent.__create("releaseOutside",this.__mouseX,this.__mouseY,new openfl_geom_Point(this.__mouseX,this.__mouseY),this));
				} else if(this.__mouseDownLeft == target) {
					clickType = "click";
				}
				this.__mouseDownLeft = null;
			}
			break;
		case "rightMouseDown":
			this.__mouseDownRight = target;
			break;
		case "rightMouseUp":
			if(this.__mouseDownRight == target) {
				clickType = "rightClick";
			}
			this.__mouseDownRight = null;
			break;
		default:
		}
		var localPoint = openfl_geom_Point.__pool.get();
		this.__dispatchStack(openfl_events_MouseEvent.__create(type,this.__mouseX,this.__mouseY,target.__globalToLocal(targetPoint,localPoint),target),stack);
		if(clickType != null) {
			this.__dispatchStack(openfl_events_MouseEvent.__create(clickType,this.__mouseX,this.__mouseY,target.__globalToLocal(targetPoint,localPoint),target),stack);
			if(type == "mouseUp" && (js_Boot.__cast(target , openfl_display_InteractiveObject)).doubleClickEnabled) {
				var currentTime = openfl_Lib.getTimer();
				if(currentTime - this.__lastClickTime < 500) {
					this.__dispatchStack(openfl_events_MouseEvent.__create("doubleClick",this.__mouseX,this.__mouseY,target.__globalToLocal(targetPoint,localPoint),target),stack);
					this.__lastClickTime = 0;
				} else {
					this.__lastClickTime = currentTime;
				}
			}
		}
		if(openfl_ui_Mouse.__cursor == "auto") {
			var cursor = null;
			if(this.__mouseDownLeft != null) {
				cursor = this.__mouseDownLeft.__getCursor();
			} else {
				var _g = 0;
				while(_g < stack.length) {
					var target1 = stack[_g];
					++_g;
					cursor = target1.__getCursor();
					if(cursor != null) {
						openfl_ui_InternalMouse.setCursor(cursor);
						break;
					}
				}
			}
			if(cursor == null) {
				openfl_ui_InternalMouse.setCursor("arrow");
			}
		}
		var event;
		if(target != this.__mouseOverTarget) {
			if(this.__mouseOverTarget != null) {
				event = openfl_events_MouseEvent.__create("mouseOut",this.__mouseX,this.__mouseY,this.__mouseOverTarget.__globalToLocal(targetPoint,localPoint),this.__mouseOverTarget);
				this.__dispatchStack(event,this.__mouseOutStack);
			}
		}
		var _g1 = 0;
		var _g11 = this.__rollOutStack;
		while(_g1 < _g11.length) {
			var target2 = _g11[_g1];
			++_g1;
			if(stack.indexOf(target2) == -1) {
				HxOverrides.remove(this.__rollOutStack,target2);
				event = openfl_events_MouseEvent.__create("rollOut",this.__mouseX,this.__mouseY,this.__mouseOverTarget.__globalToLocal(targetPoint,localPoint),this.__mouseOverTarget);
				event.bubbles = false;
				this.__dispatchTarget(target2,event);
			}
		}
		var _g2 = 0;
		while(_g2 < stack.length) {
			var target3 = stack[_g2];
			++_g2;
			if(this.__rollOutStack.indexOf(target3) == -1 && this.__mouseOverTarget != null) {
				if(target3.hasEventListener("rollOver")) {
					event = openfl_events_MouseEvent.__create("rollOver",this.__mouseX,this.__mouseY,this.__mouseOverTarget.__globalToLocal(targetPoint,localPoint),target3);
					event.bubbles = false;
					this.__dispatchTarget(target3,event);
				}
				if(target3.hasEventListener("rollOut")) {
					this.__rollOutStack.push(target3);
				}
			}
		}
		if(target != this.__mouseOverTarget) {
			if(target != null) {
				event = openfl_events_MouseEvent.__create("mouseOver",this.__mouseX,this.__mouseY,target.__globalToLocal(targetPoint,localPoint),target);
				this.__dispatchStack(event,stack);
			}
			this.__mouseOverTarget = target;
			this.__mouseOutStack = stack;
		}
		if(this.__dragObject != null) {
			this.__drag(targetPoint);
			var dropTarget = null;
			if(this.__mouseOverTarget == this.__dragObject) {
				var cacheMouseEnabled = this.__dragObject.mouseEnabled;
				var cacheMouseChildren = this.__dragObject.mouseChildren;
				this.__dragObject.mouseEnabled = false;
				this.__dragObject.mouseChildren = false;
				var stack1 = [];
				if(this.__hitTest(this.__mouseX,this.__mouseY,true,stack1,true,this)) {
					dropTarget = stack1[stack1.length - 1];
				}
				this.__dragObject.mouseEnabled = cacheMouseEnabled;
				this.__dragObject.mouseChildren = cacheMouseChildren;
			} else if(this.__mouseOverTarget != this) {
				dropTarget = this.__mouseOverTarget;
			}
			this.__dragObject.dropTarget = dropTarget;
		}
		openfl_geom_Point.__pool.release(targetPoint);
		openfl_geom_Point.__pool.release(localPoint);
	}
	,__maybeChangeFocus: function(target) {
		var currentFocus = this.__focus;
		var newFocus = target.__allowMouseFocus() ? target : null;
		if(currentFocus != newFocus) {
			if(currentFocus != null) {
				var event = new openfl_events_FocusEvent("mouseFocusChange",true,true,target,false,0);
				currentFocus.dispatchEvent(event);
				if(event.isDefaultPrevented()) {
					return;
				}
			}
			this.set_focus(newFocus);
		}
	}
	,__onTouch: function(type,touchId,touchX,touchY) {
		var targetPoint = openfl_geom_Point.__pool.get();
		targetPoint.setTo(Math.round(touchX * this.window.scale),Math.round(touchY * this.window.scale));
		var _this = this.__displayMatrix;
		var norm = _this.a * _this.d - _this.b * _this.c;
		if(norm == 0) {
			targetPoint.x = -_this.tx;
			targetPoint.y = -_this.ty;
		} else {
			var px = 1.0 / norm * (_this.c * (_this.ty - targetPoint.y) + _this.d * (targetPoint.x - _this.tx));
			targetPoint.y = 1.0 / norm * (_this.a * (targetPoint.y - _this.ty) + _this.b * (_this.tx - targetPoint.x));
			targetPoint.x = px;
		}
		var touchX1 = targetPoint.x;
		var touchY1 = targetPoint.y;
		var stack = [];
		var target = null;
		if(this.__hitTest(touchX1,touchY1,false,stack,true,this)) {
			target = stack[stack.length - 1];
		} else {
			target = this;
			stack = [this];
		}
		if(target == null) {
			target = this;
		}
		var touchData;
		if(this.__touchData.h.hasOwnProperty(touchId)) {
			touchData = this.__touchData.h[touchId];
		} else {
			touchData = openfl_display__$Stage_TouchData.__pool.get();
			this.__touchData.h[touchId] = touchData;
		}
		var touchType = null;
		var releaseTouchData = false;
		switch(type) {
		case "touchBegin":
			touchData.touchDownTarget = target;
			break;
		case "touchEnd":
			if(touchData.touchDownTarget == target) {
				touchType = "touchTap";
			}
			touchData.touchDownTarget = null;
			releaseTouchData = true;
			break;
		default:
		}
		var localPoint = openfl_geom_Point.__pool.get();
		var isPrimaryTouchPoint = this.__primaryTouchId == touchId;
		var touchEvent = openfl_events_TouchEvent.__create(type,touchX1,touchY1,target.__globalToLocal(targetPoint,localPoint),target);
		touchEvent.touchPointID = touchId;
		touchEvent.isPrimaryTouchPoint = isPrimaryTouchPoint;
		this.__dispatchStack(touchEvent,stack);
		if(touchType != null) {
			touchEvent = openfl_events_TouchEvent.__create(touchType,touchX1,touchY1,target.__globalToLocal(targetPoint,localPoint),target);
			touchEvent.touchPointID = touchId;
			touchEvent.isPrimaryTouchPoint = isPrimaryTouchPoint;
			this.__dispatchStack(touchEvent,stack);
		}
		var touchOverTarget = touchData.touchOverTarget;
		if(target != touchOverTarget && touchOverTarget != null) {
			touchEvent = openfl_events_TouchEvent.__create("touchOut",touchX1,touchY1,touchOverTarget.__globalToLocal(targetPoint,localPoint),touchOverTarget);
			touchEvent.touchPointID = touchId;
			touchEvent.isPrimaryTouchPoint = isPrimaryTouchPoint;
			this.__dispatchTarget(touchOverTarget,touchEvent);
		}
		var touchOutStack = touchData.rollOutStack;
		var _g = 0;
		while(_g < touchOutStack.length) {
			var target1 = touchOutStack[_g];
			++_g;
			if(stack.indexOf(target1) == -1) {
				HxOverrides.remove(touchOutStack,target1);
				touchEvent = openfl_events_TouchEvent.__create("touchRollOut",touchX1,touchY1,touchOverTarget.__globalToLocal(targetPoint,localPoint),touchOverTarget);
				touchEvent.touchPointID = touchId;
				touchEvent.isPrimaryTouchPoint = isPrimaryTouchPoint;
				touchEvent.bubbles = false;
				this.__dispatchTarget(target1,touchEvent);
			}
		}
		var _g1 = 0;
		while(_g1 < stack.length) {
			var target2 = stack[_g1];
			++_g1;
			if(touchOutStack.indexOf(target2) == -1) {
				if(target2.hasEventListener("touchRollOver")) {
					touchEvent = openfl_events_TouchEvent.__create("touchRollOver",touchX1,touchY1,touchOverTarget.__globalToLocal(targetPoint,localPoint),target2);
					touchEvent.touchPointID = touchId;
					touchEvent.isPrimaryTouchPoint = isPrimaryTouchPoint;
					touchEvent.bubbles = false;
					this.__dispatchTarget(target2,touchEvent);
				}
				if(target2.hasEventListener("touchRollOut")) {
					touchOutStack.push(target2);
				}
			}
		}
		if(target != touchOverTarget) {
			if(target != null) {
				touchEvent = openfl_events_TouchEvent.__create("touchOver",touchX1,touchY1,target.__globalToLocal(targetPoint,localPoint),target);
				touchEvent.touchPointID = touchId;
				touchEvent.isPrimaryTouchPoint = isPrimaryTouchPoint;
				touchEvent.bubbles = true;
				this.__dispatchTarget(target,touchEvent);
			}
			touchData.touchOverTarget = target;
		}
		openfl_geom_Point.__pool.release(targetPoint);
		openfl_geom_Point.__pool.release(localPoint);
		if(releaseTouchData) {
			this.__touchData.remove(touchId);
			touchData.reset();
			openfl_display__$Stage_TouchData.__pool.release(touchData);
		}
	}
	,__resize: function() {
		var cacheWidth = this.stageWidth;
		var cacheHeight = this.stageHeight;
		var windowWidth = this.window.width * this.window.scale | 0;
		var windowHeight = this.window.height * this.window.scale | 0;
		this.__logicalWidth = this.window.width;
		this.__logicalHeight = this.window.height;
		this.__displayMatrix.identity();
		if(this.__logicalWidth == 0 && this.__logicalHeight == 0) {
			this.stageWidth = windowWidth;
			this.stageHeight = windowHeight;
		} else {
			this.stageWidth = this.__logicalWidth;
			this.stageHeight = this.__logicalHeight;
			var scaleX = windowWidth / this.stageWidth;
			var scaleY = windowHeight / this.stageHeight;
			var targetScale = Math.min(scaleX,scaleY);
			var offsetX = Math.round((windowWidth - this.stageWidth * targetScale) / 2);
			var offsetY = Math.round((windowHeight - this.stageHeight * targetScale) / 2);
			this.__displayMatrix.scale(targetScale,targetScale);
			this.__displayMatrix.translate(offsetX,offsetY);
		}
		if(this.__renderer != null) {
			this.__renderer.resize(windowWidth,windowHeight);
		}
		if(this.stageWidth != cacheWidth || this.stageHeight != cacheHeight) {
			this.__dispatchEvent(new openfl_events_Event("resize"));
		}
		if(this.__contentsScaleFactor != this.window.scale && this.__renderer != null) {
			this.__contentsScaleFactor = this.window.scale;
			this.__renderer.renderSession.pixelRatio = this.window.scale;
			this.__forceRenderDirty();
		}
	}
	,__startDrag: function(sprite,lockCenter,bounds) {
		if(bounds == null) {
			this.__dragBounds = null;
		} else {
			this.__dragBounds = new openfl_geom_Rectangle();
			var right = bounds.get_right();
			var bottom = bounds.get_bottom();
			this.__dragBounds.x = right < bounds.x ? right : bounds.x;
			this.__dragBounds.y = bottom < bounds.y ? bottom : bounds.y;
			this.__dragBounds.width = Math.abs(bounds.width);
			this.__dragBounds.height = Math.abs(bounds.height);
		}
		this.__dragObject = sprite;
		if(this.__dragObject != null) {
			if(lockCenter) {
				this.__dragOffsetX = 0;
				this.__dragOffsetY = 0;
			} else {
				var mouse = openfl_geom_Point.__pool.get();
				mouse.setTo(this.get_mouseX(),this.get_mouseY());
				var parent = this.__dragObject.parent;
				if(parent != null) {
					var _this = parent.__getWorldTransform();
					var norm = _this.a * _this.d - _this.b * _this.c;
					if(norm == 0) {
						mouse.x = -_this.tx;
						mouse.y = -_this.ty;
					} else {
						var px = 1.0 / norm * (_this.c * (_this.ty - mouse.y) + _this.d * (mouse.x - _this.tx));
						mouse.y = 1.0 / norm * (_this.a * (mouse.y - _this.ty) + _this.b * (_this.tx - mouse.x));
						mouse.x = px;
					}
				}
				this.__dragOffsetX = this.__dragObject.get_x() - mouse.x;
				this.__dragOffsetY = this.__dragObject.get_y() - mouse.y;
				openfl_geom_Point.__pool.release(mouse);
			}
		}
	}
	,__stopDrag: function(sprite) {
		this.__dragBounds = null;
		this.__dragObject = null;
	}
	,__update: function(transformOnly,updateChildren,resetUpdateDirty) {
		if(resetUpdateDirty == null) {
			resetUpdateDirty = false;
		}
		if(transformOnly) {
			if(this.__transformDirty) {
				openfl_display_DisplayObjectContainer.prototype.__update.call(this,true,updateChildren,resetUpdateDirty);
				if(updateChildren) {
					this.__transformDirty = false;
				}
			}
		} else if(this.__transformDirty || this.__renderDirty) {
			openfl_display_DisplayObjectContainer.prototype.__update.call(this,false,updateChildren,resetUpdateDirty);
			var updateChildren1 = updateChildren;
		}
	}
	,get_color: function() {
		return this.__color;
	}
	,set_color: function(value) {
		if(value == null) {
			this.__colorKha = 0;
		} else {
			var r = (value & 16711680) >>> 16;
			var g = (value & 65280) >>> 8;
			var b = value & 255;
			this.__colorKha = kha__$Color_Color_$Impl_$.fromBytes(r,g,b);
		}
		return this.__color = value;
	}
	,get_contentsScaleFactor: function() {
		return this.__contentsScaleFactor;
	}
	,get_displayState: function() {
		return this.__displayState;
	}
	,set_displayState: function(value) {
		if(value == 2) {
			if(this.window.__fullscreen) {
				this.window.set_fullscreen(false);
			}
		} else if(!this.window.__fullscreen) {
			this.window.set_fullscreen(true);
		}
		return this.__displayState = value;
	}
	,get_focus: function() {
		return this.__focus;
	}
	,set_focus: function(value) {
		if(value != this.__focus) {
			var oldFocus = this.__focus;
			this.__focus = value;
			this.__cacheFocus = value;
			if(oldFocus != null) {
				var event = new openfl_events_FocusEvent("focusOut",true,false,value,false,0);
				var stack = [];
				oldFocus.__getInteractive(stack);
				stack.reverse();
				this.__dispatchStack(event,stack);
			}
			if(value != null) {
				var event1 = new openfl_events_FocusEvent("focusIn",true,false,oldFocus,false,0);
				var stack1 = [];
				value.__getInteractive(stack1);
				stack1.reverse();
				this.__dispatchStack(event1,stack1);
			}
		}
		return value;
	}
	,framePeriod: null
	,get_frameRate: function() {
		if(this.framePeriod < 0) {
			return 60;
		} else if(this.framePeriod == 1000) {
			return 0;
		} else {
			return 1000 / this.framePeriod;
		}
	}
	,set_frameRate: function(value) {
		if(value >= 60) {
			this.framePeriod = -1;
		} else if(value > 0) {
			this.framePeriod = 1000 / value;
		} else {
			this.framePeriod = 1000;
		}
		return value;
	}
	,get_fullScreenHeight: function() {
		return kha_Display.get_primary().get_height();
	}
	,get_fullScreenWidth: function() {
		return kha_Display.get_primary().get_width();
	}
	,set_height: function(value) {
		return this.get_height();
	}
	,get_mouseX: function() {
		return this.__mouseX;
	}
	,get_mouseY: function() {
		return this.__mouseY;
	}
	,set_rotation: function(value) {
		return 0;
	}
	,set_scaleX: function(value) {
		return 0;
	}
	,set_scaleY: function(value) {
		return 0;
	}
	,set_transform: function(value) {
		return this.get_transform();
	}
	,set_width: function(value) {
		return this.get_width();
	}
	,set_x: function(value) {
		return 0;
	}
	,set_y: function(value) {
		return 0;
	}
	,__class__: openfl_display_Stage
	,__properties__: $extend(openfl_display_DisplayObjectContainer.prototype.__properties__,{get_fullScreenWidth:"get_fullScreenWidth",get_fullScreenHeight:"get_fullScreenHeight",set_frameRate:"set_frameRate",get_frameRate:"get_frameRate",set_focus:"set_focus",get_focus:"get_focus",set_displayState:"set_displayState",get_displayState:"get_displayState",get_contentsScaleFactor:"get_contentsScaleFactor",set_color:"set_color",get_color:"get_color"})
});
var openfl_display__$Stage_TouchData = function() {
	this.rollOutStack = [];
};
$hxClasses["openfl.display._Stage.TouchData"] = openfl_display__$Stage_TouchData;
openfl_display__$Stage_TouchData.__name__ = "openfl.display._Stage.TouchData";
openfl_display__$Stage_TouchData.prototype = {
	rollOutStack: null
	,touchDownTarget: null
	,touchOverTarget: null
	,reset: function() {
		this.touchDownTarget = null;
		this.touchOverTarget = null;
		this.rollOutStack.length = 0;
	}
	,__class__: openfl_display__$Stage_TouchData
};
var openfl_display_Stage3D = function() {
	openfl_events_EventDispatcher.call(this);
	this.__x = 0;
	this.__y = 0;
	this.visible = true;
};
$hxClasses["openfl.display.Stage3D"] = openfl_display_Stage3D;
openfl_display_Stage3D.__name__ = "openfl.display.Stage3D";
openfl_display_Stage3D.__super__ = openfl_events_EventDispatcher;
openfl_display_Stage3D.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	context3D: null
	,visible: null
	,__contextRequested: null
	,__stage: null
	,__x: null
	,__y: null
	,requestContext3D: function(context3DRenderMode,profile) {
		if(profile == null) {
			profile = 0;
		}
		if(context3DRenderMode == null) {
			context3DRenderMode = 0;
		}
		this.__contextRequested = true;
		if(this.context3D != null) {
			haxe_Timer.delay($bind(this,this.__dispatchCreate),1);
		}
	}
	,requestContext3DMatchingProfiles: function(profiles) {
		this.requestContext3D();
	}
	,__createContext: function(stage,renderSession) {
		this.__stage = stage;
		this.context3D = new openfl_display3D_Context3D(this,renderSession);
		this.__dispatchCreate();
	}
	,__dispatchError: function() {
		this.__contextRequested = false;
		this.dispatchEvent(new openfl_events_ErrorEvent("error",false,false,"Context3D not available"));
	}
	,__dispatchCreate: function() {
		if(this.__contextRequested) {
			this.__contextRequested = false;
			this.dispatchEvent(new openfl_events_Event("context3DCreate"));
		}
	}
	,__renderGL: function(stage,renderSession) {
		if(!this.visible) {
			return;
		}
		if(this.__contextRequested && this.context3D == null) {
			this.__createContext(stage,renderSession);
		}
		if(this.context3D != null) {
			this.context3D.__updateBackbufferViewport();
			if(this.context3D.__program != null) {
				this.context3D.__program.__use();
			}
		}
	}
	,__loseContext: function() {
		if(this.context3D != null) {
			this.__contextRequested = true;
		}
		this.context3D = null;
	}
	,get_x: function() {
		return this.__x;
	}
	,set_x: function(value) {
		if(this.__x == value) {
			return value;
		}
		this.__x = value;
		if(this.context3D != null) {
			this.context3D.__updateBackbufferViewport();
		}
		return value;
	}
	,get_y: function() {
		return this.__y;
	}
	,set_y: function(value) {
		if(this.__y == value) {
			return value;
		}
		this.__y = value;
		if(this.context3D != null) {
			this.context3D.__updateBackbufferViewport();
		}
		return value;
	}
	,__class__: openfl_display_Stage3D
	,__properties__: {set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x"}
});
var openfl_display__$StageAlign_StageAlign_$Impl_$ = {};
$hxClasses["openfl.display._StageAlign.StageAlign_Impl_"] = openfl_display__$StageAlign_StageAlign_$Impl_$;
openfl_display__$StageAlign_StageAlign_$Impl_$.__name__ = "openfl.display._StageAlign.StageAlign_Impl_";
openfl_display__$StageAlign_StageAlign_$Impl_$.fromString = function(value) {
	switch(value) {
	case "bottom":
		return 0;
	case "bottomLeft":
		return 1;
	case "bottomRight":
		return 2;
	case "left":
		return 3;
	case "right":
		return 4;
	case "top":
		return 5;
	case "topLeft":
		return 6;
	case "topRight":
		return 7;
	default:
		return null;
	}
};
openfl_display__$StageAlign_StageAlign_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 0:
		return "bottom";
	case 1:
		return "bottomLeft";
	case 2:
		return "bottomRight";
	case 3:
		return "left";
	case 4:
		return "right";
	case 5:
		return "top";
	case 6:
		return "topLeft";
	case 7:
		return "topRight";
	default:
		return null;
	}
};
var openfl_display__$StageDisplayState_StageDisplayState_$Impl_$ = {};
$hxClasses["openfl.display._StageDisplayState.StageDisplayState_Impl_"] = openfl_display__$StageDisplayState_StageDisplayState_$Impl_$;
openfl_display__$StageDisplayState_StageDisplayState_$Impl_$.__name__ = "openfl.display._StageDisplayState.StageDisplayState_Impl_";
openfl_display__$StageDisplayState_StageDisplayState_$Impl_$.fromString = function(value) {
	switch(value) {
	case "fullScreen":
		return 0;
	case "fullScreenInteractive":
		return 1;
	case "normal":
		return 2;
	default:
		return null;
	}
};
openfl_display__$StageDisplayState_StageDisplayState_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 0:
		return "fullScreen";
	case 1:
		return "fullScreenInteractive";
	case 2:
		return "normal";
	default:
		return null;
	}
};
var openfl_display__$StageQuality_StageQuality_$Impl_$ = {};
$hxClasses["openfl.display._StageQuality.StageQuality_Impl_"] = openfl_display__$StageQuality_StageQuality_$Impl_$;
openfl_display__$StageQuality_StageQuality_$Impl_$.__name__ = "openfl.display._StageQuality.StageQuality_Impl_";
openfl_display__$StageQuality_StageQuality_$Impl_$.fromString = function(value) {
	switch(value) {
	case "best":
		return 0;
	case "high":
		return 1;
	case "low":
		return 2;
	case "medium":
		return 3;
	default:
		return null;
	}
};
openfl_display__$StageQuality_StageQuality_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 0:
		return "best";
	case 1:
		return "high";
	case 2:
		return "low";
	case 3:
		return "medium";
	default:
		return null;
	}
};
var openfl_display__$StageScaleMode_StageScaleMode_$Impl_$ = {};
$hxClasses["openfl.display._StageScaleMode.StageScaleMode_Impl_"] = openfl_display__$StageScaleMode_StageScaleMode_$Impl_$;
openfl_display__$StageScaleMode_StageScaleMode_$Impl_$.__name__ = "openfl.display._StageScaleMode.StageScaleMode_Impl_";
openfl_display__$StageScaleMode_StageScaleMode_$Impl_$.fromString = function(value) {
	switch(value) {
	case "exactFit":
		return 0;
	case "noBorder":
		return 1;
	case "noScale":
		return 2;
	case "showAll":
		return 3;
	default:
		return null;
	}
};
openfl_display__$StageScaleMode_StageScaleMode_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 0:
		return "exactFit";
	case 1:
		return "noBorder";
	case 2:
		return "noScale";
	case 3:
		return "showAll";
	default:
		return null;
	}
};
var openfl_geom_Matrix = function(a,b,c,d,tx,ty) {
	if(ty == null) {
		ty = 0;
	}
	if(tx == null) {
		tx = 0;
	}
	if(d == null) {
		d = 1;
	}
	if(c == null) {
		c = 0;
	}
	if(b == null) {
		b = 0;
	}
	if(a == null) {
		a = 1;
	}
	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;
	this.tx = tx;
	this.ty = ty;
};
$hxClasses["openfl.geom.Matrix"] = openfl_geom_Matrix;
openfl_geom_Matrix.__name__ = "openfl.geom.Matrix";
openfl_geom_Matrix.prototype = {
	a: null
	,b: null
	,c: null
	,d: null
	,tx: null
	,ty: null
	,clone: function() {
		return new openfl_geom_Matrix(this.a,this.b,this.c,this.d,this.tx,this.ty);
	}
	,concat: function(m) {
		var a1 = this.a * m.a + this.b * m.c;
		this.b = this.a * m.b + this.b * m.d;
		this.a = a1;
		var c1 = this.c * m.a + this.d * m.c;
		this.d = this.c * m.b + this.d * m.d;
		this.c = c1;
		var tx1 = this.tx * m.a + this.ty * m.c + m.tx;
		this.ty = this.tx * m.b + this.ty * m.d + m.ty;
		this.tx = tx1;
	}
	,copyColumnFrom: function(column,vector3D) {
		if(column > 2) {
			throw new js__$Boot_HaxeError("Column " + column + " out of bounds (2)");
		} else if(column == 0) {
			this.a = vector3D.x;
			this.c = vector3D.y;
		} else if(column == 1) {
			this.b = vector3D.x;
			this.d = vector3D.y;
		} else {
			this.tx = vector3D.x;
			this.ty = vector3D.y;
		}
	}
	,copyColumnTo: function(column,vector3D) {
		if(column > 2) {
			throw new js__$Boot_HaxeError("Column " + column + " out of bounds (2)");
		} else if(column == 0) {
			vector3D.x = this.a;
			vector3D.y = this.c;
			vector3D.z = 0;
		} else if(column == 1) {
			vector3D.x = this.b;
			vector3D.y = this.d;
			vector3D.z = 0;
		} else {
			vector3D.x = this.tx;
			vector3D.y = this.ty;
			vector3D.z = 1;
		}
	}
	,copyFrom: function(sourceMatrix) {
		this.a = sourceMatrix.a;
		this.b = sourceMatrix.b;
		this.c = sourceMatrix.c;
		this.d = sourceMatrix.d;
		this.tx = sourceMatrix.tx;
		this.ty = sourceMatrix.ty;
	}
	,copyRowFrom: function(row,vector3D) {
		if(row > 2) {
			throw new js__$Boot_HaxeError("Row " + row + " out of bounds (2)");
		} else if(row == 0) {
			this.a = vector3D.x;
			this.c = vector3D.y;
		} else if(row == 1) {
			this.b = vector3D.x;
			this.d = vector3D.y;
		} else {
			this.tx = vector3D.x;
			this.ty = vector3D.y;
		}
	}
	,copyRowTo: function(row,vector3D) {
		if(row > 2) {
			throw new js__$Boot_HaxeError("Row " + row + " out of bounds (2)");
		} else if(row == 0) {
			vector3D.x = this.a;
			vector3D.y = this.b;
			vector3D.z = this.tx;
		} else if(row == 1) {
			vector3D.x = this.c;
			vector3D.y = this.d;
			vector3D.z = this.ty;
		} else {
			vector3D.setTo(0,0,1);
		}
	}
	,createBox: function(scaleX,scaleY,rotation,tx,ty) {
		if(ty == null) {
			ty = 0;
		}
		if(tx == null) {
			tx = 0;
		}
		if(rotation == null) {
			rotation = 0;
		}
		if(rotation != 0) {
			var cos = Math.cos(rotation);
			var sin = Math.sin(rotation);
			this.a = cos * scaleX;
			this.b = sin * scaleY;
			this.c = -sin * scaleX;
			this.d = cos * scaleY;
		} else {
			this.a = scaleX;
			this.b = 0;
			this.c = 0;
			this.d = scaleY;
		}
		this.tx = tx;
		this.ty = ty;
	}
	,createGradientBox: function(width,height,rotation,tx,ty) {
		if(ty == null) {
			ty = 0;
		}
		if(tx == null) {
			tx = 0;
		}
		if(rotation == null) {
			rotation = 0;
		}
		this.a = width / 1638.4;
		this.d = height / 1638.4;
		if(rotation != 0) {
			var cos = Math.cos(rotation);
			var sin = Math.sin(rotation);
			this.b = sin * this.d;
			this.c = -sin * this.a;
			this.a *= cos;
			this.d *= cos;
		} else {
			this.b = 0;
			this.c = 0;
		}
		this.tx = tx + width / 2;
		this.ty = ty + height / 2;
	}
	,deltaTransformPoint: function(point) {
		return new openfl_geom_Point(point.x * this.a + point.y * this.c,point.x * this.b + point.y * this.d);
	}
	,equals: function(matrix) {
		if(matrix != null && this.tx == matrix.tx && this.ty == matrix.ty && this.a == matrix.a && this.b == matrix.b && this.c == matrix.c) {
			return this.d == matrix.d;
		} else {
			return false;
		}
	}
	,identity: function() {
		this.a = 1;
		this.b = 0;
		this.c = 0;
		this.d = 1;
		this.tx = 0;
		this.ty = 0;
	}
	,invert: function() {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			this.a = this.b = this.c = this.d = 0;
			this.tx = -this.tx;
			this.ty = -this.ty;
		} else {
			norm = 1.0 / norm;
			var a1 = this.d * norm;
			this.d = this.a * norm;
			this.a = a1;
			this.b *= -norm;
			this.c *= -norm;
			var tx1 = -this.a * this.tx - this.c * this.ty;
			this.ty = -this.b * this.tx - this.d * this.ty;
			this.tx = tx1;
		}
		return this;
	}
	,rotate: function(theta) {
		var cos = Math.cos(theta);
		var sin = Math.sin(theta);
		var a1 = this.a * cos - this.b * sin;
		this.b = this.a * sin + this.b * cos;
		this.a = a1;
		var c1 = this.c * cos - this.d * sin;
		this.d = this.c * sin + this.d * cos;
		this.c = c1;
		var tx1 = this.tx * cos - this.ty * sin;
		this.ty = this.tx * sin + this.ty * cos;
		this.tx = tx1;
	}
	,scale: function(sx,sy) {
		this.a *= sx;
		this.b *= sy;
		this.c *= sx;
		this.d *= sy;
		this.tx *= sx;
		this.ty *= sy;
	}
	,setRotation: function(theta,scale) {
		if(scale == null) {
			scale = 1;
		}
		this.a = Math.cos(theta) * scale;
		this.c = Math.sin(theta) * scale;
		this.b = -this.c;
		this.d = this.a;
	}
	,setTo: function(a,b,c,d,tx,ty) {
		this.a = a;
		this.b = b;
		this.c = c;
		this.d = d;
		this.tx = tx;
		this.ty = ty;
	}
	,to3DString: function(roundPixels) {
		if(roundPixels == null) {
			roundPixels = false;
		}
		if(roundPixels) {
			return "matrix3d(" + this.a + ", " + this.b + ", 0, 0, " + this.c + ", " + this.d + ", 0, 0, 0, 0, 1, 0, " + (this.tx | 0) + ", " + (this.ty | 0) + ", 0, 1)";
		} else {
			return "matrix3d(" + this.a + ", " + this.b + ", 0, 0, " + this.c + ", " + this.d + ", 0, 0, 0, 0, 1, 0, " + this.tx + ", " + this.ty + ", 0, 1)";
		}
	}
	,toMozString: function() {
		return "matrix(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + "px, " + this.ty + "px)";
	}
	,toString: function() {
		return "matrix(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + ", " + this.ty + ")";
	}
	,transformPoint: function(pos) {
		return new openfl_geom_Point(pos.x * this.a + pos.y * this.c + this.tx,pos.x * this.b + pos.y * this.d + this.ty);
	}
	,translate: function(dx,dy) {
		this.tx += dx;
		this.ty += dy;
	}
	,__transformInversePoint: function(point) {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			point.x = -this.tx;
			point.y = -this.ty;
		} else {
			var px = 1.0 / norm * (this.c * (this.ty - point.y) + this.d * (point.x - this.tx));
			point.y = 1.0 / norm * (this.a * (point.y - this.ty) + this.b * (this.tx - point.x));
			point.x = px;
		}
	}
	,__transformInverseX: function(px,py) {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			return -this.tx;
		} else {
			return 1.0 / norm * (this.c * (this.ty - py) + this.d * (px - this.tx));
		}
	}
	,__transformInverseY: function(px,py) {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			return -this.ty;
		} else {
			return 1.0 / norm * (this.a * (py - this.ty) + this.b * (this.tx - px));
		}
	}
	,__transformPoint: function(point) {
		var px = point.x;
		var py = point.y;
		point.x = px * this.a + py * this.c + this.tx;
		point.y = px * this.b + py * this.d + this.ty;
	}
	,__transformX: function(px,py) {
		return px * this.a + py * this.c + this.tx;
	}
	,__transformY: function(px,py) {
		return px * this.b + py * this.d + this.ty;
	}
	,__translateTransformed: function(px,py) {
		this.tx = px * this.a + py * this.c + this.tx;
		this.ty = px * this.b + py * this.d + this.ty;
	}
	,__class__: openfl_geom_Matrix
};
var openfl_display_SubBitmapData = function(atlasBitmap,x,y,width,height,frameX,frameY,frameWidth,frameHeight,rotated) {
	this.__rotated = false;
	this.__texY1 = 1.0;
	this.__texY0 = 0.0;
	this.__texX1 = 1.0;
	this.__texX0 = 0.0;
	this.__offsetY = 0;
	this.__offsetX = 0;
	var w = width;
	var h = height;
	var offsetX = 0;
	var offsetY = 0;
	if(frameWidth > 0 && frameHeight > 0) {
		offsetX = -frameX;
		offsetY = -frameY;
		w = frameWidth;
		h = frameHeight;
	} else if(rotated) {
		var tmp = w;
		w = h;
		h = tmp;
	}
	openfl_display_BitmapData.call(this,0,0,false,0);
	this.width = w;
	this.height = h;
	this.rect = new openfl_geom_Rectangle(0,0,w,h);
	this.__isValid = true;
	this.__readable = false;
	this.image = null;
	this.__parentBitmap = atlasBitmap;
	this.__texX0 = x / atlasBitmap.width;
	this.__texX1 = (x + width) / atlasBitmap.width;
	this.__texY0 = y / atlasBitmap.height;
	this.__texY1 = (y + height) / atlasBitmap.height;
	this.__texX = x;
	this.__texY = y;
	this.__texWidth = width;
	this.__texHeight = height;
	this.__offsetX = offsetX;
	this.__offsetY = offsetY;
	this.__rotated = rotated;
};
$hxClasses["openfl.display.SubBitmapData"] = openfl_display_SubBitmapData;
openfl_display_SubBitmapData.__name__ = "openfl.display.SubBitmapData";
openfl_display_SubBitmapData.__super__ = openfl_display_BitmapData;
openfl_display_SubBitmapData.prototype = $extend(openfl_display_BitmapData.prototype,{
	__offsetX: null
	,__offsetY: null
	,__texX0: null
	,__texX1: null
	,__texY0: null
	,__texY1: null
	,__texX: null
	,__texY: null
	,__texWidth: null
	,__texHeight: null
	,__parentBitmap: null
	,__rotated: null
	,clone: function() {
		return new openfl_display_SubBitmapData(this.__parentBitmap,this.__texX,this.__texY,this.__texWidth,this.__texHeight,-this.__offsetX,-this.__offsetY,this.width,this.height,this.__rotated);
	}
	,unsupported: function() {
		var message = "SubBitmapData does not support modification methods, please create a normal BitmapData object and draw into it";
		throw new js__$Boot_HaxeError(message);
	}
	,applyFilter: function(sourceBitmapData,sourceRect,destPoint,filter) {
		this.unsupported();
	}
	,colorTransform: function(rect,colorTransform) {
		this.unsupported();
	}
	,copyChannel: function(sourceBitmapData,sourceRect,destPoint,sourceChannel,destChannel) {
		this.unsupported();
	}
	,copyPixels: function(sourceBitmapData,sourceRect,destPoint,alphaBitmapData,alphaPoint,mergeAlpha) {
		if(mergeAlpha == null) {
			mergeAlpha = false;
		}
		this.unsupported();
	}
	,draw: function(source,matrix,colorTransform,blendMode,clipRect,smoothing) {
		if(smoothing == null) {
			smoothing = false;
		}
		this.unsupported();
	}
	,floodFill: function(x,y,color) {
		this.unsupported();
	}
	,fillRect: function(rect,color) {
		this.unsupported();
	}
	,merge: function(sourceBitmapData,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
		this.unsupported();
	}
	,noise: function(randomSeed,low,high,channelOptions,grayScale) {
		if(grayScale == null) {
			grayScale = false;
		}
		if(channelOptions == null) {
			channelOptions = 7;
		}
		if(high == null) {
			high = 255;
		}
		if(low == null) {
			low = 0;
		}
		this.unsupported();
	}
	,paletteMap: function(sourceBitmapData,sourceRect,destPoint,redArray,greenArray,blueArray,alphaArray) {
		this.unsupported();
	}
	,perlinNoise: function(baseX,baseY,numOctaves,randomSeed,stitch,fractalNoise,channelOptions,grayScale,offsets) {
		if(grayScale == null) {
			grayScale = false;
		}
		if(channelOptions == null) {
			channelOptions = 7;
		}
		this.unsupported();
	}
	,scroll: function(x,y) {
		this.unsupported();
	}
	,setPixel: function(x,y,color) {
		this.unsupported();
	}
	,setPixel32: function(x,y,color) {
		this.unsupported();
	}
	,setPixels: function(rect,byteArray) {
		this.unsupported();
	}
	,setVector: function(rect,inputVector) {
		this.unsupported();
	}
	,__getPixelAbsoluteCoords: function(x,y) {
		x -= this.__offsetX;
		y -= this.__offsetY;
		if(x < 0 || y < 0) {
			return false;
		}
		if(this.__rotated) {
			if(x > this.__texHeight || y > this.__texWidth) {
				return false;
			}
			var tmp = x;
			x = this.__texWidth - y;
			y = tmp;
		} else if(x > this.__texWidth || y > this.__texHeight) {
			return false;
		}
		openfl_display_SubBitmapData.__getPixelAbsoluteCoordsX = this.__texX + x;
		openfl_display_SubBitmapData.__getPixelAbsoluteCoordsY = this.__texY + y;
		return true;
	}
	,getPixel: function(x,y) {
		if(this.__getPixelAbsoluteCoords(x,y)) {
			return this.__parentBitmap.image.getPixel(openfl_display_SubBitmapData.__getPixelAbsoluteCoordsX,openfl_display_SubBitmapData.__getPixelAbsoluteCoordsY,1);
		} else {
			return 0;
		}
	}
	,getPixel32: function(x,y) {
		if(this.__getPixelAbsoluteCoords(x,y)) {
			return this.__parentBitmap.image.getPixel32(openfl_display_SubBitmapData.__getPixelAbsoluteCoordsX,openfl_display_SubBitmapData.__getPixelAbsoluteCoordsY,1);
		} else {
			return 0;
		}
	}
	,__fillBatchQuad: function(transform,vertexData) {
		var x = this.__offsetX;
		var y = this.__offsetY;
		var w;
		var h;
		if(this.__rotated) {
			w = this.__texHeight;
			h = this.__texWidth;
		} else {
			w = this.__texWidth;
			h = this.__texHeight;
		}
		var x1 = x + w;
		var y1 = y + h;
		vertexData[0] = x * transform.a + y * transform.c + transform.tx;
		vertexData[1] = x * transform.b + y * transform.d + transform.ty;
		vertexData[2] = x1 * transform.a + y * transform.c + transform.tx;
		vertexData[3] = x1 * transform.b + y * transform.d + transform.ty;
		vertexData[4] = x1 * transform.a + y1 * transform.c + transform.tx;
		vertexData[5] = x1 * transform.b + y1 * transform.d + transform.ty;
		vertexData[6] = x * transform.a + y1 * transform.c + transform.tx;
		vertexData[7] = x * transform.b + y1 * transform.d + transform.ty;
	}
	,__getTexture: function() {
		var parentTexture = this.__parentBitmap.__getTexture();
		if(this.__quadTextureData == null || this.__quadTextureData.data != parentTexture.data) {
			this.__quadTextureData = this.__prepareQuadTextureData(parentTexture.data);
		}
		return this.__quadTextureData;
	}
	,__prepareQuadTextureData: function(texture) {
		var u0;
		var v0;
		var u1;
		var v1;
		var u2;
		var v2;
		var u3;
		var v3;
		if(this.__rotated) {
			u0 = this.__texX1;
			v0 = this.__texY0;
			u1 = this.__texX1;
			v1 = this.__texY1;
			u2 = this.__texX0;
			v2 = this.__texY1;
			u3 = this.__texX0;
			v3 = this.__texY0;
		} else {
			u0 = this.__texX0;
			v0 = this.__texY0;
			u1 = this.__texX1;
			v1 = this.__texY0;
			u2 = this.__texX1;
			v2 = this.__texY1;
			u3 = this.__texX0;
			v3 = this.__texY1;
		}
		return new openfl__$internal_renderer_opengl_batcher_QuadTextureData(texture,openfl__$internal_renderer_opengl_batcher_QuadTextureData.createArray(u0,v0,u1,v1,u2,v2,u3,v3),true);
	}
	,__getTextureRegion: function(uvX,uvY,uvWidth,uvHeight,result) {
		var left = uvX * this.width;
		var right = uvWidth * this.width;
		var top = uvY * this.height;
		var bottom = uvHeight * this.height;
		if(this.__rotated) {
			result.u0 = (this.__texX + this.__texWidth - top + this.__offsetY) / this.__parentBitmap.width;
			result.v0 = (this.__texY + left - this.__offsetX) / this.__parentBitmap.height;
			result.u1 = (this.__texX + this.__texWidth - top + this.__offsetY) / this.__parentBitmap.width;
			result.v1 = (this.__texY + right - this.__offsetX) / this.__parentBitmap.height;
			result.u2 = (this.__texX + this.__texWidth - bottom + this.__offsetY) / this.__parentBitmap.width;
			result.v2 = (this.__texY + right - this.__offsetX) / this.__parentBitmap.height;
			result.u3 = (this.__texX + this.__texWidth - bottom + this.__offsetY) / this.__parentBitmap.width;
			result.v3 = (this.__texY + left - this.__offsetX) / this.__parentBitmap.height;
		} else {
			var u0 = (this.__texX + left - this.__offsetX) / this.__parentBitmap.width;
			var v0 = (this.__texY + top - this.__offsetY) / this.__parentBitmap.height;
			var u1 = (this.__texX + right - this.__offsetX) / this.__parentBitmap.width;
			var v1 = (this.__texY + bottom - this.__offsetY) / this.__parentBitmap.height;
			result.u0 = u0;
			result.v0 = v0;
			result.u1 = u1;
			result.v1 = v0;
			result.u2 = u1;
			result.v2 = v1;
			result.u3 = u0;
			result.v3 = v1;
		}
	}
	,__prepareImage: function() {
		if(this.image == null) {
			var canvas = window.document.createElement("canvas");
			canvas.width = this.width;
			canvas.height = this.height;
			this.__drawToCanvas(canvas.getContext("2d"),openfl_geom_Matrix.__identity,true,1,null,false);
			this.image = openfl__$internal_graphics_Image.fromCanvas(canvas);
		}
		return true;
	}
	,__renderCanvas: function(renderSession) {
		renderSession.context.globalAlpha = 1;
		this.__drawToCanvas(renderSession.context,this.__worldTransform,false,renderSession.pixelRatio,null,false);
	}
	,__canBeDrawnToCanvas: function() {
		return this.__parentBitmap.__canBeDrawnToCanvas();
	}
	,__drawToCanvas: function(context,transform,roundPixels,pixelRatio,scrollRect,useScrollRectCoords) {
		var parentImage = this.__parentBitmap.image;
		if(parentImage.type == openfl__$internal_graphics_ImageType.DATA) {
			openfl__$internal_graphics_utils_ImageCanvasUtil.convertToCanvas(parentImage);
		}
		var sx = this.__texX;
		var sy = this.__texY;
		var w = this.__texWidth;
		var h = this.__texHeight;
		var dx = 0;
		var dy = 0;
		var offsetX = this.__offsetX;
		var offsetY = this.__offsetY;
		if(scrollRect != null) {
			offsetX -= scrollRect.x;
			offsetY -= scrollRect.y;
			if(!this.__rotated) {
				if(offsetX < 0) {
					sx += -offsetX;
					w = Math.min(scrollRect.width,this.__texWidth + offsetX);
					offsetX = 0;
				} else {
					w = Math.min(scrollRect.width - offsetX,this.__texWidth);
				}
				if(offsetY < 0) {
					sy += -offsetY;
					h = Math.min(scrollRect.height,this.__texHeight + offsetY);
					offsetY = 0;
				} else {
					h = Math.min(scrollRect.height - offsetY,this.__texHeight);
				}
			} else {
				if(offsetX < 0) {
					sy += -offsetX;
					h = Math.min(scrollRect.width,this.__texHeight + offsetX);
					offsetX = 0;
				} else {
					h = Math.min(scrollRect.width - offsetX,this.__texHeight);
				}
				if(offsetY < 0) {
					var rightOffset = scrollRect.height - offsetY;
					sx = Math.max(this.__texX,this.__texX + this.__texWidth - rightOffset) | 0;
					w = scrollRect.height;
					offsetY = 0;
				} else {
					w = scrollRect.height - offsetY;
					sx = Math.max(this.__texX,this.__texX + this.__texWidth - w) | 0;
				}
			}
			if(useScrollRectCoords) {
				dx = scrollRect.x;
				dy = scrollRect.y;
			}
		}
		openfl_display_SubBitmapData.__drawToCanvasTransform.copyFrom(transform);
		var _this = openfl_display_SubBitmapData.__drawToCanvasTransform;
		_this.tx = offsetX * _this.a + offsetY * _this.c + _this.tx;
		_this.ty = offsetX * _this.b + offsetY * _this.d + _this.ty;
		var scale = pixelRatio / this.__pixelRatio;
		var transform1 = openfl_display_SubBitmapData.__drawToCanvasTransform;
		if(roundPixels) {
			context.setTransform(transform1.a * scale,transform1.b,transform1.c,transform1.d * scale,Math.round(transform1.tx * pixelRatio),Math.round(transform1.ty * pixelRatio));
		} else {
			context.setTransform(transform1.a * scale,transform1.b,transform1.c,transform1.d * scale,transform1.tx * pixelRatio,transform1.ty * pixelRatio);
		}
		if(this.__rotated) {
			context.translate(0,w);
			context.rotate(-90 * Math.PI / 180);
		}
		context.drawImage(parentImage.get_src(),sx,sy,w,h,dx,dy,w,h);
	}
	,__class__: openfl_display_SubBitmapData
});
var openfl_display__$TriangleCulling_TriangleCulling_$Impl_$ = {};
$hxClasses["openfl.display._TriangleCulling.TriangleCulling_Impl_"] = openfl_display__$TriangleCulling_TriangleCulling_$Impl_$;
openfl_display__$TriangleCulling_TriangleCulling_$Impl_$.__name__ = "openfl.display._TriangleCulling.TriangleCulling_Impl_";
openfl_display__$TriangleCulling_TriangleCulling_$Impl_$.fromString = function(value) {
	switch(value) {
	case "negative":
		return 0;
	case "none":
		return 1;
	case "positive":
		return 2;
	default:
		return null;
	}
};
openfl_display__$TriangleCulling_TriangleCulling_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 0:
		return "negative";
	case 1:
		return "none";
	case 2:
		return "positive";
	default:
		return null;
	}
};
var openfl_display3D_Context3D = function(stage3D,renderSession) {
	this.totalGPUMemory = 0;
	this.profile = 0;
	this.driverInfo = "OpenGL (Direct blitting)";
	this.backBufferWidth = 0;
	this.backBufferHeight = 0;
	openfl_events_EventDispatcher.call(this);
	this.__stage3D = stage3D;
	this.__renderSession = renderSession;
	this.__vertexConstants = new Float32Array(512);
	this.__fragmentConstants = new Float32Array(512);
	this.__positionScale = new Float32Array([1.0,1.0,1.0,1.0]);
	this.__samplerDirty = 0;
	this.__samplerTextures = openfl__$Vector_Vector_$Impl_$.toObjectVector(null,8);
	var _g = [];
	_g.push(new openfl__$internal_stage3D_SamplerState(9729,9729,33071,33071));
	_g.push(new openfl__$internal_stage3D_SamplerState(9729,9729,33071,33071));
	_g.push(new openfl__$internal_stage3D_SamplerState(9729,9729,33071,33071));
	_g.push(new openfl__$internal_stage3D_SamplerState(9729,9729,33071,33071));
	_g.push(new openfl__$internal_stage3D_SamplerState(9729,9729,33071,33071));
	_g.push(new openfl__$internal_stage3D_SamplerState(9729,9729,33071,33071));
	_g.push(new openfl__$internal_stage3D_SamplerState(9729,9729,33071,33071));
	_g.push(new openfl__$internal_stage3D_SamplerState(9729,9729,33071,33071));
	this.__samplerStates = _g;
	this.__backBufferAntiAlias = 0;
	this.__backBufferEnableDepthAndStencil = true;
	this.__backBufferWantsBestResolution = false;
	this.__frameCount = 0;
	this.__rttDepthAndStencil = false;
	this.__samplerDirty = 0;
	this.__stencilCompareMode = 0;
	this.__stencilRef = 0;
	this.__stencilReadMask = 255;
	var gl = kha_SystemImpl.gl;
	this.maxBackBufferHeight = this.maxBackBufferWidth = gl.getParameter(3386);
	var anisoExtension = gl.getExtension("EXT_texture_filter_anisotropic");
	if(anisoExtension == null || !Object.prototype.hasOwnProperty.call(anisoExtension,"MAX_TEXTURE_MAX_ANISOTROPY_EXT")) {
		anisoExtension = gl.getExtension("MOZ_EXT_texture_filter_anisotropic");
	}
	if(anisoExtension == null || !Object.prototype.hasOwnProperty.call(anisoExtension,"MAX_TEXTURE_MAX_ANISOTROPY_EXT")) {
		anisoExtension = gl.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
	}
	this.__supportsAnisotropicFiltering = anisoExtension != null;
	if(this.__supportsAnisotropicFiltering) {
		openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT = anisoExtension.TEXTURE_MAX_ANISOTROPY_EXT;
		this.__maxAnisotropyTexture2D = gl.getParameter(anisoExtension.MAX_TEXTURE_MAX_ANISOTROPY_EXT);
	}
	var vendor = gl.getParameter(7936);
	var version = gl.getParameter(7938);
	var renderer = gl.getParameter(7937);
	var glslVersion = gl.getParameter(35724);
	this.driverInfo = "OpenGL" + " Vendor=" + vendor + " Version=" + version + " Renderer=" + renderer + " GLSL=" + glslVersion;
};
$hxClasses["openfl.display3D.Context3D"] = openfl_display3D_Context3D;
openfl_display3D_Context3D.__name__ = "openfl.display3D.Context3D";
openfl_display3D_Context3D.__getGLBlendFactor = function(blendFactor) {
	switch(blendFactor) {
	case 0:
		return 772;
	case 1:
		return 774;
	case 2:
		return 1;
	case 3:
		return 773;
	case 4:
		return 775;
	case 5:
		return 771;
	case 6:
		return 769;
	case 7:
		return 770;
	case 8:
		return 768;
	case 9:
		return 0;
	default:
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
	}
};
openfl_display3D_Context3D.__getGLCompareMode = function(compareMode) {
	switch(compareMode) {
	case 0:
		return 519;
	case 1:
		return 514;
	case 2:
		return 516;
	case 3:
		return 518;
	case 4:
		return 513;
	case 5:
		return 515;
	case 6:
		return 512;
	case 7:
		return 517;
	default:
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
	}
};
openfl_display3D_Context3D.__getGLTriangleFace = function(triangleFace,swap) {
	switch(triangleFace) {
	case 0:
		if(swap) {
			return 1028;
		} else {
			return 1029;
		}
		break;
	case 1:
		if(swap) {
			return 1029;
		} else {
			return 1028;
		}
		break;
	case 2:
		return 1032;
	case 3:
		return 0;
	default:
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
	}
};
openfl_display3D_Context3D.__getGLStencilAction = function(stencilAction) {
	switch(stencilAction) {
	case 0:
		return 7683;
	case 1:
		return 34056;
	case 2:
		return 7682;
	case 3:
		return 34055;
	case 4:
		return 5386;
	case 5:
		return 7680;
	case 6:
		return 7681;
	case 7:
		return 0;
	default:
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
	}
};
openfl_display3D_Context3D.__super__ = openfl_events_EventDispatcher;
openfl_display3D_Context3D.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	backBufferHeight: null
	,backBufferWidth: null
	,driverInfo: null
	,enableErrorChecking: null
	,maxBackBufferHeight: null
	,maxBackBufferWidth: null
	,profile: null
	,totalGPUMemory: null
	,__backBufferAntiAlias: null
	,__backBufferEnableDepthAndStencil: null
	,__backBufferWantsBestResolution: null
	,__fragmentConstants: null
	,__frameCount: null
	,__maxAnisotropyCubeTexture: null
	,__maxAnisotropyTexture2D: null
	,__positionScale: null
	,__program: null
	,__renderSession: null
	,__renderToTexture: null
	,__rttDepthAndStencil: null
	,__samplerDirty: null
	,__samplerTextures: null
	,__samplerStates: null
	,__stage3D: null
	,__stencilCompareMode: null
	,__stencilRef: null
	,__stencilReadMask: null
	,__supportsAnisotropicFiltering: null
	,__vertexConstants: null
	,clear: function(red,green,blue,alpha,depth,stencil,mask) {
		if(mask == null) {
			mask = 7;
		}
		if(stencil == null) {
			stencil = 0;
		}
		if(depth == null) {
			depth = 1;
		}
		if(alpha == null) {
			alpha = 1;
		}
		if(blue == null) {
			blue = 0;
		}
		if(green == null) {
			green = 0;
		}
		if(red == null) {
			red = 0;
		}
		var gl = kha_SystemImpl.gl;
		var clearMask = 0;
		if((mask & 1) != 0) {
			clearMask |= 16384;
			gl.clearColor(red,green,blue,alpha);
		}
		if((mask & 2) != 0) {
			clearMask |= 256;
			gl.clearDepth(depth);
		}
		if((mask & 4) != 0) {
			clearMask |= 1024;
			gl.clearStencil(stencil);
		}
		gl.clear(clearMask);
	}
	,configureBackBuffer: function(width,height,antiAlias,enableDepthAndStencil,wantsBestResolution,wantsBestResolutionOnBrowserZoom) {
		if(wantsBestResolutionOnBrowserZoom == null) {
			wantsBestResolutionOnBrowserZoom = false;
		}
		if(wantsBestResolution == null) {
			wantsBestResolution = false;
		}
		if(enableDepthAndStencil == null) {
			enableDepthAndStencil = true;
		}
		this.__updateBackbufferViewport();
		var scale = this.__stage3D.__stage.window.scale;
		this.backBufferWidth = Math.ceil(width * scale);
		this.backBufferHeight = Math.ceil(height * scale);
		this.__backBufferAntiAlias = antiAlias;
		this.__backBufferEnableDepthAndStencil = enableDepthAndStencil;
		this.__backBufferWantsBestResolution = wantsBestResolution;
	}
	,createCubeTexture: function(size,format,optimizeForRenderToTexture,streamingLevels) {
		if(streamingLevels == null) {
			streamingLevels = 0;
		}
		return new openfl_display3D_textures_CubeTexture(this,size,format,optimizeForRenderToTexture,streamingLevels);
	}
	,createIndexBuffer: function(numIndices,bufferUsage) {
		if(bufferUsage == null) {
			bufferUsage = 1;
		}
		return new openfl_display3D_IndexBuffer3D(this,numIndices,bufferUsage);
	}
	,createProgram: function() {
		return new openfl_display3D_Program3D(this);
	}
	,createRectangleTexture: function(width,height,format,optimizeForRenderToTexture) {
		return new openfl_display3D_textures_RectangleTexture(this,width,height,openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.toString(format),optimizeForRenderToTexture);
	}
	,createTexture: function(width,height,format,optimizeForRenderToTexture,streamingLevels) {
		if(streamingLevels == null) {
			streamingLevels = 0;
		}
		return new openfl_display3D_textures_Texture(this,width,height,format,optimizeForRenderToTexture,streamingLevels);
	}
	,createVertexBuffer: function(numVertices,data32PerVertex,bufferUsage) {
		if(bufferUsage == null) {
			bufferUsage = 1;
		}
		return new openfl_display3D_VertexBuffer3D(this,numVertices,data32PerVertex,bufferUsage);
	}
	,createVideoTexture: function() {
		return new openfl_display3D_textures_VideoTexture(this);
	}
	,dispose: function(recreate) {
		if(recreate == null) {
			recreate = true;
		}
	}
	,drawToBitmapData: function(destination) {
		var $window = this.__stage3D.__stage.window;
		var image = $window.readPixels();
		var heightOffset = image.height - this.backBufferHeight;
		destination.image.copyPixels(image,new openfl_geom_Rectangle(this.__stage3D.get_x() | 0,this.__stage3D.get_y() + heightOffset | 0,this.backBufferWidth,this.backBufferHeight),new openfl_geom_Point());
	}
	,drawTriangles: function(indexBuffer,firstIndex,numTriangles) {
		if(numTriangles == null) {
			numTriangles = -1;
		}
		if(firstIndex == null) {
			firstIndex = 0;
		}
		if(this.__program == null) {
			return;
		}
		this.__flushSamplerState();
		this.__program.__flush();
		var count = numTriangles == -1 ? indexBuffer.__numIndices : numTriangles * 3;
		var gl = kha_SystemImpl.gl;
		gl.bindBuffer(34963,indexBuffer.__id);
		gl.drawElements(4,count,indexBuffer.__elementType,firstIndex);
	}
	,__flushSamplerState: function() {
		var gl = kha_SystemImpl.gl;
		var sampler = 0;
		while(this.__samplerDirty != 0) {
			if((this.__samplerDirty & 1 << sampler) != 0) {
				gl.activeTexture(33984 + sampler);
				var texture = this.__samplerTextures.data.get(sampler);
				if(texture != null) {
					gl.bindTexture(texture.__textureTarget,texture.__getTexture().image.texture);
					var state = this.__samplerStates[sampler];
					if(!state.equals(texture.__samplerState)) {
						texture.__applySamplerState(kha_SystemImpl.gl,state);
						texture.__samplerState = state;
						texture.__samplerState.__samplerDirty = false;
					}
				} else {
					gl.bindTexture(3553,null);
				}
				this.__samplerDirty &= ~(1 << sampler);
			}
			++sampler;
		}
	}
	,present: function() {
	}
	,setBlendFactors: function(sourceFactor,destinationFactor) {
		var gl = kha_SystemImpl.gl;
		gl.enable(3042);
		gl.blendFunc(openfl_display3D_Context3D.__getGLBlendFactor(sourceFactor),openfl_display3D_Context3D.__getGLBlendFactor(destinationFactor));
	}
	,setColorMask: function(red,green,blue,alpha) {
		kha_SystemImpl.gl.colorMask(red,green,blue,alpha);
	}
	,setCulling: function(triangleFaceToCull) {
		var gl = kha_SystemImpl.gl;
		if(triangleFaceToCull == 3) {
			gl.disable(2884);
		} else {
			gl.enable(2884);
			gl.cullFace(openfl_display3D_Context3D.__getGLTriangleFace(triangleFaceToCull,true));
		}
	}
	,setDepthTest: function(depthMask,passCompareMode) {
		var gl = kha_SystemImpl.gl;
		if(this.__backBufferEnableDepthAndStencil) {
			gl.enable(2929);
		} else {
			gl.disable(2929);
		}
		gl.depthMask(depthMask);
		gl.depthFunc(openfl_display3D_Context3D.__getGLCompareMode(passCompareMode));
	}
	,setProgram: function(program) {
		if(program == null) {
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
		}
		program.__use();
		program.__setPositionScale(this.__positionScale);
		this.__program = program;
		this.__samplerDirty |= this.__program.__samplerUsageMask;
		this.__samplerStates[0].copyFrom(this.__program.__getSamplerState(0));
		this.__samplerStates[1].copyFrom(this.__program.__getSamplerState(1));
		this.__samplerStates[2].copyFrom(this.__program.__getSamplerState(2));
		this.__samplerStates[3].copyFrom(this.__program.__getSamplerState(3));
		this.__samplerStates[4].copyFrom(this.__program.__getSamplerState(4));
		this.__samplerStates[5].copyFrom(this.__program.__getSamplerState(5));
		this.__samplerStates[6].copyFrom(this.__program.__getSamplerState(6));
		this.__samplerStates[7].copyFrom(this.__program.__getSamplerState(7));
	}
	,setProgramConstantsFromByteArray: function(programType,firstRegister,numRegisters,data,byteArrayOffset) {
		if(numRegisters == 0) {
			return;
		}
		if(numRegisters == -1) {
			numRegisters = (data.length >> 2) - byteArrayOffset;
		}
		var isVertex = programType == 1;
		var dest = isVertex ? this.__vertexConstants : this.__fragmentConstants;
		var floatData = new Float32Array(data.b.bufferValue);
		var outOffset = firstRegister * 4;
		var inOffset = _$UInt_UInt_$Impl_$.toFloat(byteArrayOffset) / _$UInt_UInt_$Impl_$.toFloat(4) | 0;
		var _g = 0;
		var _g1 = numRegisters * 4;
		while(_g < _g1) {
			var i = _g++;
			dest[outOffset + i] = floatData[inOffset + i];
		}
		if(this.__program != null) {
			this.__program.__markDirty(isVertex,firstRegister,numRegisters);
		}
	}
	,setProgramConstantsFromMatrix: function(programType,firstRegister,matrix,transposedMatrix) {
		if(transposedMatrix == null) {
			transposedMatrix = false;
		}
		var isVertex = programType == 1;
		var dest = isVertex ? this.__vertexConstants : this.__fragmentConstants;
		var source = matrix.rawData;
		var i = firstRegister * 4;
		if(transposedMatrix) {
			dest[i++] = source.data.get(0);
			dest[i++] = source.data.get(4);
			dest[i++] = source.data.get(8);
			dest[i++] = source.data.get(12);
			dest[i++] = source.data.get(1);
			dest[i++] = source.data.get(5);
			dest[i++] = source.data.get(9);
			dest[i++] = source.data.get(13);
			dest[i++] = source.data.get(2);
			dest[i++] = source.data.get(6);
			dest[i++] = source.data.get(10);
			dest[i++] = source.data.get(14);
			dest[i++] = source.data.get(3);
			dest[i++] = source.data.get(7);
			dest[i++] = source.data.get(11);
			dest[i++] = source.data.get(15);
		} else {
			dest[i++] = source.data.get(0);
			dest[i++] = source.data.get(1);
			dest[i++] = source.data.get(2);
			dest[i++] = source.data.get(3);
			dest[i++] = source.data.get(4);
			dest[i++] = source.data.get(5);
			dest[i++] = source.data.get(6);
			dest[i++] = source.data.get(7);
			dest[i++] = source.data.get(8);
			dest[i++] = source.data.get(9);
			dest[i++] = source.data.get(10);
			dest[i++] = source.data.get(11);
			dest[i++] = source.data.get(12);
			dest[i++] = source.data.get(13);
			dest[i++] = source.data.get(14);
			dest[i++] = source.data.get(15);
		}
		if(this.__program != null) {
			this.__program.__markDirty(isVertex,firstRegister,4);
		}
	}
	,setProgramConstantsFromVector: function(programType,firstRegister,data,numRegisters) {
		if(numRegisters == null) {
			numRegisters = -1;
		}
		if(numRegisters == 0) {
			return;
		}
		if(numRegisters == -1) {
			numRegisters = data.data.get_length() >> 2;
		}
		var isVertex = programType == 1;
		var dest = isVertex ? this.__vertexConstants : this.__fragmentConstants;
		var source = data;
		var sourceIndex = 0;
		var destIndex = firstRegister * 4;
		var _g = 0;
		var _g1 = numRegisters;
		while(_g < _g1) {
			var i = _g++;
			dest[destIndex++] = source.data.get(sourceIndex++);
			dest[destIndex++] = source.data.get(sourceIndex++);
			dest[destIndex++] = source.data.get(sourceIndex++);
			dest[destIndex++] = source.data.get(sourceIndex++);
		}
		if(this.__program != null) {
			this.__program.__markDirty(isVertex,firstRegister,numRegisters);
		}
	}
	,setRenderToBackBuffer: function() {
		var gl = kha_SystemImpl.gl;
		gl.bindFramebuffer(36160,null);
		gl.frontFace(2305);
		this.__renderToTexture = null;
		this.__updateBackbufferViewport();
		kha_SystemImpl.gl.disable(3089);
		this.__updateDepthAndStencilState();
		this.__positionScale[1] = 1.0;
		if(this.__program != null) {
			this.__program.__setPositionScale(this.__positionScale);
		}
	}
	,setRenderToTexture: function(texture,enableDepthAndStencil,antiAlias,surfaceSelector) {
		if(surfaceSelector == null) {
			surfaceSelector = 0;
		}
		if(antiAlias == null) {
			antiAlias = 0;
		}
		if(enableDepthAndStencil == null) {
			enableDepthAndStencil = false;
		}
		var gl = kha_SystemImpl.gl;
		var width = texture.__width;
		var height = texture.__height;
		var create = texture.__framebuffer == null;
		if(create) {
			texture.__framebuffer = gl.createFramebuffer();
		}
		gl.bindFramebuffer(36160,texture.__framebuffer);
		if(create) {
			if(((texture) instanceof openfl_display3D_textures_Texture)) {
				gl.framebufferTexture2D(36160,36064,3553,texture.__textureData.image.texture,0);
			} else if(((texture) instanceof openfl_display3D_textures_RectangleTexture)) {
				gl.framebufferTexture2D(36160,36064,3553,texture.__textureData.image.texture,0);
			} else if(((texture) instanceof openfl_display3D_textures_CubeTexture)) {
				gl.framebufferTexture2D(36160,36064,34069,texture.__textureData.image.texture,0);
				gl.framebufferTexture2D(36160,36064,34070,texture.__textureData.image.texture,0);
				gl.framebufferTexture2D(36160,36064,34071,texture.__textureData.image.texture,0);
				gl.framebufferTexture2D(36160,36064,34072,texture.__textureData.image.texture,0);
				gl.framebufferTexture2D(36160,36064,34073,texture.__textureData.image.texture,0);
				gl.framebufferTexture2D(36160,36064,34074,texture.__textureData.image.texture,0);
			} else {
				throw new js__$Boot_HaxeError(new openfl_errors_Error("Invalid texture"));
			}
		}
		if(create && enableDepthAndStencil) {
			texture.__depthStencilRenderbuffer = gl.createRenderbuffer();
			gl.bindRenderbuffer(36161,texture.__depthStencilRenderbuffer);
			gl.renderbufferStorage(36161,34041,width,height);
			gl.framebufferRenderbuffer(36160,33306,36161,texture.__depthStencilRenderbuffer);
			gl.bindRenderbuffer(36161,null);
		}
		gl.viewport(0,0,width,height);
		this.__positionScale[1] = -1.0;
		if(this.__program != null) {
			this.__program.__setPositionScale(this.__positionScale);
		}
		gl.frontFace(2304);
		this.__renderToTexture = texture;
		this.__rttDepthAndStencil = enableDepthAndStencil;
		kha_SystemImpl.gl.disable(3089);
		this.__updateDepthAndStencilState();
	}
	,setSamplerStateAt: function(sampler,wrap,filter,mipfilter) {
		if(sampler < 0 || sampler > 8) {
			throw new js__$Boot_HaxeError(new openfl_errors_Error("sampler out of range"));
		}
		var state = this.__samplerStates[sampler];
		switch(wrap) {
		case 0:
			state.set_wrapModeS(33071);
			state.set_wrapModeT(33071);
			break;
		case 1:
			state.set_wrapModeS(33071);
			state.set_wrapModeT(10497);
			break;
		case 2:
			state.set_wrapModeS(10497);
			state.set_wrapModeT(10497);
			break;
		case 3:
			state.set_wrapModeS(10497);
			state.set_wrapModeT(33071);
			break;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_Error("wrap bad enum"));
		}
		switch(filter) {
		case 0:
			if(this.__supportsAnisotropicFiltering) {
				state.set_maxAniso(this.__maxAnisotropyTexture2D < 16 ? this.__maxAnisotropyTexture2D : 16);
			}
			break;
		case 1:
			if(this.__supportsAnisotropicFiltering) {
				state.set_maxAniso(this.__maxAnisotropyTexture2D < 2 ? this.__maxAnisotropyTexture2D : 2);
			}
			break;
		case 2:
			if(this.__supportsAnisotropicFiltering) {
				state.set_maxAniso(this.__maxAnisotropyTexture2D < 4 ? this.__maxAnisotropyTexture2D : 4);
			}
			break;
		case 3:
			if(this.__supportsAnisotropicFiltering) {
				state.set_maxAniso(this.__maxAnisotropyTexture2D < 8 ? this.__maxAnisotropyTexture2D : 8);
			}
			break;
		case 4:
			state.set_magFilter(9729);
			if(this.__supportsAnisotropicFiltering) {
				state.set_maxAniso(1);
			}
			break;
		case 5:
			state.set_magFilter(9728);
			if(this.__supportsAnisotropicFiltering) {
				state.set_maxAniso(1);
			}
			break;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_Error("filter bad enum"));
		}
		switch(mipfilter) {
		case 0:
			state.set_minFilter(filter == 5 ? 9986 : 9987);
			break;
		case 1:
			state.set_minFilter(filter == 5 ? 9984 : 9985);
			break;
		case 2:
			state.set_minFilter(filter == 5 ? 9728 : 9729);
			break;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_Error("mipfiter bad enum"));
		}
	}
	,setScissorRectangle: function(rectangle) {
		if(rectangle != null) {
			var scale = this.__stage3D.__stage.window.scale;
			this.__setScissorRectangle(rectangle.x * scale | 0,rectangle.y * scale | 0,rectangle.width * scale | 0,rectangle.height * scale | 0);
		} else {
			kha_SystemImpl.gl.disable(3089);
		}
	}
	,setStencilActions: function(triangleFace,compareMode,actionOnBothPass,actionOnDepthFail,actionOnDepthPassStencilFail) {
		if(actionOnDepthPassStencilFail == null) {
			actionOnDepthPassStencilFail = 5;
		}
		if(actionOnDepthFail == null) {
			actionOnDepthFail = 5;
		}
		if(actionOnBothPass == null) {
			actionOnBothPass = 5;
		}
		if(compareMode == null) {
			compareMode = 0;
		}
		if(triangleFace == null) {
			triangleFace = 2;
		}
		this.__stencilCompareMode = compareMode;
		var gl = kha_SystemImpl.gl;
		gl.stencilOpSeparate(openfl_display3D_Context3D.__getGLTriangleFace(triangleFace,false),openfl_display3D_Context3D.__getGLStencilAction(actionOnDepthPassStencilFail),openfl_display3D_Context3D.__getGLStencilAction(actionOnDepthFail),openfl_display3D_Context3D.__getGLStencilAction(actionOnBothPass));
		gl.stencilFunc(openfl_display3D_Context3D.__getGLCompareMode(compareMode),this.__stencilRef,this.__stencilReadMask);
	}
	,setStencilReferenceValue: function(referenceValue,readMask,writeMask) {
		if(writeMask == null) {
			writeMask = 255;
		}
		if(readMask == null) {
			readMask = 255;
		}
		this.__stencilReadMask = readMask;
		this.__stencilRef = referenceValue;
		var gl = kha_SystemImpl.gl;
		gl.stencilMask(writeMask);
		gl.stencilFunc(openfl_display3D_Context3D.__getGLCompareMode(this.__stencilCompareMode),referenceValue,readMask);
	}
	,setTextureAt: function(sampler,texture) {
		if(this.__samplerTextures.data.get(sampler) != texture) {
			this.__samplerTextures.data.set(sampler,texture);
			this.__samplerDirty |= 1 << sampler;
		}
	}
	,setVertexBufferAt: function(index,buffer,bufferOffset,format) {
		if(format == null) {
			format = 4;
		}
		if(bufferOffset == null) {
			bufferOffset = 0;
		}
		var gl = kha_SystemImpl.gl;
		if(buffer == null) {
			gl.disableVertexAttribArray(index);
			gl.bindBuffer(34962,null);
			return;
		}
		gl.enableVertexAttribArray(index);
		gl.bindBuffer(34962,buffer.__id);
		var byteOffset = bufferOffset * 4;
		switch(format) {
		case 0:
			gl.vertexAttribPointer(index,4,5121,true,buffer.__stride,byteOffset);
			break;
		case 1:
			gl.vertexAttribPointer(index,1,5126,false,buffer.__stride,byteOffset);
			break;
		case 2:
			gl.vertexAttribPointer(index,2,5126,false,buffer.__stride,byteOffset);
			break;
		case 3:
			gl.vertexAttribPointer(index,3,5126,false,buffer.__stride,byteOffset);
			break;
		case 4:
			gl.vertexAttribPointer(index,4,5126,false,buffer.__stride,byteOffset);
			break;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
		}
	}
	,__updateBackbufferViewport: function() {
		if(!openfl_display_Stage3D.__active) {
			openfl_display_Stage3D.__active = true;
			this.__renderSession.renderer.clear();
		}
		if(this.__renderToTexture == null && this.backBufferWidth > 0 && this.backBufferHeight > 0) {
			kha_SystemImpl.gl.viewport(this.__stage3D.get_x() | 0,this.__stage3D.get_y() | 0,this.backBufferWidth,this.backBufferHeight);
		}
	}
	,__updateDepthAndStencilState: function() {
		var gl = kha_SystemImpl.gl;
		var depthAndStencil = this.__renderToTexture != null ? this.__rttDepthAndStencil : this.__backBufferEnableDepthAndStencil;
		if(depthAndStencil) {
			gl.enable(2929);
			gl.enable(2960);
		} else {
			gl.disable(2929);
			gl.disable(2960);
		}
	}
	,__disableScissorRectangle: function() {
		kha_SystemImpl.gl.disable(3089);
	}
	,__setScissorRectangle: function(x,y,width,height) {
		var gl = kha_SystemImpl.gl;
		gl.enable(3089);
		var renderTargetHeight = 0;
		var offsetX = 0;
		var offsetY = 0;
		if(this.__renderToTexture != null) {
			renderTargetHeight = this.__renderToTexture.__height;
		} else {
			renderTargetHeight = this.backBufferHeight;
			offsetX = this.__stage3D.get_x() | 0;
			offsetY = this.__stage3D.get_y() | 0;
		}
		gl.scissor(x + offsetX,renderTargetHeight - y - height + offsetY,width,height);
	}
	,__class__: openfl_display3D_Context3D
});
var openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DBlendFactor.Context3DBlendFactor_Impl_"] = openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$;
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.__name__ = "openfl.display3D._Context3DBlendFactor.Context3DBlendFactor_Impl_";
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.fromString = function(value) {
	switch(value) {
	case "destinationAlpha":
		return 0;
	case "destinationColor":
		return 1;
	case "one":
		return 2;
	case "oneMinusDestinationAlpha":
		return 3;
	case "oneMinusDestinationColor":
		return 4;
	case "oneMinusSourceAlpha":
		return 5;
	case "oneMinusSourceColor":
		return 6;
	case "sourceAlpha":
		return 7;
	case "sourceColor":
		return 8;
	case "zero":
		return 9;
	default:
		return null;
	}
};
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 0:
		return "destinationAlpha";
	case 1:
		return "destinationColor";
	case 2:
		return "one";
	case 3:
		return "oneMinusDestinationAlpha";
	case 4:
		return "oneMinusDestinationColor";
	case 5:
		return "oneMinusSourceAlpha";
	case 6:
		return "oneMinusSourceColor";
	case 7:
		return "sourceAlpha";
	case 8:
		return "sourceColor";
	case 9:
		return "zero";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DBufferUsage_Context3DBufferUsage_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DBufferUsage.Context3DBufferUsage_Impl_"] = openfl_display3D__$Context3DBufferUsage_Context3DBufferUsage_$Impl_$;
openfl_display3D__$Context3DBufferUsage_Context3DBufferUsage_$Impl_$.__name__ = "openfl.display3D._Context3DBufferUsage.Context3DBufferUsage_Impl_";
openfl_display3D__$Context3DBufferUsage_Context3DBufferUsage_$Impl_$.fromString = function(value) {
	switch(value) {
	case "dynamicDraw":
		return 0;
	case "staticDraw":
		return 1;
	default:
		return null;
	}
};
openfl_display3D__$Context3DBufferUsage_Context3DBufferUsage_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 0:
		return "dynamicDraw";
	case 1:
		return "staticDraw";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DCompareMode.Context3DCompareMode_Impl_"] = openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.__name__ = "openfl.display3D._Context3DCompareMode.Context3DCompareMode_Impl_";
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.fromString = function(value) {
	switch(value) {
	case "always":
		return 0;
	case "equal":
		return 1;
	case "greater":
		return 2;
	case "greaterEqual":
		return 3;
	case "less":
		return 4;
	case "lessEqual":
		return 5;
	case "never":
		return 6;
	case "notEqual":
		return 7;
	default:
		return null;
	}
};
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 0:
		return "always";
	case 1:
		return "equal";
	case 2:
		return "greater";
	case 3:
		return "greaterEqual";
	case 4:
		return "less";
	case 5:
		return "lessEqual";
	case 6:
		return "never";
	case 7:
		return "notEqual";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DMipFilter_Context3DMipFilter_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DMipFilter.Context3DMipFilter_Impl_"] = openfl_display3D__$Context3DMipFilter_Context3DMipFilter_$Impl_$;
openfl_display3D__$Context3DMipFilter_Context3DMipFilter_$Impl_$.__name__ = "openfl.display3D._Context3DMipFilter.Context3DMipFilter_Impl_";
openfl_display3D__$Context3DMipFilter_Context3DMipFilter_$Impl_$.fromString = function(value) {
	switch(value) {
	case "miplinear":
		return 0;
	case "mipnearest":
		return 1;
	case "mipnone":
		return 2;
	default:
		return null;
	}
};
openfl_display3D__$Context3DMipFilter_Context3DMipFilter_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 0:
		return "miplinear";
	case 1:
		return "mipnearest";
	case 2:
		return "mipnone";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DProfile.Context3DProfile_Impl_"] = openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$;
openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$.__name__ = "openfl.display3D._Context3DProfile.Context3DProfile_Impl_";
openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$.fromString = function(value) {
	switch(value) {
	case "baseline":
		return 0;
	case "baselineConstrained":
		return 1;
	case "baselineExtended":
		return 2;
	case "standard":
		return 3;
	case "standardConstrained":
		return 4;
	case "standardExtended":
		return 5;
	default:
		return null;
	}
};
openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 0:
		return "baseline";
	case 1:
		return "baselineConstrained";
	case 2:
		return "baselineExtended";
	case 3:
		return "standard";
	case 4:
		return "standardConstrained";
	case 5:
		return "standardExtended";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DProgramType_Context3DProgramType_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DProgramType.Context3DProgramType_Impl_"] = openfl_display3D__$Context3DProgramType_Context3DProgramType_$Impl_$;
openfl_display3D__$Context3DProgramType_Context3DProgramType_$Impl_$.__name__ = "openfl.display3D._Context3DProgramType.Context3DProgramType_Impl_";
openfl_display3D__$Context3DProgramType_Context3DProgramType_$Impl_$.fromString = function(value) {
	switch(value) {
	case "fragment":
		return 0;
	case "vertex":
		return 1;
	default:
		return null;
	}
};
openfl_display3D__$Context3DProgramType_Context3DProgramType_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 0:
		return "fragment";
	case 1:
		return "vertex";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DRenderMode_Context3DRenderMode_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DRenderMode.Context3DRenderMode_Impl_"] = openfl_display3D__$Context3DRenderMode_Context3DRenderMode_$Impl_$;
openfl_display3D__$Context3DRenderMode_Context3DRenderMode_$Impl_$.__name__ = "openfl.display3D._Context3DRenderMode.Context3DRenderMode_Impl_";
openfl_display3D__$Context3DRenderMode_Context3DRenderMode_$Impl_$.fromString = function(value) {
	switch(value) {
	case "auto":
		return 0;
	case "software":
		return 1;
	default:
		return null;
	}
};
openfl_display3D__$Context3DRenderMode_Context3DRenderMode_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 0:
		return "auto";
	case 1:
		return "software";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DStencilAction.Context3DStencilAction_Impl_"] = openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$;
openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.__name__ = "openfl.display3D._Context3DStencilAction.Context3DStencilAction_Impl_";
openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.fromString = function(value) {
	switch(value) {
	case "decrementSaturate":
		return 0;
	case "decrementWrap":
		return 1;
	case "incrementSaturate":
		return 2;
	case "incrementWrap":
		return 3;
	case "invert":
		return 4;
	case "keep":
		return 5;
	case "set":
		return 6;
	case "zero":
		return 7;
	default:
		return null;
	}
};
openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 0:
		return "decrementSaturate";
	case 1:
		return "decrementWrap";
	case 2:
		return "incrementSaturate";
	case 3:
		return "incrementWrap";
	case 4:
		return "invert";
	case 5:
		return "keep";
	case 6:
		return "set";
	case 7:
		return "zero";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DTextureFilter.Context3DTextureFilter_Impl_"] = openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$;
openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$.__name__ = "openfl.display3D._Context3DTextureFilter.Context3DTextureFilter_Impl_";
openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$.fromString = function(value) {
	switch(value) {
	case "anisotropic16x":
		return 0;
	case "anisotropic2x":
		return 1;
	case "anisotropic4x":
		return 2;
	case "anisotropic8x":
		return 3;
	case "linear":
		return 4;
	case "nearest":
		return 5;
	default:
		return null;
	}
};
openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 0:
		return "anisotropic16x";
	case 1:
		return "anisotropic2x";
	case 2:
		return "anisotropic4x";
	case 3:
		return "anisotropic8x";
	case 4:
		return "linear";
	case 5:
		return "nearest";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DTextureFormat.Context3DTextureFormat_Impl_"] = openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$;
openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.__name__ = "openfl.display3D._Context3DTextureFormat.Context3DTextureFormat_Impl_";
openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.fromString = function(value) {
	switch(value) {
	case "bgrPacked565":
		return 0;
	case "bgra":
		return 1;
	case "bgraPacked4444":
		return 2;
	case "compressed":
		return 3;
	case "compressedAlpha":
		return 4;
	case "rgbaHalfFloat":
		return 5;
	default:
		return null;
	}
};
openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 0:
		return "bgrPacked565";
	case 1:
		return "bgra";
	case 2:
		return "bgraPacked4444";
	case 3:
		return "compressed";
	case 4:
		return "compressedAlpha";
	case 5:
		return "rgbaHalfFloat";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DTriangleFace.Context3DTriangleFace_Impl_"] = openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$;
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.__name__ = "openfl.display3D._Context3DTriangleFace.Context3DTriangleFace_Impl_";
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.fromString = function(value) {
	switch(value) {
	case "back":
		return 0;
	case "front":
		return 1;
	case "frontAndBack":
		return 2;
	case "none":
		return 3;
	default:
		return null;
	}
};
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 0:
		return "back";
	case 1:
		return "front";
	case 2:
		return "frontAndBack";
	case 3:
		return "none";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DVertexBufferFormat_Context3DVertexBufferFormat_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DVertexBufferFormat.Context3DVertexBufferFormat_Impl_"] = openfl_display3D__$Context3DVertexBufferFormat_Context3DVertexBufferFormat_$Impl_$;
openfl_display3D__$Context3DVertexBufferFormat_Context3DVertexBufferFormat_$Impl_$.__name__ = "openfl.display3D._Context3DVertexBufferFormat.Context3DVertexBufferFormat_Impl_";
openfl_display3D__$Context3DVertexBufferFormat_Context3DVertexBufferFormat_$Impl_$.fromString = function(value) {
	switch(value) {
	case "bytes4":
		return 0;
	case "float1":
		return 1;
	case "float2":
		return 2;
	case "float3":
		return 3;
	case "float4":
		return 4;
	default:
		return null;
	}
};
openfl_display3D__$Context3DVertexBufferFormat_Context3DVertexBufferFormat_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 0:
		return "bytes4";
	case 1:
		return "float1";
	case 2:
		return "float2";
	case 3:
		return "float3";
	case 4:
		return "float4";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DWrapMode_Context3DWrapMode_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DWrapMode.Context3DWrapMode_Impl_"] = openfl_display3D__$Context3DWrapMode_Context3DWrapMode_$Impl_$;
openfl_display3D__$Context3DWrapMode_Context3DWrapMode_$Impl_$.__name__ = "openfl.display3D._Context3DWrapMode.Context3DWrapMode_Impl_";
openfl_display3D__$Context3DWrapMode_Context3DWrapMode_$Impl_$.fromString = function(value) {
	switch(value) {
	case "clamp":
		return 0;
	case "clamp_u_repeat_y":
		return 1;
	case "repeat":
		return 2;
	case "repeat_u_clamp_y":
		return 3;
	default:
		return null;
	}
};
openfl_display3D__$Context3DWrapMode_Context3DWrapMode_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 0:
		return "clamp";
	case 1:
		return "clamp_u_repeat_y";
	case 2:
		return "repeat";
	case 3:
		return "repeat_u_clamp_y";
	default:
		return null;
	}
};
var openfl_display3D_IndexBuffer3D = function(context3D,numIndices,bufferUsage) {
	this.__context = context3D;
	this.__numIndices = numIndices;
	this.__elementType = 5123;
	this.__usage = bufferUsage == 0 ? 35048 : 35044;
	this.__id = kha_SystemImpl.gl.createBuffer();
};
$hxClasses["openfl.display3D.IndexBuffer3D"] = openfl_display3D_IndexBuffer3D;
openfl_display3D_IndexBuffer3D.__name__ = "openfl.display3D.IndexBuffer3D";
openfl_display3D_IndexBuffer3D.prototype = {
	__context: null
	,__elementType: null
	,__id: null
	,__numIndices: null
	,__tempInt16Array: null
	,__usage: null
	,dispose: function() {
		var gl = kha_SystemImpl.gl;
		if(gl.isBuffer(this.__id)) {
			gl.deleteBuffer(this.__id);
		}
	}
	,uploadFromByteArray: function(data,byteArrayOffset,startOffset,count) {
		var offset = byteArrayOffset + startOffset * 2;
		this.uploadFromTypedArray(new Int16Array(data.b.bufferValue,offset,count));
	}
	,uploadFromTypedArray: function(data) {
		if(data == null) {
			return;
		}
		var gl = kha_SystemImpl.gl;
		gl.bindBuffer(34963,this.__id);
		gl.bufferData(34963,data,this.__usage);
	}
	,uploadFromVector: function(data,startOffset,count) {
		if(data == null) {
			return;
		}
		var length = startOffset + count;
		var existingInt16Array = this.__tempInt16Array;
		if(this.__tempInt16Array == null || this.__tempInt16Array.length < count) {
			this.__tempInt16Array = new Int16Array(count);
			if(existingInt16Array != null) {
				this.__tempInt16Array.set(existingInt16Array);
			}
		}
		var _g = startOffset;
		var _g1 = length;
		while(_g < _g1) {
			var i = _g++;
			this.__tempInt16Array[i - startOffset] = data.data.get(i);
		}
		this.uploadFromTypedArray(this.__tempInt16Array);
	}
	,__class__: openfl_display3D_IndexBuffer3D
};
var openfl_display3D_Program3D = function(context3D) {
	this.__context = context3D;
	this.__samplerUsageMask = 0;
	this.__uniforms = [];
	this.__samplerUniforms = [];
	this.__alphaSamplerUniforms = [];
	this.__samplerStates = openfl__$Vector_Vector_$Impl_$.toObjectVector(null,8);
};
$hxClasses["openfl.display3D.Program3D"] = openfl_display3D_Program3D;
openfl_display3D_Program3D.__name__ = "openfl.display3D.Program3D";
openfl_display3D_Program3D.prototype = {
	__uniforms: null
	,__samplerUniforms: null
	,__alphaSamplerUniforms: null
	,__context: null
	,__fragmentShaderID: null
	,__fragmentSource: null
	,__fragmentUniformMap: null
	,__positionScale: null
	,__programID: null
	,__samplerStates: null
	,__samplerUsageMask: null
	,__vertexShaderID: null
	,__vertexSource: null
	,__vertexUniformMap: null
	,dispose: function() {
		var gl = kha_SystemImpl.gl;
		if(this.__programID != null) {
			gl.deleteProgram(this.__programID);
			this.__programID = null;
		}
		if(this.__vertexShaderID != null) {
			gl.deleteShader(this.__vertexShaderID);
			this.__vertexShaderID = null;
		}
		if(this.__fragmentShaderID != null) {
			gl.deleteShader(this.__fragmentShaderID);
			this.__fragmentShaderID = null;
		}
	}
	,upload: function(vertexProgram,fragmentProgram) {
		this.dispose();
		var gl = kha_SystemImpl.gl;
		var samplerStates = [];
		var vertexShaderSource = openfl__$internal_stage3D_AGALConverter.convertToGLSL(gl,vertexProgram,null);
		var fragmentShaderSource = openfl__$internal_stage3D_AGALConverter.convertToGLSL(gl,fragmentProgram,samplerStates);
		if(openfl__$internal_utils_Log.level == 5) {
			openfl__$internal_utils_Log.info(vertexShaderSource,{ fileName : "openfl/display3D/Program3D.hx", lineNumber : 73, className : "openfl.display3D.Program3D", methodName : "upload"});
			openfl__$internal_utils_Log.info(fragmentShaderSource,{ fileName : "openfl/display3D/Program3D.hx", lineNumber : 74, className : "openfl.display3D.Program3D", methodName : "upload"});
		}
		this.__vertexSource = vertexShaderSource;
		this.__fragmentSource = fragmentShaderSource;
		this.__vertexShaderID = gl.createShader(35633);
		gl.shaderSource(this.__vertexShaderID,vertexShaderSource);
		gl.compileShader(this.__vertexShaderID);
		var shaderCompiled = gl.getShaderParameter(this.__vertexShaderID,35713);
		if(shaderCompiled == 0) {
			var vertexInfoLog = gl.getShaderInfoLog(this.__vertexShaderID);
			if(vertexInfoLog != null && vertexInfoLog.length != 0) {
				haxe_Log.trace("vertex: " + vertexInfoLog,{ fileName : "openfl/display3D/Program3D.hx", lineNumber : 88, className : "openfl.display3D.Program3D", methodName : "upload"});
			}
			throw new js__$Boot_HaxeError(new openfl_errors_Error("Error compiling vertex shader: " + vertexInfoLog));
		}
		this.__fragmentShaderID = gl.createShader(35632);
		gl.shaderSource(this.__fragmentShaderID,fragmentShaderSource);
		gl.compileShader(this.__fragmentShaderID);
		var fragmentCompiled = gl.getShaderParameter(this.__fragmentShaderID,35713);
		if(fragmentCompiled == 0) {
			var fragmentInfoLog = gl.getShaderInfoLog(this.__fragmentShaderID);
			if(fragmentInfoLog != null && fragmentInfoLog.length != 0) {
				haxe_Log.trace("fragment: " + fragmentInfoLog,{ fileName : "openfl/display3D/Program3D.hx", lineNumber : 101, className : "openfl.display3D.Program3D", methodName : "upload"});
			}
			throw new js__$Boot_HaxeError(new openfl_errors_Error("Error compiling fragment shader: " + fragmentInfoLog));
		}
		this.__programID = gl.createProgram();
		gl.attachShader(this.__programID,this.__vertexShaderID);
		gl.attachShader(this.__programID,this.__fragmentShaderID);
		var _g = 0;
		while(_g < 16) {
			var i = _g++;
			var name = "va" + i;
			if(vertexShaderSource.indexOf(" " + name) != -1) {
				gl.bindAttribLocation(this.__programID,i,name);
			}
		}
		gl.linkProgram(this.__programID);
		var infoLog = gl.getProgramInfoLog(this.__programID);
		if(infoLog != null && StringTools.trim(infoLog) != "") {
			haxe_Log.trace("program: " + infoLog,{ fileName : "openfl/display3D/Program3D.hx", lineNumber : 121, className : "openfl.display3D.Program3D", methodName : "upload"});
		}
		this.__buildUniformList();
		var _g1 = 0;
		var _g2 = samplerStates.length;
		while(_g1 < _g2) {
			var i1 = _g1++;
			this.__samplerStates.data.set(i1,samplerStates[i1]);
		}
	}
	,__buildUniformList: function() {
		this.__uniforms = [];
		this.__samplerUniforms = [];
		this.__alphaSamplerUniforms = [];
		this.__samplerUsageMask = 0;
		var gl = kha_SystemImpl.gl;
		var numActive = gl.getProgramParameter(this.__programID,35718);
		var vertexUniforms = [];
		var fragmentUniforms = [];
		var _g = 0;
		var _g1 = numActive;
		while(_g < _g1) {
			var i = _g++;
			var info = gl.getActiveUniform(this.__programID,i);
			var name = info.name;
			var size = info.size;
			var uniformType = info.type;
			var uniform = new openfl_display3D_Uniform(gl);
			uniform.name = name;
			uniform.size = size;
			uniform.type = uniformType;
			uniform.location = gl.getUniformLocation(this.__programID,uniform.name);
			var indexBracket = uniform.name.indexOf("[");
			if(indexBracket >= 0) {
				uniform.name = uniform.name.substring(0,indexBracket);
			}
			var tmp;
			switch(uniformType) {
			case 35674:
				tmp = 2;
				break;
			case 35675:
				tmp = 3;
				break;
			case 35676:
				tmp = 4;
				break;
			default:
				tmp = 1;
			}
			uniform.regCount = tmp;
			uniform.regCount *= uniform.size;
			this.__uniforms.push(uniform);
			if(uniform.name == "vcPositionScale") {
				this.__positionScale = uniform;
			} else if(StringTools.startsWith(uniform.name,"vc")) {
				uniform.regIndex = Std.parseInt(uniform.name.substring(2));
				uniform.regData = this.__context.__vertexConstants;
				vertexUniforms.push(uniform);
			} else if(StringTools.startsWith(uniform.name,"fc")) {
				uniform.regIndex = Std.parseInt(uniform.name.substring(2));
				uniform.regData = this.__context.__fragmentConstants;
				fragmentUniforms.push(uniform);
			} else if(StringTools.startsWith(uniform.name,"sampler") && !StringTools.endsWith(uniform.name,"_alpha")) {
				uniform.regIndex = Std.parseInt(uniform.name.substring(7));
				this.__samplerUniforms.push(uniform);
				var _g2 = 0;
				var _g11 = uniform.regCount;
				while(_g2 < _g11) {
					var reg = _g2++;
					this.__samplerUsageMask |= 1 << uniform.regIndex + reg;
				}
			} else if(StringTools.startsWith(uniform.name,"sampler") && StringTools.endsWith(uniform.name,"_alpha")) {
				var len = uniform.name.indexOf("_") - 7;
				uniform.regIndex = Std.parseInt(uniform.name.substring(7,7 + len)) + 4;
				this.__alphaSamplerUniforms.push(uniform);
			}
			if(openfl__$internal_utils_Log.level == 5) {
				haxe_Log.trace("" + i + " name:" + uniform.name + " type:" + uniform.type + " size:" + uniform.size + " location:" + Std.string(uniform.location),{ fileName : "openfl/display3D/Program3D.hx", lineNumber : 195, className : "openfl.display3D.Program3D", methodName : "__buildUniformList"});
			}
		}
		this.__vertexUniformMap = new openfl_display3D_UniformMap(vertexUniforms);
		this.__fragmentUniformMap = new openfl_display3D_UniformMap(fragmentUniforms);
	}
	,__flush: function() {
		this.__vertexUniformMap.flush();
		this.__fragmentUniformMap.flush();
	}
	,__getSamplerState: function(sampler) {
		return this.__samplerStates.data.get(sampler);
	}
	,__markDirty: function(isVertex,index,count) {
		if(isVertex) {
			this.__vertexUniformMap.markDirty(index,count);
		} else {
			this.__fragmentUniformMap.markDirty(index,count);
		}
	}
	,__setPositionScale: function(positionScale) {
		if(this.__positionScale != null) {
			kha_SystemImpl.gl.uniform4fv(this.__positionScale.location,positionScale);
		}
	}
	,__setSamplerState: function(sampler,state) {
		this.__samplerStates.data.set(sampler,state);
	}
	,__use: function() {
		var gl = kha_SystemImpl.gl;
		gl.useProgram(this.__programID);
		this.__vertexUniformMap.markAllDirty();
		this.__fragmentUniformMap.markAllDirty();
		var _g = 0;
		var _g1 = this.__samplerUniforms;
		while(_g < _g1.length) {
			var sampler = _g1[_g];
			++_g;
			if(sampler.regCount == 1) {
				gl.uniform1i(sampler.location,sampler.regIndex);
			} else {
				throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("!!! TODO: uniform location on webgl"));
			}
		}
		var _g2 = 0;
		var _g3 = this.__alphaSamplerUniforms;
		while(_g2 < _g3.length) {
			var sampler1 = _g3[_g2];
			++_g2;
			if(sampler1.regCount == 1) {
				gl.uniform1i(sampler1.location,sampler1.regIndex);
			} else {
				throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("!!! TODO: uniform location on webgl"));
			}
		}
	}
	,__class__: openfl_display3D_Program3D
};
var openfl_display3D_Uniform = function(gl) {
	this.gl = gl;
	this.isDirty = true;
};
$hxClasses["openfl.display3D.Uniform"] = openfl_display3D_Uniform;
openfl_display3D_Uniform.__name__ = "openfl.display3D.Uniform";
openfl_display3D_Uniform.prototype = {
	name: null
	,location: null
	,type: null
	,size: null
	,regData: null
	,regIndex: null
	,regCount: null
	,isDirty: null
	,gl: null
	,flush: function() {
		var index = this.regIndex * 4;
		switch(this.type) {
		case 35664:
			this.gl.uniform2fv(this.location,this.regData.subarray(index,index + this.regCount * 2));
			break;
		case 35665:
			this.gl.uniform3fv(this.location,this.regData.subarray(index,index + this.regCount * 3));
			break;
		case 35666:
			this.gl.uniform4fv(this.location,this.regData.subarray(index,index + this.regCount * 4));
			break;
		case 35674:
			this.gl.uniformMatrix2fv(this.location,false,this.regData.subarray(index,index + this.size * 2 * 2));
			break;
		case 35675:
			this.gl.uniformMatrix3fv(this.location,false,this.regData.subarray(index,index + this.size * 3 * 3));
			break;
		case 35676:
			this.gl.uniformMatrix4fv(this.location,false,this.regData.subarray(index,index + this.size * 4 * 4));
			break;
		default:
			this.gl.uniform4fv(this.location,this.regData.subarray(index,index + this.regCount * 4));
		}
	}
	,__getRegisters: function(index,size) {
		return this.regData.subarray(index,index + size);
	}
	,__class__: openfl_display3D_Uniform
};
var openfl_display3D_UniformMap = function(list) {
	this.__uniforms = list;
	this.__uniforms.sort(function(a,b) {
		return Reflect.compare(a.regIndex,b.regIndex);
	});
	var total = 0;
	var _g = 0;
	var _g1 = this.__uniforms;
	while(_g < _g1.length) {
		var uniform = _g1[_g];
		++_g;
		if(uniform.regIndex + uniform.regCount > total) {
			total = uniform.regIndex + uniform.regCount;
		}
	}
	this.__registerLookup = openfl__$Vector_Vector_$Impl_$.toObjectVector(null,total);
	var _g2 = 0;
	var _g3 = this.__uniforms;
	while(_g2 < _g3.length) {
		var uniform1 = _g3[_g2];
		++_g2;
		var _g21 = 0;
		var _g31 = uniform1.regCount;
		while(_g21 < _g31) {
			var i = _g21++;
			this.__registerLookup.data.set(uniform1.regIndex + i,uniform1);
		}
	}
	this.__anyDirty = this.__allDirty = true;
};
$hxClasses["openfl.display3D.UniformMap"] = openfl_display3D_UniformMap;
openfl_display3D_UniformMap.__name__ = "openfl.display3D.UniformMap";
openfl_display3D_UniformMap.prototype = {
	__allDirty: null
	,__anyDirty: null
	,__registerLookup: null
	,__uniforms: null
	,flush: function() {
		if(this.__anyDirty) {
			var _g = 0;
			var _g1 = this.__uniforms;
			while(_g < _g1.length) {
				var uniform = _g1[_g];
				++_g;
				if(this.__allDirty || uniform.isDirty) {
					uniform.flush();
					uniform.isDirty = false;
				}
			}
			this.__anyDirty = this.__allDirty = false;
		}
	}
	,markAllDirty: function() {
		this.__allDirty = true;
		this.__anyDirty = true;
	}
	,markDirty: function(start,count) {
		if(this.__allDirty) {
			return;
		}
		var end = start + count;
		if(end > this.__registerLookup.data.get_length()) {
			end = this.__registerLookup.data.get_length();
		}
		var index = start;
		while(index < end) {
			var uniform = this.__registerLookup.data.get(index);
			if(uniform != null) {
				uniform.isDirty = true;
				this.__anyDirty = true;
				index = uniform.regIndex + uniform.regCount;
			} else {
				++index;
			}
		}
	}
	,__class__: openfl_display3D_UniformMap
};
var openfl_display3D_VertexBuffer3D = function(context3D,numVertices,dataPerVertex,bufferUsage) {
	this.__context = context3D;
	this.__numVertices = numVertices;
	this.__vertexSize = dataPerVertex;
	this.__stride = dataPerVertex * 4;
	this.__usage = bufferUsage == 0 ? 35048 : 35044;
	this.__id = kha_SystemImpl.gl.createBuffer();
};
$hxClasses["openfl.display3D.VertexBuffer3D"] = openfl_display3D_VertexBuffer3D;
openfl_display3D_VertexBuffer3D.__name__ = "openfl.display3D.VertexBuffer3D";
openfl_display3D_VertexBuffer3D.prototype = {
	__context: null
	,__id: null
	,__numVertices: null
	,__stride: null
	,__tempFloat32Array: null
	,__usage: null
	,__vertexSize: null
	,dispose: function() {
		var gl = kha_SystemImpl.gl;
		if(gl.isBuffer(this.__id)) {
			gl.deleteBuffer(this.__id);
		}
	}
	,uploadFromByteArray: function(data,byteArrayOffset,startVertex,numVertices) {
		var offset = byteArrayOffset + startVertex * this.__stride;
		var length = numVertices * this.__vertexSize;
		this.uploadFromTypedArray(new Float32Array(data.b.bufferValue,offset,length));
	}
	,uploadFromTypedArray: function(data) {
		if(data == null) {
			return;
		}
		var gl = kha_SystemImpl.gl;
		gl.bindBuffer(34962,this.__id);
		gl.bufferData(34962,data,this.__usage);
	}
	,uploadFromVector: function(data,startVertex,numVertices) {
		if(data == null) {
			return;
		}
		var start = startVertex * this.__vertexSize;
		var count = numVertices * this.__vertexSize;
		var length = start + count;
		var existingFloat32Array = this.__tempFloat32Array;
		if(this.__tempFloat32Array == null || this.__tempFloat32Array.length < count) {
			this.__tempFloat32Array = new Float32Array(count);
			if(existingFloat32Array != null) {
				this.__tempFloat32Array.set(existingFloat32Array);
			}
		}
		var _g = start;
		var _g1 = length;
		while(_g < _g1) {
			var i = _g++;
			this.__tempFloat32Array[i - start] = data.data.get(i);
		}
		this.uploadFromTypedArray(this.__tempFloat32Array);
	}
	,__class__: openfl_display3D_VertexBuffer3D
};
var openfl_display3D_textures_TextureBase = function(context) {
	openfl_events_EventDispatcher.call(this);
	this.__context = context;
	var gl = kha_SystemImpl.gl;
	this.__textureData = new openfl__$internal_renderer_opengl_batcher_TextureData(openfl__$internal_renderer_opengl_batcher_TextureData.createImageFromGLTexture(gl.createTexture()));
	this.__textureContext = gl;
	this.__internalFormat = 6408;
	this.__format = 6408;
	if(openfl__$internal_stage3D_GLCompressedTextureFormats.__instance == null) {
		openfl__$internal_stage3D_GLCompressedTextureFormats.__instance = new openfl__$internal_stage3D_GLCompressedTextureFormats(gl);
	}
};
$hxClasses["openfl.display3D.textures.TextureBase"] = openfl_display3D_textures_TextureBase;
openfl_display3D_textures_TextureBase.__name__ = "openfl.display3D.textures.TextureBase";
openfl_display3D_textures_TextureBase.__getImage = function(gl,bitmapData) {
	if(!bitmapData.__isValid || !bitmapData.__prepareImage()) {
		return null;
	}
	var image = bitmapData.image;
	image.sync();
	gl.pixelStorei(37441,1);
	return image;
};
openfl_display3D_textures_TextureBase.__super__ = openfl_events_EventDispatcher;
openfl_display3D_textures_TextureBase.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	__alphaTexture: null
	,__context: null
	,__depthRenderbuffer: null
	,__depthStencilRenderbuffer: null
	,__format: null
	,__framebuffer: null
	,__height: null
	,__internalFormat: null
	,__optimizeForRenderToTexture: null
	,__samplerState: null
	,__stencilRenderbuffer: null
	,__streamingLevels: null
	,__textureContext: null
	,__textureData: null
	,__textureTarget: null
	,__width: null
	,dispose: function() {
		var gl = kha_SystemImpl.gl;
		if(this.__alphaTexture != null) {
			this.__alphaTexture.dispose();
		}
		if(this.__depthStencilRenderbuffer != null) {
			gl.deleteRenderbuffer(this.__depthStencilRenderbuffer);
		}
		if(this.__depthRenderbuffer != null) {
			gl.deleteRenderbuffer(this.__depthRenderbuffer);
		}
		if(this.__stencilRenderbuffer != null) {
			gl.deleteRenderbuffer(this.__stencilRenderbuffer);
		}
		if(this.__framebuffer != null) {
			gl.deleteFramebuffer(this.__framebuffer);
		}
		gl.deleteTexture(this.__textureData.image.texture);
	}
	,__getTexture: function() {
		return this.__textureData;
	}
	,__setSamplerState: function(state) {
		if(!state.equals(this.__samplerState)) {
			this.__applySamplerState(kha_SystemImpl.gl,state);
			this.__samplerState = state;
			this.__samplerState.__samplerDirty = false;
		}
	}
	,__applySamplerState: function(gl,state) {
		gl.texParameteri(this.__textureTarget,10241,state.minFilter);
		gl.texParameteri(this.__textureTarget,10240,state.magFilter);
		gl.texParameteri(this.__textureTarget,10242,state.wrapModeS);
		gl.texParameteri(this.__textureTarget,10243,state.wrapModeT);
		var tmp = state.lodBias != 0.0;
	}
	,__class__: openfl_display3D_textures_TextureBase
});
var openfl_display3D_textures_CubeTexture = function(context,size,format,optimizeForRenderToTexture,streamingLevels) {
	openfl_display3D_textures_TextureBase.call(this,context);
	this.__size = size;
	this.__width = this.__height = this.__size;
	this.__optimizeForRenderToTexture = optimizeForRenderToTexture;
	this.__streamingLevels = streamingLevels;
	this.__textureTarget = 34067;
	this.__uploadedSides = 0;
};
$hxClasses["openfl.display3D.textures.CubeTexture"] = openfl_display3D_textures_CubeTexture;
openfl_display3D_textures_CubeTexture.__name__ = "openfl.display3D.textures.CubeTexture";
openfl_display3D_textures_CubeTexture.__sideToTarget = function(side) {
	switch(side) {
	case 0:
		return 34070;
	case 1:
		return 34069;
	case 2:
		return 34072;
	case 3:
		return 34071;
	case 4:
		return 34074;
	case 5:
		return 34073;
	default:
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
	}
};
openfl_display3D_textures_CubeTexture.__super__ = openfl_display3D_textures_TextureBase;
openfl_display3D_textures_CubeTexture.prototype = $extend(openfl_display3D_textures_TextureBase.prototype,{
	__size: null
	,__uploadedSides: null
	,uploadCompressedTextureFromByteArray: function(data,byteArrayOffset,async) {
		if(async == null) {
			async = false;
		}
		var _gthis = this;
		if(!async) {
			this.__uploadCompressedTextureFromByteArray(data,byteArrayOffset);
		} else {
			haxe_Timer.delay(function() {
				_gthis.__uploadCompressedTextureFromByteArray(data,byteArrayOffset);
				_gthis.dispatchEvent(new openfl_events_Event("textureReady"));
			},1);
		}
	}
	,uploadFromBitmapData: function(source,side,miplevel,generateMipmap) {
		if(generateMipmap == null) {
			generateMipmap = false;
		}
		if(miplevel == null) {
			miplevel = 0;
		}
		if(source == null) {
			return;
		}
		var size = this.__size >> miplevel;
		if(size == 0) {
			return;
		}
		var image = openfl_display3D_textures_TextureBase.__getImage(kha_SystemImpl.gl,source);
		this.uploadFromTypedArray(image.getData(),side,miplevel);
	}
	,uploadFromByteArray: function(data,byteArrayOffset,side,miplevel) {
		if(miplevel == null) {
			miplevel = 0;
		}
		var data1 = byteArrayOffset == 0 ? data.b : new Uint8Array(data.b.bufferValue,byteArrayOffset);
		this.uploadFromTypedArray(data1,side,miplevel);
	}
	,uploadFromTypedArray: function(data,side,miplevel) {
		if(miplevel == null) {
			miplevel = 0;
		}
		if(data == null) {
			return;
		}
		var size = this.__size >> miplevel;
		if(size == 0) {
			return;
		}
		var target = openfl_display3D_textures_CubeTexture.__sideToTarget(side);
		var gl = kha_SystemImpl.gl;
		gl.bindTexture(this.__textureTarget,this.__textureData.image.texture);
		gl.texImage2D(target,miplevel,this.__internalFormat,size,size,0,this.__format,5121,data);
		gl.bindTexture(this.__textureTarget,null);
		this.__uploadedSides |= 1 << side;
	}
	,__applySamplerState: function(gl,state) {
		if(state.minFilter != 9728 && state.minFilter != 9729 && !state.mipmapGenerated) {
			gl.generateMipmap(34067);
			state.mipmapGenerated = true;
		}
		if(state.maxAniso != 0.0) {
			gl.texParameterf(34067,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,state.maxAniso);
		}
		openfl_display3D_textures_TextureBase.prototype.__applySamplerState.call(this,gl,state);
	}
	,__uploadCompressedTextureFromByteArray: function(data,byteArrayOffset) {
		var _gthis = this;
		var reader = new openfl__$internal_stage3D_atf_ATFReader(data,byteArrayOffset);
		var alpha = reader.readHeader(this.__size,this.__size,true);
		var gl = kha_SystemImpl.gl;
		gl.bindTexture(this.__textureTarget,this.__textureData.image.texture);
		var hasTexture = false;
		reader.readTextures(function(side,level,gpuFormat,width,height,bytes) {
			var format = openfl__$internal_stage3D_GLCompressedTextureFormats.__instance.toTextureFormat(alpha,gpuFormat);
			if(format == 0) {
				return;
			}
			hasTexture = true;
			_gthis.__format = format;
			var target = openfl_display3D_textures_CubeTexture.__sideToTarget(side);
			gl.compressedTexImage2D(target,level,_gthis.__internalFormat,width,height,0,bytes);
		});
		if(!hasTexture) {
			var data1 = new Uint8Array(this.__size * this.__size * 4);
			var tmp = openfl_display3D_textures_CubeTexture.__sideToTarget(0);
			gl.texImage2D(tmp,0,this.__internalFormat,this.__size,this.__size,0,this.__format,5121,data1);
			var data2 = new Uint8Array(this.__size * this.__size * 4);
			var tmp1 = openfl_display3D_textures_CubeTexture.__sideToTarget(1);
			gl.texImage2D(tmp1,0,this.__internalFormat,this.__size,this.__size,0,this.__format,5121,data2);
			var data3 = new Uint8Array(this.__size * this.__size * 4);
			var tmp2 = openfl_display3D_textures_CubeTexture.__sideToTarget(2);
			gl.texImage2D(tmp2,0,this.__internalFormat,this.__size,this.__size,0,this.__format,5121,data3);
			var data4 = new Uint8Array(this.__size * this.__size * 4);
			var tmp3 = openfl_display3D_textures_CubeTexture.__sideToTarget(3);
			gl.texImage2D(tmp3,0,this.__internalFormat,this.__size,this.__size,0,this.__format,5121,data4);
			var data5 = new Uint8Array(this.__size * this.__size * 4);
			var tmp4 = openfl_display3D_textures_CubeTexture.__sideToTarget(4);
			gl.texImage2D(tmp4,0,this.__internalFormat,this.__size,this.__size,0,this.__format,5121,data5);
			var data6 = new Uint8Array(this.__size * this.__size * 4);
			var tmp5 = openfl_display3D_textures_CubeTexture.__sideToTarget(5);
			gl.texImage2D(tmp5,0,this.__internalFormat,this.__size,this.__size,0,this.__format,5121,data6);
		}
		gl.bindTexture(this.__textureTarget,null);
	}
	,__class__: openfl_display3D_textures_CubeTexture
});
var openfl_display3D_textures_RectangleTexture = function(context,width,height,format,optimizeForRenderToTexture) {
	openfl_display3D_textures_TextureBase.call(this,context);
	this.__width = width;
	this.__height = height;
	this.__optimizeForRenderToTexture = optimizeForRenderToTexture;
	this.__textureTarget = 3553;
	this.uploadFromTypedArray(null);
};
$hxClasses["openfl.display3D.textures.RectangleTexture"] = openfl_display3D_textures_RectangleTexture;
openfl_display3D_textures_RectangleTexture.__name__ = "openfl.display3D.textures.RectangleTexture";
openfl_display3D_textures_RectangleTexture.__super__ = openfl_display3D_textures_TextureBase;
openfl_display3D_textures_RectangleTexture.prototype = $extend(openfl_display3D_textures_TextureBase.prototype,{
	uploadFromBitmapData: function(source) {
		if(source == null) {
			return;
		}
		var image = openfl_display3D_textures_TextureBase.__getImage(kha_SystemImpl.gl,source);
		if(image == null) {
			return;
		}
		this.uploadFromTypedArray(image.getData());
	}
	,uploadFromByteArray: function(data,byteArrayOffset) {
		var data1 = byteArrayOffset == 0 ? data.b : new Uint8Array(data.b.bufferValue,byteArrayOffset);
		this.uploadFromTypedArray(data1);
	}
	,uploadFromTypedArray: function(data) {
		var gl = kha_SystemImpl.gl;
		gl.bindTexture(this.__textureTarget,this.__textureData.image.texture);
		gl.texImage2D(this.__textureTarget,0,this.__internalFormat,this.__width,this.__height,0,this.__format,5121,data);
		gl.bindTexture(this.__textureTarget,null);
	}
	,__applySamplerState: function(gl,state) {
		if(state.maxAniso != 0.0) {
			gl.texParameterf(3553,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,state.maxAniso);
		}
		openfl_display3D_textures_TextureBase.prototype.__applySamplerState.call(this,gl,state);
	}
	,__class__: openfl_display3D_textures_RectangleTexture
});
var openfl_display3D_textures_Texture = function(context,width,height,format,optimizeForRenderToTexture,streamingLevels) {
	openfl_display3D_textures_TextureBase.call(this,context);
	this.__width = width;
	this.__height = height;
	this.__optimizeForRenderToTexture = optimizeForRenderToTexture;
	this.__streamingLevels = streamingLevels;
	this.__textureTarget = 3553;
	var gl = kha_SystemImpl.gl;
	gl.bindTexture(3553,this.__textureData.image.texture);
	gl.texImage2D(3553,0,this.__internalFormat,width,height,0,this.__format,5121,null);
	gl.bindTexture(3553,null);
};
$hxClasses["openfl.display3D.textures.Texture"] = openfl_display3D_textures_Texture;
openfl_display3D_textures_Texture.__name__ = "openfl.display3D.textures.Texture";
openfl_display3D_textures_Texture.__super__ = openfl_display3D_textures_TextureBase;
openfl_display3D_textures_Texture.prototype = $extend(openfl_display3D_textures_TextureBase.prototype,{
	uploadCompressedTextureFromByteArray: function(data,byteArrayOffset,async) {
		if(async == null) {
			async = false;
		}
		var _gthis = this;
		if(!async) {
			this.__uploadCompressedTextureFromByteArray(data,byteArrayOffset);
		} else {
			haxe_Timer.delay(function() {
				_gthis.__uploadCompressedTextureFromByteArray(data,byteArrayOffset);
				_gthis.dispatchEvent(new openfl_events_Event("textureReady"));
			},1);
		}
	}
	,uploadFromBitmapData: function(source,miplevel,generateMipmap) {
		if(generateMipmap == null) {
			generateMipmap = false;
		}
		if(miplevel == null) {
			miplevel = 0;
		}
		if(source == null) {
			return;
		}
		var width = this.__width >> miplevel;
		var height = this.__height >> miplevel;
		if(width == 0 && height == 0) {
			return;
		}
		if(width == 0) {
			width = 1;
		}
		if(height == 0) {
			height = 1;
		}
		if(source.width != width || source.height != height) {
			var copy = new openfl_display_BitmapData(width,height,true,0);
			copy.draw(source);
			source = copy;
		}
		var image = openfl_display3D_textures_TextureBase.__getImage(kha_SystemImpl.gl,source);
		this.uploadFromTypedArray(image.getData(),miplevel);
	}
	,uploadFromByteArray: function(data,byteArrayOffset,miplevel) {
		if(miplevel == null) {
			miplevel = 0;
		}
		var data1 = byteArrayOffset == 0 ? data.b : new Uint8Array(data.b.bufferValue,byteArrayOffset);
		this.uploadFromTypedArray(data1,miplevel);
	}
	,uploadFromTypedArray: function(data,miplevel) {
		if(miplevel == null) {
			miplevel = 0;
		}
		if(data == null) {
			return;
		}
		var width = this.__width >> miplevel;
		var height = this.__height >> miplevel;
		if(width == 0 && height == 0) {
			return;
		}
		if(width == 0) {
			width = 1;
		}
		if(height == 0) {
			height = 1;
		}
		var gl = kha_SystemImpl.gl;
		gl.bindTexture(this.__textureTarget,this.__textureData.image.texture);
		gl.texImage2D(this.__textureTarget,miplevel,this.__internalFormat,width,height,0,this.__format,5121,data);
		gl.bindTexture(this.__textureTarget,null);
	}
	,__applySamplerState: function(gl,state) {
		if(state.minFilter != 9728 && state.minFilter != 9729 && !state.mipmapGenerated) {
			gl.generateMipmap(3553);
			state.mipmapGenerated = true;
		}
		if(state.maxAniso != 0.0) {
			gl.texParameterf(3553,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,state.maxAniso);
		}
		openfl_display3D_textures_TextureBase.prototype.__applySamplerState.call(this,gl,state);
	}
	,__uploadCompressedTextureFromByteArray: function(data,byteArrayOffset) {
		var _gthis = this;
		var reader = new openfl__$internal_stage3D_atf_ATFReader(data,byteArrayOffset);
		var alpha = reader.readHeader(this.__width,this.__height,false);
		var gl = kha_SystemImpl.gl;
		gl.bindTexture(this.__textureTarget,this.__textureData.image.texture);
		var hasTexture = false;
		reader.readTextures(function(target,level,gpuFormat,width,height,bytes) {
			var format = openfl__$internal_stage3D_GLCompressedTextureFormats.__instance.toTextureFormat(alpha,gpuFormat);
			if(format == 0) {
				return;
			}
			hasTexture = true;
			_gthis.__format = format;
			_gthis.__internalFormat = format;
			gl.compressedTexImage2D(_gthis.__textureTarget,level,_gthis.__internalFormat,width,height,0,bytes);
		});
		if(!hasTexture) {
			var data1 = new Uint8Array(this.__width * this.__height * 4);
			gl.texImage2D(this.__textureTarget,0,this.__internalFormat,this.__width,this.__height,0,this.__format,5121,data1);
		}
		gl.bindTexture(this.__textureTarget,null);
	}
	,__class__: openfl_display3D_textures_Texture
});
var openfl_display3D_textures_VideoTexture = function(context) {
	openfl_display3D_textures_TextureBase.call(this,context);
	this.__textureTarget = 3553;
};
$hxClasses["openfl.display3D.textures.VideoTexture"] = openfl_display3D_textures_VideoTexture;
openfl_display3D_textures_VideoTexture.__name__ = "openfl.display3D.textures.VideoTexture";
openfl_display3D_textures_VideoTexture.__super__ = openfl_display3D_textures_TextureBase;
openfl_display3D_textures_VideoTexture.prototype = $extend(openfl_display3D_textures_TextureBase.prototype,{
	videoHeight: null
	,videoWidth: null
	,__netStream: null
	,attachNetStream: function(netStream) {
		var _gthis = this;
		this.__netStream = netStream;
		if(this.__netStream.__video.readyState == 4) {
			haxe_Timer.delay(function() {
				_gthis.__textureReady();
			},0);
		} else {
			this.__netStream.__video.addEventListener("canplay",function(_) {
				_gthis.__textureReady();
			},false);
		}
	}
	,__getTexture: function() {
		if(!this.__netStream.__video.paused) {
			var gl = kha_SystemImpl.gl;
			gl.bindTexture(this.__textureTarget,this.__textureData.image.texture);
			gl.texImage2D(3553,0,6408,6408,5121,this.__netStream.__video);
		}
		return this.__textureData;
	}
	,__textureReady: function() {
		this.videoWidth = this.__netStream.__video.videoWidth;
		this.videoHeight = this.__netStream.__video.videoHeight;
		this.dispatchEvent(new openfl_events_Event("textureReady"));
	}
	,__class__: openfl_display3D_textures_VideoTexture
});
var openfl_errors_Error = function(message,id) {
	if(id == null) {
		id = 0;
	}
	if(message == null) {
		message = "";
	}
	this.message = message;
	this.errorID = id;
	this.name = "Error";
};
$hxClasses["openfl.errors.Error"] = openfl_errors_Error;
openfl_errors_Error.__name__ = "openfl.errors.Error";
openfl_errors_Error.prototype = {
	errorID: null
	,message: null
	,name: null
	,getStackTrace: function() {
		return haxe_CallStack.toString(haxe_CallStack.exceptionStack());
	}
	,toString: function() {
		if(this.message != null) {
			return this.message;
		} else {
			return "Error";
		}
	}
	,__class__: openfl_errors_Error
};
var openfl_errors_ArgumentError = function(message) {
	if(message == null) {
		message = "";
	}
	openfl_errors_Error.call(this,message);
	this.name = "ArgumentError";
};
$hxClasses["openfl.errors.ArgumentError"] = openfl_errors_ArgumentError;
openfl_errors_ArgumentError.__name__ = "openfl.errors.ArgumentError";
openfl_errors_ArgumentError.__super__ = openfl_errors_Error;
openfl_errors_ArgumentError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_ArgumentError
});
var openfl_errors_IOError = function(message) {
	if(message == null) {
		message = "";
	}
	openfl_errors_Error.call(this,message);
	this.name = "IOError";
};
$hxClasses["openfl.errors.IOError"] = openfl_errors_IOError;
openfl_errors_IOError.__name__ = "openfl.errors.IOError";
openfl_errors_IOError.__super__ = openfl_errors_Error;
openfl_errors_IOError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_IOError
});
var openfl_errors_EOFError = function() {
	openfl_errors_IOError.call(this,"End of file was encountered");
	this.name = "EOFError";
	this.errorID = 2030;
};
$hxClasses["openfl.errors.EOFError"] = openfl_errors_EOFError;
openfl_errors_EOFError.__name__ = "openfl.errors.EOFError";
openfl_errors_EOFError.__super__ = openfl_errors_IOError;
openfl_errors_EOFError.prototype = $extend(openfl_errors_IOError.prototype,{
	__class__: openfl_errors_EOFError
});
var openfl_errors_IllegalOperationError = function(message) {
	if(message == null) {
		message = "";
	}
	openfl_errors_Error.call(this,message,0);
	this.name = "IllegalOperationError";
};
$hxClasses["openfl.errors.IllegalOperationError"] = openfl_errors_IllegalOperationError;
openfl_errors_IllegalOperationError.__name__ = "openfl.errors.IllegalOperationError";
openfl_errors_IllegalOperationError.__super__ = openfl_errors_Error;
openfl_errors_IllegalOperationError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_IllegalOperationError
});
var openfl_errors_RangeError = function(message) {
	if(message == null) {
		message = "";
	}
	openfl_errors_Error.call(this,message,0);
	this.name = "RangeError";
};
$hxClasses["openfl.errors.RangeError"] = openfl_errors_RangeError;
openfl_errors_RangeError.__name__ = "openfl.errors.RangeError";
openfl_errors_RangeError.__super__ = openfl_errors_Error;
openfl_errors_RangeError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_RangeError
});
var openfl_errors_SecurityError = function(message) {
	if(message == null) {
		message = "";
	}
	openfl_errors_Error.call(this,message,0);
	this.name = "SecurityError";
};
$hxClasses["openfl.errors.SecurityError"] = openfl_errors_SecurityError;
openfl_errors_SecurityError.__name__ = "openfl.errors.SecurityError";
openfl_errors_SecurityError.__super__ = openfl_errors_Error;
openfl_errors_SecurityError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_SecurityError
});
var openfl_errors_TypeError = function(message) {
	if(message == null) {
		message = "";
	}
	openfl_errors_Error.call(this,message,0);
	this.name = "TypeError";
};
$hxClasses["openfl.errors.TypeError"] = openfl_errors_TypeError;
openfl_errors_TypeError.__name__ = "openfl.errors.TypeError";
openfl_errors_TypeError.__super__ = openfl_errors_Error;
openfl_errors_TypeError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_TypeError
});
var openfl_events_Event = function(type,bubbles,cancelable) {
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	this.type = type;
	this.bubbles = bubbles;
	this.cancelable = cancelable;
	this.eventPhase = 2;
};
$hxClasses["openfl.events.Event"] = openfl_events_Event;
openfl_events_Event.__name__ = "openfl.events.Event";
openfl_events_Event.prototype = {
	bubbles: null
	,cancelable: null
	,currentTarget: null
	,eventPhase: null
	,target: null
	,type: null
	,__isCanceled: null
	,__isCanceledNow: null
	,__preventDefault: null
	,clone: function() {
		var event = new openfl_events_Event(this.type,this.bubbles,this.cancelable);
		event.eventPhase = this.eventPhase;
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		return event;
	}
	,formatToString: function(className,p1,p2,p3,p4,p5) {
		var parameters = [];
		if(p1 != null) {
			parameters.push(p1);
		}
		if(p2 != null) {
			parameters.push(p2);
		}
		if(p3 != null) {
			parameters.push(p3);
		}
		if(p4 != null) {
			parameters.push(p4);
		}
		if(p5 != null) {
			parameters.push(p5);
		}
		return $bind(this,this.__formatToString).apply(this,[className,parameters]);
	}
	,isDefaultPrevented: function() {
		return this.__preventDefault;
	}
	,preventDefault: function() {
		if(this.cancelable) {
			this.__preventDefault = true;
		}
	}
	,stopImmediatePropagation: function() {
		this.__isCanceled = true;
		this.__isCanceledNow = true;
	}
	,stopPropagation: function() {
		this.__isCanceled = true;
	}
	,toString: function() {
		return this.__formatToString("Event",["type","bubbles","cancelable"]);
	}
	,__formatToString: function(className,parameters) {
		var output = "[" + className;
		var arg = null;
		var _g = 0;
		while(_g < parameters.length) {
			var param = parameters[_g];
			++_g;
			arg = Reflect.field(this,param);
			if(typeof(arg) == "string") {
				output += " " + param + "=\"" + Std.string(arg) + "\"";
			} else {
				output += " " + param + "=" + Std.string(arg);
			}
		}
		output += "]";
		return output;
	}
	,__class__: openfl_events_Event
};
var openfl_events_AccelerometerEvent = function(type,bubbles,cancelable,timestamp,accelerationX,accelerationY,accelerationZ) {
	if(accelerationZ == null) {
		accelerationZ = 0;
	}
	if(accelerationY == null) {
		accelerationY = 0;
	}
	if(accelerationX == null) {
		accelerationX = 0;
	}
	if(timestamp == null) {
		timestamp = 0;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.timestamp = timestamp;
	this.accelerationX = accelerationX;
	this.accelerationY = accelerationY;
	this.accelerationZ = accelerationZ;
};
$hxClasses["openfl.events.AccelerometerEvent"] = openfl_events_AccelerometerEvent;
openfl_events_AccelerometerEvent.__name__ = "openfl.events.AccelerometerEvent";
openfl_events_AccelerometerEvent.__super__ = openfl_events_Event;
openfl_events_AccelerometerEvent.prototype = $extend(openfl_events_Event.prototype,{
	accelerationX: null
	,accelerationY: null
	,accelerationZ: null
	,timestamp: null
	,clone: function() {
		var event = new openfl_events_AccelerometerEvent(this.type,this.bubbles,this.cancelable,this.timestamp,this.accelerationX,this.accelerationY,this.accelerationZ);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("AccelerometerEvent",["type","bubbles","cancelable","timestamp","accelerationX","accelerationY","accelerationZ"]);
	}
	,__class__: openfl_events_AccelerometerEvent
});
var openfl_events_ActivityEvent = function(type,bubbles,cancelable,activating) {
	if(activating == null) {
		activating = false;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.activating = activating;
};
$hxClasses["openfl.events.ActivityEvent"] = openfl_events_ActivityEvent;
openfl_events_ActivityEvent.__name__ = "openfl.events.ActivityEvent";
openfl_events_ActivityEvent.__super__ = openfl_events_Event;
openfl_events_ActivityEvent.prototype = $extend(openfl_events_Event.prototype,{
	activating: null
	,clone: function() {
		var event = new openfl_events_ActivityEvent(this.type,this.bubbles,this.cancelable,this.activating);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("ActivityEvent",["type","bubbles","cancelable","activating"]);
	}
	,__class__: openfl_events_ActivityEvent
});
var openfl_events_TextEvent = function(type,bubbles,cancelable,text) {
	if(text == null) {
		text = "";
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.text = text;
};
$hxClasses["openfl.events.TextEvent"] = openfl_events_TextEvent;
openfl_events_TextEvent.__name__ = "openfl.events.TextEvent";
openfl_events_TextEvent.__super__ = openfl_events_Event;
openfl_events_TextEvent.prototype = $extend(openfl_events_Event.prototype,{
	text: null
	,clone: function() {
		var event = new openfl_events_TextEvent(this.type,this.bubbles,this.cancelable,this.text);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("TextEvent",["type","bubbles","cancelable","text"]);
	}
	,__class__: openfl_events_TextEvent
});
var openfl_events_ErrorEvent = function(type,bubbles,cancelable,text,id) {
	if(id == null) {
		id = 0;
	}
	if(text == null) {
		text = "";
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_TextEvent.call(this,type,bubbles,cancelable,text);
	this.errorID = id;
};
$hxClasses["openfl.events.ErrorEvent"] = openfl_events_ErrorEvent;
openfl_events_ErrorEvent.__name__ = "openfl.events.ErrorEvent";
openfl_events_ErrorEvent.__super__ = openfl_events_TextEvent;
openfl_events_ErrorEvent.prototype = $extend(openfl_events_TextEvent.prototype,{
	errorID: null
	,clone: function() {
		var event = new openfl_events_ErrorEvent(this.type,this.bubbles,this.cancelable,this.text,this.errorID);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("ErrorEvent",["type","bubbles","cancelable","text","errorID"]);
	}
	,__class__: openfl_events_ErrorEvent
});
var openfl_events_AsyncErrorEvent = function(type,bubbles,cancelable,text,error) {
	if(text == null) {
		text = "";
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_ErrorEvent.call(this,type,bubbles,cancelable);
	this.text = text;
	this.error = error;
};
$hxClasses["openfl.events.AsyncErrorEvent"] = openfl_events_AsyncErrorEvent;
openfl_events_AsyncErrorEvent.__name__ = "openfl.events.AsyncErrorEvent";
openfl_events_AsyncErrorEvent.__super__ = openfl_events_ErrorEvent;
openfl_events_AsyncErrorEvent.prototype = $extend(openfl_events_ErrorEvent.prototype,{
	error: null
	,clone: function() {
		var event = new openfl_events_AsyncErrorEvent(this.type,this.bubbles,this.cancelable,this.text,this.error);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("AsyncErrorEvent",["type","bubbles","cancelable","text","error"]);
	}
	,__class__: openfl_events_AsyncErrorEvent
});
var openfl_events_ContextMenuEvent = function(type,bubbles,cancelable,mouseTarget,contextMenuOwner) {
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.mouseTarget = mouseTarget;
	this.contextMenuOwner = contextMenuOwner;
};
$hxClasses["openfl.events.ContextMenuEvent"] = openfl_events_ContextMenuEvent;
openfl_events_ContextMenuEvent.__name__ = "openfl.events.ContextMenuEvent";
openfl_events_ContextMenuEvent.__super__ = openfl_events_Event;
openfl_events_ContextMenuEvent.prototype = $extend(openfl_events_Event.prototype,{
	contextMenuOwner: null
	,mouseTarget: null
	,clone: function() {
		var event = new openfl_events_ContextMenuEvent(this.type,this.bubbles,this.cancelable,this.mouseTarget,this.contextMenuOwner);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("ContextMenuEvent",["type","bubbles","cancelable","mouseTarget","contextMenuOwner"]);
	}
	,__class__: openfl_events_ContextMenuEvent
});
var openfl_events_DataEvent = function(type,bubbles,cancelable,data) {
	if(data == null) {
		data = "";
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_TextEvent.call(this,type,bubbles,cancelable);
	this.data = data;
};
$hxClasses["openfl.events.DataEvent"] = openfl_events_DataEvent;
openfl_events_DataEvent.__name__ = "openfl.events.DataEvent";
openfl_events_DataEvent.__super__ = openfl_events_TextEvent;
openfl_events_DataEvent.prototype = $extend(openfl_events_TextEvent.prototype,{
	data: null
	,clone: function() {
		var event = new openfl_events_DataEvent(this.type,this.bubbles,this.cancelable,this.data);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("DataEvent",["type","bubbles","cancelable","data"]);
	}
	,__class__: openfl_events_DataEvent
});
var openfl_events__$EventDispatcher_DispatchIterator = function(list) {
	this.list = list;
	this.index = list.length;
};
$hxClasses["openfl.events._EventDispatcher.DispatchIterator"] = openfl_events__$EventDispatcher_DispatchIterator;
openfl_events__$EventDispatcher_DispatchIterator.__name__ = "openfl.events._EventDispatcher.DispatchIterator";
openfl_events__$EventDispatcher_DispatchIterator.prototype = {
	active: null
	,index: null
	,isCopy: null
	,list: null
	,copy: function() {
		if(!this.isCopy) {
			this.list = this.list.slice();
			this.isCopy = true;
		}
	}
	,hasNext: function() {
		if(this.index < this.list.length) {
			return true;
		} else {
			this.active = false;
			return false;
		}
	}
	,next: function() {
		return this.list[this.index++];
	}
	,remove: function(listener,listIndex) {
		if(this.active) {
			if(!this.isCopy) {
				if(listIndex < this.index) {
					this.index--;
				}
			} else {
				var _g = this.index;
				var _g1 = this.list.length;
				while(_g < _g1) {
					var i = _g++;
					if(this.list[i] == listener) {
						this.list.splice(i,1);
						break;
					}
				}
			}
		}
	}
	,reset: function(list) {
		this.list = list;
		this.active = true;
		this.isCopy = false;
		this.index = 0;
	}
	,__class__: openfl_events__$EventDispatcher_DispatchIterator
};
var openfl_events__$EventDispatcher_Listener = function(callback,useCapture,priority) {
	this.callback = callback;
	this.useCapture = useCapture;
	this.priority = priority;
};
$hxClasses["openfl.events._EventDispatcher.Listener"] = openfl_events__$EventDispatcher_Listener;
openfl_events__$EventDispatcher_Listener.__name__ = "openfl.events._EventDispatcher.Listener";
openfl_events__$EventDispatcher_Listener.prototype = {
	callback: null
	,priority: null
	,useCapture: null
	,match: function(callback,useCapture) {
		if(Reflect.compareMethods(this.callback,callback)) {
			return this.useCapture == useCapture;
		} else {
			return false;
		}
	}
	,__class__: openfl_events__$EventDispatcher_Listener
};
var openfl_events_FocusEvent = function(type,bubbles,cancelable,relatedObject,shiftKey,keyCode) {
	if(keyCode == null) {
		keyCode = 0;
	}
	if(shiftKey == null) {
		shiftKey = false;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.keyCode = keyCode;
	this.shiftKey = shiftKey;
	this.relatedObject = relatedObject;
};
$hxClasses["openfl.events.FocusEvent"] = openfl_events_FocusEvent;
openfl_events_FocusEvent.__name__ = "openfl.events.FocusEvent";
openfl_events_FocusEvent.__super__ = openfl_events_Event;
openfl_events_FocusEvent.prototype = $extend(openfl_events_Event.prototype,{
	keyCode: null
	,relatedObject: null
	,shiftKey: null
	,clone: function() {
		var event = new openfl_events_FocusEvent(this.type,this.bubbles,this.cancelable,this.relatedObject,this.shiftKey,this.keyCode);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("FocusEvent",["type","bubbles","cancelable","relatedObject","shiftKey","keyCode"]);
	}
	,__class__: openfl_events_FocusEvent
});
var openfl_events_FullScreenEvent = function(type,bubbles,cancelable,fullScreen,interactive) {
	if(interactive == null) {
		interactive = false;
	}
	if(fullScreen == null) {
		fullScreen = false;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_ActivityEvent.call(this,type,bubbles,cancelable);
	this.fullScreen = fullScreen;
	this.interactive = interactive;
};
$hxClasses["openfl.events.FullScreenEvent"] = openfl_events_FullScreenEvent;
openfl_events_FullScreenEvent.__name__ = "openfl.events.FullScreenEvent";
openfl_events_FullScreenEvent.__super__ = openfl_events_ActivityEvent;
openfl_events_FullScreenEvent.prototype = $extend(openfl_events_ActivityEvent.prototype,{
	fullScreen: null
	,interactive: null
	,clone: function() {
		var event = new openfl_events_FullScreenEvent(this.type,this.bubbles,this.cancelable,this.fullScreen,this.interactive);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("FullscreenEvent",["type","bubbles","cancelable","fullscreen","interactive"]);
	}
	,__class__: openfl_events_FullScreenEvent
});
var openfl_events_GameInputEvent = function(type,bubbles,cancelable,device) {
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = true;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.device = device;
};
$hxClasses["openfl.events.GameInputEvent"] = openfl_events_GameInputEvent;
openfl_events_GameInputEvent.__name__ = "openfl.events.GameInputEvent";
openfl_events_GameInputEvent.__super__ = openfl_events_Event;
openfl_events_GameInputEvent.prototype = $extend(openfl_events_Event.prototype,{
	device: null
	,clone: function() {
		var event = new openfl_events_GameInputEvent(this.type,this.bubbles,this.cancelable,this.device);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("GameInputEvent",["type","bubbles","cancelable","device"]);
	}
	,__class__: openfl_events_GameInputEvent
});
var openfl_events_HTTPStatusEvent = function(type,bubbles,cancelable,status,redirected) {
	if(redirected == null) {
		redirected = false;
	}
	if(status == null) {
		status = 0;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	this.status = status;
	this.redirected = redirected;
	openfl_events_Event.call(this,type,bubbles,cancelable);
};
$hxClasses["openfl.events.HTTPStatusEvent"] = openfl_events_HTTPStatusEvent;
openfl_events_HTTPStatusEvent.__name__ = "openfl.events.HTTPStatusEvent";
openfl_events_HTTPStatusEvent.__super__ = openfl_events_Event;
openfl_events_HTTPStatusEvent.prototype = $extend(openfl_events_Event.prototype,{
	redirected: null
	,responseHeaders: null
	,responseURL: null
	,status: null
	,clone: function() {
		var event = new openfl_events_HTTPStatusEvent(this.type,this.bubbles,null,this.status,this.redirected);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("HTTPStatusEvent",["type","bubbles","cancelable","status","redirected"]);
	}
	,__class__: openfl_events_HTTPStatusEvent
});
var openfl_events_IOErrorEvent = function(type,bubbles,cancelable,text,id) {
	if(id == null) {
		id = 0;
	}
	if(text == null) {
		text = "";
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = true;
	}
	openfl_events_ErrorEvent.call(this,type,bubbles,cancelable,text,id);
};
$hxClasses["openfl.events.IOErrorEvent"] = openfl_events_IOErrorEvent;
openfl_events_IOErrorEvent.__name__ = "openfl.events.IOErrorEvent";
openfl_events_IOErrorEvent.__super__ = openfl_events_ErrorEvent;
openfl_events_IOErrorEvent.prototype = $extend(openfl_events_ErrorEvent.prototype,{
	clone: function() {
		var event = new openfl_events_IOErrorEvent(this.type,this.bubbles,this.cancelable,this.text,this.errorID);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("IOErrorEvent",["type","bubbles","cancelable","text","errorID"]);
	}
	,__class__: openfl_events_IOErrorEvent
});
var openfl_events_KeyboardEvent = function(type,bubbles,cancelable,charCodeValue,keyCodeValue,keyLocationValue,ctrlKeyValue,altKeyValue,shiftKeyValue,controlKeyValue,commandKeyValue) {
	if(commandKeyValue == null) {
		commandKeyValue = false;
	}
	if(controlKeyValue == null) {
		controlKeyValue = false;
	}
	if(shiftKeyValue == null) {
		shiftKeyValue = false;
	}
	if(altKeyValue == null) {
		altKeyValue = false;
	}
	if(ctrlKeyValue == null) {
		ctrlKeyValue = false;
	}
	if(keyCodeValue == null) {
		keyCodeValue = 0;
	}
	if(charCodeValue == null) {
		charCodeValue = 0;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.charCode = charCodeValue;
	this.keyCode = keyCodeValue;
	this.keyLocation = keyLocationValue != null ? keyLocationValue : 0;
	this.ctrlKey = ctrlKeyValue;
	this.altKey = altKeyValue;
	this.shiftKey = shiftKeyValue;
	this.controlKey = controlKeyValue;
	this.commandKey = commandKeyValue;
};
$hxClasses["openfl.events.KeyboardEvent"] = openfl_events_KeyboardEvent;
openfl_events_KeyboardEvent.__name__ = "openfl.events.KeyboardEvent";
openfl_events_KeyboardEvent.__super__ = openfl_events_Event;
openfl_events_KeyboardEvent.prototype = $extend(openfl_events_Event.prototype,{
	altKey: null
	,charCode: null
	,ctrlKey: null
	,commandKey: null
	,controlKey: null
	,keyCode: null
	,keyLocation: null
	,shiftKey: null
	,clone: function() {
		var event = new openfl_events_KeyboardEvent(this.type,this.bubbles,this.cancelable,this.charCode,this.keyCode,this.keyLocation,this.ctrlKey,this.altKey,this.shiftKey,this.controlKey,this.commandKey);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("KeyboardEvent",["type","bubbles","cancelable","charCode","keyCode","keyLocation","ctrlKey","altKey","shiftKey"]);
	}
	,__class__: openfl_events_KeyboardEvent
});
var openfl_events_MouseEvent = function(type,bubbles,cancelable,localX,localY,relatedObject,ctrlKey,altKey,shiftKey,buttonDown,delta,commandKey,clickCount) {
	if(clickCount == null) {
		clickCount = 0;
	}
	if(commandKey == null) {
		commandKey = false;
	}
	if(delta == null) {
		delta = 0;
	}
	if(buttonDown == null) {
		buttonDown = false;
	}
	if(shiftKey == null) {
		shiftKey = false;
	}
	if(altKey == null) {
		altKey = false;
	}
	if(ctrlKey == null) {
		ctrlKey = false;
	}
	if(localY == null) {
		localY = 0;
	}
	if(localX == null) {
		localX = 0;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = true;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.shiftKey = shiftKey;
	this.altKey = altKey;
	this.ctrlKey = ctrlKey;
	this.bubbles = bubbles;
	this.relatedObject = relatedObject;
	this.delta = delta;
	this.localX = localX;
	this.localY = localY;
	this.buttonDown = buttonDown;
	this.commandKey = commandKey;
	this.clickCount = clickCount;
	this.isRelatedObjectInaccessible = false;
	this.stageX = NaN;
	this.stageY = NaN;
};
$hxClasses["openfl.events.MouseEvent"] = openfl_events_MouseEvent;
openfl_events_MouseEvent.__name__ = "openfl.events.MouseEvent";
openfl_events_MouseEvent.__create = function(type,stageX,stageY,local,target,delta) {
	if(delta == null) {
		delta = 0;
	}
	var event = new openfl_events_MouseEvent(type,true,false,local.x,local.y,null,openfl_events_MouseEvent.__ctrlKey,openfl_events_MouseEvent.__altKey,openfl_events_MouseEvent.__shiftKey,openfl_events_MouseEvent.__buttonDown,delta,openfl_events_MouseEvent.__commandKey);
	event.stageX = stageX;
	event.stageY = stageY;
	event.target = target;
	return event;
};
openfl_events_MouseEvent.__super__ = openfl_events_Event;
openfl_events_MouseEvent.prototype = $extend(openfl_events_Event.prototype,{
	altKey: null
	,buttonDown: null
	,commandKey: null
	,clickCount: null
	,ctrlKey: null
	,delta: null
	,isRelatedObjectInaccessible: null
	,localX: null
	,localY: null
	,relatedObject: null
	,shiftKey: null
	,stageX: null
	,stageY: null
	,clone: function() {
		var event = new openfl_events_MouseEvent(this.type,this.bubbles,this.cancelable,this.localX,this.localY,this.relatedObject,this.ctrlKey,this.altKey,this.shiftKey,this.buttonDown,this.delta,this.commandKey,this.clickCount);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("MouseEvent",["type","bubbles","cancelable","localX","localY","relatedObject","ctrlKey","altKey","shiftKey","buttonDown","delta"]);
	}
	,updateAfterEvent: function() {
	}
	,__class__: openfl_events_MouseEvent
});
var openfl_events_NetStatusEvent = function(type,bubbles,cancelable,info) {
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	this.info = info;
	openfl_events_Event.call(this,type,bubbles,cancelable);
};
$hxClasses["openfl.events.NetStatusEvent"] = openfl_events_NetStatusEvent;
openfl_events_NetStatusEvent.__name__ = "openfl.events.NetStatusEvent";
openfl_events_NetStatusEvent.__super__ = openfl_events_Event;
openfl_events_NetStatusEvent.prototype = $extend(openfl_events_Event.prototype,{
	info: null
	,clone: function() {
		var event = new openfl_events_NetStatusEvent(this.type,this.bubbles,this.cancelable,this.info);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("NetStatusEvent",["type","bubbles","cancelable","info"]);
	}
	,__class__: openfl_events_NetStatusEvent
});
var openfl_events_ProgressEvent = function(type,bubbles,cancelable,bytesLoaded,bytesTotal) {
	if(bytesTotal == null) {
		bytesTotal = 0;
	}
	if(bytesLoaded == null) {
		bytesLoaded = 0;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.bytesLoaded = bytesLoaded;
	this.bytesTotal = bytesTotal;
};
$hxClasses["openfl.events.ProgressEvent"] = openfl_events_ProgressEvent;
openfl_events_ProgressEvent.__name__ = "openfl.events.ProgressEvent";
openfl_events_ProgressEvent.__super__ = openfl_events_Event;
openfl_events_ProgressEvent.prototype = $extend(openfl_events_Event.prototype,{
	bytesLoaded: null
	,bytesTotal: null
	,clone: function() {
		var event = new openfl_events_ProgressEvent(this.type,this.bubbles,this.cancelable,this.bytesLoaded,this.bytesTotal);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("ProgressEvent",["type","bubbles","cancelable","bytesLoaded","bytesTotal"]);
	}
	,__class__: openfl_events_ProgressEvent
});
var openfl_events_SampleDataEvent = function(type,bubbles,cancelable) {
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	var this1 = new openfl_utils_ByteArrayData(0);
	this.data = this1;
	this.data.__endian = 1;
	this.position = 0.0;
};
$hxClasses["openfl.events.SampleDataEvent"] = openfl_events_SampleDataEvent;
openfl_events_SampleDataEvent.__name__ = "openfl.events.SampleDataEvent";
openfl_events_SampleDataEvent.__super__ = openfl_events_Event;
openfl_events_SampleDataEvent.prototype = $extend(openfl_events_Event.prototype,{
	data: null
	,position: null
	,clone: function() {
		var event = new openfl_events_SampleDataEvent(this.type,this.bubbles,this.cancelable);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("SampleDataEvent",["type","bubbles","cancelable"]);
	}
	,__class__: openfl_events_SampleDataEvent
});
var openfl_events_SecurityErrorEvent = function(type,bubbles,cancelable,text,id) {
	if(id == null) {
		id = 0;
	}
	if(text == null) {
		text = "";
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_ErrorEvent.call(this,type,bubbles,cancelable,text,id);
};
$hxClasses["openfl.events.SecurityErrorEvent"] = openfl_events_SecurityErrorEvent;
openfl_events_SecurityErrorEvent.__name__ = "openfl.events.SecurityErrorEvent";
openfl_events_SecurityErrorEvent.__super__ = openfl_events_ErrorEvent;
openfl_events_SecurityErrorEvent.prototype = $extend(openfl_events_ErrorEvent.prototype,{
	clone: function() {
		var event = new openfl_events_SecurityErrorEvent(this.type,this.bubbles,this.cancelable,this.text,this.errorID);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("SecurityErrorEvent",["type","bubbles","cancelable","text","errorID"]);
	}
	,__class__: openfl_events_SecurityErrorEvent
});
var openfl_events_TimerEvent = function(type,bubbles,cancelable) {
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
};
$hxClasses["openfl.events.TimerEvent"] = openfl_events_TimerEvent;
openfl_events_TimerEvent.__name__ = "openfl.events.TimerEvent";
openfl_events_TimerEvent.__super__ = openfl_events_Event;
openfl_events_TimerEvent.prototype = $extend(openfl_events_Event.prototype,{
	clone: function() {
		var event = new openfl_events_TimerEvent(this.type,this.bubbles,this.cancelable);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("TimerEvent",["type","bubbles","cancelable"]);
	}
	,updateAfterEvent: function() {
	}
	,__class__: openfl_events_TimerEvent
});
var openfl_events_TouchEvent = function(type,bubbles,cancelable,touchPointID,isPrimaryTouchPoint,localX,localY,sizeX,sizeY,pressure,relatedObject,ctrlKey,altKey,shiftKey,commandKey,controlKey,timestamp,touchIntent,samples,isTouchPointCanceled) {
	if(isTouchPointCanceled == null) {
		isTouchPointCanceled = false;
	}
	if(timestamp == null) {
		timestamp = 0;
	}
	if(controlKey == null) {
		controlKey = false;
	}
	if(commandKey == null) {
		commandKey = false;
	}
	if(shiftKey == null) {
		shiftKey = false;
	}
	if(altKey == null) {
		altKey = false;
	}
	if(ctrlKey == null) {
		ctrlKey = false;
	}
	if(pressure == null) {
		pressure = 0;
	}
	if(sizeY == null) {
		sizeY = 0;
	}
	if(sizeX == null) {
		sizeX = 0;
	}
	if(localY == null) {
		localY = 0;
	}
	if(localX == null) {
		localX = 0;
	}
	if(isPrimaryTouchPoint == null) {
		isPrimaryTouchPoint = false;
	}
	if(touchPointID == null) {
		touchPointID = 0;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = true;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.touchPointID = touchPointID;
	this.isPrimaryTouchPoint = isPrimaryTouchPoint;
	this.localX = localX;
	this.localY = localY;
	this.sizeX = sizeX;
	this.sizeY = sizeY;
	this.pressure = pressure;
	this.relatedObject = relatedObject;
	this.ctrlKey = ctrlKey;
	this.altKey = altKey;
	this.shiftKey = shiftKey;
	this.commandKey = commandKey;
	this.controlKey = controlKey;
	this.stageX = NaN;
	this.stageY = NaN;
};
$hxClasses["openfl.events.TouchEvent"] = openfl_events_TouchEvent;
openfl_events_TouchEvent.__name__ = "openfl.events.TouchEvent";
openfl_events_TouchEvent.__create = function(type,stageX,stageY,local,target) {
	var evt = new openfl_events_TouchEvent(type,true,false,0,true,local.x,local.y,1,1,1);
	evt.stageX = stageX;
	evt.stageY = stageY;
	evt.target = target;
	return evt;
};
openfl_events_TouchEvent.__super__ = openfl_events_Event;
openfl_events_TouchEvent.prototype = $extend(openfl_events_Event.prototype,{
	altKey: null
	,commandKey: null
	,controlKey: null
	,ctrlKey: null
	,delta: null
	,isPrimaryTouchPoint: null
	,localX: null
	,localY: null
	,pressure: null
	,relatedObject: null
	,shiftKey: null
	,sizeX: null
	,sizeY: null
	,stageX: null
	,stageY: null
	,touchPointID: null
	,clone: function() {
		var event = new openfl_events_TouchEvent(this.type,this.bubbles,this.cancelable,this.touchPointID,this.isPrimaryTouchPoint,this.localX,this.localY,this.sizeX,this.sizeY,this.pressure,this.relatedObject,this.ctrlKey,this.altKey,this.shiftKey,this.commandKey,this.controlKey);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("TouchEvent",["type","bubbles","cancelable","touchPointID","isPrimaryTouchPoint","localX","localY","sizeX","sizeY","pressure","relatedObject","ctrlKey","altKey","shiftKey","commandKey","controlKey"]);
	}
	,updateAfterEvent: function() {
	}
	,__class__: openfl_events_TouchEvent
});
var openfl_events_UncaughtErrorEvent = function(type,bubbles,cancelable,error) {
	if(cancelable == null) {
		cancelable = true;
	}
	if(bubbles == null) {
		bubbles = true;
	}
	openfl_events_ErrorEvent.call(this,type,bubbles,cancelable);
	this.error = error;
};
$hxClasses["openfl.events.UncaughtErrorEvent"] = openfl_events_UncaughtErrorEvent;
openfl_events_UncaughtErrorEvent.__name__ = "openfl.events.UncaughtErrorEvent";
openfl_events_UncaughtErrorEvent.__super__ = openfl_events_ErrorEvent;
openfl_events_UncaughtErrorEvent.prototype = $extend(openfl_events_ErrorEvent.prototype,{
	error: null
	,clone: function() {
		var event = new openfl_events_UncaughtErrorEvent(this.type,this.bubbles,this.cancelable,this.error);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("UncaughtErrorEvent",["type","bubbles","cancelable","error"]);
	}
	,__class__: openfl_events_UncaughtErrorEvent
});
var openfl_events_UncaughtErrorEvents = function() {
	openfl_events_EventDispatcher.call(this);
};
$hxClasses["openfl.events.UncaughtErrorEvents"] = openfl_events_UncaughtErrorEvents;
openfl_events_UncaughtErrorEvents.__name__ = "openfl.events.UncaughtErrorEvents";
openfl_events_UncaughtErrorEvents.__super__ = openfl_events_EventDispatcher;
openfl_events_UncaughtErrorEvents.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	__class__: openfl_events_UncaughtErrorEvents
});
var openfl_external_ExternalInterface = function() { };
$hxClasses["openfl.external.ExternalInterface"] = openfl_external_ExternalInterface;
openfl_external_ExternalInterface.__name__ = "openfl.external.ExternalInterface";
openfl_external_ExternalInterface.addCallback = function(functionName,closure) {
	kha_SystemImpl.khanvas[functionName] = closure;
};
openfl_external_ExternalInterface.call = function(functionName,p1,p2,p3,p4,p5) {
	if(!new EReg("^\\(.+\\)$","").match(functionName)) {
		var thisArg = functionName.split(".").slice(0,-1).join(".");
		if(thisArg.length > 0) {
			functionName += ".bind(" + thisArg + ")";
		}
	}
	var fn;
	try {
		fn = eval(functionName);
	} catch( e ) {
		haxe_CallStack.lastException = e;
		var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
		return null;
	}
	if(!Reflect.isFunction(fn)) {
		return null;
	}
	if(p1 == null) {
		return fn();
	} else if(p2 == null) {
		return fn(p1);
	} else if(p3 == null) {
		return fn(p1,p2);
	} else if(p4 == null) {
		return fn(p1,p2,p3);
	} else if(p5 == null) {
		return fn(p1,p2,p3,p4);
	} else {
		return fn(p1,p2,p3,p4,p5);
	}
};
var openfl_filters_BitmapFilter = function() {
	this.__bottomExtension = 0;
	this.__leftExtension = 0;
	this.__needSecondBitmapData = true;
	this.__preserveObject = false;
	this.__rightExtension = 0;
	this.__topExtension = 0;
};
$hxClasses["openfl.filters.BitmapFilter"] = openfl_filters_BitmapFilter;
openfl_filters_BitmapFilter.__name__ = "openfl.filters.BitmapFilter";
openfl_filters_BitmapFilter.prototype = {
	__bottomExtension: null
	,__leftExtension: null
	,__needSecondBitmapData: null
	,__preserveObject: null
	,__renderDirty: null
	,__rightExtension: null
	,__topExtension: null
	,clone: function() {
		return new openfl_filters_BitmapFilter();
	}
	,__applyFilter: function(bitmapData,sourceBitmapData,sourceRect,destPoint) {
		return sourceBitmapData;
	}
	,__class__: openfl_filters_BitmapFilter
};
var openfl_filters__$BitmapFilterType_BitmapFilterType_$Impl_$ = {};
$hxClasses["openfl.filters._BitmapFilterType.BitmapFilterType_Impl_"] = openfl_filters__$BitmapFilterType_BitmapFilterType_$Impl_$;
openfl_filters__$BitmapFilterType_BitmapFilterType_$Impl_$.__name__ = "openfl.filters._BitmapFilterType.BitmapFilterType_Impl_";
openfl_filters__$BitmapFilterType_BitmapFilterType_$Impl_$.fromString = function(value) {
	switch(value) {
	case "full":
		return 0;
	case "inner":
		return 1;
	case "outer":
		return 2;
	default:
		return null;
	}
};
openfl_filters__$BitmapFilterType_BitmapFilterType_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 0:
		return "full";
	case 1:
		return "inner";
	case 2:
		return "outer";
	default:
		return null;
	}
};
var openfl_filters_BlurFilter = function(blurX,blurY,quality) {
	if(quality == null) {
		quality = 1;
	}
	if(blurY == null) {
		blurY = 4;
	}
	if(blurX == null) {
		blurX = 4;
	}
	openfl_filters_BitmapFilter.call(this);
	this.set_blurX(blurX);
	this.set_blurY(blurY);
	this.set_quality(quality);
	this.__needSecondBitmapData = true;
	this.__preserveObject = false;
	this.__renderDirty = true;
};
$hxClasses["openfl.filters.BlurFilter"] = openfl_filters_BlurFilter;
openfl_filters_BlurFilter.__name__ = "openfl.filters.BlurFilter";
openfl_filters_BlurFilter.__super__ = openfl_filters_BitmapFilter;
openfl_filters_BlurFilter.prototype = $extend(openfl_filters_BitmapFilter.prototype,{
	__blurX: null
	,__blurY: null
	,__quality: null
	,clone: function() {
		return new openfl_filters_BlurFilter(this.__blurX,this.__blurY,this.__quality);
	}
	,__applyFilter: function(bitmapData,sourceBitmapData,sourceRect,destPoint) {
		var pixelRatio = sourceBitmapData.__pixelRatio;
		var finalImage = openfl__$internal_graphics_utils_ImageDataUtil.gaussianBlur(bitmapData.image,sourceBitmapData.image,sourceRect,destPoint,this.__blurX * pixelRatio,this.__blurY * pixelRatio,this.__quality);
		if(finalImage == bitmapData.image) {
			return bitmapData;
		}
		return sourceBitmapData;
	}
	,get_blurX: function() {
		return this.__blurX;
	}
	,set_blurX: function(value) {
		if(value != this.__blurX) {
			this.__blurX = value;
			this.__renderDirty = true;
			this.__leftExtension = value > 0 ? Math.ceil(value) : 0;
			this.__rightExtension = this.__leftExtension;
		}
		return value;
	}
	,get_blurY: function() {
		return this.__blurY;
	}
	,set_blurY: function(value) {
		if(value != this.__blurY) {
			this.__blurY = value;
			this.__renderDirty = true;
			this.__topExtension = value > 0 ? Math.ceil(value) : 0;
			this.__bottomExtension = this.__topExtension;
		}
		return value;
	}
	,get_quality: function() {
		return this.__quality;
	}
	,set_quality: function(value) {
		if(this.__quality != value) {
			this.__quality = value;
			this.__renderDirty = true;
		}
		return value;
	}
	,__class__: openfl_filters_BlurFilter
	,__properties__: {set_quality:"set_quality",get_quality:"get_quality",set_blurY:"set_blurY",get_blurY:"get_blurY",set_blurX:"set_blurX",get_blurX:"get_blurX"}
});
var openfl_filters_ColorMatrixFilter = function(matrix) {
	openfl_filters_BitmapFilter.call(this);
	this.set_matrix(matrix);
	this.__needSecondBitmapData = false;
};
$hxClasses["openfl.filters.ColorMatrixFilter"] = openfl_filters_ColorMatrixFilter;
openfl_filters_ColorMatrixFilter.__name__ = "openfl.filters.ColorMatrixFilter";
openfl_filters_ColorMatrixFilter.__super__ = openfl_filters_BitmapFilter;
openfl_filters_ColorMatrixFilter.prototype = $extend(openfl_filters_BitmapFilter.prototype,{
	__matrix: null
	,clone: function() {
		return new openfl_filters_ColorMatrixFilter(this.__matrix);
	}
	,__applyFilter: function(destBitmapData,sourceBitmapData,sourceRect,destPoint) {
		var sourceImage = sourceBitmapData.image;
		var image = destBitmapData.image;
		openfl__$internal_graphics_utils_ImageCanvasUtil.convertToData(sourceImage);
		openfl__$internal_graphics_utils_ImageCanvasUtil.convertToData(image);
		var sourceData = sourceImage.getData();
		var destData = image.getData();
		var offsetX = destPoint.x - sourceRect.x | 0;
		var offsetY = destPoint.y - sourceRect.y | 0;
		var sourceStride = sourceBitmapData.width * 4;
		var destStride = destBitmapData.width * 4;
		var sourcePixel;
		var destPixel = 0;
		var sourceOffset;
		var destOffset;
		var _g = sourceRect.y | 0;
		var _g1 = sourceRect.height | 0;
		while(_g < _g1) {
			var row = _g++;
			var _g2 = sourceRect.x | 0;
			var _g11 = sourceRect.width | 0;
			while(_g2 < _g11) {
				var column = _g2++;
				sourceOffset = row * sourceStride + column * 4;
				destOffset = (row + offsetX) * destStride + (column + offsetY) * 4;
				sourcePixel = (sourceData[sourceOffset] & 255) << 24 | (sourceData[sourceOffset + 1] & 255) << 16 | (sourceData[sourceOffset + 2] & 255) << 8 | sourceData[sourceOffset + 3] & 255;
				if((sourcePixel & 255) == 0) {
					destPixel = 0;
				} else {
					var value = Math.max(0,Math.min(this.__matrix[0] * (sourcePixel >>> 24 & 255) + this.__matrix[1] * (sourcePixel >>> 16 & 255) + this.__matrix[2] * (sourcePixel >>> 8 & 255) + this.__matrix[3] * (sourcePixel & 255) + this.__matrix[4],255)) | 0;
					destPixel = (value & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
					var value1 = Math.max(0,Math.min(this.__matrix[5] * (sourcePixel >>> 24 & 255) + this.__matrix[6] * (sourcePixel >>> 16 & 255) + this.__matrix[7] * (sourcePixel >>> 8 & 255) + this.__matrix[8] * (sourcePixel & 255) + this.__matrix[9],255)) | 0;
					destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (value1 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
					var value2 = Math.max(0,Math.min(this.__matrix[10] * (sourcePixel >>> 24 & 255) + this.__matrix[11] * (sourcePixel >>> 16 & 255) + this.__matrix[12] * (sourcePixel >>> 8 & 255) + this.__matrix[13] * (sourcePixel & 255) + this.__matrix[14],255)) | 0;
					destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (value2 & 255) << 8 | destPixel & 255 & 255;
					var value3 = Math.max(0,Math.min(this.__matrix[15] * (sourcePixel >>> 24 & 255) + this.__matrix[16] * (sourcePixel >>> 16 & 255) + this.__matrix[17] * (sourcePixel >>> 8 & 255) + this.__matrix[18] * (sourcePixel & 255) + this.__matrix[19],255)) | 0;
					destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | value3 & 255;
				}
				destData[destOffset] = destPixel >>> 24 & 255;
				destData[destOffset + 1] = destPixel >>> 16 & 255;
				destData[destOffset + 2] = destPixel >>> 8 & 255;
				destData[destOffset + 3] = destPixel & 255;
			}
		}
		destBitmapData.image.dirty = true;
		return destBitmapData;
	}
	,get_matrix: function() {
		return this.__matrix;
	}
	,set_matrix: function(value) {
		if(value == null) {
			value = [1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0];
		}
		return this.__matrix = value;
	}
	,__class__: openfl_filters_ColorMatrixFilter
	,__properties__: {set_matrix:"set_matrix",get_matrix:"get_matrix"}
});
var openfl_filters_ConvolutionFilter = function(matrixX,matrixY,matrix,divisor,bias,preserveAlpha,clamp,color,alpha) {
	if(alpha == null) {
		alpha = 0.0;
	}
	if(color == null) {
		color = 0;
	}
	if(clamp == null) {
		clamp = true;
	}
	if(preserveAlpha == null) {
		preserveAlpha = true;
	}
	if(bias == null) {
		bias = 0.0;
	}
	if(divisor == null) {
		divisor = 1.0;
	}
	if(matrixY == null) {
		matrixY = 0;
	}
	if(matrixX == null) {
		matrixX = 0;
	}
	openfl_filters_BitmapFilter.call(this);
	this.matrixX = matrixX;
	this.matrixY = matrixY;
	this.__matrix = matrix;
	this.divisor = divisor;
	this.bias = bias;
	this.preserveAlpha = preserveAlpha;
	this.clamp = clamp;
	this.color = color;
	this.alpha = alpha;
};
$hxClasses["openfl.filters.ConvolutionFilter"] = openfl_filters_ConvolutionFilter;
openfl_filters_ConvolutionFilter.__name__ = "openfl.filters.ConvolutionFilter";
openfl_filters_ConvolutionFilter.__super__ = openfl_filters_BitmapFilter;
openfl_filters_ConvolutionFilter.prototype = $extend(openfl_filters_BitmapFilter.prototype,{
	alpha: null
	,bias: null
	,clamp: null
	,color: null
	,divisor: null
	,matrixX: null
	,matrixY: null
	,preserveAlpha: null
	,__matrix: null
	,clone: function() {
		return new openfl_filters_ConvolutionFilter(this.matrixX,this.matrixY,this.__matrix,this.divisor,this.bias,this.preserveAlpha,this.clamp,this.color,this.alpha);
	}
	,get_matrix: function() {
		return this.__matrix;
	}
	,set_matrix: function(v) {
		if(v == null) {
			v = [0,0,0,0,1,0,0,0,0];
		}
		if(v.length != 9) {
			throw new js__$Boot_HaxeError("Only a 3x3 matrix is supported");
		}
		return this.__matrix = v;
	}
	,__class__: openfl_filters_ConvolutionFilter
	,__properties__: {set_matrix:"set_matrix",get_matrix:"get_matrix"}
});
var openfl_filters_DropShadowFilter = function(distance,angle,color,alpha,blurX,blurY,strength,quality,inner,knockout,hideObject) {
	if(hideObject == null) {
		hideObject = false;
	}
	if(knockout == null) {
		knockout = false;
	}
	if(inner == null) {
		inner = false;
	}
	if(quality == null) {
		quality = 1;
	}
	if(strength == null) {
		strength = 1;
	}
	if(blurY == null) {
		blurY = 4;
	}
	if(blurX == null) {
		blurX = 4;
	}
	if(alpha == null) {
		alpha = 1;
	}
	if(color == null) {
		color = 0;
	}
	if(angle == null) {
		angle = 45;
	}
	if(distance == null) {
		distance = 4;
	}
	openfl_filters_BitmapFilter.call(this);
	this.__offsetX = 0;
	this.__offsetY = 0;
	this.__distance = distance;
	this.__angle = angle;
	this.__color = color;
	this.__alpha = alpha;
	this.__blurX = blurX;
	this.__blurY = blurY;
	this.__strength = strength;
	this.__quality = quality;
	this.__inner = inner;
	this.__knockout = knockout;
	this.__hideObject = hideObject;
	this.__updateSize();
	this.__needSecondBitmapData = true;
	this.__preserveObject = !this.__hideObject;
	this.__renderDirty = true;
};
$hxClasses["openfl.filters.DropShadowFilter"] = openfl_filters_DropShadowFilter;
openfl_filters_DropShadowFilter.__name__ = "openfl.filters.DropShadowFilter";
openfl_filters_DropShadowFilter.__super__ = openfl_filters_BitmapFilter;
openfl_filters_DropShadowFilter.prototype = $extend(openfl_filters_BitmapFilter.prototype,{
	__alpha: null
	,__angle: null
	,__blurX: null
	,__blurY: null
	,__color: null
	,__distance: null
	,__hideObject: null
	,__inner: null
	,__knockout: null
	,__offsetX: null
	,__offsetY: null
	,__quality: null
	,__strength: null
	,clone: function() {
		return new openfl_filters_DropShadowFilter(this.__distance,this.__angle,this.__color,this.__alpha,this.__blurX,this.__blurY,this.__strength,this.__quality,this.__inner,this.__knockout,this.__hideObject);
	}
	,__applyFilter: function(bitmapData,sourceBitmapData,sourceRect,destPoint) {
		var pixelRatio = sourceBitmapData.__pixelRatio;
		var r = this.__color >> 16 & 255;
		var g = this.__color >> 8 & 255;
		var b = this.__color & 255;
		sourceBitmapData.colorTransform(sourceBitmapData.rect,new openfl_geom_ColorTransform(0,0,0,this.__alpha,r,g,b,0));
		destPoint.x += this.__offsetX;
		destPoint.y += this.__offsetY;
		var finalImage = openfl__$internal_graphics_utils_ImageDataUtil.gaussianBlur(bitmapData.image,sourceBitmapData.image,sourceRect,destPoint,this.__blurX * pixelRatio,this.__blurY * pixelRatio,this.__quality,this.__strength);
		if(finalImage == bitmapData.image) {
			return bitmapData;
		}
		return sourceBitmapData;
	}
	,__updateSize: function() {
		this.__offsetX = this.__distance * Math.cos(this.__angle * Math.PI / 180) | 0;
		this.__offsetY = this.__distance * Math.sin(this.__angle * Math.PI / 180) | 0;
		this.__topExtension = Math.ceil((this.__offsetY < 0 ? -this.__offsetY : 0) + this.__blurY);
		this.__bottomExtension = Math.ceil((this.__offsetY > 0 ? this.__offsetY : 0) + this.__blurY);
		this.__leftExtension = Math.ceil((this.__offsetX < 0 ? -this.__offsetX : 0) + this.__blurX);
		this.__rightExtension = Math.ceil((this.__offsetX > 0 ? this.__offsetX : 0) + this.__blurX);
	}
	,get_alpha: function() {
		return this.__alpha;
	}
	,set_alpha: function(value) {
		if(value != this.__alpha) {
			this.__renderDirty = true;
		}
		return this.__alpha = value;
	}
	,get_angle: function() {
		return this.__angle;
	}
	,set_angle: function(value) {
		if(value != this.__angle) {
			this.__angle = value;
			this.__renderDirty = true;
			this.__updateSize();
		}
		return value;
	}
	,get_blurX: function() {
		return this.__blurX;
	}
	,set_blurX: function(value) {
		if(value != this.__blurX) {
			this.__blurX = value;
			this.__renderDirty = true;
			this.__updateSize();
		}
		return value;
	}
	,get_blurY: function() {
		return this.__blurY;
	}
	,set_blurY: function(value) {
		if(value != this.__blurY) {
			this.__blurY = value;
			this.__renderDirty = true;
			this.__updateSize();
		}
		return value;
	}
	,get_color: function() {
		return this.__color;
	}
	,set_color: function(value) {
		if(value != this.__color) {
			this.__renderDirty = true;
		}
		return this.__color = value;
	}
	,get_distance: function() {
		return this.__distance;
	}
	,set_distance: function(value) {
		if(value != this.__distance) {
			this.__distance = value;
			this.__renderDirty = true;
			this.__updateSize();
		}
		return value;
	}
	,get_hideObject: function() {
		return this.__hideObject;
	}
	,set_hideObject: function(value) {
		if(value != this.__hideObject) {
			this.__renderDirty = true;
			this.__preserveObject = !value;
		}
		return this.__hideObject = value;
	}
	,get_inner: function() {
		return this.__inner;
	}
	,set_inner: function(value) {
		if(value != this.__inner) {
			this.__renderDirty = true;
		}
		return this.__inner = value;
	}
	,get_knockout: function() {
		return this.__knockout;
	}
	,set_knockout: function(value) {
		if(value != this.__knockout) {
			this.__renderDirty = true;
		}
		return this.__knockout = value;
	}
	,get_quality: function() {
		return this.__quality;
	}
	,set_quality: function(value) {
		if(value != this.__quality) {
			this.__renderDirty = true;
		}
		return this.__quality = value;
	}
	,get_strength: function() {
		return this.__strength;
	}
	,set_strength: function(value) {
		if(value != this.__strength) {
			this.__renderDirty = true;
		}
		return this.__strength = value;
	}
	,__class__: openfl_filters_DropShadowFilter
	,__properties__: {set_strength:"set_strength",get_strength:"get_strength",set_quality:"set_quality",get_quality:"get_quality",set_knockout:"set_knockout",get_knockout:"get_knockout",set_inner:"set_inner",get_inner:"get_inner",set_hideObject:"set_hideObject",get_hideObject:"get_hideObject",set_distance:"set_distance",get_distance:"get_distance",set_color:"set_color",get_color:"get_color",set_blurY:"set_blurY",get_blurY:"get_blurY",set_blurX:"set_blurX",get_blurX:"get_blurX",set_angle:"set_angle",get_angle:"get_angle",set_alpha:"set_alpha",get_alpha:"get_alpha"}
});
var openfl_filters_GlowFilter = function(color,alpha,blurX,blurY,strength,quality,inner,knockout) {
	if(knockout == null) {
		knockout = false;
	}
	if(inner == null) {
		inner = false;
	}
	if(quality == null) {
		quality = 1;
	}
	if(strength == null) {
		strength = 2;
	}
	if(blurY == null) {
		blurY = 6;
	}
	if(blurX == null) {
		blurX = 6;
	}
	if(alpha == null) {
		alpha = 1;
	}
	if(color == null) {
		color = 16711680;
	}
	openfl_filters_BitmapFilter.call(this);
	this.__color = color;
	this.__alpha = alpha;
	this.set_blurX(blurX);
	this.set_blurY(blurY);
	this.__strength = strength;
	this.set_quality(quality);
	this.__inner = inner;
	this.__knockout = knockout;
	this.__needSecondBitmapData = true;
	this.__preserveObject = true;
	this.__renderDirty = true;
};
$hxClasses["openfl.filters.GlowFilter"] = openfl_filters_GlowFilter;
openfl_filters_GlowFilter.__name__ = "openfl.filters.GlowFilter";
openfl_filters_GlowFilter.__super__ = openfl_filters_BitmapFilter;
openfl_filters_GlowFilter.prototype = $extend(openfl_filters_BitmapFilter.prototype,{
	__alpha: null
	,__blurX: null
	,__blurY: null
	,__color: null
	,__inner: null
	,__knockout: null
	,__quality: null
	,__strength: null
	,clone: function() {
		return new openfl_filters_GlowFilter(this.__color,this.__alpha,this.__blurX,this.__blurY,this.__strength,this.__quality,this.__inner,this.__knockout);
	}
	,__applyFilter: function(bitmapData,sourceBitmapData,sourceRect,destPoint) {
		var pixelRatio = sourceBitmapData.__pixelRatio;
		var r = this.__color >> 16 & 255;
		var g = this.__color >> 8 & 255;
		var b = this.__color & 255;
		sourceBitmapData.colorTransform(sourceBitmapData.rect,new openfl_geom_ColorTransform(0,0,0,this.__alpha,r,g,b,0));
		var finalImage = openfl__$internal_graphics_utils_ImageDataUtil.gaussianBlur(bitmapData.image,sourceBitmapData.image,sourceRect,destPoint,this.__blurX * pixelRatio,this.__blurY * pixelRatio,this.__quality,this.__strength);
		if(finalImage == bitmapData.image) {
			return bitmapData;
		}
		return sourceBitmapData;
	}
	,get_alpha: function() {
		return this.__alpha;
	}
	,set_alpha: function(value) {
		if(value != this.__alpha) {
			this.__renderDirty = true;
		}
		return this.__alpha = value;
	}
	,get_blurX: function() {
		return this.__blurX;
	}
	,set_blurX: function(value) {
		if(value != this.__blurX) {
			this.__blurX = value;
			this.__renderDirty = true;
			this.__leftExtension = value > 0 ? Math.ceil(value) : 0;
			this.__rightExtension = this.__leftExtension;
		}
		return value;
	}
	,get_blurY: function() {
		return this.__blurY;
	}
	,set_blurY: function(value) {
		if(value != this.__blurY) {
			this.__blurY = value;
			this.__renderDirty = true;
			this.__topExtension = value > 0 ? Math.ceil(value) : 0;
			this.__bottomExtension = this.__topExtension;
		}
		return value;
	}
	,get_color: function() {
		return this.__color;
	}
	,set_color: function(value) {
		if(value != this.__color) {
			this.__renderDirty = true;
		}
		return this.__color = value;
	}
	,get_inner: function() {
		return this.__inner;
	}
	,set_inner: function(value) {
		if(value != this.__inner) {
			this.__renderDirty = true;
		}
		return this.__inner = value;
	}
	,get_knockout: function() {
		return this.__knockout;
	}
	,set_knockout: function(value) {
		if(value != this.__knockout) {
			this.__renderDirty = true;
		}
		return this.__knockout = value;
	}
	,get_quality: function() {
		return this.__quality;
	}
	,set_quality: function(value) {
		if(this.__quality != value) {
			this.__quality = value;
			this.__renderDirty = true;
		}
		return value;
	}
	,get_strength: function() {
		return this.__strength;
	}
	,set_strength: function(value) {
		if(value != this.__strength) {
			this.__renderDirty = true;
		}
		return this.__strength = value;
	}
	,__class__: openfl_filters_GlowFilter
	,__properties__: {set_strength:"set_strength",get_strength:"get_strength",set_quality:"set_quality",get_quality:"get_quality",set_knockout:"set_knockout",get_knockout:"get_knockout",set_inner:"set_inner",get_inner:"get_inner",set_color:"set_color",get_color:"get_color",set_blurY:"set_blurY",get_blurY:"get_blurY",set_blurX:"set_blurX",get_blurX:"get_blurX",set_alpha:"set_alpha",get_alpha:"get_alpha"}
});
var openfl_geom_ColorTransform = function(redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier,redOffset,greenOffset,blueOffset,alphaOffset) {
	if(alphaOffset == null) {
		alphaOffset = 0;
	}
	if(blueOffset == null) {
		blueOffset = 0;
	}
	if(greenOffset == null) {
		greenOffset = 0;
	}
	if(redOffset == null) {
		redOffset = 0;
	}
	if(alphaMultiplier == null) {
		alphaMultiplier = 1;
	}
	if(blueMultiplier == null) {
		blueMultiplier = 1;
	}
	if(greenMultiplier == null) {
		greenMultiplier = 1;
	}
	if(redMultiplier == null) {
		redMultiplier = 1;
	}
	this.redMultiplier = redMultiplier;
	this.greenMultiplier = greenMultiplier;
	this.blueMultiplier = blueMultiplier;
	this.alphaMultiplier = alphaMultiplier;
	this.redOffset = redOffset;
	this.greenOffset = greenOffset;
	this.blueOffset = blueOffset;
	this.alphaOffset = alphaOffset;
};
$hxClasses["openfl.geom.ColorTransform"] = openfl_geom_ColorTransform;
openfl_geom_ColorTransform.__name__ = "openfl.geom.ColorTransform";
openfl_geom_ColorTransform.prototype = {
	alphaMultiplier: null
	,alphaOffset: null
	,blueMultiplier: null
	,blueOffset: null
	,greenMultiplier: null
	,greenOffset: null
	,redMultiplier: null
	,redOffset: null
	,concat: function(second) {
		this.redMultiplier *= second.redMultiplier;
		this.greenMultiplier *= second.greenMultiplier;
		this.blueMultiplier *= second.blueMultiplier;
		this.alphaMultiplier *= second.alphaMultiplier;
		this.redOffset = second.redMultiplier * this.redOffset + second.redOffset;
		this.greenOffset = second.greenMultiplier * this.greenOffset + second.greenOffset;
		this.blueOffset = second.blueMultiplier * this.blueOffset + second.blueOffset;
		this.alphaOffset = second.alphaMultiplier * this.alphaOffset + second.alphaOffset;
	}
	,toString: function() {
		return "(redMultiplier=" + this.redMultiplier + ", greenMultiplier=" + this.greenMultiplier + ", blueMultiplier=" + this.blueMultiplier + ", alphaMultiplier=" + this.alphaMultiplier + ", redOffset=" + this.redOffset + ", greenOffset=" + this.greenOffset + ", blueOffset=" + this.blueOffset + ", alphaOffset=" + this.alphaOffset + ")";
	}
	,__clone: function() {
		return new openfl_geom_ColorTransform(this.redMultiplier,this.greenMultiplier,this.blueMultiplier,this.alphaMultiplier,this.redOffset,this.greenOffset,this.blueOffset,this.alphaOffset);
	}
	,__copyFrom: function(ct) {
		this.redMultiplier = ct.redMultiplier;
		this.greenMultiplier = ct.greenMultiplier;
		this.blueMultiplier = ct.blueMultiplier;
		this.alphaMultiplier = ct.alphaMultiplier;
		this.redOffset = ct.redOffset;
		this.greenOffset = ct.greenOffset;
		this.blueOffset = ct.blueOffset;
		this.alphaOffset = ct.alphaOffset;
	}
	,__combine: function(ct) {
		this.redMultiplier *= ct.redMultiplier;
		this.greenMultiplier *= ct.greenMultiplier;
		this.blueMultiplier *= ct.blueMultiplier;
		this.alphaMultiplier *= ct.alphaMultiplier;
		this.redOffset += ct.redOffset;
		this.greenOffset += ct.greenOffset;
		this.blueOffset += ct.blueOffset;
		this.alphaOffset += ct.alphaOffset;
	}
	,__equals: function(ct) {
		if(ct != null && this.redMultiplier == ct.redMultiplier && this.greenMultiplier == ct.greenMultiplier && this.blueMultiplier == ct.blueMultiplier && this.alphaMultiplier == ct.alphaMultiplier && this.redOffset == ct.redOffset && this.greenOffset == ct.greenOffset && this.blueOffset == ct.blueOffset) {
			return this.alphaOffset == ct.alphaOffset;
		} else {
			return false;
		}
	}
	,__isDefault: function() {
		if(this.redMultiplier == 1 && this.greenMultiplier == 1 && this.blueMultiplier == 1 && this.alphaMultiplier == 1 && this.redOffset == 0 && this.greenOffset == 0 && this.blueOffset == 0) {
			return this.alphaOffset == 0;
		} else {
			return false;
		}
	}
	,get_color: function() {
		return (this.redOffset | 0) << 16 | (this.greenOffset | 0) << 8 | (this.blueOffset | 0);
	}
	,set_color: function(value) {
		this.redOffset = value >> 16 & 255;
		this.greenOffset = value >> 8 & 255;
		this.blueOffset = value & 255;
		this.redMultiplier = 0;
		this.greenMultiplier = 0;
		this.blueMultiplier = 0;
		return value;
	}
	,__class__: openfl_geom_ColorTransform
	,__properties__: {set_color:"set_color",get_color:"get_color"}
};
var openfl_geom_Matrix3D = function(v) {
	if(v != null && v.data.get_length() == 16) {
		var data = null;
		this.rawData = new openfl__$Vector_AbstractVector(v.data.concat(data));
	} else {
		var a = [1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0];
		var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
		var _g = 0;
		var _g1 = a.length;
		while(_g < _g1) {
			var i = _g++;
			vector.data.set(i,a[i]);
		}
		this.rawData = vector;
	}
};
$hxClasses["openfl.geom.Matrix3D"] = openfl_geom_Matrix3D;
openfl_geom_Matrix3D.__name__ = "openfl.geom.Matrix3D";
openfl_geom_Matrix3D.create2D = function(x,y,scale,rotation) {
	if(rotation == null) {
		rotation = 0;
	}
	if(scale == null) {
		scale = 1;
	}
	var theta = rotation * Math.PI / 180.0;
	var c = Math.cos(theta);
	var s = Math.sin(theta);
	var a = [c * scale,-s * scale,0,0,s * scale,c * scale,0,0,0,0,1,0,x,y,0,1];
	var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	var _g = 0;
	var _g1 = a.length;
	while(_g < _g1) {
		var i = _g++;
		vector.data.set(i,a[i]);
	}
	return new openfl_geom_Matrix3D(vector);
};
openfl_geom_Matrix3D.createABCD = function(a,b,c,d,tx,ty) {
	var a1 = [a,b,0,0,c,d,0,0,0,0,1,0,tx,ty,0,1];
	var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	var _g = 0;
	var _g1 = a1.length;
	while(_g < _g1) {
		var i = _g++;
		vector.data.set(i,a1[i]);
	}
	return new openfl_geom_Matrix3D(vector);
};
openfl_geom_Matrix3D.createOrtho = function(x0,x1,y0,y1,zNear,zFar) {
	var sx = 1.0 / (x1 - x0);
	var sy = 1.0 / (y1 - y0);
	var sz = 1.0 / (zFar - zNear);
	var a = [2.0 * sx,0,0,0,0,2.0 * sy,0,0,0,0,-2.0 * sz,0,-(x0 + x1) * sx,-(y0 + y1) * sy,-(zNear + zFar) * sz,1];
	var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	var _g = 0;
	var _g1 = a.length;
	while(_g < _g1) {
		var i = _g++;
		vector.data.set(i,a[i]);
	}
	return new openfl_geom_Matrix3D(vector);
};
openfl_geom_Matrix3D.interpolate = function(thisMat,toMat,percent) {
	var m = new openfl_geom_Matrix3D();
	var _g = 0;
	while(_g < 16) {
		var i = _g++;
		var this1 = m.rawData;
		var value = thisMat.rawData.data.get(i) + (toMat.rawData.data.get(i) - thisMat.rawData.data.get(i)) * percent;
		this1.data.set(i,value);
	}
	return m;
};
openfl_geom_Matrix3D.__getAxisRotation = function(x,y,z,degrees) {
	var m = new openfl_geom_Matrix3D();
	var a1 = new openfl_geom_Vector3D(x,y,z);
	var rad = -degrees * (Math.PI / 180);
	var c = Math.cos(rad);
	var s = Math.sin(rad);
	var t = 1.0 - c;
	m.rawData.data.set(0,c + a1.x * a1.x * t);
	m.rawData.data.set(5,c + a1.y * a1.y * t);
	m.rawData.data.set(10,c + a1.z * a1.z * t);
	var tmp1 = a1.x * a1.y * t;
	var tmp2 = a1.z * s;
	m.rawData.data.set(4,tmp1 + tmp2);
	m.rawData.data.set(1,tmp1 - tmp2);
	tmp1 = a1.x * a1.z * t;
	tmp2 = a1.y * s;
	m.rawData.data.set(8,tmp1 - tmp2);
	m.rawData.data.set(2,tmp1 + tmp2);
	tmp1 = a1.y * a1.z * t;
	tmp2 = a1.x * s;
	m.rawData.data.set(9,tmp1 + tmp2);
	m.rawData.data.set(6,tmp1 - tmp2);
	return m;
};
openfl_geom_Matrix3D.prototype = {
	rawData: null
	,append: function(lhs) {
		var m111 = this.rawData.data.get(0);
		var m121 = this.rawData.data.get(4);
		var m131 = this.rawData.data.get(8);
		var m141 = this.rawData.data.get(12);
		var m112 = this.rawData.data.get(1);
		var m122 = this.rawData.data.get(5);
		var m132 = this.rawData.data.get(9);
		var m142 = this.rawData.data.get(13);
		var m113 = this.rawData.data.get(2);
		var m123 = this.rawData.data.get(6);
		var m133 = this.rawData.data.get(10);
		var m143 = this.rawData.data.get(14);
		var m114 = this.rawData.data.get(3);
		var m124 = this.rawData.data.get(7);
		var m134 = this.rawData.data.get(11);
		var m144 = this.rawData.data.get(15);
		var m211 = lhs.rawData.data.get(0);
		var m221 = lhs.rawData.data.get(4);
		var m231 = lhs.rawData.data.get(8);
		var m241 = lhs.rawData.data.get(12);
		var m212 = lhs.rawData.data.get(1);
		var m222 = lhs.rawData.data.get(5);
		var m232 = lhs.rawData.data.get(9);
		var m242 = lhs.rawData.data.get(13);
		var m213 = lhs.rawData.data.get(2);
		var m223 = lhs.rawData.data.get(6);
		var m233 = lhs.rawData.data.get(10);
		var m243 = lhs.rawData.data.get(14);
		var m214 = lhs.rawData.data.get(3);
		var m224 = lhs.rawData.data.get(7);
		var m234 = lhs.rawData.data.get(11);
		var m244 = lhs.rawData.data.get(15);
		this.rawData.data.set(0,m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241);
		this.rawData.data.set(1,m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242);
		this.rawData.data.set(2,m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243);
		this.rawData.data.set(3,m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244);
		this.rawData.data.set(4,m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241);
		this.rawData.data.set(5,m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242);
		this.rawData.data.set(6,m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243);
		this.rawData.data.set(7,m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244);
		this.rawData.data.set(8,m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241);
		this.rawData.data.set(9,m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242);
		this.rawData.data.set(10,m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243);
		this.rawData.data.set(11,m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244);
		this.rawData.data.set(12,m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241);
		this.rawData.data.set(13,m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242);
		this.rawData.data.set(14,m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243);
		this.rawData.data.set(15,m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244);
	}
	,appendRotation: function(degrees,axis,pivotPoint) {
		var tz = 0;
		var ty = tz;
		var tx = ty;
		if(pivotPoint != null) {
			tx = pivotPoint.x;
			ty = pivotPoint.y;
			tz = pivotPoint.z;
		}
		var radian = degrees * Math.PI / 180;
		var cos = Math.cos(radian);
		var sin = Math.sin(radian);
		var x = axis.x;
		var y = axis.y;
		var z = axis.z;
		var x2 = x * x;
		var y2 = y * y;
		var z2 = z * z;
		var ls = x2 + y2 + z2;
		if(ls != 0) {
			var l = Math.sqrt(ls);
			x /= l;
			y /= l;
			z /= l;
			x2 /= ls;
			y2 /= ls;
			z2 /= ls;
		}
		var ccos = 1 - cos;
		var m = new openfl_geom_Matrix3D();
		var d = m.rawData;
		d.data.set(0,x2 + (y2 + z2) * cos);
		d.data.set(1,x * y * ccos + z * sin);
		d.data.set(2,x * z * ccos - y * sin);
		d.data.set(4,x * y * ccos - z * sin);
		d.data.set(5,y2 + (x2 + z2) * cos);
		d.data.set(6,y * z * ccos + x * sin);
		d.data.set(8,x * z * ccos + y * sin);
		d.data.set(9,y * z * ccos - x * sin);
		d.data.set(10,z2 + (x2 + y2) * cos);
		d.data.set(12,(tx * (y2 + z2) - x * (ty * y + tz * z)) * ccos + (ty * z - tz * y) * sin);
		d.data.set(13,(ty * (x2 + z2) - y * (tx * x + tz * z)) * ccos + (tz * x - tx * z) * sin);
		d.data.set(14,(tz * (x2 + y2) - z * (tx * x + ty * y)) * ccos + (tx * y - ty * x) * sin);
		this.append(m);
	}
	,appendScale: function(xScale,yScale,zScale) {
		var a = [xScale,0.0,0.0,0.0,0.0,yScale,0.0,0.0,0.0,0.0,zScale,0.0,0.0,0.0,0.0,1.0];
		var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
		var _g = 0;
		var _g1 = a.length;
		while(_g < _g1) {
			var i = _g++;
			vector.data.set(i,a[i]);
		}
		this.append(new openfl_geom_Matrix3D(vector));
	}
	,appendTranslation: function(x,y,z) {
		var _g = this.rawData;
		var value = _g.data.get(12) + x;
		_g.data.set(12,value);
		var _g1 = this.rawData;
		var value1 = _g1.data.get(13) + y;
		_g1.data.set(13,value1);
		var _g2 = this.rawData;
		var value2 = _g2.data.get(14) + z;
		_g2.data.set(14,value2);
	}
	,clone: function() {
		return new openfl_geom_Matrix3D(new openfl__$Vector_AbstractVector(this.rawData.data.copy()));
	}
	,copyColumnFrom: function(column,vector3D) {
		switch(column) {
		case 0:
			this.rawData.data.set(0,vector3D.x);
			this.rawData.data.set(1,vector3D.y);
			this.rawData.data.set(2,vector3D.z);
			this.rawData.data.set(3,vector3D.w);
			break;
		case 1:
			this.rawData.data.set(4,vector3D.x);
			this.rawData.data.set(5,vector3D.y);
			this.rawData.data.set(6,vector3D.z);
			this.rawData.data.set(7,vector3D.w);
			break;
		case 2:
			this.rawData.data.set(8,vector3D.x);
			this.rawData.data.set(9,vector3D.y);
			this.rawData.data.set(10,vector3D.z);
			this.rawData.data.set(11,vector3D.w);
			break;
		case 3:
			this.rawData.data.set(12,vector3D.x);
			this.rawData.data.set(13,vector3D.y);
			this.rawData.data.set(14,vector3D.z);
			this.rawData.data.set(15,vector3D.w);
			break;
		default:
		}
	}
	,copyColumnTo: function(column,vector3D) {
		switch(column) {
		case 0:
			vector3D.x = this.rawData.data.get(0);
			vector3D.y = this.rawData.data.get(1);
			vector3D.z = this.rawData.data.get(2);
			vector3D.w = this.rawData.data.get(3);
			break;
		case 1:
			vector3D.x = this.rawData.data.get(4);
			vector3D.y = this.rawData.data.get(5);
			vector3D.z = this.rawData.data.get(6);
			vector3D.w = this.rawData.data.get(7);
			break;
		case 2:
			vector3D.x = this.rawData.data.get(8);
			vector3D.y = this.rawData.data.get(9);
			vector3D.z = this.rawData.data.get(10);
			vector3D.w = this.rawData.data.get(11);
			break;
		case 3:
			vector3D.x = this.rawData.data.get(12);
			vector3D.y = this.rawData.data.get(13);
			vector3D.z = this.rawData.data.get(14);
			vector3D.w = this.rawData.data.get(15);
			break;
		default:
		}
	}
	,copyFrom: function(other) {
		this.rawData = new openfl__$Vector_AbstractVector(other.rawData.data.copy());
	}
	,copyRawDataFrom: function(vector,index,transpose) {
		if(transpose == null) {
			transpose = false;
		}
		if(index == null) {
			index = 0;
		}
		if(transpose) {
			this.transpose();
		}
		var length = vector.data.get_length() - index;
		var _g = 0;
		var _g1 = length;
		while(_g < _g1) {
			var i = _g++;
			var this1 = this.rawData;
			var value = vector.data.get(i + index);
			this1.data.set(i,value);
		}
		if(transpose) {
			this.transpose();
		}
	}
	,copyRawDataTo: function(vector,index,transpose) {
		if(transpose == null) {
			transpose = false;
		}
		if(index == null) {
			index = 0;
		}
		if(transpose) {
			this.transpose();
		}
		var _g = 0;
		var _g1 = this.rawData.data.get_length();
		while(_g < _g1) {
			var i = _g++;
			var value = this.rawData.data.get(i);
			vector.data.set(i + index,value);
		}
		if(transpose) {
			this.transpose();
		}
	}
	,copyRowFrom: function(row,vector3D) {
		switch(row) {
		case 0:
			this.rawData.data.set(0,vector3D.x);
			this.rawData.data.set(4,vector3D.y);
			this.rawData.data.set(8,vector3D.z);
			this.rawData.data.set(12,vector3D.w);
			break;
		case 1:
			this.rawData.data.set(1,vector3D.x);
			this.rawData.data.set(5,vector3D.y);
			this.rawData.data.set(9,vector3D.z);
			this.rawData.data.set(13,vector3D.w);
			break;
		case 2:
			this.rawData.data.set(2,vector3D.x);
			this.rawData.data.set(6,vector3D.y);
			this.rawData.data.set(10,vector3D.z);
			this.rawData.data.set(14,vector3D.w);
			break;
		case 3:
			this.rawData.data.set(3,vector3D.x);
			this.rawData.data.set(7,vector3D.y);
			this.rawData.data.set(11,vector3D.z);
			this.rawData.data.set(15,vector3D.w);
			break;
		default:
		}
	}
	,copyRowTo: function(row,vector3D) {
		switch(row) {
		case 0:
			vector3D.x = this.rawData.data.get(0);
			vector3D.y = this.rawData.data.get(4);
			vector3D.z = this.rawData.data.get(8);
			vector3D.w = this.rawData.data.get(12);
			break;
		case 1:
			vector3D.x = this.rawData.data.get(1);
			vector3D.y = this.rawData.data.get(5);
			vector3D.z = this.rawData.data.get(9);
			vector3D.w = this.rawData.data.get(13);
			break;
		case 2:
			vector3D.x = this.rawData.data.get(2);
			vector3D.y = this.rawData.data.get(6);
			vector3D.z = this.rawData.data.get(10);
			vector3D.w = this.rawData.data.get(14);
			break;
		case 3:
			vector3D.x = this.rawData.data.get(3);
			vector3D.y = this.rawData.data.get(7);
			vector3D.z = this.rawData.data.get(11);
			vector3D.w = this.rawData.data.get(15);
			break;
		default:
		}
	}
	,copyToMatrix3D: function(other) {
		other.rawData = new openfl__$Vector_AbstractVector(this.rawData.data.copy());
	}
	,decompose: function(orientationStyle) {
		if(orientationStyle == null) {
			orientationStyle = 1;
		}
		var vec = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
		var m = this.clone();
		var mr = new openfl__$Vector_AbstractVector(m.rawData.data.copy());
		var pos = new openfl_geom_Vector3D(mr.data.get(12),mr.data.get(13),mr.data.get(14));
		mr.data.set(12,0);
		mr.data.set(13,0);
		mr.data.set(14,0);
		var scale = new openfl_geom_Vector3D();
		scale.x = Math.sqrt(mr.data.get(0) * mr.data.get(0) + mr.data.get(1) * mr.data.get(1) + mr.data.get(2) * mr.data.get(2));
		scale.y = Math.sqrt(mr.data.get(4) * mr.data.get(4) + mr.data.get(5) * mr.data.get(5) + mr.data.get(6) * mr.data.get(6));
		scale.z = Math.sqrt(mr.data.get(8) * mr.data.get(8) + mr.data.get(9) * mr.data.get(9) + mr.data.get(10) * mr.data.get(10));
		if(mr.data.get(0) * (mr.data.get(5) * mr.data.get(10) - mr.data.get(6) * mr.data.get(9)) - mr.data.get(1) * (mr.data.get(4) * mr.data.get(10) - mr.data.get(6) * mr.data.get(8)) + mr.data.get(2) * (mr.data.get(4) * mr.data.get(9) - mr.data.get(5) * mr.data.get(8)) < 0) {
			scale.z = -scale.z;
		}
		var _g = mr;
		var value = _g.data.get(0) / scale.x;
		_g.data.set(0,value);
		var _g1 = mr;
		var value1 = _g1.data.get(1) / scale.x;
		_g1.data.set(1,value1);
		var _g2 = mr;
		var value2 = _g2.data.get(2) / scale.x;
		_g2.data.set(2,value2);
		var _g3 = mr;
		var value3 = _g3.data.get(4) / scale.y;
		_g3.data.set(4,value3);
		var _g4 = mr;
		var value4 = _g4.data.get(5) / scale.y;
		_g4.data.set(5,value4);
		var _g5 = mr;
		var value5 = _g5.data.get(6) / scale.y;
		_g5.data.set(6,value5);
		var _g6 = mr;
		var value6 = _g6.data.get(8) / scale.z;
		_g6.data.set(8,value6);
		var _g7 = mr;
		var value7 = _g7.data.get(9) / scale.z;
		_g7.data.set(9,value7);
		var _g8 = mr;
		var value8 = _g8.data.get(10) / scale.z;
		_g8.data.set(10,value8);
		var rot = new openfl_geom_Vector3D();
		switch(orientationStyle) {
		case 0:
			rot.w = Math.acos((mr.data.get(0) + mr.data.get(5) + mr.data.get(10) - 1) / 2);
			var len = Math.sqrt((mr.data.get(6) - mr.data.get(9)) * (mr.data.get(6) - mr.data.get(9)) + (mr.data.get(8) - mr.data.get(2)) * (mr.data.get(8) - mr.data.get(2)) + (mr.data.get(1) - mr.data.get(4)) * (mr.data.get(1) - mr.data.get(4)));
			if(len != 0) {
				rot.x = (mr.data.get(6) - mr.data.get(9)) / len;
				rot.y = (mr.data.get(8) - mr.data.get(2)) / len;
				rot.z = (mr.data.get(1) - mr.data.get(4)) / len;
			} else {
				rot.x = rot.y = rot.z = 0;
			}
			break;
		case 1:
			rot.y = Math.asin(-mr.data.get(2));
			if(mr.data.get(2) != 1 && mr.data.get(2) != -1) {
				rot.x = Math.atan2(mr.data.get(6),mr.data.get(10));
				rot.z = Math.atan2(mr.data.get(1),mr.data.get(0));
			} else {
				rot.z = 0;
				rot.x = Math.atan2(mr.data.get(4),mr.data.get(5));
			}
			break;
		case 2:
			var tr = mr.data.get(0) + mr.data.get(5) + mr.data.get(10);
			if(tr > 0) {
				rot.w = Math.sqrt(1 + tr) / 2;
				rot.x = (mr.data.get(6) - mr.data.get(9)) / (4 * rot.w);
				rot.y = (mr.data.get(8) - mr.data.get(2)) / (4 * rot.w);
				rot.z = (mr.data.get(1) - mr.data.get(4)) / (4 * rot.w);
			} else if(mr.data.get(0) > mr.data.get(5) && mr.data.get(0) > mr.data.get(10)) {
				rot.x = Math.sqrt(1 + mr.data.get(0) - mr.data.get(5) - mr.data.get(10)) / 2;
				rot.w = (mr.data.get(6) - mr.data.get(9)) / (4 * rot.x);
				rot.y = (mr.data.get(1) + mr.data.get(4)) / (4 * rot.x);
				rot.z = (mr.data.get(8) + mr.data.get(2)) / (4 * rot.x);
			} else if(mr.data.get(5) > mr.data.get(10)) {
				rot.y = Math.sqrt(1 + mr.data.get(5) - mr.data.get(0) - mr.data.get(10)) / 2;
				rot.x = (mr.data.get(1) + mr.data.get(4)) / (4 * rot.y);
				rot.w = (mr.data.get(8) - mr.data.get(2)) / (4 * rot.y);
				rot.z = (mr.data.get(6) + mr.data.get(9)) / (4 * rot.y);
			} else {
				rot.z = Math.sqrt(1 + mr.data.get(10) - mr.data.get(0) - mr.data.get(5)) / 2;
				rot.x = (mr.data.get(8) + mr.data.get(2)) / (4 * rot.z);
				rot.y = (mr.data.get(6) + mr.data.get(9)) / (4 * rot.z);
				rot.w = (mr.data.get(1) - mr.data.get(4)) / (4 * rot.z);
			}
			break;
		}
		vec.data.push(pos);
		vec.data.push(rot);
		vec.data.push(scale);
		return vec;
	}
	,deltaTransformVector: function(v) {
		var x = v.x;
		var y = v.y;
		var z = v.z;
		return new openfl_geom_Vector3D(x * this.rawData.data.get(0) + y * this.rawData.data.get(4) + z * this.rawData.data.get(8) + this.rawData.data.get(3),x * this.rawData.data.get(1) + y * this.rawData.data.get(5) + z * this.rawData.data.get(9) + this.rawData.data.get(7),x * this.rawData.data.get(2) + y * this.rawData.data.get(6) + z * this.rawData.data.get(10) + this.rawData.data.get(11),0);
	}
	,identity: function() {
		var a = [1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0];
		var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
		var _g = 0;
		var _g1 = a.length;
		while(_g < _g1) {
			var i = _g++;
			vector.data.set(i,a[i]);
		}
		this.rawData = vector;
	}
	,interpolateTo: function(toMat,percent) {
		var _g = 0;
		while(_g < 16) {
			var i = _g++;
			var this1 = this.rawData;
			var value = this.rawData.data.get(i) + (toMat.rawData.data.get(i) - this.rawData.data.get(i)) * percent;
			this1.data.set(i,value);
		}
	}
	,invert: function() {
		var d = this.get_determinant();
		var invertable = Math.abs(d) > 0.00000000001;
		if(invertable) {
			d = 1 / d;
			var m11 = this.rawData.data.get(0);
			var m21 = this.rawData.data.get(4);
			var m31 = this.rawData.data.get(8);
			var m41 = this.rawData.data.get(12);
			var m12 = this.rawData.data.get(1);
			var m22 = this.rawData.data.get(5);
			var m32 = this.rawData.data.get(9);
			var m42 = this.rawData.data.get(13);
			var m13 = this.rawData.data.get(2);
			var m23 = this.rawData.data.get(6);
			var m33 = this.rawData.data.get(10);
			var m43 = this.rawData.data.get(14);
			var m14 = this.rawData.data.get(3);
			var m24 = this.rawData.data.get(7);
			var m34 = this.rawData.data.get(11);
			var m44 = this.rawData.data.get(15);
			this.rawData.data.set(0,d * (m22 * (m33 * m44 - m43 * m34) - m32 * (m23 * m44 - m43 * m24) + m42 * (m23 * m34 - m33 * m24)));
			this.rawData.data.set(1,-d * (m12 * (m33 * m44 - m43 * m34) - m32 * (m13 * m44 - m43 * m14) + m42 * (m13 * m34 - m33 * m14)));
			this.rawData.data.set(2,d * (m12 * (m23 * m44 - m43 * m24) - m22 * (m13 * m44 - m43 * m14) + m42 * (m13 * m24 - m23 * m14)));
			this.rawData.data.set(3,-d * (m12 * (m23 * m34 - m33 * m24) - m22 * (m13 * m34 - m33 * m14) + m32 * (m13 * m24 - m23 * m14)));
			this.rawData.data.set(4,-d * (m21 * (m33 * m44 - m43 * m34) - m31 * (m23 * m44 - m43 * m24) + m41 * (m23 * m34 - m33 * m24)));
			this.rawData.data.set(5,d * (m11 * (m33 * m44 - m43 * m34) - m31 * (m13 * m44 - m43 * m14) + m41 * (m13 * m34 - m33 * m14)));
			this.rawData.data.set(6,-d * (m11 * (m23 * m44 - m43 * m24) - m21 * (m13 * m44 - m43 * m14) + m41 * (m13 * m24 - m23 * m14)));
			this.rawData.data.set(7,d * (m11 * (m23 * m34 - m33 * m24) - m21 * (m13 * m34 - m33 * m14) + m31 * (m13 * m24 - m23 * m14)));
			this.rawData.data.set(8,d * (m21 * (m32 * m44 - m42 * m34) - m31 * (m22 * m44 - m42 * m24) + m41 * (m22 * m34 - m32 * m24)));
			this.rawData.data.set(9,-d * (m11 * (m32 * m44 - m42 * m34) - m31 * (m12 * m44 - m42 * m14) + m41 * (m12 * m34 - m32 * m14)));
			this.rawData.data.set(10,d * (m11 * (m22 * m44 - m42 * m24) - m21 * (m12 * m44 - m42 * m14) + m41 * (m12 * m24 - m22 * m14)));
			this.rawData.data.set(11,-d * (m11 * (m22 * m34 - m32 * m24) - m21 * (m12 * m34 - m32 * m14) + m31 * (m12 * m24 - m22 * m14)));
			this.rawData.data.set(12,-d * (m21 * (m32 * m43 - m42 * m33) - m31 * (m22 * m43 - m42 * m23) + m41 * (m22 * m33 - m32 * m23)));
			this.rawData.data.set(13,d * (m11 * (m32 * m43 - m42 * m33) - m31 * (m12 * m43 - m42 * m13) + m41 * (m12 * m33 - m32 * m13)));
			this.rawData.data.set(14,-d * (m11 * (m22 * m43 - m42 * m23) - m21 * (m12 * m43 - m42 * m13) + m41 * (m12 * m23 - m22 * m13)));
			this.rawData.data.set(15,d * (m11 * (m22 * m33 - m32 * m23) - m21 * (m12 * m33 - m32 * m13) + m31 * (m12 * m23 - m22 * m13)));
		}
		return invertable;
	}
	,pointAt: function(pos,at,up) {
		if(at == null) {
			at = new openfl_geom_Vector3D(0,0,-1);
		}
		if(up == null) {
			up = new openfl_geom_Vector3D(0,-1,0);
		}
		var dir = at.subtract(pos);
		var vup = up.clone();
		dir.normalize();
		vup.normalize();
		var dir2 = dir.clone();
		dir2.scaleBy(vup.dotProduct(dir));
		vup = vup.subtract(dir2);
		if(vup.get_length() > 0) {
			vup.normalize();
		} else if(dir.x != 0) {
			vup = new openfl_geom_Vector3D(-dir.y,dir.x,0);
		} else {
			vup = new openfl_geom_Vector3D(1,0,0);
		}
		var right = vup.crossProduct(dir);
		right.normalize();
		this.rawData.data.set(0,right.x);
		this.rawData.data.set(4,right.y);
		this.rawData.data.set(8,right.z);
		this.rawData.data.set(12,0.0);
		this.rawData.data.set(1,vup.x);
		this.rawData.data.set(5,vup.y);
		this.rawData.data.set(9,vup.z);
		this.rawData.data.set(13,0.0);
		this.rawData.data.set(2,dir.x);
		this.rawData.data.set(6,dir.y);
		this.rawData.data.set(10,dir.z);
		this.rawData.data.set(14,0.0);
		this.rawData.data.set(3,pos.x);
		this.rawData.data.set(7,pos.y);
		this.rawData.data.set(11,pos.z);
		this.rawData.data.set(15,1.0);
	}
	,prepend: function(rhs) {
		var m111 = rhs.rawData.data.get(0);
		var m121 = rhs.rawData.data.get(4);
		var m131 = rhs.rawData.data.get(8);
		var m141 = rhs.rawData.data.get(12);
		var m112 = rhs.rawData.data.get(1);
		var m122 = rhs.rawData.data.get(5);
		var m132 = rhs.rawData.data.get(9);
		var m142 = rhs.rawData.data.get(13);
		var m113 = rhs.rawData.data.get(2);
		var m123 = rhs.rawData.data.get(6);
		var m133 = rhs.rawData.data.get(10);
		var m143 = rhs.rawData.data.get(14);
		var m114 = rhs.rawData.data.get(3);
		var m124 = rhs.rawData.data.get(7);
		var m134 = rhs.rawData.data.get(11);
		var m144 = rhs.rawData.data.get(15);
		var m211 = this.rawData.data.get(0);
		var m221 = this.rawData.data.get(4);
		var m231 = this.rawData.data.get(8);
		var m241 = this.rawData.data.get(12);
		var m212 = this.rawData.data.get(1);
		var m222 = this.rawData.data.get(5);
		var m232 = this.rawData.data.get(9);
		var m242 = this.rawData.data.get(13);
		var m213 = this.rawData.data.get(2);
		var m223 = this.rawData.data.get(6);
		var m233 = this.rawData.data.get(10);
		var m243 = this.rawData.data.get(14);
		var m214 = this.rawData.data.get(3);
		var m224 = this.rawData.data.get(7);
		var m234 = this.rawData.data.get(11);
		var m244 = this.rawData.data.get(15);
		this.rawData.data.set(0,m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241);
		this.rawData.data.set(1,m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242);
		this.rawData.data.set(2,m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243);
		this.rawData.data.set(3,m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244);
		this.rawData.data.set(4,m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241);
		this.rawData.data.set(5,m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242);
		this.rawData.data.set(6,m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243);
		this.rawData.data.set(7,m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244);
		this.rawData.data.set(8,m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241);
		this.rawData.data.set(9,m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242);
		this.rawData.data.set(10,m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243);
		this.rawData.data.set(11,m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244);
		this.rawData.data.set(12,m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241);
		this.rawData.data.set(13,m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242);
		this.rawData.data.set(14,m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243);
		this.rawData.data.set(15,m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244);
	}
	,prependRotation: function(degrees,axis,pivotPoint) {
		var tz = 0;
		var ty = tz;
		var tx = ty;
		if(pivotPoint != null) {
			tx = pivotPoint.x;
			ty = pivotPoint.y;
			tz = pivotPoint.z;
		}
		var radian = degrees * Math.PI / 180;
		var cos = Math.cos(radian);
		var sin = Math.sin(radian);
		var x = axis.x;
		var y = axis.y;
		var z = axis.z;
		var x2 = x * x;
		var y2 = y * y;
		var z2 = z * z;
		var ls = x2 + y2 + z2;
		if(ls != 0) {
			var l = Math.sqrt(ls);
			x /= l;
			y /= l;
			z /= l;
			x2 /= ls;
			y2 /= ls;
			z2 /= ls;
		}
		var ccos = 1 - cos;
		var m = new openfl_geom_Matrix3D();
		var d = m.rawData;
		d.data.set(0,x2 + (y2 + z2) * cos);
		d.data.set(1,x * y * ccos + z * sin);
		d.data.set(2,x * z * ccos - y * sin);
		d.data.set(4,x * y * ccos - z * sin);
		d.data.set(5,y2 + (x2 + z2) * cos);
		d.data.set(6,y * z * ccos + x * sin);
		d.data.set(8,x * z * ccos + y * sin);
		d.data.set(9,y * z * ccos - x * sin);
		d.data.set(10,z2 + (x2 + y2) * cos);
		d.data.set(12,(tx * (y2 + z2) - x * (ty * y + tz * z)) * ccos + (ty * z - tz * y) * sin);
		d.data.set(13,(ty * (x2 + z2) - y * (tx * x + tz * z)) * ccos + (tz * x - tx * z) * sin);
		d.data.set(14,(tz * (x2 + y2) - z * (tx * x + ty * y)) * ccos + (tx * y - ty * x) * sin);
		this.prepend(m);
	}
	,prependScale: function(xScale,yScale,zScale) {
		var a = [xScale,0.0,0.0,0.0,0.0,yScale,0.0,0.0,0.0,0.0,zScale,0.0,0.0,0.0,0.0,1.0];
		var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
		var _g = 0;
		var _g1 = a.length;
		while(_g < _g1) {
			var i = _g++;
			vector.data.set(i,a[i]);
		}
		this.prepend(new openfl_geom_Matrix3D(vector));
	}
	,prependTranslation: function(x,y,z) {
		var m = new openfl_geom_Matrix3D();
		m.set_position(new openfl_geom_Vector3D(x,y,z));
		this.prepend(m);
	}
	,recompose: function(components,orientationStyle) {
		if(components.data.get_length() < 3 || components.data.get(2).x == 0 || components.data.get(2).y == 0 || components.data.get(2).z == 0) {
			return false;
		}
		if(orientationStyle == null) {
			orientationStyle = 1;
		}
		this.identity();
		var scale = [];
		scale[0] = scale[1] = scale[2] = components.data.get(2).x;
		scale[4] = scale[5] = scale[6] = components.data.get(2).y;
		scale[8] = scale[9] = scale[10] = components.data.get(2).z;
		if(orientationStyle == null) {
			var x = components.data.get(1).x;
			var y = components.data.get(1).y;
			var z = components.data.get(1).z;
			var w = components.data.get(1).w;
			if(orientationStyle == 0) {
				x *= Math.sin(w / 2);
				y *= Math.sin(w / 2);
				z *= Math.sin(w / 2);
				w = Math.cos(w / 2);
			}
			this.rawData.data.set(0,(1 - 2 * y * y - 2 * z * z) * scale[0]);
			this.rawData.data.set(1,(2 * x * y + 2 * w * z) * scale[1]);
			this.rawData.data.set(2,(2 * x * z - 2 * w * y) * scale[2]);
			this.rawData.data.set(3,0);
			this.rawData.data.set(4,(2 * x * y - 2 * w * z) * scale[4]);
			this.rawData.data.set(5,(1 - 2 * x * x - 2 * z * z) * scale[5]);
			this.rawData.data.set(6,(2 * y * z + 2 * w * x) * scale[6]);
			this.rawData.data.set(7,0);
			this.rawData.data.set(8,(2 * x * z + 2 * w * y) * scale[8]);
			this.rawData.data.set(9,(2 * y * z - 2 * w * x) * scale[9]);
			this.rawData.data.set(10,(1 - 2 * x * x - 2 * y * y) * scale[10]);
			this.rawData.data.set(11,0);
			var this1 = this.rawData;
			var value = components.data.get(0).x;
			this1.data.set(12,value);
			var this2 = this.rawData;
			var value1 = components.data.get(0).y;
			this2.data.set(13,value1);
			var this3 = this.rawData;
			var value2 = components.data.get(0).z;
			this3.data.set(14,value2);
			this.rawData.data.set(15,1);
		} else if(orientationStyle == 1) {
			var cx = Math.cos(components.data.get(1).x);
			var cy = Math.cos(components.data.get(1).y);
			var cz = Math.cos(components.data.get(1).z);
			var sx = Math.sin(components.data.get(1).x);
			var sy = Math.sin(components.data.get(1).y);
			var sz = Math.sin(components.data.get(1).z);
			this.rawData.data.set(0,cy * cz * scale[0]);
			this.rawData.data.set(1,cy * sz * scale[1]);
			this.rawData.data.set(2,-sy * scale[2]);
			this.rawData.data.set(3,0);
			this.rawData.data.set(4,(sx * sy * cz - cx * sz) * scale[4]);
			this.rawData.data.set(5,(sx * sy * sz + cx * cz) * scale[5]);
			this.rawData.data.set(6,sx * cy * scale[6]);
			this.rawData.data.set(7,0);
			this.rawData.data.set(8,(cx * sy * cz + sx * sz) * scale[8]);
			this.rawData.data.set(9,(cx * sy * sz - sx * cz) * scale[9]);
			this.rawData.data.set(10,cx * cy * scale[10]);
			this.rawData.data.set(11,0);
			var this4 = this.rawData;
			var value3 = components.data.get(0).x;
			this4.data.set(12,value3);
			var this5 = this.rawData;
			var value4 = components.data.get(0).y;
			this5.data.set(13,value4);
			var this6 = this.rawData;
			var value5 = components.data.get(0).z;
			this6.data.set(14,value5);
			this.rawData.data.set(15,1);
		} else {
			var x1 = components.data.get(1).x;
			var y1 = components.data.get(1).y;
			var z1 = components.data.get(1).z;
			var w1 = components.data.get(1).w;
			if(orientationStyle == 0) {
				x1 *= Math.sin(w1 / 2);
				y1 *= Math.sin(w1 / 2);
				z1 *= Math.sin(w1 / 2);
				w1 = Math.cos(w1 / 2);
			}
			this.rawData.data.set(0,(1 - 2 * y1 * y1 - 2 * z1 * z1) * scale[0]);
			this.rawData.data.set(1,(2 * x1 * y1 + 2 * w1 * z1) * scale[1]);
			this.rawData.data.set(2,(2 * x1 * z1 - 2 * w1 * y1) * scale[2]);
			this.rawData.data.set(3,0);
			this.rawData.data.set(4,(2 * x1 * y1 - 2 * w1 * z1) * scale[4]);
			this.rawData.data.set(5,(1 - 2 * x1 * x1 - 2 * z1 * z1) * scale[5]);
			this.rawData.data.set(6,(2 * y1 * z1 + 2 * w1 * x1) * scale[6]);
			this.rawData.data.set(7,0);
			this.rawData.data.set(8,(2 * x1 * z1 + 2 * w1 * y1) * scale[8]);
			this.rawData.data.set(9,(2 * y1 * z1 - 2 * w1 * x1) * scale[9]);
			this.rawData.data.set(10,(1 - 2 * x1 * x1 - 2 * y1 * y1) * scale[10]);
			this.rawData.data.set(11,0);
			var this7 = this.rawData;
			var value6 = components.data.get(0).x;
			this7.data.set(12,value6);
			var this8 = this.rawData;
			var value7 = components.data.get(0).y;
			this8.data.set(13,value7);
			var this9 = this.rawData;
			var value8 = components.data.get(0).z;
			this9.data.set(14,value8);
			this.rawData.data.set(15,1);
		}
		if(components.data.get(2).x == 0) {
			this.rawData.data.set(0,1e-15);
		}
		if(components.data.get(2).y == 0) {
			this.rawData.data.set(5,1e-15);
		}
		if(components.data.get(2).z == 0) {
			this.rawData.data.set(10,1e-15);
		}
		return !(components.data.get(2).x == 0 || components.data.get(2).y == 0 || components.data.get(2).y == 0);
	}
	,transformVector: function(v) {
		var x = v.x;
		var y = v.y;
		var z = v.z;
		return new openfl_geom_Vector3D(x * this.rawData.data.get(0) + y * this.rawData.data.get(4) + z * this.rawData.data.get(8) + this.rawData.data.get(12),x * this.rawData.data.get(1) + y * this.rawData.data.get(5) + z * this.rawData.data.get(9) + this.rawData.data.get(13),x * this.rawData.data.get(2) + y * this.rawData.data.get(6) + z * this.rawData.data.get(10) + this.rawData.data.get(14),x * this.rawData.data.get(3) + y * this.rawData.data.get(7) + z * this.rawData.data.get(11) + this.rawData.data.get(15));
	}
	,transformVectors: function(vin,vout) {
		var i = 0;
		var x;
		var y;
		var z;
		while(i + 3 <= vin.data.get_length()) {
			x = vin.data.get(i);
			y = vin.data.get(i + 1);
			z = vin.data.get(i + 2);
			var value = x * this.rawData.data.get(0) + y * this.rawData.data.get(4) + z * this.rawData.data.get(8) + this.rawData.data.get(12);
			vout.data.set(i,value);
			var value1 = x * this.rawData.data.get(1) + y * this.rawData.data.get(5) + z * this.rawData.data.get(9) + this.rawData.data.get(13);
			vout.data.set(i + 1,value1);
			var value2 = x * this.rawData.data.get(2) + y * this.rawData.data.get(6) + z * this.rawData.data.get(10) + this.rawData.data.get(14);
			vout.data.set(i + 2,value2);
			i += 3;
		}
	}
	,transpose: function() {
		var oRawData = new openfl__$Vector_AbstractVector(this.rawData.data.copy());
		var this1 = this.rawData;
		var value = oRawData.data.get(4);
		this1.data.set(1,value);
		var this2 = this.rawData;
		var value1 = oRawData.data.get(8);
		this2.data.set(2,value1);
		var this3 = this.rawData;
		var value2 = oRawData.data.get(12);
		this3.data.set(3,value2);
		var this4 = this.rawData;
		var value3 = oRawData.data.get(1);
		this4.data.set(4,value3);
		var this5 = this.rawData;
		var value4 = oRawData.data.get(9);
		this5.data.set(6,value4);
		var this6 = this.rawData;
		var value5 = oRawData.data.get(13);
		this6.data.set(7,value5);
		var this7 = this.rawData;
		var value6 = oRawData.data.get(2);
		this7.data.set(8,value6);
		var this8 = this.rawData;
		var value7 = oRawData.data.get(6);
		this8.data.set(9,value7);
		var this9 = this.rawData;
		var value8 = oRawData.data.get(14);
		this9.data.set(11,value8);
		var this10 = this.rawData;
		var value9 = oRawData.data.get(3);
		this10.data.set(12,value9);
		var this11 = this.rawData;
		var value10 = oRawData.data.get(7);
		this11.data.set(13,value10);
		var this12 = this.rawData;
		var value11 = oRawData.data.get(11);
		this12.data.set(14,value11);
	}
	,get_determinant: function() {
		return (this.rawData.data.get(0) * this.rawData.data.get(5) - this.rawData.data.get(4) * this.rawData.data.get(1)) * (this.rawData.data.get(10) * this.rawData.data.get(15) - this.rawData.data.get(14) * this.rawData.data.get(11)) - (this.rawData.data.get(0) * this.rawData.data.get(9) - this.rawData.data.get(8) * this.rawData.data.get(1)) * (this.rawData.data.get(6) * this.rawData.data.get(15) - this.rawData.data.get(14) * this.rawData.data.get(7)) + (this.rawData.data.get(0) * this.rawData.data.get(13) - this.rawData.data.get(12) * this.rawData.data.get(1)) * (this.rawData.data.get(6) * this.rawData.data.get(11) - this.rawData.data.get(10) * this.rawData.data.get(7)) + (this.rawData.data.get(4) * this.rawData.data.get(9) - this.rawData.data.get(8) * this.rawData.data.get(5)) * (this.rawData.data.get(2) * this.rawData.data.get(15) - this.rawData.data.get(14) * this.rawData.data.get(3)) - (this.rawData.data.get(4) * this.rawData.data.get(13) - this.rawData.data.get(12) * this.rawData.data.get(5)) * (this.rawData.data.get(2) * this.rawData.data.get(11) - this.rawData.data.get(10) * this.rawData.data.get(3)) + (this.rawData.data.get(8) * this.rawData.data.get(13) - this.rawData.data.get(12) * this.rawData.data.get(9)) * (this.rawData.data.get(2) * this.rawData.data.get(7) - this.rawData.data.get(6) * this.rawData.data.get(3));
	}
	,get_position: function() {
		return new openfl_geom_Vector3D(this.rawData.data.get(12),this.rawData.data.get(13),this.rawData.data.get(14));
	}
	,set_position: function(val) {
		this.rawData.data.set(12,val.x);
		this.rawData.data.set(13,val.y);
		this.rawData.data.set(14,val.z);
		return val;
	}
	,__class__: openfl_geom_Matrix3D
	,__properties__: {set_position:"set_position",get_position:"get_position",get_determinant:"get_determinant"}
};
var openfl_geom__$Orientation3D_Orientation3D_$Impl_$ = {};
$hxClasses["openfl.geom._Orientation3D.Orientation3D_Impl_"] = openfl_geom__$Orientation3D_Orientation3D_$Impl_$;
openfl_geom__$Orientation3D_Orientation3D_$Impl_$.__name__ = "openfl.geom._Orientation3D.Orientation3D_Impl_";
openfl_geom__$Orientation3D_Orientation3D_$Impl_$.fromString = function(value) {
	switch(value) {
	case "axisAngle":
		return 0;
	case "eulerAngles":
		return 1;
	case "quaternion":
		return 2;
	default:
		return null;
	}
};
openfl_geom__$Orientation3D_Orientation3D_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 0:
		return "axisAngle";
	case 1:
		return "eulerAngles";
	case 2:
		return "quaternion";
	default:
		return null;
	}
};
var openfl_geom_PerspectiveProjection = function() {
	this.__fieldOfView = 0;
	this.focalLength = 0;
	this.matrix3D = new openfl_geom_Matrix3D();
	this.projectionCenter = new openfl_geom_Point(openfl_Lib.current.stage.stageWidth / 2,openfl_Lib.current.stage.stageHeight / 2);
};
$hxClasses["openfl.geom.PerspectiveProjection"] = openfl_geom_PerspectiveProjection;
openfl_geom_PerspectiveProjection.__name__ = "openfl.geom.PerspectiveProjection";
openfl_geom_PerspectiveProjection.prototype = {
	focalLength: null
	,projectionCenter: null
	,__fieldOfView: null
	,matrix3D: null
	,toMatrix3D: function() {
		if(this.projectionCenter == null) {
			return null;
		}
		var _mp = this.matrix3D.rawData;
		_mp.data.set(0,this.focalLength);
		_mp.data.set(5,this.focalLength);
		_mp.data.set(11,1.0);
		_mp.data.set(15,0);
		return this.matrix3D;
	}
	,get_fieldOfView: function() {
		return this.__fieldOfView;
	}
	,set_fieldOfView: function(fieldOfView) {
		var p_nFovY = fieldOfView * 0.01745329251994329577;
		this.__fieldOfView = p_nFovY;
		var cotan = 1 / Math.tan(p_nFovY / 2);
		this.focalLength = openfl_Lib.current.stage.stageWidth * (openfl_Lib.current.stage.stageWidth / openfl_Lib.current.stage.stageHeight) / 2 * cotan;
		return this.__fieldOfView;
	}
	,__class__: openfl_geom_PerspectiveProjection
	,__properties__: {set_fieldOfView:"set_fieldOfView",get_fieldOfView:"get_fieldOfView"}
};
var openfl_geom_Point = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
};
$hxClasses["openfl.geom.Point"] = openfl_geom_Point;
openfl_geom_Point.__name__ = "openfl.geom.Point";
openfl_geom_Point.distance = function(pt1,pt2) {
	var dx = pt1.x - pt2.x;
	var dy = pt1.y - pt2.y;
	return Math.sqrt(dx * dx + dy * dy);
};
openfl_geom_Point.interpolate = function(pt1,pt2,f) {
	return new openfl_geom_Point(pt2.x + f * (pt1.x - pt2.x),pt2.y + f * (pt1.y - pt2.y));
};
openfl_geom_Point.polar = function(len,angle) {
	return new openfl_geom_Point(len * Math.cos(angle),len * Math.sin(angle));
};
openfl_geom_Point.prototype = {
	x: null
	,y: null
	,add: function(v) {
		return new openfl_geom_Point(v.x + this.x,v.y + this.y);
	}
	,clone: function() {
		return new openfl_geom_Point(this.x,this.y);
	}
	,copyFrom: function(sourcePoint) {
		this.x = sourcePoint.x;
		this.y = sourcePoint.y;
	}
	,equals: function(toCompare) {
		if(toCompare != null && toCompare.x == this.x) {
			return toCompare.y == this.y;
		} else {
			return false;
		}
	}
	,normalize: function(thickness) {
		if(this.x == 0 && this.y == 0) {
			return;
		} else {
			var norm = thickness / Math.sqrt(this.x * this.x + this.y * this.y);
			this.x *= norm;
			this.y *= norm;
		}
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,setTo: function(xa,ya) {
		this.x = xa;
		this.y = ya;
	}
	,subtract: function(v) {
		return new openfl_geom_Point(this.x - v.x,this.y - v.y);
	}
	,toString: function() {
		return "(x=" + this.x + ", y=" + this.y + ")";
	}
	,__toLimeVector2: function() {
		if(openfl_geom_Point.__limeVector2 == null) {
			openfl_geom_Point.__limeVector2 = new openfl_geom_Point();
		}
		openfl_geom_Point.__limeVector2.setTo(this.x,this.y);
		return openfl_geom_Point.__limeVector2;
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,__class__: openfl_geom_Point
	,__properties__: {get_length:"get_length"}
};
var openfl_geom_Rectangle = function(x,y,width,height) {
	if(height == null) {
		height = 0;
	}
	if(width == null) {
		width = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
};
$hxClasses["openfl.geom.Rectangle"] = openfl_geom_Rectangle;
openfl_geom_Rectangle.__name__ = "openfl.geom.Rectangle";
openfl_geom_Rectangle.prototype = {
	height: null
	,width: null
	,x: null
	,y: null
	,clone: function() {
		return new openfl_geom_Rectangle(this.x,this.y,this.width,this.height);
	}
	,contains: function(x,y) {
		if(x >= this.x && y >= this.y && x < this.get_right()) {
			return y < this.get_bottom();
		} else {
			return false;
		}
	}
	,containsPoint: function(point) {
		return this.contains(point.x,point.y);
	}
	,containsRect: function(rect) {
		if(rect.width <= 0 || rect.height <= 0) {
			if(rect.x > this.x && rect.y > this.y && rect.get_right() < this.get_right()) {
				return rect.get_bottom() < this.get_bottom();
			} else {
				return false;
			}
		} else if(rect.x >= this.x && rect.y >= this.y && rect.get_right() <= this.get_right()) {
			return rect.get_bottom() <= this.get_bottom();
		} else {
			return false;
		}
	}
	,copyFrom: function(sourceRect) {
		this.x = sourceRect.x;
		this.y = sourceRect.y;
		this.width = sourceRect.width;
		this.height = sourceRect.height;
	}
	,equals: function(toCompare) {
		if(toCompare == this) {
			return true;
		} else if(toCompare != null && this.x == toCompare.x && this.y == toCompare.y && this.width == toCompare.width) {
			return this.height == toCompare.height;
		} else {
			return false;
		}
	}
	,inflate: function(dx,dy) {
		this.x -= dx;
		this.width += dx * 2;
		this.y -= dy;
		this.height += dy * 2;
	}
	,inflatePoint: function(point) {
		this.inflate(point.x,point.y);
	}
	,intersection: function(toIntersect) {
		var x0 = this.x < toIntersect.x ? toIntersect.x : this.x;
		var x1 = this.get_right() > toIntersect.get_right() ? toIntersect.get_right() : this.get_right();
		if(x1 <= x0) {
			return new openfl_geom_Rectangle();
		}
		var y0 = this.y < toIntersect.y ? toIntersect.y : this.y;
		var y1 = this.get_bottom() > toIntersect.get_bottom() ? toIntersect.get_bottom() : this.get_bottom();
		if(y1 <= y0) {
			return new openfl_geom_Rectangle();
		}
		return new openfl_geom_Rectangle(x0,y0,x1 - x0,y1 - y0);
	}
	,intersects: function(toIntersect) {
		var x0 = this.x < toIntersect.x ? toIntersect.x : this.x;
		var x1 = this.get_right() > toIntersect.get_right() ? toIntersect.get_right() : this.get_right();
		if(x1 <= x0) {
			return false;
		}
		var y0 = this.y < toIntersect.y ? toIntersect.y : this.y;
		var y1 = this.get_bottom() > toIntersect.get_bottom() ? toIntersect.get_bottom() : this.get_bottom();
		return y1 > y0;
	}
	,isEmpty: function() {
		if(!(this.width <= 0)) {
			return this.height <= 0;
		} else {
			return true;
		}
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,offsetPoint: function(point) {
		this.x += point.x;
		this.y += point.y;
	}
	,setEmpty: function() {
		this.x = this.y = this.width = this.height = 0;
	}
	,setTo: function(xa,ya,widtha,heighta) {
		this.x = xa;
		this.y = ya;
		this.width = widtha;
		this.height = heighta;
	}
	,toString: function() {
		return "(x=" + this.x + ", y=" + this.y + ", width=" + this.width + ", height=" + this.height + ")";
	}
	,union: function(toUnion) {
		if(this.width == 0 || this.height == 0) {
			return toUnion.clone();
		} else if(toUnion.width == 0 || toUnion.height == 0) {
			return this.clone();
		}
		var x0 = this.x > toUnion.x ? toUnion.x : this.x;
		var x1 = this.get_right() < toUnion.get_right() ? toUnion.get_right() : this.get_right();
		var y0 = this.y > toUnion.y ? toUnion.y : this.y;
		var y1 = this.get_bottom() < toUnion.get_bottom() ? toUnion.get_bottom() : this.get_bottom();
		return new openfl_geom_Rectangle(x0,y0,x1 - x0,y1 - y0);
	}
	,__contract: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) {
			return;
		}
		if(this.x < x) {
			this.x = x;
		}
		if(this.y < y) {
			this.y = y;
		}
		if(this.get_right() > x + width) {
			this.width = x + width - this.x;
		}
		if(this.get_bottom() > y + height) {
			this.height = y + height - this.y;
		}
	}
	,__expand: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) {
			this.x = x;
			this.y = y;
			this.width = width;
			this.height = height;
			return;
		}
		var cacheRight = this.get_right();
		var cacheBottom = this.get_bottom();
		if(this.x > x) {
			this.x = x;
			this.width = cacheRight - x;
		}
		if(this.y > y) {
			this.y = y;
			this.height = cacheBottom - y;
		}
		if(cacheRight < x + width) {
			this.width = x + width - this.x;
		}
		if(cacheBottom < y + height) {
			this.height = y + height - this.y;
		}
	}
	,__toLimeRectangle: function() {
		if(openfl_geom_Rectangle.__limeRectangle == null) {
			openfl_geom_Rectangle.__limeRectangle = new openfl_geom_Rectangle();
		}
		openfl_geom_Rectangle.__limeRectangle.setTo(this.x,this.y,this.width,this.height);
		return openfl_geom_Rectangle.__limeRectangle;
	}
	,__transform: function(rect,m) {
		var tx0 = m.a * this.x + m.c * this.y;
		var tx1 = tx0;
		var ty0 = m.b * this.x + m.d * this.y;
		var ty1 = ty0;
		var tx = m.a * (this.x + this.width) + m.c * this.y;
		var ty = m.b * (this.x + this.width) + m.d * this.y;
		if(tx < tx0) {
			tx0 = tx;
		}
		if(ty < ty0) {
			ty0 = ty;
		}
		if(tx > tx1) {
			tx1 = tx;
		}
		if(ty > ty1) {
			ty1 = ty;
		}
		tx = m.a * (this.x + this.width) + m.c * (this.y + this.height);
		ty = m.b * (this.x + this.width) + m.d * (this.y + this.height);
		if(tx < tx0) {
			tx0 = tx;
		}
		if(ty < ty0) {
			ty0 = ty;
		}
		if(tx > tx1) {
			tx1 = tx;
		}
		if(ty > ty1) {
			ty1 = ty;
		}
		tx = m.a * this.x + m.c * (this.y + this.height);
		ty = m.b * this.x + m.d * (this.y + this.height);
		if(tx < tx0) {
			tx0 = tx;
		}
		if(ty < ty0) {
			ty0 = ty;
		}
		if(tx > tx1) {
			tx1 = tx;
		}
		if(ty > ty1) {
			ty1 = ty;
		}
		rect.setTo(tx0 + m.tx,ty0 + m.ty,tx1 - tx0,ty1 - ty0);
	}
	,get_bottom: function() {
		return this.y + this.height;
	}
	,set_bottom: function(b) {
		this.height = b - this.y;
		return b;
	}
	,get_bottomRight: function() {
		return new openfl_geom_Point(this.x + this.width,this.y + this.height);
	}
	,set_bottomRight: function(p) {
		this.width = p.x - this.x;
		this.height = p.y - this.y;
		return p.clone();
	}
	,get_left: function() {
		return this.x;
	}
	,set_left: function(l) {
		this.width -= l - this.x;
		this.x = l;
		return l;
	}
	,get_right: function() {
		return this.x + this.width;
	}
	,set_right: function(r) {
		this.width = r - this.x;
		return r;
	}
	,get_size: function() {
		return new openfl_geom_Point(this.width,this.height);
	}
	,set_size: function(p) {
		this.width = p.x;
		this.height = p.y;
		return p.clone();
	}
	,get_top: function() {
		return this.y;
	}
	,set_top: function(t) {
		this.height -= t - this.y;
		this.y = t;
		return t;
	}
	,get_topLeft: function() {
		return new openfl_geom_Point(this.x,this.y);
	}
	,set_topLeft: function(p) {
		this.x = p.x;
		this.y = p.y;
		return p.clone();
	}
	,__class__: openfl_geom_Rectangle
	,__properties__: {set_topLeft:"set_topLeft",get_topLeft:"get_topLeft",set_top:"set_top",get_top:"get_top",set_size:"set_size",get_size:"get_size",set_right:"set_right",get_right:"get_right",set_left:"set_left",get_left:"get_left",set_bottomRight:"set_bottomRight",get_bottomRight:"get_bottomRight",set_bottom:"set_bottom",get_bottom:"get_bottom"}
};
var openfl_geom_Transform = function(displayObject) {
	this.__colorTransform = new openfl_geom_ColorTransform();
	this.concatenatedColorTransform = new openfl_geom_ColorTransform();
	this.pixelBounds = new openfl_geom_Rectangle();
	this.__displayObject = displayObject;
	this.__hasMatrix = true;
};
$hxClasses["openfl.geom.Transform"] = openfl_geom_Transform;
openfl_geom_Transform.__name__ = "openfl.geom.Transform";
openfl_geom_Transform.prototype = {
	concatenatedColorTransform: null
	,pixelBounds: null
	,__colorTransform: null
	,__displayObject: null
	,__hasMatrix: null
	,__hasMatrix3D: null
	,get_colorTransform: function() {
		return this.__colorTransform;
	}
	,set_colorTransform: function(value) {
		if(!this.__colorTransform.__equals(value)) {
			this.__colorTransform.__copyFrom(value);
			if(value != null) {
				this.__displayObject.set_alpha(value.alphaMultiplier);
			}
			var _this = this.__displayObject;
			if(!_this.__renderDirty) {
				_this.__renderDirty = true;
				_this.__setParentRenderDirty();
			}
			if(!_this.__updateDirty) {
				_this.__updateDirty = true;
				_this.__setParentUpdateTraverse();
			}
		}
		return this.__colorTransform;
	}
	,get_concatenatedMatrix: function() {
		if(this.__hasMatrix) {
			return this.__displayObject.__getWorldTransform().clone();
		}
		return null;
	}
	,get_matrix: function() {
		if(this.__hasMatrix) {
			return this.__displayObject.__transform.clone();
		}
		return null;
	}
	,set_matrix: function(value) {
		if(value == null) {
			this.__hasMatrix = false;
			return null;
		}
		this.__hasMatrix = true;
		this.__hasMatrix3D = false;
		if(this.__displayObject != null) {
			this.__setTransform(value.a,value.b,value.c,value.d,value.tx,value.ty);
		}
		return value;
	}
	,get_matrix3D: function() {
		if(this.__hasMatrix3D) {
			var matrix = this.__displayObject.__transform;
			var a = [matrix.a,matrix.b,0.0,0.0,matrix.c,matrix.d,0.0,0.0,0.0,0.0,1.0,0.0,matrix.tx,matrix.ty,0.0,1.0];
			var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
			var _g = 0;
			var _g1 = a.length;
			while(_g < _g1) {
				var i = _g++;
				vector.data.set(i,a[i]);
			}
			return new openfl_geom_Matrix3D(vector);
		}
		return null;
	}
	,set_matrix3D: function(value) {
		if(value == null) {
			this.__hasMatrix3D = false;
			return null;
		}
		this.__hasMatrix = false;
		this.__hasMatrix3D = true;
		this.__setTransform(value.rawData.data.get(0),value.rawData.data.get(1),value.rawData.data.get(5),value.rawData.data.get(6),value.rawData.data.get(12),value.rawData.data.get(13));
		return value;
	}
	,__setTransform: function(a,b,c,d,tx,ty) {
		if(this.__displayObject != null) {
			var scaleX = 0.0;
			var scaleY = 0.0;
			if(b == 0) {
				scaleX = a;
			} else {
				scaleX = Math.sqrt(a * a + b * b);
			}
			if(c == 0) {
				scaleY = d;
			} else {
				scaleY = Math.sqrt(c * c + d * d);
			}
			this.__displayObject.__scaleX = scaleX;
			this.__displayObject.__scaleY = scaleY;
			var rotation = 180 / Math.PI * Math.atan2(d,c) - 90;
			if(rotation != this.__displayObject.__rotation) {
				this.__displayObject.__rotation = rotation;
				var radians = rotation * (Math.PI / 180);
				this.__displayObject.__rotationSine = Math.sin(radians);
				this.__displayObject.__rotationCosine = Math.cos(radians);
			}
			this.__displayObject.__transform.a = a;
			this.__displayObject.__transform.b = b;
			this.__displayObject.__transform.c = c;
			this.__displayObject.__transform.d = d;
			this.__displayObject.__transform.tx = tx;
			this.__displayObject.__transform.ty = ty;
			this.__displayObject.__setTransformDirty();
		}
	}
	,__class__: openfl_geom_Transform
	,__properties__: {set_matrix3D:"set_matrix3D",get_matrix3D:"get_matrix3D",set_matrix:"set_matrix",get_matrix:"get_matrix",get_concatenatedMatrix:"get_concatenatedMatrix",set_colorTransform:"set_colorTransform",get_colorTransform:"get_colorTransform"}
};
var openfl_geom_Utils3D = function() { };
$hxClasses["openfl.geom.Utils3D"] = openfl_geom_Utils3D;
openfl_geom_Utils3D.__name__ = "openfl.geom.Utils3D";
openfl_geom_Utils3D.projectVector = function(m,v) {
	var n = m.rawData;
	var l_oProj = new openfl_geom_Vector3D();
	l_oProj.x = v.x * n.data.get(0) + v.y * n.data.get(4) + v.z * n.data.get(8) + n.data.get(12);
	l_oProj.y = v.x * n.data.get(1) + v.y * n.data.get(5) + v.z * n.data.get(9) + n.data.get(13);
	l_oProj.z = v.x * n.data.get(2) + v.y * n.data.get(6) + v.z * n.data.get(10) + n.data.get(14);
	var w = v.x * n.data.get(3) + v.y * n.data.get(7) + v.z * n.data.get(11) + n.data.get(15);
	l_oProj.z /= w;
	l_oProj.x /= w;
	l_oProj.y /= w;
	return l_oProj;
};
openfl_geom_Utils3D.projectVectors = function(m,verts,projectedVerts,uvts) {
	if(verts.data.get_length() % 3 != 0) {
		return;
	}
	var n = m.rawData;
	var x;
	var y;
	var z;
	var w;
	var x1;
	var y1;
	var z1;
	var w1;
	var i = 0;
	while(i < verts.data.get_length()) {
		x = verts.data.get(i);
		y = verts.data.get(i + 1);
		z = verts.data.get(i + 2);
		w = 1;
		x1 = x * n.data.get(0) + y * n.data.get(4) + z * n.data.get(8) + w * n.data.get(12);
		y1 = x * n.data.get(1) + y * n.data.get(5) + z * n.data.get(9) + w * n.data.get(13);
		z1 = x * n.data.get(2) + y * n.data.get(6) + z * n.data.get(10) + w * n.data.get(14);
		w1 = x * n.data.get(3) + y * n.data.get(7) + z * n.data.get(11) + w * n.data.get(15);
		projectedVerts.data.push(x1 / w1);
		projectedVerts.data.push(y1 / w1);
		uvts.data.set(i + 2,1 / w1);
		i += 3;
	}
};
var openfl_geom_Vector3D = function(x,y,z,w) {
	if(w == null) {
		w = 0;
	}
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.w = w;
	this.x = x;
	this.y = y;
	this.z = z;
};
$hxClasses["openfl.geom.Vector3D"] = openfl_geom_Vector3D;
openfl_geom_Vector3D.__name__ = "openfl.geom.Vector3D";
openfl_geom_Vector3D.__properties__ = {get_Z_AXIS:"get_Z_AXIS",get_Y_AXIS:"get_Y_AXIS",get_X_AXIS:"get_X_AXIS"};
openfl_geom_Vector3D.angleBetween = function(a,b) {
	var la = a.get_length();
	var lb = b.get_length();
	var dot = a.dotProduct(b);
	if(la != 0) {
		dot /= la;
	}
	if(lb != 0) {
		dot /= lb;
	}
	return Math.acos(dot);
};
openfl_geom_Vector3D.distance = function(pt1,pt2) {
	var x = pt2.x - pt1.x;
	var y = pt2.y - pt1.y;
	var z = pt2.z - pt1.z;
	return Math.sqrt(x * x + y * y + z * z);
};
openfl_geom_Vector3D.get_X_AXIS = function() {
	return new openfl_geom_Vector3D(1,0,0);
};
openfl_geom_Vector3D.get_Y_AXIS = function() {
	return new openfl_geom_Vector3D(0,1,0);
};
openfl_geom_Vector3D.get_Z_AXIS = function() {
	return new openfl_geom_Vector3D(0,0,1);
};
openfl_geom_Vector3D.prototype = {
	w: null
	,x: null
	,y: null
	,z: null
	,add: function(a) {
		return new openfl_geom_Vector3D(this.x + a.x,this.y + a.y,this.z + a.z);
	}
	,clone: function() {
		return new openfl_geom_Vector3D(this.x,this.y,this.z,this.w);
	}
	,copyFrom: function(sourceVector3D) {
		this.x = sourceVector3D.x;
		this.y = sourceVector3D.y;
		this.z = sourceVector3D.z;
	}
	,crossProduct: function(a) {
		return new openfl_geom_Vector3D(this.y * a.z - this.z * a.y,this.z * a.x - this.x * a.z,this.x * a.y - this.y * a.x,1);
	}
	,decrementBy: function(a) {
		this.x -= a.x;
		this.y -= a.y;
		this.z -= a.z;
	}
	,dotProduct: function(a) {
		return this.x * a.x + this.y * a.y + this.z * a.z;
	}
	,equals: function(toCompare,allFour) {
		if(allFour == null) {
			allFour = false;
		}
		if(this.x == toCompare.x && this.y == toCompare.y && this.z == toCompare.z) {
			if(!(!allFour)) {
				return this.w == toCompare.w;
			} else {
				return true;
			}
		} else {
			return false;
		}
	}
	,incrementBy: function(a) {
		this.x += a.x;
		this.y += a.y;
		this.z += a.z;
	}
	,nearEquals: function(toCompare,tolerance,allFour) {
		if(allFour == null) {
			allFour = false;
		}
		if(Math.abs(this.x - toCompare.x) < tolerance && Math.abs(this.y - toCompare.y) < tolerance && Math.abs(this.z - toCompare.z) < tolerance) {
			if(!(!allFour)) {
				return Math.abs(this.w - toCompare.w) < tolerance;
			} else {
				return true;
			}
		} else {
			return false;
		}
	}
	,negate: function() {
		this.x *= -1;
		this.y *= -1;
		this.z *= -1;
	}
	,normalize: function() {
		var l = this.get_length();
		if(l != 0) {
			this.x /= l;
			this.y /= l;
			this.z /= l;
		}
		return l;
	}
	,project: function() {
		this.x /= this.w;
		this.y /= this.w;
		this.z /= this.w;
	}
	,scaleBy: function(s) {
		this.x *= s;
		this.y *= s;
		this.z *= s;
	}
	,setTo: function(xa,ya,za) {
		this.x = xa;
		this.y = ya;
		this.z = za;
	}
	,subtract: function(a) {
		return new openfl_geom_Vector3D(this.x - a.x,this.y - a.y,this.z - a.z);
	}
	,toString: function() {
		return "Vector3D(" + this.x + ", " + this.y + ", " + this.z + ")";
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
	}
	,get_lengthSquared: function() {
		return this.x * this.x + this.y * this.y + this.z * this.z;
	}
	,__class__: openfl_geom_Vector3D
	,__properties__: {get_lengthSquared:"get_lengthSquared",get_length:"get_length"}
};
var openfl_media_ID3Info = function() {
};
$hxClasses["openfl.media.ID3Info"] = openfl_media_ID3Info;
openfl_media_ID3Info.__name__ = "openfl.media.ID3Info";
openfl_media_ID3Info.prototype = {
	album: null
	,artist: null
	,comment: null
	,genre: null
	,songName: null
	,track: null
	,year: null
	,__class__: openfl_media_ID3Info
};
var openfl_media_Sound = function(stream,context) {
	openfl_events_EventDispatcher.call(this,this);
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.isBuffering = false;
	this.url = null;
	if(stream != null) {
		this.load(stream,context);
	}
};
$hxClasses["openfl.media.Sound"] = openfl_media_Sound;
openfl_media_Sound.__name__ = "openfl.media.Sound";
openfl_media_Sound.fromAudioBuffer = function(buffer) {
	var sound = new openfl_media_Sound();
	sound.__buffer = buffer;
	return sound;
};
openfl_media_Sound.fromFile = function(path) {
	return openfl_media_Sound.fromAudioBuffer(openfl__$internal_sound_AudioBuffer.fromFile(path));
};
openfl_media_Sound.loadFromFile = function(path) {
	return openfl__$internal_sound_AudioBuffer.loadFromFile(path).then(function(audioBuffer) {
		return openfl__$internal_app_Future.withValue(openfl_media_Sound.fromAudioBuffer(audioBuffer));
	});
};
openfl_media_Sound.loadFromFiles = function(paths) {
	return openfl__$internal_sound_AudioBuffer.loadFromFiles(paths).then(function(audioBuffer) {
		return openfl__$internal_app_Future.withValue(openfl_media_Sound.fromAudioBuffer(audioBuffer));
	});
};
openfl_media_Sound.__super__ = openfl_events_EventDispatcher;
openfl_media_Sound.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	bytesLoaded: null
	,bytesTotal: null
	,isBuffering: null
	,url: null
	,__buffer: null
	,close: function() {
		if(this.__buffer != null) {
			this.__buffer.dispose();
		}
	}
	,load: function(stream,context) {
		var _gthis = this;
		this.url = stream.url;
		openfl__$internal_sound_AudioBuffer.loadFromFile(this.url).onComplete($bind(this,this.AudioBuffer_onURLLoad)).onError(function(_) {
			_gthis.AudioBuffer_onURLLoad(null);
		});
	}
	,loadCompressedDataFromByteArray: function(bytes,bytesLength) {
		if(bytes == null || bytesLength <= 0) {
			this.dispatchEvent(new openfl_events_IOErrorEvent("ioError"));
			return;
		}
		if(bytes.length > bytesLength) {
			var this1 = new openfl_utils_ByteArrayData(bytesLength);
			var copy = this1;
			copy.writeBytes(bytes,0,bytesLength);
			bytes = copy;
		}
		this.__buffer = openfl__$internal_sound_AudioBuffer.fromBytes(bytes);
		if(this.__buffer == null) {
			this.dispatchEvent(new openfl_events_IOErrorEvent("ioError"));
		} else {
			this.dispatchEvent(new openfl_events_Event("complete"));
		}
	}
	,loadPCMFromByteArray: function(bytes,samples,format,stereo,sampleRate) {
		if(sampleRate == null) {
			sampleRate = 44100;
		}
		if(stereo == null) {
			stereo = true;
		}
		if(format == null) {
			format = "float";
		}
		if(bytes == null) {
			this.dispatchEvent(new openfl_events_IOErrorEvent("ioError"));
			return;
		}
		var audioBuffer = new openfl__$internal_sound_AudioBuffer();
		audioBuffer.bitsPerSample = format == "float" ? 32 : 16;
		audioBuffer.channels = stereo ? 2 : 1;
		audioBuffer.data = haxe_io__$UInt8Array_UInt8Array_$Impl_$.fromBytes(bytes);
		audioBuffer.sampleRate = sampleRate | 0;
		this.__buffer = audioBuffer;
		this.dispatchEvent(new openfl_events_Event("complete"));
	}
	,play: function(startTime,loops,sndTransform) {
		if(loops == null) {
			loops = 0;
		}
		if(startTime == null) {
			startTime = 0.0;
		}
		if(openfl_media_SoundMixer.__soundChannels.length >= 32) {
			return null;
		}
		if(sndTransform == null) {
			sndTransform = new openfl_media_SoundTransform();
		} else {
			sndTransform = sndTransform.clone();
		}
		var pan = openfl_media_SoundMixer.__soundTransform.pan + sndTransform.pan;
		if(pan > 1) {
			pan = 1;
		}
		if(pan < -1) {
			pan = -1;
		}
		var volume = openfl_media_SoundMixer.__soundTransform.volume * sndTransform.volume;
		var source = new openfl__$internal_sound_AudioSource(this.__buffer);
		source.offset = startTime | 0;
		if(loops > 1) {
			source.loops = loops - 1;
		}
		source.set_gain(volume);
		source._position_x = pan;
		source._position_z = -1 * Math.sqrt(1 - Math.pow(pan,2));
		return new openfl_media_SoundChannel(source,sndTransform);
	}
	,get_id3: function() {
		return new openfl_media_ID3Info();
	}
	,get_length: function() {
		if(this.__buffer != null) {
			return this.__buffer.src.duration() * 1000 | 0;
		}
		return 0;
	}
	,AudioBuffer_onURLLoad: function(buffer) {
		if(buffer == null) {
			this.dispatchEvent(new openfl_events_IOErrorEvent("ioError"));
		} else {
			this.__buffer = buffer;
			this.dispatchEvent(new openfl_events_Event("complete"));
		}
	}
	,__class__: openfl_media_Sound
	,__properties__: {get_length:"get_length",get_id3:"get_id3"}
});
var openfl_media_SoundChannel = function(source,soundTransform) {
	openfl_events_EventDispatcher.call(this,this);
	this.leftPeak = 1;
	this.rightPeak = 1;
	if(soundTransform != null) {
		this.__soundTransform = soundTransform;
	} else {
		this.__soundTransform = new openfl_media_SoundTransform();
	}
	if(source != null) {
		this.__source = source;
		this.__source.onComplete.add($bind(this,this.source_onComplete));
		this.__isValid = true;
		this.__source.play();
	}
	openfl_media_SoundMixer.__registerSoundChannel(this);
};
$hxClasses["openfl.media.SoundChannel"] = openfl_media_SoundChannel;
openfl_media_SoundChannel.__name__ = "openfl.media.SoundChannel";
openfl_media_SoundChannel.__super__ = openfl_events_EventDispatcher;
openfl_media_SoundChannel.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	leftPeak: null
	,rightPeak: null
	,__isValid: null
	,__soundTransform: null
	,__source: null
	,stop: function() {
		openfl_media_SoundMixer.__unregisterSoundChannel(this);
		if(!this.__isValid) {
			return;
		}
		this.__source.stop();
		this.__dispose();
	}
	,__dispose: function() {
		if(!this.__isValid) {
			return;
		}
		this.__source.onComplete.remove($bind(this,this.source_onComplete));
		this.__source.dispose();
		this.__isValid = false;
	}
	,__updateTransform: function() {
		this.set_soundTransform(this.get_soundTransform());
	}
	,get_position: function() {
		if(!this.__isValid) {
			return 0;
		}
		return this.__source.get_currentTime() + this.__source.offset;
	}
	,set_position: function(value) {
		if(!this.__isValid) {
			return 0;
		}
		this.__source.set_currentTime((value | 0) - this.__source.offset);
		return value;
	}
	,get_soundTransform: function() {
		return this.__soundTransform.clone();
	}
	,set_soundTransform: function(value) {
		if(value != null) {
			this.__soundTransform.pan = value.pan;
			this.__soundTransform.volume = value.volume;
			var pan = openfl_media_SoundMixer.__soundTransform.pan + this.__soundTransform.pan;
			if(pan < -1) {
				pan = -1;
			}
			if(pan > 1) {
				pan = 1;
			}
			var volume = openfl_media_SoundMixer.__soundTransform.volume * this.__soundTransform.volume;
			if(this.__isValid) {
				this.__source.set_gain(volume);
				var _this = this.__source;
				_this._position_x = pan;
				_this._position_z = -1 * Math.sqrt(1 - Math.pow(pan,2));
				return value;
			}
		}
		return value;
	}
	,source_onComplete: function() {
		openfl_media_SoundMixer.__unregisterSoundChannel(this);
		this.__dispose();
		this.dispatchEvent(new openfl_events_Event("soundComplete"));
	}
	,__class__: openfl_media_SoundChannel
	,__properties__: {set_soundTransform:"set_soundTransform",get_soundTransform:"get_soundTransform",set_position:"set_position",get_position:"get_position"}
});
var openfl_media_SoundLoaderContext = function(bufferTime,checkPolicyFile) {
	if(checkPolicyFile == null) {
		checkPolicyFile = false;
	}
	if(bufferTime == null) {
		bufferTime = 1000;
	}
	this.bufferTime = bufferTime;
	this.checkPolicyFile = checkPolicyFile;
};
$hxClasses["openfl.media.SoundLoaderContext"] = openfl_media_SoundLoaderContext;
openfl_media_SoundLoaderContext.__name__ = "openfl.media.SoundLoaderContext";
openfl_media_SoundLoaderContext.prototype = {
	bufferTime: null
	,checkPolicyFile: null
	,__class__: openfl_media_SoundLoaderContext
};
var openfl_media_SoundTransform = function(vol,panning) {
	if(panning == null) {
		panning = 0;
	}
	if(vol == null) {
		vol = 1;
	}
	this.volume = vol;
	this.pan = panning;
	this.leftToLeft = 0;
	this.leftToRight = 0;
	this.rightToLeft = 0;
	this.rightToRight = 0;
};
$hxClasses["openfl.media.SoundTransform"] = openfl_media_SoundTransform;
openfl_media_SoundTransform.__name__ = "openfl.media.SoundTransform";
openfl_media_SoundTransform.prototype = {
	leftToLeft: null
	,leftToRight: null
	,pan: null
	,rightToLeft: null
	,rightToRight: null
	,volume: null
	,clone: function() {
		return new openfl_media_SoundTransform(this.volume,this.pan);
	}
	,__class__: openfl_media_SoundTransform
};
var openfl_media_SoundMixer = function() { };
$hxClasses["openfl.media.SoundMixer"] = openfl_media_SoundMixer;
openfl_media_SoundMixer.__name__ = "openfl.media.SoundMixer";
openfl_media_SoundMixer.__properties__ = {set_soundTransform:"set_soundTransform",get_soundTransform:"get_soundTransform"};
openfl_media_SoundMixer.areSoundsInaccessible = function() {
	return false;
};
openfl_media_SoundMixer.stopAll = function() {
	var _g = 0;
	var _g1 = openfl_media_SoundMixer.__soundChannels;
	while(_g < _g1.length) {
		var channel = _g1[_g];
		++_g;
		channel.stop();
	}
};
openfl_media_SoundMixer.__registerSoundChannel = function(soundChannel) {
	openfl_media_SoundMixer.__soundChannels.push(soundChannel);
};
openfl_media_SoundMixer.__unregisterSoundChannel = function(soundChannel) {
	HxOverrides.remove(openfl_media_SoundMixer.__soundChannels,soundChannel);
};
openfl_media_SoundMixer.get_soundTransform = function() {
	return openfl_media_SoundMixer.__soundTransform;
};
openfl_media_SoundMixer.set_soundTransform = function(value) {
	openfl_media_SoundMixer.__soundTransform = value.clone();
	var _g = 0;
	var _g1 = openfl_media_SoundMixer.__soundChannels;
	while(_g < _g1.length) {
		var channel = _g1[_g];
		++_g;
		channel.__updateTransform();
	}
	return value;
};
var openfl_media_Video = function(width,height) {
	if(height == null) {
		height = 240;
	}
	if(width == null) {
		width = 320;
	}
	openfl_display_DisplayObject.call(this);
	this.__width = width;
	this.__height = height;
	this.smoothing = false;
	this.deblocking = 0;
};
$hxClasses["openfl.media.Video"] = openfl_media_Video;
openfl_media_Video.__name__ = "openfl.media.Video";
openfl_media_Video.__super__ = openfl_display_DisplayObject;
openfl_media_Video.prototype = $extend(openfl_display_DisplayObject.prototype,{
	deblocking: null
	,smoothing: null
	,__active: null
	,__buffer: null
	,__bufferAlpha: null
	,__bufferColorTransform: null
	,__bufferContext: null
	,__bufferData: null
	,__dirty: null
	,__height: null
	,__stream: null
	,__texture: null
	,__textureTime: null
	,__width: null
	,attachNetStream: function(netStream) {
		this.__stream = netStream;
		if(this.__stream != null) {
			this.__stream.__video.play();
		}
	}
	,clear: function() {
	}
	,__enterFrame: function(deltaTime) {
		if(this.__renderable && this.__stream != null) {
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
			if(!this.__updateDirty) {
				this.__updateDirty = true;
				this.__setParentUpdateTraverse();
			}
		}
	}
	,__getBounds: function(rect,matrix) {
		var bounds = openfl_geom_Rectangle.__pool.get();
		bounds.setTo(0,0,this.__width,this.__height);
		bounds.__transform(bounds,matrix);
		rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
		openfl_geom_Rectangle.__pool.release(bounds);
	}
	,__getBuffer: function(gl,alpha,colorTransform) {
		if(this.__buffer == null || this.__bufferContext != gl) {
			var uvWidth = 1;
			var uvHeight = 1;
			this.__bufferData = new Float32Array(104);
			this.__bufferData[0] = this.get_width();
			this.__bufferData[1] = this.get_height();
			this.__bufferData[3] = uvWidth;
			this.__bufferData[4] = uvHeight;
			this.__bufferData[27] = this.get_height();
			this.__bufferData[30] = uvHeight;
			this.__bufferData[52] = this.get_width();
			this.__bufferData[55] = uvWidth;
			var _g = 0;
			while(_g < 4) {
				var i = _g++;
				this.__bufferData[26 * i + 5] = alpha;
				if(colorTransform != null) {
					this.__bufferData[26 * i + 6] = colorTransform.redMultiplier;
					this.__bufferData[26 * i + 11] = colorTransform.greenMultiplier;
					this.__bufferData[26 * i + 16] = colorTransform.blueMultiplier;
					this.__bufferData[26 * i + 21] = colorTransform.alphaMultiplier;
					this.__bufferData[26 * i + 22] = colorTransform.redOffset / 255;
					this.__bufferData[26 * i + 23] = colorTransform.greenOffset / 255;
					this.__bufferData[26 * i + 24] = colorTransform.blueOffset / 255;
					this.__bufferData[26 * i + 25] = colorTransform.alphaOffset / 255;
				} else {
					this.__bufferData[26 * i + 6] = 1;
					this.__bufferData[26 * i + 11] = 1;
					this.__bufferData[26 * i + 16] = 1;
					this.__bufferData[26 * i + 21] = 1;
				}
			}
			this.__bufferAlpha = alpha;
			this.__bufferColorTransform = colorTransform != null ? colorTransform.__clone() : null;
			this.__bufferContext = gl;
			this.__buffer = gl.createBuffer();
			gl.bindBuffer(34962,this.__buffer);
			gl.bufferData(34962,this.__bufferData,35044);
		} else {
			if(this.__bufferAlpha != alpha) {
				this.__bufferData[5] = alpha;
				this.__bufferData[31] = alpha;
				this.__bufferData[57] = alpha;
				this.__bufferData[83] = alpha;
			}
			if(this.__bufferColorTransform == null && colorTransform != null || this.__bufferColorTransform != null && !this.__bufferColorTransform.__equals(colorTransform)) {
				if(colorTransform != null) {
					this.__bufferColorTransform = colorTransform.__clone();
					var _g1 = 0;
					while(_g1 < 4) {
						var i1 = _g1++;
						this.__bufferData[26 * i1 + 6] = colorTransform.redMultiplier;
						this.__bufferData[26 * i1 + 11] = colorTransform.greenMultiplier;
						this.__bufferData[26 * i1 + 16] = colorTransform.blueMultiplier;
						this.__bufferData[26 * i1 + 21] = colorTransform.alphaMultiplier;
						this.__bufferData[26 * i1 + 22] = colorTransform.redOffset / 255;
						this.__bufferData[26 * i1 + 23] = colorTransform.greenOffset / 255;
						this.__bufferData[26 * i1 + 24] = colorTransform.blueOffset / 255;
						this.__bufferData[26 * i1 + 25] = colorTransform.alphaOffset / 255;
					}
				} else {
					var _g2 = 0;
					while(_g2 < 4) {
						var i2 = _g2++;
						this.__bufferData[26 * i2 + 6] = 1;
						this.__bufferData[26 * i2 + 11] = 1;
						this.__bufferData[26 * i2 + 16] = 1;
						this.__bufferData[26 * i2 + 21] = 1;
						this.__bufferData[26 * i2 + 22] = 0;
						this.__bufferData[26 * i2 + 23] = 0;
						this.__bufferData[26 * i2 + 24] = 0;
						this.__bufferData[26 * i2 + 25] = 0;
					}
				}
			}
			gl.bindBuffer(34962,this.__buffer);
			gl.bufferData(34962,this.__bufferData,35044);
		}
		return this.__buffer;
	}
	,__getTexture: function(gl) {
		if(this.__stream == null) {
			return null;
		}
		if(this.__texture == null) {
			this.__texture = gl.createTexture();
			gl.bindTexture(3553,this.__texture);
			gl.texParameteri(3553,10242,33071);
			gl.texParameteri(3553,10243,33071);
			gl.texParameteri(3553,10240,9728);
			gl.texParameteri(3553,10241,9728);
			this.__textureTime = -1;
		}
		if(this.__stream.__video.currentTime != this.__textureTime) {
			var internalFormat = 6408;
			var format = 6408;
			gl.bindTexture(3553,this.__texture);
			gl.texImage2D(3553,0,internalFormat,format,5121,this.__stream.__video);
			this.__textureTime = this.__stream.__video.currentTime;
		}
		return this.__texture;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject,hitTestWhenMouseDisabled) {
		if(hitTestWhenMouseDisabled == null) {
			hitTestWhenMouseDisabled = false;
		}
		if(!hitObject.get_visible() || this.__isMask) {
			return false;
		}
		if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
			return false;
		}
		this.__getRenderTransform();
		var _this = this.__renderTransform;
		var norm = _this.a * _this.d - _this.b * _this.c;
		var px = norm == 0 ? -_this.tx : 1.0 / norm * (_this.c * (_this.ty - y) + _this.d * (x - _this.tx));
		var _this1 = this.__renderTransform;
		var norm1 = _this1.a * _this1.d - _this1.b * _this1.c;
		var py = norm1 == 0 ? -_this1.ty : 1.0 / norm1 * (_this1.a * (y - _this1.ty) + _this1.b * (_this1.tx - x));
		if(px > 0 && py > 0 && px <= this.__width && py <= this.__height) {
			if(stack != null && !interactiveOnly && !hitTestWhenMouseDisabled) {
				stack.push(hitObject);
			}
			return true;
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		var point = openfl_geom_Point.__pool.get();
		point.setTo(x,y);
		this.__globalToLocal(point,point);
		var hit = point.x > 0 && point.y > 0 && point.x <= this.__width && point.y <= this.__height;
		openfl_geom_Point.__pool.release(point);
		return hit;
	}
	,__renderCanvas: function(renderSession) {
		openfl__$internal_renderer_canvas_CanvasVideo.render(this,renderSession);
	}
	,__renderGL: function(renderSession) {
		openfl__$internal_renderer_opengl_GLVideo.render(this,renderSession);
	}
	,__renderGLMask: function(renderSession) {
		openfl__$internal_renderer_opengl_GLVideo.renderMask(this,renderSession);
	}
	,get_height: function() {
		return this.__height * this.get_scaleY();
	}
	,set_height: function(value) {
		if(this.get_scaleY() != 1 || value != this.__height) {
			this.__setTransformDirty();
			this.__dirty = true;
		}
		this.set_scaleY(1);
		return this.__height = value;
	}
	,get_videoHeight: function() {
		if(this.__stream != null) {
			return this.__stream.__video.videoHeight | 0;
		}
		return 0;
	}
	,get_videoWidth: function() {
		if(this.__stream != null) {
			return this.__stream.__video.videoWidth | 0;
		}
		return 0;
	}
	,get_width: function() {
		return this.__width * this.__scaleX;
	}
	,set_width: function(value) {
		if(this.__scaleX != 1 || this.__width != value) {
			this.__setTransformDirty();
			this.__dirty = true;
		}
		this.set_scaleX(1);
		return this.__width = value;
	}
	,__class__: openfl_media_Video
	,__properties__: $extend(openfl_display_DisplayObject.prototype.__properties__,{get_videoWidth:"get_videoWidth",get_videoHeight:"get_videoHeight"})
});
var openfl_net_FileFilter = function(description,extension,macType) {
	this.description = description;
	this.extension = extension;
	this.macType = macType;
};
$hxClasses["openfl.net.FileFilter"] = openfl_net_FileFilter;
openfl_net_FileFilter.__name__ = "openfl.net.FileFilter";
openfl_net_FileFilter.prototype = {
	description: null
	,extension: null
	,macType: null
	,__class__: openfl_net_FileFilter
};
var openfl_net_FileReference = function() {
	openfl_events_EventDispatcher.call(this);
};
$hxClasses["openfl.net.FileReference"] = openfl_net_FileReference;
openfl_net_FileReference.__name__ = "openfl.net.FileReference";
openfl_net_FileReference.__super__ = openfl_events_EventDispatcher;
openfl_net_FileReference.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	creationDate: null
	,creator: null
	,data: null
	,modificationDate: null
	,name: null
	,size: null
	,type: null
	,__data: null
	,__path: null
	,__urlLoader: null
	,browse: function(typeFilter) {
		this.__data = null;
		this.__path = null;
		return false;
	}
	,cancel: function() {
		if(this.__urlLoader != null) {
			this.__urlLoader.close();
		}
	}
	,download: function(request,defaultFileName) {
		this.__data = null;
		this.__path = null;
		this.__urlLoader = new openfl_net_URLLoader();
		this.__urlLoader.addEventListener("complete",$bind(this,this.urlLoader_onComplete));
		this.__urlLoader.addEventListener("ioError",$bind(this,this.urlLoader_onIOError));
		this.__urlLoader.addEventListener("progress",$bind(this,this.urlLoader_onProgress));
		this.__urlLoader.load(request);
	}
	,load: function() {
	}
	,save: function(data,defaultFileName) {
		this.__data = null;
		this.__path = null;
	}
	,upload: function(request,uploadDataFieldName,testUpload) {
		if(testUpload == null) {
			testUpload = false;
		}
		if(uploadDataFieldName == null) {
			uploadDataFieldName = "Filedata";
		}
		openfl_Lib.notImplemented({ fileName : "openfl/net/FileReference.hx", lineNumber : 57, className : "openfl.net.FileReference", methodName : "upload"});
	}
	,urlLoader_onComplete: function(event) {
		this.dispatchEvent(event);
	}
	,urlLoader_onIOError: function(event) {
		this.dispatchEvent(event);
	}
	,urlLoader_onProgress: function(event) {
		this.dispatchEvent(event);
	}
	,__class__: openfl_net_FileReference
});
var openfl_net_FileReferenceList = function() {
	openfl_events_EventDispatcher.call(this);
};
$hxClasses["openfl.net.FileReferenceList"] = openfl_net_FileReferenceList;
openfl_net_FileReferenceList.__name__ = "openfl.net.FileReferenceList";
openfl_net_FileReferenceList.__super__ = openfl_events_EventDispatcher;
openfl_net_FileReferenceList.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	fileList: null
	,browse: function(typeFilter) {
		return false;
	}
	,__class__: openfl_net_FileReferenceList
});
var openfl_net_NetConnection = function() {
	openfl_events_EventDispatcher.call(this);
};
$hxClasses["openfl.net.NetConnection"] = openfl_net_NetConnection;
openfl_net_NetConnection.__name__ = "openfl.net.NetConnection";
openfl_net_NetConnection.__super__ = openfl_events_EventDispatcher;
openfl_net_NetConnection.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	connect: function(command,_,_1,_2,_3,_4) {
		if(command != null) {
			throw new js__$Boot_HaxeError("Error: Can only connect in \"HTTP streaming\" mode");
		}
		this.dispatchEvent(new openfl_events_NetStatusEvent("netStatus",false,true,{ code : "NetConnection.Connect.Success"}));
	}
	,__class__: openfl_net_NetConnection
});
var openfl_net_NetStream = function(connection,peerID) {
	openfl_events_EventDispatcher.call(this);
	this.__connection = connection;
	this.__video = window.document.createElement("video");
	this.__video.setAttribute("playsinline","");
	this.__video.setAttribute("webkit-playsinline","");
	this.__video.addEventListener("error",$bind(this,this.video_onError),false);
	this.__video.addEventListener("waiting",$bind(this,this.video_onWaiting),false);
	this.__video.addEventListener("ended",$bind(this,this.video_onEnd),false);
	this.__video.addEventListener("pause",$bind(this,this.video_onPause),false);
	this.__video.addEventListener("seeking",$bind(this,this.video_onSeeking),false);
	this.__video.addEventListener("playing",$bind(this,this.video_onPlaying),false);
	this.__video.addEventListener("timeupdate",$bind(this,this.video_onTimeUpdate),false);
	this.__video.addEventListener("loadstart",$bind(this,this.video_onLoadStart),false);
	this.__video.addEventListener("stalled",$bind(this,this.video_onStalled),false);
	this.__video.addEventListener("durationchanged",$bind(this,this.video_onDurationChanged),false);
	this.__video.addEventListener("canplay",$bind(this,this.video_onCanPlay),false);
	this.__video.addEventListener("canplaythrough",$bind(this,this.video_onCanPlayThrough),false);
	this.__video.addEventListener("loadedmetadata",$bind(this,this.video_onLoadMetaData),false);
};
$hxClasses["openfl.net.NetStream"] = openfl_net_NetStream;
openfl_net_NetStream.__name__ = "openfl.net.NetStream";
openfl_net_NetStream.__super__ = openfl_events_EventDispatcher;
openfl_net_NetStream.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	audioCodec: null
	,bufferLength: null
	,bufferTime: null
	,bytesLoaded: null
	,bytesTotal: null
	,checkPolicyFile: null
	,client: null
	,currentFPS: null
	,decodedFrames: null
	,liveDelay: null
	,objectEncoding: null
	,soundTransform: null
	,time: null
	,videoCode: null
	,__connection: null
	,__timer: null
	,__video: null
	,close: function() {
		this.__video.pause();
		this.__video.src = "";
		this.time = 0;
	}
	,pause: function() {
		this.__video.pause();
	}
	,play: function(url,_,_1,_2,_3,_4) {
		this.__video.src = url;
		this.__video.play();
	}
	,requestVideoStatus: function() {
		var _gthis = this;
		if(this.__timer == null) {
			this.__timer = new haxe_Timer(1);
		}
		this.__timer.run = function() {
			if(_gthis.__video.paused) {
				_gthis.__playStatus("NetStream.Play.pause");
			} else {
				_gthis.__playStatus("NetStream.Play.playing");
			}
			_gthis.__timer.stop();
		};
	}
	,resume: function() {
		this.__video.play();
	}
	,seek: function(time) {
		if(time < 0) {
			time = 0;
		} else if(time > this.__video.duration) {
			time = this.__video.duration;
		}
		this.__video.currentTime = time;
	}
	,togglePause: function() {
		if(this.__video.paused) {
			this.__video.play();
		} else {
			this.__video.pause();
		}
	}
	,__playStatus: function(code) {
		if(this.client != null) {
			try {
				this.client.onPlayStatus({ code : code, duration : this.__video.duration, position : this.__video.currentTime, speed : this.__video.playbackRate, start : this.__video.startTime});
			} catch( e ) {
				haxe_CallStack.lastException = e;
				var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			}
		}
	}
	,video_onCanPlay: function(event) {
		this.__playStatus("NetStream.Play.canplay");
	}
	,video_onCanPlayThrough: function(event) {
		this.__playStatus("NetStream.Play.canplaythrough");
	}
	,video_onDurationChanged: function(event) {
		this.__playStatus("NetStream.Play.durationchanged");
	}
	,video_onEnd: function(event) {
		this.__connection.dispatchEvent(new openfl_events_NetStatusEvent("netStatus",false,false,{ code : "NetStream.Play.Stop"}));
		this.__playStatus("NetStream.Play.Complete");
	}
	,video_onError: function(event) {
		this.__connection.dispatchEvent(new openfl_events_NetStatusEvent("netStatus",false,false,{ code : "NetStream.Play.Stop"}));
		this.__playStatus("NetStream.Play.error");
	}
	,video_onLoadMetaData: function(event) {
		if(this.client != null) {
			try {
				var handler = this.client.onMetaData;
				handler({ width : this.__video.videoWidth, height : this.__video.videoHeight, duration : this.__video.duration});
			} catch( e ) {
				haxe_CallStack.lastException = e;
				var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			}
		}
	}
	,video_onLoadStart: function(event) {
		this.__playStatus("NetStream.Play.loadstart");
	}
	,video_onPause: function(event) {
		this.__playStatus("NetStream.Play.pause");
	}
	,video_onPlaying: function(event) {
		this.__connection.dispatchEvent(new openfl_events_NetStatusEvent("netStatus",false,false,{ code : "NetStream.Play.Start"}));
		this.__playStatus("NetStream.Play.playing");
	}
	,video_onSeeking: function(event) {
		this.__playStatus("NetStream.Play.seeking");
	}
	,video_onStalled: function(event) {
		this.__playStatus("NetStream.Play.stalled");
	}
	,video_onTimeUpdate: function(event) {
		this.time = this.__video.currentTime;
		this.__playStatus("NetStream.Play.timeupdate");
	}
	,video_onWaiting: function(event) {
		this.__playStatus("NetStream.Play.waiting");
	}
	,get_speed: function() {
		return this.__video.playbackRate;
	}
	,set_speed: function(value) {
		return this.__video.playbackRate = value;
	}
	,__class__: openfl_net_NetStream
	,__properties__: {set_speed:"set_speed",get_speed:"get_speed"}
});
var openfl_net_SharedObject = function() {
	openfl_events_EventDispatcher.call(this);
	this.client = this;
	this.objectEncoding = 3;
};
$hxClasses["openfl.net.SharedObject"] = openfl_net_SharedObject;
openfl_net_SharedObject.__name__ = "openfl.net.SharedObject";
openfl_net_SharedObject.getLocal = function(name,localPath,secure) {
	if(secure == null) {
		secure = false;
	}
	var illegalValues = [" ","~","%","&","\\",";",":","\"","'",",","<",">","?","#"];
	var allowed = true;
	if(name == null || name == "") {
		allowed = false;
	} else {
		var _g = 0;
		while(_g < illegalValues.length) {
			var value = illegalValues[_g];
			++_g;
			if(name.indexOf(value) > -1) {
				allowed = false;
				break;
			}
		}
	}
	if(!allowed) {
		throw new js__$Boot_HaxeError(new openfl_errors_Error("Error #2134: Cannot create SharedObject."));
	}
	if(localPath == null) {
		localPath = window.location.href;
	}
	if(openfl_net_SharedObject.__sharedObjects == null) {
		openfl_net_SharedObject.__sharedObjects = new haxe_ds_StringMap();
	}
	var id = localPath + "/" + name;
	var _this = openfl_net_SharedObject.__sharedObjects;
	if(!(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id))) {
		var sharedObject = new openfl_net_SharedObject();
		sharedObject.data = { };
		sharedObject.__localPath = localPath;
		sharedObject.__name = name;
		var encodedData = null;
		try {
			var storage = js_Browser.getLocalStorage();
			if(storage != null) {
				encodedData = storage.getItem(localPath + ":" + name);
			}
		} catch( e ) {
			haxe_CallStack.lastException = e;
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
		}
		if(encodedData != null && encodedData != "") {
			try {
				var unserializer = new haxe_Unserializer(encodedData);
				unserializer.setResolver({ resolveEnum : Type.resolveEnum, resolveClass : openfl_net_SharedObject.__resolveClass});
				sharedObject.data = unserializer.unserialize();
			} catch( e2 ) {
				haxe_CallStack.lastException = e2;
				var e3 = ((e2) instanceof js__$Boot_HaxeError) ? e2.val : e2;
			}
		}
		var _this1 = openfl_net_SharedObject.__sharedObjects;
		if(__map_reserved[id] != null) {
			_this1.setReserved(id,sharedObject);
		} else {
			_this1.h[id] = sharedObject;
		}
	}
	var _this2 = openfl_net_SharedObject.__sharedObjects;
	if(__map_reserved[id] != null) {
		return _this2.getReserved(id);
	} else {
		return _this2.h[id];
	}
};
openfl_net_SharedObject.getRemote = function(name,remotePath,persistence,secure) {
	if(secure == null) {
		secure = false;
	}
	if(persistence == null) {
		persistence = false;
	}
	openfl_Lib.notImplemented({ fileName : "openfl/net/SharedObject.hx", lineNumber : 133, className : "openfl.net.SharedObject", methodName : "getRemote"});
	return null;
};
openfl_net_SharedObject.__resolveClass = function(name) {
	if(name != null) {
		if(StringTools.startsWith(name,"neash.")) {
			name = StringTools.replace(name,"neash.","openfl.");
		}
		if(StringTools.startsWith(name,"native.")) {
			name = StringTools.replace(name,"native.","openfl.");
		}
		if(StringTools.startsWith(name,"flash.")) {
			name = StringTools.replace(name,"flash.","openfl.");
		}
		if(StringTools.startsWith(name,"openfl._v2.")) {
			name = StringTools.replace(name,"openfl._v2.","openfl.");
		}
		if(StringTools.startsWith(name,"openfl._legacy.")) {
			name = StringTools.replace(name,"openfl._legacy.","openfl.");
		}
		return $hxClasses[name];
	}
	return null;
};
openfl_net_SharedObject.__super__ = openfl_events_EventDispatcher;
openfl_net_SharedObject.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	client: null
	,data: null
	,fps: null
	,objectEncoding: null
	,__localPath: null
	,__name: null
	,clear: function() {
		this.data = { };
		try {
			var storage = js_Browser.getLocalStorage();
			if(storage != null) {
				storage.removeItem(this.__localPath + ":" + this.__name);
			}
		} catch( e ) {
			haxe_CallStack.lastException = e;
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
		}
	}
	,close: function() {
	}
	,connect: function(myConnection,params) {
		openfl_Lib.notImplemented({ fileName : "openfl/net/SharedObject.hx", lineNumber : 48, className : "openfl.net.SharedObject", methodName : "connect"});
	}
	,flush: function(minDiskSpace) {
		if(minDiskSpace == null) {
			minDiskSpace = 0;
		}
		if(Reflect.fields(this.data).length == 0) {
			return 0;
		}
		var encodedData = haxe_Serializer.run(this.data);
		try {
			var storage = js_Browser.getLocalStorage();
			if(storage != null) {
				storage.removeItem(this.__localPath + ":" + this.__name);
				storage.setItem(this.__localPath + ":" + this.__name,encodedData);
			}
		} catch( e ) {
			haxe_CallStack.lastException = e;
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			return 1;
		}
		return 0;
	}
	,send: function(args) {
		openfl_Lib.notImplemented({ fileName : "openfl/net/SharedObject.hx", lineNumber : 138, className : "openfl.net.SharedObject", methodName : "send"});
	}
	,setDirty: function(propertyName) {
	}
	,setProperty: function(propertyName,value) {
		if(this.data != null) {
			this.data[propertyName] = value;
		}
	}
	,get_size: function() {
		try {
			var d = haxe_Serializer.run(this.data);
			return haxe_io_Bytes.ofString(d).length;
		} catch( e ) {
			haxe_CallStack.lastException = e;
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			return 0;
		}
	}
	,__class__: openfl_net_SharedObject
	,__properties__: {get_size:"get_size"}
});
var openfl_net__$SharedObjectFlushStatus_SharedObjectFlushStatus_$Impl_$ = {};
$hxClasses["openfl.net._SharedObjectFlushStatus.SharedObjectFlushStatus_Impl_"] = openfl_net__$SharedObjectFlushStatus_SharedObjectFlushStatus_$Impl_$;
openfl_net__$SharedObjectFlushStatus_SharedObjectFlushStatus_$Impl_$.__name__ = "openfl.net._SharedObjectFlushStatus.SharedObjectFlushStatus_Impl_";
openfl_net__$SharedObjectFlushStatus_SharedObjectFlushStatus_$Impl_$.fromString = function(value) {
	switch(value) {
	case "flushed":
		return 0;
	case "pending":
		return 1;
	default:
		return null;
	}
};
openfl_net__$SharedObjectFlushStatus_SharedObjectFlushStatus_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 0:
		return "flushed";
	case 1:
		return "pending";
	default:
		return null;
	}
};
var openfl_utils_IDataOutput = function() { };
$hxClasses["openfl.utils.IDataOutput"] = openfl_utils_IDataOutput;
openfl_utils_IDataOutput.__name__ = "openfl.utils.IDataOutput";
openfl_utils_IDataOutput.prototype = {
	set_endian: null
	,get_endian: null
	,objectEncoding: null
	,writeBoolean: null
	,writeByte: null
	,writeBytes: null
	,writeDouble: null
	,writeFloat: null
	,writeInt: null
	,writeMultiByte: null
	,writeShort: null
	,writeUTF: null
	,writeUTFBytes: null
	,writeUnsignedInt: null
	,__class__: openfl_utils_IDataOutput
	,__properties__: {set_endian:"set_endian",get_endian:"get_endian"}
};
var openfl_utils_IDataInput = function() { };
$hxClasses["openfl.utils.IDataInput"] = openfl_utils_IDataInput;
openfl_utils_IDataInput.__name__ = "openfl.utils.IDataInput";
openfl_utils_IDataInput.prototype = {
	set_endian: null
	,get_endian: null
	,get_bytesAvailable: null
	,objectEncoding: null
	,readBoolean: null
	,readByte: null
	,readBytes: null
	,readDouble: null
	,readFloat: null
	,readInt: null
	,readMultiByte: null
	,readShort: null
	,readUnsignedByte: null
	,readUnsignedInt: null
	,readUnsignedShort: null
	,readUTF: null
	,readUTFBytes: null
	,__class__: openfl_utils_IDataInput
	,__properties__: {set_endian:"set_endian",get_endian:"get_endian",get_bytesAvailable:"get_bytesAvailable"}
};
var openfl_net_Socket = function(host,port) {
	if(port == null) {
		port = 0;
	}
	openfl_events_EventDispatcher.call(this);
	this.set_endian(0);
	this.timeout = 20000;
	this.__buffer = new haxe_io_Bytes(new ArrayBuffer(4096));
	if(port > 0 && port < 65535) {
		this.connect(host,port);
	}
};
$hxClasses["openfl.net.Socket"] = openfl_net_Socket;
openfl_net_Socket.__name__ = "openfl.net.Socket";
openfl_net_Socket.__interfaces__ = [openfl_utils_IDataOutput,openfl_utils_IDataInput];
openfl_net_Socket.__super__ = openfl_events_EventDispatcher;
openfl_net_Socket.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	objectEncoding: null
	,secure: null
	,timeout: null
	,__buffer: null
	,__connected: null
	,__endian: null
	,__host: null
	,__input: null
	,__inputBuffer: null
	,__output: null
	,__port: null
	,__socket: null
	,__timestamp: null
	,connect: function(host,port) {
		if(port == null) {
			port = 0;
		}
		if(this.__socket != null) {
			this.close();
		}
		if(port < 0 || port > 65535) {
			throw new js__$Boot_HaxeError(new openfl_errors_SecurityError("Invalid socket port number specified."));
		}
		this.__timestamp = kha_Scheduler.realTime();
		this.__host = host;
		this.__port = port;
		var this1 = new openfl_utils_ByteArrayData(0);
		this.__output = this1;
		this.__output.__endian = this.__endian;
		var this2 = new openfl_utils_ByteArrayData(0);
		this.__input = this2;
		this.__input.__endian = this.__endian;
		var this3 = new openfl_utils_ByteArrayData(0);
		this.__inputBuffer = this3;
		this.__inputBuffer.__endian = this.__endian;
		if(window.location.protocol == "https:") {
			this.secure = true;
		}
		var schema = this.secure ? "wss" : "ws";
		var urlReg = new EReg("^(.*://)?([A-Za-z0-9\\-\\.]+)/?(.*)","g");
		urlReg.match(host);
		var __webHost = urlReg.matched(2);
		var __webPath = urlReg.matched(3);
		this.__socket = new WebSocket(schema + "://" + __webHost + ":" + port + "/" + __webPath);
		this.__socket.binaryType = "arraybuffer";
		this.__socket.onopen = $bind(this,this.socket_onOpen);
		this.__socket.onmessage = $bind(this,this.socket_onMessage);
		this.__socket.onclose = $bind(this,this.socket_onClose);
		this.__socket.onerror = $bind(this,this.socket_onError);
		openfl_Lib.current.addEventListener("enterFrame",$bind(this,this.this_onEnterFrame));
	}
	,close: function() {
		if(this.__socket != null) {
			this.__cleanSocket();
		} else {
			throw new js__$Boot_HaxeError(new openfl_errors_IOError("Operation attempted on invalid socket."));
		}
	}
	,flush: function() {
		if(this.__socket == null) {
			throw new js__$Boot_HaxeError(new openfl_errors_IOError("Operation attempted on invalid socket."));
		}
		if(this.__output.length > 0) {
			try {
				var buffer = this.__output.b.bufferValue;
				if(buffer.byteLength > this.__output.length) {
					buffer = buffer.slice(0,this.__output.length);
				}
				this.__socket.send(buffer);
				var this1 = new openfl_utils_ByteArrayData(0);
				this.__output = this1;
				this.__output.__endian = this.__endian;
			} catch( e ) {
				haxe_CallStack.lastException = e;
				var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
				throw new js__$Boot_HaxeError(new openfl_errors_IOError("Operation attempted on invalid socket."));
			}
		}
	}
	,readBoolean: function() {
		if(this.__socket == null) {
			throw new js__$Boot_HaxeError(new openfl_errors_IOError("Operation attempted on invalid socket."));
		}
		return this.__input.readBoolean();
	}
	,readByte: function() {
		if(this.__socket == null) {
			throw new js__$Boot_HaxeError(new openfl_errors_IOError("Operation attempted on invalid socket."));
		}
		return this.__input.readByte();
	}
	,readBytes: function(bytes,offset,length) {
		if(length == null) {
			length = 0;
		}
		if(offset == null) {
			offset = 0;
		}
		if(this.__socket == null) {
			throw new js__$Boot_HaxeError(new openfl_errors_IOError("Operation attempted on invalid socket."));
		}
		this.__input.readBytes(bytes,offset,length);
	}
	,readDouble: function() {
		if(this.__socket == null) {
			throw new js__$Boot_HaxeError(new openfl_errors_IOError("Operation attempted on invalid socket."));
		}
		return this.__input.readDouble();
	}
	,readFloat: function() {
		if(this.__socket == null) {
			throw new js__$Boot_HaxeError(new openfl_errors_IOError("Operation attempted on invalid socket."));
		}
		return this.__input.readFloat();
	}
	,readInt: function() {
		if(this.__socket == null) {
			throw new js__$Boot_HaxeError(new openfl_errors_IOError("Operation attempted on invalid socket."));
		}
		return this.__input.readInt();
	}
	,readMultiByte: function(length,charSet) {
		if(this.__socket == null) {
			throw new js__$Boot_HaxeError(new openfl_errors_IOError("Operation attempted on invalid socket."));
		}
		return this.__input.readMultiByte(length,charSet);
	}
	,readShort: function() {
		if(this.__socket == null) {
			throw new js__$Boot_HaxeError(new openfl_errors_IOError("Operation attempted on invalid socket."));
		}
		return this.__input.readShort();
	}
	,readUnsignedByte: function() {
		if(this.__socket == null) {
			throw new js__$Boot_HaxeError(new openfl_errors_IOError("Operation attempted on invalid socket."));
		}
		return this.__input.readUnsignedByte();
	}
	,readUnsignedInt: function() {
		if(this.__socket == null) {
			throw new js__$Boot_HaxeError(new openfl_errors_IOError("Operation attempted on invalid socket."));
		}
		return this.__input.readUnsignedInt();
	}
	,readUnsignedShort: function() {
		if(this.__socket == null) {
			throw new js__$Boot_HaxeError(new openfl_errors_IOError("Operation attempted on invalid socket."));
		}
		return this.__input.readUnsignedShort();
	}
	,readUTF: function() {
		if(this.__socket == null) {
			throw new js__$Boot_HaxeError(new openfl_errors_IOError("Operation attempted on invalid socket."));
		}
		return this.__input.readUTF();
	}
	,readUTFBytes: function(length) {
		if(this.__socket == null) {
			throw new js__$Boot_HaxeError(new openfl_errors_IOError("Operation attempted on invalid socket."));
		}
		return this.__input.readUTFBytes(length);
	}
	,writeBoolean: function(value) {
		if(this.__socket == null) {
			throw new js__$Boot_HaxeError(new openfl_errors_IOError("Operation attempted on invalid socket."));
		}
		this.__output.writeBoolean(value);
	}
	,writeByte: function(value) {
		if(this.__socket == null) {
			throw new js__$Boot_HaxeError(new openfl_errors_IOError("Operation attempted on invalid socket."));
		}
		this.__output.writeByte(value);
	}
	,writeBytes: function(bytes,offset,length) {
		if(length == null) {
			length = 0;
		}
		if(offset == null) {
			offset = 0;
		}
		if(this.__socket == null) {
			throw new js__$Boot_HaxeError(new openfl_errors_IOError("Operation attempted on invalid socket."));
		}
		this.__output.writeBytes(bytes,offset,length);
	}
	,writeDouble: function(value) {
		if(this.__socket == null) {
			throw new js__$Boot_HaxeError(new openfl_errors_IOError("Operation attempted on invalid socket."));
		}
		this.__output.writeDouble(value);
	}
	,writeFloat: function(value) {
		if(this.__socket == null) {
			throw new js__$Boot_HaxeError(new openfl_errors_IOError("Operation attempted on invalid socket."));
		}
		this.__output.writeFloat(value);
	}
	,writeInt: function(value) {
		if(this.__socket == null) {
			throw new js__$Boot_HaxeError(new openfl_errors_IOError("Operation attempted on invalid socket."));
		}
		this.__output.writeInt(value);
	}
	,writeMultiByte: function(value,charSet) {
		if(this.__socket == null) {
			throw new js__$Boot_HaxeError(new openfl_errors_IOError("Operation attempted on invalid socket."));
		}
		this.__output.writeUTFBytes(value);
	}
	,writeShort: function(value) {
		if(this.__socket == null) {
			throw new js__$Boot_HaxeError(new openfl_errors_IOError("Operation attempted on invalid socket."));
		}
		this.__output.writeShort(value);
	}
	,writeUnsignedInt: function(value) {
		if(this.__socket == null) {
			throw new js__$Boot_HaxeError(new openfl_errors_IOError("Operation attempted on invalid socket."));
		}
		this.__output.writeUnsignedInt(value);
	}
	,writeUTF: function(value) {
		if(this.__socket == null) {
			throw new js__$Boot_HaxeError(new openfl_errors_IOError("Operation attempted on invalid socket."));
		}
		this.__output.writeUTF(value);
	}
	,writeUTFBytes: function(value) {
		if(this.__socket == null) {
			throw new js__$Boot_HaxeError(new openfl_errors_IOError("Operation attempted on invalid socket."));
		}
		this.__output.writeUTFBytes(value);
	}
	,__cleanSocket: function() {
		try {
			this.__socket.close();
		} catch( e ) {
			haxe_CallStack.lastException = e;
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
		}
		this.__socket = null;
		this.__connected = false;
		openfl_Lib.current.removeEventListener("enterFrame",$bind(this,this.this_onEnterFrame));
	}
	,socket_onClose: function(_) {
		this.dispatchEvent(new openfl_events_Event("close"));
	}
	,socket_onError: function(e) {
		this.dispatchEvent(new openfl_events_Event("ioError"));
	}
	,socket_onMessage: function(msg) {
		if(typeof(msg.data) == "string") {
			this.__inputBuffer.position = this.__inputBuffer.length;
			var cachePosition = this.__inputBuffer.position;
			this.__inputBuffer.writeUTFBytes(msg.data);
			this.__inputBuffer.position = cachePosition;
		} else {
			var newData = openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytesData(msg.data);
			newData.readBytes(this.__inputBuffer,this.__inputBuffer.length);
		}
		var _this = this.__inputBuffer;
		if(_$UInt_UInt_$Impl_$.gt(_this.length - _this.position,0)) {
			var this1 = new openfl_utils_ByteArrayData(0);
			var newInput = this1;
			var _this1 = this.__inputBuffer;
			var newDataLength = _this1.length - _this1.position;
			var _this2 = this.__input;
			this.__input.readBytes(newInput,0,_this2.length - _this2.position);
			this.__inputBuffer.position = 0;
			this.__inputBuffer.readBytes(newInput,newInput.position,this.__inputBuffer.length);
			newInput.position = 0;
			this.__input = newInput;
			this.__input.__endian = this.__endian;
			this.__inputBuffer.clear();
			this.dispatchEvent(new openfl_events_ProgressEvent("socketData",false,false,_$UInt_UInt_$Impl_$.toFloat(newDataLength),0));
		}
	}
	,socket_onOpen: function(_) {
		this.__connected = true;
		this.dispatchEvent(new openfl_events_Event("connect"));
	}
	,this_onEnterFrame: function(event) {
		if(this.__socket != null) {
			this.flush();
		}
	}
	,get_bytesAvailable: function() {
		var _this = this.__input;
		return _this.length - _this.position;
	}
	,get_bytesPending: function() {
		return this.__output.length;
	}
	,get_connected: function() {
		return this.__connected;
	}
	,get_endian: function() {
		return this.__endian;
	}
	,set_endian: function(value) {
		this.__endian = value;
		if(this.__input != null) {
			this.__input.__endian = value;
		}
		if(this.__inputBuffer != null) {
			this.__inputBuffer.__endian = value;
		}
		if(this.__output != null) {
			this.__output.__endian = value;
		}
		return this.__endian;
	}
	,__class__: openfl_net_Socket
	,__properties__: {set_endian:"set_endian",get_endian:"get_endian",get_connected:"get_connected",get_bytesPending:"get_bytesPending",get_bytesAvailable:"get_bytesAvailable"}
});
var openfl_net_URLLoader = function(request) {
	openfl_events_EventDispatcher.call(this);
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.dataFormat = 1;
	if(request != null) {
		this.load(request);
	}
};
$hxClasses["openfl.net.URLLoader"] = openfl_net_URLLoader;
openfl_net_URLLoader.__name__ = "openfl.net.URLLoader";
openfl_net_URLLoader.__super__ = openfl_events_EventDispatcher;
openfl_net_URLLoader.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	bytesLoaded: null
	,bytesTotal: null
	,data: null
	,dataFormat: null
	,__httpRequest: null
	,close: function() {
		if(this.__httpRequest != null) {
			this.__httpRequest.cancel();
		}
	}
	,load: function(request) {
		var _gthis = this;
		var httpRequest = new openfl__$internal_HTTPRequest();
		this.__prepareRequest(httpRequest,request);
		if(this.dataFormat == 0) {
			httpRequest.loadBytes().onProgress($bind(this,this.httpRequest_onProgress)).onError($bind(this,this.httpRequest_onError)).onComplete(function(data) {
				_gthis.__dispatchStatus();
				_gthis.data = openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(data);
				_gthis.dispatchEvent(new openfl_events_Event("complete"));
			});
		} else {
			httpRequest.loadText().onProgress($bind(this,this.httpRequest_onProgress)).onError($bind(this,this.httpRequest_onError)).onComplete(function(data1) {
				_gthis.__dispatchStatus();
				_gthis.data = data1;
				_gthis.dispatchEvent(new openfl_events_Event("complete"));
			});
		}
	}
	,__dispatchStatus: function() {
		var event = new openfl_events_HTTPStatusEvent("httpStatus",false,false,this.__httpRequest.responseStatus);
		event.responseURL = this.__httpRequest.uri;
		var headers = [];
		if(this.__httpRequest.enableResponseHeaders && this.__httpRequest.responseHeaders != null) {
			var _g = 0;
			var _g1 = this.__httpRequest.responseHeaders;
			while(_g < _g1.length) {
				var header = _g1[_g];
				++_g;
				headers.push(new openfl_net_URLRequestHeader(header.name,header.value));
			}
		}
		event.responseHeaders = headers;
		this.dispatchEvent(event);
	}
	,__prepareRequest: function(httpRequest,request) {
		this.__httpRequest = httpRequest;
		this.__httpRequest.uri = request.url;
		var tmp;
		switch(request.method) {
		case "DELETE":
			tmp = "DELETE";
			break;
		case "HEAD":
			tmp = "HEAD";
			break;
		case "OPTIONS":
			tmp = "OPTIONS";
			break;
		case "POST":
			tmp = "POST";
			break;
		case "PUT":
			tmp = "PUT";
			break;
		default:
			tmp = "GET";
		}
		this.__httpRequest.method = tmp;
		if(request.data != null) {
			if(Type.typeof(request.data) == ValueType.TObject) {
				var fields = Reflect.fields(request.data);
				var _g1 = 0;
				while(_g1 < fields.length) {
					var field = fields[_g1];
					++_g1;
					var _this = this.__httpRequest.formData;
					var value = Reflect.field(request.data,field);
					if(__map_reserved[field] != null) {
						_this.setReserved(field,value);
					} else {
						_this.h[field] = value;
					}
				}
			} else if(((request.data) instanceof haxe_io_Bytes)) {
				this.__httpRequest.data = request.data;
			} else {
				this.__httpRequest.data = haxe_io_Bytes.ofString(Std.string(request.data));
			}
		}
		this.__httpRequest.contentType = request.contentType;
		if(request.requestHeaders != null) {
			var _g11 = 0;
			var _g2 = request.requestHeaders;
			while(_g11 < _g2.length) {
				var header = _g2[_g11];
				++_g11;
				this.__httpRequest.headers.push(new openfl_net_URLRequestHeader(header.name,header.value));
			}
		}
		this.__httpRequest.followRedirects = request.followRedirects;
		this.__httpRequest.timeout = request.idleTimeout | 0;
		this.__httpRequest.withCredentials = request.manageCookies;
		var userAgent = request.userAgent;
		if(userAgent == null) {
			userAgent = "Mozilla/5.0 (Windows; U; en) AppleWebKit/420+ (KHTML, like Gecko) OpenFL/1.0";
		}
		this.__httpRequest.userAgent = request.userAgent;
		this.__httpRequest.enableResponseHeaders = true;
	}
	,httpRequest_onError: function(error) {
		this.__dispatchStatus();
		if(error == 403) {
			var event = new openfl_events_SecurityErrorEvent("securityError");
			event.text = Std.string(error);
			this.dispatchEvent(event);
		} else {
			var event1 = new openfl_events_IOErrorEvent("ioError");
			event1.text = Std.string(error);
			this.dispatchEvent(event1);
		}
	}
	,httpRequest_onProgress: function(bytesLoaded,bytesTotal) {
		var event = new openfl_events_ProgressEvent("progress");
		event.bytesLoaded = bytesLoaded;
		event.bytesTotal = bytesTotal;
		this.dispatchEvent(event);
	}
	,__class__: openfl_net_URLLoader
});
var openfl_net__$URLLoaderDataFormat_URLLoaderDataFormat_$Impl_$ = {};
$hxClasses["openfl.net._URLLoaderDataFormat.URLLoaderDataFormat_Impl_"] = openfl_net__$URLLoaderDataFormat_URLLoaderDataFormat_$Impl_$;
openfl_net__$URLLoaderDataFormat_URLLoaderDataFormat_$Impl_$.__name__ = "openfl.net._URLLoaderDataFormat.URLLoaderDataFormat_Impl_";
openfl_net__$URLLoaderDataFormat_URLLoaderDataFormat_$Impl_$.fromString = function(value) {
	switch(value) {
	case "binary":
		return 0;
	case "text":
		return 1;
	case "variables":
		return 2;
	default:
		return null;
	}
};
openfl_net__$URLLoaderDataFormat_URLLoaderDataFormat_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 0:
		return "binary";
	case 1:
		return "text";
	case 2:
		return "variables";
	default:
		return null;
	}
};
var openfl_net_URLRequest = function(url) {
	if(url != null) {
		this.url = url;
	}
	this.contentType = null;
	this.followRedirects = openfl_net_URLRequestDefaults.followRedirects;
	this.idleTimeout = openfl_net_URLRequestDefaults.idleTimeout > 0 ? openfl_net_URLRequestDefaults.idleTimeout : 30000;
	this.manageCookies = openfl_net_URLRequestDefaults.manageCookies;
	this.method = "GET";
	this.requestHeaders = [];
	this.userAgent = openfl_net_URLRequestDefaults.userAgent;
};
$hxClasses["openfl.net.URLRequest"] = openfl_net_URLRequest;
openfl_net_URLRequest.__name__ = "openfl.net.URLRequest";
openfl_net_URLRequest.prototype = {
	contentType: null
	,data: null
	,followRedirects: null
	,idleTimeout: null
	,manageCookies: null
	,method: null
	,requestHeaders: null
	,url: null
	,userAgent: null
	,__class__: openfl_net_URLRequest
};
var openfl_net_URLRequestDefaults = function() { };
$hxClasses["openfl.net.URLRequestDefaults"] = openfl_net_URLRequestDefaults;
openfl_net_URLRequestDefaults.__name__ = "openfl.net.URLRequestDefaults";
var openfl_net_URLRequestHeader = function(name,value) {
	if(value == null) {
		value = "";
	}
	if(name == null) {
		name = "";
	}
	this.name = name;
	this.value = value;
};
$hxClasses["openfl.net.URLRequestHeader"] = openfl_net_URLRequestHeader;
openfl_net_URLRequestHeader.__name__ = "openfl.net.URLRequestHeader";
openfl_net_URLRequestHeader.prototype = {
	name: null
	,value: null
	,__class__: openfl_net_URLRequestHeader
};
var openfl_net_URLStream = function() {
	openfl_events_EventDispatcher.call(this);
	this.__loader = new openfl_net_URLLoader();
	this.__loader.dataFormat = 0;
};
$hxClasses["openfl.net.URLStream"] = openfl_net_URLStream;
openfl_net_URLStream.__name__ = "openfl.net.URLStream";
openfl_net_URLStream.__interfaces__ = [openfl_utils_IDataInput];
openfl_net_URLStream.__super__ = openfl_events_EventDispatcher;
openfl_net_URLStream.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	objectEncoding: null
	,__data: null
	,__loader: null
	,close: function() {
		this.__removeEventListeners();
		this.__data = null;
	}
	,load: function(request) {
		this.__removeEventListeners();
		this.__addEventListeners();
		this.__loader.load(request);
	}
	,readBoolean: function() {
		return this.__data.readBoolean();
	}
	,readByte: function() {
		return this.__data.readByte();
	}
	,readBytes: function(bytes,offset,length) {
		if(length == null) {
			length = 0;
		}
		if(offset == null) {
			offset = 0;
		}
		this.__data.readBytes(bytes,offset,length);
	}
	,readDouble: function() {
		return this.__data.readDouble();
	}
	,readFloat: function() {
		return this.__data.readFloat();
	}
	,readInt: function() {
		return this.__data.readInt();
	}
	,readMultiByte: function(length,charSet) {
		return this.__data.readMultiByte(length,charSet);
	}
	,readObject: function() {
		return null;
	}
	,readShort: function() {
		return this.__data.readShort();
	}
	,readUnsignedByte: function() {
		return this.__data.readUnsignedByte();
	}
	,readUnsignedInt: function() {
		return this.__data.readUnsignedInt();
	}
	,readUnsignedShort: function() {
		return this.__data.readUnsignedShort();
	}
	,readUTF: function() {
		return this.__data.readUTF();
	}
	,readUTFBytes: function(length) {
		return this.__data.readUTFBytes(length);
	}
	,__addEventListeners: function() {
		this.__loader.addEventListener("complete",$bind(this,this.loader_onComplete));
		this.__loader.addEventListener("ioError",$bind(this,this.loader_onIOError));
		this.__loader.addEventListener("securityError",$bind(this,this.loader_onSecurityError));
		this.__loader.addEventListener("progress",$bind(this,this.loader_onProgressEvent));
	}
	,__removeEventListeners: function() {
		this.__loader.removeEventListener("complete",$bind(this,this.loader_onComplete));
		this.__loader.removeEventListener("ioError",$bind(this,this.loader_onIOError));
		this.__loader.removeEventListener("securityError",$bind(this,this.loader_onSecurityError));
		this.__loader.removeEventListener("progress",$bind(this,this.loader_onProgressEvent));
	}
	,loader_onComplete: function(event) {
		this.__removeEventListeners();
		this.__data = this.__loader.data;
		this.dispatchEvent(new openfl_events_ProgressEvent("progress",false,false,this.__loader.bytesLoaded,this.__loader.bytesTotal));
		this.dispatchEvent(new openfl_events_Event("complete"));
	}
	,loader_onIOError: function(event) {
		this.__removeEventListeners();
		this.dispatchEvent(event);
	}
	,loader_onSecurityError: function(event) {
		this.__removeEventListeners();
		this.dispatchEvent(event);
	}
	,loader_onProgressEvent: function(event) {
		this.__data = this.__loader.data;
		this.dispatchEvent(event);
	}
	,get_bytesAvailable: function() {
		if(this.__data != null) {
			return this.__data.length - this.__data.position;
		}
		return 0;
	}
	,get_connected: function() {
		return false;
	}
	,get_endian: function() {
		return this.__data.__endian;
	}
	,set_endian: function(value) {
		return this.__data.__endian = value;
	}
	,__class__: openfl_net_URLStream
	,__properties__: {set_endian:"set_endian",get_endian:"get_endian",get_connected:"get_connected",get_bytesAvailable:"get_bytesAvailable"}
});
var openfl_net__$URLVariables_URLVariables_$Impl_$ = {};
$hxClasses["openfl.net._URLVariables.URLVariables_Impl_"] = openfl_net__$URLVariables_URLVariables_$Impl_$;
openfl_net__$URLVariables_URLVariables_$Impl_$.__name__ = "openfl.net._URLVariables.URLVariables_Impl_";
openfl_net__$URLVariables_URLVariables_$Impl_$._new = function(source) {
	var this1 = { };
	if(source != null) {
		openfl_net__$URLVariables_URLVariables_$Impl_$.decode(this1,source);
	}
	return this1;
};
openfl_net__$URLVariables_URLVariables_$Impl_$.decode = function(this1,source) {
	var fields = Reflect.fields(this1);
	var _g = 0;
	while(_g < fields.length) {
		var f = fields[_g];
		++_g;
		Reflect.deleteField(this1,f);
	}
	var fields1 = source.split(";").join("&").split("&");
	var _g1 = 0;
	while(_g1 < fields1.length) {
		var f1 = fields1[_g1];
		++_g1;
		var eq = f1.indexOf("=");
		if(eq > 0) {
			var s = HxOverrides.substr(f1,0,eq);
			var field = decodeURIComponent(s.split("+").join(" "));
			var s1 = HxOverrides.substr(f1,eq + 1,null);
			this1[field] = decodeURIComponent(s1.split("+").join(" "));
		} else if(eq != 0) {
			this1[decodeURIComponent(f1.split("+").join(" "))] = "";
		}
	}
};
openfl_net__$URLVariables_URLVariables_$Impl_$.toString = function(this1) {
	var result = [];
	var fields = Reflect.fields(this1);
	var _g = 0;
	while(_g < fields.length) {
		var f = fields[_g];
		++_g;
		var tmp = encodeURIComponent(f) + "=";
		var s = Reflect.field(this1,f);
		result.push(tmp + encodeURIComponent(s));
	}
	return result.join("&");
};
var openfl_net_XMLSocket = function(host,port) {
	if(port == null) {
		port = 80;
	}
	openfl_events_EventDispatcher.call(this);
	if(host != null) {
		this.connect(host,port);
	}
};
$hxClasses["openfl.net.XMLSocket"] = openfl_net_XMLSocket;
openfl_net_XMLSocket.__name__ = "openfl.net.XMLSocket";
openfl_net_XMLSocket.__super__ = openfl_events_EventDispatcher;
openfl_net_XMLSocket.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	connected: null
	,timeout: null
	,__socket: null
	,close: function() {
		this.__socket.removeEventListener("close",$bind(this,this.__onClose));
		this.__socket.removeEventListener("connect",$bind(this,this.__onConnect));
		this.__socket.removeEventListener("ioError",$bind(this,this.__onError));
		this.__socket.removeEventListener("socketData",$bind(this,this.__onSocketData));
		this.__socket.close();
	}
	,connect: function(host,port) {
		this.connected = false;
		this.__socket = new openfl_net_Socket();
		this.__socket.addEventListener("close",$bind(this,this.__onClose));
		this.__socket.addEventListener("connect",$bind(this,this.__onConnect));
		this.__socket.addEventListener("ioError",$bind(this,this.__onError));
		this.__socket.addEventListener("socketData",$bind(this,this.__onSocketData));
		this.__socket.connect(host,port);
	}
	,send: function(object) {
		this.__socket.writeUTFBytes(Std.string(object));
		this.__socket.writeByte(0);
		this.__socket.flush();
	}
	,__onClose: function(_) {
		this.connected = false;
		this.dispatchEvent(new openfl_events_Event("close"));
	}
	,__onConnect: function(_) {
		this.connected = true;
		this.dispatchEvent(new openfl_events_Event("connect"));
	}
	,__onError: function(_) {
		this.dispatchEvent(new openfl_events_Event("ioError"));
	}
	,__onSocketData: function(_) {
		this.dispatchEvent(new openfl_events_DataEvent("data",false,false,this.__socket.readUTFBytes(this.__socket.get_bytesAvailable())));
	}
	,__class__: openfl_net_XMLSocket
});
var openfl_printing_PrintJob = function() {
};
$hxClasses["openfl.printing.PrintJob"] = openfl_printing_PrintJob;
openfl_printing_PrintJob.__name__ = "openfl.printing.PrintJob";
openfl_printing_PrintJob.prototype = {
	orientation: null
	,pageHeight: null
	,pageWidth: null
	,paperHeight: null
	,paperWidth: null
	,__bitmapData: null
	,__started: null
	,addPage: function(sprite,printArea,options,frameNum) {
		if(frameNum == null) {
			frameNum = 0;
		}
		if(!this.__started) {
			return;
		}
		if(printArea == null) {
			printArea = sprite.getBounds(sprite);
		}
		var bitmapData = new openfl_display_BitmapData(Math.ceil(printArea.width),Math.ceil(printArea.height),true,0);
		bitmapData.draw(sprite);
		this.__bitmapData.push(bitmapData);
	}
	,send: function() {
		if(!this.__started) {
			return;
		}
		var $window = window.open("","","width=500,height=500");
		if($window != null) {
			var style = $window.document.createElement("style");
			style.innerText = "@media all {\n\t\t\t\t\t.page-break\t{ display: none; }\n\t\t\t\t}\n\n\t\t\t\t@media print {\n\t\t\t\t\t.page-break\t{ display: block; page-break-before: always; }\n\t\t\t\t}";
			$window.document.head.appendChild(style);
			var div;
			var image;
			var bitmapData;
			var _g = 0;
			var _g1 = this.__bitmapData.length;
			while(_g < _g1) {
				var i = _g++;
				bitmapData = this.__bitmapData[i];
				bitmapData.image.sync();
				if(bitmapData.image.__srcCanvas != null) {
					if(i > 0) {
						div = $window.document.createElement("div");
						div.className = "page-break";
						$window.document.body.appendChild(div);
					}
					image = new Image();
					image.src = bitmapData.image.__srcCanvas.toDataURL("image/png");
					$window.document.body.appendChild(image);
				}
			}
			haxe_Timer.delay(function() {
				$window.focus();
				$window.print();
			},500);
		}
	}
	,start: function() {
		this.__started = true;
		this.__bitmapData = [];
		return true;
	}
	,__class__: openfl_printing_PrintJob
};
var openfl_printing_PrintJobOptions = function(printAsBitmap) {
	if(printAsBitmap == null) {
		printAsBitmap = false;
	}
	this.printAsBitmap = printAsBitmap;
};
$hxClasses["openfl.printing.PrintJobOptions"] = openfl_printing_PrintJobOptions;
openfl_printing_PrintJobOptions.__name__ = "openfl.printing.PrintJobOptions";
openfl_printing_PrintJobOptions.prototype = {
	printAsBitmap: null
	,__class__: openfl_printing_PrintJobOptions
};
var openfl_printing__$PrintJobOrientation_PrintJobOrientation_$Impl_$ = {};
$hxClasses["openfl.printing._PrintJobOrientation.PrintJobOrientation_Impl_"] = openfl_printing__$PrintJobOrientation_PrintJobOrientation_$Impl_$;
openfl_printing__$PrintJobOrientation_PrintJobOrientation_$Impl_$.__name__ = "openfl.printing._PrintJobOrientation.PrintJobOrientation_Impl_";
openfl_printing__$PrintJobOrientation_PrintJobOrientation_$Impl_$.fromString = function(value) {
	switch(value) {
	case "landscape":
		return 0;
	case "portrait":
		return 1;
	default:
		return null;
	}
};
openfl_printing__$PrintJobOrientation_PrintJobOrientation_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 0:
		return "landscape";
	case 1:
		return "portrait";
	default:
		return null;
	}
};
var openfl_sensors_Accelerometer = function() {
	this.muted = false;
	openfl_events_EventDispatcher.call(this);
	if(!openfl_sensors_Accelerometer.initialized) {
		openfl_sensors_Accelerometer.initialized = true;
		kha_input_Sensor.get(kha_input_SensorType.Accelerometer).notify(openfl_sensors_Accelerometer.__notify);
	}
	this.setRequestedUpdateInterval(34);
};
$hxClasses["openfl.sensors.Accelerometer"] = openfl_sensors_Accelerometer;
openfl_sensors_Accelerometer.__name__ = "openfl.sensors.Accelerometer";
openfl_sensors_Accelerometer.__notify = function(x,y,z) {
	openfl_sensors_Accelerometer.currentX = x;
	openfl_sensors_Accelerometer.currentY = y;
	openfl_sensors_Accelerometer.currentZ = z;
};
openfl_sensors_Accelerometer.__super__ = openfl_events_EventDispatcher;
openfl_sensors_Accelerometer.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	muted: null
	,__interval: null
	,__timer: null
	,addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) {
			useWeakReference = false;
		}
		if(priority == null) {
			priority = 0;
		}
		if(useCapture == null) {
			useCapture = false;
		}
		openfl_events_EventDispatcher.prototype.addEventListener.call(this,type,listener,useCapture,priority,useWeakReference);
		this.__update();
	}
	,setRequestedUpdateInterval: function(interval) {
		if(interval < 0) {
			throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError());
		} else if(interval == 0) {
			interval = 34;
		}
		this.__interval = interval;
		if(this.__timer != null) {
			this.__timer.stop();
			this.__timer = null;
		}
		if(openfl_sensors_Accelerometer.isSupported && !this.muted) {
			this.__timer = new haxe_Timer(this.__interval);
			this.__timer.run = $bind(this,this.__update);
		}
	}
	,__update: function() {
		var event = new openfl_events_AccelerometerEvent("update");
		event.timestamp = kha_Scheduler.realTime();
		event.accelerationX = openfl_sensors_Accelerometer.currentX;
		event.accelerationY = openfl_sensors_Accelerometer.currentY;
		event.accelerationZ = openfl_sensors_Accelerometer.currentZ;
		this.dispatchEvent(event);
	}
	,__class__: openfl_sensors_Accelerometer
});
var openfl_system_ApplicationDomain = function(parentDomain) {
	if(parentDomain != null) {
		this.parentDomain = parentDomain;
	} else {
		this.parentDomain = openfl_system_ApplicationDomain.currentDomain;
	}
};
$hxClasses["openfl.system.ApplicationDomain"] = openfl_system_ApplicationDomain;
openfl_system_ApplicationDomain.__name__ = "openfl.system.ApplicationDomain";
openfl_system_ApplicationDomain.prototype = {
	parentDomain: null
	,getDefinition: function(name) {
		return $hxClasses[name];
	}
	,hasDefinition: function(name) {
		return $hxClasses[name] != null;
	}
	,__class__: openfl_system_ApplicationDomain
};
var openfl_system_Capabilities = function() { };
$hxClasses["openfl.system.Capabilities"] = openfl_system_Capabilities;
openfl_system_Capabilities.__name__ = "openfl.system.Capabilities";
openfl_system_Capabilities.__properties__ = {get_version:"get_version",get_screenResolutionY:"get_screenResolutionY",get_screenResolutionX:"get_screenResolutionX",get_screenDPI:"get_screenDPI",get_pixelAspectRatio:"get_pixelAspectRatio",get_os:"get_os",get_manufacturer:"get_manufacturer",get_language:"get_language",get_cpuArchitecture:"get_cpuArchitecture"};
openfl_system_Capabilities.hasMultiChannelAudio = function(type) {
	return false;
};
openfl_system_Capabilities.get_cpuArchitecture = function() {
	return "x86";
};
openfl_system_Capabilities.get_language = function() {
	var code = kha_System.get_language();
	var language = openfl_system_Capabilities.extractLanguage(code).toLowerCase();
	switch(language) {
	case "cs":case "da":case "de":case "en":case "es":case "fi":case "fr":case "hu":case "it":case "ja":case "ko":case "nb":case "nl":case "pl":case "pt":case "ru":case "sv":case "tr":
		return language;
	case "zh":
		var region = openfl_system_Capabilities.extractRegion(code);
		if(region != null) {
			switch(region.toUpperCase()) {
			case "HANT":case "TW":
				return "zh-TW";
			default:
			}
		}
		return "zh-CN";
	default:
		return "xu";
	}
};
openfl_system_Capabilities.extractLanguage = function(code) {
	var index = code.indexOf("_");
	if(index > -1) {
		return code.substring(0,index);
	}
	index = code.indexOf("-");
	if(index > -1) {
		return code.substring(0,index);
	}
	return code;
};
openfl_system_Capabilities.extractRegion = function(code) {
	var underscoreIndex = code.indexOf("_");
	var dotIndex = code.indexOf(".");
	if(underscoreIndex > -1) {
		if(dotIndex > -1) {
			return code.substring(underscoreIndex + 1,dotIndex);
		} else {
			return code.substring(underscoreIndex + 1);
		}
	}
	var dashIndex = code.indexOf("-");
	if(dashIndex > -1) {
		if(dotIndex > -1) {
			return code.substring(dashIndex + 1,dotIndex);
		} else {
			return code.substring(dashIndex + 1);
		}
	}
	return null;
};
openfl_system_Capabilities.get_manufacturer = function() {
	return "OpenFL HTML5";
};
openfl_system_Capabilities.get_os = function() {
	return "HTML5";
};
openfl_system_Capabilities.get_pixelAspectRatio = function() {
	return 1;
};
openfl_system_Capabilities.get_screenDPI = function() {
	var screenDPI = 72.0;
	var $window = openfl__$internal_app_Application.current != null ? openfl__$internal_app_Application.current.window : null;
	if($window != null) {
		screenDPI *= $window.scale;
	}
	return screenDPI;
};
openfl_system_Capabilities.get_screenResolutionX = function() {
	return kha_Display.get_primary().get_width();
};
openfl_system_Capabilities.get_screenResolutionY = function() {
	return kha_Display.get_primary().get_height();
};
openfl_system_Capabilities.get_version = function() {
	var value = "WEB";
	return value;
};
var openfl_system_LoaderContext = function(checkPolicyFile,applicationDomain,securityDomain) {
	if(checkPolicyFile == null) {
		checkPolicyFile = false;
	}
	this.checkPolicyFile = checkPolicyFile;
	this.securityDomain = securityDomain;
	this.applicationDomain = applicationDomain;
	this.allowCodeImport = true;
	this.allowLoadBytesCodeExecution = true;
};
$hxClasses["openfl.system.LoaderContext"] = openfl_system_LoaderContext;
openfl_system_LoaderContext.__name__ = "openfl.system.LoaderContext";
openfl_system_LoaderContext.prototype = {
	allowCodeImport: null
	,allowLoadBytesCodeExecution: null
	,applicationDomain: null
	,checkPolicyFile: null
	,securityDomain: null
	,__class__: openfl_system_LoaderContext
};
var openfl_system_Security = function() { };
$hxClasses["openfl.system.Security"] = openfl_system_Security;
openfl_system_Security.__name__ = "openfl.system.Security";
openfl_system_Security.allowDomain = function(p1,p2,p3,p4,p5) {
};
openfl_system_Security.allowInsecureDomain = function(p1,p2,p3,p4,p5) {
};
openfl_system_Security.loadPolicyFile = function(url) {
};
var openfl_system_SecurityDomain = function() {
};
$hxClasses["openfl.system.SecurityDomain"] = openfl_system_SecurityDomain;
openfl_system_SecurityDomain.__name__ = "openfl.system.SecurityDomain";
openfl_system_SecurityDomain.prototype = {
	__class__: openfl_system_SecurityDomain
};
var openfl_system_System = function() { };
$hxClasses["openfl.system.System"] = openfl_system_System;
openfl_system_System.__name__ = "openfl.system.System";
openfl_system_System.__properties__ = {get_vmVersion:"get_vmVersion",get_totalMemory:"get_totalMemory"};
openfl_system_System.exit = function(code) {
};
openfl_system_System.gc = function() {
};
openfl_system_System.pause = function() {
	openfl_Lib.notImplemented({ fileName : "openfl/system/System.hx", lineNumber : 17, className : "openfl.system.System", methodName : "pause"});
};
openfl_system_System.resume = function() {
	openfl_Lib.notImplemented({ fileName : "openfl/system/System.hx", lineNumber : 21, className : "openfl.system.System", methodName : "resume"});
};
openfl_system_System.setClipboard = function(string) {
	openfl_desktop_Clipboard.get_generalClipboard().setData(2,string);
};
openfl_system_System.disposeXML = function(node) {
};
openfl_system_System.get_totalMemory = function() {
	return (window.performance && window.performance.memory) ? window.performance.memory.usedJSHeapSize : 0;
};
openfl_system_System.get_vmVersion = function() {
	return "1.0.0";
};
var openfl_system__$TouchscreenType_TouchscreenType_$Impl_$ = {};
$hxClasses["openfl.system._TouchscreenType.TouchscreenType_Impl_"] = openfl_system__$TouchscreenType_TouchscreenType_$Impl_$;
openfl_system__$TouchscreenType_TouchscreenType_$Impl_$.__name__ = "openfl.system._TouchscreenType.TouchscreenType_Impl_";
openfl_system__$TouchscreenType_TouchscreenType_$Impl_$.fromString = function(value) {
	switch(value) {
	case "finger":
		return 0;
	case "none":
		return 1;
	case "stylus":
		return 2;
	default:
		return null;
	}
};
openfl_system__$TouchscreenType_TouchscreenType_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 0:
		return "finger";
	case 1:
		return "none";
	case 2:
		return "stylus";
	default:
		return null;
	}
};
var openfl_text__$AntiAliasType_AntiAliasType_$Impl_$ = {};
$hxClasses["openfl.text._AntiAliasType.AntiAliasType_Impl_"] = openfl_text__$AntiAliasType_AntiAliasType_$Impl_$;
openfl_text__$AntiAliasType_AntiAliasType_$Impl_$.__name__ = "openfl.text._AntiAliasType.AntiAliasType_Impl_";
openfl_text__$AntiAliasType_AntiAliasType_$Impl_$.fromString = function(value) {
	switch(value) {
	case "advanced":
		return 0;
	case "normal":
		return 1;
	default:
		return null;
	}
};
openfl_text__$AntiAliasType_AntiAliasType_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 0:
		return "advanced";
	case 1:
		return "normal";
	default:
		return null;
	}
};
var openfl_text_Font = function() {
};
$hxClasses["openfl.text.Font"] = openfl_text_Font;
openfl_text_Font.__name__ = "openfl.text.Font";
openfl_text_Font.enumerateFonts = function(enumerateDeviceFonts) {
	if(enumerateDeviceFonts == null) {
		enumerateDeviceFonts = false;
	}
	return openfl_text_Font.__registeredFonts;
};
openfl_text_Font.registerFont = function(font) {
	var instance = Type.createInstance(font,[]);
	openfl_text_Font.__registeredFonts.push(instance);
	var k = instance.fontName;
	var _this = openfl_text_Font.__fontByName;
	if(__map_reserved[k] != null) {
		_this.setReserved(k,instance);
	} else {
		_this.h[k] = instance;
	}
};
openfl_text_Font.loadFromName = function(name) {
	var font = new openfl_text_Font();
	font.fontName = name;
	var this1 = new openfl__$internal_app_Future();
	var promise = this1;
	var ua = window.navigator.userAgent.toLowerCase();
	var isSafari = ua.indexOf(" safari/") >= 0 && ua.indexOf(" chrome/") < 0;
	if(!isSafari && window.document.fonts != null && window.document.fonts.load != null) {
		window.document.fonts.load("1em '" + name + "'").then(function(_) {
			openfl__$internal_app__$Promise_Promise_$Impl_$.complete(promise,font);
		},function(_1) {
			openfl__$internal_utils_Log.warn("Could not load web font \"" + name + "\"",{ fileName : "openfl/text/Font.hx", lineNumber : 42, className : "openfl.text.Font", methodName : "loadFromName"});
			openfl__$internal_app__$Promise_Promise_$Impl_$.complete(promise,font);
		});
	} else {
		var node1 = openfl_text_Font.__measureFontNode("'" + name + "', sans-serif");
		var node2 = openfl_text_Font.__measureFontNode("'" + name + "', serif");
		var width1 = node1.offsetWidth;
		var width2 = node2.offsetWidth;
		var interval = -1;
		var timeout = 3000;
		var intervalLength = 50;
		var intervalCount = 0;
		var loaded;
		var timeExpired;
		var checkFont = function() {
			intervalCount += 1;
			loaded = node1.offsetWidth != width1 || node2.offsetWidth != width2;
			timeExpired = intervalCount * intervalLength >= timeout;
			if(loaded || timeExpired) {
				window.clearInterval(interval);
				node1.parentNode.removeChild(node1);
				node2.parentNode.removeChild(node2);
				node1 = null;
				node2 = null;
				if(timeExpired) {
					openfl__$internal_utils_Log.warn("Could not load web font \"" + name + "\"",{ fileName : "openfl/text/Font.hx", lineNumber : 72, className : "openfl.text.Font", methodName : "loadFromName"});
				}
				openfl__$internal_app__$Promise_Promise_$Impl_$.complete(promise,font);
			}
		};
		interval = window.setInterval(checkFont,intervalLength);
	}
	return promise;
};
openfl_text_Font.__measureFontNode = function(fontFamily) {
	var node = window.document.createElement("span");
	node.setAttribute("aria-hidden","true");
	var text = window.document.createTextNode("BESbswy");
	node.appendChild(text);
	var style = node.style;
	style.display = "block";
	style.position = "absolute";
	style.top = "-9999px";
	style.left = "-9999px";
	style.fontSize = "300px";
	style.width = "auto";
	style.height = "auto";
	style.lineHeight = "normal";
	style.margin = "0";
	style.padding = "0";
	style.fontVariant = "normal";
	style.whiteSpace = "nowrap";
	style.fontFamily = fontFamily;
	window.document.body.appendChild(node);
	return node;
};
openfl_text_Font.prototype = {
	fontName: null
	,fontStyle: null
	,fontType: null
	,__class__: openfl_text_Font
};
var openfl_text__$FontStyle_FontStyle_$Impl_$ = {};
$hxClasses["openfl.text._FontStyle.FontStyle_Impl_"] = openfl_text__$FontStyle_FontStyle_$Impl_$;
openfl_text__$FontStyle_FontStyle_$Impl_$.__name__ = "openfl.text._FontStyle.FontStyle_Impl_";
openfl_text__$FontStyle_FontStyle_$Impl_$.fromString = function(value) {
	switch(value) {
	case "bold":
		return 0;
	case "boldItalic":
		return 1;
	case "italic":
		return 2;
	case "regular":
		return 3;
	default:
		return null;
	}
};
openfl_text__$FontStyle_FontStyle_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 0:
		return "bold";
	case 1:
		return "boldItalic";
	case 2:
		return "italic";
	case 3:
		return "regular";
	default:
		return null;
	}
};
var openfl_text__$FontType_FontType_$Impl_$ = {};
$hxClasses["openfl.text._FontType.FontType_Impl_"] = openfl_text__$FontType_FontType_$Impl_$;
openfl_text__$FontType_FontType_$Impl_$.__name__ = "openfl.text._FontType.FontType_Impl_";
openfl_text__$FontType_FontType_$Impl_$.fromString = function(value) {
	switch(value) {
	case "device":
		return 0;
	case "embedded":
		return 1;
	case "embeddedCFF":
		return 2;
	default:
		return null;
	}
};
openfl_text__$FontType_FontType_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 0:
		return "device";
	case 1:
		return "embedded";
	case 2:
		return "embeddedCFF";
	default:
		return null;
	}
};
var openfl_text__$GridFitType_GridFitType_$Impl_$ = {};
$hxClasses["openfl.text._GridFitType.GridFitType_Impl_"] = openfl_text__$GridFitType_GridFitType_$Impl_$;
openfl_text__$GridFitType_GridFitType_$Impl_$.__name__ = "openfl.text._GridFitType.GridFitType_Impl_";
openfl_text__$GridFitType_GridFitType_$Impl_$.fromString = function(value) {
	switch(value) {
	case "none":
		return 0;
	case "pixel":
		return 1;
	case "subpixel":
		return 2;
	default:
		return null;
	}
};
openfl_text__$GridFitType_GridFitType_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 0:
		return "none";
	case 1:
		return "pixel";
	case 2:
		return "subpixel";
	default:
		return null;
	}
};
var openfl_text_StaticText = function() {
	openfl_display_DisplayObject.call(this);
	this.__graphics = new openfl_display_Graphics(this);
};
$hxClasses["openfl.text.StaticText"] = openfl_text_StaticText;
openfl_text_StaticText.__name__ = "openfl.text.StaticText";
openfl_text_StaticText.__super__ = openfl_display_DisplayObject;
openfl_text_StaticText.prototype = $extend(openfl_display_DisplayObject.prototype,{
	text: null
	,__class__: openfl_text_StaticText
});
var openfl_text_TextField = function() {
	this.__ensureCaretVisibleNeeded = false;
	this.__forceCachedBitmapUpdate = false;
	this.__anchor = 0;
	openfl_display_InteractiveObject.call(this);
	this.__caretIndex = -1;
	this.__displayAsPassword = false;
	this.__graphics = new openfl_display_Graphics(this);
	this.__textEngine = new openfl__$internal_text_TextEngine(this);
	this.__layoutDirty = true;
	this.__offsetX = 0;
	this.__offsetY = 0;
	this.__text = "";
	if(openfl_text_TextField.__defaultTextFormat == null) {
		openfl_text_TextField.__defaultTextFormat = new openfl_text_TextFormat("Times New Roman",12,0,false,false,false,"","",3,0,0,0,0);
		openfl_text_TextField.__defaultTextFormat.blockIndent = 0;
		openfl_text_TextField.__defaultTextFormat.bullet = false;
		openfl_text_TextField.__defaultTextFormat.letterSpacing = 0;
		openfl_text_TextField.__defaultTextFormat.kerning = false;
	}
	this.__textFormat = openfl_text_TextField.__defaultTextFormat.clone();
	var this1 = this.__textEngine.textFormatRanges;
	var x = new openfl__$internal_text_TextFormatRange(this.__textFormat,0,0);
	this1.data.push(x);
	this.addEventListener("mouseDown",$bind(this,this.this_onMouseDown));
	this.addEventListener("focusIn",$bind(this,this.this_onFocusIn));
	this.addEventListener("focusOut",$bind(this,this.this_onFocusOut));
	this.addEventListener("keyDown",$bind(this,this.this_onKeyDown));
	this.set_mouseWheelEnabled(true);
};
$hxClasses["openfl.text.TextField"] = openfl_text_TextField;
openfl_text_TextField.__name__ = "openfl.text.TextField";
openfl_text_TextField.__normalizeNewlines = function(text) {
	return StringTools.replace(text,"\n","\r");
};
openfl_text_TextField.__super__ = openfl_display_InteractiveObject;
openfl_text_TextField.prototype = $extend(openfl_display_InteractiveObject.prototype,{
	alwaysShowSelection: null
	,__anchor: null
	,__bounds: null
	,__caretIndex: null
	,__cursorTimer: null
	,__dirty: null
	,__displayAsPassword: null
	,__inputEnabled: null
	,__isHTML: null
	,__layoutDirty: null
	,__mouseWheelEnabled: null
	,__offsetX: null
	,__offsetY: null
	,__selectionIndex: null
	,__showCursor: null
	,__text: null
	,__htmlText: null
	,__textEngine: null
	,__textFormat: null
	,__forceCachedBitmapUpdate: null
	,__ensureCaretVisibleNeeded: null
	,__rawHtmlText: null
	,appendText: function(text) {
		if(text == null || text == "") {
			return;
		}
		this.__dirty = true;
		this.__layoutDirty = true;
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
		if(!this.__updateDirty) {
			this.__updateDirty = true;
			this.__setParentUpdateTraverse();
		}
		this.__updateText(this.__text + text);
		var this1 = this.__textEngine.textFormatRanges;
		var index = this.__textEngine.textFormatRanges.data.get_length() - 1;
		this1.data.get(index).end = _$UnicodeString_UnicodeString_$Impl_$.get_length(this.__text);
		this.__ensureCaretVisibleNeeded = true;
	}
	,getCharBoundaries: function(charIndex) {
		if(charIndex < 0 || charIndex > _$UnicodeString_UnicodeString_$Impl_$.get_length(this.__text) - 1) {
			return null;
		}
		this.__updateLayout();
		var group = this.__textEngine.layoutGroups.data.iterator();
		while(group.hasNext()) {
			var group1 = group.next();
			if(charIndex >= group1.startIndex && charIndex <= group1.endIndex) {
				try {
					var x = group1.offsetX;
					var _g1 = 0;
					var _g2 = charIndex - group1.startIndex;
					while(_g1 < _g2) {
						var i = _g1++;
						x += group1.positions[i];
					}
					var lastPosition = group1.positions[charIndex - group1.startIndex];
					return new openfl_geom_Rectangle(x,group1.offsetY,lastPosition,group1.ascent + group1.descent);
				} catch( e ) {
					haxe_CallStack.lastException = e;
					var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
				}
			}
		}
		return null;
	}
	,getCharIndexAtPoint: function(x,y) {
		if(x <= 2 || x > this.get_width() + 4 || y <= 0 || y > this.get_height() + 4) {
			return -1;
		}
		this.__updateLayout();
		x += this.get_scrollH();
		var _g = 0;
		var _g1 = this.get_scrollV() - 1;
		while(_g < _g1) {
			var i = _g++;
			y += this.__textEngine.lineHeights.data.get(i);
		}
		var group = this.__textEngine.layoutGroups.data.iterator();
		while(group.hasNext()) {
			var group1 = group.next();
			if(y >= group1.offsetY && y <= group1.offsetY + group1.height) {
				if(x >= group1.offsetX && x <= group1.offsetX + group1.width) {
					var advance = 0.0;
					var _g3 = 0;
					var _g4 = group1.positions.length;
					while(_g3 < _g4) {
						var i1 = _g3++;
						advance += group1.positions[i1];
						if(x <= group1.offsetX + advance) {
							return group1.startIndex + i1;
						}
					}
					return group1.endIndex;
				}
			}
		}
		return -1;
	}
	,getFirstCharInParagraph: function(charIndex) {
		if(charIndex < 0 || charIndex > _$UnicodeString_UnicodeString_$Impl_$.get_length(this.__text) - 1) {
			return 0;
		}
		var index = this.__textEngine.getLineBreakIndex();
		var startIndex = 0;
		while(index > -1) {
			if(index <= charIndex) {
				startIndex = index + 1;
			} else if(index > charIndex) {
				break;
			}
			index = this.__textEngine.getLineBreakIndex(index + 1);
		}
		return startIndex;
	}
	,getLineIndexAtPoint: function(x,y) {
		this.__updateLayout();
		if(x <= 2 || x > this.get_width() + 4 || y <= 0 || y > this.get_height() + 4) {
			return -1;
		}
		var _g = 0;
		var _g1 = this.get_scrollV() - 1;
		while(_g < _g1) {
			var i = _g++;
			y += this.__textEngine.lineHeights.data.get(i);
		}
		var group = this.__textEngine.layoutGroups.data.iterator();
		while(group.hasNext()) {
			var group1 = group.next();
			if(y >= group1.offsetY && y <= group1.offsetY + group1.height) {
				return group1.lineIndex;
			}
		}
		return -1;
	}
	,getLineIndexOfChar: function(charIndex) {
		if(charIndex < 0 || charIndex > _$UnicodeString_UnicodeString_$Impl_$.get_length(this.__text)) {
			return -1;
		}
		this.__updateLayout();
		var group = this.__textEngine.layoutGroups.data.iterator();
		while(group.hasNext()) {
			var group1 = group.next();
			if(group1.startIndex <= charIndex && group1.endIndex >= charIndex) {
				return group1.lineIndex;
			}
		}
		return -1;
	}
	,getLineLength: function(lineIndex) {
		this.__updateLayout();
		if(lineIndex < 0 || lineIndex > this.__textEngine.numLines - 1) {
			return 0;
		}
		var startIndex = -1;
		var endIndex = -1;
		var group = this.__textEngine.layoutGroups.data.iterator();
		while(group.hasNext()) {
			var group1 = group.next();
			if(group1.lineIndex == lineIndex) {
				if(startIndex == -1) {
					startIndex = group1.startIndex;
				}
			} else if(group1.lineIndex == lineIndex + 1) {
				endIndex = group1.startIndex;
				break;
			}
		}
		if(endIndex == -1) {
			endIndex = _$UnicodeString_UnicodeString_$Impl_$.get_length(this.__text);
		}
		return endIndex - startIndex;
	}
	,getLineMetrics: function(lineIndex) {
		this.__updateLayout();
		var ascender = this.__textEngine.lineAscents.data.get(lineIndex);
		var descender = this.__textEngine.lineDescents.data.get(lineIndex);
		var leading = this.__textEngine.lineLeadings.data.get(lineIndex);
		var lineHeight = this.__textEngine.lineHeights.data.get(lineIndex);
		var lineWidth = this.__textEngine.lineWidths.data.get(lineIndex);
		var margin;
		switch(this.__textFormat.align) {
		case 0:
			margin = (this.__textEngine.width - lineWidth) / 2;
			break;
		case 1:case 4:
			margin = this.__textEngine.width - lineWidth - 2;
			break;
		case 2:case 3:case 5:
			margin = 2;
			break;
		}
		return new openfl_text_TextLineMetrics(margin,lineWidth,lineHeight,ascender,descender,leading);
	}
	,getLineOffset: function(lineIndex) {
		this.__updateLayout();
		if(lineIndex < 0 || lineIndex > this.__textEngine.numLines - 1) {
			return -1;
		}
		var group = this.__textEngine.layoutGroups.data.iterator();
		while(group.hasNext()) {
			var group1 = group.next();
			if(group1.lineIndex == lineIndex) {
				return group1.startIndex;
			}
		}
		return 0;
	}
	,getLineText: function(lineIndex) {
		this.__updateLayout();
		if(lineIndex < 0 || lineIndex > this.__textEngine.numLines - 1) {
			return null;
		}
		var startIndex = -1;
		var endIndex = -1;
		var group = this.__textEngine.layoutGroups.data.iterator();
		while(group.hasNext()) {
			var group1 = group.next();
			if(group1.lineIndex == lineIndex) {
				if(startIndex == -1) {
					startIndex = group1.startIndex;
				}
			} else if(group1.lineIndex == lineIndex + 1) {
				endIndex = group1.startIndex;
				break;
			}
		}
		if(endIndex == -1) {
			endIndex = _$UnicodeString_UnicodeString_$Impl_$.get_length(this.__text);
		}
		return _$UnicodeString_UnicodeString_$Impl_$.substring(this.__textEngine.text,startIndex,endIndex);
	}
	,getParagraphLength: function(charIndex) {
		if(charIndex < 0 || charIndex > _$UnicodeString_UnicodeString_$Impl_$.get_length(this.__text) - 1) {
			return 0;
		}
		var startIndex = this.getFirstCharInParagraph(charIndex);
		var endIndex = this.__textEngine.getLineBreakIndex(charIndex) + 1;
		if(endIndex == 0) {
			endIndex = _$UnicodeString_UnicodeString_$Impl_$.get_length(this.__text);
		}
		return endIndex - startIndex;
	}
	,getTextFormat: function(beginIndex,endIndex) {
		if(endIndex == null) {
			endIndex = 0;
		}
		if(beginIndex == null) {
			beginIndex = 0;
		}
		var format = null;
		var group = this.__textEngine.textFormatRanges.data.iterator();
		while(group.hasNext()) {
			var group1 = group.next();
			if(group1.start <= beginIndex && group1.end >= beginIndex || group1.start <= endIndex && group1.end >= endIndex) {
				if(format == null) {
					format = group1.format.clone();
				} else {
					if(group1.format.font != format.font) {
						format.font = null;
					}
					if(group1.format.size != format.size) {
						format.size = null;
					}
					if(group1.format.color != format.color) {
						format.color = null;
					}
					if(group1.format.bold != format.bold) {
						format.bold = null;
					}
					if(group1.format.italic != format.italic) {
						format.italic = null;
					}
					if(group1.format.underline != format.underline) {
						format.underline = null;
					}
					if(group1.format.url != format.url) {
						format.url = null;
					}
					if(group1.format.target != format.target) {
						format.target = null;
					}
					if(group1.format.align != format.align) {
						format.align = null;
					}
					if(group1.format.leftMargin != format.leftMargin) {
						format.leftMargin = null;
					}
					if(group1.format.rightMargin != format.rightMargin) {
						format.rightMargin = null;
					}
					if(group1.format.indent != format.indent) {
						format.indent = null;
					}
					if(group1.format.leading != format.leading) {
						format.leading = null;
					}
					if(group1.format.blockIndent != format.blockIndent) {
						format.blockIndent = null;
					}
					if(group1.format.bullet != format.bullet) {
						format.bullet = null;
					}
					if(group1.format.kerning != format.kerning) {
						format.kerning = null;
					}
					if(group1.format.letterSpacing != format.letterSpacing) {
						format.letterSpacing = null;
					}
					if(group1.format.tabStops != format.tabStops) {
						format.tabStops = null;
					}
				}
			}
		}
		return format;
	}
	,replaceSelectedText: function(value) {
		if(value == "" && this.__selectionIndex == this.__caretIndex) {
			return;
		}
		var startIndex = this.__caretIndex < this.__selectionIndex ? this.__caretIndex : this.__selectionIndex;
		var endIndex = this.__caretIndex > this.__selectionIndex ? this.__caretIndex : this.__selectionIndex;
		if(startIndex == endIndex && this.__textEngine.maxChars > 0 && _$UnicodeString_UnicodeString_$Impl_$.get_length(this.__text) == this.__textEngine.maxChars) {
			return;
		}
		if(startIndex > _$UnicodeString_UnicodeString_$Impl_$.get_length(this.__text)) {
			startIndex = _$UnicodeString_UnicodeString_$Impl_$.get_length(this.__text);
		}
		if(endIndex > _$UnicodeString_UnicodeString_$Impl_$.get_length(this.__text)) {
			endIndex = _$UnicodeString_UnicodeString_$Impl_$.get_length(this.__text);
		}
		if(endIndex < startIndex) {
			var cache = endIndex;
			endIndex = startIndex;
			startIndex = cache;
		}
		if(startIndex < 0) {
			startIndex = 0;
		}
		this.__replaceText(startIndex,endIndex,value);
		var i = startIndex + _$UnicodeString_UnicodeString_$Impl_$.get_length(value);
		if(i > _$UnicodeString_UnicodeString_$Impl_$.get_length(this.__text)) {
			i = _$UnicodeString_UnicodeString_$Impl_$.get_length(this.__text);
		}
		this.setSelection(i,i);
		this.__ensureCaretVisibleNeeded = true;
	}
	,replaceText: function(beginIndex,endIndex,newText) {
		this.__replaceText(beginIndex,endIndex,newText);
		this.__ensureCaretVisibleNeeded = true;
	}
	,__replaceText: function(beginIndex,endIndex,newText) {
		if(endIndex < beginIndex || beginIndex < 0 || endIndex > _$UnicodeString_UnicodeString_$Impl_$.get_length(this.__text) || newText == null) {
			return;
		}
		this.__updateText(_$UnicodeString_UnicodeString_$Impl_$.substring(this.__text,0,beginIndex) + newText + _$UnicodeString_UnicodeString_$Impl_$.substring(this.__text,endIndex));
		if(endIndex > _$UnicodeString_UnicodeString_$Impl_$.get_length(this.__text)) {
			endIndex = _$UnicodeString_UnicodeString_$Impl_$.get_length(this.__text);
		}
		var offset = newText.length - (endIndex - beginIndex);
		var i = 0;
		var range;
		while(i < this.__textEngine.textFormatRanges.data.get_length()) {
			range = this.__textEngine.textFormatRanges.data.get(i);
			if(range.start <= beginIndex && range.end >= endIndex) {
				range.end += offset;
				++i;
			} else if(range.start >= beginIndex && range.end <= endIndex) {
				if(i > 0) {
					new openfl__$Vector_AbstractVector(this.__textEngine.textFormatRanges.data.splice(i,1));
				} else {
					range.start = 0;
					range.end = beginIndex + newText.length;
					++i;
				}
				offset -= range.end - range.start;
			} else if(range.start > beginIndex && range.start <= endIndex) {
				range.start += offset;
				++i;
			} else {
				++i;
			}
		}
		var caretIndex = beginIndex + _$UnicodeString_UnicodeString_$Impl_$.get_length(newText);
		if(caretIndex > _$UnicodeString_UnicodeString_$Impl_$.get_length(this.__text)) {
			caretIndex = _$UnicodeString_UnicodeString_$Impl_$.get_length(this.__text);
		}
		this.__dirty = true;
		this.__layoutDirty = true;
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
		if(!this.__updateDirty) {
			this.__updateDirty = true;
			this.__setParentUpdateTraverse();
		}
	}
	,setSelection: function(beginIndex,endIndex) {
		this.__selectionIndex = beginIndex;
		this.__caretIndex = endIndex;
		this.__stopCursorTimer();
		this.__startCursorTimer();
	}
	,setTextFormat: function(format,beginIndex,endIndex) {
		if(endIndex == null) {
			endIndex = 0;
		}
		if(beginIndex == null) {
			beginIndex = 0;
		}
		var max = _$UnicodeString_UnicodeString_$Impl_$.get_length(this.get_text());
		var range;
		if(beginIndex < 0) {
			beginIndex = 0;
		}
		if(endIndex < 0) {
			endIndex = 0;
		}
		if(endIndex == 0) {
			if(beginIndex == 0) {
				endIndex = max;
			} else {
				endIndex = beginIndex + 1;
			}
		}
		if(endIndex < beginIndex) {
			return;
		}
		if(beginIndex == 0 && endIndex >= max) {
			this.__textFormat.__merge(format);
			var _g = 0;
			var _g1 = this.__textEngine.textFormatRanges.data.get_length();
			while(_g < _g1) {
				var i = _g++;
				range = this.__textEngine.textFormatRanges.data.get(i);
				range.format.__merge(this.__textFormat);
			}
		} else {
			var index = this.__textEngine.textFormatRanges.data.get_length();
			var searchIndex;
			while(index > 0) {
				--index;
				range = this.__textEngine.textFormatRanges.data.get(index);
				if(range.start == beginIndex && range.end == endIndex) {
					range.format = openfl_text_TextField.__defaultTextFormat.clone();
					range.format.__merge(format);
					return;
				}
				if(range.start >= beginIndex && range.end <= endIndex) {
					searchIndex = this.__textEngine.textFormatRanges.data.indexOf(range,0);
					if(searchIndex > -1) {
						new openfl__$Vector_AbstractVector(this.__textEngine.textFormatRanges.data.splice(searchIndex,1));
					}
				}
			}
			var prevRange = null;
			var nextRange = null;
			if(beginIndex > 0) {
				var _g2 = 0;
				var _g11 = this.__textEngine.textFormatRanges.data.get_length();
				while(_g2 < _g11) {
					var i1 = _g2++;
					range = this.__textEngine.textFormatRanges.data.get(i1);
					if(range.end >= beginIndex) {
						prevRange = range;
						break;
					}
				}
			}
			if(endIndex < max) {
				var ni = this.__textEngine.textFormatRanges.data.get_length();
				while(--ni >= 0) {
					range = this.__textEngine.textFormatRanges.data.get(ni);
					if(range.start <= endIndex) {
						nextRange = range;
						break;
					}
				}
			}
			if(nextRange == prevRange) {
				nextRange = new openfl__$internal_text_TextFormatRange(nextRange.format.clone(),nextRange.start,nextRange.end);
				this.__textEngine.textFormatRanges.data.push(nextRange);
			}
			if(prevRange != null) {
				prevRange.end = beginIndex;
			}
			if(nextRange != null) {
				nextRange.start = endIndex;
			}
			var textFormat = openfl_text_TextField.__defaultTextFormat.clone();
			textFormat.__merge(format);
			var this1 = this.__textEngine.textFormatRanges;
			var x = new openfl__$internal_text_TextFormatRange(textFormat,beginIndex,endIndex);
			this1.data.push(x);
			this.__textEngine.textFormatRanges.data.sort(function(a,b) {
				if(a.start < b.start || a.end < b.end) {
					return -1;
				} else if(a.start > b.start || a.end > b.end) {
					return 1;
				}
				return 0;
			});
		}
		this.__dirty = true;
		this.__layoutDirty = true;
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
		if(!this.__updateDirty) {
			this.__updateDirty = true;
			this.__setParentUpdateTraverse();
		}
	}
	,__allowMouseFocus: function() {
		if(!(this.__textEngine.type == 1 || this.get_tabEnabled())) {
			return this.get_selectable();
		} else {
			return true;
		}
	}
	,__caretBeginningOfLine: function() {
		this.__caretIndex = this.getLineOffset(this.getLineIndexOfChar(this.__caretIndex));
	}
	,__caretEndOfLine: function() {
		var lineIndex = this.getLineIndexOfChar(this.__caretIndex);
		if(lineIndex < this.__textEngine.numLines - 1) {
			this.__caretIndex = this.getLineOffset(lineIndex + 1) - 1;
		} else {
			this.__caretIndex = _$UnicodeString_UnicodeString_$Impl_$.get_length(this.__text);
		}
	}
	,__caretNextCharacter: function() {
		if(this.__caretIndex < _$UnicodeString_UnicodeString_$Impl_$.get_length(this.__text)) {
			this.__caretIndex++;
		}
	}
	,__caretNextLine: function() {
		var lineIndex = this.getLineIndexOfChar(this.__caretIndex);
		if(lineIndex < this.__textEngine.numLines - 1) {
			this.__caretIndex = this.__getCharIndexOnDifferentLine(this.__caretIndex,lineIndex + 1);
		} else {
			this.__caretIndex = _$UnicodeString_UnicodeString_$Impl_$.get_length(this.__text);
		}
	}
	,__caretPreviousCharacter: function() {
		if(this.__caretIndex > 0) {
			this.__caretIndex--;
		}
	}
	,__caretPreviousLine: function() {
		var lineIndex = this.getLineIndexOfChar(this.__caretIndex);
		if(lineIndex > 0) {
			this.__caretIndex = this.__getCharIndexOnDifferentLine(this.__caretIndex,lineIndex - 1);
		} else {
			this.__caretIndex = 0;
		}
	}
	,__disableInput: function() {
		if(this.__inputEnabled && this.stage != null) {
			this.stage.window.set_enableTextEvents(false);
			this.stage.window.onTextInput.remove($bind(this,this.window_onTextInput));
			this.stage.window.onTextPaste.remove($bind(this,this.window_onTextPaste));
			this.stage.window.onTextCopy.remove($bind(this,this.window_onTextCopy));
			this.stage.window.onTextCut.remove($bind(this,this.window_onTextCut));
			this.stage.window.onKeyDown.remove($bind(this,this.window_onKeyDown));
			this.__inputEnabled = false;
			this.__stopCursorTimer();
		}
	}
	,__dispatch: function(event) {
		if(event.eventPhase == 2 && event.type == "mouseUp") {
			var event1 = event;
			var group = this.__getGroup(this.get_mouseX(),this.get_mouseY(),true);
			if(group != null) {
				var url = group.format.url;
				if(url != null && url != "") {
					if(StringTools.startsWith(url,"event:")) {
						this.dispatchEvent(new openfl_events_TextEvent("link",false,false,HxOverrides.substr(url,6,null)));
					} else {
						openfl_Lib.getURL(new openfl_net_URLRequest(url));
					}
				}
			}
		}
		return openfl_display_InteractiveObject.prototype.__dispatch.call(this,event);
	}
	,__enableInput: function() {
		if(this.stage != null) {
			this.stage.window.set_enableTextEvents(true);
			if(!this.__inputEnabled) {
				this.stage.window.set_enableTextEvents(true);
				if(!this.stage.window.onTextInput.has($bind(this,this.window_onTextInput))) {
					this.stage.window.onTextInput.add($bind(this,this.window_onTextInput));
					this.stage.window.onTextPaste.add($bind(this,this.window_onTextPaste));
					this.stage.window.onTextCopy.add($bind(this,this.window_onTextCopy));
					this.stage.window.onTextCut.add($bind(this,this.window_onTextCut));
					this.stage.window.onKeyDown.add($bind(this,this.window_onKeyDown));
				}
				this.__inputEnabled = true;
				this.__startCursorTimer();
			}
		}
	}
	,__forceRenderDirty: function() {
		openfl_display_InteractiveObject.prototype.__forceRenderDirty.call(this);
		this.__dirty = true;
	}
	,__getAdvance: function(position) {
		return position;
	}
	,__getAnchorFromX: function() {
		var tmp = this.__transform.tx;
		var tmp1;
		switch(this.__textEngine.autoSize) {
		case 0:
			tmp1 = 0.5;
			break;
		case 3:
			tmp1 = 1;
			break;
		default:
			tmp1 = 0;
		}
		return tmp + this.__textEngine.width * tmp1;
	}
	,__getAutoSizeFactor: function() {
		switch(this.__textEngine.autoSize) {
		case 0:
			return 0.5;
		case 3:
			return 1;
		default:
			return 0;
		}
	}
	,__getBounds: function(rect,matrix) {
		this.__updateLayout();
		var bounds = openfl_geom_Rectangle.__pool.get();
		bounds.copyFrom(this.__textEngine.bounds);
		bounds.x += this.__offsetX;
		bounds.y += this.__offsetY;
		bounds.__transform(bounds,matrix);
		rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
		openfl_geom_Rectangle.__pool.release(bounds);
	}
	,__getCharIndexOnDifferentLine: function(charIndex,lineIndex) {
		if(charIndex < 0 || charIndex > _$UnicodeString_UnicodeString_$Impl_$.get_length(this.__text)) {
			return -1;
		}
		if(lineIndex < 0 || lineIndex > this.__textEngine.numLines - 1) {
			return -1;
		}
		var x = null;
		var y = null;
		var lineGroup = null;
		var group = this.__textEngine.layoutGroups.data.iterator();
		while(group.hasNext()) {
			var group1 = group.next();
			if(charIndex >= group1.startIndex && charIndex <= group1.endIndex) {
				x = group1.offsetX;
				var _g1 = 0;
				var _g2 = charIndex - group1.startIndex;
				while(_g1 < _g2) {
					var i = _g1++;
					x += group1.positions[i];
				}
				if(y != null) {
					return this.__getPosition(x,y,lineGroup);
				}
			}
			if(group1.lineIndex == lineIndex) {
				y = group1.offsetY + group1.height / 2;
				lineGroup = group1;
				if(x != null) {
					return this.__getPosition(x,y,lineGroup);
				}
			}
		}
		return -1;
	}
	,__getCursor: function() {
		var group = this.__getGroup(this.get_mouseX(),this.get_mouseY(),true);
		if(group != null && group.format.url != "") {
			return "button";
		} else if(this.__textEngine.selectable) {
			return "ibeam";
		}
		return null;
	}
	,__getGroup: function(x,y,precise) {
		if(precise == null) {
			precise = false;
		}
		this.__updateLayout();
		x += this.get_scrollH();
		var _g = 0;
		var _g1 = this.get_scrollV() - 1;
		while(_g < _g1) {
			var i = _g++;
			y += this.__textEngine.lineHeights.data.get(i);
		}
		if(!precise && y > this.__textEngine.textHeight) {
			y = this.__textEngine.textHeight;
		}
		var firstGroup = true;
		var group;
		var nextGroup;
		var _g2 = 0;
		var _g3 = this.__textEngine.layoutGroups.data.get_length();
		while(_g2 < _g3) {
			var i1 = _g2++;
			group = this.__textEngine.layoutGroups.data.get(i1);
			if(i1 < this.__textEngine.layoutGroups.data.get_length() - 1) {
				nextGroup = this.__textEngine.layoutGroups.data.get(i1 + 1);
			} else {
				nextGroup = null;
			}
			if(firstGroup) {
				if(y < group.offsetY) {
					y = group.offsetY;
				}
				if(x < group.offsetX) {
					x = group.offsetX;
				}
				firstGroup = false;
			}
			if(y >= group.offsetY && y <= group.offsetY + group.height || !precise && nextGroup == null) {
				if(x >= group.offsetX && x <= group.offsetX + group.width || !precise && (nextGroup == null || nextGroup.lineIndex != group.lineIndex)) {
					return group;
				}
			}
		}
		return null;
	}
	,__getPosition: function(x,y,group) {
		group = group == null ? this.__getGroup(x,y) : group;
		if(group == null) {
			return _$UnicodeString_UnicodeString_$Impl_$.get_length(this.__text);
		}
		var advance = 0.0;
		var _g = 0;
		var _g1 = group.positions.length;
		while(_g < _g1) {
			var i = _g++;
			advance += group.positions[i];
			if(x <= group.offsetX + advance) {
				if(x <= group.offsetX + (advance - group.positions[i]) + group.positions[i] / 2) {
					return group.startIndex + i;
				} else if(group.startIndex + i < group.endIndex) {
					return group.startIndex + i + 1;
				} else {
					return group.endIndex;
				}
			}
		}
		return group.endIndex;
	}
	,__getXFromAnchor: function() {
		var tmp = this.__anchor;
		var tmp1;
		switch(this.__textEngine.autoSize) {
		case 0:
			tmp1 = 0.5;
			break;
		case 3:
			tmp1 = 1;
			break;
		default:
			tmp1 = 0;
		}
		return tmp - this.__textEngine.width * tmp1;
	}
	,__hasAnchor: function() {
		if(!this.get_wordWrap()) {
			if(this.__textEngine.autoSize != 3) {
				return this.__textEngine.autoSize == 0;
			} else {
				return true;
			}
		} else {
			return false;
		}
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject,hitTestWhenMouseDisabled) {
		if(hitTestWhenMouseDisabled == null) {
			hitTestWhenMouseDisabled = false;
		}
		if(!hitObject.get_visible() || this.__isMask || !hitTestWhenMouseDisabled && interactiveOnly && !this.mouseEnabled) {
			return false;
		}
		if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
			return false;
		}
		this.__getRenderTransform();
		this.__updateLayout();
		var _this = this.__renderTransform;
		var norm = _this.a * _this.d - _this.b * _this.c;
		var px = norm == 0 ? -_this.tx : 1.0 / norm * (_this.c * (_this.ty - y) + _this.d * (x - _this.tx));
		var _this1 = this.__renderTransform;
		var norm1 = _this1.a * _this1.d - _this1.b * _this1.c;
		var py = norm1 == 0 ? -_this1.ty : 1.0 / norm1 * (_this1.a * (y - _this1.ty) + _this1.b * (_this1.tx - x));
		if(this.__textEngine.bounds.contains(px,py)) {
			if(stack != null && !hitTestWhenMouseDisabled) {
				stack.push(hitObject);
			}
			return true;
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		this.__getRenderTransform();
		this.__updateLayout();
		var _this = this.__renderTransform;
		var norm = _this.a * _this.d - _this.b * _this.c;
		var px = norm == 0 ? -_this.tx : 1.0 / norm * (_this.c * (_this.ty - y) + _this.d * (x - _this.tx));
		var _this1 = this.__renderTransform;
		var norm1 = _this1.a * _this1.d - _this1.b * _this1.c;
		var py = norm1 == 0 ? -_this1.ty : 1.0 / norm1 * (_this1.a * (y - _this1.ty) + _this1.b * (_this1.tx - x));
		if(this.__textEngine.bounds.contains(px,py)) {
			return true;
		}
		return false;
	}
	,__enterFrame: function(deltaTime) {
		if(this.__ensureCaretVisibleNeeded) {
			this.__doEnsureCaretVisible();
		}
	}
	,__renderCanvas: function(renderSession) {
		this.__forceCachedBitmapUpdate = this.__forceCachedBitmapUpdate || this.__dirty;
		openfl__$internal_renderer_canvas_CanvasTextField.render(this,this.__worldTransform,renderSession.pixelRatio,renderSession.allowSmoothing);
		if(this.__textEngine.antiAliasType == 0 && this.__textEngine.gridFitType == 1) {
			var context = renderSession.context;
			context.mozImageSmoothingEnabled = false;
			context.msImageSmoothingEnabled = false;
			context.imageSmoothingEnabled = false;
			openfl_display_InteractiveObject.prototype.__renderCanvas.call(this,renderSession);
			var context1 = renderSession.context;
			context1.mozImageSmoothingEnabled = true;
			context1.msImageSmoothingEnabled = true;
			context1.imageSmoothingEnabled = true;
		} else {
			openfl_display_InteractiveObject.prototype.__renderCanvas.call(this,renderSession);
		}
	}
	,__renderGL: function(renderSession) {
		this.__forceCachedBitmapUpdate = this.__forceCachedBitmapUpdate || this.__dirty;
		openfl__$internal_renderer_canvas_CanvasTextField.render(this,this.__worldTransform,renderSession.pixelRatio,renderSession.allowSmoothing);
		openfl_display_InteractiveObject.prototype.__renderGL.call(this,renderSession);
	}
	,__renderGLMask: function(renderSession) {
		openfl__$internal_renderer_canvas_CanvasTextField.render(this,this.__worldTransform,renderSession.pixelRatio,renderSession.allowSmoothing);
		openfl_display_InteractiveObject.prototype.__renderGLMask.call(this,renderSession);
	}
	,__startCursorTimer: function() {
		this.__cursorTimer = haxe_Timer.delay($bind(this,this.__startCursorTimer),600);
		this.__showCursor = !this.__showCursor;
		this.__dirty = true;
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
		if(!this.__updateDirty) {
			this.__updateDirty = true;
			this.__setParentUpdateTraverse();
		}
	}
	,__startTextInput: function() {
		if(this.__caretIndex < 0) {
			this.__caretIndex = _$UnicodeString_UnicodeString_$Impl_$.get_length(this.__text);
			this.__selectionIndex = this.__caretIndex;
		}
		this.__enableInput();
	}
	,__stopCursorTimer: function() {
		if(this.__cursorTimer != null) {
			this.__cursorTimer.stop();
			this.__cursorTimer = null;
		}
		if(this.__showCursor) {
			this.__showCursor = false;
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
			if(!this.__updateDirty) {
				this.__updateDirty = true;
				this.__setParentUpdateTraverse();
			}
		}
	}
	,__stopTextInput: function() {
		this.__disableInput();
	}
	,__updateCacheBitmap: function(force,pixelRatio,allowSmoothing) {
		var success = openfl_display_InteractiveObject.prototype.__updateCacheBitmap.call(this,force,pixelRatio,allowSmoothing);
		this.__forceCachedBitmapUpdate = false;
		if(success) {
			if(this.__cacheBitmap != null) {
				this.__cacheBitmap.__renderTransform.tx -= this.__offsetX;
				this.__cacheBitmap.__renderTransform.ty -= this.__offsetY;
			}
			return true;
		}
		return false;
	}
	,__cacheBitmapNeedsRender: function() {
		if(!this.__forceCachedBitmapUpdate) {
			return openfl_display_InteractiveObject.prototype.__cacheBitmapNeedsRender.call(this);
		} else {
			return true;
		}
	}
	,__updateLayout: function() {
		if(this.__layoutDirty) {
			this.__textEngine.update();
			if(this.__textEngine.autoSize != 2) {
				if(!this.get_wordWrap() && (this.__textEngine.autoSize == 3 || this.__textEngine.autoSize == 0)) {
					this.__updateXFromAnchor();
				}
				this.__textEngine.getBounds();
			}
			this.__layoutDirty = false;
		}
	}
	,__ensureCaretVisible: function() {
		this.__ensureCaretVisibleNeeded = true;
	}
	,__doEnsureCaretVisible: function() {
		this.__ensureCaretVisibleNeeded = false;
		this.__updateLayout();
		var lineIndex = -1;
		var charX = -1.0;
		var charIndex = this.__caretIndex;
		var group = this.__textEngine.layoutGroups.data.iterator();
		while(group.hasNext()) {
			var group1 = group.next();
			if(charIndex >= group1.startIndex && charIndex <= group1.endIndex) {
				lineIndex = group1.lineIndex;
				charX = group1.offsetX;
				var _g1 = 0;
				var _g2 = charIndex - group1.startIndex;
				while(_g1 < _g2) {
					var i = _g1++;
					charX += group1.positions[i];
				}
				break;
			}
		}
		if(lineIndex == -1) {
			this.__setScrollHV(0,1);
			return;
		}
		var newScrollH = this.get_scrollH();
		var newScrollV = this.get_scrollV();
		var scrollX = this.get_scrollH() + 2.0;
		var scrolledX = charX - scrollX;
		if(scrolledX < 0) {
			newScrollH = charX - 24 | 0;
		} else if(scrolledX > this.__textEngine.width - 4.) {
			newScrollH = charX - this.__textEngine.width + 24 | 0;
		}
		var lineNumber = lineIndex + 1;
		if(lineNumber < this.get_scrollV()) {
			newScrollV = lineNumber;
		} else if(lineNumber > this.get_bottomScrollV()) {
			newScrollV = lineNumber - this.__textEngine.numVisibleLines + 1;
		}
		this.__setScrollHV(newScrollH,newScrollV);
	}
	,__updateText: function(value) {
		value = StringTools.replace(value,"\n","\r");
		this.__textEngine.set_text(value);
		this.__text = this.__textEngine.text;
		if(_$UnicodeString_UnicodeString_$Impl_$.get_length(this.__text) < this.__caretIndex) {
			this.__selectionIndex = this.__caretIndex = _$UnicodeString_UnicodeString_$Impl_$.get_length(this.__text);
		}
		if(!this.__displayAsPassword) {
			this.__textEngine.set_text(this.__text);
		} else {
			var length = _$UnicodeString_UnicodeString_$Impl_$.get_length(this.get_text());
			var mask = "";
			var _g = 0;
			var _g1 = length;
			while(_g < _g1) {
				var i = _g++;
				mask += "*";
			}
			this.__textEngine.set_text(mask);
		}
	}
	,__updateTransforms: function() {
		openfl_display_InteractiveObject.prototype.__updateTransforms.call(this);
		var _this = this.__renderTransform;
		var px = this.__offsetX;
		var py = this.__offsetY;
		_this.tx = px * _this.a + py * _this.c + _this.tx;
		_this.ty = px * _this.b + py * _this.d + _this.ty;
	}
	,__overrideTransforms: function(overrideTransform) {
		openfl_display_InteractiveObject.prototype.__overrideTransforms.call(this,overrideTransform);
		var _this = this.__renderTransform;
		var px = this.__offsetX;
		var py = this.__offsetY;
		_this.tx = px * _this.a + py * _this.c + _this.tx;
		_this.ty = px * _this.b + py * _this.d + _this.ty;
	}
	,__updateXFromAnchor: function() {
		var value = this.__anchor;
		var value1;
		switch(this.__textEngine.autoSize) {
		case 0:
			value1 = 0.5;
			break;
		case 3:
			value1 = 1;
			break;
		default:
			value1 = 0;
		}
		var value2 = value - this.__textEngine.width * value1;
		if(value2 != this.__transform.tx) {
			this.__transform.tx = value2;
			this.__setTransformDirty();
		}
	}
	,get_antiAliasType: function() {
		return this.__textEngine.antiAliasType;
	}
	,set_antiAliasType: function(value) {
		var tmp = value != this.__textEngine.antiAliasType;
		return this.__textEngine.antiAliasType = value;
	}
	,get_autoSize: function() {
		return this.__textEngine.autoSize;
	}
	,set_autoSize: function(value) {
		if(value != this.__textEngine.autoSize) {
			this.__textEngine.autoSize = value;
			if(!this.get_wordWrap() && (this.__textEngine.autoSize == 3 || this.__textEngine.autoSize == 0)) {
				var tmp = this.__transform.tx;
				var tmp1;
				switch(this.__textEngine.autoSize) {
				case 0:
					tmp1 = 0.5;
					break;
				case 3:
					tmp1 = 1;
					break;
				default:
					tmp1 = 0;
				}
				this.__anchor = tmp + this.__textEngine.width * tmp1;
			}
			this.__layoutDirty = true;
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
			if(!this.__updateDirty) {
				this.__updateDirty = true;
				this.__setParentUpdateTraverse();
			}
		}
		return value;
	}
	,get_background: function() {
		return this.__textEngine.background;
	}
	,set_background: function(value) {
		if(value != this.__textEngine.background) {
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
			if(!this.__updateDirty) {
				this.__updateDirty = true;
				this.__setParentUpdateTraverse();
			}
		}
		return this.__textEngine.background = value;
	}
	,get_backgroundColor: function() {
		return this.__textEngine.backgroundColor;
	}
	,set_backgroundColor: function(value) {
		if(value != this.__textEngine.backgroundColor) {
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
			if(!this.__updateDirty) {
				this.__updateDirty = true;
				this.__setParentUpdateTraverse();
			}
		}
		return this.__textEngine.backgroundColor = value;
	}
	,get_border: function() {
		return this.__textEngine.border;
	}
	,set_border: function(value) {
		if(value != this.__textEngine.border) {
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
			if(!this.__updateDirty) {
				this.__updateDirty = true;
				this.__setParentUpdateTraverse();
			}
		}
		return this.__textEngine.border = value;
	}
	,get_borderColor: function() {
		return this.__textEngine.borderColor;
	}
	,set_borderColor: function(value) {
		if(value != this.__textEngine.borderColor) {
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
			if(!this.__updateDirty) {
				this.__updateDirty = true;
				this.__setParentUpdateTraverse();
			}
		}
		return this.__textEngine.borderColor = value;
	}
	,get_bottomScrollV: function() {
		this.__updateLayout();
		return this.__textEngine.bottomScrollV;
	}
	,get_caretIndex: function() {
		if(this.__caretIndex < 0) {
			return 0;
		} else {
			return this.__caretIndex;
		}
	}
	,get_defaultTextFormat: function() {
		return this.__textFormat.clone();
	}
	,set_defaultTextFormat: function(value) {
		this.__textFormat.__merge(value);
		this.__layoutDirty = true;
		this.__dirty = true;
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
		if(!this.__updateDirty) {
			this.__updateDirty = true;
			this.__setParentUpdateTraverse();
		}
		return value;
	}
	,get_displayAsPassword: function() {
		return this.__displayAsPassword;
	}
	,set_displayAsPassword: function(value) {
		if(value != this.__displayAsPassword) {
			this.__dirty = true;
			this.__layoutDirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
			if(!this.__updateDirty) {
				this.__updateDirty = true;
				this.__setParentUpdateTraverse();
			}
			this.__displayAsPassword = value;
			this.__updateText(this.__text);
		}
		return value;
	}
	,get_embedFonts: function() {
		return this.__textEngine.embedFonts;
	}
	,set_embedFonts: function(value) {
		return this.__textEngine.embedFonts = value;
	}
	,get_gridFitType: function() {
		return this.__textEngine.gridFitType;
	}
	,set_gridFitType: function(value) {
		return this.__textEngine.gridFitType = value;
	}
	,get_height: function() {
		this.__updateLayout();
		return this.__textEngine.height * Math.abs(this.get_scaleY());
	}
	,set_height: function(value) {
		if(value != this.__textEngine.height) {
			this.__setTransformDirty();
			this.__dirty = true;
			this.__layoutDirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
			if(!this.__updateDirty) {
				this.__updateDirty = true;
				this.__setParentUpdateTraverse();
			}
			this.__textEngine.height = value;
		}
		return this.__textEngine.height * Math.abs(this.get_scaleY());
	}
	,get_htmlText: function() {
		if(this.__isHTML) {
			return this.__rawHtmlText;
		} else {
			return this.__text;
		}
	}
	,set_htmlText: function(value) {
		if(!this.__isHTML || this.__text != value) {
			this.__dirty = true;
			this.__layoutDirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
			if(!this.__updateDirty) {
				this.__updateDirty = true;
				this.__setParentUpdateTraverse();
			}
		}
		this.__isHTML = true;
		this.__rawHtmlText = value;
		value = openfl__$internal_text_HTMLParser.parse(value,this.__textFormat,this.__textEngine.textFormatRanges);
		this.__updateText(value);
		return value;
	}
	,get_length: function() {
		if(this.__text != null) {
			return _$UnicodeString_UnicodeString_$Impl_$.get_length(this.__text);
		}
		return 0;
	}
	,get_maxChars: function() {
		return this.__textEngine.maxChars;
	}
	,set_maxChars: function(value) {
		if(value != this.__textEngine.maxChars) {
			this.__textEngine.maxChars = value;
			this.__dirty = true;
			this.__layoutDirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
			if(!this.__updateDirty) {
				this.__updateDirty = true;
				this.__setParentUpdateTraverse();
			}
		}
		return value;
	}
	,get_maxScrollH: function() {
		this.__updateLayout();
		return this.__textEngine.maxScrollH;
	}
	,get_maxScrollV: function() {
		this.__updateLayout();
		return this.__textEngine.maxScrollV;
	}
	,get_mouseWheelEnabled: function() {
		return this.__mouseWheelEnabled;
	}
	,set_mouseWheelEnabled: function(value) {
		if(value != this.__mouseWheelEnabled) {
			this.__mouseWheelEnabled = value;
			if(value) {
				this.addEventListener("mouseWheel",$bind(this,this.this_onMouseWheel));
			} else {
				this.removeEventListener("mouseWheel",$bind(this,this.this_onMouseWheel));
			}
		}
		return value;
	}
	,get_multiline: function() {
		return this.__textEngine.multiline;
	}
	,set_multiline: function(value) {
		if(value != this.__textEngine.multiline) {
			this.__dirty = true;
			this.__layoutDirty = true;
			this.__updateText(this.__text);
			this.__ensureCaretVisibleNeeded = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
			if(!this.__updateDirty) {
				this.__updateDirty = true;
				this.__setParentUpdateTraverse();
			}
		}
		return this.__textEngine.multiline = value;
	}
	,get_numLines: function() {
		this.__updateLayout();
		return this.__textEngine.numLines;
	}
	,get_restrict: function() {
		return this.__textEngine.restrict;
	}
	,set_restrict: function(value) {
		if(this.__textEngine.restrict != value) {
			this.__textEngine.set_restrict(value);
			this.__updateText(this.__text);
		}
		return value;
	}
	,get_scrollH: function() {
		return this.__textEngine.scrollH;
	}
	,set_scrollH: function(value) {
		this.__updateLayout();
		if(value > this.__textEngine.maxScrollH) {
			value = this.__textEngine.maxScrollH;
		}
		if(value < 0) {
			value = 0;
		}
		if(value != this.__textEngine.scrollH) {
			this.__textEngine.scrollH = value;
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
			if(!this.__updateDirty) {
				this.__updateDirty = true;
				this.__setParentUpdateTraverse();
			}
			this.dispatchEvent(new openfl_events_Event("scroll"));
		}
		return value;
	}
	,get_scrollV: function() {
		return this.__textEngine.scrollV;
	}
	,set_scrollV: function(value) {
		this.__updateLayout();
		if(value > this.__textEngine.maxScrollV) {
			value = this.__textEngine.maxScrollV;
		}
		if(value < 1) {
			value = 1;
		}
		if(value != this.__textEngine.scrollV) {
			this.__textEngine.set_scrollV(value);
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
			if(!this.__updateDirty) {
				this.__updateDirty = true;
				this.__setParentUpdateTraverse();
			}
			this.dispatchEvent(new openfl_events_Event("scroll"));
		}
		return value;
	}
	,__setScrollHV: function(scrollH,scrollV) {
		this.__updateLayout();
		if(scrollH > this.__textEngine.maxScrollH) {
			scrollH = this.__textEngine.maxScrollH;
		}
		if(scrollH < 0) {
			scrollH = 0;
		}
		if(scrollV > this.__textEngine.maxScrollV) {
			scrollV = this.__textEngine.maxScrollV;
		}
		if(scrollV < 1) {
			scrollV = 1;
		}
		if(scrollH == this.__textEngine.scrollH && scrollV == this.__textEngine.scrollV) {
			return;
		}
		this.__textEngine.scrollH = scrollH;
		this.__textEngine.set_scrollV(scrollV);
		this.__dirty = true;
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
		if(!this.__updateDirty) {
			this.__updateDirty = true;
			this.__setParentUpdateTraverse();
		}
		this.dispatchEvent(new openfl_events_Event("scroll"));
	}
	,get_selectable: function() {
		return this.__textEngine.selectable;
	}
	,set_selectable: function(value) {
		if(value != this.__textEngine.selectable && this.get_type() == 1) {
			if(this.stage != null && this.stage.get_focus() == this) {
				this.__startTextInput();
				this.__ensureCaretVisibleNeeded = true;
			} else if(!value) {
				this.__stopTextInput();
			}
		}
		return this.__textEngine.selectable = value;
	}
	,get_selectionBeginIndex: function() {
		if(this.__caretIndex < 0) {
			return 0;
		} else {
			return Math.min(this.__caretIndex,this.__selectionIndex) | 0;
		}
	}
	,get_selectionEndIndex: function() {
		if(this.__caretIndex < 0) {
			return 0;
		} else {
			return Math.max(this.__caretIndex,this.__selectionIndex) | 0;
		}
	}
	,get_sharpness: function() {
		return this.__textEngine.sharpness;
	}
	,set_sharpness: function(value) {
		if(value != this.__textEngine.sharpness) {
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
			if(!this.__updateDirty) {
				this.__updateDirty = true;
				this.__setParentUpdateTraverse();
			}
		}
		return this.__textEngine.sharpness = value;
	}
	,get_tabEnabled: function() {
		if(this.__tabEnabled == null) {
			return this.__textEngine.type == 1;
		} else {
			return this.__tabEnabled;
		}
	}
	,get_text: function() {
		return this.__text;
	}
	,set_text: function(value) {
		if(this.__isHTML || this.__text != value) {
			this.__dirty = true;
			this.__layoutDirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
			if(!this.__updateDirty) {
				this.__updateDirty = true;
				this.__setParentUpdateTraverse();
			}
		} else {
			return value;
		}
		if(this.__textEngine.textFormatRanges.data.get_length() > 1) {
			var this1 = this.__textEngine.textFormatRanges;
			var len = this.__textEngine.textFormatRanges.data.get_length() - 1;
			new openfl__$Vector_AbstractVector(this1.data.splice(1,len));
		}
		var range = this.__textEngine.textFormatRanges.data.get(0);
		range.format = this.__textFormat;
		range.start = 0;
		range.end = _$UnicodeString_UnicodeString_$Impl_$.get_length(value);
		this.__isHTML = false;
		this.__updateText(value);
		return value;
	}
	,get_textColor: function() {
		return this.__textFormat.color;
	}
	,set_textColor: function(value) {
		if(value != this.__textFormat.color) {
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
			if(!this.__updateDirty) {
				this.__updateDirty = true;
				this.__setParentUpdateTraverse();
			}
		}
		var range = this.__textEngine.textFormatRanges.data.iterator();
		while(range.hasNext()) {
			var range1 = range.next();
			range1.format.color = value;
		}
		return this.__textFormat.color = value;
	}
	,get_textWidth: function() {
		this.__updateLayout();
		return this.__textEngine.textWidth;
	}
	,get_textHeight: function() {
		this.__updateLayout();
		return this.__textEngine.textHeight;
	}
	,get_type: function() {
		return this.__textEngine.type;
	}
	,set_type: function(value) {
		if(value != this.__textEngine.type) {
			if(value == 1) {
				this.addEventListener("addedToStage",$bind(this,this.this_onAddedToStage));
				this.this_onFocusIn(null);
				this.__textEngine.__useIntAdvances = true;
			} else {
				this.removeEventListener("addedToStage",$bind(this,this.this_onAddedToStage));
				this.__stopTextInput();
				this.__textEngine.__useIntAdvances = null;
			}
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
			if(!this.__updateDirty) {
				this.__updateDirty = true;
				this.__setParentUpdateTraverse();
			}
		}
		return this.__textEngine.type = value;
	}
	,get_width: function() {
		this.__updateLayout();
		return this.__textEngine.width * Math.abs(this.__scaleX);
	}
	,set_width: function(value) {
		if(value != this.__textEngine.width) {
			this.__setTransformDirty();
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
			if(!this.__updateDirty) {
				this.__updateDirty = true;
				this.__setParentUpdateTraverse();
			}
			this.__textEngine.width = value;
			if(!this.get_wordWrap() && (this.__textEngine.autoSize == 3 || this.__textEngine.autoSize == 0) && this.__textEngine.text != null) {
				if(this.__layoutDirty) {
					this.__textEngine.update();
				}
				var tmp = this.__anchor;
				var tmp1;
				switch(this.__textEngine.autoSize) {
				case 0:
					tmp1 = 0.5;
					break;
				case 3:
					tmp1 = 1;
					break;
				default:
					tmp1 = 0;
				}
				var tmp2 = tmp - this.__textEngine.width * tmp1;
				var tmp3;
				switch(this.__textEngine.autoSize) {
				case 0:
					tmp3 = 0.5;
					break;
				case 3:
					tmp3 = 1;
					break;
				default:
					tmp3 = 0;
				}
				this.__anchor = tmp2 + value * tmp3;
			}
			this.__layoutDirty = true;
		}
		return this.__textEngine.width * Math.abs(this.__scaleX);
	}
	,get_wordWrap: function() {
		return this.__textEngine.wordWrap;
	}
	,set_wordWrap: function(value) {
		if(value != this.__textEngine.wordWrap) {
			this.__dirty = true;
			this.__layoutDirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
			if(!this.__updateDirty) {
				this.__updateDirty = true;
				this.__setParentUpdateTraverse();
			}
		}
		return this.__textEngine.wordWrap = value;
	}
	,get_x: function() {
		if(!this.get_wordWrap() && (this.__textEngine.autoSize == 3 || this.__textEngine.autoSize == 0)) {
			if(this.__layoutDirty) {
				this.__textEngine.update();
			}
			var tmp = this.__anchor;
			var tmp1;
			switch(this.__textEngine.autoSize) {
			case 0:
				tmp1 = 0.5;
				break;
			case 3:
				tmp1 = 1;
				break;
			default:
				tmp1 = 0;
			}
			return tmp - this.__textEngine.width * tmp1 + this.__offsetX;
		}
		return this.__transform.tx + this.__offsetX;
	}
	,set_x: function(value) {
		if(value != this.__transform.tx + this.__offsetX) {
			this.__setTransformDirty();
		}
		this.__transform.tx = value - this.__offsetX;
		if(!this.get_wordWrap() && (this.__textEngine.autoSize == 3 || this.__textEngine.autoSize == 0)) {
			if(this.__textEngine.autoSize == 0) {
				if(this.__layoutDirty) {
					this.__textEngine.update();
				}
				var tmp = this.__transform.tx;
				var tmp1;
				switch(this.__textEngine.autoSize) {
				case 0:
					tmp1 = 0.5;
					break;
				case 3:
					tmp1 = 1;
					break;
				default:
					tmp1 = 0;
				}
				this.__anchor = tmp + this.__textEngine.width * tmp1;
			} else {
				this.__anchor = this.__transform.tx;
			}
		}
		return this.__transform.tx;
	}
	,get_y: function() {
		return this.__transform.ty + this.__offsetY;
	}
	,set_y: function(value) {
		if(value != this.__transform.ty + this.__offsetY) {
			this.__setTransformDirty();
		}
		return this.__transform.ty = value - this.__offsetY;
	}
	,stage_onMouseMove: function(event) {
		if(this.stage == null) {
			return;
		}
		if(this.__textEngine.selectable && this.__selectionIndex >= 0) {
			this.__updateLayout();
			var position = this.__getPosition(this.get_mouseX() + this.get_scrollH(),this.get_mouseY());
			if(position != this.__caretIndex) {
				this.__caretIndex = position;
				this.__dirty = true;
				if(!this.__renderDirty) {
					this.__renderDirty = true;
					this.__setParentRenderDirty();
				}
				if(!this.__updateDirty) {
					this.__updateDirty = true;
					this.__setParentUpdateTraverse();
				}
			}
		}
	}
	,stage_onMouseUp: function(event) {
		if(this.stage == null) {
			return;
		}
		this.stage.removeEventListener("mouseMove",$bind(this,this.stage_onMouseMove));
		this.stage.removeEventListener("mouseUp",$bind(this,this.stage_onMouseUp));
		if(this.stage.get_focus() == this) {
			this.__getWorldTransform();
			this.__updateLayout();
			var _this = this.__worldTransform;
			var px = this.get_x();
			var py = this.get_y();
			var norm = _this.a * _this.d - _this.b * _this.c;
			var px1 = norm == 0 ? -_this.tx : 1.0 / norm * (_this.c * (_this.ty - py) + _this.d * (px - _this.tx));
			var _this1 = this.__worldTransform;
			var px2 = this.get_x();
			var py1 = this.get_y();
			var norm1 = _this1.a * _this1.d - _this1.b * _this1.c;
			var py2 = norm1 == 0 ? -_this1.ty : 1.0 / norm1 * (_this1.a * (py1 - _this1.ty) + _this1.b * (_this1.tx - px2));
			var upPos = this.__getPosition(this.get_mouseX() + this.get_scrollH(),this.get_mouseY());
			var leftPos = Math.min(this.__selectionIndex,upPos) | 0;
			var rightPos = Math.max(this.__selectionIndex,upPos) | 0;
			this.__selectionIndex = leftPos;
			this.__caretIndex = rightPos;
			if(this.__inputEnabled) {
				this.this_onFocusIn(null);
				this.__stopCursorTimer();
				this.__startCursorTimer();
			}
		}
	}
	,this_onAddedToStage: function(event) {
		this.this_onFocusIn(null);
	}
	,this_onFocusIn: function(event) {
		if(this.get_type() == 1 && this.stage != null && this.stage.get_focus() == this) {
			this.__startTextInput();
			if(event != null) {
				this.__ensureCaretVisibleNeeded = true;
			}
		}
	}
	,this_onFocusOut: function(event) {
		this.__stopCursorTimer();
		if(event.relatedObject == null || !((event.relatedObject) instanceof openfl_text_TextField)) {
			this.__stopTextInput();
		} else {
			this.stage.window.onTextInput.remove($bind(this,this.window_onTextInput));
			this.stage.window.onTextPaste.remove($bind(this,this.window_onTextPaste));
			this.stage.window.onTextCopy.remove($bind(this,this.window_onTextCopy));
			this.stage.window.onTextCut.remove($bind(this,this.window_onTextCut));
			this.stage.window.onKeyDown.remove($bind(this,this.window_onKeyDown));
			this.__inputEnabled = false;
		}
		if(this.__selectionIndex != this.__caretIndex) {
			this.__selectionIndex = this.__caretIndex;
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
			if(!this.__updateDirty) {
				this.__updateDirty = true;
				this.__setParentUpdateTraverse();
			}
		}
	}
	,this_onKeyDown: function(event) {
		if(this.get_selectable() && this.get_type() != 1 && event.keyCode == 67 && (event.commandKey || event.ctrlKey)) {
			if(this.__caretIndex != this.__selectionIndex) {
				openfl__$internal_system_Clipboard.setText(_$UnicodeString_UnicodeString_$Impl_$.substring(this.__text,this.__caretIndex,this.__selectionIndex),true);
			}
		}
	}
	,this_onMouseDown: function(event) {
		if(!this.get_selectable() && this.get_type() != 1) {
			return;
		}
		this.__updateLayout();
		this.__caretIndex = this.__getPosition(this.get_mouseX() + this.get_scrollH(),this.get_mouseY());
		this.__selectionIndex = this.__caretIndex;
		this.__ensureCaretVisibleNeeded = false;
		this.__dirty = true;
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
		if(!this.__updateDirty) {
			this.__updateDirty = true;
			this.__setParentUpdateTraverse();
		}
		this.stage.addEventListener("mouseMove",$bind(this,this.stage_onMouseMove));
		this.stage.addEventListener("mouseUp",$bind(this,this.stage_onMouseUp));
	}
	,this_onMouseWheel: function(event) {
		var _g = this;
		_g.set_scrollV(_g.get_scrollV() - event.delta);
	}
	,window_onKeyDown: function(key,modifier) {
		switch(key) {
		case 8:
			if(this.__selectionIndex == this.__caretIndex && this.__caretIndex > 0) {
				this.__selectionIndex = this.__caretIndex - 1;
			}
			if(this.__selectionIndex != this.__caretIndex) {
				this.replaceSelectedText("");
				this.dispatchEvent(new openfl_events_Event("change",true));
			}
			break;
		case 97:
			if(openfl__$internal_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier) || openfl__$internal_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier)) {
				this.setSelection(0,_$UnicodeString_UnicodeString_$Impl_$.get_length(this.__text));
				this.__setScrollHV(0,this.get_maxScrollV());
			}
			break;
		case 127:
			if(this.__selectionIndex == this.__caretIndex && this.__caretIndex < _$UnicodeString_UnicodeString_$Impl_$.get_length(this.__text)) {
				this.__selectionIndex = this.__caretIndex + 1;
			}
			if(this.__selectionIndex != this.__caretIndex) {
				this.replaceSelectedText("");
				this.dispatchEvent(new openfl_events_Event("change",true));
			}
			break;
		case 1073741898:
			this.__caretBeginningOfLine();
			if(!openfl__$internal_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier)) {
				this.__selectionIndex = this.__caretIndex;
			}
			this.__ensureCaretVisibleNeeded = true;
			this.__stopCursorTimer();
			this.__startCursorTimer();
			break;
		case 1073741901:
			this.__caretEndOfLine();
			if(!openfl__$internal_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier)) {
				this.__selectionIndex = this.__caretIndex;
			}
			this.__ensureCaretVisibleNeeded = true;
			this.__stopCursorTimer();
			this.__startCursorTimer();
			break;
		case 1073741903:
			if(openfl__$internal_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier)) {
				this.__caretEndOfLine();
				if(!openfl__$internal_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier)) {
					this.__selectionIndex = this.__caretIndex;
				}
			} else if(openfl__$internal_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier)) {
				this.__caretNextCharacter();
			} else {
				if(this.__selectionIndex == this.__caretIndex) {
					this.__caretNextCharacter();
				} else {
					this.__caretIndex = Math.max(this.__caretIndex,this.__selectionIndex) | 0;
				}
				this.__selectionIndex = this.__caretIndex;
			}
			this.__ensureCaretVisibleNeeded = true;
			this.__stopCursorTimer();
			this.__startCursorTimer();
			break;
		case 1073741904:
			if(openfl__$internal_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier)) {
				this.__caretBeginningOfLine();
				if(!openfl__$internal_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier)) {
					this.__selectionIndex = this.__caretIndex;
				}
			} else if(openfl__$internal_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier)) {
				this.__caretPreviousCharacter();
			} else {
				if(this.__selectionIndex == this.__caretIndex) {
					this.__caretPreviousCharacter();
				} else {
					this.__caretIndex = Math.min(this.__caretIndex,this.__selectionIndex) | 0;
				}
				this.__selectionIndex = this.__caretIndex;
			}
			this.__ensureCaretVisibleNeeded = true;
			this.__stopCursorTimer();
			this.__startCursorTimer();
			break;
		case 1073741905:
			this.__caretNextLine();
			if(!openfl__$internal_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier)) {
				this.__selectionIndex = this.__caretIndex;
			}
			this.__ensureCaretVisibleNeeded = true;
			this.__stopCursorTimer();
			this.__startCursorTimer();
			break;
		case 1073741906:
			this.__caretPreviousLine();
			if(!openfl__$internal_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier)) {
				this.__selectionIndex = this.__caretIndex;
			}
			this.__ensureCaretVisibleNeeded = true;
			this.__stopCursorTimer();
			this.__startCursorTimer();
			break;
		case 13:case 1073741912:
			if(this.__textEngine.multiline) {
				this.replaceSelectedText("\r");
				this.dispatchEvent(new openfl_events_Event("change",true));
			}
			break;
		default:
		}
	}
	,window_onTextInput: function(value) {
		this.__inputText(value);
	}
	,window_onTextPaste: function(value) {
		if(!this.get_multiline()) {
			value = StringTools.replace(value,"\n","");
		}
		this.__inputText(value);
	}
	,__inputText: function(value) {
		var event = new openfl_events_TextEvent("textInput",true,true,value);
		this.dispatchEvent(event);
		if(!event.isDefaultPrevented()) {
			this.replaceSelectedText(value);
			this.dispatchEvent(new openfl_events_Event("change",true));
		}
	}
	,window_onTextCopy: function(provideData) {
		if(this.__caretIndex != this.__selectionIndex) {
			provideData(_$UnicodeString_UnicodeString_$Impl_$.substring(this.__text,this.__caretIndex,this.__selectionIndex));
		}
	}
	,window_onTextCut: function(provideData) {
		if(this.__caretIndex != this.__selectionIndex) {
			provideData(_$UnicodeString_UnicodeString_$Impl_$.substring(this.__text,this.__caretIndex,this.__selectionIndex));
			this.replaceSelectedText("");
			this.dispatchEvent(new openfl_events_Event("change",true));
		}
	}
	,__class__: openfl_text_TextField
	,__properties__: $extend(openfl_display_InteractiveObject.prototype.__properties__,{set_wordWrap:"set_wordWrap",get_wordWrap:"get_wordWrap",set_type:"set_type",get_type:"get_type",get_textWidth:"get_textWidth",get_textHeight:"get_textHeight",set_textColor:"set_textColor",get_textColor:"get_textColor",set_text:"set_text",get_text:"get_text",set_sharpness:"set_sharpness",get_sharpness:"get_sharpness",get_selectionEndIndex:"get_selectionEndIndex",get_selectionBeginIndex:"get_selectionBeginIndex",set_selectable:"set_selectable",get_selectable:"get_selectable",set_scrollV:"set_scrollV",get_scrollV:"get_scrollV",set_scrollH:"set_scrollH",get_scrollH:"get_scrollH",set_restrict:"set_restrict",get_restrict:"get_restrict",get_numLines:"get_numLines",set_multiline:"set_multiline",get_multiline:"get_multiline",set_mouseWheelEnabled:"set_mouseWheelEnabled",get_mouseWheelEnabled:"get_mouseWheelEnabled",get_maxScrollV:"get_maxScrollV",get_maxScrollH:"get_maxScrollH",set_maxChars:"set_maxChars",get_maxChars:"get_maxChars",get_length:"get_length",set_htmlText:"set_htmlText",get_htmlText:"get_htmlText",set_gridFitType:"set_gridFitType",get_gridFitType:"get_gridFitType",set_embedFonts:"set_embedFonts",get_embedFonts:"get_embedFonts",set_displayAsPassword:"set_displayAsPassword",get_displayAsPassword:"get_displayAsPassword",set_defaultTextFormat:"set_defaultTextFormat",get_defaultTextFormat:"get_defaultTextFormat",get_caretIndex:"get_caretIndex",get_bottomScrollV:"get_bottomScrollV",set_borderColor:"set_borderColor",get_borderColor:"get_borderColor",set_border:"set_border",get_border:"get_border",set_backgroundColor:"set_backgroundColor",get_backgroundColor:"get_backgroundColor",set_background:"set_background",get_background:"get_background",set_autoSize:"set_autoSize",get_autoSize:"get_autoSize",set_antiAliasType:"set_antiAliasType",get_antiAliasType:"get_antiAliasType"})
});
var openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$ = {};
$hxClasses["openfl.text._TextFieldAutoSize.TextFieldAutoSize_Impl_"] = openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$;
openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$.__name__ = "openfl.text._TextFieldAutoSize.TextFieldAutoSize_Impl_";
openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$.fromString = function(value) {
	switch(value) {
	case "center":
		return 0;
	case "left":
		return 1;
	case "none":
		return 2;
	case "right":
		return 3;
	default:
		return null;
	}
};
openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 0:
		return "center";
	case 1:
		return "left";
	case 2:
		return "none";
	case 3:
		return "right";
	default:
		return null;
	}
};
var openfl_text__$TextFieldType_TextFieldType_$Impl_$ = {};
$hxClasses["openfl.text._TextFieldType.TextFieldType_Impl_"] = openfl_text__$TextFieldType_TextFieldType_$Impl_$;
openfl_text__$TextFieldType_TextFieldType_$Impl_$.__name__ = "openfl.text._TextFieldType.TextFieldType_Impl_";
openfl_text__$TextFieldType_TextFieldType_$Impl_$.fromString = function(value) {
	switch(value) {
	case "dynamic":
		return 0;
	case "input":
		return 1;
	default:
		return null;
	}
};
openfl_text__$TextFieldType_TextFieldType_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 0:
		return "dynamic";
	case 1:
		return "input";
	default:
		return null;
	}
};
var openfl_text_TextFormat = function(font,size,color,bold,italic,underline,url,target,align,leftMargin,rightMargin,indent,leading) {
	this.font = font;
	this.size = size;
	this.color = color;
	this.bold = bold;
	this.italic = italic;
	this.underline = underline;
	this.url = url;
	this.target = target;
	this.align = align;
	this.leftMargin = leftMargin;
	this.rightMargin = rightMargin;
	this.indent = indent;
	this.leading = leading;
};
$hxClasses["openfl.text.TextFormat"] = openfl_text_TextFormat;
openfl_text_TextFormat.__name__ = "openfl.text.TextFormat";
openfl_text_TextFormat.prototype = {
	align: null
	,blockIndent: null
	,bold: null
	,bullet: null
	,color: null
	,font: null
	,indent: null
	,italic: null
	,kerning: null
	,leading: null
	,leftMargin: null
	,letterSpacing: null
	,rightMargin: null
	,size: null
	,tabStops: null
	,target: null
	,underline: null
	,url: null
	,__ascent: null
	,__descent: null
	,clone: function() {
		var newFormat = new openfl_text_TextFormat(this.font,this.size,this.color,this.bold,this.italic,this.underline,this.url,this.target);
		newFormat.align = this.align;
		newFormat.leftMargin = this.leftMargin;
		newFormat.rightMargin = this.rightMargin;
		newFormat.indent = this.indent;
		newFormat.leading = this.leading;
		newFormat.blockIndent = this.blockIndent;
		newFormat.bullet = this.bullet;
		newFormat.kerning = this.kerning;
		newFormat.letterSpacing = this.letterSpacing;
		newFormat.tabStops = this.tabStops;
		newFormat.__ascent = this.__ascent;
		newFormat.__descent = this.__descent;
		return newFormat;
	}
	,__merge: function(format) {
		if(format.font != null) {
			this.font = format.font;
		}
		if(format.size != null) {
			this.size = format.size;
		}
		if(format.color != null) {
			this.color = format.color;
		}
		if(format.bold != null) {
			this.bold = format.bold;
		}
		if(format.italic != null) {
			this.italic = format.italic;
		}
		if(format.underline != null) {
			this.underline = format.underline;
		}
		if(format.url != null && format.url != "") {
			this.url = format.url;
		}
		if(format.url == "" && this.url == null) {
			this.url = "";
		}
		if(format.target != null) {
			this.target = format.target;
		}
		if(format.align != null) {
			this.align = format.align;
		}
		if(format.leftMargin != null) {
			this.leftMargin = format.leftMargin;
		}
		if(format.rightMargin != null) {
			this.rightMargin = format.rightMargin;
		}
		if(format.indent != null) {
			this.indent = format.indent;
		}
		if(format.leading != null) {
			this.leading = format.leading;
		}
		if(format.blockIndent != null) {
			this.blockIndent = format.blockIndent;
		}
		if(format.bullet != null) {
			this.bullet = format.bullet;
		}
		if(format.kerning != null) {
			this.kerning = format.kerning;
		}
		if(format.letterSpacing != null) {
			this.letterSpacing = format.letterSpacing;
		}
		if(format.tabStops != null) {
			this.tabStops = format.tabStops;
		}
		if(format.__ascent != null) {
			this.__ascent = format.__ascent;
		}
		if(format.__descent != null) {
			this.__descent = format.__descent;
		}
	}
	,__class__: openfl_text_TextFormat
};
var openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$ = {};
$hxClasses["openfl.text._TextFormatAlign.TextFormatAlign_Impl_"] = openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$;
openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.__name__ = "openfl.text._TextFormatAlign.TextFormatAlign_Impl_";
openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.fromString = function(value) {
	switch(value) {
	case "center":
		return 0;
	case "end":
		return 1;
	case "justify":
		return 2;
	case "left":
		return 3;
	case "right":
		return 4;
	case "start":
		return 5;
	default:
		return null;
	}
};
openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 0:
		return "center";
	case 1:
		return "end";
	case 2:
		return "justify";
	case 3:
		return "left";
	case 4:
		return "right";
	case 5:
		return "start";
	default:
		return null;
	}
};
var openfl_text_TextLineMetrics = function(x,width,height,ascent,descent,leading) {
	this.x = x;
	this.width = width;
	this.height = height;
	this.ascent = ascent;
	this.descent = descent;
	this.leading = leading;
};
$hxClasses["openfl.text.TextLineMetrics"] = openfl_text_TextLineMetrics;
openfl_text_TextLineMetrics.__name__ = "openfl.text.TextLineMetrics";
openfl_text_TextLineMetrics.prototype = {
	ascent: null
	,descent: null
	,height: null
	,leading: null
	,width: null
	,x: null
	,__class__: openfl_text_TextLineMetrics
};
var openfl_ui_GameInput = function() {
	openfl_events_EventDispatcher.call(this);
	openfl_ui_GameInput.__instances.push(this);
};
$hxClasses["openfl.ui.GameInput"] = openfl_ui_GameInput;
openfl_ui_GameInput.__name__ = "openfl.ui.GameInput";
openfl_ui_GameInput.getDeviceAt = function(index) {
	if(index >= 0 && index < openfl_ui_GameInput.__deviceList.length) {
		return openfl_ui_GameInput.__deviceList[index];
	}
	return null;
};
openfl_ui_GameInput.__getDevice = function(gamepad) {
	if(gamepad == null) {
		return null;
	}
	if(openfl_ui_GameInput.__devices.h.__keys__[gamepad.__id__] == null) {
		var devices = openfl__$internal_ui_Gamepad.__getDeviceData();
		var device = devices[gamepad.id].id;
		var devices1 = openfl__$internal_ui_Gamepad.__getDeviceData();
		var device1 = new openfl_ui_GameInputDevice(device,devices1[gamepad.id].id);
		openfl_ui_GameInput.__deviceList.push(device1);
		openfl_ui_GameInput.__devices.set(gamepad,device1);
		openfl_ui_GameInput.numDevices = openfl_ui_GameInput.__deviceList.length;
	}
	return openfl_ui_GameInput.__devices.h[gamepad.__id__];
};
openfl_ui_GameInput.__onGamepadAxisMove = function(gamepad,axis,value) {
	var device = openfl_ui_GameInput.__getDevice(gamepad);
	if(device == null) {
		return;
	}
	if(device.enabled) {
		if(!device.__axis.h.hasOwnProperty(axis)) {
			var control;
			switch(axis) {
			case 0:
				control = "LEFT_X";
				break;
			case 1:
				control = "LEFT_Y";
				break;
			case 2:
				control = "RIGHT_X";
				break;
			case 3:
				control = "RIGHT_Y";
				break;
			case 4:
				control = "TRIGGER_LEFT";
				break;
			case 5:
				control = "TRIGGER_RIGHT";
				break;
			default:
				control = "UNKNOWN (" + axis + ")";
			}
			var control1 = new openfl_ui_GameInputControl(device,"AXIS_" + control,-1,1);
			device.__axis.h[axis] = control1;
			device.__controls.push(control1);
		}
		var control2 = device.__axis.h[axis];
		control2.value = value;
		control2.dispatchEvent(new openfl_events_Event("change"));
	}
};
openfl_ui_GameInput.__onGamepadButtonDown = function(gamepad,button) {
	var device = openfl_ui_GameInput.__getDevice(gamepad);
	if(device == null) {
		return;
	}
	if(device.enabled) {
		if(!device.__button.h.hasOwnProperty(button)) {
			var control;
			switch(button) {
			case 0:
				control = "A";
				break;
			case 1:
				control = "B";
				break;
			case 2:
				control = "X";
				break;
			case 3:
				control = "Y";
				break;
			case 4:
				control = "BACK";
				break;
			case 5:
				control = "GUIDE";
				break;
			case 6:
				control = "START";
				break;
			case 7:
				control = "LEFT_STICK";
				break;
			case 8:
				control = "RIGHT_STICK";
				break;
			case 9:
				control = "LEFT_SHOULDER";
				break;
			case 10:
				control = "RIGHT_SHOULDER";
				break;
			case 11:
				control = "DPAD_UP";
				break;
			case 12:
				control = "DPAD_DOWN";
				break;
			case 13:
				control = "DPAD_LEFT";
				break;
			case 14:
				control = "DPAD_RIGHT";
				break;
			default:
				control = "UNKNOWN (" + button + ")";
			}
			var control1 = new openfl_ui_GameInputControl(device,"BUTTON_" + control,0,1);
			device.__button.h[button] = control1;
			device.__controls.push(control1);
		}
		var control2 = device.__button.h[button];
		control2.value = 1;
		control2.dispatchEvent(new openfl_events_Event("change"));
	}
};
openfl_ui_GameInput.__onGamepadButtonUp = function(gamepad,button) {
	var device = openfl_ui_GameInput.__getDevice(gamepad);
	if(device == null) {
		return;
	}
	if(device.enabled) {
		if(!device.__button.h.hasOwnProperty(button)) {
			var control;
			switch(button) {
			case 0:
				control = "A";
				break;
			case 1:
				control = "B";
				break;
			case 2:
				control = "X";
				break;
			case 3:
				control = "Y";
				break;
			case 4:
				control = "BACK";
				break;
			case 5:
				control = "GUIDE";
				break;
			case 6:
				control = "START";
				break;
			case 7:
				control = "LEFT_STICK";
				break;
			case 8:
				control = "RIGHT_STICK";
				break;
			case 9:
				control = "LEFT_SHOULDER";
				break;
			case 10:
				control = "RIGHT_SHOULDER";
				break;
			case 11:
				control = "DPAD_UP";
				break;
			case 12:
				control = "DPAD_DOWN";
				break;
			case 13:
				control = "DPAD_LEFT";
				break;
			case 14:
				control = "DPAD_RIGHT";
				break;
			default:
				control = "UNKNOWN (" + button + ")";
			}
			var control1 = new openfl_ui_GameInputControl(device,"BUTTON_" + control,0,1);
			device.__button.h[button] = control1;
			device.__controls.push(control1);
		}
		var control2 = device.__button.h[button];
		control2.value = 0;
		control2.dispatchEvent(new openfl_events_Event("change"));
	}
};
openfl_ui_GameInput.__onGamepadConnect = function(gamepad) {
	var device = openfl_ui_GameInput.__getDevice(gamepad);
	if(device == null) {
		return;
	}
	var _g = 0;
	var _g1 = openfl_ui_GameInput.__instances;
	while(_g < _g1.length) {
		var instance = _g1[_g];
		++_g;
		instance.dispatchEvent(new openfl_events_GameInputEvent("deviceAdded",null,null,device));
	}
};
openfl_ui_GameInput.__onGamepadDisconnect = function(gamepad) {
	var device = openfl_ui_GameInput.__devices.h[gamepad.__id__];
	if(device != null) {
		if(openfl_ui_GameInput.__devices.h.__keys__[gamepad.__id__] != null) {
			HxOverrides.remove(openfl_ui_GameInput.__deviceList,openfl_ui_GameInput.__devices.h[gamepad.__id__]);
			openfl_ui_GameInput.__devices.remove(gamepad);
		}
		openfl_ui_GameInput.numDevices = openfl_ui_GameInput.__deviceList.length;
		var _g = 0;
		var _g1 = openfl_ui_GameInput.__instances;
		while(_g < _g1.length) {
			var instance = _g1[_g];
			++_g;
			instance.dispatchEvent(new openfl_events_GameInputEvent("deviceRemoved",null,null,device));
		}
	}
};
openfl_ui_GameInput.__super__ = openfl_events_EventDispatcher;
openfl_ui_GameInput.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) {
			useWeakReference = false;
		}
		if(priority == null) {
			priority = 0;
		}
		if(useCapture == null) {
			useCapture = false;
		}
		openfl_events_EventDispatcher.prototype.addEventListener.call(this,type,listener,useCapture,priority,useWeakReference);
		if(type == "deviceAdded") {
			var _g = 0;
			var _g1 = openfl_ui_GameInput.__deviceList;
			while(_g < _g1.length) {
				var device = _g1[_g];
				++_g;
				this.dispatchEvent(new openfl_events_GameInputEvent("deviceAdded",null,null,device));
			}
		}
	}
	,__class__: openfl_ui_GameInput
});
var openfl_ui_GameInputControl = function(device,id,minValue,maxValue,value) {
	if(value == null) {
		value = 0;
	}
	openfl_events_EventDispatcher.call(this);
	this.device = device;
	this.id = id;
	this.minValue = minValue;
	this.maxValue = maxValue;
	this.value = value;
};
$hxClasses["openfl.ui.GameInputControl"] = openfl_ui_GameInputControl;
openfl_ui_GameInputControl.__name__ = "openfl.ui.GameInputControl";
openfl_ui_GameInputControl.__super__ = openfl_events_EventDispatcher;
openfl_ui_GameInputControl.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	device: null
	,id: null
	,maxValue: null
	,minValue: null
	,value: null
	,__class__: openfl_ui_GameInputControl
});
var openfl_ui_GameInputDevice = function(id,name) {
	this.__controls = [];
	this.__button = new haxe_ds_IntMap();
	this.__axis = new haxe_ds_IntMap();
	this.id = id;
	this.name = name;
	var control;
	control = new openfl_ui_GameInputControl(this,"AXIS_" + 0,-1,1);
	this.__axis.h[0] = control;
	this.__controls.push(control);
	control = new openfl_ui_GameInputControl(this,"AXIS_" + 1,-1,1);
	this.__axis.h[1] = control;
	this.__controls.push(control);
	control = new openfl_ui_GameInputControl(this,"AXIS_" + 2,-1,1);
	this.__axis.h[2] = control;
	this.__controls.push(control);
	control = new openfl_ui_GameInputControl(this,"AXIS_" + 3,-1,1);
	this.__axis.h[3] = control;
	this.__controls.push(control);
	control = new openfl_ui_GameInputControl(this,"AXIS_" + 4,-1,1);
	this.__axis.h[4] = control;
	this.__controls.push(control);
	control = new openfl_ui_GameInputControl(this,"AXIS_" + 5,-1,1);
	this.__axis.h[5] = control;
	this.__controls.push(control);
	var _g = 0;
	while(_g < 15) {
		var i = _g++;
		control = new openfl_ui_GameInputControl(this,"BUTTON_" + i,0,1);
		this.__button.h[i] = control;
		this.__controls.push(control);
	}
};
$hxClasses["openfl.ui.GameInputDevice"] = openfl_ui_GameInputDevice;
openfl_ui_GameInputDevice.__name__ = "openfl.ui.GameInputDevice";
openfl_ui_GameInputDevice.prototype = {
	enabled: null
	,id: null
	,name: null
	,sampleInterval: null
	,__axis: null
	,__button: null
	,__controls: null
	,__gamepad: null
	,getCachedSamples: function(data,append) {
		if(append == null) {
			append = false;
		}
		return 0;
	}
	,getControlAt: function(i) {
		if(i >= 0 && i < this.__controls.length) {
			return this.__controls[i];
		}
		return null;
	}
	,startCachingSamples: function(numSamples,controls) {
	}
	,stopCachingSamples: function() {
	}
	,get_numControls: function() {
		return this.__controls.length;
	}
	,__class__: openfl_ui_GameInputDevice
	,__properties__: {get_numControls:"get_numControls"}
};
var openfl_ui_Keyboard = function() { };
$hxClasses["openfl.ui.Keyboard"] = openfl_ui_Keyboard;
openfl_ui_Keyboard.__name__ = "openfl.ui.Keyboard";
openfl_ui_Keyboard.isAccessible = function() {
	return false;
};
openfl_ui_Keyboard.__convertKeyCode = function(key) {
	switch(key) {
	case 8:
		return 8;
	case 9:
		return 9;
	case 13:
		return 13;
	case 27:
		return 27;
	case 32:
		return 32;
	case 33:
		return 49;
	case 34:
		return 222;
	case 35:
		return 51;
	case 36:
		return 52;
	case 37:
		return 53;
	case 38:
		return 55;
	case 39:
		return 222;
	case 40:
		return 57;
	case 41:
		return 48;
	case 42:
		return 56;
	case 44:
		return 188;
	case 45:
		return 189;
	case 46:
		return 190;
	case 47:
		return 191;
	case 48:
		return 48;
	case 49:
		return 49;
	case 50:
		return 50;
	case 51:
		return 51;
	case 52:
		return 52;
	case 53:
		return 53;
	case 54:
		return 54;
	case 55:
		return 55;
	case 56:
		return 56;
	case 57:
		return 57;
	case 58:
		return 186;
	case 59:
		return 186;
	case 60:
		return 60;
	case 61:
		return 187;
	case 62:
		return 190;
	case 63:
		return 191;
	case 64:
		return 50;
	case 91:
		return 219;
	case 92:
		return 220;
	case 93:
		return 221;
	case 94:
		return 54;
	case 95:
		return 189;
	case 96:
		return 192;
	case 97:
		return 65;
	case 98:
		return 66;
	case 99:
		return 67;
	case 100:
		return 68;
	case 101:
		return 69;
	case 102:
		return 70;
	case 103:
		return 71;
	case 104:
		return 72;
	case 105:
		return 73;
	case 106:
		return 74;
	case 107:
		return 75;
	case 108:
		return 76;
	case 109:
		return 77;
	case 110:
		return 78;
	case 111:
		return 79;
	case 112:
		return 80;
	case 113:
		return 81;
	case 114:
		return 82;
	case 115:
		return 83;
	case 116:
		return 84;
	case 117:
		return 85;
	case 118:
		return 86;
	case 119:
		return 87;
	case 120:
		return 88;
	case 121:
		return 89;
	case 122:
		return 90;
	case 127:
		return 46;
	case 1073741881:
		return 20;
	case 1073741882:
		return 112;
	case 1073741883:
		return 113;
	case 1073741884:
		return 114;
	case 1073741885:
		return 115;
	case 1073741886:
		return 116;
	case 1073741887:
		return 117;
	case 1073741888:
		return 118;
	case 1073741889:
		return 119;
	case 1073741890:
		return 120;
	case 1073741891:
		return 121;
	case 1073741892:
		return 122;
	case 1073741893:
		return 123;
	case 1073741894:
		return 301;
	case 1073741895:
		return 145;
	case 1073741896:
		return 19;
	case 1073741897:
		return 45;
	case 1073741898:
		return 36;
	case 1073741899:
		return 33;
	case 1073741901:
		return 35;
	case 1073741902:
		return 34;
	case 1073741903:
		return 39;
	case 1073741904:
		return 37;
	case 1073741905:
		return 40;
	case 1073741906:
		return 38;
	case 1073741907:
		return 144;
	case 1073741908:
		return 111;
	case 1073741909:
		return 106;
	case 1073741910:
		return 109;
	case 1073741911:
		return 107;
	case 1073741912:
		return 108;
	case 1073741913:
		return 97;
	case 1073741914:
		return 98;
	case 1073741915:
		return 99;
	case 1073741916:
		return 100;
	case 1073741917:
		return 101;
	case 1073741918:
		return 102;
	case 1073741919:
		return 103;
	case 1073741920:
		return 104;
	case 1073741921:
		return 105;
	case 1073741922:
		return 96;
	case 1073741923:
		return 110;
	case 1073741925:
		return 302;
	case 1073741928:
		return 124;
	case 1073741929:
		return 125;
	case 1073741930:
		return 126;
	case 1073741982:
		return 13;
	case 1073742044:
		return 110;
	case 1073742048:
		return 17;
	case 1073742049:
		return 16;
	case 1073742050:
		return 18;
	case 1073742051:
		return 15;
	case 1073742052:
		return 17;
	case 1073742053:
		return 16;
	case 1073742054:
		return 18;
	case 1073742055:
		return 15;
	default:
		return key;
	}
};
openfl_ui_Keyboard.__getCharCode = function(key,shift) {
	if(shift == null) {
		shift = false;
	}
	if(!shift) {
		switch(key) {
		case 8:
			return 8;
		case 9:
			return 9;
		case 13:
			return 13;
		case 27:
			return 27;
		case 32:
			return 32;
		case 186:
			return 59;
		case 187:
			return 61;
		case 188:
			return 44;
		case 189:
			return 45;
		case 190:
			return 46;
		case 191:
			return 47;
		case 192:
			return 96;
		case 219:
			return 91;
		case 220:
			return 92;
		case 221:
			return 93;
		case 222:
			return 39;
		}
		if(key >= 48 && key <= 57) {
			return key - 48 + 48;
		}
		if(key >= 65 && key <= 90) {
			return key - 65 + 97;
		}
	} else {
		switch(key) {
		case 48:
			return 41;
		case 49:
			return 33;
		case 50:
			return 64;
		case 51:
			return 35;
		case 52:
			return 36;
		case 53:
			return 37;
		case 54:
			return 94;
		case 55:
			return 38;
		case 56:
			return 42;
		case 57:
			return 40;
		case 186:
			return 58;
		case 187:
			return 43;
		case 188:
			return 60;
		case 189:
			return 95;
		case 190:
			return 62;
		case 191:
			return 63;
		case 192:
			return 126;
		case 219:
			return 123;
		case 220:
			return 124;
		case 221:
			return 125;
		case 222:
			return 34;
		}
		if(key >= 65 && key <= 90) {
			return key - 65 + 65;
		}
	}
	if(key >= 96 && key <= 105) {
		return key - 96 + 48;
	}
	switch(key) {
	case 8:
		return 8;
	case 13:
		return 13;
	case 46:
		return 127;
	case 106:
		return 42;
	case 107:
		return 43;
	case 108:
		return 44;
	case 110:
		return 45;
	case 111:
		return 46;
	}
	return 0;
};
openfl_ui_Keyboard.__getKeyLocation = function(key) {
	switch(key) {
	case 1073741908:case 1073741909:case 1073741910:case 1073741911:case 1073741912:case 1073741913:case 1073741914:case 1073741915:case 1073741916:case 1073741917:case 1073741918:case 1073741919:case 1073741920:case 1073741921:case 1073741922:case 1073741923:case 1073742044:
		return 3;
	case 1073742048:case 1073742049:case 1073742050:case 1073742051:
		return 1;
	case 1073742052:case 1073742053:case 1073742054:case 1073742055:
		return 2;
	default:
		return 0;
	}
};
var openfl_ui_Mouse = function() { };
$hxClasses["openfl.ui.Mouse"] = openfl_ui_Mouse;
openfl_ui_Mouse.__name__ = "openfl.ui.Mouse";
openfl_ui_Mouse.__properties__ = {set_cursor:"set_cursor",get_cursor:"get_cursor"};
openfl_ui_Mouse.hide = function() {
	openfl_ui_InternalMouse.hide();
};
openfl_ui_Mouse.show = function() {
	openfl_ui_InternalMouse.show();
};
openfl_ui_Mouse.get_cursor = function() {
	return openfl_ui_Mouse.__cursor;
};
openfl_ui_Mouse.set_cursor = function(value) {
	openfl_ui_InternalMouse.setCursor(value);
	return openfl_ui_Mouse.__cursor = value;
};
var openfl_ui_InternalMouse = function() { };
$hxClasses["openfl.ui.InternalMouse"] = openfl_ui_InternalMouse;
openfl_ui_InternalMouse.__name__ = "openfl.ui.InternalMouse";
openfl_ui_InternalMouse.hide = function() {
	if(!openfl_ui_InternalMouse.__hidden) {
		openfl_ui_InternalMouse.__hidden = true;
		kha_SystemImpl.khanvas.style.cursor = "none";
	}
};
openfl_ui_InternalMouse.show = function() {
	if(openfl_ui_InternalMouse.__hidden) {
		openfl_ui_InternalMouse.__hidden = false;
		openfl_ui_InternalMouse.applyCursor(openfl_ui_InternalMouse.__cursor);
	}
};
openfl_ui_InternalMouse.setCursor = function(value) {
	if(openfl_ui_InternalMouse.__cursor != value) {
		if(!openfl_ui_InternalMouse.__hidden) {
			openfl_ui_InternalMouse.applyCursor(value);
		}
		openfl_ui_InternalMouse.__cursor = value;
	}
	return openfl_ui_InternalMouse.__cursor;
};
openfl_ui_InternalMouse.applyCursor = function(cursor) {
	var tmp;
	switch(cursor) {
	case "arrow":
		tmp = "default";
		break;
	case "button":
		tmp = "pointer";
		break;
	case "crosshair":
		tmp = "crosshair";
		break;
	case "hand":
		tmp = "move";
		break;
	case "ibeam":
		tmp = "text";
		break;
	case "resize_nesw":
		tmp = "nesw-resize";
		break;
	case "resize_ns":
		tmp = "ns-resize";
		break;
	case "resize_nwse":
		tmp = "nwse-resize";
		break;
	case "resize_we":
		tmp = "ew-resize";
		break;
	case "wait":
		tmp = "wait";
		break;
	case "waitarrow":
		tmp = "wait";
		break;
	default:
		tmp = "default";
	}
	kha_SystemImpl.khanvas.style.cursor = tmp;
};
var openfl_ui_Multitouch = function() { };
$hxClasses["openfl.ui.Multitouch"] = openfl_ui_Multitouch;
openfl_ui_Multitouch.__name__ = "openfl.ui.Multitouch";
openfl_ui_Multitouch.__properties__ = {get_supportsTouchEvents:"get_supportsTouchEvents"};
openfl_ui_Multitouch.get_supportsTouchEvents = function() {
	if(('ontouchstart' in document.documentElement) || (window.DocumentTouch && document instanceof DocumentTouch)) {
		return true;
	}
	return false;
};
var openfl_ui__$MultitouchInputMode_MultitouchInputMode_$Impl_$ = {};
$hxClasses["openfl.ui._MultitouchInputMode.MultitouchInputMode_Impl_"] = openfl_ui__$MultitouchInputMode_MultitouchInputMode_$Impl_$;
openfl_ui__$MultitouchInputMode_MultitouchInputMode_$Impl_$.__name__ = "openfl.ui._MultitouchInputMode.MultitouchInputMode_Impl_";
openfl_ui__$MultitouchInputMode_MultitouchInputMode_$Impl_$.fromString = function(value) {
	switch(value) {
	case "gesture":
		return 0;
	case "none":
		return 1;
	case "touchPoint":
		return 2;
	default:
		return null;
	}
};
openfl_ui__$MultitouchInputMode_MultitouchInputMode_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 0:
		return "gesture";
	case 1:
		return "none";
	case 2:
		return "touchPoint";
	default:
		return null;
	}
};
var openfl_utils_AGALMiniAssembler = function(debugging) {
	if(debugging == null) {
		debugging = false;
	}
	this.debugEnabled = false;
	this.debugEnabled = debugging;
	if(!openfl_utils_AGALMiniAssembler.initialized) {
		openfl_utils_AGALMiniAssembler.init();
	}
};
$hxClasses["openfl.utils.AGALMiniAssembler"] = openfl_utils_AGALMiniAssembler;
openfl_utils_AGALMiniAssembler.__name__ = "openfl.utils.AGALMiniAssembler";
openfl_utils_AGALMiniAssembler.init = function() {
	openfl_utils_AGALMiniAssembler.initialized = true;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("mov",2,0,0);
	var _this = this1;
	if(__map_reserved["mov"] != null) {
		_this.setReserved("mov",v);
	} else {
		_this.h["mov"] = v;
	}
	var this2 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v1 = new openfl_utils__$AGALMiniAssembler_OpCode("add",3,1,0);
	var _this1 = this2;
	if(__map_reserved["add"] != null) {
		_this1.setReserved("add",v1);
	} else {
		_this1.h["add"] = v1;
	}
	var this3 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v2 = new openfl_utils__$AGALMiniAssembler_OpCode("sub",3,2,0);
	var _this2 = this3;
	if(__map_reserved["sub"] != null) {
		_this2.setReserved("sub",v2);
	} else {
		_this2.h["sub"] = v2;
	}
	var this4 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v3 = new openfl_utils__$AGALMiniAssembler_OpCode("mul",3,3,0);
	var _this3 = this4;
	if(__map_reserved["mul"] != null) {
		_this3.setReserved("mul",v3);
	} else {
		_this3.h["mul"] = v3;
	}
	var this5 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v4 = new openfl_utils__$AGALMiniAssembler_OpCode("div",3,4,0);
	var _this4 = this5;
	if(__map_reserved["div"] != null) {
		_this4.setReserved("div",v4);
	} else {
		_this4.h["div"] = v4;
	}
	var this6 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v5 = new openfl_utils__$AGALMiniAssembler_OpCode("rcp",2,5,0);
	var _this5 = this6;
	if(__map_reserved["rcp"] != null) {
		_this5.setReserved("rcp",v5);
	} else {
		_this5.h["rcp"] = v5;
	}
	var this7 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v6 = new openfl_utils__$AGALMiniAssembler_OpCode("min",3,6,0);
	var _this6 = this7;
	if(__map_reserved["min"] != null) {
		_this6.setReserved("min",v6);
	} else {
		_this6.h["min"] = v6;
	}
	var this8 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v7 = new openfl_utils__$AGALMiniAssembler_OpCode("max",3,7,0);
	var _this7 = this8;
	if(__map_reserved["max"] != null) {
		_this7.setReserved("max",v7);
	} else {
		_this7.h["max"] = v7;
	}
	var this9 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v8 = new openfl_utils__$AGALMiniAssembler_OpCode("frc",2,8,0);
	var _this8 = this9;
	if(__map_reserved["frc"] != null) {
		_this8.setReserved("frc",v8);
	} else {
		_this8.h["frc"] = v8;
	}
	var this10 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v9 = new openfl_utils__$AGALMiniAssembler_OpCode("sqt",2,9,0);
	var _this9 = this10;
	if(__map_reserved["sqt"] != null) {
		_this9.setReserved("sqt",v9);
	} else {
		_this9.h["sqt"] = v9;
	}
	var this11 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v10 = new openfl_utils__$AGALMiniAssembler_OpCode("rsq",2,10,0);
	var _this10 = this11;
	if(__map_reserved["rsq"] != null) {
		_this10.setReserved("rsq",v10);
	} else {
		_this10.h["rsq"] = v10;
	}
	var this12 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v11 = new openfl_utils__$AGALMiniAssembler_OpCode("pow",3,11,0);
	var _this11 = this12;
	if(__map_reserved["pow"] != null) {
		_this11.setReserved("pow",v11);
	} else {
		_this11.h["pow"] = v11;
	}
	var this13 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v12 = new openfl_utils__$AGALMiniAssembler_OpCode("log",2,12,0);
	var _this12 = this13;
	if(__map_reserved["log"] != null) {
		_this12.setReserved("log",v12);
	} else {
		_this12.h["log"] = v12;
	}
	var this14 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v13 = new openfl_utils__$AGALMiniAssembler_OpCode("exp",2,13,0);
	var _this13 = this14;
	if(__map_reserved["exp"] != null) {
		_this13.setReserved("exp",v13);
	} else {
		_this13.h["exp"] = v13;
	}
	var this15 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v14 = new openfl_utils__$AGALMiniAssembler_OpCode("nrm",2,14,0);
	var _this14 = this15;
	if(__map_reserved["nrm"] != null) {
		_this14.setReserved("nrm",v14);
	} else {
		_this14.h["nrm"] = v14;
	}
	var this16 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v15 = new openfl_utils__$AGALMiniAssembler_OpCode("sin",2,15,0);
	var _this15 = this16;
	if(__map_reserved["sin"] != null) {
		_this15.setReserved("sin",v15);
	} else {
		_this15.h["sin"] = v15;
	}
	var this17 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v16 = new openfl_utils__$AGALMiniAssembler_OpCode("cos",2,16,0);
	var _this16 = this17;
	if(__map_reserved["cos"] != null) {
		_this16.setReserved("cos",v16);
	} else {
		_this16.h["cos"] = v16;
	}
	var this18 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v17 = new openfl_utils__$AGALMiniAssembler_OpCode("crs",3,17,0);
	var _this17 = this18;
	if(__map_reserved["crs"] != null) {
		_this17.setReserved("crs",v17);
	} else {
		_this17.h["crs"] = v17;
	}
	var this19 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v18 = new openfl_utils__$AGALMiniAssembler_OpCode("dp3",3,18,0);
	var _this18 = this19;
	if(__map_reserved["dp3"] != null) {
		_this18.setReserved("dp3",v18);
	} else {
		_this18.h["dp3"] = v18;
	}
	var this20 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v19 = new openfl_utils__$AGALMiniAssembler_OpCode("dp4",3,19,0);
	var _this19 = this20;
	if(__map_reserved["dp4"] != null) {
		_this19.setReserved("dp4",v19);
	} else {
		_this19.h["dp4"] = v19;
	}
	var this21 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v20 = new openfl_utils__$AGALMiniAssembler_OpCode("abs",2,20,0);
	var _this20 = this21;
	if(__map_reserved["abs"] != null) {
		_this20.setReserved("abs",v20);
	} else {
		_this20.h["abs"] = v20;
	}
	var this22 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v21 = new openfl_utils__$AGALMiniAssembler_OpCode("neg",2,21,0);
	var _this21 = this22;
	if(__map_reserved["neg"] != null) {
		_this21.setReserved("neg",v21);
	} else {
		_this21.h["neg"] = v21;
	}
	var this23 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v22 = new openfl_utils__$AGALMiniAssembler_OpCode("sat",2,22,0);
	var _this22 = this23;
	if(__map_reserved["sat"] != null) {
		_this22.setReserved("sat",v22);
	} else {
		_this22.h["sat"] = v22;
	}
	var this24 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v23 = new openfl_utils__$AGALMiniAssembler_OpCode("m33",3,23,16);
	var _this23 = this24;
	if(__map_reserved["m33"] != null) {
		_this23.setReserved("m33",v23);
	} else {
		_this23.h["m33"] = v23;
	}
	var this25 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v24 = new openfl_utils__$AGALMiniAssembler_OpCode("m44",3,24,16);
	var _this24 = this25;
	if(__map_reserved["m44"] != null) {
		_this24.setReserved("m44",v24);
	} else {
		_this24.h["m44"] = v24;
	}
	var this26 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v25 = new openfl_utils__$AGALMiniAssembler_OpCode("m34",3,25,16);
	var _this25 = this26;
	if(__map_reserved["m34"] != null) {
		_this25.setReserved("m34",v25);
	} else {
		_this25.h["m34"] = v25;
	}
	var this27 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v26 = new openfl_utils__$AGALMiniAssembler_OpCode("ddx",2,26,288);
	var _this26 = this27;
	if(__map_reserved["ddx"] != null) {
		_this26.setReserved("ddx",v26);
	} else {
		_this26.h["ddx"] = v26;
	}
	var this28 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v27 = new openfl_utils__$AGALMiniAssembler_OpCode("ddy",2,27,288);
	var _this27 = this28;
	if(__map_reserved["ddy"] != null) {
		_this27.setReserved("ddy",v27);
	} else {
		_this27.h["ddy"] = v27;
	}
	var this29 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v28 = new openfl_utils__$AGALMiniAssembler_OpCode("ife",2,28,897);
	var _this28 = this29;
	if(__map_reserved["ife"] != null) {
		_this28.setReserved("ife",v28);
	} else {
		_this28.h["ife"] = v28;
	}
	var this30 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v29 = new openfl_utils__$AGALMiniAssembler_OpCode("ine",2,29,897);
	var _this29 = this30;
	if(__map_reserved["ine"] != null) {
		_this29.setReserved("ine",v29);
	} else {
		_this29.h["ine"] = v29;
	}
	var this31 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v30 = new openfl_utils__$AGALMiniAssembler_OpCode("ifg",2,30,897);
	var _this30 = this31;
	if(__map_reserved["ifg"] != null) {
		_this30.setReserved("ifg",v30);
	} else {
		_this30.h["ifg"] = v30;
	}
	var this32 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v31 = new openfl_utils__$AGALMiniAssembler_OpCode("ifl",2,31,897);
	var _this31 = this32;
	if(__map_reserved["ifl"] != null) {
		_this31.setReserved("ifl",v31);
	} else {
		_this31.h["ifl"] = v31;
	}
	var this33 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v32 = new openfl_utils__$AGALMiniAssembler_OpCode("els",0,32,1921);
	var _this32 = this33;
	if(__map_reserved["els"] != null) {
		_this32.setReserved("els",v32);
	} else {
		_this32.h["els"] = v32;
	}
	var this34 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v33 = new openfl_utils__$AGALMiniAssembler_OpCode("eif",0,33,1409);
	var _this33 = this34;
	if(__map_reserved["eif"] != null) {
		_this33.setReserved("eif",v33);
	} else {
		_this33.h["eif"] = v33;
	}
	var this35 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v34 = new openfl_utils__$AGALMiniAssembler_OpCode("kil",1,39,160);
	var _this34 = this35;
	if(__map_reserved["kil"] != null) {
		_this34.setReserved("kil",v34);
	} else {
		_this34.h["kil"] = v34;
	}
	var this36 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v35 = new openfl_utils__$AGALMiniAssembler_OpCode("tex",3,40,40);
	var _this35 = this36;
	if(__map_reserved["tex"] != null) {
		_this35.setReserved("tex",v35);
	} else {
		_this35.h["tex"] = v35;
	}
	var this37 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v36 = new openfl_utils__$AGALMiniAssembler_OpCode("sge",3,41,0);
	var _this36 = this37;
	if(__map_reserved["sge"] != null) {
		_this36.setReserved("sge",v36);
	} else {
		_this36.h["sge"] = v36;
	}
	var this38 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v37 = new openfl_utils__$AGALMiniAssembler_OpCode("slt",3,42,0);
	var _this37 = this38;
	if(__map_reserved["slt"] != null) {
		_this37.setReserved("slt",v37);
	} else {
		_this37.h["slt"] = v37;
	}
	var this39 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v38 = new openfl_utils__$AGALMiniAssembler_OpCode("sgn",2,43,0);
	var _this38 = this39;
	if(__map_reserved["sgn"] != null) {
		_this38.setReserved("sgn",v38);
	} else {
		_this38.h["sgn"] = v38;
	}
	var this40 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v39 = new openfl_utils__$AGALMiniAssembler_OpCode("seq",3,44,0);
	var _this39 = this40;
	if(__map_reserved["seq"] != null) {
		_this39.setReserved("seq",v39);
	} else {
		_this39.h["seq"] = v39;
	}
	var this41 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v40 = new openfl_utils__$AGALMiniAssembler_OpCode("sne",3,45,0);
	var _this40 = this41;
	if(__map_reserved["sne"] != null) {
		_this40.setReserved("sne",v40);
	} else {
		_this40.h["sne"] = v40;
	}
	var this42 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v41 = new openfl_utils__$AGALMiniAssembler_Sampler("rgba",8,0);
	var _this41 = this42;
	if(__map_reserved["rgba"] != null) {
		_this41.setReserved("rgba",v41);
	} else {
		_this41.h["rgba"] = v41;
	}
	var this43 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v42 = new openfl_utils__$AGALMiniAssembler_Sampler("compressed",8,1);
	var _this42 = this43;
	if(__map_reserved["compressed"] != null) {
		_this42.setReserved("compressed",v42);
	} else {
		_this42.h["compressed"] = v42;
	}
	var this44 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v43 = new openfl_utils__$AGALMiniAssembler_Sampler("compressedalpha",8,2);
	var _this43 = this44;
	if(__map_reserved["compressedalpha"] != null) {
		_this43.setReserved("compressedalpha",v43);
	} else {
		_this43.h["compressedalpha"] = v43;
	}
	var this45 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v44 = new openfl_utils__$AGALMiniAssembler_Sampler("dxt1",8,1);
	var _this44 = this45;
	if(__map_reserved["dxt1"] != null) {
		_this44.setReserved("dxt1",v44);
	} else {
		_this44.h["dxt1"] = v44;
	}
	var this46 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v45 = new openfl_utils__$AGALMiniAssembler_Sampler("dxt5",8,2);
	var _this45 = this46;
	if(__map_reserved["dxt5"] != null) {
		_this45.setReserved("dxt5",v45);
	} else {
		_this45.h["dxt5"] = v45;
	}
	var this47 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v46 = new openfl_utils__$AGALMiniAssembler_Sampler("video",8,3);
	var _this46 = this47;
	if(__map_reserved["video"] != null) {
		_this46.setReserved("video",v46);
	} else {
		_this46.h["video"] = v46;
	}
	var this48 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v47 = new openfl_utils__$AGALMiniAssembler_Sampler("2d",12,0);
	var _this47 = this48;
	if(__map_reserved["2d"] != null) {
		_this47.setReserved("2d",v47);
	} else {
		_this47.h["2d"] = v47;
	}
	var this49 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v48 = new openfl_utils__$AGALMiniAssembler_Sampler("3d",12,2);
	var _this48 = this49;
	if(__map_reserved["3d"] != null) {
		_this48.setReserved("3d",v48);
	} else {
		_this48.h["3d"] = v48;
	}
	var this50 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v49 = new openfl_utils__$AGALMiniAssembler_Sampler("cube",12,1);
	var _this49 = this50;
	if(__map_reserved["cube"] != null) {
		_this49.setReserved("cube",v49);
	} else {
		_this49.h["cube"] = v49;
	}
	var this51 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v50 = new openfl_utils__$AGALMiniAssembler_Sampler("mipnearest",24,1);
	var _this50 = this51;
	if(__map_reserved["mipnearest"] != null) {
		_this50.setReserved("mipnearest",v50);
	} else {
		_this50.h["mipnearest"] = v50;
	}
	var this52 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v51 = new openfl_utils__$AGALMiniAssembler_Sampler("miplinear",24,2);
	var _this51 = this52;
	if(__map_reserved["miplinear"] != null) {
		_this51.setReserved("miplinear",v51);
	} else {
		_this51.h["miplinear"] = v51;
	}
	var this53 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v52 = new openfl_utils__$AGALMiniAssembler_Sampler("mipnone",24,0);
	var _this52 = this53;
	if(__map_reserved["mipnone"] != null) {
		_this52.setReserved("mipnone",v52);
	} else {
		_this52.h["mipnone"] = v52;
	}
	var this54 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v53 = new openfl_utils__$AGALMiniAssembler_Sampler("nomip",24,0);
	var _this53 = this54;
	if(__map_reserved["nomip"] != null) {
		_this53.setReserved("nomip",v53);
	} else {
		_this53.h["nomip"] = v53;
	}
	var this55 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v54 = new openfl_utils__$AGALMiniAssembler_Sampler("nearest",28,0);
	var _this54 = this55;
	if(__map_reserved["nearest"] != null) {
		_this54.setReserved("nearest",v54);
	} else {
		_this54.h["nearest"] = v54;
	}
	var this56 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v55 = new openfl_utils__$AGALMiniAssembler_Sampler("linear",28,1);
	var _this55 = this56;
	if(__map_reserved["linear"] != null) {
		_this55.setReserved("linear",v55);
	} else {
		_this55.h["linear"] = v55;
	}
	var this57 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v56 = new openfl_utils__$AGALMiniAssembler_Sampler("anisotropic2x",28,2);
	var _this56 = this57;
	if(__map_reserved["anisotropic2x"] != null) {
		_this56.setReserved("anisotropic2x",v56);
	} else {
		_this56.h["anisotropic2x"] = v56;
	}
	var this58 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v57 = new openfl_utils__$AGALMiniAssembler_Sampler("anisotropic4x",28,3);
	var _this57 = this58;
	if(__map_reserved["anisotropic4x"] != null) {
		_this57.setReserved("anisotropic4x",v57);
	} else {
		_this57.h["anisotropic4x"] = v57;
	}
	var this59 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v58 = new openfl_utils__$AGALMiniAssembler_Sampler("anisotropic8x",28,4);
	var _this58 = this59;
	if(__map_reserved["anisotropic8x"] != null) {
		_this58.setReserved("anisotropic8x",v58);
	} else {
		_this58.h["anisotropic8x"] = v58;
	}
	var this60 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v59 = new openfl_utils__$AGALMiniAssembler_Sampler("anisotropic16x",28,5);
	var _this59 = this60;
	if(__map_reserved["anisotropic16x"] != null) {
		_this59.setReserved("anisotropic16x",v59);
	} else {
		_this59.h["anisotropic16x"] = v59;
	}
	var this61 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v60 = new openfl_utils__$AGALMiniAssembler_Sampler("centroid",16,1);
	var _this60 = this61;
	if(__map_reserved["centroid"] != null) {
		_this60.setReserved("centroid",v60);
	} else {
		_this60.h["centroid"] = v60;
	}
	var this62 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v61 = new openfl_utils__$AGALMiniAssembler_Sampler("single",16,2);
	var _this61 = this62;
	if(__map_reserved["single"] != null) {
		_this61.setReserved("single",v61);
	} else {
		_this61.h["single"] = v61;
	}
	var this63 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v62 = new openfl_utils__$AGALMiniAssembler_Sampler("ignoresampler",16,4);
	var _this62 = this63;
	if(__map_reserved["ignoresampler"] != null) {
		_this62.setReserved("ignoresampler",v62);
	} else {
		_this62.h["ignoresampler"] = v62;
	}
	var this64 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v63 = new openfl_utils__$AGALMiniAssembler_Sampler("repeat",20,1);
	var _this63 = this64;
	if(__map_reserved["repeat"] != null) {
		_this63.setReserved("repeat",v63);
	} else {
		_this63.h["repeat"] = v63;
	}
	var this65 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v64 = new openfl_utils__$AGALMiniAssembler_Sampler("wrap",20,1);
	var _this64 = this65;
	if(__map_reserved["wrap"] != null) {
		_this64.setReserved("wrap",v64);
	} else {
		_this64.h["wrap"] = v64;
	}
	var this66 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v65 = new openfl_utils__$AGALMiniAssembler_Sampler("clamp",20,0);
	var _this65 = this66;
	if(__map_reserved["clamp"] != null) {
		_this65.setReserved("clamp",v65);
	} else {
		_this65.h["clamp"] = v65;
	}
	var this67 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v66 = new openfl_utils__$AGALMiniAssembler_Sampler("clamp_u_repeat_v",20,2);
	var _this66 = this67;
	if(__map_reserved["clamp_u_repeat_v"] != null) {
		_this66.setReserved("clamp_u_repeat_v",v66);
	} else {
		_this66.h["clamp_u_repeat_v"] = v66;
	}
	var this68 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v67 = new openfl_utils__$AGALMiniAssembler_Sampler("repeat_u_clamp_v",20,3);
	var _this67 = this68;
	if(__map_reserved["repeat_u_clamp_v"] != null) {
		_this67.setReserved("repeat_u_clamp_v",v67);
	} else {
		_this67.h["repeat_u_clamp_v"] = v67;
	}
};
openfl_utils_AGALMiniAssembler.prototype = {
	agalcode: null
	,error: null
	,verbose: null
	,debugEnabled: null
	,assemble2: function(context3D,version,vertexSource,fragmentSource) {
		var agalVertex = this.assemble("vertex",vertexSource,version);
		var agalFragment = this.assemble("fragment",fragmentSource,version);
		var program = context3D.createProgram();
		program.upload(agalVertex,agalFragment);
		return program;
	}
	,assemble: function(mode,source,version,ignoreLimits) {
		if(ignoreLimits == null) {
			ignoreLimits = false;
		}
		if(version == null) {
			version = 1;
		}
		var start = openfl_Lib.getTimer();
		var this1 = new openfl_utils_ByteArrayData(0);
		this.agalcode = this1;
		this.error = "";
		var isFrag = false;
		if(mode == "fragment") {
			isFrag = true;
		} else if(mode != "vertex") {
			this.error = "ERROR: mode needs to be \"" + "fragment" + "\" or \"" + "vertex" + "\" but is \"" + mode + "\".";
		}
		this.agalcode.__endian = 1;
		this.agalcode.writeByte(160);
		this.agalcode.writeUnsignedInt(version);
		this.agalcode.writeByte(161);
		this.agalcode.writeByte(isFrag ? 1 : 0);
		this.initregmap(version,ignoreLimits);
		var lines = StringTools.replace(source,"\r","\n").split("\n");
		var nest = 0;
		var nops = 0;
		var lng = lines.length;
		var reg1 = new EReg("<.*>","g");
		var reg2 = new EReg("([\\w\\.\\-\\+]+)","gi");
		var reg3 = new EReg("^\\w{3}","ig");
		var reg4 = new EReg("vc\\[([vofi][acostdip]?[d]?)(\\d*)?(\\.[xyzw](\\+\\d{1,3})?)?\\](\\.[xyzw]{1,4})?|([vofi][acostdip]?[d]?)(\\d*)?(\\.[xyzw]{1,4})?","gi");
		var reg5 = new EReg("\\[.*\\]","ig");
		var reg6 = new EReg("^\\b[A-Za-z]{1,3}","ig");
		var reg7 = new EReg("\\d+","");
		var reg8 = new EReg("(\\.[xyzw]{1,4})","");
		var reg9 = new EReg("[A-Za-z]{1,3}","ig");
		var reg10 = new EReg("(\\.[xyzw]{1,1})","");
		var reg11 = new EReg("\\+\\d{1,3}","ig");
		var i = 0;
		while(i < lng && this.error == "") {
			var line = StringTools.trim(lines[i]);
			var startcomment = line.indexOf("//");
			if(startcomment != -1) {
				line = HxOverrides.substr(line,0,startcomment);
			}
			var optsi = reg1.match(line) ? reg1.matchedPos().pos : -1;
			var opts = null;
			if(optsi != -1) {
				opts = this.match(HxOverrides.substr(line,optsi,null),reg2);
				line = HxOverrides.substr(line,0,optsi);
			}
			var opCode = null;
			var opFound = null;
			if(reg3.match(line)) {
				opCode = reg3.matched(0);
				var _this = openfl_utils_AGALMiniAssembler.OPMAP;
				opFound = __map_reserved[opCode] != null ? _this.getReserved(opCode) : _this.h[opCode];
			}
			if(opFound == null) {
				if(line.length >= 3) {
					haxe_Log.trace("warning: bad line " + i + ": " + lines[i],{ fileName : "openfl/utils/AGALMiniAssembler.hx", lineNumber : 243, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
				}
				++i;
				continue;
			}
			if(this.debugEnabled) {
				haxe_Log.trace(opFound,{ fileName : "openfl/utils/AGALMiniAssembler.hx", lineNumber : 252, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
			}
			if(opFound == null) {
				if(line.length >= 3) {
					haxe_Log.trace("warning: bad line " + i + ": " + lines[i],{ fileName : "openfl/utils/AGALMiniAssembler.hx", lineNumber : 257, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
				}
				++i;
				continue;
			}
			line = HxOverrides.substr(line,line.indexOf(opFound.name) + opFound.name.length,null);
			if((opFound.flags & 256) != 0 && version < 2) {
				this.error = "error: opcode requires version 2.";
				break;
			}
			if((opFound.flags & 64) != 0 && isFrag) {
				this.error = "error: opcode is only allowed in vertex programs.";
				break;
			}
			if((opFound.flags & 32) != 0 && !isFrag) {
				this.error = "error: opcode is only allowed in fragment programs.";
				break;
			}
			if(this.verbose) {
				haxe_Log.trace("emit opcode=" + Std.string(opFound),{ fileName : "openfl/utils/AGALMiniAssembler.hx", lineNumber : 282, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
			}
			this.agalcode.writeUnsignedInt(opFound.emitCode);
			++nops;
			if(nops > 4096) {
				this.error = "error: too many opcodes. maximum is " + 4096 + ".";
				break;
			}
			var regs = this.match(line,reg4);
			if(regs.length != opFound.numRegister) {
				this.error = "error: wrong number of operands. found " + regs.length + " but expected " + opFound.numRegister + ".";
				break;
			}
			var badreg = false;
			var pad = 160;
			var regLength = regs.length;
			var _g = 0;
			var _g1 = regLength;
			while(_g < _g1) {
				var j = _g++;
				var isRelative = false;
				var relreg = this.match(regs[j],reg5);
				if(relreg.length > 0) {
					regs[j] = StringTools.replace(regs[j],relreg[0],"0");
					if(this.verbose) {
						haxe_Log.trace("IS REL",{ fileName : "openfl/utils/AGALMiniAssembler.hx", lineNumber : 313, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
					}
					isRelative = true;
				}
				var res = this.match(regs[j],reg6);
				if(res.length == 0) {
					this.error = "error: could not parse operand " + j + " (" + regs[j] + ").";
					badreg = true;
					break;
				}
				var _this1 = openfl_utils_AGALMiniAssembler.REGMAP;
				var key = res[0];
				var regFound = __map_reserved[key] != null ? _this1.getReserved(key) : _this1.h[key];
				if(this.debugEnabled) {
					haxe_Log.trace(regFound,{ fileName : "openfl/utils/AGALMiniAssembler.hx", lineNumber : 330, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
				}
				if(regFound == null) {
					this.error = "error: could not find register name for operand " + j + " (" + regs[j] + ").";
					badreg = true;
					break;
				}
				if(isFrag) {
					if((regFound.flags & 32) == 0) {
						this.error = "error: register operand " + j + " (" + regs[j] + ") only allowed in vertex programs.";
						badreg = true;
						break;
					}
					if(isRelative) {
						this.error = "error: register operand " + j + " (" + regs[j] + ") relative adressing not allowed in fragment programs.";
						badreg = true;
						break;
					}
				} else if((regFound.flags & 64) == 0) {
					this.error = "error: register operand " + j + " (" + regs[j] + ") only allowed in fragment programs.";
					badreg = true;
					break;
				}
				regs[j] = HxOverrides.substr(regs[j],regs[j].indexOf(regFound.name) + regFound.name.length,null);
				var idxmatch = isRelative ? this.match(relreg[0],reg7) : this.match(regs[j],reg7);
				var regidx = 0;
				if(idxmatch.length > 0) {
					regidx = Std.parseInt(idxmatch[0]);
				}
				if(_$UInt_UInt_$Impl_$.gt(regidx,regFound.range)) {
					this.error = "error: register operand " + j + " (" + regs[j] + ") index exceeds limit of " + Std.string(_$UInt_UInt_$Impl_$.toFloat(regFound.range + 1)) + ".";
					badreg = true;
					break;
				}
				var regmask = 0;
				var maskmatch = this.match(regs[j],reg8);
				var isDest = j == 0 && (opFound.flags & 128) == 0;
				var isSampler = j == 2 && (opFound.flags & 8) != 0;
				var reltype = 0;
				var relsel = 0;
				var reloffset = 0;
				if(isDest && isRelative) {
					this.error = "error: relative can not be destination";
					badreg = true;
					break;
				}
				if(maskmatch.length > 0) {
					regmask = 0;
					var cv = 0;
					var maskLength = maskmatch[0].length;
					var k = 1;
					while(k < maskLength) {
						cv = HxOverrides.cca(maskmatch[0],k) - 120;
						if(_$UInt_UInt_$Impl_$.gt(cv,2)) {
							cv = 3;
						}
						if(isDest) {
							regmask |= 1 << cv;
						} else {
							regmask = regmask | cv << (k - 1 << 1);
						}
						++k;
					}
					if(!isDest) {
						while(k <= 4) {
							regmask = regmask | cv << (k - 1 << 1);
							++k;
						}
					}
				} else {
					regmask = isDest ? 15 : 228;
				}
				if(isRelative) {
					var relname = this.match(relreg[0],reg9);
					var _this2 = openfl_utils_AGALMiniAssembler.REGMAP;
					var key1 = relname[0];
					var regFoundRel = __map_reserved[key1] != null ? _this2.getReserved(key1) : _this2.h[key1];
					if(regFoundRel == null) {
						this.error = "error: bad index register";
						badreg = true;
						break;
					}
					reltype = regFoundRel.emitCode;
					var selmatch = this.match(relreg[0],reg10);
					if(selmatch.length == 0) {
						this.error = "error: bad index register select";
						badreg = true;
						break;
					}
					relsel = HxOverrides.cca(selmatch[0],1) - 120;
					if(_$UInt_UInt_$Impl_$.gt(relsel,2)) {
						relsel = 3;
					}
					var relofs = this.match(relreg[0],reg11);
					if(relofs.length > 0) {
						reloffset = Std.parseInt(relofs[0]);
					}
					if(reloffset < 0 || reloffset > 255) {
						this.error = "error: index offset " + reloffset + " out of bounds. [0..255]";
						badreg = true;
						break;
					}
					if(this.verbose) {
						haxe_Log.trace("RELATIVE: type=" + reltype + "==" + relname[0] + " sel=" + Std.string(_$UInt_UInt_$Impl_$.toFloat(relsel)) + "==" + selmatch[0] + " idx=" + Std.string(_$UInt_UInt_$Impl_$.toFloat(regidx)) + " offset=" + reloffset,{ fileName : "openfl/utils/AGALMiniAssembler.hx", lineNumber : 458, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
					}
				}
				if(this.verbose) {
					haxe_Log.trace("  emit argcode=" + Std.string(regFound) + "[" + Std.string(_$UInt_UInt_$Impl_$.toFloat(regidx)) + "][" + regmask + "]",{ fileName : "openfl/utils/AGALMiniAssembler.hx", lineNumber : 464, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
				}
				if(isDest) {
					this.agalcode.writeShort(regidx);
					this.agalcode.writeByte(regmask);
					this.agalcode.writeByte(regFound.emitCode);
					pad -= 32;
				} else if(isSampler) {
					if(this.verbose) {
						haxe_Log.trace("  emit sampler",{ fileName : "openfl/utils/AGALMiniAssembler.hx", lineNumber : 475, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
					}
					var samplerbits = 5;
					var optsLength = opts == null ? 0 : opts.length;
					var bias = 0.0;
					var _g2 = 0;
					var _g11 = optsLength;
					while(_g2 < _g11) {
						var k1 = _g2++;
						if(this.verbose) {
							haxe_Log.trace("    opt: " + opts[k1],{ fileName : "openfl/utils/AGALMiniAssembler.hx", lineNumber : 484, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
						}
						var _this3 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
						var key2 = opts[k1];
						var optfound = __map_reserved[key2] != null ? _this3.getReserved(key2) : _this3.h[key2];
						if(optfound == null) {
							bias = parseFloat(opts[k1]);
							if(this.verbose) {
								haxe_Log.trace("    bias: " + bias,{ fileName : "openfl/utils/AGALMiniAssembler.hx", lineNumber : 495, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
							}
						} else {
							if(optfound.flag != 16) {
								samplerbits &= ~(15 << optfound.flag);
							}
							samplerbits = samplerbits | optfound.mask << optfound.flag;
						}
					}
					this.agalcode.writeShort(regidx);
					this.agalcode.writeByte(bias * 8.0 | 0);
					this.agalcode.writeByte(0);
					this.agalcode.writeUnsignedInt(samplerbits);
					if(this.verbose) {
						haxe_Log.trace("    bits: " + (samplerbits - 5),{ fileName : "openfl/utils/AGALMiniAssembler.hx", lineNumber : 512, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
					}
					pad -= 64;
				} else {
					if(j == 0) {
						this.agalcode.writeUnsignedInt(0);
						pad -= 32;
					}
					this.agalcode.writeShort(regidx);
					this.agalcode.writeByte(reloffset);
					this.agalcode.writeByte(regmask);
					this.agalcode.writeByte(regFound.emitCode);
					this.agalcode.writeByte(reltype);
					this.agalcode.writeShort(isRelative ? relsel | 32768 : 0);
					pad -= 64;
				}
			}
			var j1 = 0;
			while(j1 < pad) {
				this.agalcode.writeByte(0);
				j1 += 8;
			}
			if(badreg) {
				break;
			}
			++i;
		}
		if(this.error != "") {
			this.error += "\n  at line " + i + " " + lines[i];
			openfl_utils__$ByteArray_ByteArray_$Impl_$.set_length(this.agalcode,0);
			haxe_Log.trace(this.error,{ fileName : "openfl/utils/AGALMiniAssembler.hx", lineNumber : 551, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
		}
		if(this.debugEnabled) {
			var dbgLine = "generated bytecode:";
			var agalLength = this.agalcode.length;
			var _g3 = 0;
			var _g12 = agalLength;
			while(_g3 < _g12) {
				var index = _g3++;
				if(index % 16 == 0) {
					dbgLine += "\n";
				}
				if(index % 4 == 0) {
					dbgLine += " ";
				}
				var byteStr = StringTools.hex(this.agalcode.b[index],2);
				if(byteStr.length < 2) {
					byteStr = "0" + byteStr;
				}
				dbgLine += byteStr;
			}
			haxe_Log.trace(dbgLine,{ fileName : "openfl/utils/AGALMiniAssembler.hx", lineNumber : 577, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
		}
		if(this.verbose) {
			haxe_Log.trace("AGALMiniAssembler.assemble time: " + (openfl_Lib.getTimer() - start) / 1000 + "s",{ fileName : "openfl/utils/AGALMiniAssembler.hx", lineNumber : 581, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
		}
		return this.agalcode;
	}
	,initregmap: function(version,ignorelimits) {
		var this1 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v = new openfl_utils__$AGALMiniAssembler_Register("va","vertex attribute",0,ignorelimits ? 1024 : version == 1 || version == 2 ? 7 : 15,66);
		var _this = this1;
		if(__map_reserved["va"] != null) {
			_this.setReserved("va",v);
		} else {
			_this.h["va"] = v;
		}
		var this2 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v1 = new openfl_utils__$AGALMiniAssembler_Register("vc","vertex constant",1,ignorelimits ? 1024 : version == 1 ? 127 : 249,66);
		var _this1 = this2;
		if(__map_reserved["vc"] != null) {
			_this1.setReserved("vc",v1);
		} else {
			_this1.h["vc"] = v1;
		}
		var this3 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v2 = new openfl_utils__$AGALMiniAssembler_Register("vt","vertex temporary",2,ignorelimits ? 1024 : version == 1 ? 7 : 25,67);
		var _this2 = this3;
		if(__map_reserved["vt"] != null) {
			_this2.setReserved("vt",v2);
		} else {
			_this2.h["vt"] = v2;
		}
		var this4 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v3 = new openfl_utils__$AGALMiniAssembler_Register("vo","vertex output",3,ignorelimits ? 1024 : 0,65);
		var _this3 = this4;
		if(__map_reserved["vo"] != null) {
			_this3.setReserved("vo",v3);
		} else {
			_this3.h["vo"] = v3;
		}
		var this5 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v4 = new openfl_utils__$AGALMiniAssembler_Register("vi","varying",4,ignorelimits ? 1024 : version == 1 ? 7 : 9,99);
		var _this4 = this5;
		if(__map_reserved["vi"] != null) {
			_this4.setReserved("vi",v4);
		} else {
			_this4.h["vi"] = v4;
		}
		var this6 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v5 = new openfl_utils__$AGALMiniAssembler_Register("fc","fragment constant",1,ignorelimits ? 1024 : version == 1 ? 27 : version == 2 ? 63 : 199,34);
		var _this5 = this6;
		if(__map_reserved["fc"] != null) {
			_this5.setReserved("fc",v5);
		} else {
			_this5.h["fc"] = v5;
		}
		var this7 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v6 = new openfl_utils__$AGALMiniAssembler_Register("ft","fragment temporary",2,ignorelimits ? 1024 : version == 1 ? 7 : 25,35);
		var _this6 = this7;
		if(__map_reserved["ft"] != null) {
			_this6.setReserved("ft",v6);
		} else {
			_this6.h["ft"] = v6;
		}
		var this8 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v7 = new openfl_utils__$AGALMiniAssembler_Register("fs","texture sampler",5,ignorelimits ? 1024 : 7,34);
		var _this7 = this8;
		if(__map_reserved["fs"] != null) {
			_this7.setReserved("fs",v7);
		} else {
			_this7.h["fs"] = v7;
		}
		var this9 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v8 = new openfl_utils__$AGALMiniAssembler_Register("fo","fragment output",3,ignorelimits ? 1024 : version == 1 ? 0 : 3,33);
		var _this8 = this9;
		if(__map_reserved["fo"] != null) {
			_this8.setReserved("fo",v8);
		} else {
			_this8.h["fo"] = v8;
		}
		var this10 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v9 = new openfl_utils__$AGALMiniAssembler_Register("fd","fragment depth output",6,ignorelimits ? 1024 : version == 1 ? -1 : 0,33);
		var _this9 = this10;
		if(__map_reserved["fd"] != null) {
			_this9.setReserved("fd",v9);
		} else {
			_this9.h["fd"] = v9;
		}
		var this11 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v10 = new openfl_utils__$AGALMiniAssembler_Register("iid","instance id",7,ignorelimits ? 1024 : 0,66);
		var _this10 = this11;
		if(__map_reserved["iid"] != null) {
			_this10.setReserved("iid",v10);
		} else {
			_this10.h["iid"] = v10;
		}
		var this12 = openfl_utils_AGALMiniAssembler.REGMAP;
		var _this11 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v11 = __map_reserved["vo"] != null ? _this11.getReserved("vo") : _this11.h["vo"];
		var _this12 = this12;
		if(__map_reserved["op"] != null) {
			_this12.setReserved("op",v11);
		} else {
			_this12.h["op"] = v11;
		}
		var this13 = openfl_utils_AGALMiniAssembler.REGMAP;
		var _this13 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v12 = __map_reserved["vi"] != null ? _this13.getReserved("vi") : _this13.h["vi"];
		var _this14 = this13;
		if(__map_reserved["i"] != null) {
			_this14.setReserved("i",v12);
		} else {
			_this14.h["i"] = v12;
		}
		var this14 = openfl_utils_AGALMiniAssembler.REGMAP;
		var _this15 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v13 = __map_reserved["vi"] != null ? _this15.getReserved("vi") : _this15.h["vi"];
		var _this16 = this14;
		if(__map_reserved["v"] != null) {
			_this16.setReserved("v",v13);
		} else {
			_this16.h["v"] = v13;
		}
		var this15 = openfl_utils_AGALMiniAssembler.REGMAP;
		var _this17 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v14 = __map_reserved["fo"] != null ? _this17.getReserved("fo") : _this17.h["fo"];
		var _this18 = this15;
		if(__map_reserved["oc"] != null) {
			_this18.setReserved("oc",v14);
		} else {
			_this18.h["oc"] = v14;
		}
		var this16 = openfl_utils_AGALMiniAssembler.REGMAP;
		var _this19 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v15 = __map_reserved["fd"] != null ? _this19.getReserved("fd") : _this19.h["fd"];
		var _this20 = this16;
		if(__map_reserved["od"] != null) {
			_this20.setReserved("od",v15);
		} else {
			_this20.h["od"] = v15;
		}
		var this17 = openfl_utils_AGALMiniAssembler.REGMAP;
		var _this21 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v16 = __map_reserved["vi"] != null ? _this21.getReserved("vi") : _this21.h["vi"];
		var _this22 = this17;
		if(__map_reserved["fi"] != null) {
			_this22.setReserved("fi",v16);
		} else {
			_this22.h["fi"] = v16;
		}
	}
	,match: function(value,reg) {
		var matches = [];
		var index = 0;
		var match;
		while(reg.matchSub(value,index)) {
			match = reg.matched(0);
			matches.push(match);
			index = reg.matchedPos().pos + match.length;
		}
		return matches;
	}
	,__class__: openfl_utils_AGALMiniAssembler
};
var openfl_utils__$AGALMiniAssembler_OpCode = function(name,numRegister,emitCode,flags) {
	this.name = name;
	this.numRegister = numRegister;
	this.emitCode = emitCode;
	this.flags = flags;
};
$hxClasses["openfl.utils._AGALMiniAssembler.OpCode"] = openfl_utils__$AGALMiniAssembler_OpCode;
openfl_utils__$AGALMiniAssembler_OpCode.__name__ = "openfl.utils._AGALMiniAssembler.OpCode";
openfl_utils__$AGALMiniAssembler_OpCode.prototype = {
	emitCode: null
	,flags: null
	,name: null
	,numRegister: null
	,toString: function() {
		return "[OpCode name=\"" + this.name + "\", numRegister=" + this.numRegister + ", emitCode=" + this.emitCode + ", flags=" + this.flags + "]";
	}
	,__class__: openfl_utils__$AGALMiniAssembler_OpCode
};
var openfl_utils__$AGALMiniAssembler_Register = function(name,longName,emitCode,range,flags) {
	this.name = name;
	this.longName = longName;
	this.emitCode = emitCode;
	this.range = range;
	this.flags = flags;
};
$hxClasses["openfl.utils._AGALMiniAssembler.Register"] = openfl_utils__$AGALMiniAssembler_Register;
openfl_utils__$AGALMiniAssembler_Register.__name__ = "openfl.utils._AGALMiniAssembler.Register";
openfl_utils__$AGALMiniAssembler_Register.prototype = {
	emitCode: null
	,name: null
	,longName: null
	,flags: null
	,range: null
	,toString: function() {
		return "[Register name=\"" + this.name + "\", longName=\"" + this.longName + "\", emitCode=" + Std.string(_$UInt_UInt_$Impl_$.toFloat(this.emitCode)) + ", range=" + Std.string(_$UInt_UInt_$Impl_$.toFloat(this.range)) + ", flags=" + Std.string(_$UInt_UInt_$Impl_$.toFloat(this.flags)) + "]";
	}
	,__class__: openfl_utils__$AGALMiniAssembler_Register
};
var openfl_utils__$AGALMiniAssembler_Sampler = function(name,flag,mask) {
	this.name = name;
	this.flag = flag;
	this.mask = mask;
};
$hxClasses["openfl.utils._AGALMiniAssembler.Sampler"] = openfl_utils__$AGALMiniAssembler_Sampler;
openfl_utils__$AGALMiniAssembler_Sampler.__name__ = "openfl.utils._AGALMiniAssembler.Sampler";
openfl_utils__$AGALMiniAssembler_Sampler.prototype = {
	flag: null
	,mask: null
	,name: null
	,toString: function() {
		return "[Sampler name=\"" + this.name + "\", flag=\"" + Std.string(_$UInt_UInt_$Impl_$.toFloat(this.flag)) + "\", mask=" + Std.string(_$UInt_UInt_$Impl_$.toFloat(this.mask)) + "]";
	}
	,__class__: openfl_utils__$AGALMiniAssembler_Sampler
};
var openfl_utils__$ByteArray_ByteArray_$Impl_$ = {};
$hxClasses["openfl.utils._ByteArray.ByteArray_Impl_"] = openfl_utils__$ByteArray_ByteArray_$Impl_$;
openfl_utils__$ByteArray_ByteArray_$Impl_$.__name__ = "openfl.utils._ByteArray.ByteArray_Impl_";
openfl_utils__$ByteArray_ByteArray_$Impl_$.__properties__ = {set_length:"set_length",get_length:"get_length"};
openfl_utils__$ByteArray_ByteArray_$Impl_$._new = function(length) {
	if(length == null) {
		length = 0;
	}
	var this1 = new openfl_utils_ByteArrayData(length);
	return this1;
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.get = function(this1,index) {
	return this1.b[index];
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.set = function(this1,index,value) {
	this1.__resize(index + 1);
	this1.b[index] = value;
	return value;
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes = function(bytes) {
	if(bytes == null) {
		return null;
	}
	if(((bytes) instanceof openfl_utils_ByteArrayData)) {
		return bytes;
	} else {
		return openfl_utils_ByteArrayData.fromBytes(bytes);
	}
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytesData = function(bytesData) {
	if(bytesData == null) {
		return null;
	}
	return openfl_utils_ByteArrayData.fromBytes(haxe_io_Bytes.ofData(bytesData));
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes = function(this1) {
	return this1;
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytesData = function(this1) {
	return this1.b.bufferValue;
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length = function(this1) {
	return this1.length;
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.set_length = function(this1,value) {
	if(value > 0) {
		this1.__resize(value);
		if(value < this1.position) {
			this1.position = value;
		}
	}
	this1.length = value;
	return value;
};
var openfl_utils_ByteArrayData = function(length) {
	if(length == null) {
		length = 0;
	}
	var bytes = new haxe_io_Bytes(new ArrayBuffer(length));
	haxe_io_Bytes.call(this,bytes.b.buffer);
	this.__length = length;
	this.__endian = 0;
	this.position = 0;
};
$hxClasses["openfl.utils.ByteArrayData"] = openfl_utils_ByteArrayData;
openfl_utils_ByteArrayData.__name__ = "openfl.utils.ByteArrayData";
openfl_utils_ByteArrayData.__interfaces__ = [openfl_utils_IDataOutput,openfl_utils_IDataInput];
openfl_utils_ByteArrayData.fromBytes = function(bytes) {
	var result = new openfl_utils_ByteArrayData();
	result.__fromBytes(bytes);
	return result;
};
openfl_utils_ByteArrayData.__super__ = haxe_io_Bytes;
openfl_utils_ByteArrayData.prototype = $extend(haxe_io_Bytes.prototype,{
	objectEncoding: null
	,position: null
	,__endian: null
	,__length: null
	,clear: function() {
		this.length = 0;
		this.position = 0;
	}
	,compress: function(algorithm) {
		if(algorithm == null) {
			algorithm = 2;
		}
		if(this.__length > this.length) {
			var cacheLength = this.length;
			this.length = this.__length;
			var data = new haxe_io_Bytes(new ArrayBuffer(cacheLength));
			data.blit(0,this,0,cacheLength);
			this.b = data.b;
			this.__length = data.length;
			this.data = data.data;
			this.length = cacheLength;
		}
		var bytes;
		switch(algorithm) {
		case 0:
			bytes = openfl__$internal_utils_compress_Deflate.compress(this);
			break;
		case 1:
			bytes = openfl__$internal_utils_compress_LZMA.compress(this);
			break;
		default:
			bytes = openfl__$internal_utils_compress_Zlib.compress(this);
		}
		if(bytes != null) {
			this.b = bytes.b;
			this.__length = bytes.length;
			this.data = bytes.data;
			this.length = this.__length;
			this.position = this.length;
		}
	}
	,deflate: function() {
		this.compress(0);
	}
	,inflate: function() {
		this.uncompress(0);
	}
	,readBoolean: function() {
		if(this.position < this.length) {
			return this.b[this.position++] != 0;
		} else {
			throw new js__$Boot_HaxeError(new openfl_errors_EOFError());
		}
	}
	,readByte: function() {
		var value = this.readUnsignedByte();
		if((value & 128) != 0) {
			return value - 256;
		} else {
			return value;
		}
	}
	,readBytes: function(bytes,offset,length) {
		if(length == null) {
			length = 0;
		}
		if(offset == null) {
			offset = 0;
		}
		if(length == 0) {
			length = this.length - this.position;
		}
		if(this.position + length > this.length) {
			throw new js__$Boot_HaxeError(new openfl_errors_EOFError());
		}
		if(bytes.length < offset + length) {
			bytes.__resize(offset + length);
		}
		bytes.blit(offset,this,this.position,length);
		this.position += length;
	}
	,readDouble: function() {
		var ch1 = this.readInt();
		var ch2 = this.readInt();
		if(this.__endian == 1) {
			return haxe_io_FPHelper.i64ToDouble(ch1,ch2);
		} else {
			return haxe_io_FPHelper.i64ToDouble(ch2,ch1);
		}
	}
	,readFloat: function() {
		return haxe_io_FPHelper.i32ToFloat(this.readInt());
	}
	,readInt: function() {
		var ch1 = this.readUnsignedByte();
		var ch2 = this.readUnsignedByte();
		var ch3 = this.readUnsignedByte();
		var ch4 = this.readUnsignedByte();
		if(this.__endian == 1) {
			return ch4 << 24 | ch3 << 16 | ch2 << 8 | ch1;
		} else {
			return ch1 << 24 | ch2 << 16 | ch3 << 8 | ch4;
		}
	}
	,readMultiByte: function(length,charSet) {
		return this.readUTFBytes(length);
	}
	,readShort: function() {
		var ch1 = this.readUnsignedByte();
		var ch2 = this.readUnsignedByte();
		var value;
		if(this.__endian == 1) {
			value = ch2 << 8 | ch1;
		} else {
			value = ch1 << 8 | ch2;
		}
		if((value & 32768) != 0) {
			return value - 65536;
		} else {
			return value;
		}
	}
	,readUnsignedByte: function() {
		if(this.position < this.length) {
			return this.b[this.position++];
		} else {
			throw new js__$Boot_HaxeError(new openfl_errors_EOFError());
		}
	}
	,readUnsignedInt: function() {
		var ch1 = this.readUnsignedByte();
		var ch2 = this.readUnsignedByte();
		var ch3 = this.readUnsignedByte();
		var ch4 = this.readUnsignedByte();
		if(this.__endian == 1) {
			return ch4 << 24 | ch3 << 16 | ch2 << 8 | ch1;
		} else {
			return ch1 << 24 | ch2 << 16 | ch3 << 8 | ch4;
		}
	}
	,readUnsignedShort: function() {
		var ch1 = this.readUnsignedByte();
		var ch2 = this.readUnsignedByte();
		if(this.__endian == 1) {
			return (ch2 << 8) + ch1;
		} else {
			return ch1 << 8 | ch2;
		}
	}
	,readUTF: function() {
		var bytesCount = this.readUnsignedShort();
		return this.readUTFBytes(bytesCount);
	}
	,readUTFBytes: function(length) {
		if(this.position + length > this.length) {
			throw new js__$Boot_HaxeError(new openfl_errors_EOFError());
		}
		this.position += length;
		return this.getString(this.position - length,length);
	}
	,uncompress: function(algorithm) {
		if(algorithm == null) {
			algorithm = 2;
		}
		if(this.__length > this.length) {
			var cacheLength = this.length;
			this.length = this.__length;
			var data = new haxe_io_Bytes(new ArrayBuffer(cacheLength));
			data.blit(0,this,0,cacheLength);
			this.b = data.b;
			this.__length = data.length;
			this.data = data.data;
			this.length = cacheLength;
		}
		var bytes;
		switch(algorithm) {
		case 0:
			bytes = openfl__$internal_utils_compress_Deflate.decompress(this);
			break;
		case 1:
			bytes = openfl__$internal_utils_compress_LZMA.decompress(this);
			break;
		default:
			bytes = openfl__$internal_utils_compress_Zlib.decompress(this);
		}
		if(bytes != null) {
			this.b = bytes.b;
			this.__length = bytes.length;
			this.data = bytes.data;
			this.length = this.__length;
		}
		this.position = 0;
	}
	,writeBoolean: function(value) {
		this.writeByte(value ? 1 : 0);
	}
	,writeByte: function(value) {
		this.__resize(this.position + 1);
		this.b[this.position++] = value & 255;
	}
	,writeBytes: function(bytes,offset,length) {
		if(length == null) {
			length = 0;
		}
		if(offset == null) {
			offset = 0;
		}
		if(bytes.length == 0) {
			return;
		}
		if(length == 0) {
			length = bytes.length - offset;
		}
		this.__resize(this.position + length);
		this.blit(this.position,bytes,offset,length);
		this.position = this.position + length;
	}
	,writeDouble: function(value) {
		var int64 = haxe_io_FPHelper.doubleToI64(value);
		if(this.__endian == 1) {
			this.writeInt(int64.low);
			this.writeInt(int64.high);
		} else {
			this.writeInt(int64.high);
			this.writeInt(int64.low);
		}
	}
	,writeFloat: function(value) {
		if(this.__endian == 1) {
			this.__resize(this.position + 4);
			this.setFloat(this.position,value);
			this.position += 4;
		} else {
			var int = haxe_io_FPHelper.floatToI32(value);
			this.writeInt(int);
		}
	}
	,writeInt: function(value) {
		this.__resize(this.position + 4);
		if(this.__endian == 1) {
			this.b[this.position++] = value & 255;
			this.b[this.position++] = value >> 8 & 255;
			this.b[this.position++] = value >> 16 & 255;
			this.b[this.position++] = value >> 24 & 255;
		} else {
			this.b[this.position++] = value >> 24 & 255;
			this.b[this.position++] = value >> 16 & 255;
			this.b[this.position++] = value >> 8 & 255;
			this.b[this.position++] = value & 255;
		}
	}
	,writeMultiByte: function(value,charSet) {
		this.writeUTFBytes(value);
	}
	,writeShort: function(value) {
		this.__resize(this.position + 2);
		if(this.__endian == 1) {
			this.b[this.position++] = value;
			this.b[this.position++] = value >> 8;
		} else {
			this.b[this.position++] = value >> 8;
			this.b[this.position++] = value;
		}
	}
	,writeUnsignedInt: function(value) {
		this.writeInt(value);
	}
	,writeUTF: function(value) {
		var bytes = haxe_io_Bytes.ofString(value);
		this.writeShort(bytes.length);
		this.writeBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(bytes));
	}
	,writeUTFBytes: function(value) {
		this.writeBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(haxe_io_Bytes.ofString(value)));
	}
	,__fromBytes: function(bytes) {
		this.b = bytes.b;
		this.__length = bytes.length;
		this.data = bytes.data;
		this.length = bytes.length;
	}
	,__resize: function(size) {
		if(size > this.__length) {
			var bytes = new haxe_io_Bytes(new ArrayBuffer((size + 1) * 3 >> 1));
			if(this.__length > 0) {
				var cacheLength = this.length;
				this.length = this.__length;
				bytes.blit(0,this,0,this.__length);
				this.length = cacheLength;
			}
			this.b = bytes.b;
			this.__length = bytes.length;
			this.data = bytes.data;
		}
		if(this.length < size) {
			this.length = size;
		}
	}
	,__setData: function(bytes) {
		this.b = bytes.b;
		this.__length = bytes.length;
		this.data = bytes.data;
	}
	,get_bytesAvailable: function() {
		return this.length - this.position;
	}
	,get_endian: function() {
		return this.__endian;
	}
	,set_endian: function(value) {
		return this.__endian = value;
	}
	,__class__: openfl_utils_ByteArrayData
	,__properties__: {set_endian:"set_endian",get_endian:"get_endian",get_bytesAvailable:"get_bytesAvailable"}
});
var openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$ = {};
$hxClasses["openfl.utils._CompressionAlgorithm.CompressionAlgorithm_Impl_"] = openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$;
openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$.__name__ = "openfl.utils._CompressionAlgorithm.CompressionAlgorithm_Impl_";
openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$.fromString = function(value) {
	switch(value) {
	case "deflate":
		return 0;
	case "lzma":
		return 1;
	case "zlib":
		return 2;
	default:
		return null;
	}
};
openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 0:
		return "deflate";
	case 1:
		return "lzma";
	case 2:
		return "zlib";
	default:
		return null;
	}
};
var openfl_utils__$Dictionary_Dictionary_$Impl_$ = {};
$hxClasses["openfl.utils._Dictionary.Dictionary_Impl_"] = openfl_utils__$Dictionary_Dictionary_$Impl_$;
openfl_utils__$Dictionary_Dictionary_$Impl_$.__name__ = "openfl.utils._Dictionary.Dictionary_Impl_";
openfl_utils__$Dictionary_Dictionary_$Impl_$.exists = function(this1,key) {
	return this1.exists(key);
};
openfl_utils__$Dictionary_Dictionary_$Impl_$.get = function(this1,key) {
	return this1.get(key);
};
openfl_utils__$Dictionary_Dictionary_$Impl_$.remove = function(this1,key) {
	return this1.remove(key);
};
openfl_utils__$Dictionary_Dictionary_$Impl_$.set = function(this1,key,value) {
	this1.set(key,value);
	return value;
};
openfl_utils__$Dictionary_Dictionary_$Impl_$.iterator = function(this1) {
	return this1.keys();
};
openfl_utils__$Dictionary_Dictionary_$Impl_$.each = function(this1) {
	return this1.iterator();
};
openfl_utils__$Dictionary_Dictionary_$Impl_$.keyValueIterator = function(this1) {
	return this1.keyValueIterator();
};
openfl_utils__$Dictionary_Dictionary_$Impl_$.toStringMap = function(t,weakKeys) {
	return new haxe_ds_StringMap();
};
openfl_utils__$Dictionary_Dictionary_$Impl_$.toIntMap = function(t,weakKeys) {
	return new haxe_ds_IntMap();
};
openfl_utils__$Dictionary_Dictionary_$Impl_$.toFloatMap = function(t,weakKeys) {
	return new openfl_utils__$Dictionary_FloatMap();
};
openfl_utils__$Dictionary_Dictionary_$Impl_$.toEnumValueMapMap = function(t,weakKeys) {
	return new haxe_ds_EnumValueMap();
};
openfl_utils__$Dictionary_Dictionary_$Impl_$.toObjectMap = function(t,weakKeys) {
	return new haxe_ds_ObjectMap();
};
openfl_utils__$Dictionary_Dictionary_$Impl_$.toUtilsObjectMap = function(t,weakKeys) {
	return new openfl_utils__$Dictionary_UtilsObjectMap();
};
openfl_utils__$Dictionary_Dictionary_$Impl_$.toClassMap = function(t,weakKeys) {
	return new openfl_utils__$Dictionary_ClassMap();
};
openfl_utils__$Dictionary_Dictionary_$Impl_$.fromStringMap = function(map) {
	return map;
};
openfl_utils__$Dictionary_Dictionary_$Impl_$.fromIntMap = function(map) {
	return map;
};
openfl_utils__$Dictionary_Dictionary_$Impl_$.fromFloatMap = function(map) {
	return map;
};
openfl_utils__$Dictionary_Dictionary_$Impl_$.fromObjectMap = function(map) {
	return map;
};
openfl_utils__$Dictionary_Dictionary_$Impl_$.fromUtilsObjectMap = function(map) {
	return map;
};
openfl_utils__$Dictionary_Dictionary_$Impl_$.fromClassMap = function(map) {
	return map;
};
var openfl_utils__$Dictionary_ClassMap = function() {
	this.types = new haxe_ds_StringMap();
	this.values = new haxe_ds_StringMap();
};
$hxClasses["openfl.utils._Dictionary.ClassMap"] = openfl_utils__$Dictionary_ClassMap;
openfl_utils__$Dictionary_ClassMap.__name__ = "openfl.utils._Dictionary.ClassMap";
openfl_utils__$Dictionary_ClassMap.__interfaces__ = [haxe_IMap];
openfl_utils__$Dictionary_ClassMap.prototype = {
	types: null
	,values: null
	,copy: function() {
		var copied = new openfl_utils__$Dictionary_ClassMap();
		var key = this.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			copied.set(key1,this.get(key1));
		}
		return copied;
	}
	,exists: function(key) {
		var this1 = this.types;
		var key1 = key.__name__;
		var _this = this1;
		if(__map_reserved[key1] != null) {
			return _this.existsReserved(key1);
		} else {
			return _this.h.hasOwnProperty(key1);
		}
	}
	,get: function(key) {
		var this1 = this.values;
		var key1 = key.__name__;
		var _this = this1;
		if(__map_reserved[key1] != null) {
			return _this.getReserved(key1);
		} else {
			return _this.h[key1];
		}
	}
	,keys: function() {
		var _this = this.types;
		return new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
	}
	,iterator: function() {
		var _this = this.values;
		return new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
	}
	,keyValueIterator: function() {
		return new haxe_iterators_MapKeyValueIterator(this);
	}
	,remove: function(key) {
		var name = key.__name__;
		if(!this.types.remove(name)) {
			return this.values.remove(name);
		} else {
			return true;
		}
	}
	,set: function(key,value) {
		var name = key.__name__;
		var _this = this.types;
		if(__map_reserved[name] != null) {
			_this.setReserved(name,key);
		} else {
			_this.h[name] = key;
		}
		var _this1 = this.values;
		if(__map_reserved[name] != null) {
			_this1.setReserved(name,value);
		} else {
			_this1.h[name] = value;
		}
	}
	,toString: function() {
		return this.values.toString();
	}
	,__class__: openfl_utils__$Dictionary_ClassMap
};
var openfl_utils__$Dictionary_FloatMap = function() {
	this.floatKeys = [];
	this.values = [];
};
$hxClasses["openfl.utils._Dictionary.FloatMap"] = openfl_utils__$Dictionary_FloatMap;
openfl_utils__$Dictionary_FloatMap.__name__ = "openfl.utils._Dictionary.FloatMap";
openfl_utils__$Dictionary_FloatMap.__interfaces__ = [haxe_IMap];
openfl_utils__$Dictionary_FloatMap.prototype = {
	floatKeys: null
	,values: null
	,copy: function() {
		var copied = new openfl_utils__$Dictionary_FloatMap();
		var key = this.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			copied.set(key1,this.get(key1));
		}
		return copied;
	}
	,exists: function(key) {
		return this.indexOf(key) > -1;
	}
	,get: function(key) {
		var ind = this.indexOf(key);
		if(ind > -1) {
			return this.values[ind];
		} else {
			return null;
		}
	}
	,keys: function() {
		return HxOverrides.iter(this.floatKeys.slice());
	}
	,iterator: function() {
		return HxOverrides.iter(this.values.slice());
	}
	,keyValueIterator: function() {
		return new haxe_iterators_MapKeyValueIterator(this);
	}
	,remove: function(key) {
		var ind = this.indexOf(key);
		if(ind > -1) {
			this.floatKeys.splice(ind,1);
			this.values.splice(ind,1);
			return true;
		}
		return false;
	}
	,set: function(key,value) {
		this.insertSorted(key,value);
	}
	,indexOf: function(key) {
		var len = this.floatKeys.length;
		var startIndex = 0;
		var endIndex = len - 1;
		if(len == 0) {
			return -1;
		}
		var midIndex = 0;
		while(startIndex < endIndex) {
			midIndex = Math.floor((startIndex + endIndex) / 2);
			if(this.floatKeys[midIndex] == key) {
				return midIndex;
			} else if(this.floatKeys[midIndex] > key) {
				endIndex = midIndex - 1;
			} else {
				startIndex = midIndex + 1;
			}
		}
		if(this.floatKeys[startIndex] == key) {
			return startIndex;
		} else {
			return -1;
		}
	}
	,insertSorted: function(key,value) {
		var len = this.floatKeys.length;
		var startIndex = 0;
		var endIndex = len - 1;
		if(len == 0) {
			this.floatKeys.push(key);
			this.values.push(value);
			return;
		}
		var midIndex = 0;
		while(startIndex < endIndex) {
			midIndex = Math.floor((startIndex + endIndex) / 2);
			if(this.floatKeys[midIndex] == key) {
				this.values[midIndex] = value;
				return;
			} else if(this.floatKeys[midIndex] > key) {
				endIndex = midIndex - 1;
			} else {
				startIndex = midIndex + 1;
			}
		}
		if(this.floatKeys[startIndex] > key) {
			this.floatKeys.splice(startIndex,0,key);
			this.values.splice(startIndex,0,value);
		} else if(this.floatKeys[startIndex] < key) {
			this.floatKeys.splice(startIndex + 1,0,key);
			this.values.splice(startIndex + 1,0,value);
		} else {
			this.values[startIndex] = value;
		}
	}
	,toString: function() {
		return this.values.toString();
	}
	,__class__: openfl_utils__$Dictionary_FloatMap
};
var openfl_utils__$Dictionary_UtilsObjectMap = function() {
	this.map = new haxe_ds_ObjectMap();
};
$hxClasses["openfl.utils._Dictionary.UtilsObjectMap"] = openfl_utils__$Dictionary_UtilsObjectMap;
openfl_utils__$Dictionary_UtilsObjectMap.__name__ = "openfl.utils._Dictionary.UtilsObjectMap";
openfl_utils__$Dictionary_UtilsObjectMap.__interfaces__ = [haxe_IMap];
openfl_utils__$Dictionary_UtilsObjectMap.prototype = {
	map: null
	,copy: function() {
		var copied = new openfl_utils__$Dictionary_UtilsObjectMap();
		var key = this.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			copied.set(key1,this.get(key1));
		}
		return copied;
	}
	,exists: function(key) {
		return this.map.h.__keys__[key.__id__] != null;
	}
	,get: function(key) {
		return this.map.h[key.__id__];
	}
	,keys: function() {
		return this.map.keys();
	}
	,iterator: function() {
		return this.map.iterator();
	}
	,keyValueIterator: function() {
		return new haxe_iterators_MapKeyValueIterator(this);
	}
	,remove: function(key) {
		return this.map.remove(key);
	}
	,set: function(key,value) {
		this.map.set(key,value);
	}
	,toString: function() {
		return this.map.toString();
	}
	,__class__: openfl_utils__$Dictionary_UtilsObjectMap
};
var openfl_utils__$Endian_Endian_$Impl_$ = {};
$hxClasses["openfl.utils._Endian.Endian_Impl_"] = openfl_utils__$Endian_Endian_$Impl_$;
openfl_utils__$Endian_Endian_$Impl_$.__name__ = "openfl.utils._Endian.Endian_Impl_";
openfl_utils__$Endian_Endian_$Impl_$.fromString = function(value) {
	switch(value) {
	case "bigEndian":
		return 0;
	case "littleEndian":
		return 1;
	default:
		return null;
	}
};
openfl_utils__$Endian_Endian_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 0:
		return "bigEndian";
	case 1:
		return "littleEndian";
	default:
		return null;
	}
};
var openfl_utils_IExternalizable = function() { };
$hxClasses["openfl.utils.IExternalizable"] = openfl_utils_IExternalizable;
openfl_utils_IExternalizable.__name__ = "openfl.utils.IExternalizable";
openfl_utils_IExternalizable.prototype = {
	readExternal: null
	,writeExternal: null
	,__class__: openfl_utils_IExternalizable
};
var openfl_utils__$Object_Object_$Impl_$ = {};
$hxClasses["openfl.utils._Object.Object_Impl_"] = openfl_utils__$Object_Object_$Impl_$;
openfl_utils__$Object_Object_$Impl_$.__name__ = "openfl.utils._Object.Object_Impl_";
openfl_utils__$Object_Object_$Impl_$._new = function() {
	var this1 = { };
	return this1;
};
openfl_utils__$Object_Object_$Impl_$.hasOwnProperty = function(this1,name) {
	if(this1 != null) {
		return Object.prototype.hasOwnProperty.call(this1,name);
	} else {
		return false;
	}
};
openfl_utils__$Object_Object_$Impl_$.isPrototypeOf = function(this1,theClass) {
	var o = this1;
	var c = o == null ? null : js_Boot.getClass(o);
	while(c != null) {
		if(c == theClass) {
			return true;
		}
		c = c.__super__;
	}
	return false;
};
openfl_utils__$Object_Object_$Impl_$.iterator = function(this1) {
	var fields = Reflect.fields(this1);
	if(fields == null) {
		fields = [];
	}
	return HxOverrides.iter(fields);
};
openfl_utils__$Object_Object_$Impl_$.propertyIsEnumerable = function(this1,name) {
	if(this1 != null) {
		return Object.prototype.hasOwnProperty.call(this1,name);
	} else {
		return false;
	}
};
openfl_utils__$Object_Object_$Impl_$.toLocaleString = function(this1) {
	return Std.string(this1);
};
openfl_utils__$Object_Object_$Impl_$.toString = function(this1) {
	return Std.string(this1);
};
openfl_utils__$Object_Object_$Impl_$.valueOf = function(this1) {
	return this1;
};
openfl_utils__$Object_Object_$Impl_$.__get = function(this1,key) {
	return Reflect.field(this1,key);
};
openfl_utils__$Object_Object_$Impl_$.__set = function(this1,key,value) {
	this1[key] = value;
	return value;
};
var openfl_utils_Timer = function(delay,repeatCount) {
	if(repeatCount == null) {
		repeatCount = 0;
	}
	if(isNaN(delay) || delay < 0) {
		throw new js__$Boot_HaxeError(new openfl_errors_Error("The delay specified is negative or not a finite number"));
	}
	openfl_events_EventDispatcher.call(this);
	this.__delay = delay;
	this.__repeatCount = repeatCount;
	this.running = false;
	this.currentCount = 0;
};
$hxClasses["openfl.utils.Timer"] = openfl_utils_Timer;
openfl_utils_Timer.__name__ = "openfl.utils.Timer";
openfl_utils_Timer.__super__ = openfl_events_EventDispatcher;
openfl_utils_Timer.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	currentCount: null
	,running: null
	,__delay: null
	,__repeatCount: null
	,__timerID: null
	,reset: function() {
		if(this.running) {
			this.stop();
		}
		this.currentCount = 0;
	}
	,start: function() {
		if(!this.running) {
			this.running = true;
			this.__timerID = window.setInterval($bind(this,this.timer_onTimer),this.__delay | 0);
		}
	}
	,stop: function() {
		this.running = false;
		if(this.__timerID != null) {
			window.clearInterval(this.__timerID);
			this.__timerID = null;
		}
	}
	,get_delay: function() {
		return this.__delay;
	}
	,set_delay: function(value) {
		this.__delay = value;
		if(this.running) {
			this.stop();
			this.start();
		}
		return this.__delay;
	}
	,get_repeatCount: function() {
		return this.__repeatCount;
	}
	,set_repeatCount: function(v) {
		if(this.running && v != 0 && v <= this.currentCount) {
			this.stop();
		}
		return this.__repeatCount = v;
	}
	,timer_onTimer: function() {
		this.currentCount++;
		if(this.__repeatCount > 0 && this.currentCount >= this.__repeatCount) {
			this.stop();
			this.dispatchEvent(new openfl_events_TimerEvent("timer"));
			this.dispatchEvent(new openfl_events_TimerEvent("timerComplete"));
		} else {
			this.dispatchEvent(new openfl_events_TimerEvent("timer"));
		}
	}
	,__class__: openfl_utils_Timer
	,__properties__: {set_repeatCount:"set_repeatCount",get_repeatCount:"get_repeatCount",set_delay:"set_delay",get_delay:"get_delay"}
});
var starling_events_EventDispatcher = function() {
};
$hxClasses["starling.events.EventDispatcher"] = starling_events_EventDispatcher;
starling_events_EventDispatcher.__name__ = "starling.events.EventDispatcher";
starling_events_EventDispatcher.prototype = {
	mEventListeners: null
	,addEventListener: function(type,listener) {
		if(listener == null) {
			throw new js__$Boot_HaxeError(new openfl_errors_Error("null listener added"));
		}
		if(this.mEventListeners == null) {
			this.mEventListeners = new haxe_ds_StringMap();
		}
		var _this = this.mEventListeners;
		var listeners = __map_reserved[type] != null ? _this.getReserved(type) : _this.h[type];
		if(listeners == null) {
			var this1 = this.mEventListeners;
			var v = openfl__$Vector_Vector_$Impl_$.toFunctionVector(null);
			var _this1 = this1;
			if(__map_reserved[type] != null) {
				_this1.setReserved(type,v);
			} else {
				_this1.h[type] = v;
			}
			var _this2 = this.mEventListeners;
			(__map_reserved[type] != null ? _this2.getReserved(type) : _this2.h[type]).data.push(listener);
		} else {
			var _g = 0;
			var _g1 = listeners.data.get_length();
			while(_g < _g1) {
				var i = _g++;
				if(Reflect.compareMethods(listeners.data.get(i),listener)) {
					return;
				}
			}
			var index = listeners.data.get_length();
			listeners.data.set(index,listener);
		}
	}
	,removeEventListener: function(type,listener) {
		if(this.mEventListeners != null) {
			var _this = this.mEventListeners;
			var listeners = __map_reserved[type] != null ? _this.getReserved(type) : _this.h[type];
			var numListeners = listeners != null ? listeners.data.get_length() : 0;
			if(numListeners > 0) {
				var index = listeners.data.indexOf(listener,0);
				if(index != -1) {
					var restListeners = new openfl__$Vector_AbstractVector(listeners.data.slice(0,index));
					var _g = index + 1;
					var _g1 = numListeners;
					while(_g < _g1) {
						var i = _g++;
						var value = listeners.data.get(i);
						restListeners.data.set(i - 1,value);
					}
					var _this1 = this.mEventListeners;
					if(__map_reserved[type] != null) {
						_this1.setReserved(type,restListeners);
					} else {
						_this1.h[type] = restListeners;
					}
				}
			}
		}
	}
	,removeEventListeners: function(type) {
		if(type != null && this.mEventListeners != null) {
			this.mEventListeners.remove(type);
		} else {
			this.mEventListeners = null;
		}
	}
	,dispatchEvent: function(event) {
		var bubbles = event.bubbles;
		var tmp;
		if(!bubbles) {
			if(this.mEventListeners != null) {
				var key = event.type;
				var _this = this.mEventListeners;
				tmp = !(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key));
			} else {
				tmp = true;
			}
		} else {
			tmp = false;
		}
		if(tmp) {
			return;
		}
		var previousTarget = event.target;
		event.setTarget(this);
		if(bubbles && ((this) instanceof starling_display_DisplayObject)) {
			this.__bubbleEvent(event);
		} else {
			this.__invokeEvent(event);
		}
		if(previousTarget != null) {
			event.setTarget(previousTarget);
		}
	}
	,__invokeEvent: function(event) {
		var listeners;
		if(this.mEventListeners != null) {
			var key = event.type;
			var _this = this.mEventListeners;
			listeners = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
		} else {
			listeners = null;
		}
		var numListeners = listeners == null ? 0 : listeners.data.get_length();
		if(numListeners != 0) {
			event.setCurrentTarget(this);
			var _g = 0;
			var _g1 = numListeners;
			while(_g < _g1) {
				var i = _g++;
				var listener = listeners.data.get(i);
				if(listener == null) {
					continue;
				}
				var numArgs = 2;
				if(numArgs == 0) {
					listener();
				} else if(numArgs == 1) {
					listener(event);
				} else {
					listener(event,event.data);
				}
				if(event.stopsImmediatePropagation) {
					return true;
				}
			}
			return event.stopsPropagation;
		} else {
			return false;
		}
	}
	,__bubbleEvent: function(event) {
		var chain;
		var element = js_Boot.__cast(this , starling_display_DisplayObject);
		var length = 1;
		if(starling_events_EventDispatcher.sBubbleChains.length > 0) {
			chain = starling_events_EventDispatcher.sBubbleChains.pop();
			chain.data.set(0,element);
		} else {
			var a = [element];
			var vector = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
			var _g = 0;
			var _g1 = a.length;
			while(_g < _g1) {
				var i = _g++;
				vector.data.set(i,a[i]);
			}
			chain = vector;
		}
		while(true) {
			element = element.get_parent();
			if(!(element != null)) {
				break;
			}
			chain.data.set(length++,element);
		}
		var _g2 = 0;
		var _g11 = length;
		while(_g2 < _g11) {
			var i1 = _g2++;
			if(chain.data.get(i1) == null) {
				continue;
			}
			var stopPropagation = chain.data.get(i1).__invokeEvent(event);
			if(stopPropagation) {
				break;
			}
		}
		chain.data.set_length(0);
		starling_events_EventDispatcher.sBubbleChains[starling_events_EventDispatcher.sBubbleChains.length] = chain;
	}
	,dispatchEventWith: function(type,bubbles,data) {
		if(bubbles == null) {
			bubbles = false;
		}
		if(bubbles || this.hasEventListener(type)) {
			var event = starling_events_Event.fromPool(type,bubbles,data);
			this.dispatchEvent(event);
			starling_events_Event.toPool(event);
		}
	}
	,hasEventListener: function(type) {
		var listeners;
		if(this.mEventListeners != null) {
			var _this = this.mEventListeners;
			listeners = __map_reserved[type] != null ? _this.getReserved(type) : _this.h[type];
		} else {
			listeners = null;
		}
		if(listeners != null) {
			return listeners.data.get_length() != 0;
		} else {
			return false;
		}
	}
	,__class__: starling_events_EventDispatcher
};
var starling_animation_IAnimatable = function() { };
$hxClasses["starling.animation.IAnimatable"] = starling_animation_IAnimatable;
starling_animation_IAnimatable.__name__ = "starling.animation.IAnimatable";
starling_animation_IAnimatable.prototype = {
	advanceTime: null
	,__class__: starling_animation_IAnimatable
};
var starling_animation_DelayedCall = function(call,delay,args) {
	starling_events_EventDispatcher.call(this);
	this.reset(call,delay,args);
};
$hxClasses["starling.animation.DelayedCall"] = starling_animation_DelayedCall;
starling_animation_DelayedCall.__name__ = "starling.animation.DelayedCall";
starling_animation_DelayedCall.__interfaces__ = [starling_animation_IAnimatable];
starling_animation_DelayedCall.fromPool = function(call,delay,args) {
	if(starling_animation_DelayedCall.sPool.data.get_length() != 0) {
		return starling_animation_DelayedCall.sPool.data.pop().reset(call,delay,args);
	} else {
		return new starling_animation_DelayedCall(call,delay,args);
	}
};
starling_animation_DelayedCall.toPool = function(delayedCall) {
	delayedCall.mCall = null;
	delayedCall.mArgs = null;
	delayedCall.removeEventListeners();
	starling_animation_DelayedCall.sPool.data.push(delayedCall);
};
starling_animation_DelayedCall.__super__ = starling_events_EventDispatcher;
starling_animation_DelayedCall.prototype = $extend(starling_events_EventDispatcher.prototype,{
	mCurrentTime: null
	,mTotalTime: null
	,mCall: null
	,mArgs: null
	,mRepeatCount: null
	,reset: function(call,delay,args) {
		this.mCurrentTime = 0;
		this.mTotalTime = Math.max(delay,0.0001);
		this.mCall = call;
		this.mArgs = args;
		this.mRepeatCount = 1;
		return this;
	}
	,advanceTime: function(time) {
		var previousTime = this.mCurrentTime;
		this.mCurrentTime += time;
		if(this.mCurrentTime > this.mTotalTime) {
			this.mCurrentTime = this.mTotalTime;
		}
		if(previousTime < this.mTotalTime && this.mCurrentTime >= this.mTotalTime) {
			if(this.mRepeatCount == 0 || this.mRepeatCount > 1) {
				this.mCall.apply(this.mCall,this.mArgs);
				if(this.mRepeatCount > 0) {
					this.mRepeatCount -= 1;
				}
				this.mCurrentTime = 0;
				this.advanceTime(previousTime + time - this.mTotalTime);
			} else {
				var call = this.mCall;
				var args = this.mArgs;
				this.dispatchEventWith("removeFromJuggler");
				call.apply(call,args);
			}
		}
	}
	,complete: function() {
		var restTime = this.mTotalTime - this.mCurrentTime;
		if(restTime > 0) {
			this.advanceTime(restTime);
		}
	}
	,get_isComplete: function() {
		if(this.mRepeatCount == 1) {
			return this.mCurrentTime >= this.mTotalTime;
		} else {
			return false;
		}
	}
	,get_totalTime: function() {
		return this.mTotalTime;
	}
	,get_currentTime: function() {
		return this.mCurrentTime;
	}
	,get_repeatCount: function() {
		return this.mRepeatCount;
	}
	,set_repeatCount: function(value) {
		return this.mRepeatCount = value;
	}
	,__class__: starling_animation_DelayedCall
	,__properties__: {set_repeatCount:"set_repeatCount",get_repeatCount:"get_repeatCount",get_currentTime:"get_currentTime",get_totalTime:"get_totalTime",get_isComplete:"get_isComplete"}
});
var starling_animation_Juggler = function() {
	this.mElapsedTime = 0;
	this.mObjects = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
};
$hxClasses["starling.animation.Juggler"] = starling_animation_Juggler;
starling_animation_Juggler.__name__ = "starling.animation.Juggler";
starling_animation_Juggler.__interfaces__ = [starling_animation_IAnimatable];
starling_animation_Juggler.prototype = {
	mObjects: null
	,mElapsedTime: null
	,add: function(object) {
		if(object != null && this.mObjects.data.indexOf(object,0) == -1) {
			var this1 = this.mObjects;
			var index = this.mObjects.data.get_length();
			this1.data.set(index,object);
			var dispatcher = ((object) instanceof starling_events_EventDispatcher) ? object : null;
			if(dispatcher != null) {
				dispatcher.addEventListener("removeFromJuggler",$bind(this,this.onRemove));
			}
		}
	}
	,contains: function(object) {
		return this.mObjects.data.indexOf(object,0) != -1;
	}
	,remove: function(object) {
		if(object == null) {
			return;
		}
		var dispatcher = ((object) instanceof starling_events_EventDispatcher) ? object : null;
		if(dispatcher != null) {
			dispatcher.removeEventListener("removeFromJuggler",$bind(this,this.onRemove));
		}
		var index = this.mObjects.data.indexOf(object,0);
		if(index != -1) {
			this.mObjects.data.set(index,null);
		}
	}
	,removeTweens: function(target) {
		if(target == null) {
			return;
		}
		var i = this.mObjects.data.get_length() - 1;
		while(i >= 0) {
			var tween = ((this.mObjects.data.get(i)) instanceof starling_animation_Tween) ? this.mObjects.data.get(i) : null;
			if(tween != null && tween.get_target() == target) {
				tween.removeEventListener("removeFromJuggler",$bind(this,this.onRemove));
				this.mObjects.data.set(i,null);
			}
			--i;
		}
	}
	,containsTweens: function(target) {
		if(target == null) {
			return false;
		}
		var i = this.mObjects.data.get_length() - 1;
		while(i >= 0) {
			var tween = ((this.mObjects.data.get(i)) instanceof starling_animation_Tween) ? this.mObjects.data.get(i) : null;
			if(tween != null && tween.get_target() == target) {
				return true;
			}
			--i;
		}
		return false;
	}
	,purge: function() {
		var i = this.mObjects.data.get_length() - 1;
		while(i >= 0) {
			var dispatcher = ((this.mObjects.data.get(i)) instanceof starling_events_EventDispatcher) ? this.mObjects.data.get(i) : null;
			if(dispatcher != null) {
				dispatcher.removeEventListener("removeFromJuggler",$bind(this,this.onRemove));
			}
			this.mObjects.data.set(i,null);
			--i;
		}
	}
	,delayCall: function(call,delay,args) {
		if(call == null) {
			return null;
		}
		if(args == null) {
			args = [];
		}
		var delayedCall = starling_animation_DelayedCall.fromPool(call,delay,args);
		delayedCall.addEventListener("removeFromJuggler",$bind(this,this.onPooledDelayedCallComplete));
		this.add(delayedCall);
		return delayedCall;
	}
	,repeatCall: function(call,interval,repeatCount,args) {
		if(repeatCount == null) {
			repeatCount = 0;
		}
		if(call == null) {
			return null;
		}
		if(args == null) {
			args = [];
		}
		var delayedCall = starling_animation_DelayedCall.fromPool(call,interval,args);
		delayedCall.set_repeatCount(repeatCount);
		delayedCall.addEventListener("removeFromJuggler",$bind(this,this.onPooledDelayedCallComplete));
		this.add(delayedCall);
		return delayedCall;
	}
	,onPooledDelayedCallComplete: function(event) {
		starling_animation_DelayedCall.toPool(js_Boot.__cast(event.target , starling_animation_DelayedCall));
	}
	,tween: function(target,time,properties) {
		if(target == null) {
			throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("target must not be null"));
		}
		var tween = starling_animation_Tween.fromPool(target,time);
		var _g = 0;
		var _g1 = Reflect.fields(properties);
		while(_g < _g1.length) {
			var property = _g1[_g];
			++_g;
			var value = Reflect.field(properties,property);
			if(Reflect.getProperty(tween,property) != null) {
				Reflect.setProperty(tween,property,value);
			} else if(Reflect.getProperty(target,property) != null) {
				tween.animate(property,value);
			} else {
				throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Invalid property: " + property));
			}
		}
		tween.addEventListener("removeFromJuggler",$bind(this,this.onPooledTweenComplete));
		this.add(tween);
		return tween;
	}
	,onPooledTweenComplete: function(event) {
		starling_animation_Tween.toPool(js_Boot.__cast(event.target , starling_animation_Tween));
	}
	,advanceTime: function(time) {
		var numObjects = this.mObjects.data.get_length();
		var currentIndex = 0;
		var i = 0;
		this.mElapsedTime += time;
		if(numObjects == 0) {
			return;
		}
		while(i < numObjects) {
			var object = this.mObjects.data.get(i);
			if(object != null) {
				if(currentIndex != i) {
					this.mObjects.data.set(currentIndex,object);
					this.mObjects.data.set(i,null);
				}
				object.advanceTime(time);
				++currentIndex;
			}
			++i;
		}
		if(currentIndex != i) {
			numObjects = this.mObjects.data.get_length();
			while(i < numObjects) {
				var this1 = this.mObjects;
				var value = this.mObjects.data.get(i++);
				this1.data.set(currentIndex++,value);
			}
			this.mObjects.data.set_length(currentIndex);
		}
	}
	,onRemove: function(event) {
		this.remove(js_Boot.__cast(event.target , starling_animation_IAnimatable));
		var tween = ((event.target) instanceof starling_animation_Tween) ? event.target : null;
		if(tween != null && tween.get_isComplete()) {
			this.add(tween.get_nextTween());
		}
	}
	,get_elapsedTime: function() {
		return this.mElapsedTime;
	}
	,get_objects: function() {
		return this.mObjects;
	}
	,__class__: starling_animation_Juggler
	,__properties__: {get_objects:"get_objects",get_elapsedTime:"get_elapsedTime"}
};
var starling_animation_Transitions = function() { };
$hxClasses["starling.animation.Transitions"] = starling_animation_Transitions;
starling_animation_Transitions.__name__ = "starling.animation.Transitions";
starling_animation_Transitions.getTransition = function(name) {
	if(starling_animation_Transitions.sTransitions == null) {
		starling_animation_Transitions.registerDefaults();
	}
	var _this = starling_animation_Transitions.sTransitions;
	if(__map_reserved[name] != null) {
		return _this.getReserved(name);
	} else {
		return _this.h[name];
	}
};
starling_animation_Transitions.register = function(name,func) {
	if(starling_animation_Transitions.sTransitions == null) {
		starling_animation_Transitions.registerDefaults();
	}
	var _this = starling_animation_Transitions.sTransitions;
	if(__map_reserved[name] != null) {
		_this.setReserved(name,func);
	} else {
		_this.h[name] = func;
	}
};
starling_animation_Transitions.registerDefaults = function() {
	starling_animation_Transitions.sTransitions = new haxe_ds_StringMap();
	starling_animation_Transitions.register("linear",starling_animation_Transitions.linear);
	starling_animation_Transitions.register("easeIn",starling_animation_Transitions.easeIn);
	starling_animation_Transitions.register("easeOut",starling_animation_Transitions.easeOut);
	starling_animation_Transitions.register("easeInOut",starling_animation_Transitions.easeInOut);
	starling_animation_Transitions.register("easeOutIn",starling_animation_Transitions.easeOutIn);
	starling_animation_Transitions.register("easeInBack",starling_animation_Transitions.easeInBack);
	starling_animation_Transitions.register("easeOutBack",starling_animation_Transitions.easeOutBack);
	starling_animation_Transitions.register("easeInOutBack",starling_animation_Transitions.easeInOutBack);
	starling_animation_Transitions.register("easeOutInBack",starling_animation_Transitions.easeOutInBack);
	starling_animation_Transitions.register("easeInElastic",starling_animation_Transitions.easeInElastic);
	starling_animation_Transitions.register("easeOutElastic",starling_animation_Transitions.easeOutElastic);
	starling_animation_Transitions.register("easeInOutElastic",starling_animation_Transitions.easeInOutElastic);
	starling_animation_Transitions.register("easeOutInElastic",starling_animation_Transitions.easeOutInElastic);
	starling_animation_Transitions.register("easeInBounce",starling_animation_Transitions.easeInBounce);
	starling_animation_Transitions.register("easeOutBounce",starling_animation_Transitions.easeOutBounce);
	starling_animation_Transitions.register("easeInOutBounce",starling_animation_Transitions.easeInOutBounce);
	starling_animation_Transitions.register("easeOutInBounce",starling_animation_Transitions.easeOutInBounce);
};
starling_animation_Transitions.linear = function(ratio) {
	return ratio;
};
starling_animation_Transitions.easeIn = function(ratio) {
	return ratio * ratio * ratio;
};
starling_animation_Transitions.easeOut = function(ratio) {
	var invRatio = ratio - 1.0;
	return invRatio * invRatio * invRatio + 1;
};
starling_animation_Transitions.easeInOut = function(ratio) {
	return starling_animation_Transitions.easeCombined(starling_animation_Transitions.easeIn,starling_animation_Transitions.easeOut,ratio);
};
starling_animation_Transitions.easeOutIn = function(ratio) {
	return starling_animation_Transitions.easeCombined(starling_animation_Transitions.easeOut,starling_animation_Transitions.easeIn,ratio);
};
starling_animation_Transitions.easeInBack = function(ratio) {
	var s = 1.70158;
	return Math.pow(ratio,2) * ((s + 1.0) * ratio - s);
};
starling_animation_Transitions.easeOutBack = function(ratio) {
	var invRatio = ratio - 1.0;
	var s = 1.70158;
	return Math.pow(invRatio,2) * ((s + 1.0) * invRatio + s) + 1.0;
};
starling_animation_Transitions.easeInOutBack = function(ratio) {
	return starling_animation_Transitions.easeCombined(starling_animation_Transitions.easeInBack,starling_animation_Transitions.easeOutBack,ratio);
};
starling_animation_Transitions.easeOutInBack = function(ratio) {
	return starling_animation_Transitions.easeCombined(starling_animation_Transitions.easeOutBack,starling_animation_Transitions.easeInBack,ratio);
};
starling_animation_Transitions.easeInElastic = function(ratio) {
	if(ratio == 0 || ratio == 1) {
		return ratio;
	} else {
		var p = 0.3;
		var s = p / 4.0;
		var invRatio = ratio - 1;
		return -1.0 * Math.pow(2.0,10.0 * invRatio) * Math.sin((invRatio - s) * (2.0 * Math.PI) / p);
	}
};
starling_animation_Transitions.easeOutElastic = function(ratio) {
	if(ratio == 0 || ratio == 1) {
		return ratio;
	} else {
		var p = 0.3;
		var s = p / 4.0;
		return Math.pow(2.0,-10.0 * ratio) * Math.sin((ratio - s) * (2.0 * Math.PI) / p) + 1;
	}
};
starling_animation_Transitions.easeInOutElastic = function(ratio) {
	return starling_animation_Transitions.easeCombined(starling_animation_Transitions.easeInElastic,starling_animation_Transitions.easeOutElastic,ratio);
};
starling_animation_Transitions.easeOutInElastic = function(ratio) {
	return starling_animation_Transitions.easeCombined(starling_animation_Transitions.easeOutElastic,starling_animation_Transitions.easeInElastic,ratio);
};
starling_animation_Transitions.easeInBounce = function(ratio) {
	return 1.0 - starling_animation_Transitions.easeOutBounce(1.0 - ratio);
};
starling_animation_Transitions.easeOutBounce = function(ratio) {
	var s = 7.5625;
	var p = 2.75;
	var l;
	if(ratio < 1.0 / p) {
		l = s * Math.pow(ratio,2);
	} else if(ratio < 2.0 / p) {
		ratio -= 1.5 / p;
		l = s * Math.pow(ratio,2) + 0.75;
	} else if(ratio < 2.5 / p) {
		ratio -= 2.25 / p;
		l = s * Math.pow(ratio,2) + 0.9375;
	} else {
		ratio -= 2.625 / p;
		l = s * Math.pow(ratio,2) + 0.984375;
	}
	return l;
};
starling_animation_Transitions.easeInOutBounce = function(ratio) {
	return starling_animation_Transitions.easeCombined(starling_animation_Transitions.easeInBounce,starling_animation_Transitions.easeOutBounce,ratio);
};
starling_animation_Transitions.easeOutInBounce = function(ratio) {
	return starling_animation_Transitions.easeCombined(starling_animation_Transitions.easeOutBounce,starling_animation_Transitions.easeInBounce,ratio);
};
starling_animation_Transitions.easeCombined = function(startFunc,endFunc,ratio) {
	if(ratio < 0.5) {
		return 0.5 * startFunc(ratio * 2.0);
	} else {
		return 0.5 * endFunc((ratio - 0.5) * 2.0) + 0.5;
	}
};
var starling_animation_Tween = function(target,time,transition) {
	if(transition == null) {
		transition = "linear";
	}
	starling_events_EventDispatcher.call(this);
	this.reset(target,time,transition);
};
$hxClasses["starling.animation.Tween"] = starling_animation_Tween;
starling_animation_Tween.__name__ = "starling.animation.Tween";
starling_animation_Tween.__interfaces__ = [starling_animation_IAnimatable];
starling_animation_Tween.getPropertyHint = function(property) {
	if(property.indexOf("color") != -1 || property.indexOf("Color") != -1) {
		return "rgb";
	}
	var hintMarkerIndex = property.indexOf("#");
	if(hintMarkerIndex != -1) {
		return HxOverrides.substr(property,hintMarkerIndex + 1,null);
	} else {
		return null;
	}
};
starling_animation_Tween.getPropertyName = function(property) {
	var hintMarkerIndex = property.indexOf("#");
	if(hintMarkerIndex != -1) {
		return property.substring(0,hintMarkerIndex);
	} else {
		return property;
	}
};
starling_animation_Tween.fromPool = function(target,time,transition) {
	if(transition == null) {
		transition = "linear";
	}
	if(starling_animation_Tween.sTweenPool.data.get_length() != 0) {
		return starling_animation_Tween.sTweenPool.data.pop().reset(target,time,transition);
	} else {
		return new starling_animation_Tween(target,time,transition);
	}
};
starling_animation_Tween.toPool = function(tween) {
	tween.mOnStart = tween.mOnUpdate = tween.mOnRepeat = tween.mOnComplete = null;
	tween.mOnStartArgs = tween.mOnUpdateArgs = tween.mOnRepeatArgs = tween.mOnCompleteArgs = null;
	tween.mTarget = null;
	tween.mTransitionFunc = null;
	tween.removeEventListeners();
	starling_animation_Tween.sTweenPool.data.push(tween);
};
starling_animation_Tween.__super__ = starling_events_EventDispatcher;
starling_animation_Tween.prototype = $extend(starling_events_EventDispatcher.prototype,{
	mTarget: null
	,mTransitionFunc: null
	,mTransitionName: null
	,mProperties: null
	,mStartValues: null
	,mEndValues: null
	,mUpdateFuncs: null
	,mOnStart: null
	,mOnUpdate: null
	,mOnRepeat: null
	,mOnComplete: null
	,mOnStartArgs: null
	,mOnUpdateArgs: null
	,mOnRepeatArgs: null
	,mOnCompleteArgs: null
	,mTotalTime: null
	,mCurrentTime: null
	,mProgress: null
	,mDelay: null
	,mRoundToInt: null
	,mNextTween: null
	,mRepeatCount: null
	,mRepeatDelay: null
	,mReverse: null
	,mCurrentCycle: null
	,reset: function(target,time,transition) {
		if(transition == null) {
			transition = "linear";
		}
		this.mTarget = target;
		this.mCurrentTime = 0.0;
		this.mTotalTime = Math.max(0.0001,time);
		this.mProgress = 0.0;
		this.mDelay = this.mRepeatDelay = 0.0;
		this.mOnStart = this.mOnUpdate = this.mOnRepeat = this.mOnComplete = null;
		this.mOnStartArgs = this.mOnUpdateArgs = this.mOnRepeatArgs = this.mOnCompleteArgs = null;
		this.mRoundToInt = this.mReverse = false;
		this.mRepeatCount = 1;
		this.mCurrentCycle = -1;
		this.mNextTween = null;
		if(typeof(transition) == "string") {
			this.set_transition(transition);
		} else if(Reflect.isFunction(transition)) {
			this.set_transitionFunc(transition);
		} else {
			throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Transition must be either a string or a function"));
		}
		if(this.mProperties != null) {
			this.mProperties.data.set_length(0);
		} else {
			this.mProperties = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
		}
		if(this.mStartValues != null) {
			this.mStartValues.data.set_length(0);
		} else {
			this.mStartValues = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
		}
		if(this.mEndValues != null) {
			this.mEndValues.data.set_length(0);
		} else {
			this.mEndValues = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
		}
		if(this.mUpdateFuncs != null) {
			this.mUpdateFuncs.data.set_length(0);
		} else {
			this.mUpdateFuncs = openfl__$Vector_Vector_$Impl_$.toFunctionVector(null);
		}
		return this;
	}
	,animate: function(property,endValue) {
		if(this.mTarget == null) {
			return;
		}
		var pos = this.mProperties.data.get_length();
		var updateFunc = this.getUpdateFuncFromProperty(property);
		var this1 = this.mProperties;
		var value = starling_animation_Tween.getPropertyName(property);
		this1.data.set(pos,value);
		this.mStartValues.data.set(pos,NaN);
		this.mEndValues.data.set(pos,endValue);
		this.mUpdateFuncs.data.set(pos,updateFunc);
	}
	,scaleTo: function(factor) {
		this.animate("scaleX",factor);
		this.animate("scaleY",factor);
	}
	,moveTo: function(x,y) {
		this.animate("x",x);
		this.animate("y",y);
	}
	,fadeTo: function(alpha) {
		this.animate("alpha",alpha);
	}
	,rotateTo: function(angle,type) {
		if(type == null) {
			type = "rad";
		}
		this.animate("rotation#" + type,angle);
	}
	,advanceTime: function(time) {
		if(time == 0 || this.mRepeatCount == 1 && this.mCurrentTime == this.mTotalTime) {
			return;
		}
		var i;
		var previousTime = this.mCurrentTime;
		var restTime = this.mTotalTime - this.mCurrentTime;
		var carryOverTime = time > restTime ? time - restTime : 0.0;
		this.mCurrentTime += time;
		if(this.mCurrentTime <= 0) {
			return;
		} else if(this.mCurrentTime > this.mTotalTime) {
			this.mCurrentTime = this.mTotalTime;
		}
		if(this.mCurrentCycle < 0 && previousTime <= 0 && this.mCurrentTime > 0) {
			this.mCurrentCycle++;
			if(this.mOnStart != null) {
				if(this.mOnStartArgs != null) {
					this.mOnStart(this.mOnStartArgs);
				} else {
					this.mOnStart();
				}
			}
		}
		var ratio = this.mCurrentTime / this.mTotalTime;
		var reversed = this.mReverse && this.mCurrentCycle % 2 == 1;
		var numProperties = this.mStartValues.data.get_length();
		this.mProgress = reversed ? this.mTransitionFunc(1.0 - ratio) : this.mTransitionFunc(ratio);
		var _g = 0;
		var _g1 = numProperties;
		while(_g < _g1) {
			var i1 = _g++;
			if(this.mStartValues.data.get(i1) != this.mStartValues.data.get(i1)) {
				var this1 = this.mStartValues;
				var value = Reflect.getProperty(this.mTarget,this.mProperties.data.get(i1));
				this1.data.set(i1,value);
			}
			var updateFunc = this.mUpdateFuncs.data.get(i1);
			updateFunc(this.mProperties.data.get(i1),this.mStartValues.data.get(i1),this.mEndValues.data.get(i1));
		}
		if(this.mOnUpdate != null) {
			if(this.mOnUpdateArgs != null) {
				this.mOnUpdate(this.mOnUpdateArgs);
			} else {
				this.mOnUpdate();
			}
		}
		if(previousTime < this.mTotalTime && this.mCurrentTime >= this.mTotalTime) {
			if(this.mRepeatCount == 0 || this.mRepeatCount > 1) {
				this.mCurrentTime = -this.mRepeatDelay;
				this.mCurrentCycle++;
				if(this.mRepeatCount > 1) {
					this.mRepeatCount--;
				}
				if(this.mOnRepeat != null) {
					if(this.mOnRepeatArgs != null) {
						this.mOnRepeat(this.mOnRepeatArgs);
					} else {
						this.mOnRepeat();
					}
				}
			} else {
				var onComplete = this.mOnComplete;
				var onCompleteArgs = this.mOnCompleteArgs;
				this.dispatchEventWith("removeFromJuggler");
				if(this.mOnComplete != null) {
					if(this.mOnCompleteArgs != null) {
						this.mOnComplete(this.mOnCompleteArgs);
					} else {
						this.mOnComplete();
					}
				}
				if(this.mCurrentTime == 0) {
					carryOverTime = 0;
				}
			}
		}
		if(carryOverTime != 0) {
			this.advanceTime(carryOverTime);
		}
	}
	,getUpdateFuncFromProperty: function(property) {
		var updateFunc;
		var hint = starling_animation_Tween.getPropertyHint(property);
		if(hint == null) {
			updateFunc = $bind(this,this.updateStandard);
		} else {
			switch(hint) {
			case "deg":
				updateFunc = $bind(this,this.updateDeg);
				break;
			case "rad":
				updateFunc = $bind(this,this.updateRad);
				break;
			case "rgb":
				updateFunc = $bind(this,this.updateRgb);
				break;
			default:
				haxe_Log.trace("[Starling] Ignoring unknown property hint: " + hint,{ fileName : "starling/animation/Tween.hx", lineNumber : 279, className : "starling.animation.Tween", methodName : "getUpdateFuncFromProperty"});
				updateFunc = $bind(this,this.updateStandard);
			}
		}
		return updateFunc;
	}
	,updateStandard: function(property,startValue,endValue) {
		var newValue = startValue + this.mProgress * (endValue - startValue);
		if(this.mRoundToInt) {
			newValue = Math.round(newValue);
		}
		Reflect.setProperty(this.mTarget,property,newValue);
	}
	,updateRgb: function(property,startValue,endValue) {
		var startColor = startValue | 0;
		var endColor = endValue | 0;
		var startA = startColor >>> 24 & 255;
		var startR = startColor >>> 16 & 255;
		var startG = startColor >>> 8 & 255;
		var startB = startColor & 255;
		var endA = endColor >>> 24 & 255;
		var endR = endColor >>> 16 & 255;
		var endG = endColor >>> 8 & 255;
		var endB = endColor & 255;
		var b = this.mProgress;
		var b1 = _$UInt_UInt_$Impl_$.toFloat(endA - startA) * b;
		var newA = _$UInt_UInt_$Impl_$.toFloat(startA) + b1 | 0;
		var b2 = this.mProgress;
		var b3 = _$UInt_UInt_$Impl_$.toFloat(endR - startR) * b2;
		var newR = _$UInt_UInt_$Impl_$.toFloat(startR) + b3 | 0;
		var b4 = this.mProgress;
		var b5 = _$UInt_UInt_$Impl_$.toFloat(endG - startG) * b4;
		var newG = _$UInt_UInt_$Impl_$.toFloat(startG) + b5 | 0;
		var b6 = this.mProgress;
		var b7 = _$UInt_UInt_$Impl_$.toFloat(endB - startB) * b6;
		var newB = _$UInt_UInt_$Impl_$.toFloat(startB) + b7 | 0;
		Reflect.setProperty(this.mTarget,property,newA << 24 | newR << 16 | newG << 8 | newB);
	}
	,updateRad: function(property,startValue,endValue) {
		this.updateAngle(Math.PI,property,startValue,endValue);
	}
	,updateDeg: function(property,startValue,endValue) {
		this.updateAngle(180,property,startValue,endValue);
	}
	,updateAngle: function(pi,property,startValue,endValue) {
		while(Math.abs(endValue - startValue) > pi) if(startValue < endValue) {
			endValue -= 2.0 * pi;
		} else {
			endValue += 2.0 * pi;
		}
		this.updateStandard(property,startValue,endValue);
	}
	,getEndValue: function(property) {
		var index = this.mProperties.data.indexOf(property,0);
		if(index == -1) {
			throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("The property '" + property + "' is not animated"));
		} else {
			return this.mEndValues.data.get(index);
		}
	}
	,get_isComplete: function() {
		if(this.mCurrentTime >= this.mTotalTime) {
			return this.mRepeatCount == 1;
		} else {
			return false;
		}
	}
	,get_target: function() {
		return this.mTarget;
	}
	,get_transition: function() {
		return this.mTransitionName;
	}
	,set_transition: function(value) {
		this.mTransitionName = value;
		this.mTransitionFunc = starling_animation_Transitions.getTransition(value);
		if(this.mTransitionFunc == null) {
			throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Invalid transiton: " + value));
		}
		return value;
	}
	,get_transitionFunc: function() {
		return this.mTransitionFunc;
	}
	,set_transitionFunc: function(value) {
		this.mTransitionName = "custom";
		this.mTransitionFunc = value;
		return value;
	}
	,get_totalTime: function() {
		return this.mTotalTime;
	}
	,get_currentTime: function() {
		return this.mCurrentTime;
	}
	,get_progress: function() {
		return this.mProgress;
	}
	,get_delay: function() {
		return this.mDelay;
	}
	,set_delay: function(value) {
		this.mCurrentTime = this.mCurrentTime + this.mDelay - value;
		this.mDelay = value;
		return value;
	}
	,get_repeatCount: function() {
		return this.mRepeatCount;
	}
	,set_repeatCount: function(value) {
		return this.mRepeatCount = value;
	}
	,get_repeatDelay: function() {
		return this.mRepeatDelay;
	}
	,set_repeatDelay: function(value) {
		return this.mRepeatDelay = value;
	}
	,get_reverse: function() {
		return this.mReverse;
	}
	,set_reverse: function(value) {
		return this.mReverse = value;
	}
	,get_roundToInt: function() {
		return this.mRoundToInt;
	}
	,set_roundToInt: function(value) {
		return this.mRoundToInt = value;
	}
	,get_onStart: function() {
		return this.mOnStart;
	}
	,set_onStart: function(value) {
		return this.mOnStart = value;
	}
	,get_onUpdate: function() {
		return this.mOnUpdate;
	}
	,set_onUpdate: function(value) {
		return this.mOnUpdate = value;
	}
	,get_onRepeat: function() {
		return this.mOnRepeat;
	}
	,set_onRepeat: function(value) {
		return this.mOnRepeat = value;
	}
	,get_onComplete: function() {
		return this.mOnComplete;
	}
	,set_onComplete: function(value) {
		return this.mOnComplete = value;
	}
	,get_onStartArgs: function() {
		return this.mOnStartArgs;
	}
	,set_onStartArgs: function(value) {
		return this.mOnStartArgs = value;
	}
	,get_onUpdateArgs: function() {
		return this.mOnUpdateArgs;
	}
	,set_onUpdateArgs: function(value) {
		return this.mOnUpdateArgs = value;
	}
	,get_onRepeatArgs: function() {
		return this.mOnRepeatArgs;
	}
	,set_onRepeatArgs: function(value) {
		return this.mOnRepeatArgs = value;
	}
	,get_onCompleteArgs: function() {
		return this.mOnCompleteArgs;
	}
	,set_onCompleteArgs: function(value) {
		return this.mOnCompleteArgs = value;
	}
	,get_nextTween: function() {
		return this.mNextTween;
	}
	,set_nextTween: function(value) {
		return this.mNextTween = value;
	}
	,__class__: starling_animation_Tween
	,__properties__: {set_nextTween:"set_nextTween",get_nextTween:"get_nextTween",set_onCompleteArgs:"set_onCompleteArgs",get_onCompleteArgs:"get_onCompleteArgs",set_onRepeatArgs:"set_onRepeatArgs",get_onRepeatArgs:"get_onRepeatArgs",set_onUpdateArgs:"set_onUpdateArgs",get_onUpdateArgs:"get_onUpdateArgs",set_onStartArgs:"set_onStartArgs",get_onStartArgs:"get_onStartArgs",set_onComplete:"set_onComplete",get_onComplete:"get_onComplete",set_onRepeat:"set_onRepeat",get_onRepeat:"get_onRepeat",set_onUpdate:"set_onUpdate",get_onUpdate:"get_onUpdate",set_onStart:"set_onStart",get_onStart:"get_onStart",set_roundToInt:"set_roundToInt",get_roundToInt:"get_roundToInt",set_reverse:"set_reverse",get_reverse:"get_reverse",set_repeatDelay:"set_repeatDelay",get_repeatDelay:"get_repeatDelay",set_repeatCount:"set_repeatCount",get_repeatCount:"get_repeatCount",set_delay:"set_delay",get_delay:"get_delay",get_progress:"get_progress",get_currentTime:"get_currentTime",get_totalTime:"get_totalTime",set_transitionFunc:"set_transitionFunc",get_transitionFunc:"get_transitionFunc",set_transition:"set_transition",get_transition:"get_transition",get_target:"get_target",get_isComplete:"get_isComplete"}
});
var starling_core_RenderSupport = function() {
	this.mStencilReferenceValue = 0;
	this.mMasks = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	this.mProjectionMatrix = new openfl_geom_Matrix();
	this.mModelViewMatrix = new openfl_geom_Matrix();
	this.mMvpMatrix = new openfl_geom_Matrix();
	this.mMatrixStack = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	this.mMatrixStackSize = 0;
	this.mProjectionMatrix3D = new openfl_geom_Matrix3D();
	this.mModelViewMatrix3D = new openfl_geom_Matrix3D();
	this.mMvpMatrix3D = new openfl_geom_Matrix3D();
	this.mMatrixStack3D = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	this.mMatrixStack3DSize = 0;
	this.mDrawCount = 0;
	this.mBlendMode = "normal";
	this.mClipRectStack = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	this.mClipRectStackSize = 0;
	this.mCurrentQuadBatchID = 0;
	var a = [new starling_display_QuadBatch(true)];
	var vector = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	var _g = 0;
	var _g1 = a.length;
	while(_g < _g1) {
		var i = _g++;
		vector.data.set(i,a[i]);
	}
	this.mQuadBatches = vector;
	this.loadIdentity();
	this.setProjectionMatrix(0,0,400,300);
};
$hxClasses["starling.core.RenderSupport"] = starling_core_RenderSupport;
starling_core_RenderSupport.__name__ = "starling.core.RenderSupport";
starling_core_RenderSupport.transformMatrixForObject = function(matrix,object) {
	starling_utils_MatrixUtil.prependMatrix(matrix,object.get_transformationMatrix());
};
starling_core_RenderSupport.setDefaultBlendFactors = function(premultipliedAlpha) {
	starling_core_RenderSupport.setBlendFactors(premultipliedAlpha);
};
starling_core_RenderSupport.setBlendFactors = function(premultipliedAlpha,blendMode) {
	if(blendMode == null) {
		blendMode = "normal";
	}
	var blendFactors = starling_display_BlendMode.getBlendFactors(blendMode,premultipliedAlpha);
	starling_core_Starling.get_current().get_context().setBlendFactors(blendFactors[0],blendFactors[1]);
};
starling_core_RenderSupport._clear = function(rgb,alpha) {
	if(alpha == null) {
		alpha = 0.0;
	}
	if(rgb == null) {
		rgb = 0;
	}
	starling_core_Starling.get_current().get_context().clear(starling_utils_Color.getRed(rgb) / 255.0,starling_utils_Color.getGreen(rgb) / 255.0,starling_utils_Color.getBlue(rgb) / 255.0,alpha);
};
starling_core_RenderSupport.assembleAgal = function(vertexShader,fragmentShader,resultProgram) {
	if(resultProgram == null) {
		var context = starling_core_Starling.get_current().get_context();
		if(context == null) {
			throw new js__$Boot_HaxeError(new starling_errors_MissingContextError());
		}
		resultProgram = context.createProgram();
	}
	resultProgram.upload(starling_core_RenderSupport.sAssembler.assemble(openfl_display3D__$Context3DProgramType_Context3DProgramType_$Impl_$.toString(1),vertexShader),starling_core_RenderSupport.sAssembler.assemble(openfl_display3D__$Context3DProgramType_Context3DProgramType_$Impl_$.toString(0),fragmentShader));
	return resultProgram;
};
starling_core_RenderSupport.getTextureLookupFlags = function(format,mipMapping,repeat,smoothing) {
	if(smoothing == null) {
		smoothing = "bilinear";
	}
	if(repeat == null) {
		repeat = false;
	}
	var options = ["2d",repeat ? "repeat" : "clamp"];
	if(format == 3) {
		options.push("dxt1");
	} else if(format == 4) {
		options.push("dxt5");
	}
	if(smoothing == "none") {
		options.push("nearest");
		options.push(mipMapping ? "mipnearest" : "mipnone");
	} else if(smoothing == "bilinear") {
		options.push("linear");
		options.push(mipMapping ? "mipnearest" : "mipnone");
	} else {
		options.push("linear");
		options.push(mipMapping ? "miplinear" : "mipnone");
	}
	return "<" + options.join(",") + ">";
};
starling_core_RenderSupport.prototype = {
	mProjectionMatrix: null
	,mModelViewMatrix: null
	,mMvpMatrix: null
	,mMatrixStack: null
	,mMatrixStackSize: null
	,mProjectionMatrix3D: null
	,mModelViewMatrix3D: null
	,mMvpMatrix3D: null
	,mMatrixStack3D: null
	,mMatrixStack3DSize: null
	,mDrawCount: null
	,mBlendMode: null
	,mClipRectStack: null
	,mClipRectStackSize: null
	,mQuadBatches: null
	,mCurrentQuadBatchID: null
	,dispose: function() {
		var quadBatch = this.mQuadBatches.data.iterator();
		while(quadBatch.hasNext()) {
			var quadBatch1 = quadBatch.next();
			quadBatch1.dispose();
		}
	}
	,setProjectionMatrix: function(x,y,width,height,stageWidth,stageHeight,cameraPos) {
		if(stageHeight == null) {
			stageHeight = 0;
		}
		if(stageWidth == null) {
			stageWidth = 0;
		}
		if(stageWidth <= 0) {
			stageWidth = width;
		}
		if(stageHeight <= 0) {
			stageHeight = height;
		}
		if(cameraPos == null) {
			cameraPos = starling_core_RenderSupport.sPoint3D;
			cameraPos.setTo(stageWidth / 2,stageHeight / 2,stageWidth / Math.tan(0.5) * 0.5);
		}
		this.mProjectionMatrix.setTo(2.0 / width,0,0,-2.0 / height,-(2 * x + width) / width,(2 * y + height) / height);
		var focalLength = Math.abs(cameraPos.z);
		var offsetX = cameraPos.x - stageWidth / 2;
		var offsetY = cameraPos.y - stageHeight / 2;
		var far = focalLength * 20;
		var near = 1;
		var scaleX = stageWidth / width;
		var scaleY = stageHeight / height;
		starling_core_RenderSupport.sMatrixData.data.set(0,2 * focalLength / stageWidth);
		starling_core_RenderSupport.sMatrixData.data.set(5,-2 * focalLength / stageHeight);
		starling_core_RenderSupport.sMatrixData.data.set(10,far / (far - near));
		starling_core_RenderSupport.sMatrixData.data.set(14,-far * near / (far - near));
		starling_core_RenderSupport.sMatrixData.data.set(11,1);
		var _g = starling_core_RenderSupport.sMatrixData;
		var value = _g.data.get(0) * scaleX;
		_g.data.set(0,value);
		var _g1 = starling_core_RenderSupport.sMatrixData;
		var value1 = _g1.data.get(5) * scaleY;
		_g1.data.set(5,value1);
		starling_core_RenderSupport.sMatrixData.data.set(8,scaleX - 1 - 2 * scaleX * (x - offsetX) / stageWidth);
		starling_core_RenderSupport.sMatrixData.data.set(9,-scaleY + 1 + 2 * scaleY * (y - offsetY) / stageHeight);
		this.mProjectionMatrix3D.copyRawDataFrom(starling_core_RenderSupport.sMatrixData);
		this.mProjectionMatrix3D.prependTranslation(-stageWidth / 2.0 - offsetX,-stageHeight / 2.0 - offsetY,focalLength);
		this.applyClipRect();
		this.updateBatchersProjectionMatrix();
	}
	,setOrthographicProjection: function(x,y,width,height) {
		var stage = starling_core_Starling.get_current().get_stage();
		starling_core_RenderSupport.sClipRect.setTo(x,y,width,height);
		this.setProjectionMatrix(x,y,width,height,stage.get_stageWidth(),stage.get_stageHeight(),stage.get_cameraPosition());
	}
	,loadIdentity: function() {
		this.mModelViewMatrix.identity();
		this.mModelViewMatrix3D.identity();
	}
	,translateMatrix: function(dx,dy) {
		starling_utils_MatrixUtil.prependTranslation(this.mModelViewMatrix,dx,dy);
	}
	,rotateMatrix: function(angle) {
		starling_utils_MatrixUtil.prependRotation(this.mModelViewMatrix,angle);
	}
	,scaleMatrix: function(sx,sy) {
		starling_utils_MatrixUtil.prependScale(this.mModelViewMatrix,sx,sy);
	}
	,prependMatrix: function(matrix) {
		starling_utils_MatrixUtil.prependMatrix(this.mModelViewMatrix,matrix);
	}
	,transformMatrix: function(object) {
		starling_utils_MatrixUtil.prependMatrix(this.mModelViewMatrix,object.get_transformationMatrix());
	}
	,pushMatrix: function() {
		if(this.mMatrixStack.data.get_length() < this.mMatrixStackSize + 1) {
			var this1 = this.mMatrixStack;
			var x = new openfl_geom_Matrix();
			this1.data.push(x);
		}
		this.mMatrixStack.data.get(this.mMatrixStackSize++).copyFrom(this.mModelViewMatrix);
	}
	,popMatrix: function() {
		this.mModelViewMatrix.copyFrom(this.mMatrixStack.data.get(--this.mMatrixStackSize));
	}
	,resetMatrix: function() {
		this.mMatrixStackSize = 0;
		this.mMatrixStack3DSize = 0;
		this.loadIdentity();
	}
	,get_mvpMatrix: function() {
		this.mMvpMatrix.copyFrom(this.mModelViewMatrix);
		this.mMvpMatrix.concat(this.mProjectionMatrix);
		return this.mMvpMatrix;
	}
	,get_modelViewMatrix: function() {
		return this.mModelViewMatrix;
	}
	,get_projectionMatrix: function() {
		return this.mProjectionMatrix;
	}
	,set_projectionMatrix: function(value) {
		this.mProjectionMatrix.copyFrom(value);
		this.applyClipRect();
		return this.mProjectionMatrix;
	}
	,transformMatrix3D: function(object) {
		this.mModelViewMatrix3D.prepend(starling_utils_MatrixUtil.convertTo3D(this.mModelViewMatrix,starling_core_RenderSupport.sMatrix3D));
		this.mModelViewMatrix3D.prepend(object.get_transformationMatrix3D());
		this.mModelViewMatrix.identity();
	}
	,pushMatrix3D: function() {
		if(this.mMatrixStack3D.data.get_length() < this.mMatrixStack3DSize + 1) {
			var this1 = this.mMatrixStack3D;
			var x = new openfl_geom_Matrix3D();
			this1.data.push(x);
		}
		this.mMatrixStack3D.data.get(this.mMatrixStack3DSize++).copyFrom(this.mModelViewMatrix3D);
	}
	,popMatrix3D: function() {
		this.mModelViewMatrix3D.copyFrom(this.mMatrixStack3D.data.get(--this.mMatrixStack3DSize));
	}
	,get_mvpMatrix3D: function() {
		if(this.mMatrixStack3DSize == 0) {
			starling_utils_MatrixUtil.convertTo3D(this.get_mvpMatrix(),this.mMvpMatrix3D);
		} else {
			this.mMvpMatrix3D.copyFrom(this.mProjectionMatrix3D);
			this.mMvpMatrix3D.prepend(this.mModelViewMatrix3D);
			this.mMvpMatrix3D.prepend(starling_utils_MatrixUtil.convertTo3D(this.mModelViewMatrix,starling_core_RenderSupport.sMatrix3D));
		}
		return this.mMvpMatrix3D;
	}
	,get_projectionMatrix3D: function() {
		return this.mProjectionMatrix3D;
	}
	,set_projectionMatrix3D: function(value) {
		this.mProjectionMatrix3D.copyFrom(value);
		this.updateBatchersProjectionMatrix();
		return value;
	}
	,applyBlendMode: function(premultipliedAlpha) {
		starling_core_RenderSupport.setBlendFactors(premultipliedAlpha,this.mBlendMode);
	}
	,get_blendMode: function() {
		return this.mBlendMode;
	}
	,set_blendMode: function(value) {
		if(value != "auto") {
			this.mBlendMode = value;
		}
		return value;
	}
	,get_renderTarget: function() {
		var _this = starling_core_Starling.get_current().get_contextData();
		if(__map_reserved["Starling.renderTarget"] != null) {
			return _this.getReserved("Starling.renderTarget");
		} else {
			return _this.h["Starling.renderTarget"];
		}
	}
	,set_renderTarget: function(target) {
		this.setRenderTarget(target);
		return target;
	}
	,setRenderTarget: function(target,antiAliasing) {
		if(antiAliasing == null) {
			antiAliasing = 0;
		}
		var _this = starling_core_Starling.get_current().get_contextData();
		if(__map_reserved["Starling.renderTarget"] != null) {
			_this.setReserved("Starling.renderTarget",target);
		} else {
			_this.h["Starling.renderTarget"] = target;
		}
		this.applyClipRect();
		if(target != null) {
			starling_core_Starling.get_current().get_context().__renderSession.batcher.positionScaleY = -1;
			starling_core_Starling.get_current().get_context().setRenderToTexture(target.get_base(),starling_utils_SystemUtil.get_supportsDepthAndStencil(),antiAliasing);
		} else {
			starling_core_Starling.get_current().get_context().__renderSession.batcher.unflipVertical();
			starling_core_Starling.get_current().get_context().setRenderToBackBuffer();
		}
	}
	,pushClipRect: function(rectangle,intersectWithCurrent) {
		if(intersectWithCurrent == null) {
			intersectWithCurrent = true;
		}
		if(this.mClipRectStack.data.get_length() < this.mClipRectStackSize + 1) {
			var this1 = this.mClipRectStack;
			var x = new openfl_geom_Rectangle();
			this1.data.push(x);
		}
		this.mClipRectStack.data.get(this.mClipRectStackSize).copyFrom(rectangle);
		rectangle = this.mClipRectStack.data.get(this.mClipRectStackSize);
		if(intersectWithCurrent && this.mClipRectStackSize > 0) {
			starling_utils_RectangleUtil.intersect(rectangle,this.mClipRectStack.data.get(this.mClipRectStackSize - 1),rectangle);
		}
		++this.mClipRectStackSize;
		this.applyClipRect();
		return rectangle;
	}
	,popClipRect: function() {
		if(this.mClipRectStackSize > 0) {
			--this.mClipRectStackSize;
			this.applyClipRect();
		}
	}
	,applyClipRect: function() {
		this.finishQuadBatch();
		var context = starling_core_Starling.get_current().get_context();
		if(context == null) {
			return;
		}
		if(this.mClipRectStackSize > 0) {
			var width;
			var height;
			var rect = this.mClipRectStack.data.get(this.mClipRectStackSize - 1);
			var renderTarget = this.get_renderTarget();
			if(renderTarget != null) {
				width = renderTarget.get_root().get_nativeWidth() | 0;
				height = renderTarget.get_root().get_nativeHeight() | 0;
			} else {
				width = starling_core_Starling.get_current().get_backBufferWidth();
				height = starling_core_Starling.get_current().get_backBufferHeight();
			}
			starling_utils_MatrixUtil.transformCoords(this.mProjectionMatrix,rect.x,rect.y,starling_core_RenderSupport.sPoint);
			starling_core_RenderSupport.sClipRect.x = (starling_core_RenderSupport.sPoint.x * 0.5 + 0.5) * width;
			starling_core_RenderSupport.sClipRect.y = (0.5 - starling_core_RenderSupport.sPoint.y * 0.5) * height;
			starling_utils_MatrixUtil.transformCoords(this.mProjectionMatrix,rect.get_right(),rect.get_bottom(),starling_core_RenderSupport.sPoint);
			starling_core_RenderSupport.sClipRect.set_right((starling_core_RenderSupport.sPoint.x * 0.5 + 0.5) * width);
			starling_core_RenderSupport.sClipRect.set_bottom((0.5 - starling_core_RenderSupport.sPoint.y * 0.5) * height);
			starling_core_RenderSupport.sBufferRect.setTo(0,0,width,height);
			starling_utils_RectangleUtil.intersect(starling_core_RenderSupport.sClipRect,starling_core_RenderSupport.sBufferRect,starling_core_RenderSupport.sScissorRect);
			if(starling_core_RenderSupport.sScissorRect.width < 1 || starling_core_RenderSupport.sScissorRect.height < 1) {
				starling_core_RenderSupport.sScissorRect.setTo(0,0,1,1);
			}
			context.setScissorRectangle(starling_core_RenderSupport.sScissorRect);
		} else {
			context.setScissorRectangle(null);
		}
	}
	,mMasks: null
	,mStencilReferenceValue: null
	,pushMask: function(mask) {
		var this1 = this.mMasks;
		var index = this.mMasks.data.get_length();
		this1.data.set(index,mask);
		this.mStencilReferenceValue++;
		var context = starling_core_Starling.get_current().get_context();
		if(context == null) {
			return;
		}
		this.finishQuadBatch();
		context.setStencilActions(2,1,2);
		this.drawMask(mask);
		context.setStencilReferenceValue(this.mStencilReferenceValue);
		context.setStencilActions(2,1,5);
	}
	,popMask: function() {
		var mask = this.mMasks.data.pop();
		this.mStencilReferenceValue--;
		var context = starling_core_Starling.get_current().get_context();
		if(context == null) {
			return;
		}
		this.finishQuadBatch();
		context.setStencilActions(2,1,0);
		this.drawMask(mask);
		context.setStencilReferenceValue(this.mStencilReferenceValue);
		context.setStencilActions(2,1,5);
	}
	,drawMask: function(mask) {
		this.pushMatrix();
		var stage = mask.get_stage();
		if(stage != null) {
			mask.getTransformationMatrix(stage,this.mModelViewMatrix);
		} else {
			this.transformMatrix(mask);
		}
		mask.render(this,0.0);
		this.finishQuadBatch();
		this.popMatrix();
	}
	,get_stencilReferenceValue: function() {
		return this.mStencilReferenceValue;
	}
	,set_stencilReferenceValue: function(value) {
		this.mStencilReferenceValue = value;
		if(starling_core_Starling.get_current().get_contextValid()) {
			starling_core_Starling.get_current().get_context().setStencilReferenceValue(value);
		}
		return value;
	}
	,batchQuad: function(quad,parentAlpha,texture,smoothing) {
		if(this.mQuadBatches.data.get(this.mCurrentQuadBatchID).isStateChange(quad.get_tinted(),parentAlpha,texture,smoothing,this.mBlendMode)) {
			this.finishQuadBatch();
		}
		this.mQuadBatches.data.get(this.mCurrentQuadBatchID).addQuad(quad,parentAlpha,texture,smoothing,this.mModelViewMatrix,this.mBlendMode);
	}
	,batchQuadBatch: function(quadBatch,parentAlpha) {
		if(this.mQuadBatches.data.get(this.mCurrentQuadBatchID).isStateChange(quadBatch.get_tinted(),parentAlpha,quadBatch.get_texture(),quadBatch.get_smoothing(),this.mBlendMode,quadBatch.get_numQuads())) {
			this.finishQuadBatch();
		}
		this.mQuadBatches.data.get(this.mCurrentQuadBatchID).addQuadBatch(quadBatch,parentAlpha,this.mModelViewMatrix,this.mBlendMode);
	}
	,finishQuadBatch: function() {
		if(starling_core_Starling.get_current().get_context() != null) {
			starling_core_Starling.get_current().get_context().__renderSession.batcher.flush();
		}
		var currentBatch = this.mQuadBatches.data.get(this.mCurrentQuadBatchID);
		if(currentBatch.get_numQuads() != 0) {
			if(this.mMatrixStack3DSize == 0) {
				currentBatch.renderCustom(this.mProjectionMatrix3D);
			} else {
				this.mMvpMatrix3D.copyFrom(this.mProjectionMatrix3D);
				this.mMvpMatrix3D.prepend(this.mModelViewMatrix3D);
				currentBatch.renderCustom(this.mMvpMatrix3D);
			}
			currentBatch.reset();
			++this.mCurrentQuadBatchID;
			++this.mDrawCount;
			if(this.mQuadBatches.data.get_length() <= this.mCurrentQuadBatchID) {
				var this1 = this.mQuadBatches;
				var x = new starling_display_QuadBatch(true);
				this1.data.push(x);
			}
		}
	}
	,nextFrame: function() {
		this.resetMatrix();
		this.trimQuadBatches();
		this.mMasks.data.set_length(0);
		this.mCurrentQuadBatchID = 0;
		this.mBlendMode = "normal";
		this.mDrawCount = 0;
	}
	,trimQuadBatches: function() {
		var numUsedBatches = this.mCurrentQuadBatchID + 1;
		var numTotalBatches = this.mQuadBatches.data.get_length();
		if(numTotalBatches >= 16 && numTotalBatches > 2 * numUsedBatches) {
			var numToRemove = numTotalBatches - numUsedBatches;
			var _g = 0;
			var _g1 = numToRemove;
			while(_g < _g1) {
				var i = _g++;
				this.mQuadBatches.data.pop().dispose();
			}
		}
	}
	,clear: function(rgb,alpha) {
		if(alpha == null) {
			alpha = 0.0;
		}
		if(rgb == null) {
			rgb = 0;
		}
		starling_core_RenderSupport._clear(rgb,alpha);
	}
	,raiseDrawCount: function(value) {
		if(value == null) {
			value = 1;
		}
		this.mDrawCount = this.mDrawCount + value;
	}
	,get_drawCount: function() {
		return this.mDrawCount;
	}
	,get_batcher: function() {
		return starling_core_Starling.get_current().get_context().__renderSession.batcher;
	}
	,updateBatchersProjectionMatrix: function() {
		if(starling_core_Starling.get_current().get_context() == null) {
			return;
		}
		starling_core_RenderSupport.sBatcherProjectionMatrix[0] = this.get_projectionMatrix3D().rawData.data.get(0);
		starling_core_RenderSupport.sBatcherProjectionMatrix[1] = this.get_projectionMatrix3D().rawData.data.get(1);
		starling_core_RenderSupport.sBatcherProjectionMatrix[2] = this.get_projectionMatrix3D().rawData.data.get(2);
		starling_core_RenderSupport.sBatcherProjectionMatrix[3] = this.get_projectionMatrix3D().rawData.data.get(3);
		starling_core_RenderSupport.sBatcherProjectionMatrix[4] = this.get_projectionMatrix3D().rawData.data.get(4);
		starling_core_RenderSupport.sBatcherProjectionMatrix[5] = this.get_projectionMatrix3D().rawData.data.get(5);
		starling_core_RenderSupport.sBatcherProjectionMatrix[6] = this.get_projectionMatrix3D().rawData.data.get(6);
		starling_core_RenderSupport.sBatcherProjectionMatrix[7] = this.get_projectionMatrix3D().rawData.data.get(7);
		starling_core_RenderSupport.sBatcherProjectionMatrix[8] = this.get_projectionMatrix3D().rawData.data.get(8);
		starling_core_RenderSupport.sBatcherProjectionMatrix[9] = this.get_projectionMatrix3D().rawData.data.get(9);
		starling_core_RenderSupport.sBatcherProjectionMatrix[10] = this.get_projectionMatrix3D().rawData.data.get(10);
		starling_core_RenderSupport.sBatcherProjectionMatrix[11] = this.get_projectionMatrix3D().rawData.data.get(11);
		starling_core_RenderSupport.sBatcherProjectionMatrix[12] = this.get_projectionMatrix3D().rawData.data.get(12);
		starling_core_RenderSupport.sBatcherProjectionMatrix[13] = this.get_projectionMatrix3D().rawData.data.get(13);
		starling_core_RenderSupport.sBatcherProjectionMatrix[14] = this.get_projectionMatrix3D().rawData.data.get(14);
		starling_core_RenderSupport.sBatcherProjectionMatrix[15] = this.get_projectionMatrix3D().rawData.data.get(15);
	}
	,__class__: starling_core_RenderSupport
	,__properties__: {get_batcher:"get_batcher",get_drawCount:"get_drawCount",set_stencilReferenceValue:"set_stencilReferenceValue",get_stencilReferenceValue:"get_stencilReferenceValue",set_renderTarget:"set_renderTarget",get_renderTarget:"get_renderTarget",set_blendMode:"set_blendMode",get_blendMode:"get_blendMode",set_projectionMatrix3D:"set_projectionMatrix3D",get_projectionMatrix3D:"get_projectionMatrix3D",get_mvpMatrix3D:"get_mvpMatrix3D",set_projectionMatrix:"set_projectionMatrix",get_projectionMatrix:"get_projectionMatrix",get_modelViewMatrix:"get_modelViewMatrix",get_mvpMatrix:"get_mvpMatrix"}
};
var starling_core_Starling = function(rootClass,stage,viewPort,stage3D,renderMode,profile) {
	if(profile == null) {
		profile = "auto";
	}
	if(renderMode == null) {
		renderMode = 0;
	}
	starling_events_EventDispatcher.call(this);
	if(stage == null) {
		throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Stage must not be null"));
	}
	if(viewPort == null) {
		viewPort = new openfl_geom_Rectangle(0,0,stage.stageWidth,stage.stageHeight);
	}
	if(stage3D == null) {
		stage3D = stage.stage3Ds.data.get(0);
	}
	starling_utils_SystemUtil.initialize();
	starling_core_Starling.sAll.data.push(this);
	if(starling_core_Starling.sCurrent == null) {
		this.makeCurrent();
	}
	this.mRootClass = rootClass;
	this.mViewPort = viewPort;
	this.mPreviousViewPort = new openfl_geom_Rectangle();
	this.mStage3D = stage3D;
	this.mStage = new starling_display_Stage(viewPort.width | 0,viewPort.height | 0,stage.get_color());
	this.mNativeOverlay = new openfl_display_Sprite();
	this.mNativeStage = stage;
	this.mNativeStage.addChild(this.mNativeOverlay);
	this.mNativeStageContentScaleFactor = 1.0;
	this.mTouchProcessor = new starling_events_TouchProcessor(this.mStage);
	this.mJuggler = new starling_animation_Juggler();
	this.mAntiAliasing = 0;
	this.mSimulateMultitouch = false;
	this.mEnableErrorChecking = false;
	this.mSupportHighResolutions = false;
	this.mBroadcastKeyboardEvents = true;
	this.mLastFrameTimestamp = openfl_Lib.getTimer() / 1000.0;
	this.mSupport = new starling_core_RenderSupport();
	var this1 = starling_core_Starling.sContextData;
	var v = new haxe_ds_StringMap();
	this1.set(stage3D,v);
	var this2 = starling_core_Starling.sContextData.h[stage3D.__id__];
	var v1 = new haxe_ds_StringMap();
	var _this = this2;
	var value = v1;
	if(__map_reserved["Starling.programs"] != null) {
		_this.setReserved("Starling.programs",value);
	} else {
		_this.h["Starling.programs"] = value;
	}
	stage.scaleMode = 2;
	stage.align = 6;
	var _g = 0;
	var _g1 = this.get_touchEventTypes();
	while(_g < _g1.length) {
		var touchEventType = _g1[_g];
		++_g;
		stage.addEventListener(touchEventType,$bind(this,this.onTouch),false,0,true);
	}
	stage.addEventListener("enterFrame",$bind(this,this.onEnterFrame),false,0,true);
	stage.addEventListener("keyDown",$bind(this,this.onKey),false,0,true);
	stage.addEventListener("keyUp",$bind(this,this.onKey),false,0,true);
	stage.addEventListener("resize",$bind(this,this.onResize),false,0,true);
	stage.addEventListener("mouseLeave",$bind(this,this.onMouseLeave),false,0,true);
	this.mStage3D.addEventListener("context3DCreate",$bind(this,this.onContextCreated),false,10,true);
	this.mStage3D.addEventListener("error",$bind(this,this.onStage3DError),false,10,true);
	if(this.mStage3D.context3D != null && this.mStage3D.context3D.driverInfo != "Disposed") {
		this.mProfile = this.mStage3D.context3D.profile;
		if(stage3D.context3D != null) {
			haxe_Timer.delay($bind(this,this.initialize),1);
		}
	} else {
		if(!starling_utils_SystemUtil.get_supportsDepthAndStencil()) {
			haxe_Log.trace("[Starling] Mask support requires 'depthAndStencil' to be enabled" + " in the application descriptor.",{ fileName : "starling/core/Starling.hx", lineNumber : 326, className : "starling.core.Starling", methodName : "new"});
		}
		this.mShareContext = false;
		this.requestContext3D(stage3D,renderMode,profile);
	}
};
$hxClasses["starling.core.Starling"] = starling_core_Starling;
starling_core_Starling.__name__ = "starling.core.Starling";
starling_core_Starling.__properties__ = {set_handleLostContext:"set_handleLostContext",get_handleLostContext:"get_handleLostContext",set_multitouchEnabled:"set_multitouchEnabled",get_multitouchEnabled:"get_multitouchEnabled",get_all:"get_all",get_current:"get_current"};
starling_core_Starling.get_current = function() {
	return starling_core_Starling.sCurrent;
};
starling_core_Starling.get_all = function() {
	return starling_core_Starling.sAll;
};
starling_core_Starling.get_multitouchEnabled = function() {
	return openfl_ui_Multitouch.inputMode == 2;
};
starling_core_Starling.set_multitouchEnabled = function(value) {
	if(starling_core_Starling.sCurrent != null) {
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("'multitouchEnabled' must be set before Starling instance is created"));
	} else {
		openfl_ui_Multitouch.inputMode = value ? 2 : 1;
	}
	return value;
};
starling_core_Starling.get_handleLostContext = function() {
	return starling_core_Starling.sHandleLostContext;
};
starling_core_Starling.set_handleLostContext = function(value) {
	if(starling_core_Starling.sCurrent != null) {
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("'handleLostContext' must be set before Starling instance is created"));
	} else {
		starling_core_Starling.sHandleLostContext = value;
	}
	return value;
};
starling_core_Starling.__super__ = starling_events_EventDispatcher;
starling_core_Starling.prototype = $extend(starling_events_EventDispatcher.prototype,{
	mStage3D: null
	,mStage: null
	,mRootClass: null
	,mRoot: null
	,mJuggler: null
	,mSupport: null
	,mTouchProcessor: null
	,mAntiAliasing: null
	,mSimulateMultitouch: null
	,mEnableErrorChecking: null
	,mLastFrameTimestamp: null
	,mLeftMouseDown: null
	,mStatsDisplay: null
	,mShareContext: null
	,mProfile: null
	,mContext: null
	,mStarted: null
	,mRendering: null
	,mSupportHighResolutions: null
	,mBroadcastKeyboardEvents: null
	,mViewPort: null
	,mPreviousViewPort: null
	,mClippedViewPort: null
	,mNativeStage: null
	,mNativeOverlay: null
	,mNativeStageContentScaleFactor: null
	,dispose: function() {
		this.stop(true);
		this.mNativeStage.removeEventListener("enterFrame",$bind(this,this.onEnterFrame),false);
		this.mNativeStage.removeEventListener("keyDown",$bind(this,this.onKey),false);
		this.mNativeStage.removeEventListener("keyUp",$bind(this,this.onKey),false);
		this.mNativeStage.removeEventListener("resize",$bind(this,this.onResize),false);
		this.mNativeStage.removeEventListener("mouseLeave",$bind(this,this.onMouseLeave),false);
		this.mNativeStage.removeChild(this.mNativeOverlay);
		this.mStage3D.removeEventListener("context3DCreate",$bind(this,this.onContextCreated),false);
		this.mStage3D.removeEventListener("error",$bind(this,this.onStage3DError),false);
		var _g = 0;
		var _g1 = this.get_touchEventTypes();
		while(_g < _g1.length) {
			var touchEventType = _g1[_g];
			++_g;
			this.mNativeStage.removeEventListener(touchEventType,$bind(this,this.onTouch),false);
		}
		if(this.mStage != null) {
			this.mStage.dispose();
		}
		if(this.mSupport != null) {
			this.mSupport.dispose();
		}
		if(this.mTouchProcessor != null) {
			this.mTouchProcessor.dispose();
		}
		if(starling_core_Starling.sCurrent == this) {
			starling_core_Starling.sCurrent = null;
		}
		if(this.mContext != null && !this.mShareContext) {
			this.mContext.dispose();
		}
		var index = starling_core_Starling.sAll.data.indexOf(this,0);
		if(index != -1) {
			new openfl__$Vector_AbstractVector(starling_core_Starling.sAll.data.splice(index,1));
		}
	}
	,requestContext3D: function(stage3D,renderMode,profile) {
		var _gthis = this;
		var profiles = [];
		var currentProfile;
		if(profile == "auto") {
			profiles = [2,0,1];
		} else if(typeof(profile) == "number" && ((profile | 0) === profile)) {
			profiles = [profile];
		} else if(((profile) instanceof Array) && profile.__enum__ == null) {
			profiles = profile;
		} else {
			throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Profile must be of type 'Context3DProfile' or 'Array'"));
		}
		var onFinished = null;
		var onError = null;
		var requestNextProfile = null;
		requestNextProfile = function() {
			currentProfile = profiles.shift();
			try {
				starling_utils_Execute.execute(($_=_gthis.mStage3D,$bind($_,$_.requestContext3D)),[renderMode,currentProfile]);
			} catch( error ) {
				haxe_CallStack.lastException = error;
				var error1 = ((error) instanceof js__$Boot_HaxeError) ? error.val : error;
				if(((error1) instanceof openfl_errors_Error)) {
					if(profiles.length != 0) {
						haxe_Timer.delay(requestNextProfile,1);
					} else {
						throw new js__$Boot_HaxeError(error1);
					}
				} else {
					throw error;
				}
			}
		};
		var onCreated = function(event) {
			var context = stage3D.context3D;
			if(renderMode == 0 && profiles.length != 0 && (context.driverInfo != null && context.driverInfo.indexOf("Software") != -1)) {
				onError(event);
			} else {
				_gthis.mProfile = currentProfile;
				onFinished();
			}
		};
		onError = function(event1) {
			if(profiles.length != 0) {
				event1.stopImmediatePropagation();
				haxe_Timer.delay(requestNextProfile,1);
			} else {
				onFinished();
			}
		};
		onFinished = function() {
			_gthis.mStage3D.removeEventListener("context3DCreate",onCreated);
			_gthis.mStage3D.removeEventListener("error",onError);
		};
		this.mStage3D.addEventListener("context3DCreate",onCreated,false,100);
		this.mStage3D.addEventListener("error",onError,false,100);
		requestNextProfile();
	}
	,initialize: function() {
		this.makeCurrent();
		this.initializeGraphicsAPI();
		this.initializeRoot();
		this.mTouchProcessor.set_simulateMultitouch(this.mSimulateMultitouch);
		this.mLastFrameTimestamp = openfl_Lib.getTimer() / 1000.0;
	}
	,initializeGraphicsAPI: function() {
		this.mContext = this.mStage3D.context3D;
		this.mContext.enableErrorChecking = this.mEnableErrorChecking;
		var this1 = this.get_contextData();
		var v = new haxe_ds_StringMap();
		var _this = this1;
		var value = v;
		if(__map_reserved["Starling.programs"] != null) {
			_this.setReserved("Starling.programs",value);
		} else {
			_this.h["Starling.programs"] = value;
		}
		haxe_Log.trace("[Starling] Initialization complete.",{ fileName : "starling/core/Starling.hx", lineNumber : 452, className : "starling.core.Starling", methodName : "initializeGraphicsAPI"});
		haxe_Log.trace("[Starling] Display Driver: " + this.mContext.driverInfo,{ fileName : "starling/core/Starling.hx", lineNumber : 453, className : "starling.core.Starling", methodName : "initializeGraphicsAPI"});
		this.updateViewPort(true);
		this.dispatchEventWith("context3DCreate",false,this.mContext);
	}
	,initializeRoot: function() {
		if(this.mRoot == null && this.mRootClass != null) {
			this.mRoot = Type.createInstance(this.mRootClass,[]);
			if(this.mRoot == null) {
				throw new js__$Boot_HaxeError(new openfl_errors_Error("Invalid root class: " + Std.string(this.mRootClass)));
			}
			this.mStage.addChildAt(this.mRoot,0);
			this.dispatchEventWith("rootCreated",false,this.mRoot);
		}
	}
	,nextFrame: function() {
		var now = openfl_Lib.getTimer() / 1000.0;
		var passedTime = now - this.mLastFrameTimestamp;
		this.mLastFrameTimestamp = now;
		if(passedTime > 1.0) {
			passedTime = 1.0;
		}
		if(passedTime < 0.0) {
			passedTime = 1.0 / this.mNativeStage.get_frameRate();
		}
		this.advanceTime(passedTime);
		this.render();
	}
	,advanceTime: function(passedTime) {
		if(!this.get_contextValid()) {
			return;
		}
		this.makeCurrent();
		this.mTouchProcessor.advanceTime(passedTime);
		this.mStage.advanceTime(passedTime);
		this.mJuggler.advanceTime(passedTime);
	}
	,render: function() {
		if(!this.get_contextValid()) {
			return;
		}
		this.makeCurrent();
		this.updateViewPort();
		this.dispatchEventWith("render");
		var scaleX = this.mViewPort.width / this.mStage.get_stageWidth();
		var scaleY = this.mViewPort.height / this.mStage.get_stageHeight();
		this.mContext.setDepthTest(false,0);
		this.mContext.setCulling(3);
		this.mSupport.nextFrame();
		this.mSupport.set_stencilReferenceValue(0);
		this.mSupport.set_renderTarget(null);
		this.mSupport.setProjectionMatrix(this.mViewPort.x < 0 ? -this.mViewPort.x / scaleX : 0.0,this.mViewPort.y < 0 ? -this.mViewPort.y / scaleY : 0.0,this.mClippedViewPort.width / scaleX,this.mClippedViewPort.height / scaleY,this.mStage.get_stageWidth(),this.mStage.get_stageHeight(),this.mStage.get_cameraPosition());
		if(!this.mShareContext) {
			starling_core_RenderSupport._clear(this.mStage.get_color(),1.0);
		}
		this.mStage.render(this.mSupport,1.0);
		this.mSupport.finishQuadBatch();
		if(this.mStatsDisplay != null) {
			this.mStatsDisplay.set_drawCount(this.mSupport.get_drawCount());
		}
		if(!this.mShareContext) {
			this.mContext.present();
		}
	}
	,updateViewPort: function(forceUpdate) {
		if(forceUpdate == null) {
			forceUpdate = false;
		}
		if(forceUpdate || this.mPreviousViewPort.width != this.mViewPort.width || this.mPreviousViewPort.height != this.mViewPort.height || this.mPreviousViewPort.x != this.mViewPort.x || this.mPreviousViewPort.y != this.mViewPort.y) {
			this.mPreviousViewPort.setTo(this.mViewPort.x,this.mViewPort.y,this.mViewPort.width,this.mViewPort.height);
			this.mClippedViewPort = this.mViewPort.intersection(new openfl_geom_Rectangle(0,0,this.mNativeStage.stageWidth,this.mNativeStage.stageHeight));
			if(!this.mShareContext) {
				if(this.mProfile == 1) {
					this.configureBackBuffer(32,32,this.mAntiAliasing,true);
				}
				this.mStage3D.set_x(this.mClippedViewPort.x);
				this.mStage3D.set_y(this.mClippedViewPort.y);
				this.configureBackBuffer(this.mClippedViewPort.width | 0,this.mClippedViewPort.height | 0,this.mAntiAliasing,true,this.mSupportHighResolutions);
				if(this.mSupportHighResolutions && Reflect.getProperty(this.mNativeStage,"contentsScaleFactor") != null) {
					this.mNativeStageContentScaleFactor = Reflect.getProperty(this.mNativeStage,"contentsScaleFactor");
				} else {
					this.mNativeStageContentScaleFactor = 1.0;
				}
			}
		}
	}
	,configureBackBuffer: function(width,height,antiAlias,enableDepthAndStencil,wantsBestResolution) {
		if(wantsBestResolution == null) {
			wantsBestResolution = false;
		}
		enableDepthAndStencil = enableDepthAndStencil && starling_utils_SystemUtil.get_supportsDepthAndStencil();
		width = width < 32 ? 32 : width;
		height = height < 32 ? 32 : height;
		this.mContext.configureBackBuffer(width,height,antiAlias,enableDepthAndStencil,wantsBestResolution);
	}
	,updateNativeOverlay: function() {
		this.mNativeOverlay.set_x(this.mViewPort.x);
		this.mNativeOverlay.set_y(this.mViewPort.y);
		this.mNativeOverlay.set_scaleX(this.mViewPort.width / this.mStage.get_stageWidth());
		this.mNativeOverlay.set_scaleY(this.mViewPort.height / this.mStage.get_stageHeight());
	}
	,stopWithFatalError: function(message) {
		var background = new openfl_display_Shape();
		background.get_graphics().beginFill(0,0.8);
		background.get_graphics().drawRect(0,0,this.mStage.get_stageWidth(),this.mStage.get_stageHeight());
		background.get_graphics().endFill();
		var textField = new openfl_text_TextField();
		var textFormat = new openfl_text_TextFormat("_sans",14,16777215);
		textFormat.align = 0;
		textField.set_defaultTextFormat(textFormat);
		textField.set_wordWrap(true);
		textField.set_width(this.mStage.get_stageWidth() * 0.75);
		textField.set_autoSize(0);
		textField.set_text(message);
		textField.set_x((this.mStage.get_stageWidth() - textField.get_width()) / 2);
		textField.set_y((this.mStage.get_stageHeight() - textField.get_height()) / 2);
		textField.set_background(true);
		textField.set_backgroundColor(5570560);
		this.updateNativeOverlay();
		this.get_nativeOverlay().addChild(background);
		this.get_nativeOverlay().addChild(textField);
		this.stop(true);
		haxe_Log.trace("[Starling]",{ fileName : "starling/core/Starling.hx", lineNumber : 621, className : "starling.core.Starling", methodName : "stopWithFatalError", customParams : [message]});
		this.dispatchEventWith("fatalError",false,message);
	}
	,makeCurrent: function() {
		starling_core_Starling.sCurrent = this;
	}
	,start: function() {
		this.mStarted = this.mRendering = true;
		this.mLastFrameTimestamp = openfl_Lib.getTimer() / 1000.0;
	}
	,stop: function(suspendRendering) {
		if(suspendRendering == null) {
			suspendRendering = false;
		}
		this.mStarted = false;
		this.mRendering = !suspendRendering;
	}
	,onStage3DError: function(event) {
		if(event.errorID == 3702) {
			var mode = openfl_system_Capabilities.playerType == "Desktop" ? "renderMode" : "wmode";
			this.stopWithFatalError("Context3D not available! Possible reasons: wrong " + mode + " or missing device support.");
		} else {
			this.stopWithFatalError("Stage3D error: " + event.text);
		}
	}
	,onContextCreated: function(event) {
		if(!starling_core_Starling.get_handleLostContext() && this.mContext != null) {
			event.stopImmediatePropagation();
			this.stopWithFatalError("The application lost the device context!");
			haxe_Log.trace("[Starling] Enable 'Starling.handleLostContext' to avoid this error.",{ fileName : "starling/core/Starling.hx", lineNumber : 667, className : "starling.core.Starling", methodName : "onContextCreated"});
		} else {
			this.initialize();
		}
	}
	,onEnterFrame: function(event) {
		if(!this.mShareContext) {
			if(this.mStarted) {
				this.nextFrame();
			} else if(this.mRendering) {
				this.render();
			}
		}
		this.updateNativeOverlay();
	}
	,onKey: function(event) {
		if(!this.mStarted) {
			return;
		}
		var keyEvent = new starling_events_KeyboardEvent(event.type,event.charCode,event.keyCode,event.keyLocation,event.ctrlKey,event.altKey,event.shiftKey);
		this.makeCurrent();
		if(this.mBroadcastKeyboardEvents) {
			this.mStage.broadcastEvent(keyEvent);
		} else {
			this.mStage.dispatchEvent(keyEvent);
		}
		if(keyEvent.isDefaultPrevented()) {
			event.preventDefault();
		}
	}
	,onResize: function(event) {
		var _gthis = this;
		var stageWidth = (js_Boot.__cast(event.target , openfl_display_Stage)).stageWidth;
		var stageHeight = (js_Boot.__cast(event.target , openfl_display_Stage)).stageHeight;
		var dispatchResizeEvent = null;
		dispatchResizeEvent = function() {
			_gthis.makeCurrent();
			_gthis.removeEventListener("context3DCreate",dispatchResizeEvent);
			_gthis.mStage.dispatchEvent(new starling_events_ResizeEvent("resize",stageWidth,stageHeight));
		};
		if(this.get_contextValid()) {
			dispatchResizeEvent();
		} else {
			this.addEventListener("context3DCreate",dispatchResizeEvent);
		}
	}
	,onMouseLeave: function(event) {
		this.mTouchProcessor.enqueueMouseLeftStage();
	}
	,onTouch: function(event) {
		if(!this.mStarted) {
			return;
		}
		var globalX;
		var globalY;
		var touchID;
		var phase = null;
		var pressure = 1.0;
		var width = 1.0;
		var height = 1.0;
		if(((event) instanceof openfl_events_MouseEvent)) {
			var mouseEvent = event;
			globalX = mouseEvent.stageX;
			globalY = mouseEvent.stageY;
			touchID = 0;
			if(event.type == "mouseDown") {
				this.mLeftMouseDown = true;
			} else if(event.type == "mouseUp") {
				this.mLeftMouseDown = false;
			}
		} else {
			var touchEvent = js_Boot.__cast(event , openfl_events_TouchEvent);
			if(openfl_ui_Mouse.supportsCursor && touchEvent.isPrimaryTouchPoint) {
				return;
			} else {
				globalX = touchEvent.stageX;
				globalY = touchEvent.stageY;
				touchID = touchEvent.touchPointID;
				pressure = touchEvent.pressure;
				width = touchEvent.sizeX;
				height = touchEvent.sizeY;
			}
		}
		switch(event.type) {
		case "mouseDown":
			phase = "began";
			break;
		case "mouseMove":
			phase = this.mLeftMouseDown ? "moved" : "hover";
			break;
		case "mouseUp":
			phase = "ended";
			break;
		case "touchBegin":
			phase = "began";
			break;
		case "touchEnd":
			phase = "ended";
			break;
		case "touchMove":
			phase = "moved";
			break;
		}
		globalX = this.mStage.get_stageWidth() * (globalX - this.mViewPort.x) / this.mViewPort.width;
		globalY = this.mStage.get_stageHeight() * (globalY - this.mViewPort.y) / this.mViewPort.height;
		this.mTouchProcessor.enqueue(touchID,phase,globalX,globalY,pressure,width,height);
		if(event.type == "mouseUp" && openfl_ui_Mouse.supportsCursor) {
			this.mTouchProcessor.enqueue(touchID,"hover",globalX,globalY);
		}
	}
	,get_touchEventTypes: function() {
		var types = [];
		if(starling_core_Starling.get_multitouchEnabled()) {
			types.push("touchBegin");
			types.push("touchMove");
			types.push("touchEnd");
		}
		if(!starling_core_Starling.get_multitouchEnabled() || openfl_ui_Mouse.supportsCursor) {
			types.push("mouseDown");
			types.push("mouseMove");
			types.push("mouseUp");
		}
		return types;
	}
	,registerProgram: function(name,vertexShader,fragmentShader) {
		this.deleteProgram(name);
		var program = this.mContext.createProgram();
		program.upload(vertexShader,fragmentShader);
		var _this = this.get_programs();
		if(__map_reserved[name] != null) {
			_this.setReserved(name,program);
		} else {
			_this.h[name] = program;
		}
		return program;
	}
	,registerProgramFromSource: function(name,vertexShader,fragmentShader) {
		this.deleteProgram(name);
		var program = starling_core_RenderSupport.assembleAgal(vertexShader,fragmentShader);
		var _this = this.get_programs();
		if(__map_reserved[name] != null) {
			_this.setReserved(name,program);
		} else {
			_this.h[name] = program;
		}
		return program;
	}
	,deleteProgram: function(name) {
		var program = this.getProgram(name);
		if(program != null) {
			program.dispose();
			this.get_programs().remove(name);
		}
	}
	,removeCurrentProgram: function() {
		if(this.mContext != null) {
			this.mContext.__program = null;
		}
	}
	,getProgram: function(name) {
		var _this = this.get_programs();
		if(__map_reserved[name] != null) {
			return _this.getReserved(name);
		} else {
			return _this.h[name];
		}
	}
	,hasProgram: function(name) {
		var _this = this.get_programs();
		if(__map_reserved[name] != null) {
			return _this.existsReserved(name);
		} else {
			return _this.h.hasOwnProperty(name);
		}
	}
	,get_programs: function() {
		var _this = this.get_contextData();
		if(__map_reserved["Starling.programs"] != null) {
			return _this.getReserved("Starling.programs");
		} else {
			return _this.h["Starling.programs"];
		}
	}
	,get_isStarted: function() {
		return this.mStarted;
	}
	,get_isRendering: function() {
		return this.mRendering;
	}
	,get_juggler: function() {
		return this.mJuggler;
	}
	,get_context: function() {
		return this.mContext;
	}
	,get_contextData: function() {
		return starling_core_Starling.sContextData.h[this.mStage3D.__id__];
	}
	,get_backBufferWidth: function() {
		return this.mClippedViewPort.width | 0;
	}
	,get_backBufferHeight: function() {
		return this.mClippedViewPort.height | 0;
	}
	,get_backBufferPixelsPerPoint: function() {
		return this.mNativeStageContentScaleFactor | 0;
	}
	,get_simulateMultitouch: function() {
		return this.mSimulateMultitouch;
	}
	,set_simulateMultitouch: function(value) {
		this.mSimulateMultitouch = value;
		if(this.mContext != null) {
			this.mTouchProcessor.set_simulateMultitouch(value);
		}
		return value;
	}
	,get_enableErrorChecking: function() {
		return this.mEnableErrorChecking;
	}
	,set_enableErrorChecking: function(value) {
		this.mEnableErrorChecking = value;
		if(this.mContext != null) {
			this.mContext.enableErrorChecking = value;
		}
		return value;
	}
	,get_antiAliasing: function() {
		return this.mAntiAliasing;
	}
	,set_antiAliasing: function(value) {
		if(this.mAntiAliasing != value) {
			this.mAntiAliasing = value;
			if(this.get_contextValid()) {
				this.updateViewPort(true);
			}
		}
		return value;
	}
	,get_viewPort: function() {
		return this.mViewPort;
	}
	,set_viewPort: function(value) {
		return this.mViewPort = value.clone();
	}
	,get_contentScaleFactor: function() {
		return this.mViewPort.width * this.mNativeStageContentScaleFactor / this.mStage.get_stageWidth();
	}
	,get_nativeOverlay: function() {
		return this.mNativeOverlay;
	}
	,get_showStats: function() {
		if(this.mStatsDisplay != null) {
			return this.mStatsDisplay.get_parent() != null;
		} else {
			return false;
		}
	}
	,set_showStats: function(value) {
		if(value == this.get_showStats()) {
			if(this.mStatsDisplay != null) {
				return this.mStatsDisplay.get_parent() != null;
			} else {
				return false;
			}
		}
		if(value) {
			if(this.mStatsDisplay != null) {
				this.mStage.addChild(this.mStatsDisplay);
			} else {
				this.showStatsAt();
			}
		} else {
			this.mStatsDisplay.removeFromParent();
		}
		return value;
	}
	,showStatsAt: function(hAlign,vAlign,scale) {
		if(scale == null) {
			scale = 1;
		}
		if(vAlign == null) {
			vAlign = "top";
		}
		if(hAlign == null) {
			hAlign = "left";
		}
		var _gthis = this;
		var onRootCreated = null;
		onRootCreated = function() {
			_gthis.showStatsAt(hAlign,vAlign,scale);
			_gthis.removeEventListener("rootCreated",onRootCreated);
		};
		if(this.mContext == null) {
			this.addEventListener("rootCreated",onRootCreated);
		} else {
			var stageWidth = this.mStage.get_stageWidth();
			var stageHeight = this.mStage.get_stageHeight();
			if(this.mStatsDisplay == null) {
				this.mStatsDisplay = new starling_core_StatsDisplay();
				this.mStatsDisplay.set_touchable(false);
			}
			this.mStage.addChild(this.mStatsDisplay);
			this.mStatsDisplay.set_scaleX(this.mStatsDisplay.set_scaleY(scale));
			if(hAlign == "left") {
				this.mStatsDisplay.set_x(0);
			} else if(hAlign == "right") {
				this.mStatsDisplay.set_x(stageWidth - this.mStatsDisplay.get_width());
			} else {
				this.mStatsDisplay.set_x((stageWidth - this.mStatsDisplay.get_width()) / 2 | 0);
			}
			if(vAlign == "top") {
				this.mStatsDisplay.set_y(0);
			} else if(vAlign == "bottom") {
				this.mStatsDisplay.set_y(stageHeight - this.mStatsDisplay.get_height());
			} else {
				this.mStatsDisplay.set_y((stageHeight - this.mStatsDisplay.get_height()) / 2 | 0);
			}
		}
	}
	,get_stage: function() {
		return this.mStage;
	}
	,get_stage3D: function() {
		return this.mStage3D;
	}
	,get_nativeStage: function() {
		return this.mNativeStage;
	}
	,get_root: function() {
		return this.mRoot;
	}
	,get_rootClass: function() {
		return this.mRootClass;
	}
	,set_rootClass: function(value) {
		if(this.mRootClass != null && this.mRoot != null) {
			throw new js__$Boot_HaxeError(new openfl_errors_Error("Root class may not change after root has been instantiated"));
		} else if(this.mRootClass == null) {
			this.mRootClass = value;
			if(this.mContext != null) {
				this.initializeRoot();
			}
		}
		return value;
	}
	,get_shareContext: function() {
		return this.mShareContext;
	}
	,set_shareContext: function(value) {
		return this.mShareContext = value;
	}
	,get_profile: function() {
		return this.mProfile;
	}
	,get_supportHighResolutions: function() {
		return this.mSupportHighResolutions;
	}
	,set_supportHighResolutions: function(value) {
		if(this.mSupportHighResolutions != value) {
			this.mSupportHighResolutions = value;
			if(this.get_contextValid()) {
				this.updateViewPort(true);
			}
		}
		return value;
	}
	,get_broadcastKeyboardEvents: function() {
		return this.mBroadcastKeyboardEvents;
	}
	,set_broadcastKeyboardEvents: function(value) {
		return this.mBroadcastKeyboardEvents = value;
	}
	,get_touchProcessor: function() {
		return this.mTouchProcessor;
	}
	,set_touchProcessor: function(value) {
		if(value != this.mTouchProcessor) {
			this.mTouchProcessor.dispose();
			this.mTouchProcessor = value;
		}
		return value;
	}
	,get_contextValid: function() {
		if(this.mContext != null) {
			var driverInfo = this.mContext.driverInfo;
			if(driverInfo != null && driverInfo != "") {
				return driverInfo != "Disposed";
			} else {
				return false;
			}
		} else {
			return false;
		}
	}
	,__class__: starling_core_Starling
	,__properties__: {get_contextValid:"get_contextValid",set_touchProcessor:"set_touchProcessor",get_touchProcessor:"get_touchProcessor",set_supportHighResolutions:"set_supportHighResolutions",get_supportHighResolutions:"get_supportHighResolutions",get_profile:"get_profile",set_shareContext:"set_shareContext",get_shareContext:"get_shareContext",set_rootClass:"set_rootClass",get_rootClass:"get_rootClass",get_root:"get_root",get_nativeStage:"get_nativeStage",get_stage3D:"get_stage3D",get_stage:"get_stage",set_showStats:"set_showStats",get_showStats:"get_showStats",get_nativeOverlay:"get_nativeOverlay",get_contentScaleFactor:"get_contentScaleFactor",set_viewPort:"set_viewPort",get_viewPort:"get_viewPort",set_antiAliasing:"set_antiAliasing",get_antiAliasing:"get_antiAliasing",set_enableErrorChecking:"set_enableErrorChecking",get_enableErrorChecking:"get_enableErrorChecking",set_simulateMultitouch:"set_simulateMultitouch",get_simulateMultitouch:"get_simulateMultitouch",get_backBufferPixelsPerPoint:"get_backBufferPixelsPerPoint",get_backBufferHeight:"get_backBufferHeight",get_backBufferWidth:"get_backBufferWidth",get_contextData:"get_contextData",get_context:"get_context",get_juggler:"get_juggler",get_isRendering:"get_isRendering",get_isStarted:"get_isStarted",get_programs:"get_programs",get_touchEventTypes:"get_touchEventTypes"}
});
var starling_display_DisplayObject = function() {
	starling_events_EventDispatcher.call(this);
	this.mX = this.mY = this.mPivotX = this.mPivotY = this.mRotation = this.mSkewX = this.mSkewY = 0.0;
	this.mScaleX = this.mScaleY = this.mAlpha = 1.0;
	this.mVisible = this.mTouchable = true;
	this.mBlendMode = "auto";
	this.mTransformationMatrix = new openfl_geom_Matrix();
	this.mOrientationChanged = this.mUseHandCursor = false;
};
$hxClasses["starling.display.DisplayObject"] = starling_display_DisplayObject;
starling_display_DisplayObject.__name__ = "starling.display.DisplayObject";
starling_display_DisplayObject.__super__ = starling_events_EventDispatcher;
starling_display_DisplayObject.prototype = $extend(starling_events_EventDispatcher.prototype,{
	mX: null
	,mY: null
	,mPivotX: null
	,mPivotY: null
	,mScaleX: null
	,mScaleY: null
	,mSkewX: null
	,mSkewY: null
	,mRotation: null
	,mAlpha: null
	,mVisible: null
	,mTouchable: null
	,mBlendMode: null
	,mName: null
	,mUseHandCursor: null
	,mParent: null
	,mTransformationMatrix: null
	,mTransformationMatrix3D: null
	,mOrientationChanged: null
	,mFilter: null
	,mIs3D: null
	,mMask: null
	,mIsMask: null
	,dispose: function() {
		if(this.mFilter != null) {
			this.mFilter.dispose();
		}
		if(this.mMask != null) {
			this.mMask.dispose();
		}
		this.removeEventListeners();
		this.set_mask(null);
	}
	,removeFromParent: function(dispose) {
		if(dispose == null) {
			dispose = false;
		}
		if(this.mParent != null) {
			this.mParent.removeChild(this,dispose);
		} else if(dispose) {
			this.dispose();
		}
	}
	,getTransformationMatrix: function(targetSpace,resultMatrix) {
		var currentObject;
		if(resultMatrix != null) {
			resultMatrix.identity();
		} else {
			resultMatrix = new openfl_geom_Matrix();
		}
		if(targetSpace == this) {
			return resultMatrix;
		} else if(targetSpace == this.mParent || targetSpace == null && this.mParent == null) {
			resultMatrix.copyFrom(this.get_transformationMatrix());
			return resultMatrix;
		} else if(targetSpace == null || targetSpace == this.get_base()) {
			currentObject = this;
			while(currentObject != targetSpace) {
				resultMatrix.concat(currentObject.get_transformationMatrix());
				currentObject = currentObject.mParent;
			}
			return resultMatrix;
		} else if(targetSpace.mParent == this) {
			targetSpace.getTransformationMatrix(this,resultMatrix);
			resultMatrix.invert();
			return resultMatrix;
		}
		var commonParent = this.__findCommonParent(this,targetSpace);
		currentObject = this;
		while(currentObject != commonParent) {
			resultMatrix.concat(currentObject.get_transformationMatrix());
			currentObject = currentObject.mParent;
		}
		if(commonParent == targetSpace) {
			return resultMatrix;
		}
		starling_display_DisplayObject.sHelperMatrix.identity();
		currentObject = targetSpace;
		while(currentObject != commonParent) {
			starling_display_DisplayObject.sHelperMatrix.concat(currentObject.get_transformationMatrix());
			currentObject = currentObject.mParent;
		}
		starling_display_DisplayObject.sHelperMatrix.invert();
		resultMatrix.concat(starling_display_DisplayObject.sHelperMatrix);
		return resultMatrix;
	}
	,getBounds: function(targetSpace,resultRect) {
		throw new js__$Boot_HaxeError(new starling_errors_AbstractMethodError());
	}
	,hitTest: function(localPoint,forTouch) {
		if(forTouch == null) {
			forTouch = false;
		}
		if(forTouch && (!this.mVisible || !this.mTouchable)) {
			return null;
		}
		if(this.mMask != null && !this.hitTestMask(localPoint)) {
			return null;
		}
		if(this.getBounds(this,starling_display_DisplayObject.sHelperRect).containsPoint(localPoint)) {
			return this;
		} else {
			return null;
		}
	}
	,hitTestMask: function(localPoint) {
		if(this.mMask != null) {
			if(this.mMask.get_stage() != null) {
				this.getTransformationMatrix(this.mMask,starling_display_DisplayObject.sHelperMatrixAlt);
			} else {
				starling_display_DisplayObject.sHelperMatrixAlt.copyFrom(this.mMask.get_transformationMatrix());
				starling_display_DisplayObject.sHelperMatrixAlt.invert();
			}
			var helperPoint = localPoint == starling_display_DisplayObject.sHelperPoint ? new openfl_geom_Point() : starling_display_DisplayObject.sHelperPoint;
			starling_utils_MatrixUtil.transformPoint(starling_display_DisplayObject.sHelperMatrixAlt,localPoint,helperPoint);
			return this.mMask.hitTest(helperPoint,true) != null;
		} else {
			return true;
		}
	}
	,localToGlobal: function(localPoint,resultPoint) {
		if(this.get_is3D()) {
			starling_display_DisplayObject.sHelperPoint3D.setTo(localPoint.x,localPoint.y,0);
			return this.local3DToGlobal(starling_display_DisplayObject.sHelperPoint3D,resultPoint);
		} else {
			this.getTransformationMatrix(this.get_base(),starling_display_DisplayObject.sHelperMatrixAlt);
			return starling_utils_MatrixUtil.transformPoint(starling_display_DisplayObject.sHelperMatrixAlt,localPoint,resultPoint);
		}
	}
	,globalToLocal: function(globalPoint,resultPoint) {
		if(this.get_is3D()) {
			this.globalToLocal3D(globalPoint,starling_display_DisplayObject.sHelperPoint3D);
			this.get_stage().getCameraPosition(this,starling_display_DisplayObject.sHelperPointAlt3D);
			return starling_utils_MathUtil.intersectLineWithXYPlane(starling_display_DisplayObject.sHelperPointAlt3D,starling_display_DisplayObject.sHelperPoint3D,resultPoint);
		} else {
			this.getTransformationMatrix(this.get_base(),starling_display_DisplayObject.sHelperMatrixAlt);
			starling_display_DisplayObject.sHelperMatrixAlt.invert();
			return starling_utils_MatrixUtil.transformPoint(starling_display_DisplayObject.sHelperMatrixAlt,globalPoint,resultPoint);
		}
	}
	,render: function(support,parentAlpha) {
		throw new js__$Boot_HaxeError(new starling_errors_AbstractMethodError());
	}
	,get_hasVisibleArea: function() {
		if(this.mAlpha != 0.0 && this.mVisible && !this.mIsMask && this.mScaleX != 0.0) {
			return this.mScaleY != 0.0;
		} else {
			return false;
		}
	}
	,alignPivot: function(hAlign,vAlign) {
		if(vAlign == null) {
			vAlign = "center";
		}
		if(hAlign == null) {
			hAlign = "center";
		}
		var bounds = this.getBounds(this,starling_display_DisplayObject.sHelperRect);
		this.mOrientationChanged = true;
		if(hAlign == "left") {
			this.mPivotX = bounds.x;
		} else if(hAlign == "center") {
			this.mPivotX = bounds.x + bounds.width / 2.0;
		} else if(hAlign == "right") {
			this.mPivotX = bounds.x + bounds.width;
		} else {
			throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Invalid horizontal alignment: " + hAlign));
		}
		if(vAlign == "top") {
			this.mPivotY = bounds.y;
		} else if(vAlign == "center") {
			this.mPivotY = bounds.y + bounds.height / 2.0;
		} else if(vAlign == "bottom") {
			this.mPivotY = bounds.y + bounds.height;
		} else {
			throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Invalid vertical alignment: " + vAlign));
		}
	}
	,getTransformationMatrix3D: function(targetSpace,resultMatrix) {
		var currentObject;
		if(resultMatrix != null) {
			resultMatrix.identity();
		} else {
			resultMatrix = new openfl_geom_Matrix3D();
		}
		if(targetSpace == this) {
			return resultMatrix;
		} else if(targetSpace == this.mParent || targetSpace == null && this.mParent == null) {
			resultMatrix.copyFrom(this.get_transformationMatrix3D());
			return resultMatrix;
		} else if(targetSpace == null || targetSpace == this.get_base()) {
			currentObject = this;
			while(currentObject != targetSpace) {
				resultMatrix.append(currentObject.get_transformationMatrix3D());
				currentObject = currentObject.mParent;
			}
			return resultMatrix;
		} else if(targetSpace.mParent == this) {
			targetSpace.getTransformationMatrix3D(this,resultMatrix);
			resultMatrix.invert();
			return resultMatrix;
		}
		var commonParent = this.__findCommonParent(this,targetSpace);
		currentObject = this;
		while(currentObject != commonParent) {
			resultMatrix.append(currentObject.get_transformationMatrix3D());
			currentObject = currentObject.mParent;
		}
		if(commonParent == targetSpace) {
			return resultMatrix;
		}
		starling_display_DisplayObject.sHelperMatrix3D.identity();
		currentObject = targetSpace;
		while(currentObject != commonParent) {
			starling_display_DisplayObject.sHelperMatrix3D.append(currentObject.get_transformationMatrix3D());
			currentObject = currentObject.mParent;
		}
		starling_display_DisplayObject.sHelperMatrix3D.invert();
		resultMatrix.append(starling_display_DisplayObject.sHelperMatrix3D);
		return resultMatrix;
	}
	,local3DToGlobal: function(localPoint,resultPoint) {
		var stage = this.get_stage();
		if(stage == null) {
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Object not connected to stage"));
		}
		this.getTransformationMatrix3D(stage,starling_display_DisplayObject.sHelperMatrixAlt3D);
		starling_utils_MatrixUtil.transformPoint3D(starling_display_DisplayObject.sHelperMatrixAlt3D,localPoint,starling_display_DisplayObject.sHelperPoint3D);
		return starling_utils_MathUtil.intersectLineWithXYPlane(stage.get_cameraPosition(),starling_display_DisplayObject.sHelperPoint3D,resultPoint);
	}
	,globalToLocal3D: function(globalPoint,resultPoint) {
		var stage = this.get_stage();
		if(stage == null) {
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Object not connected to stage"));
		}
		this.getTransformationMatrix3D(stage,starling_display_DisplayObject.sHelperMatrixAlt3D);
		starling_display_DisplayObject.sHelperMatrixAlt3D.invert();
		return starling_utils_MatrixUtil.transformCoords3D(starling_display_DisplayObject.sHelperMatrixAlt3D,globalPoint.x,globalPoint.y,0,resultPoint);
	}
	,__setParent: function(value) {
		var ancestor = value;
		while(ancestor != this && ancestor != null) ancestor = ancestor.mParent;
		if(ancestor == this) {
			throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("An object cannot be added as a child to itself or one " + "of its children (or children's children, etc.)"));
		} else {
			this.mParent = value;
		}
	}
	,__setIs3D: function(value) {
		this.mIs3D = value;
	}
	,get_isMask: function() {
		return this.mIsMask;
	}
	,__isEquivalent: function(a,b,epsilon) {
		if(epsilon == null) {
			epsilon = 0.0001;
		}
		if(a - epsilon < b) {
			return a + epsilon > b;
		} else {
			return false;
		}
	}
	,__findCommonParent: function(object1,object2) {
		var currentObject = object1;
		while(currentObject != null) {
			var this1 = starling_display_DisplayObject.sAncestors;
			var index = starling_display_DisplayObject.sAncestors.data.get_length();
			this1.data.set(index,currentObject);
			currentObject = currentObject.mParent;
		}
		currentObject = object2;
		while(currentObject != null && starling_display_DisplayObject.sAncestors.data.indexOf(currentObject,0) == -1) currentObject = currentObject.mParent;
		starling_display_DisplayObject.sAncestors.data.set_length(0);
		if(currentObject != null) {
			return currentObject;
		} else {
			throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Object not connected to target"));
		}
	}
	,dispatchEvent: function(event) {
		if(event.type == "removedFromStage" && this.get_stage() == null) {
			return;
		} else {
			starling_events_EventDispatcher.prototype.dispatchEvent.call(this,event);
		}
	}
	,addEventListener: function(type,listener) {
		if(type == "enterFrame" && !this.hasEventListener(type)) {
			this.addEventListener("addedToStage",$bind(this,this.__addEnterFrameListenerToStage));
			this.addEventListener("removedFromStage",$bind(this,this.__removeEnterFrameListenerFromStage));
			if(this.get_stage() != null) {
				this.__addEnterFrameListenerToStage();
			}
		}
		starling_events_EventDispatcher.prototype.addEventListener.call(this,type,listener);
	}
	,removeEventListener: function(type,listener) {
		starling_events_EventDispatcher.prototype.removeEventListener.call(this,type,listener);
		if(type == "enterFrame" && !this.hasEventListener(type)) {
			this.removeEventListener("addedToStage",$bind(this,this.__addEnterFrameListenerToStage));
			this.removeEventListener("removedFromStage",$bind(this,this.__removeEnterFrameListenerFromStage));
			this.__removeEnterFrameListenerFromStage();
		}
	}
	,removeEventListeners: function(type) {
		if((type == null || type == "enterFrame") && this.hasEventListener("enterFrame")) {
			this.removeEventListener("addedToStage",$bind(this,this.__addEnterFrameListenerToStage));
			this.removeEventListener("removedFromStage",$bind(this,this.__removeEnterFrameListenerFromStage));
			this.__removeEnterFrameListenerFromStage();
		}
		starling_events_EventDispatcher.prototype.removeEventListeners.call(this,type);
	}
	,__addEnterFrameListenerToStage: function(e) {
		starling_core_Starling.get_current().get_stage().addEnterFrameListener(this);
	}
	,__removeEnterFrameListenerFromStage: function(e) {
		starling_core_Starling.get_current().get_stage().removeEnterFrameListener(this);
	}
	,get_transformationMatrix: function() {
		if(this.mOrientationChanged) {
			this.mOrientationChanged = false;
			if(this.mSkewX == 0.0 && this.mSkewY == 0.0) {
				if(this.mRotation == 0.0) {
					this.mTransformationMatrix.setTo(this.mScaleX,0.0,0.0,this.mScaleY,this.mX - this.mPivotX * this.mScaleX,this.mY - this.mPivotY * this.mScaleY);
				} else {
					var cos = Math.cos(this.mRotation);
					var sin = Math.sin(this.mRotation);
					var a = this.mScaleX * cos;
					var b = this.mScaleX * sin;
					var c = this.mScaleY * -sin;
					var d = this.mScaleY * cos;
					var tx = this.mX - this.mPivotX * a - this.mPivotY * c;
					var ty = this.mY - this.mPivotX * b - this.mPivotY * d;
					this.mTransformationMatrix.setTo(a,b,c,d,tx,ty);
				}
			} else {
				this.mTransformationMatrix.identity();
				this.mTransformationMatrix.scale(this.mScaleX,this.mScaleY);
				starling_utils_MatrixUtil.skew(this.mTransformationMatrix,this.mSkewX,this.mSkewY);
				this.mTransformationMatrix.rotate(this.mRotation);
				this.mTransformationMatrix.translate(this.mX,this.mY);
				if(this.mPivotX != 0.0 || this.mPivotY != 0.0) {
					this.mTransformationMatrix.tx = this.mX - this.mTransformationMatrix.a * this.mPivotX - this.mTransformationMatrix.c * this.mPivotY;
					this.mTransformationMatrix.ty = this.mY - this.mTransformationMatrix.b * this.mPivotX - this.mTransformationMatrix.d * this.mPivotY;
				}
			}
		}
		return this.mTransformationMatrix;
	}
	,set_transformationMatrix: function(matrix) {
		var PI_Q = Math.PI / 4.0;
		this.mOrientationChanged = false;
		this.mTransformationMatrix.copyFrom(matrix);
		this.mPivotX = this.mPivotY = 0;
		this.mX = matrix.tx;
		this.mY = matrix.ty;
		this.mSkewX = Math.atan(-matrix.c / matrix.d);
		this.mSkewY = Math.atan(matrix.b / matrix.a);
		if(this.mSkewX != this.mSkewX) {
			this.mSkewX = 0.0;
		}
		if(this.mSkewY != this.mSkewY) {
			this.mSkewY = 0.0;
		}
		this.mScaleY = this.mSkewX > -PI_Q && this.mSkewX < PI_Q ? matrix.d / Math.cos(this.mSkewX) : -matrix.c / Math.sin(this.mSkewX);
		this.mScaleX = this.mSkewY > -PI_Q && this.mSkewY < PI_Q ? matrix.a / Math.cos(this.mSkewY) : matrix.b / Math.sin(this.mSkewY);
		if(this.__isEquivalent(this.mSkewX,this.mSkewY)) {
			this.mRotation = this.mSkewX;
			this.mSkewX = this.mSkewY = 0;
		} else {
			this.mRotation = 0;
		}
		return this.mTransformationMatrix;
	}
	,get_transformationMatrix3D: function() {
		if(this.mTransformationMatrix3D == null) {
			this.mTransformationMatrix3D = new openfl_geom_Matrix3D();
		}
		return starling_utils_MatrixUtil.convertTo3D(this.get_transformationMatrix(),this.mTransformationMatrix3D);
	}
	,get_is3D: function() {
		return this.mIs3D;
	}
	,get_useHandCursor: function() {
		return this.mUseHandCursor;
	}
	,set_useHandCursor: function(value) {
		if(value == this.mUseHandCursor) {
			return this.mUseHandCursor;
		}
		this.mUseHandCursor = value;
		if(this.mUseHandCursor) {
			this.addEventListener("touch",$bind(this,this.__onTouch));
		} else {
			this.removeEventListener("touch",$bind(this,this.__onTouch));
		}
		return value;
	}
	,__onTouch: function(event) {
		openfl_ui_Mouse.set_cursor(event.interactsWith(this) ? "button" : "auto");
	}
	,get_bounds: function() {
		return this.getBounds(this.mParent);
	}
	,get_width: function() {
		return this.getBounds(this.mParent,starling_display_DisplayObject.sHelperRect).width;
	}
	,set_width: function(value) {
		this.set_scaleX(1.0);
		var actualWidth = this.get_width();
		if(actualWidth != 0.0) {
			this.set_scaleX(value / actualWidth);
		}
		return value;
	}
	,get_height: function() {
		return this.getBounds(this.mParent,starling_display_DisplayObject.sHelperRect).height;
	}
	,set_height: function(value) {
		this.set_scaleY(1.0);
		var actualHeight = this.get_height();
		if(actualHeight != 0.0) {
			this.set_scaleY(value / actualHeight);
		}
		return value;
	}
	,get_x: function() {
		return this.mX;
	}
	,set_x: function(value) {
		if(this.mX != value) {
			this.mX = value;
			this.mOrientationChanged = true;
		}
		return value;
	}
	,get_y: function() {
		return this.mY;
	}
	,set_y: function(value) {
		if(this.mY != value) {
			this.mY = value;
			this.mOrientationChanged = true;
		}
		return value;
	}
	,get_pivotX: function() {
		return this.mPivotX;
	}
	,set_pivotX: function(value) {
		if(this.mPivotX != value) {
			this.mPivotX = value;
			this.mOrientationChanged = true;
		}
		return value;
	}
	,get_pivotY: function() {
		return this.mPivotY;
	}
	,set_pivotY: function(value) {
		if(this.mPivotY != value) {
			this.mPivotY = value;
			this.mOrientationChanged = true;
		}
		return value;
	}
	,get_scaleX: function() {
		return this.mScaleX;
	}
	,set_scaleX: function(value) {
		if(this.mScaleX != value) {
			this.mScaleX = value;
			this.mOrientationChanged = true;
		}
		return value;
	}
	,get_scaleY: function() {
		return this.mScaleY;
	}
	,set_scaleY: function(value) {
		if(this.mScaleY != value) {
			this.mScaleY = value;
			this.mOrientationChanged = true;
		}
		return value;
	}
	,get_scale: function() {
		return this.get_scaleX();
	}
	,set_scale: function(value) {
		return this.set_scaleX(this.set_scaleY(value));
	}
	,get_skewX: function() {
		return this.mSkewX;
	}
	,set_skewX: function(value) {
		value = starling_utils_MathUtil.normalizeAngle(value);
		if(this.mSkewX != value) {
			this.mSkewX = value;
			this.mOrientationChanged = true;
		}
		return value;
	}
	,get_skewY: function() {
		return this.mSkewY;
	}
	,set_skewY: function(value) {
		value = starling_utils_MathUtil.normalizeAngle(value);
		if(this.mSkewY != value) {
			this.mSkewY = value;
			this.mOrientationChanged = true;
		}
		return value;
	}
	,get_rotation: function() {
		return this.mRotation;
	}
	,set_rotation: function(value) {
		value = starling_utils_MathUtil.normalizeAngle(value);
		if(this.mRotation != value) {
			this.mRotation = value;
			this.mOrientationChanged = true;
		}
		return value;
	}
	,get_alpha: function() {
		return this.mAlpha;
	}
	,set_alpha: function(value) {
		this.mAlpha = value < 0.0 ? 0.0 : value > 1.0 ? 1.0 : value;
		return value;
	}
	,get_visible: function() {
		return this.mVisible;
	}
	,set_visible: function(value) {
		return this.mVisible = value;
	}
	,get_touchable: function() {
		return this.mTouchable;
	}
	,set_touchable: function(value) {
		return this.mTouchable = value;
	}
	,get_blendMode: function() {
		return this.mBlendMode;
	}
	,set_blendMode: function(value) {
		return this.mBlendMode = value;
	}
	,get_name: function() {
		return this.mName;
	}
	,set_name: function(value) {
		return this.mName = value;
	}
	,get_filter: function() {
		return this.mFilter;
	}
	,set_filter: function(value) {
		return this.mFilter = value;
	}
	,get_mask: function() {
		return this.mMask;
	}
	,set_mask: function(value) {
		if(this.mMask != value) {
			if(this.mMask != null) {
				this.mMask.mIsMask = false;
			}
			if(value != null) {
				value.mIsMask = true;
			}
			this.mMask = value;
		}
		return this.mMask;
	}
	,get_parent: function() {
		return this.mParent;
	}
	,get_base: function() {
		var currentObject = this;
		while(currentObject.mParent != null) currentObject = currentObject.mParent;
		return currentObject;
	}
	,get_root: function() {
		var currentObject = this;
		while(currentObject.mParent != null) if(((currentObject.mParent) instanceof starling_display_Stage)) {
			return currentObject;
		} else {
			currentObject = currentObject.get_parent();
		}
		return null;
	}
	,get_stage: function() {
		if(((this.get_base()) instanceof starling_display_Stage)) {
			return this.get_base();
		} else {
			return null;
		}
	}
	,__class__: starling_display_DisplayObject
	,__properties__: {get_stage:"get_stage",get_root:"get_root",get_base:"get_base",get_parent:"get_parent",set_mask:"set_mask",get_mask:"get_mask",set_filter:"set_filter",get_filter:"get_filter",set_name:"set_name",get_name:"get_name",set_blendMode:"set_blendMode",get_blendMode:"get_blendMode",set_touchable:"set_touchable",get_touchable:"get_touchable",set_visible:"set_visible",get_visible:"get_visible",set_alpha:"set_alpha",get_alpha:"get_alpha",set_rotation:"set_rotation",get_rotation:"get_rotation",set_skewY:"set_skewY",get_skewY:"get_skewY",set_skewX:"set_skewX",get_skewX:"get_skewX",set_scale:"set_scale",get_scale:"get_scale",set_scaleY:"set_scaleY",get_scaleY:"get_scaleY",set_scaleX:"set_scaleX",get_scaleX:"get_scaleX",set_pivotY:"set_pivotY",get_pivotY:"get_pivotY",set_pivotX:"set_pivotX",get_pivotX:"get_pivotX",set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x",set_height:"set_height",get_height:"get_height",set_width:"set_width",get_width:"get_width",get_bounds:"get_bounds",set_useHandCursor:"set_useHandCursor",get_useHandCursor:"get_useHandCursor",get_is3D:"get_is3D",get_transformationMatrix3D:"get_transformationMatrix3D",set_transformationMatrix:"set_transformationMatrix",get_transformationMatrix:"get_transformationMatrix",get_isMask:"get_isMask",get_hasVisibleArea:"get_hasVisibleArea"}
});
var starling_display_DisplayObjectContainer = function() {
	starling_display_DisplayObject.call(this);
	this.mChildren = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
};
$hxClasses["starling.display.DisplayObjectContainer"] = starling_display_DisplayObjectContainer;
starling_display_DisplayObjectContainer.__name__ = "starling.display.DisplayObjectContainer";
starling_display_DisplayObjectContainer.mergeSort = function(input,compareFunc,startIndex,length,buffer) {
	if(length <= 1) {
		return;
	} else {
		var i = 0;
		var endIndex = startIndex + length;
		var halfLength = length / 2 | 0;
		var l = startIndex;
		var r = startIndex + halfLength;
		starling_display_DisplayObjectContainer.mergeSort(input,compareFunc,startIndex,halfLength,buffer);
		starling_display_DisplayObjectContainer.mergeSort(input,compareFunc,startIndex + halfLength,length - halfLength,buffer);
		var _g = 0;
		var _g1 = length;
		while(_g < _g1) {
			var i1 = _g++;
			if(l < startIndex + halfLength && (r == endIndex || compareFunc(input.data.get(l),input.data.get(r)) <= 0)) {
				var value = input.data.get(l);
				buffer.data.set(i1,value);
				++l;
			} else {
				var value1 = input.data.get(r);
				buffer.data.set(i1,value1);
				++r;
			}
		}
		var _g2 = startIndex;
		var _g3 = endIndex;
		while(_g2 < _g3) {
			var i2 = _g2++;
			var value2 = buffer.data.get(i2 - startIndex);
			input.data.set(i2,value2);
		}
	}
};
starling_display_DisplayObjectContainer.__super__ = starling_display_DisplayObject;
starling_display_DisplayObjectContainer.prototype = $extend(starling_display_DisplayObject.prototype,{
	mChildren: null
	,mTouchGroup: null
	,dispose: function() {
		var i = this.mChildren.data.get_length() - 1;
		while(i >= 0) {
			this.mChildren.data.get(i).dispose();
			--i;
		}
		starling_display_DisplayObject.prototype.dispose.call(this);
	}
	,addChild: function(child) {
		return this.addChildAt(child,this.mChildren.data.get_length());
	}
	,addChildAt: function(child,index) {
		var numChildren = this.mChildren.data.get_length();
		if(index >= 0 && index <= numChildren) {
			if(child.get_parent() == this) {
				this.setChildIndex(child,index);
			} else {
				child.removeFromParent();
				if(index == numChildren) {
					this.mChildren.data.set(numChildren,child);
				} else {
					this.__spliceChildren(index,0,child);
				}
				child.__setParent(this);
				child.dispatchEventWith("added",true);
				if(this.get_stage() != null) {
					var container = ((child) instanceof starling_display_DisplayObjectContainer) ? child : null;
					if(container != null) {
						container.broadcastEventWith("addedToStage");
					} else {
						child.dispatchEventWith("addedToStage");
					}
				}
			}
			return child;
		} else {
			throw new js__$Boot_HaxeError(new openfl_errors_RangeError("Invalid child index"));
		}
	}
	,removeChild: function(child,dispose) {
		if(dispose == null) {
			dispose = false;
		}
		var childIndex = this.getChildIndex(child);
		if(childIndex != -1) {
			this.removeChildAt(childIndex,dispose);
		}
		return child;
	}
	,removeChildAt: function(index,dispose) {
		if(dispose == null) {
			dispose = false;
		}
		if(index >= 0 && index < this.mChildren.data.get_length()) {
			var child = this.mChildren.data.get(index);
			child.dispatchEventWith("removed",true);
			if(this.get_stage() != null) {
				var container = ((child) instanceof starling_display_DisplayObjectContainer) ? child : null;
				if(container != null) {
					container.broadcastEventWith("removedFromStage");
				} else {
					child.dispatchEventWith("removedFromStage");
				}
			}
			child.__setParent(null);
			index = this.mChildren.data.indexOf(child,0);
			if(index >= 0) {
				this.__spliceChildren(index,1);
			}
			if(dispose) {
				child.dispose();
			}
			return child;
		} else {
			throw new js__$Boot_HaxeError(new openfl_errors_RangeError("Invalid child index"));
		}
	}
	,removeChildren: function(beginIndex,endIndex,dispose) {
		if(dispose == null) {
			dispose = false;
		}
		if(endIndex == null) {
			endIndex = -1;
		}
		if(beginIndex == null) {
			beginIndex = 0;
		}
		if(endIndex < 0 || endIndex >= this.get_numChildren()) {
			endIndex = this.get_numChildren() - 1;
		}
		var i = beginIndex;
		while(i <= endIndex) {
			this.removeChildAt(beginIndex,dispose);
			++i;
		}
	}
	,getChildAt: function(index) {
		var numChildren = this.mChildren.data.get_length();
		if(index < 0) {
			index = numChildren + index;
		}
		if(index >= 0 && index < numChildren) {
			return this.mChildren.data.get(index);
		} else {
			throw new js__$Boot_HaxeError(new openfl_errors_RangeError("Invalid child index"));
		}
	}
	,getChildByName: function(name) {
		var numChildren = this.mChildren.data.get_length();
		var _g = 0;
		var _g1 = numChildren;
		while(_g < _g1) {
			var i = _g++;
			if(this.mChildren.data.get(i).get_name() == name) {
				return this.mChildren.data.get(i);
			}
		}
		return null;
	}
	,getChildIndex: function(child) {
		return this.mChildren.data.indexOf(child,0);
	}
	,setChildIndex: function(child,index) {
		var oldIndex = this.getChildIndex(child);
		if(oldIndex == index) {
			return;
		}
		if(oldIndex == -1) {
			throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Not a child of this container"));
		}
		this.__spliceChildren(oldIndex,1);
		this.__spliceChildren(index,0,child);
	}
	,swapChildren: function(child1,child2) {
		var index1 = this.getChildIndex(child1);
		var index2 = this.getChildIndex(child2);
		if(index1 == -1 || index2 == -1) {
			throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Not a child of this container"));
		}
		this.swapChildrenAt(index1,index2);
	}
	,swapChildrenAt: function(index1,index2) {
		var child1 = this.getChildAt(index1);
		var child2 = this.getChildAt(index2);
		this.mChildren.data.set(index1,child2);
		this.mChildren.data.set(index2,child1);
	}
	,sortChildren: function(compareFunction) {
		var this1 = starling_display_DisplayObjectContainer.sSortBuffer;
		var value = this.mChildren.data.get_length();
		this1.data.set_length(value);
		starling_display_DisplayObjectContainer.mergeSort(this.mChildren,compareFunction,0,this.mChildren.data.get_length(),starling_display_DisplayObjectContainer.sSortBuffer);
		starling_display_DisplayObjectContainer.sSortBuffer.data.set_length(0);
	}
	,contains: function(child) {
		while(child != null) if(child == this) {
			return true;
		} else {
			child = child.get_parent();
		}
		return false;
	}
	,getBounds: function(targetSpace,resultRect) {
		if(resultRect == null) {
			resultRect = new openfl_geom_Rectangle();
		}
		var numChildren = this.mChildren.data.get_length();
		if(numChildren == 0) {
			this.getTransformationMatrix(targetSpace,starling_display_DisplayObjectContainer.sHelperMatrix);
			starling_utils_MatrixUtil.transformCoords(starling_display_DisplayObjectContainer.sHelperMatrix,0.0,0.0,starling_display_DisplayObjectContainer.sHelperPoint);
			resultRect.setTo(starling_display_DisplayObjectContainer.sHelperPoint.x,starling_display_DisplayObjectContainer.sHelperPoint.y,0,0);
		} else if(numChildren == 1) {
			this.mChildren.data.get(0).getBounds(targetSpace,resultRect);
		} else {
			var minX = 1.79e+308;
			var maxX = -1.79e+308;
			var minY = 1.79e+308;
			var maxY = -1.79e+308;
			var i = 0;
			var _g = 0;
			var _g1 = numChildren;
			while(_g < _g1) {
				var i1 = _g++;
				this.mChildren.data.get(i1).getBounds(targetSpace,resultRect);
				if(minX > resultRect.x) {
					minX = resultRect.x;
				}
				if(maxX < resultRect.get_right()) {
					maxX = resultRect.get_right();
				}
				if(minY > resultRect.y) {
					minY = resultRect.y;
				}
				if(maxY < resultRect.get_bottom()) {
					maxY = resultRect.get_bottom();
				}
			}
			resultRect.setTo(minX,minY,maxX - minX,maxY - minY);
		}
		return resultRect;
	}
	,hitTest: function(localPoint,forTouch) {
		if(forTouch == null) {
			forTouch = false;
		}
		if(forTouch && (!this.get_visible() || !this.get_touchable())) {
			return null;
		}
		if(!this.hitTestMask(localPoint)) {
			return null;
		}
		var target = null;
		var localX = localPoint.x;
		var localY = localPoint.y;
		var numChildren = this.mChildren.data.get_length();
		var i = numChildren - 1;
		while(i >= 0) {
			var child = this.mChildren.data.get(i);
			if(child.get_isMask()) {
				--i;
				continue;
			}
			starling_display_DisplayObjectContainer.sHelperMatrix.copyFrom(child.get_transformationMatrix());
			starling_display_DisplayObjectContainer.sHelperMatrix.invert();
			starling_utils_MatrixUtil.transformCoords(starling_display_DisplayObjectContainer.sHelperMatrix,localX,localY,starling_display_DisplayObjectContainer.sHelperPoint);
			target = child.hitTest(starling_display_DisplayObjectContainer.sHelperPoint,forTouch);
			if(target != null) {
				if(forTouch && this.mTouchGroup) {
					return this;
				} else {
					return target;
				}
			}
			--i;
		}
		return null;
	}
	,render: function(support,parentAlpha) {
		var alpha = parentAlpha * this.get_alpha();
		var numChildren = this.mChildren.data.get_length();
		var blendMode = support.get_blendMode();
		var _g = 0;
		var _g1 = numChildren;
		while(_g < _g1) {
			var i = _g++;
			var child = this.mChildren.data.get(i);
			if(child.get_hasVisibleArea()) {
				var filter = child.get_filter();
				var mask = child.get_mask();
				support.pushMatrix();
				support.transformMatrix(child);
				support.set_blendMode(child.get_blendMode());
				if(mask != null) {
					support.pushMask(mask);
				}
				if(filter != null) {
					filter.render(child,support,alpha);
				} else {
					child.render(support,alpha);
				}
				if(mask != null) {
					support.popMask();
				}
				support.set_blendMode(blendMode);
				support.popMatrix();
			}
		}
	}
	,broadcastEvent: function(event) {
		if(event.bubbles) {
			throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Broadcast of bubbling events is prohibited"));
		}
		var fromIndex = starling_display_DisplayObjectContainer.sBroadcastListeners.data.get_length();
		this.__getChildEventListeners(this,event.type,starling_display_DisplayObjectContainer.sBroadcastListeners);
		var toIndex = starling_display_DisplayObjectContainer.sBroadcastListeners.data.get_length();
		var _g = fromIndex;
		var _g1 = toIndex;
		while(_g < _g1) {
			var i = _g++;
			starling_display_DisplayObjectContainer.sBroadcastListeners.data.get(i).dispatchEvent(event);
		}
		starling_display_DisplayObjectContainer.sBroadcastListeners.data.set_length(fromIndex);
	}
	,broadcastEventWith: function(type,data) {
		var event = starling_events_Event.fromPool(type,false,data);
		this.broadcastEvent(event);
		starling_events_Event.toPool(event);
	}
	,get_numChildren: function() {
		return this.mChildren.data.get_length();
	}
	,get_touchGroup: function() {
		return this.mTouchGroup;
	}
	,set_touchGroup: function(value) {
		return this.mTouchGroup = value;
	}
	,__spliceChildren: function(startIndex,deleteCount,insertee) {
		if(deleteCount == null) {
			deleteCount = 2147483647;
		}
		var vector = this.mChildren;
		var oldLength = vector.data.get_length();
		if(startIndex < 0) {
			startIndex += oldLength;
		}
		if(startIndex < 0) {
			startIndex = 0;
		} else if(startIndex > oldLength) {
			startIndex = oldLength;
		}
		if(startIndex + deleteCount > oldLength) {
			deleteCount = oldLength - startIndex;
		}
		var i;
		var insertCount = insertee != null ? 1 : 0;
		var deltaLength = insertCount - deleteCount;
		var newLength = oldLength + deltaLength;
		var shiftCount = oldLength - startIndex - deleteCount;
		if(deltaLength < 0) {
			i = startIndex + insertCount;
			while(shiftCount != 0) {
				var value = vector.data.get(i - deltaLength);
				vector.data.set(i,value);
				--shiftCount;
				++i;
			}
			vector.data.set_length(newLength);
		} else if(deltaLength > 0) {
			i = 1;
			while(shiftCount != 0) {
				var value1 = vector.data.get(oldLength - i);
				vector.data.set(newLength - i,value1);
				--shiftCount;
				++i;
			}
			vector.data.set_length(newLength);
		}
		if(insertee != null) {
			vector.data.set(startIndex,insertee);
		}
	}
	,__getChildEventListeners: function(object,eventType,listeners) {
		var container = ((object) instanceof starling_display_DisplayObjectContainer) ? object : null;
		if(object.hasEventListener(eventType)) {
			var index = listeners.data.get_length();
			listeners.data.set(index,object);
		}
		if(container != null) {
			var children = container.mChildren;
			var numChildren = children.data.get_length();
			var _g = 0;
			var _g1 = numChildren;
			while(_g < _g1) {
				var i = _g++;
				this.__getChildEventListeners(children.data.get(i),eventType,listeners);
			}
		}
	}
	,__class__: starling_display_DisplayObjectContainer
	,__properties__: $extend(starling_display_DisplayObject.prototype.__properties__,{set_touchGroup:"set_touchGroup",get_touchGroup:"get_touchGroup",get_numChildren:"get_numChildren"})
});
var starling_display_Sprite = function() {
	starling_display_DisplayObjectContainer.call(this);
};
$hxClasses["starling.display.Sprite"] = starling_display_Sprite;
starling_display_Sprite.__name__ = "starling.display.Sprite";
starling_display_Sprite.__super__ = starling_display_DisplayObjectContainer;
starling_display_Sprite.prototype = $extend(starling_display_DisplayObjectContainer.prototype,{
	mFlattenedContents: null
	,mFlattenRequested: null
	,mFlattenOptimized: null
	,mClipRect: null
	,dispose: function() {
		this.__disposeFlattenedContents();
		starling_display_DisplayObjectContainer.prototype.dispose.call(this);
	}
	,__disposeFlattenedContents: function() {
		if(this.mFlattenedContents != null) {
			var _g = 0;
			var _g1 = this.mFlattenedContents.data.get_length();
			while(_g < _g1) {
				var i = _g++;
				this.mFlattenedContents.data.get(i).dispose();
			}
			this.mFlattenedContents = null;
		}
	}
	,flatten: function(ignoreChildOrder) {
		if(ignoreChildOrder == null) {
			ignoreChildOrder = false;
		}
		this.mFlattenRequested = true;
		this.mFlattenOptimized = ignoreChildOrder;
		this.broadcastEventWith("flatten");
	}
	,unflatten: function() {
		this.mFlattenRequested = false;
		this.__disposeFlattenedContents();
	}
	,get_isFlattened: function() {
		if(this.mFlattenedContents == null) {
			return this.mFlattenRequested;
		} else {
			return true;
		}
	}
	,get_clipRect: function() {
		return this.mClipRect;
	}
	,set_clipRect: function(value) {
		if(this.mClipRect != null && value != null) {
			this.mClipRect.copyFrom(value);
		} else {
			this.mClipRect = value != null ? value.clone() : null;
		}
		return value;
	}
	,getClipRect: function(targetSpace,resultRect) {
		if(this.mClipRect == null) {
			return null;
		}
		if(resultRect == null) {
			resultRect = new openfl_geom_Rectangle();
		}
		var x = 0.0;
		var y = 0.0;
		var minX = 1.79e+308;
		var maxX = -1.79e+308;
		var minY = 1.79e+308;
		var maxY = -1.79e+308;
		var transMatrix = this.getTransformationMatrix(targetSpace,starling_display_Sprite.sHelperMatrix);
		var _g = 0;
		while(_g < 4) {
			var i = _g++;
			switch(i) {
			case 0:
				x = this.mClipRect.get_left();
				y = this.mClipRect.get_top();
				break;
			case 1:
				x = this.mClipRect.get_left();
				y = this.mClipRect.get_bottom();
				break;
			case 2:
				x = this.mClipRect.get_right();
				y = this.mClipRect.get_top();
				break;
			case 3:
				x = this.mClipRect.get_right();
				y = this.mClipRect.get_bottom();
				break;
			}
			var transformedPoint = starling_utils_MatrixUtil.transformCoords(transMatrix,x,y,starling_display_Sprite.sHelperPoint);
			if(minX > transformedPoint.x) {
				minX = transformedPoint.x;
			}
			if(maxX < transformedPoint.x) {
				maxX = transformedPoint.x;
			}
			if(minY > transformedPoint.y) {
				minY = transformedPoint.y;
			}
			if(maxY < transformedPoint.y) {
				maxY = transformedPoint.y;
			}
		}
		resultRect.setTo(minX,minY,maxX - minX,maxY - minY);
		return resultRect;
	}
	,getBounds: function(targetSpace,resultRect) {
		var bounds = starling_display_DisplayObjectContainer.prototype.getBounds.call(this,targetSpace,resultRect);
		if(this.mClipRect != null) {
			starling_utils_RectangleUtil.intersect(bounds,this.getClipRect(targetSpace,starling_display_Sprite.sHelperRect),bounds);
		}
		return bounds;
	}
	,hitTest: function(localPoint,forTouch) {
		if(forTouch == null) {
			forTouch = false;
		}
		if(this.mClipRect != null && !this.mClipRect.containsPoint(localPoint)) {
			return null;
		} else {
			return starling_display_DisplayObjectContainer.prototype.hitTest.call(this,localPoint,forTouch);
		}
	}
	,render: function(support,parentAlpha) {
		if(this.mClipRect != null) {
			var clipRect = support.pushClipRect(this.getClipRect(this.get_stage(),starling_display_Sprite.sHelperRect));
			if(clipRect.isEmpty()) {
				support.popClipRect();
				return;
			}
		}
		if(this.mFlattenedContents != null || this.mFlattenRequested) {
			if(this.mFlattenedContents == null) {
				this.mFlattenedContents = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
			}
			if(this.mFlattenRequested) {
				starling_display_QuadBatch.compile(this,this.mFlattenedContents);
				if(this.mFlattenOptimized) {
					starling_display_QuadBatch.optimize(this.mFlattenedContents);
				}
				support.applyClipRect();
				this.mFlattenRequested = false;
			}
			var alpha = parentAlpha * this.get_alpha();
			var numBatches = this.mFlattenedContents.data.get_length();
			support.finishQuadBatch();
			support.raiseDrawCount(numBatches);
			var mvpMatrix = support.get_mvpMatrix3D();
			var _g = 0;
			var _g1 = numBatches;
			while(_g < _g1) {
				var i = _g++;
				var quadBatch = this.mFlattenedContents.data.get(i);
				var blendMode = quadBatch.get_blendMode() == "auto" ? support.get_blendMode() : quadBatch.get_blendMode();
				quadBatch.renderCustom(mvpMatrix,alpha,blendMode);
			}
		} else {
			starling_display_DisplayObjectContainer.prototype.render.call(this,support,parentAlpha);
		}
		if(this.mClipRect != null) {
			support.popClipRect();
		}
	}
	,__class__: starling_display_Sprite
	,__properties__: $extend(starling_display_DisplayObjectContainer.prototype.__properties__,{set_clipRect:"set_clipRect",get_clipRect:"get_clipRect",get_isFlattened:"get_isFlattened"})
});
var starling_core_StatsDisplay = function() {
	this.mDrawCount = 0;
	this.mMemory = 0;
	this.mFps = 0;
	this.mTotalTime = 0;
	this.mFrameCount = 0;
	starling_display_Sprite.call(this);
	this.mBackground = new starling_display_Quad(70,45,0);
	this.mTextField = new starling_text_TextField(68,45,"","_sans",12,16777215);
	this.mTextField.set_x(2);
	this.mTextField.set_hAlign("left");
	this.mTextField.set_vAlign("top");
	this.addChild(this.mBackground);
	this.addChild(this.mTextField);
	this.set_blendMode("none");
	this.addEventListener("addedToStage",$bind(this,this.onAddedToStage));
	this.addEventListener("removedFromStage",$bind(this,this.onRemovedFromStage));
};
$hxClasses["starling.core.StatsDisplay"] = starling_core_StatsDisplay;
starling_core_StatsDisplay.__name__ = "starling.core.StatsDisplay";
starling_core_StatsDisplay.__super__ = starling_display_Sprite;
starling_core_StatsDisplay.prototype = $extend(starling_display_Sprite.prototype,{
	mBackground: null
	,mTextField: null
	,mFrameCount: null
	,mTotalTime: null
	,mFps: null
	,mMemory: null
	,mDrawCount: null
	,onAddedToStage: function(e) {
		this.addEventListener("enterFrame",$bind(this,this.onEnterFrame));
		this.mTotalTime = this.mFrameCount = 0;
		this.update();
	}
	,onRemovedFromStage: function(e) {
		this.removeEventListener("enterFrame",$bind(this,this.onEnterFrame));
	}
	,onEnterFrame: function(e) {
		var event = js_Boot.__cast(e , starling_events_EnterFrameEvent);
		this.mTotalTime += event.get_passedTime();
		this.mFrameCount++;
		if(this.mTotalTime > 0.5) {
			this.update();
			this.mFrameCount = (this.mTotalTime = 0) | 0;
		}
	}
	,update: function() {
		this.mFps = this.mTotalTime > 0 ? this.mFrameCount / this.mTotalTime : 0;
		this.mMemory = openfl_system_System.get_totalMemory() * 0.000000954;
		this.mTextField.set_text("FPS: " + (this.mFps < 100 ? Math.round(this.mFps * 10) / 10 : this.mFps) + "\nMEM: " + (this.mMemory < 100 ? Math.round(this.mMemory * 10) / 10 : this.mMemory) + "\nDRW: " + (this.mTotalTime > 0 ? this.mDrawCount - 2 : this.mDrawCount));
	}
	,render: function(support,parentAlpha) {
		support.finishQuadBatch();
		starling_display_Sprite.prototype.render.call(this,support,parentAlpha);
	}
	,get_drawCount: function() {
		return this.mDrawCount;
	}
	,set_drawCount: function(value) {
		return this.mDrawCount = value;
	}
	,get_fps: function() {
		return this.mFps;
	}
	,set_fps: function(value) {
		return this.mFps = value;
	}
	,get_memory: function() {
		return this.mMemory;
	}
	,set_memory: function(value) {
		return this.mMemory = value;
	}
	,__class__: starling_core_StatsDisplay
	,__properties__: $extend(starling_display_Sprite.prototype.__properties__,{set_memory:"set_memory",get_memory:"get_memory",set_fps:"set_fps",get_fps:"get_fps",set_drawCount:"set_drawCount",get_drawCount:"get_drawCount"})
});
var starling_display_BlendMode = function() { };
$hxClasses["starling.display.BlendMode"] = starling_display_BlendMode;
starling_display_BlendMode.__name__ = "starling.display.BlendMode";
starling_display_BlendMode.getBlendFactors = function(mode,premultipliedAlpha) {
	if(premultipliedAlpha == null) {
		premultipliedAlpha = true;
	}
	var modes = starling_display_BlendMode.sBlendFactors[premultipliedAlpha ? 1 : 0];
	if(__map_reserved[mode] != null ? modes.existsReserved(mode) : modes.h.hasOwnProperty(mode)) {
		return __map_reserved[mode] != null ? modes.getReserved(mode) : modes.h[mode];
	} else {
		throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Invalid blend mode"));
	}
};
starling_display_BlendMode.register = function(name,sourceFactor,destFactor,premultipliedAlpha) {
	if(premultipliedAlpha == null) {
		premultipliedAlpha = true;
	}
	var modes = starling_display_BlendMode.sBlendFactors[premultipliedAlpha ? 1 : 0];
	var v = [sourceFactor,destFactor];
	if(__map_reserved[name] != null) {
		modes.setReserved(name,v);
	} else {
		modes.h[name] = v;
	}
	var otherModes = starling_display_BlendMode.sBlendFactors[!premultipliedAlpha ? 1 : 0];
	if(!(__map_reserved[name] != null ? otherModes.existsReserved(name) : otherModes.h.hasOwnProperty(name))) {
		var v1 = [sourceFactor,destFactor];
		if(__map_reserved[name] != null) {
			otherModes.setReserved(name,v1);
		} else {
			otherModes.h[name] = v1;
		}
	}
};
var starling_display_Button = function(upState,text,downState,overState,disabledState) {
	if(text == null) {
		text = "";
	}
	starling_display_DisplayObjectContainer.call(this);
	if(upState == null) {
		throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Texture 'upState' cannot be null"));
	}
	this.mUpState = upState;
	this.mDownState = downState;
	this.mOverState = overState;
	this.mDisabledState = disabledState;
	this.mState = "up";
	this.mBody = new starling_display_Image(upState);
	this.mScaleWhenDown = downState != null ? 1.0 : 0.9;
	this.mScaleWhenOver = this.mAlphaWhenDown = 1.0;
	this.mAlphaWhenDisabled = disabledState != null ? 1.0 : 0.5;
	this.mEnabled = true;
	this.mUseHandCursor = true;
	this.mTextBounds = new openfl_geom_Rectangle(0,0,this.mBody.get_width(),this.mBody.get_height());
	this.mTriggerBounds = new openfl_geom_Rectangle();
	this.mContents = new starling_display_Sprite();
	this.mContents.addChild(this.mBody);
	this.addChild(this.mContents);
	this.addEventListener("touch",$bind(this,this.__onTouch));
	this.set_touchGroup(true);
	this.set_text(text);
};
$hxClasses["starling.display.Button"] = starling_display_Button;
starling_display_Button.__name__ = "starling.display.Button";
starling_display_Button.__super__ = starling_display_DisplayObjectContainer;
starling_display_Button.prototype = $extend(starling_display_DisplayObjectContainer.prototype,{
	mUpState: null
	,mDownState: null
	,mOverState: null
	,mDisabledState: null
	,mContents: null
	,mBody: null
	,mTextField: null
	,mTextBounds: null
	,mOverlay: null
	,mScaleWhenDown: null
	,mScaleWhenOver: null
	,mAlphaWhenDown: null
	,mAlphaWhenDisabled: null
	,mEnabled: null
	,mState: null
	,mTriggerBounds: null
	,dispose: function() {
		if(this.mTextField != null) {
			this.mTextField.dispose();
		}
		starling_display_DisplayObjectContainer.prototype.dispose.call(this);
	}
	,readjustSize: function(resetTextBounds) {
		if(resetTextBounds == null) {
			resetTextBounds = true;
		}
		this.mBody.readjustSize();
		if(resetTextBounds && this.mTextField != null) {
			this.set_textBounds(new openfl_geom_Rectangle(0,0,this.mBody.get_width(),this.mBody.get_height()));
		}
	}
	,__createTextField: function() {
		if(this.mTextField == null) {
			this.mTextField = new starling_text_TextField(this.mTextBounds.width | 0,this.mTextBounds.height | 0,"");
			this.mTextField.set_vAlign("center");
			this.mTextField.set_hAlign("center");
			this.mTextField.set_touchable(false);
			this.mTextField.set_autoScale(true);
			this.mTextField.set_batchable(true);
		}
		this.mTextField.set_width(this.mTextBounds.width);
		this.mTextField.set_height(this.mTextBounds.height);
		this.mTextField.set_x(this.mTextBounds.x);
		this.mTextField.set_y(this.mTextBounds.y);
	}
	,__onTouch: function(event) {
		openfl_ui_Mouse.set_cursor(this.mUseHandCursor && this.mEnabled && event.interactsWith(this) ? "button" : "auto");
		var touch = event.getTouch(this);
		var isWithinBounds;
		if(!this.mEnabled) {
			return;
		} else if(touch == null) {
			this.set_state("up");
		} else if(touch.get_phase() == "hover") {
			this.set_state("over");
		} else if(touch.get_phase() == "began" && this.mState != "down") {
			this.mTriggerBounds = this.getBounds(this.get_stage(),this.mTriggerBounds);
			this.mTriggerBounds.inflate(50,50);
			this.set_state("down");
		} else if(touch.get_phase() == "moved") {
			isWithinBounds = this.mTriggerBounds.contains(touch.get_globalX(),touch.get_globalY());
			if(this.mState == "down" && !isWithinBounds) {
				this.set_state("up");
			} else if(this.mState == "up" && isWithinBounds) {
				this.set_state("down");
			}
		} else if(touch.get_phase() == "ended" && this.mState == "down") {
			this.set_state("up");
			if(!touch.get_cancelled()) {
				this.dispatchEventWith("triggered",true);
			}
		}
	}
	,get_state: function() {
		return this.mState;
	}
	,set_state: function(value) {
		this.mState = value;
		this.__refreshState();
		return value;
	}
	,__refreshState: function() {
		this.mContents.set_x(this.mContents.set_y(0));
		this.mContents.set_scaleX(this.mContents.set_scaleY(this.mContents.set_alpha(1.0)));
		switch(this.mState) {
		case "disabled":
			this.__setStateTexture(this.mDisabledState);
			this.mContents.set_alpha(this.mAlphaWhenDisabled);
			break;
		case "down":
			this.__setStateTexture(this.mDownState);
			this.mContents.set_alpha(this.mAlphaWhenDown);
			this.mContents.set_scaleX(this.mContents.set_scaleY(this.mScaleWhenDown));
			this.mContents.set_x((1.0 - this.mScaleWhenDown) / 2.0 * this.mBody.get_width());
			this.mContents.set_y((1.0 - this.mScaleWhenDown) / 2.0 * this.mBody.get_height());
			break;
		case "over":
			this.__setStateTexture(this.mOverState);
			this.mContents.set_scaleX(this.mContents.set_scaleY(this.mScaleWhenOver));
			this.mContents.set_x((1.0 - this.mScaleWhenOver) / 2.0 * this.mBody.get_width());
			this.mContents.set_y((1.0 - this.mScaleWhenOver) / 2.0 * this.mBody.get_height());
			break;
		case "up":
			this.__setStateTexture(this.mUpState);
			break;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Invalid button state: " + this.mState));
		}
	}
	,__setStateTexture: function(texture) {
		this.mBody.set_texture(texture != null ? texture : this.mUpState);
	}
	,get_scaleWhenDown: function() {
		return this.mScaleWhenDown;
	}
	,set_scaleWhenDown: function(value) {
		this.mScaleWhenDown = value;
		if(this.mState == "down") {
			this.__refreshState();
		}
		return value;
	}
	,get_scaleWhenOver: function() {
		return this.mScaleWhenOver;
	}
	,set_scaleWhenOver: function(value) {
		this.mScaleWhenOver = value;
		if(this.mState == "over") {
			this.__refreshState();
		}
		return value;
	}
	,get_alphaWhenDown: function() {
		return this.mAlphaWhenDown;
	}
	,set_alphaWhenDown: function(value) {
		this.mAlphaWhenDown = value;
		if(this.mState == "down") {
			this.__refreshState();
		}
		return value;
	}
	,get_alphaWhenDisabled: function() {
		return this.mAlphaWhenDisabled;
	}
	,set_alphaWhenDisabled: function(value) {
		this.mAlphaWhenDisabled = value;
		if(this.mState == "disabled") {
			this.__refreshState();
		}
		return value;
	}
	,get_enabled: function() {
		return this.mEnabled;
	}
	,set_enabled: function(value) {
		if(this.mEnabled != value) {
			this.mEnabled = value;
			this.set_state(value ? "up" : "disabled");
		}
		return value;
	}
	,get_text: function() {
		if(this.mTextField != null) {
			return this.mTextField.get_text();
		} else {
			return "";
		}
	}
	,set_text: function(value) {
		if(value.length == 0) {
			if(this.mTextField != null) {
				this.mTextField.set_text(value);
				this.mTextField.removeFromParent();
			}
		} else {
			this.__createTextField();
			this.mTextField.set_text(value);
			if(this.mTextField.get_parent() == null) {
				this.mContents.addChild(this.mTextField);
			}
		}
		return value;
	}
	,get_fontName: function() {
		if(this.mTextField != null) {
			return this.mTextField.get_fontName();
		} else {
			return "_sans";
		}
	}
	,set_fontName: function(value) {
		this.__createTextField();
		this.mTextField.set_fontName(value);
		return value;
	}
	,get_fontSize: function() {
		if(this.mTextField != null) {
			return this.mTextField.get_fontSize();
		} else {
			return 12;
		}
	}
	,set_fontSize: function(value) {
		this.__createTextField();
		this.mTextField.set_fontSize(value);
		return value;
	}
	,get_fontColor: function() {
		if(this.mTextField != null) {
			return this.mTextField.get_color();
		} else {
			return 0;
		}
	}
	,set_fontColor: function(value) {
		this.__createTextField();
		this.mTextField.set_color(value);
		return value;
	}
	,get_fontBold: function() {
		if(this.mTextField != null) {
			return this.mTextField.get_bold();
		} else {
			return false;
		}
	}
	,set_fontBold: function(value) {
		this.__createTextField();
		this.mTextField.set_bold(value);
		return value;
	}
	,get_upState: function() {
		return this.mUpState;
	}
	,set_upState: function(value) {
		if(value == null) {
			throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Texture 'upState' cannot be null"));
		}
		if(this.mUpState != value) {
			this.mUpState = value;
			if(this.mState == "up" || this.mState == "disabled" && this.mDisabledState == null || this.mState == "down" && this.mDownState == null || this.mState == "over" && this.mOverState == null) {
				this.__setStateTexture(value);
			}
		}
		return value;
	}
	,get_downState: function() {
		return this.mDownState;
	}
	,set_downState: function(value) {
		if(this.mDownState != value) {
			this.mDownState = value;
			if(this.mState == "down") {
				this.__setStateTexture(value);
			}
		}
		return value;
	}
	,get_overState: function() {
		return this.mOverState;
	}
	,set_overState: function(value) {
		if(this.mOverState != value) {
			this.mOverState = value;
			if(this.mState == "over") {
				this.__setStateTexture(value);
			}
		}
		return value;
	}
	,get_disabledState: function() {
		return this.mDisabledState;
	}
	,set_disabledState: function(value) {
		if(this.mDisabledState != value) {
			this.mDisabledState = value;
			if(this.mState == "disabled") {
				this.__setStateTexture(value);
			}
		}
		return value;
	}
	,get_textVAlign: function() {
		if(this.mTextField != null) {
			return this.mTextField.get_vAlign();
		} else {
			return "center";
		}
	}
	,set_textVAlign: function(value) {
		this.__createTextField();
		this.mTextField.set_vAlign(value);
		return value;
	}
	,get_textHAlign: function() {
		if(this.mTextField != null) {
			return this.mTextField.get_hAlign();
		} else {
			return "center";
		}
	}
	,set_textHAlign: function(value) {
		this.__createTextField();
		this.mTextField.set_hAlign(value);
		return value;
	}
	,get_textBounds: function() {
		return this.mTextBounds.clone();
	}
	,set_textBounds: function(value) {
		this.mTextBounds = value.clone();
		this.__createTextField();
		return value;
	}
	,get_color: function() {
		return this.mBody.get_color();
	}
	,set_color: function(value) {
		return this.mBody.set_color(value);
	}
	,get_smoothing: function() {
		return this.mBody.get_smoothing();
	}
	,set_smoothing: function(value) {
		return this.mBody.set_smoothing(value);
	}
	,get_overlay: function() {
		if(this.mOverlay == null) {
			this.mOverlay = new starling_display_Sprite();
		}
		this.mContents.addChild(this.mOverlay);
		return this.mOverlay;
	}
	,get_useHandCursor: function() {
		return this.mUseHandCursor;
	}
	,set_useHandCursor: function(value) {
		return this.mUseHandCursor = value;
	}
	,__class__: starling_display_Button
	,__properties__: $extend(starling_display_DisplayObjectContainer.prototype.__properties__,{get_overlay:"get_overlay",set_color:"set_color",get_color:"get_color",set_textBounds:"set_textBounds",get_textBounds:"get_textBounds",set_textHAlign:"set_textHAlign",get_textHAlign:"get_textHAlign",set_textVAlign:"set_textVAlign",get_textVAlign:"get_textVAlign",set_disabledState:"set_disabledState",get_disabledState:"get_disabledState",set_overState:"set_overState",get_overState:"get_overState",set_downState:"set_downState",get_downState:"get_downState",set_upState:"set_upState",get_upState:"get_upState",set_fontBold:"set_fontBold",get_fontBold:"get_fontBold",set_fontColor:"set_fontColor",get_fontColor:"get_fontColor",set_fontSize:"set_fontSize",get_fontSize:"get_fontSize",set_fontName:"set_fontName",get_fontName:"get_fontName",set_text:"set_text",get_text:"get_text",set_enabled:"set_enabled",get_enabled:"get_enabled",set_alphaWhenDisabled:"set_alphaWhenDisabled",get_alphaWhenDisabled:"get_alphaWhenDisabled",set_alphaWhenDown:"set_alphaWhenDown",get_alphaWhenDown:"get_alphaWhenDown",set_scaleWhenOver:"set_scaleWhenOver",get_scaleWhenOver:"get_scaleWhenOver",set_scaleWhenDown:"set_scaleWhenDown",get_scaleWhenDown:"get_scaleWhenDown",set_state:"set_state",get_state:"get_state"})
});
var starling_display_ButtonState = function() { };
$hxClasses["starling.display.ButtonState"] = starling_display_ButtonState;
starling_display_ButtonState.__name__ = "starling.display.ButtonState";
var starling_display_Canvas = function() {
	starling_display_DisplayObject.call(this);
	this.mPolygons = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	this.mVertexData = new starling_utils_VertexData(0);
	this.mIndexData = openfl__$Vector_Vector_$Impl_$.toIntVector(null);
	this.mSyncRequired = false;
	this.mFillColor = 16777215;
	this.mFillAlpha = 1.0;
	starling_display_Canvas.registerPrograms();
	starling_core_Starling.get_current().get_stage3D().addEventListener("context3DCreate",$bind(this,this.__onContextCreated),false,0,true);
};
$hxClasses["starling.display.Canvas"] = starling_display_Canvas;
starling_display_Canvas.__name__ = "starling.display.Canvas";
starling_display_Canvas.registerPrograms = function() {
	var target = starling_core_Starling.get_current();
	if(target.hasProgram("Shape")) {
		return;
	}
	var vertexShader = "m44 op, va0, vc0 \n" + "mul v0, va1, vc4 \n";
	var fragmentShader = "mov oc, v0";
	target.registerProgramFromSource("Shape",vertexShader,fragmentShader);
};
starling_display_Canvas.__super__ = starling_display_DisplayObject;
starling_display_Canvas.prototype = $extend(starling_display_DisplayObject.prototype,{
	mSyncRequired: null
	,mPolygons: null
	,mVertexData: null
	,mVertexBuffer: null
	,mIndexData: null
	,mIndexBuffer: null
	,mFillColor: null
	,mFillAlpha: null
	,__onContextCreated: function(event) {
		starling_display_Canvas.registerPrograms();
		this.__syncBuffers();
	}
	,dispose: function() {
		starling_core_Starling.get_current().get_stage3D().removeEventListener("context3DCreate",$bind(this,this.__onContextCreated));
		this.__destroyBuffers();
		starling_display_DisplayObject.prototype.dispose.call(this);
	}
	,drawCircle: function(x,y,radius) {
		this.__appendPolygon(starling_geom_Polygon.createCircle(x,y,radius));
	}
	,drawEllipse: function(x,y,width,height) {
		var radiusX = width / 2.0;
		var radiusY = height / 2.0;
		this.__appendPolygon(starling_geom_Polygon.createEllipse(x + radiusX,y + radiusY,radiusX,radiusY));
	}
	,drawRectangle: function(x,y,width,height) {
		this.__appendPolygon(starling_geom_Polygon.createRectangle(x,y,width,height));
	}
	,drawPolygon: function(polygon) {
		this.__appendPolygon(polygon);
	}
	,beginFill: function(color,alpha) {
		if(alpha == null) {
			alpha = 1.0;
		}
		if(color == null) {
			color = 16777215;
		}
		this.mFillColor = color;
		this.mFillAlpha = alpha;
	}
	,endFill: function() {
		this.mFillColor = 16777215;
		this.mFillAlpha = 1.0;
	}
	,clear: function() {
		this.mVertexData.set_numVertices(0);
		this.mIndexData.data.set_length(0);
		this.mPolygons.data.set_length(0);
		this.__destroyBuffers();
	}
	,render: function(support,parentAlpha) {
		if(this.mIndexData.data.get_length() == 0) {
			return;
		}
		if(this.mSyncRequired) {
			this.__syncBuffers();
		}
		support.finishQuadBatch();
		support.raiseDrawCount();
		var this1 = starling_display_Canvas.sRenderAlpha;
		var this2 = starling_display_Canvas.sRenderAlpha;
		var value = starling_display_Canvas.sRenderAlpha.data.set(2,1.0);
		var value1 = this2.data.set(1,value);
		this1.data.set(0,value1);
		var this3 = starling_display_Canvas.sRenderAlpha;
		var value2 = parentAlpha * this.get_alpha();
		this3.data.set(3,value2);
		var context = starling_core_Starling.get_current().get_context();
		if(context == null) {
			throw new js__$Boot_HaxeError(new starling_errors_MissingContextError());
		}
		support.applyBlendMode(false);
		context.setProgram(starling_core_Starling.get_current().getProgram("Shape"));
		context.setVertexBufferAt(0,this.mVertexBuffer,0,2);
		context.setVertexBufferAt(1,this.mVertexBuffer,2,4);
		context.setProgramConstantsFromMatrix(1,0,support.get_mvpMatrix3D(),true);
		context.setProgramConstantsFromVector(1,4,starling_display_Canvas.sRenderAlpha,1);
		context.drawTriangles(this.mIndexBuffer,0,this.mIndexData.data.get_length() / 3 | 0);
		context.setVertexBufferAt(0,null);
		context.setVertexBufferAt(1,null);
		starling_core_Starling.get_current().removeCurrentProgram();
	}
	,getBounds: function(targetSpace,resultRect) {
		if(resultRect == null) {
			resultRect = new openfl_geom_Rectangle();
		}
		var transformationMatrix = targetSpace == this ? null : this.getTransformationMatrix(targetSpace,starling_display_Canvas.sHelperMatrix);
		return this.mVertexData.getBounds(transformationMatrix,0,-1,resultRect);
	}
	,hitTest: function(localPoint,forTouch) {
		if(forTouch == null) {
			forTouch = false;
		}
		if(forTouch && (!this.get_visible() || !this.get_touchable())) {
			return null;
		}
		if(!this.hitTestMask(localPoint)) {
			return null;
		}
		var len = this.mPolygons.data.get_length();
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			if(this.mPolygons.data.get(i).containsPoint(localPoint)) {
				return this;
			}
		}
		return null;
	}
	,__appendPolygon: function(polygon) {
		var oldNumVertices = this.mVertexData.get_numVertices();
		var oldNumIndices = this.mIndexData.data.get_length();
		polygon.triangulate(this.mIndexData);
		polygon.copyToVertexData(this.mVertexData,oldNumVertices);
		var newNumIndices = this.mIndexData.data.get_length();
		var _g = oldNumIndices;
		var _g1 = newNumIndices;
		while(_g < _g1) {
			var i = _g++;
			var _g2 = i;
			var _g11 = this.mIndexData;
			var value = _g11.data.get(_g2) + oldNumVertices;
			_g11.data.set(_g2,value);
		}
		this.__applyFillColor(oldNumVertices,polygon.get_numVertices());
		var this1 = this.mPolygons;
		var index = this.mPolygons.data.get_length();
		this1.data.set(index,polygon);
		this.mSyncRequired = true;
	}
	,__applyFillColor: function(vertexIndex,numVertices) {
		var endIndex = vertexIndex + numVertices;
		var _g = vertexIndex;
		var _g1 = endIndex;
		while(_g < _g1) {
			var i = _g++;
			this.mVertexData.setColorAndAlpha(i,this.mFillColor,this.mFillAlpha);
		}
	}
	,__syncBuffers: function() {
		this.__destroyBuffers();
		var context = starling_core_Starling.get_current().get_context();
		if(context == null) {
			throw new js__$Boot_HaxeError(new starling_errors_MissingContextError());
		}
		var numVertices = this.mVertexData.get_numVertices();
		var numIndices = this.mIndexData.data.get_length();
		this.mVertexBuffer = context.createVertexBuffer(numVertices,8);
		this.mVertexBuffer.uploadFromTypedArray(this.mVertexData.get_rawData());
		this.mIndexBuffer = context.createIndexBuffer(numIndices);
		this.mIndexBuffer.uploadFromVector(this.mIndexData,0,numIndices);
		this.mSyncRequired = false;
	}
	,__destroyBuffers: function() {
		if(this.mVertexBuffer != null) {
			this.mVertexBuffer.dispose();
		}
		if(this.mIndexBuffer != null) {
			this.mIndexBuffer.dispose();
		}
		this.mVertexBuffer = null;
		this.mIndexBuffer = null;
		this.mSyncRequired = true;
	}
	,__class__: starling_display_Canvas
});
var starling_display_Quad = function(width,height,color,premultipliedAlpha) {
	if(premultipliedAlpha == null) {
		premultipliedAlpha = true;
	}
	if(color == null) {
		color = 16777215;
	}
	starling_display_DisplayObject.call(this);
	if(width == 0.0 || height == 0.0) {
		throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Invalid size: width and height must not be zero"));
	}
	this.mTinted = color != 16777215;
	this.mVertexData = new starling_utils_VertexData(4,premultipliedAlpha);
	this.mVertexData.setPosition(0,0.0,0.0);
	this.mVertexData.setPosition(1,width,0.0);
	this.mVertexData.setPosition(2,0.0,height);
	this.mVertexData.setPosition(3,width,height);
	this.mVertexData.setUniformColor(color);
	this.onVertexDataChanged();
};
$hxClasses["starling.display.Quad"] = starling_display_Quad;
starling_display_Quad.__name__ = "starling.display.Quad";
starling_display_Quad.__super__ = starling_display_DisplayObject;
starling_display_Quad.prototype = $extend(starling_display_DisplayObject.prototype,{
	mTinted: null
	,mVertexData: null
	,onVertexDataChanged: function() {
	}
	,getBounds: function(targetSpace,resultRect) {
		if(resultRect == null) {
			resultRect = new openfl_geom_Rectangle();
		}
		if(targetSpace == this) {
			this.mVertexData.getPosition(3,starling_display_Quad.sHelperPoint);
			resultRect.setTo(0.0,0.0,starling_display_Quad.sHelperPoint.x,starling_display_Quad.sHelperPoint.y);
		} else if(targetSpace == this.get_parent() && this.get_rotation() == 0.0) {
			var scaleX = this.get_scaleX();
			var scaleY = this.get_scaleY();
			this.mVertexData.getPosition(3,starling_display_Quad.sHelperPoint);
			resultRect.setTo(this.get_x() - this.get_pivotX() * scaleX,this.get_y() - this.get_pivotY() * scaleY,starling_display_Quad.sHelperPoint.x * scaleX,starling_display_Quad.sHelperPoint.y * scaleY);
			if(scaleX < 0) {
				resultRect.width *= -1;
				resultRect.x -= resultRect.width;
			}
			if(scaleY < 0) {
				resultRect.height *= -1;
				resultRect.y -= resultRect.height;
			}
		} else if(this.get_is3D() && this.get_stage() != null) {
			this.get_stage().getCameraPosition(targetSpace,starling_display_Quad.sHelperPoint3D);
			this.getTransformationMatrix3D(targetSpace,starling_display_Quad.sHelperMatrix3D);
			this.mVertexData.getBoundsProjected(starling_display_Quad.sHelperMatrix3D,starling_display_Quad.sHelperPoint3D,0,4,resultRect);
		} else {
			this.getTransformationMatrix(targetSpace,starling_display_Quad.sHelperMatrix);
			this.mVertexData.getBounds(starling_display_Quad.sHelperMatrix,0,4,resultRect);
		}
		return resultRect;
	}
	,getVertexColor: function(vertexID) {
		return this.mVertexData.getColor(vertexID);
	}
	,setVertexColor: function(vertexID,color) {
		this.mVertexData.setColor(vertexID,color);
		this.onVertexDataChanged();
		if(color != 16777215) {
			this.mTinted = true;
		} else {
			this.mTinted = this.mVertexData.get_tinted();
		}
	}
	,getVertexAlpha: function(vertexID) {
		return this.mVertexData.getAlpha(vertexID);
	}
	,setVertexAlpha: function(vertexID,alpha) {
		this.mVertexData.setAlpha(vertexID,alpha);
		this.onVertexDataChanged();
		if(alpha != 1.0) {
			this.mTinted = true;
		} else {
			this.mTinted = this.mVertexData.get_tinted();
		}
	}
	,get_color: function() {
		return this.mVertexData.getColor(0);
	}
	,set_color: function(value) {
		this.mVertexData.setUniformColor(value);
		this.onVertexDataChanged();
		if(value != 16777215 || this.get_alpha() != 1.0) {
			this.mTinted = true;
		} else {
			this.mTinted = this.mVertexData.get_tinted();
		}
		return value;
	}
	,set_alpha: function(value) {
		starling_display_DisplayObject.prototype.set_alpha.call(this,value);
		if(value < 1.0) {
			this.mTinted = true;
		} else {
			this.mTinted = this.mVertexData.get_tinted();
		}
		return value;
	}
	,copyVertexDataTo: function(targetData,targetVertexID) {
		if(targetVertexID == null) {
			targetVertexID = 0;
		}
		this.mVertexData.copyTo(targetData,targetVertexID);
	}
	,copyVertexDataTransformedTo: function(targetData,targetVertexID,matrix) {
		if(targetVertexID == null) {
			targetVertexID = 0;
		}
		this.mVertexData.copyTransformedTo(targetData,targetVertexID,matrix,0,4);
	}
	,render: function(support,parentAlpha) {
		support.batchQuad(this,parentAlpha);
	}
	,get_tinted: function() {
		return this.mTinted;
	}
	,get_premultipliedAlpha: function() {
		return this.mVertexData.get_premultipliedAlpha();
	}
	,__class__: starling_display_Quad
	,__properties__: $extend(starling_display_DisplayObject.prototype.__properties__,{get_premultipliedAlpha:"get_premultipliedAlpha",get_tinted:"get_tinted",set_color:"set_color",get_color:"get_color"})
});
var starling_utils_VertexData = function(numVertices,premultipliedAlpha) {
	if(premultipliedAlpha == null) {
		premultipliedAlpha = false;
	}
	this.mPremultipliedAlpha = premultipliedAlpha;
	this.mNumVertices = 0;
	this.set_numVertices(numVertices);
};
$hxClasses["starling.utils.VertexData"] = starling_utils_VertexData;
starling_utils_VertexData.__name__ = "starling.utils.VertexData";
starling_utils_VertexData.prototype = {
	mRawData: null
	,mPremultipliedAlpha: null
	,mNumVertices: null
	,clone: function(vertexID,numVertices) {
		if(numVertices == null) {
			numVertices = -1;
		}
		if(vertexID == null) {
			vertexID = 0;
		}
		if(numVertices < 0 || vertexID + numVertices > this.mNumVertices) {
			numVertices = this.mNumVertices - vertexID;
		}
		var clone = new starling_utils_VertexData(0,this.mPremultipliedAlpha);
		clone.mNumVertices = numVertices;
		clone.mRawData = this.mRawData.subarray(vertexID * 8,numVertices * 8);
		return clone;
	}
	,copyTo: function(targetData,targetVertexID,vertexID,numVertices) {
		if(numVertices == null) {
			numVertices = -1;
		}
		if(vertexID == null) {
			vertexID = 0;
		}
		if(targetVertexID == null) {
			targetVertexID = 0;
		}
		this.copyTransformedTo(targetData,targetVertexID,null,vertexID,numVertices);
	}
	,copyTransformedTo: function(targetData,targetVertexID,matrix,vertexID,numVertices) {
		if(numVertices == null) {
			numVertices = -1;
		}
		if(vertexID == null) {
			vertexID = 0;
		}
		if(targetVertexID == null) {
			targetVertexID = 0;
		}
		if(numVertices < 0 || vertexID + numVertices > this.mNumVertices) {
			numVertices = this.mNumVertices - vertexID;
		}
		var x;
		var y;
		var targetRawData = targetData.mRawData;
		var targetIndex = targetVertexID * 8;
		var sourceIndex = vertexID * 8;
		var sourceEnd = (vertexID + numVertices) * 8;
		if(matrix != null) {
			while(sourceIndex < sourceEnd) {
				x = this.mRawData[sourceIndex++];
				y = this.mRawData[sourceIndex++];
				targetRawData[targetIndex++] = matrix.a * x + matrix.c * y + matrix.tx;
				targetRawData[targetIndex++] = matrix.d * y + matrix.b * x + matrix.ty;
				targetRawData[targetIndex++] = this.mRawData[sourceIndex++];
				targetRawData[targetIndex++] = this.mRawData[sourceIndex++];
				targetRawData[targetIndex++] = this.mRawData[sourceIndex++];
				targetRawData[targetIndex++] = this.mRawData[sourceIndex++];
				targetRawData[targetIndex++] = this.mRawData[sourceIndex++];
				targetRawData[targetIndex++] = this.mRawData[sourceIndex++];
			}
		} else {
			while(sourceIndex < sourceEnd) targetRawData[targetIndex++] = this.mRawData[sourceIndex++];
		}
	}
	,append: function(data) {
		var targetIndex = this.mRawData == null ? 0 : this.mRawData.length;
		var rawData = data.mRawData;
		var rawDataLength = rawData.length;
		this.mNumVertices += data.get_numVertices();
		this.__resizeRawData(this.mNumVertices);
		var _g = 0;
		var _g1 = rawDataLength;
		while(_g < _g1) {
			var i = _g++;
			this.mRawData[targetIndex++] = rawData[i];
		}
	}
	,setPosition: function(vertexID,x,y) {
		var offset = vertexID * 8;
		this.mRawData[offset] = x;
		this.mRawData[offset + 1] = y;
	}
	,getPosition: function(vertexID,position) {
		var offset = vertexID * 8;
		position.x = this.mRawData[offset];
		position.y = this.mRawData[offset + 1];
	}
	,setColorAndAlpha: function(vertexID,color,alpha) {
		if(alpha < 0.001) {
			alpha = 0.001;
		} else if(alpha > 1.0) {
			alpha = 1.0;
		}
		var offset = vertexID * 8 + 2;
		var multiplier = this.mPremultipliedAlpha ? alpha : 1.0;
		this.mRawData[offset] = _$UInt_UInt_$Impl_$.toFloat(color >>> 16 & 255) / 255.0 * multiplier;
		this.mRawData[offset + 1] = _$UInt_UInt_$Impl_$.toFloat(color >>> 8 & 255) / 255.0 * multiplier;
		this.mRawData[offset + 2] = _$UInt_UInt_$Impl_$.toFloat(color & 255) / 255.0 * multiplier;
		this.mRawData[offset + 3] = alpha;
	}
	,setColor: function(vertexID,color) {
		var offset = vertexID * 8 + 2;
		var multiplier = this.mPremultipliedAlpha ? this.mRawData[offset + 3] : 1.0;
		this.mRawData[offset] = _$UInt_UInt_$Impl_$.toFloat(color >>> 16 & 255) / 255.0 * multiplier;
		this.mRawData[offset + 1] = _$UInt_UInt_$Impl_$.toFloat(color >>> 8 & 255) / 255.0 * multiplier;
		this.mRawData[offset + 2] = _$UInt_UInt_$Impl_$.toFloat(color & 255) / 255.0 * multiplier;
	}
	,getColor: function(vertexID) {
		var offset = vertexID * 8 + 2;
		var divisor = this.mPremultipliedAlpha ? this.mRawData[offset + 3] : 1.0;
		if(divisor == 0) {
			return 0;
		} else {
			var red = this.mRawData[offset] / divisor;
			var green = this.mRawData[offset + 1] / divisor;
			var blue = this.mRawData[offset + 2] / divisor;
			return (red * 255 | 0) << 16 | (green * 255 | 0) << 8 | (blue * 255 | 0);
		}
	}
	,setAlpha: function(vertexID,alpha) {
		if(this.mPremultipliedAlpha) {
			this.setColorAndAlpha(vertexID,this.getColor(vertexID),alpha);
		} else {
			this.mRawData[vertexID * 8 + 2 + 3] = alpha;
		}
	}
	,getAlpha: function(vertexID) {
		var offset = vertexID * 8 + 2 + 3;
		return this.mRawData[offset];
	}
	,setTexCoords: function(vertexID,u,v) {
		var offset = vertexID * 8 + 6;
		this.mRawData[offset] = u;
		this.mRawData[offset + 1] = v;
	}
	,getTexCoords: function(vertexID,texCoords) {
		var offset = vertexID * 8 + 6;
		texCoords.x = this.mRawData[offset];
		texCoords.y = this.mRawData[offset + 1];
	}
	,translateVertex: function(vertexID,deltaX,deltaY) {
		var offset = vertexID * 8;
		this.mRawData[offset] += deltaX;
		this.mRawData[offset + 1] += deltaY;
	}
	,transformVertex: function(vertexID,matrix,numVertices) {
		if(numVertices == null) {
			numVertices = 1;
		}
		var x;
		var y;
		var offset = vertexID * 8;
		var _g = 0;
		var _g1 = numVertices;
		while(_g < _g1) {
			var i = _g++;
			x = this.mRawData[offset];
			y = this.mRawData[offset + 1];
			this.mRawData[offset] = matrix.a * x + matrix.c * y + matrix.tx;
			this.mRawData[offset + 1] = matrix.d * y + matrix.b * x + matrix.ty;
			offset += 8;
		}
	}
	,setUniformColor: function(color) {
		var _g = 0;
		var _g1 = this.mNumVertices;
		while(_g < _g1) {
			var i = _g++;
			this.setColor(i,color);
		}
	}
	,setUniformAlpha: function(alpha) {
		var _g = 0;
		var _g1 = this.mNumVertices;
		while(_g < _g1) {
			var i = _g++;
			this.setAlpha(i,alpha);
		}
	}
	,scaleAlpha: function(vertexID,factor,numVertices) {
		if(numVertices == null) {
			numVertices = 1;
		}
		if(factor == 1.0) {
			return;
		}
		if(numVertices < 0 || vertexID + numVertices > this.mNumVertices) {
			numVertices = this.mNumVertices - vertexID;
		}
		if(this.mPremultipliedAlpha) {
			var _g = 0;
			var _g1 = numVertices;
			while(_g < _g1) {
				var i = _g++;
				this.setAlpha(vertexID + i,this.getAlpha(vertexID + i) * factor);
			}
		} else {
			var offset = vertexID * 8 + 2 + 3;
			var _g2 = 0;
			var _g11 = numVertices;
			while(_g2 < _g11) {
				var i1 = _g2++;
				var idx = offset + i1 * 8 | 0;
				this.mRawData[idx] *= factor;
			}
		}
	}
	,getBounds: function(transformationMatrix,vertexID,numVertices,resultRect) {
		if(numVertices == null) {
			numVertices = -1;
		}
		if(vertexID == null) {
			vertexID = 0;
		}
		if(resultRect == null) {
			resultRect = new openfl_geom_Rectangle();
		}
		if(numVertices < 0 || vertexID + numVertices > this.mNumVertices) {
			numVertices = this.mNumVertices - vertexID;
		}
		if(numVertices == 0) {
			if(transformationMatrix == null) {
				resultRect.setEmpty();
			} else {
				starling_utils_MatrixUtil.transformCoords(transformationMatrix,0,0,starling_utils_VertexData.sHelperPoint);
				resultRect.setTo(starling_utils_VertexData.sHelperPoint.x,starling_utils_VertexData.sHelperPoint.y,0,0);
			}
		} else {
			var minX = 1.79e+308;
			var maxX = -1.79e+308;
			var minY = 1.79e+308;
			var maxY = -1.79e+308;
			var offset = vertexID * 8;
			var x;
			var y;
			var i;
			if(transformationMatrix == null) {
				var _g = 0;
				var _g1 = numVertices;
				while(_g < _g1) {
					var i1 = _g++;
					x = this.mRawData[offset];
					y = this.mRawData[offset + 1];
					offset += 8;
					if(minX > x) {
						minX = x;
					}
					if(maxX < x) {
						maxX = x;
					}
					if(minY > y) {
						minY = y;
					}
					if(maxY < y) {
						maxY = y;
					}
				}
			} else {
				var _g2 = 0;
				var _g11 = numVertices;
				while(_g2 < _g11) {
					var i2 = _g2++;
					x = this.mRawData[offset];
					y = this.mRawData[offset + 1];
					offset += 8;
					starling_utils_MatrixUtil.transformCoords(transformationMatrix,x,y,starling_utils_VertexData.sHelperPoint);
					if(minX > starling_utils_VertexData.sHelperPoint.x) {
						minX = starling_utils_VertexData.sHelperPoint.x;
					}
					if(maxX < starling_utils_VertexData.sHelperPoint.x) {
						maxX = starling_utils_VertexData.sHelperPoint.x;
					}
					if(minY > starling_utils_VertexData.sHelperPoint.y) {
						minY = starling_utils_VertexData.sHelperPoint.y;
					}
					if(maxY < starling_utils_VertexData.sHelperPoint.y) {
						maxY = starling_utils_VertexData.sHelperPoint.y;
					}
				}
			}
			resultRect.setTo(minX,minY,maxX - minX,maxY - minY);
		}
		return resultRect;
	}
	,getBoundsProjected: function(transformationMatrix,camPos,vertexID,numVertices,resultRect) {
		if(numVertices == null) {
			numVertices = -1;
		}
		if(vertexID == null) {
			vertexID = 0;
		}
		if(camPos == null) {
			throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("camPos must not be null"));
		}
		if(resultRect == null) {
			resultRect = new openfl_geom_Rectangle();
		}
		if(numVertices < 0 || vertexID + numVertices > this.mNumVertices) {
			numVertices = this.mNumVertices - vertexID;
		}
		if(numVertices == 0) {
			if(transformationMatrix != null) {
				starling_utils_MatrixUtil.transformCoords3D(transformationMatrix,0,0,0,starling_utils_VertexData.sHelperPoint3D);
			} else {
				starling_utils_VertexData.sHelperPoint3D.setTo(0,0,0);
			}
			starling_utils_MathUtil.intersectLineWithXYPlane(camPos,starling_utils_VertexData.sHelperPoint3D,starling_utils_VertexData.sHelperPoint);
			resultRect.setTo(starling_utils_VertexData.sHelperPoint.x,starling_utils_VertexData.sHelperPoint.y,0,0);
		} else {
			var minX = 1.79e+308;
			var maxX = -1.79e+308;
			var minY = 1.79e+308;
			var maxY = -1.79e+308;
			var offset = vertexID * 8;
			var x;
			var y;
			var i;
			var _g = 0;
			var _g1 = numVertices;
			while(_g < _g1) {
				var i1 = _g++;
				x = this.mRawData[offset];
				y = this.mRawData[offset + 1];
				offset += 8;
				if(transformationMatrix != null) {
					starling_utils_MatrixUtil.transformCoords3D(transformationMatrix,x,y,0,starling_utils_VertexData.sHelperPoint3D);
				} else {
					starling_utils_VertexData.sHelperPoint3D.setTo(x,y,0);
				}
				starling_utils_MathUtil.intersectLineWithXYPlane(camPos,starling_utils_VertexData.sHelperPoint3D,starling_utils_VertexData.sHelperPoint);
				if(minX > starling_utils_VertexData.sHelperPoint.x) {
					minX = starling_utils_VertexData.sHelperPoint.x;
				}
				if(maxX < starling_utils_VertexData.sHelperPoint.x) {
					maxX = starling_utils_VertexData.sHelperPoint.x;
				}
				if(minY > starling_utils_VertexData.sHelperPoint.y) {
					minY = starling_utils_VertexData.sHelperPoint.y;
				}
				if(maxY < starling_utils_VertexData.sHelperPoint.y) {
					maxY = starling_utils_VertexData.sHelperPoint.y;
				}
			}
			resultRect.setTo(minX,minY,maxX - minX,maxY - minY);
		}
		return resultRect;
	}
	,toString: function() {
		var result = "[VertexData \n";
		var position = new openfl_geom_Point();
		var texCoords = new openfl_geom_Point();
		var _g = 0;
		var _g1 = this.get_numVertices();
		while(_g < _g1) {
			var i = _g++;
			this.getPosition(i,position);
			this.getTexCoords(i,texCoords);
			result += "  [Vertex " + i + ": " + "x=" + (position.x == null ? "null" : "" + position.x) + ", " + "y=" + (position.y == null ? "null" : "" + position.y) + ", " + "rgb=" + StringTools.hex(this.getColor(i)) + ", " + "a=" + Std.string(this.getAlpha(i)) + ", " + "u=" + (texCoords.x == null ? "null" : "" + texCoords.x) + ", " + "v=" + (texCoords.y == null ? "null" : "" + texCoords.y) + "]" + (i == this.get_numVertices() - 1 ? "\n" : ",\n");
		}
		return result + "]";
	}
	,get_tinted: function() {
		var offset = 2;
		var _g = 0;
		var _g1 = this.mNumVertices;
		while(_g < _g1) {
			var i = _g++;
			if(this.mRawData[offset] != 1.0) {
				return true;
			}
			if(this.mRawData[offset + 1] != 1.0) {
				return true;
			}
			if(this.mRawData[offset + 2] != 1.0) {
				return true;
			}
			if(this.mRawData[offset + 3] != 1.0) {
				return true;
			}
			offset += 8;
		}
		return false;
	}
	,setPremultipliedAlpha: function(value,updateData) {
		if(updateData == null) {
			updateData = true;
		}
		if(value == this.mPremultipliedAlpha) {
			return;
		}
		if(updateData) {
			var dataLength = this.mNumVertices * 8;
			var i = 2;
			while(i < dataLength) {
				var alpha = this.mRawData[i + 3];
				var divisor = this.mPremultipliedAlpha ? alpha : 1.0;
				var multiplier = value ? alpha : 1.0;
				if(divisor != 0) {
					this.mRawData[i] = this.mRawData[i] / divisor * multiplier;
					this.mRawData[i + 1] = this.mRawData[i + 1] / divisor * multiplier;
					this.mRawData[i + 2] = this.mRawData[i + 2] / divisor * multiplier;
				}
				i += 8;
			}
		}
		this.mPremultipliedAlpha = value;
	}
	,get_premultipliedAlpha: function() {
		return this.mPremultipliedAlpha;
	}
	,set_premultipliedAlpha: function(value) {
		this.setPremultipliedAlpha(value);
		return this.mPremultipliedAlpha;
	}
	,get_numVertices: function() {
		return this.mNumVertices;
	}
	,set_numVertices: function(value) {
		if(value == 0) {
			this.mRawData = null;
			return 0;
		}
		this.__resizeRawData(value);
		var startIndex = this.mNumVertices * 8 + 2 + 3;
		var endIndex = value * 8;
		var i = startIndex;
		while(i < endIndex) {
			this.mRawData[i] = 1.0;
			i += 8;
		}
		this.mNumVertices = value;
		return value;
	}
	,__resizeRawData: function(numVertices) {
		var existingRawData = this.mRawData;
		this.mRawData = new Float32Array(numVertices * 8);
		if(existingRawData != null && existingRawData.byteLength < this.mRawData.byteLength) {
			this.mRawData.set(existingRawData);
		}
	}
	,get_rawData: function() {
		return this.mRawData;
	}
	,__class__: starling_utils_VertexData
	,__properties__: {get_rawData:"get_rawData",set_numVertices:"set_numVertices",get_numVertices:"get_numVertices",set_premultipliedAlpha:"set_premultipliedAlpha",get_premultipliedAlpha:"get_premultipliedAlpha",get_tinted:"get_tinted"}
};
var starling_display_Image = function(texture) {
	if(texture != null) {
		var frame = texture.get_frame();
		var width = frame != null ? frame.width : texture.get_width();
		var height = frame != null ? frame.height : texture.get_height();
		var pma = texture.get_premultipliedAlpha();
		starling_display_Quad.call(this,width,height,16777215,pma);
		this.mBatcherQuad = new openfl__$internal_renderer_opengl_batcher_Quad();
		this.mVertexData.setTexCoords(0,0.0,0.0);
		this.mVertexData.setTexCoords(1,1.0,0.0);
		this.mVertexData.setTexCoords(2,0.0,1.0);
		this.mVertexData.setTexCoords(3,1.0,1.0);
		this.mTexture = texture;
		this.mSmoothing = "bilinear";
		this.mVertexDataCache = new starling_utils_VertexData(4,pma);
		this.mVertexDataCacheInvalid = true;
	} else {
		throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Texture cannot be null"));
	}
};
$hxClasses["starling.display.Image"] = starling_display_Image;
starling_display_Image.__name__ = "starling.display.Image";
starling_display_Image.fromBitmap = function(bitmap,generateMipMaps,scale) {
	if(scale == null) {
		scale = 1;
	}
	if(generateMipMaps == null) {
		generateMipMaps = true;
	}
	return new starling_display_Image(starling_textures_Texture.fromBitmap(bitmap,generateMipMaps,false,scale));
};
starling_display_Image.__super__ = starling_display_Quad;
starling_display_Image.prototype = $extend(starling_display_Quad.prototype,{
	mTexture: null
	,mSmoothing: null
	,mBatcherQuad: null
	,mBatcherQuadColorTransform: null
	,mVertexDataCache: null
	,mVertexDataCacheInvalid: null
	,mBatcherQuadTextureData: null
	,onVertexDataChanged: function() {
		this.mVertexDataCacheInvalid = true;
	}
	,set_color: function(value) {
		starling_display_Quad.prototype.set_color.call(this,value);
		var colorTransform = this.mBatcherQuadColorTransform;
		if(colorTransform == null) {
			colorTransform = this.mBatcherQuadColorTransform = new openfl_geom_ColorTransform();
		}
		var multiplier = this.mVertexData.get_premultipliedAlpha() ? this.get_alpha() : 1.0;
		colorTransform.redMultiplier = _$UInt_UInt_$Impl_$.toFloat(value >>> 16 & 255) / 255.0 * multiplier;
		colorTransform.greenMultiplier = _$UInt_UInt_$Impl_$.toFloat(value >>> 8 & 255) / 255.0 * multiplier;
		colorTransform.blueMultiplier = _$UInt_UInt_$Impl_$.toFloat(value & 255) / 255.0 * multiplier;
		return value;
	}
	,readjustSize: function() {
		var frame = this.get_texture().get_frame();
		var width = frame != null ? frame.width : this.get_texture().get_width();
		var height = frame != null ? frame.height : this.get_texture().get_height();
		this.mVertexData.setPosition(0,0.0,0.0);
		this.mVertexData.setPosition(1,width,0.0);
		this.mVertexData.setPosition(2,0.0,height);
		this.mVertexData.setPosition(3,width,height);
		this.onVertexDataChanged();
	}
	,setTexCoords: function(vertexID,coords) {
		this.mVertexData.setTexCoords(vertexID,coords.x,coords.y);
		this.onVertexDataChanged();
	}
	,setTexCoordsTo: function(vertexID,u,v) {
		this.mVertexData.setTexCoords(vertexID,u,v);
		this.onVertexDataChanged();
	}
	,getTexCoords: function(vertexID,resultPoint) {
		if(resultPoint == null) {
			resultPoint = new openfl_geom_Point();
		}
		this.mVertexData.getTexCoords(vertexID,resultPoint);
		return resultPoint;
	}
	,copyVertexDataTo: function(targetData,targetVertexID) {
		if(targetVertexID == null) {
			targetVertexID = 0;
		}
		this.copyVertexDataTransformedTo(targetData,targetVertexID,null);
	}
	,copyVertexDataTransformedTo: function(targetData,targetVertexID,matrix) {
		if(targetVertexID == null) {
			targetVertexID = 0;
		}
		if(this.mVertexDataCacheInvalid) {
			this.mVertexDataCacheInvalid = false;
			this.mVertexData.copyTo(this.mVertexDataCache);
			this.mTexture.adjustVertexData(this.mVertexDataCache,0,4);
			var point = starling_display_Image.sHelperPoint;
			var data = this.mVertexDataCache;
			data.getTexCoords(0,point);
			var u0 = point.x;
			var v0 = point.y;
			data.getTexCoords(1,point);
			var u1 = point.x;
			var v1 = point.y;
			data.getTexCoords(3,point);
			var u2 = point.x;
			var v2 = point.y;
			data.getTexCoords(2,point);
			var u3 = point.x;
			var v3 = point.y;
			var tex = this.mTexture.get_base().__getTexture();
			var pma = this.mTexture.get_premultipliedAlpha();
			this.mBatcherQuadTextureData = new openfl__$internal_renderer_opengl_batcher_QuadTextureData(tex,openfl__$internal_renderer_opengl_batcher_QuadTextureData.createArray(u0,v0,u1,v1,u2,v2,u3,v3),pma);
		}
		this.mVertexDataCache.copyTransformedTo(targetData,targetVertexID,matrix,0,4);
	}
	,get_texture: function() {
		return this.mTexture;
	}
	,set_texture: function(value) {
		if(value == null) {
			throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Texture cannot be null"));
		} else if(value != this.mTexture) {
			this.mTexture = value;
			this.mVertexData.setPremultipliedAlpha(this.mTexture.get_premultipliedAlpha());
			this.mVertexDataCache.setPremultipliedAlpha(this.mTexture.get_premultipliedAlpha(),false);
			this.onVertexDataChanged();
		}
		return value;
	}
	,get_smoothing: function() {
		return this.mSmoothing;
	}
	,set_smoothing: function(value) {
		if(starling_textures_TextureSmoothing.isValid(value)) {
			this.mSmoothing = value;
		} else {
			throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Invalid smoothing mode: " + value));
		}
		return value;
	}
	,render: function(support,parentAlpha) {
		this.prepareQuad(support,parentAlpha);
		starling_core_Starling.get_current().get_context().__renderSession.batcher.render(this.mBatcherQuad);
	}
	,prepareQuad: function(support,parentAlpha) {
		var quad = this.mBatcherQuad;
		var data = starling_display_Image.sHelperVertexData;
		var point = starling_display_Image.sHelperPoint;
		this.copyVertexDataTransformedTo(data,0,support.get_modelViewMatrix());
		var vertexData = quad.vertexData;
		data.getPosition(0,point);
		vertexData[0] = point.x;
		vertexData[1] = point.y;
		data.getPosition(1,point);
		vertexData[2] = point.x;
		vertexData[3] = point.y;
		data.getPosition(3,point);
		vertexData[4] = point.x;
		vertexData[5] = point.y;
		data.getPosition(2,point);
		vertexData[6] = point.x;
		vertexData[7] = point.y;
		this.mBatcherQuadTextureData.data = this.mTexture.get_base().__getTexture();
		quad.texture = this.mBatcherQuadTextureData;
		var alpha = parentAlpha * this.mAlpha;
		var colorTransform = this.mBatcherQuadColorTransform;
		var blendMode = starling_utils_BlendModeUtils.toBatcherBlendMode(this.mBlendMode,this.mTexture.get_premultipliedAlpha());
		quad.alpha = alpha;
		quad.colorTransform = colorTransform;
		quad.blendMode = blendMode;
		quad.smoothing = this.mSmoothing != "none";
	}
	,transfromVertices: function(matrix) {
		this.mVertexData.copyTransformedTo(this.mVertexData,0,matrix);
		this.mVertexDataCacheInvalid = true;
	}
	,__class__: starling_display_Image
	,__properties__: $extend(starling_display_Quad.prototype.__properties__,{set_smoothing:"set_smoothing",get_smoothing:"get_smoothing",set_texture:"set_texture",get_texture:"get_texture"})
});
var starling_display_MovieClip = function(textures,fps) {
	if(fps == null) {
		fps = 12;
	}
	this.mSoundTransform = null;
	if(textures.data.get_length() > 0) {
		starling_display_Image.call(this,textures.data.get(0));
		this.init(textures,fps);
	} else {
		throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Empty texture array"));
	}
};
$hxClasses["starling.display.MovieClip"] = starling_display_MovieClip;
starling_display_MovieClip.__name__ = "starling.display.MovieClip";
starling_display_MovieClip.__interfaces__ = [starling_animation_IAnimatable];
starling_display_MovieClip.__super__ = starling_display_Image;
starling_display_MovieClip.prototype = $extend(starling_display_Image.prototype,{
	mTextures: null
	,mSounds: null
	,mDurations: null
	,mStartTimes: null
	,mDefaultFrameDuration: null
	,mCurrentTime: null
	,mCurrentFrame: null
	,mLoop: null
	,mPlaying: null
	,mMuted: null
	,mWasStopped: null
	,mSoundTransform: null
	,init: function(textures,fps) {
		if(fps <= 0) {
			throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Invalid fps: " + fps));
		}
		var numFrames = textures.data.get_length();
		this.mDefaultFrameDuration = 1.0 / fps;
		this.mLoop = true;
		this.mPlaying = true;
		this.mCurrentTime = 0.0;
		this.mCurrentFrame = 0;
		this.mWasStopped = true;
		var data = null;
		this.mTextures = new openfl__$Vector_AbstractVector(textures.data.concat(data));
		this.mSounds = openfl__$Vector_Vector_$Impl_$.toObjectVector(null,numFrames);
		this.mDurations = openfl__$Vector_Vector_$Impl_$.toFloatVector(null,numFrames);
		this.mStartTimes = openfl__$Vector_Vector_$Impl_$.toFloatVector(null,numFrames);
		var _g = 0;
		var _g1 = numFrames;
		while(_g < _g1) {
			var i = _g++;
			this.mDurations.data.set(i,this.mDefaultFrameDuration);
			this.mStartTimes.data.set(i,i * this.mDefaultFrameDuration);
		}
	}
	,addFrame: function(texture,sound,duration) {
		if(duration == null) {
			duration = -1;
		}
		this.addFrameAt(this.get_numFrames(),texture,sound,duration);
	}
	,addFrameAt: function(frameID,texture,sound,duration) {
		if(duration == null) {
			duration = -1;
		}
		if(frameID < 0 || frameID > this.get_numFrames()) {
			throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Invalid frame id"));
		}
		if(duration < 0) {
			duration = this.mDefaultFrameDuration;
		}
		this.mTextures.data.insertAt(frameID,texture);
		this.mSounds.data.insertAt(frameID,sound);
		this.mDurations.data.insertAt(frameID,duration);
		if(frameID > 0 && frameID == this.get_numFrames()) {
			var this1 = this.mStartTimes;
			var value = this.mStartTimes.data.get(frameID - 1) + this.mDurations.data.get(frameID - 1);
			this1.data.set(frameID,value);
		} else {
			this.updateStartTimes();
		}
	}
	,removeFrameAt: function(frameID) {
		if(frameID < 0 || frameID >= this.get_numFrames()) {
			throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Invalid frame id"));
		}
		if(this.get_numFrames() == 1) {
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Movie clip must not be empty"));
		}
		new openfl__$Vector_AbstractVector(this.mTextures.data.splice(frameID,1));
		new openfl__$Vector_AbstractVector(this.mSounds.data.splice(frameID,1));
		new openfl__$Vector_AbstractVector(this.mDurations.data.splice(frameID,1));
		this.updateStartTimes();
	}
	,getFrameTexture: function(frameID) {
		if(frameID < 0 || frameID >= this.get_numFrames()) {
			throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Invalid frame id"));
		}
		return this.mTextures.data.get(frameID);
	}
	,setFrameTexture: function(frameID,texture) {
		if(frameID < 0 || frameID >= this.get_numFrames()) {
			throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Invalid frame id"));
		}
		this.mTextures.data.set(frameID,texture);
	}
	,getFrameSound: function(frameID) {
		if(frameID < 0 || frameID >= this.get_numFrames()) {
			throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Invalid frame id"));
		}
		return this.mSounds.data.get(frameID);
	}
	,setFrameSound: function(frameID,sound) {
		if(frameID < 0 || frameID >= this.get_numFrames()) {
			throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Invalid frame id"));
		}
		this.mSounds.data.set(frameID,sound);
	}
	,getFrameDuration: function(frameID) {
		if(frameID < 0 || frameID >= this.get_numFrames()) {
			throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Invalid frame id"));
		}
		return this.mDurations.data.get(frameID);
	}
	,setFrameDuration: function(frameID,duration) {
		if(frameID < 0 || frameID >= this.get_numFrames()) {
			throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Invalid frame id"));
		}
		this.mDurations.data.set(frameID,duration);
		this.updateStartTimes();
	}
	,reverseFrames: function() {
		new openfl__$Vector_AbstractVector(this.mTextures.data.reverse());
		new openfl__$Vector_AbstractVector(this.mSounds.data.reverse());
		new openfl__$Vector_AbstractVector(this.mDurations.data.reverse());
		this.updateStartTimes();
		this.mCurrentTime = this.get_totalTime() - this.mCurrentTime;
		this.mCurrentFrame = this.get_numFrames() - this.mCurrentFrame - 1;
	}
	,play: function() {
		this.mPlaying = true;
	}
	,pause: function() {
		this.mPlaying = false;
	}
	,stop: function() {
		this.mPlaying = false;
		this.mWasStopped = true;
		this.set_currentFrame(0);
	}
	,updateStartTimes: function() {
		var numFrames = this.get_numFrames();
		this.mStartTimes.data.set_length(0);
		this.mStartTimes.data.set(0,0);
		var _g = 1;
		var _g1 = numFrames;
		while(_g < _g1) {
			var i = _g++;
			var this1 = this.mStartTimes;
			var value = this.mStartTimes.data.get(i - 1) + this.mDurations.data.get(i - 1);
			this1.data.set(i,value);
		}
	}
	,playSound: function(frame) {
		if(!this.mMuted && this.mSounds.data.get(frame) != null) {
			this.mSounds.data.get(frame).play(0,0,this.mSoundTransform);
		}
	}
	,advanceTime: function(passedTime) {
		if(!this.mPlaying || passedTime <= 0.0) {
			return;
		}
		var finalFrame;
		var previousFrame = this.mCurrentFrame;
		var restTime = 0.0;
		var dispatchCompleteEvent = false;
		var totalTime = this.get_totalTime();
		if(this.mWasStopped) {
			this.mWasStopped = false;
			this.playSound(this.mCurrentFrame);
		}
		if(this.mLoop && this.mCurrentTime >= totalTime) {
			this.mCurrentTime = 0.0;
			this.mCurrentFrame = 0;
		}
		if(this.mCurrentTime < totalTime) {
			this.mCurrentTime += passedTime;
			finalFrame = this.mTextures.data.get_length() - 1;
			while(this.mCurrentTime > this.mStartTimes.data.get(this.mCurrentFrame) + this.mDurations.data.get(this.mCurrentFrame)) {
				if(this.mCurrentFrame == finalFrame) {
					if(this.mLoop && !this.hasEventListener("complete")) {
						this.mCurrentTime -= totalTime;
						this.mCurrentFrame = 0;
					} else {
						restTime = this.mCurrentTime - totalTime;
						dispatchCompleteEvent = true;
						this.mCurrentFrame = finalFrame;
						this.mCurrentTime = totalTime;
						break;
					}
				} else {
					this.mCurrentFrame++;
				}
				if(this.mSounds.data.get(this.mCurrentFrame) != null) {
					this.playSound(this.mCurrentFrame);
				}
			}
			if(this.mCurrentFrame == finalFrame && this.mCurrentTime == totalTime) {
				dispatchCompleteEvent = true;
			}
		}
		if(this.mCurrentFrame != previousFrame) {
			this.set_texture(this.mTextures.data.get(this.mCurrentFrame));
		}
		if(dispatchCompleteEvent) {
			this.dispatchEventWith("complete");
		}
		if(this.mLoop && restTime > 0.0) {
			this.advanceTime(restTime);
		}
	}
	,get_totalTime: function() {
		var numFrames = this.mTextures.data.get_length();
		return this.mStartTimes.data.get(numFrames - 1) + this.mDurations.data.get(numFrames - 1);
	}
	,get_currentTime: function() {
		return this.mCurrentTime;
	}
	,get_numFrames: function() {
		return this.mTextures.data.get_length();
	}
	,get_loop: function() {
		return this.mLoop;
	}
	,set_loop: function(value) {
		return this.mLoop = value;
	}
	,get_muted: function() {
		return this.mMuted;
	}
	,set_muted: function(value) {
		return this.mMuted = value;
	}
	,get_soundTransform: function() {
		return this.mSoundTransform;
	}
	,set_soundTransform: function(value) {
		return this.mSoundTransform = value;
	}
	,get_currentFrame: function() {
		return this.mCurrentFrame;
	}
	,set_currentFrame: function(value) {
		this.mCurrentFrame = value;
		this.mCurrentTime = 0.0;
		var _g = 0;
		var _g1 = value;
		while(_g < _g1) {
			var i = _g++;
			this.mCurrentTime += this.getFrameDuration(i);
		}
		this.set_texture(this.mTextures.data.get(this.mCurrentFrame));
		if(this.mPlaying && !this.mWasStopped) {
			this.playSound(this.mCurrentFrame);
		}
		return value;
	}
	,get_fps: function() {
		return 1.0 / this.mDefaultFrameDuration;
	}
	,set_fps: function(value) {
		if(value <= 0) {
			throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Invalid fps: " + value));
		}
		var newFrameDuration = 1.0 / value;
		var acceleration = newFrameDuration / this.mDefaultFrameDuration;
		this.mCurrentTime *= acceleration;
		this.mDefaultFrameDuration = newFrameDuration;
		var _g = 0;
		var _g1 = this.get_numFrames();
		while(_g < _g1) {
			var i = _g++;
			var _g2 = i;
			var _g11 = this.mDurations;
			var value1 = _g11.data.get(_g2) * acceleration;
			_g11.data.set(_g2,value1);
		}
		this.updateStartTimes();
		return value;
	}
	,get_isPlaying: function() {
		if(this.mPlaying) {
			if(!this.mLoop) {
				return this.mCurrentTime < this.get_totalTime();
			} else {
				return true;
			}
		} else {
			return false;
		}
	}
	,get_isComplete: function() {
		if(!this.mLoop) {
			return this.mCurrentTime >= this.get_totalTime();
		} else {
			return false;
		}
	}
	,__class__: starling_display_MovieClip
	,__properties__: $extend(starling_display_Image.prototype.__properties__,{get_isComplete:"get_isComplete",get_isPlaying:"get_isPlaying",set_fps:"set_fps",get_fps:"get_fps",set_currentFrame:"set_currentFrame",get_currentFrame:"get_currentFrame",set_soundTransform:"set_soundTransform",get_soundTransform:"get_soundTransform",set_muted:"set_muted",get_muted:"get_muted",set_loop:"set_loop",get_loop:"get_loop",get_numFrames:"get_numFrames",get_currentTime:"get_currentTime",get_totalTime:"get_totalTime"})
});
var starling_display_QuadBatch = function(optimizeForProfile) {
	if(optimizeForProfile == null) {
		optimizeForProfile = false;
	}
	starling_display_DisplayObject.call(this);
	this.mVertexData = new starling_utils_VertexData(0,true);
	this.mIndexData = openfl__$Vector_Vector_$Impl_$.toIntVector(null);
	this.mNumQuads = 0;
	this.mTinted = false;
	this.mSyncRequired = false;
	this.mBatchable = false;
	this.mOwnsTexture = false;
	if(optimizeForProfile) {
		var profile = starling_core_Starling.get_current().get_profile();
		this.mForceTinted = profile != 1 && profile != 0;
	}
	starling_core_Starling.get_current().get_stage3D().addEventListener("context3DCreate",$bind(this,this.__onContextCreated),false,0,true);
};
$hxClasses["starling.display.QuadBatch"] = starling_display_QuadBatch;
starling_display_QuadBatch.__name__ = "starling.display.QuadBatch";
starling_display_QuadBatch.compile = function(object,quadBatches) {
	starling_display_QuadBatch.compileObject(object,quadBatches,-1,new openfl_geom_Matrix());
};
starling_display_QuadBatch.optimize = function(quadBatches) {
	var batch1;
	var batch2;
	var _g = 0;
	var _g1 = quadBatches.data.get_length();
	while(_g < _g1) {
		var i = _g++;
		batch1 = quadBatches.data.get(i);
		var j = i + 1;
		while(j < quadBatches.data.get_length()) {
			batch2 = quadBatches.data.get(j);
			if(!batch1.isStateChange(batch2.get_tinted(),1.0,batch2.get_texture(),batch2.get_smoothing(),batch2.get_blendMode(),batch2.get_numQuads())) {
				batch1.addQuadBatch(batch2);
				batch2.dispose();
				new openfl__$Vector_AbstractVector(quadBatches.data.splice(j,1));
			} else {
				++j;
			}
		}
	}
};
starling_display_QuadBatch.compileObject = function(object,quadBatches,quadBatchID,transformationMatrix,alpha,blendMode,ignoreCurrentFilter) {
	if(ignoreCurrentFilter == null) {
		ignoreCurrentFilter = false;
	}
	if(alpha == null) {
		alpha = 1.0;
	}
	if(((object) instanceof starling_display_Sprite3D)) {
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Sprite3D objects cannot be flattened"));
	}
	var i;
	var quadBatch;
	var isRootObject = false;
	var objectAlpha = object.get_alpha();
	var container = ((object) instanceof starling_display_DisplayObjectContainer) ? object : null;
	var quad = ((object) instanceof starling_display_Quad) ? object : null;
	var batch = ((object) instanceof starling_display_QuadBatch) ? object : null;
	var filter = object.get_filter();
	if(quadBatchID == -1) {
		isRootObject = true;
		quadBatchID = 0;
		objectAlpha = 1.0;
		blendMode = object.get_blendMode();
		ignoreCurrentFilter = true;
		if(quadBatches.data.get_length() == 0) {
			var value = new starling_display_QuadBatch(true);
			quadBatches.data.set(0,value);
		} else {
			quadBatches.data.get(0).reset();
			quadBatches.data.get(0).set_ownsTexture(false);
		}
	} else {
		if(object.get_mask() != null) {
			haxe_Log.trace("[Starling] Masks are ignored on children of a flattened sprite.",{ fileName : "starling/display/QuadBatch.hx", lineNumber : 536, className : "starling.display.QuadBatch", methodName : "compileObject"});
		}
		if(((object) instanceof starling_display_Sprite) && (js_Boot.__cast(object , starling_display_Sprite)).get_clipRect() != null) {
			haxe_Log.trace("[Starling] ClipRects are ignored on children of a flattened sprite.",{ fileName : "starling/display/QuadBatch.hx", lineNumber : 539, className : "starling.display.QuadBatch", methodName : "compileObject"});
		}
	}
	if(filter != null && !ignoreCurrentFilter) {
		if(filter.get_mode() == "above") {
			quadBatchID = starling_display_QuadBatch.compileObject(object,quadBatches,quadBatchID,transformationMatrix,alpha,blendMode,true);
		}
		quadBatchID = starling_display_QuadBatch.compileObject(filter.compile(object),quadBatches,quadBatchID,transformationMatrix,alpha,blendMode);
		quadBatches.data.get(quadBatchID).set_ownsTexture(true);
		if(filter.get_mode() == "below") {
			quadBatchID = starling_display_QuadBatch.compileObject(object,quadBatches,quadBatchID,transformationMatrix,alpha,blendMode,true);
		}
	} else if(container != null) {
		var numChildren = container.get_numChildren();
		var childMatrix = new openfl_geom_Matrix();
		var _g = 0;
		var _g1 = numChildren;
		while(_g < _g1) {
			var i1 = _g++;
			var child = container.getChildAt(i1);
			if(child.get_hasVisibleArea()) {
				var childBlendMode = child.get_blendMode() == "auto" ? blendMode : child.get_blendMode();
				childMatrix.copyFrom(transformationMatrix);
				starling_core_RenderSupport.transformMatrixForObject(childMatrix,child);
				quadBatchID = starling_display_QuadBatch.compileObject(child,quadBatches,quadBatchID,childMatrix,alpha * objectAlpha,childBlendMode);
			}
		}
	} else if(quad != null || batch != null) {
		var texture;
		var smoothing;
		var tinted;
		var numQuads;
		if(quad != null) {
			var image = ((quad) instanceof starling_display_Image) ? quad : null;
			texture = image != null ? image.get_texture() : null;
			smoothing = image != null ? image.get_smoothing() : null;
			tinted = quad.get_tinted();
			numQuads = 1;
		} else {
			texture = batch.mTexture;
			smoothing = batch.mSmoothing;
			tinted = batch.mTinted;
			numQuads = batch.mNumQuads;
		}
		quadBatch = quadBatches.data.get(quadBatchID);
		if(quadBatch.isStateChange(tinted,alpha * objectAlpha,texture,smoothing,blendMode,numQuads)) {
			++quadBatchID;
			if(quadBatches.data.get_length() <= quadBatchID) {
				var x = new starling_display_QuadBatch(true);
				quadBatches.data.push(x);
			}
			quadBatch = quadBatches.data.get(quadBatchID);
			quadBatch.reset();
			quadBatch.set_ownsTexture(false);
		}
		if(quad != null) {
			quadBatch.addQuad(quad,alpha,texture,smoothing,transformationMatrix,blendMode);
		} else {
			quadBatch.addQuadBatch(batch,alpha,transformationMatrix,blendMode);
		}
	} else {
		var c = object == null ? null : js_Boot.getClass(object);
		throw new js__$Boot_HaxeError(new openfl_errors_Error("Unsupported display object: " + c.__name__));
	}
	if(isRootObject) {
		i = quadBatches.data.get_length() - 1;
		while(i > quadBatchID) {
			quadBatches.data.pop().dispose();
			--i;
		}
	}
	return quadBatchID;
};
starling_display_QuadBatch.getImageProgramName = function(tinted,mipMap,repeat,format,smoothing) {
	if(smoothing == null) {
		smoothing = "bilinear";
	}
	if(format == null) {
		format = 1;
	}
	if(repeat == null) {
		repeat = false;
	}
	if(mipMap == null) {
		mipMap = true;
	}
	var bitField = 0;
	if(tinted) {
		bitField = bitField | 1;
	}
	if(mipMap) {
		bitField = bitField | 2;
	}
	if(repeat) {
		bitField = bitField | 4;
	}
	if(smoothing == "none") {
		bitField = bitField | 8;
	} else if(smoothing == "trilinear") {
		bitField = bitField | 16;
	}
	if(format == 3) {
		bitField = bitField | 32;
	} else if(format == 4) {
		bitField = bitField | 64;
	}
	var name = starling_display_QuadBatch.sProgramNameCache.h[bitField];
	if(name == null) {
		name = "QB_i." + StringTools.hex(bitField);
		starling_display_QuadBatch.sProgramNameCache.h[bitField] = name;
	}
	return name;
};
starling_display_QuadBatch.__super__ = starling_display_DisplayObject;
starling_display_QuadBatch.prototype = $extend(starling_display_DisplayObject.prototype,{
	mNumQuads: null
	,mSyncRequired: null
	,mBatchable: null
	,mForceTinted: null
	,mOwnsTexture: null
	,mTinted: null
	,mTexture: null
	,mSmoothing: null
	,mVertexBuffer: null
	,mIndexData: null
	,mIndexBuffer: null
	,mVertexData: null
	,dispose: function() {
		starling_core_Starling.get_current().get_stage3D().removeEventListener("context3DCreate",$bind(this,this.__onContextCreated));
		this.__destroyBuffers();
		if(this.mVertexData != null) {
			this.mVertexData.set_numVertices(0);
			this.mVertexData = null;
		}
		if(this.mIndexData != null) {
			this.mIndexData.data.set_length(0);
			this.mIndexData = null;
		}
		this.mNumQuads = 0;
		if(this.mTexture != null && this.mOwnsTexture) {
			this.mTexture.dispose();
		}
		starling_display_DisplayObject.prototype.dispose.call(this);
	}
	,__onContextCreated: function(event) {
		if(this.mVertexData != null) {
			this.__createBuffers();
		}
	}
	,onVertexDataChanged: function() {
		this.mSyncRequired = true;
	}
	,clone: function() {
		var clone = new starling_display_QuadBatch();
		clone.mVertexData = this.mVertexData.clone(0,this.mNumQuads * 4);
		clone.mIndexData = new openfl__$Vector_AbstractVector(this.mIndexData.data.slice(0,this.mNumQuads * 6));
		clone.mNumQuads = this.mNumQuads;
		clone.mTinted = this.mTinted;
		clone.mTexture = this.mTexture;
		clone.mSmoothing = this.mSmoothing;
		clone.mSyncRequired = true;
		clone.mForceTinted = this.get_forceTinted();
		clone.set_blendMode(this.get_blendMode());
		clone.set_alpha(this.get_alpha());
		return clone;
	}
	,__expand: function() {
		var oldCapacity = this.get_capacity();
		if(oldCapacity >= 16383) {
			throw new js__$Boot_HaxeError(new openfl_errors_Error("Exceeded maximum number of quads!"));
		}
		this.set_capacity(oldCapacity < 8 ? 16 : oldCapacity * 2);
	}
	,__createBuffers: function() {
		this.__destroyBuffers();
		var numVertices = this.mVertexData.get_numVertices();
		var numIndices = this.mIndexData.data.get_length();
		var context = starling_core_Starling.get_current().get_context();
		if(numVertices == 0) {
			return;
		}
		if(context == null) {
			throw new js__$Boot_HaxeError(new starling_errors_MissingContextError());
		}
		this.mIndexBuffer = context.createIndexBuffer(numIndices);
		this.mIndexBuffer.uploadFromVector(this.mIndexData,0,numIndices);
		this.mVertexBuffer = context.createVertexBuffer(numVertices,8);
		this.__uploadBuffers();
	}
	,__destroyBuffers: function() {
		if(this.mVertexBuffer != null) {
			this.mVertexBuffer.dispose();
			this.mVertexBuffer = null;
		}
		if(this.mIndexBuffer != null) {
			this.mIndexBuffer.dispose();
			this.mIndexBuffer = null;
		}
	}
	,__syncBuffers: function() {
		if(this.mVertexBuffer == null) {
			this.__createBuffers();
		} else {
			this.__uploadBuffers();
		}
	}
	,__uploadBuffers: function() {
		this.mVertexBuffer.uploadFromTypedArray(this.mVertexData.get_rawData());
		this.mSyncRequired = false;
	}
	,renderCustom: function(mvpMatrix,parentAlpha,blendMode) {
		if(parentAlpha == null) {
			parentAlpha = 1.0;
		}
		if(this.mNumQuads == 0) {
			return;
		}
		if(this.mSyncRequired) {
			this.__syncBuffers();
		}
		var pma = this.mVertexData.get_premultipliedAlpha();
		var context = starling_core_Starling.get_current().get_context();
		var tinted = this.mTinted || parentAlpha != 1.0;
		var this1 = starling_display_QuadBatch.sRenderAlpha;
		var this2 = starling_display_QuadBatch.sRenderAlpha;
		var value = starling_display_QuadBatch.sRenderAlpha.data.set(2,pma ? parentAlpha : 1.0);
		var value1 = this2.data.set(1,value);
		this1.data.set(0,value1);
		starling_display_QuadBatch.sRenderAlpha.data.set(3,parentAlpha);
		starling_core_RenderSupport.setBlendFactors(pma,blendMode != null ? blendMode : this.get_blendMode());
		context.setProgram(this.__getProgram(tinted));
		context.setProgramConstantsFromVector(1,0,starling_display_QuadBatch.sRenderAlpha,1);
		context.setProgramConstantsFromMatrix(1,1,mvpMatrix,true);
		context.setVertexBufferAt(0,this.mVertexBuffer,0,2);
		if(this.mTexture == null || tinted) {
			context.setVertexBufferAt(1,this.mVertexBuffer,2,4);
		}
		if(this.mTexture != null) {
			context.setTextureAt(0,this.mTexture.get_base());
			context.setVertexBufferAt(2,this.mVertexBuffer,6,2);
		}
		context.drawTriangles(this.mIndexBuffer,0,this.mNumQuads * 2);
		if(this.mTexture != null) {
			context.setTextureAt(0,null);
			context.setVertexBufferAt(2,null);
		}
		context.setVertexBufferAt(1,null);
		context.setVertexBufferAt(0,null);
		starling_core_Starling.get_current().removeCurrentProgram();
	}
	,reset: function() {
		if(this.mTexture != null && this.mOwnsTexture) {
			this.mTexture.dispose();
		}
		this.mNumQuads = 0;
		this.mTexture = null;
		this.mSmoothing = null;
		this.mSyncRequired = true;
	}
	,addImage: function(image,parentAlpha,modelViewMatrix,blendMode) {
		if(parentAlpha == null) {
			parentAlpha = 1.0;
		}
		this.addQuad(image,parentAlpha,image.get_texture(),image.get_smoothing(),modelViewMatrix,blendMode);
	}
	,addQuad: function(quad,parentAlpha,texture,smoothing,modelViewMatrix,blendMode) {
		if(parentAlpha == null) {
			parentAlpha = 1.0;
		}
		if(modelViewMatrix == null) {
			modelViewMatrix = quad.get_transformationMatrix();
		}
		var alpha = parentAlpha * quad.get_alpha();
		var vertexID = this.mNumQuads * 4;
		if(this.mNumQuads + 1 > this.mVertexData.get_numVertices() / 4) {
			this.__expand();
		}
		if(this.mNumQuads == 0) {
			this.set_blendMode(blendMode != null ? blendMode : quad.get_blendMode());
			this.mTexture = texture;
			this.mTinted = this.mForceTinted || quad.get_tinted() || parentAlpha != 1.0;
			this.mSmoothing = smoothing;
			this.mVertexData.setPremultipliedAlpha(quad.get_premultipliedAlpha());
		}
		quad.copyVertexDataTransformedTo(this.mVertexData,vertexID,modelViewMatrix);
		if(alpha != 1.0) {
			this.mVertexData.scaleAlpha(vertexID,alpha,4);
		}
		this.mSyncRequired = true;
		this.mNumQuads++;
	}
	,addQuadBatch: function(quadBatch,parentAlpha,modelViewMatrix,blendMode) {
		if(parentAlpha == null) {
			parentAlpha = 1.0;
		}
		if(modelViewMatrix == null) {
			modelViewMatrix = quadBatch.get_transformationMatrix();
		}
		var alpha = parentAlpha * quadBatch.get_alpha();
		var vertexID = this.mNumQuads * 4;
		var numQuads = quadBatch.get_numQuads();
		if(this.mNumQuads + numQuads > this.get_capacity()) {
			this.set_capacity(this.mNumQuads + numQuads);
		}
		if(this.mNumQuads == 0) {
			this.set_blendMode(blendMode != null ? blendMode : quadBatch.get_blendMode());
			this.mTexture = quadBatch.mTexture;
			this.mTinted = this.mForceTinted || quadBatch.mTinted || parentAlpha != 1.0;
			this.mSmoothing = quadBatch.mSmoothing;
			this.mVertexData.setPremultipliedAlpha(quadBatch.mVertexData.get_premultipliedAlpha(),false);
		}
		quadBatch.mVertexData.copyTransformedTo(this.mVertexData,vertexID,modelViewMatrix,0,numQuads * 4);
		if(alpha != 1.0) {
			this.mVertexData.scaleAlpha(vertexID,alpha,numQuads * 4);
		}
		this.mSyncRequired = true;
		this.mNumQuads += numQuads;
	}
	,isStateChange: function(tinted,parentAlpha,texture,smoothing,blendMode,numQuads) {
		if(numQuads == null) {
			numQuads = 1;
		}
		if(this.mNumQuads == 0) {
			return false;
		} else if(this.mNumQuads + numQuads > 16383) {
			return true;
		} else if(this.mTexture == null && texture == null) {
			return this.get_blendMode() != blendMode;
		} else if(this.mTexture != null && texture != null) {
			if(!(this.mTexture.get_base() != texture.get_base() || this.mTexture.get_repeat() != texture.get_repeat() || this.mSmoothing != smoothing || this.mTinted != (this.mForceTinted || tinted || parentAlpha != 1.0))) {
				return this.get_blendMode() != blendMode;
			} else {
				return true;
			}
		} else {
			return true;
		}
	}
	,transformQuad: function(quadID,matrix) {
		this.mVertexData.transformVertex(quadID * 4,matrix,4);
		this.mSyncRequired = true;
	}
	,getVertexColor: function(quadID,vertexID) {
		return this.mVertexData.getColor(quadID * 4 + vertexID);
	}
	,setVertexColor: function(quadID,vertexID,color) {
		this.mVertexData.setColor(quadID * 4 + vertexID,color);
		this.mSyncRequired = true;
	}
	,getVertexAlpha: function(quadID,vertexID) {
		return this.mVertexData.getAlpha(quadID * 4 + vertexID);
	}
	,setVertexAlpha: function(quadID,vertexID,alpha) {
		this.mVertexData.setAlpha(quadID * 4 + vertexID,alpha);
		this.mSyncRequired = true;
	}
	,getQuadColor: function(quadID) {
		return this.mVertexData.getColor(quadID * 4);
	}
	,setQuadColor: function(quadID,color) {
		this.mVertexData.setColor(quadID * 4,color);
		this.mVertexData.setColor(quadID * 4 + 1,color);
		this.mVertexData.setColor(quadID * 4 + 2,color);
		this.mVertexData.setColor(quadID * 4 + 3,color);
		this.mSyncRequired = true;
	}
	,getQuadAlpha: function(quadID) {
		return this.mVertexData.getAlpha(quadID * 4);
	}
	,setQuadAlpha: function(quadID,alpha) {
		this.mVertexData.setAlpha(quadID * 4,alpha);
		this.mVertexData.setAlpha(quadID * 4 + 1,alpha);
		this.mVertexData.setAlpha(quadID * 4 + 2,alpha);
		this.mVertexData.setAlpha(quadID * 4 + 3,alpha);
		this.mSyncRequired = true;
	}
	,setQuad: function(quadID,quad) {
		var matrix = quad.get_transformationMatrix();
		var alpha = quad.get_alpha();
		var vertexID = quadID * 4 | 0;
		quad.copyVertexDataTransformedTo(this.mVertexData,vertexID,matrix);
		if(alpha != 1.0) {
			this.mVertexData.scaleAlpha(vertexID,alpha,4);
		}
		this.mSyncRequired = true;
	}
	,getQuadBounds: function(quadID,transformationMatrix,resultRect) {
		return this.mVertexData.getBounds(transformationMatrix,quadID * 4,4,resultRect);
	}
	,getBounds: function(targetSpace,resultRect) {
		if(resultRect == null) {
			resultRect = new openfl_geom_Rectangle();
		}
		var transformationMatrix = targetSpace == this ? null : this.getTransformationMatrix(targetSpace,starling_display_QuadBatch.sHelperMatrix);
		return this.mVertexData.getBounds(transformationMatrix,0,this.mNumQuads * 4,resultRect);
	}
	,render: function(support,parentAlpha) {
		if(this.mNumQuads != 0) {
			if(this.mBatchable) {
				support.batchQuadBatch(this,parentAlpha);
			} else {
				support.finishQuadBatch();
				support.raiseDrawCount();
				this.renderCustom(support.get_mvpMatrix3D(),this.get_alpha() * parentAlpha,support.get_blendMode());
			}
		}
	}
	,get_numQuads: function() {
		return this.mNumQuads;
	}
	,get_tinted: function() {
		if(!this.mTinted) {
			return this.mForceTinted;
		} else {
			return true;
		}
	}
	,get_texture: function() {
		return this.mTexture;
	}
	,get_smoothing: function() {
		return this.mSmoothing;
	}
	,get_premultipliedAlpha: function() {
		return this.mVertexData.get_premultipliedAlpha();
	}
	,get_batchable: function() {
		return this.mBatchable;
	}
	,set_batchable: function(value) {
		return this.mBatchable = value;
	}
	,get_forceTinted: function() {
		return this.mForceTinted;
	}
	,set_forceTinted: function(value) {
		return this.mForceTinted = value;
	}
	,get_ownsTexture: function() {
		return this.mOwnsTexture;
	}
	,set_ownsTexture: function(value) {
		return this.mOwnsTexture = value;
	}
	,get_capacity: function() {
		return this.mVertexData.get_numVertices() / 4 | 0;
	}
	,set_capacity: function(value) {
		var oldCapacity = this.get_capacity();
		if(value == oldCapacity) {
			return this.mVertexData.get_numVertices() / 4 | 0;
		} else if(value == 0) {
			throw new js__$Boot_HaxeError(new openfl_errors_Error("Capacity must be > 0"));
		} else if(value > 16383) {
			value = 16383;
		}
		if(this.mNumQuads > value) {
			this.mNumQuads = value;
		}
		this.mVertexData.set_numVertices(value * 4);
		this.mIndexData.data.set_length(value * 6);
		var _g = oldCapacity;
		var _g1 = value;
		while(_g < _g1) {
			var i = _g++;
			this.mIndexData.data.set(i * 6,i * 4);
			this.mIndexData.data.set(i * 6 + 1,i * 4 + 1);
			this.mIndexData.data.set(i * 6 + 2,i * 4 + 2);
			this.mIndexData.data.set(i * 6 + 3,i * 4 + 1);
			this.mIndexData.data.set(i * 6 + 4,i * 4 + 3);
			this.mIndexData.data.set(i * 6 + 5,i * 4 + 2);
		}
		this.__destroyBuffers();
		this.mSyncRequired = true;
		return value;
	}
	,__getProgram: function(tinted) {
		var target = starling_core_Starling.get_current();
		var programName = "QB_q";
		if(this.mTexture != null) {
			programName = starling_display_QuadBatch.getImageProgramName(tinted,this.mTexture.get_mipMapping(),this.mTexture.get_repeat(),this.mTexture.get_format(),this.mSmoothing);
		}
		var program = target.getProgram(programName);
		if(program == null) {
			var vertexShader;
			var fragmentShader;
			if(this.mTexture == null) {
				vertexShader = "m44 op, va0, vc1 \n" + "mul v0, va1, vc0 \n";
				fragmentShader = "mov oc, v0       \n";
			} else {
				vertexShader = tinted ? "m44 op, va0, vc1 \n" + "mul v0, va1, vc0 \n" + "mov v1, va2      \n" : "m44 op, va0, vc1 \n" + "mov v1, va2      \n";
				fragmentShader = tinted ? "tex ft1,  v1, fs0 <???> \n" + "mul  oc, ft1,  v0       \n" : "tex  oc,  v1, fs0 <???> \n";
				fragmentShader = StringTools.replace(fragmentShader,"<???>",starling_core_RenderSupport.getTextureLookupFlags(this.mTexture.get_format(),this.mTexture.get_mipMapping(),this.mTexture.get_repeat(),this.get_smoothing()));
			}
			program = target.registerProgramFromSource(programName,vertexShader,fragmentShader);
		}
		return program;
	}
	,__class__: starling_display_QuadBatch
	,__properties__: $extend(starling_display_DisplayObject.prototype.__properties__,{set_capacity:"set_capacity",get_capacity:"get_capacity",set_ownsTexture:"set_ownsTexture",get_ownsTexture:"get_ownsTexture",set_forceTinted:"set_forceTinted",get_forceTinted:"get_forceTinted",set_batchable:"set_batchable",get_batchable:"get_batchable",get_premultipliedAlpha:"get_premultipliedAlpha",get_smoothing:"get_smoothing",get_texture:"get_texture",get_tinted:"get_tinted",get_numQuads:"get_numQuads"})
});
var starling_display_Sprite3D = function() {
	starling_display_DisplayObjectContainer.call(this);
	this.mScaleZ = 1.0;
	this.mRotationX = this.mRotationY = this.mPivotZ = this.mZ = 0.0;
	this.mTransformationMatrix = new openfl_geom_Matrix();
	this.mTransformationMatrix3D = new openfl_geom_Matrix3D();
	this.__setIs3D(true);
	this.addEventListener("added",$bind(this,this.__onAddedChild));
	this.addEventListener("removed",$bind(this,this.__onRemovedChild));
};
$hxClasses["starling.display.Sprite3D"] = starling_display_Sprite3D;
starling_display_Sprite3D.__name__ = "starling.display.Sprite3D";
starling_display_Sprite3D.__super__ = starling_display_DisplayObjectContainer;
starling_display_Sprite3D.prototype = $extend(starling_display_DisplayObjectContainer.prototype,{
	mRotationX: null
	,mRotationY: null
	,mScaleZ: null
	,mPivotZ: null
	,mZ: null
	,mTransformationChanged: null
	,render: function(support,parentAlpha) {
		if(this.mZ > -1e-005 && this.mZ < 0.00001 && this.mRotationX > -1e-005 && this.mRotationX < 0.00001 && this.mRotationY > -1e-005 && this.mRotationY < 0.00001 && this.mPivotZ > -1e-005 && this.mPivotZ < 0.00001) {
			starling_display_DisplayObjectContainer.prototype.render.call(this,support,parentAlpha);
		} else {
			support.finishQuadBatch();
			support.pushMatrix3D();
			support.transformMatrix3D(this);
			starling_display_DisplayObjectContainer.prototype.render.call(this,support,parentAlpha);
			support.finishQuadBatch();
			support.popMatrix3D();
		}
	}
	,hitTest: function(localPoint,forTouch) {
		if(forTouch == null) {
			forTouch = false;
		}
		if(this.mZ > -1e-005 && this.mZ < 0.00001 && this.mRotationX > -1e-005 && this.mRotationX < 0.00001 && this.mRotationY > -1e-005 && this.mRotationY < 0.00001 && this.mPivotZ > -1e-005 && this.mPivotZ < 0.00001) {
			return starling_display_DisplayObjectContainer.prototype.hitTest.call(this,localPoint,forTouch);
		} else {
			if(forTouch && (!this.get_visible() || !this.get_touchable())) {
				return null;
			}
			starling_display_Sprite3D.sHelperMatrix.copyFrom(this.get_transformationMatrix3D());
			starling_display_Sprite3D.sHelperMatrix.invert();
			this.get_stage().getCameraPosition(this,starling_display_Sprite3D.sHelperPoint);
			starling_utils_MatrixUtil.transformCoords3D(starling_display_Sprite3D.sHelperMatrix,localPoint.x,localPoint.y,0,starling_display_Sprite3D.sHelperPointAlt);
			starling_utils_MathUtil.intersectLineWithXYPlane(starling_display_Sprite3D.sHelperPoint,starling_display_Sprite3D.sHelperPointAlt,localPoint);
			return starling_display_DisplayObjectContainer.prototype.hitTest.call(this,localPoint,forTouch);
		}
	}
	,__onAddedChild: function(event) {
		this.__recursivelySetIs3D(js_Boot.__cast(event.target , starling_display_DisplayObject),true);
	}
	,__onRemovedChild: function(event) {
		this.__recursivelySetIs3D(js_Boot.__cast(event.target , starling_display_DisplayObject),false);
	}
	,__recursivelySetIs3D: function(object,value) {
		if(((object) instanceof starling_display_Sprite3D)) {
			return;
		}
		if(((object) instanceof starling_display_DisplayObjectContainer)) {
			var container = object;
			var numChildren = container.get_numChildren();
			var _g = 0;
			var _g1 = numChildren;
			while(_g < _g1) {
				var i = _g++;
				this.__recursivelySetIs3D(container.getChildAt(i),value);
			}
		}
		object.__setIs3D(value);
	}
	,__updateMatrices: function() {
		var x = this.get_x();
		var y = this.get_y();
		var scaleX = this.get_scaleX();
		var scaleY = this.get_scaleY();
		var pivotX = this.get_pivotX();
		var pivotY = this.get_pivotY();
		var rotationZ = this.get_rotation();
		this.mTransformationMatrix3D.identity();
		if(scaleX != 1.0 || scaleY != 1.0 || this.mScaleZ != 1.0) {
			this.mTransformationMatrix3D.appendScale(scaleX > 0 ? scaleX : 0.00001,scaleY > 0 ? scaleY : 0.00001,this.mScaleZ > 0 ? this.mScaleZ : 0.00001);
		}
		if(this.mRotationX != 0.0) {
			this.mTransformationMatrix3D.appendRotation(starling_utils_MathUtil.rad2deg(this.mRotationX),new openfl_geom_Vector3D(1,0,0));
		}
		if(this.mRotationY != 0.0) {
			this.mTransformationMatrix3D.appendRotation(starling_utils_MathUtil.rad2deg(this.mRotationY),new openfl_geom_Vector3D(0,1,0));
		}
		if(rotationZ != 0.0) {
			this.mTransformationMatrix3D.appendRotation(starling_utils_MathUtil.rad2deg(rotationZ),new openfl_geom_Vector3D(0,0,1));
		}
		if(x != 0.0 || y != 0.0 || this.mZ != 0.0) {
			this.mTransformationMatrix3D.appendTranslation(x,y,this.mZ);
		}
		if(pivotX != 0.0 || pivotY != 0.0 || this.mPivotZ != 0.0) {
			this.mTransformationMatrix3D.prependTranslation(-pivotX,-pivotY,-this.mPivotZ);
		}
		if(this.mZ > -1e-005 && this.mZ < 0.00001 && this.mRotationX > -1e-005 && this.mRotationX < 0.00001 && this.mRotationY > -1e-005 && this.mRotationY < 0.00001 && this.mPivotZ > -1e-005 && this.mPivotZ < 0.00001) {
			starling_utils_MatrixUtil.convertTo2D(this.mTransformationMatrix3D,this.mTransformationMatrix);
		} else {
			this.mTransformationMatrix.identity();
		}
	}
	,get_is2D: function() {
		if(this.mZ > -1e-005 && this.mZ < 0.00001 && this.mRotationX > -1e-005 && this.mRotationX < 0.00001 && this.mRotationY > -1e-005 && this.mRotationY < 0.00001 && this.mPivotZ > -1e-005) {
			return this.mPivotZ < 0.00001;
		} else {
			return false;
		}
	}
	,get_transformationMatrix: function() {
		if(this.mTransformationChanged) {
			this.__updateMatrices();
			this.mTransformationChanged = false;
		}
		return this.mTransformationMatrix;
	}
	,set_transformationMatrix: function(value) {
		starling_display_DisplayObjectContainer.prototype.set_transformationMatrix.call(this,value);
		this.mRotationX = this.mRotationY = this.mPivotZ = this.mZ = 0;
		this.mTransformationChanged = true;
		return value;
	}
	,get_transformationMatrix3D: function() {
		if(this.mTransformationChanged) {
			this.__updateMatrices();
			this.mTransformationChanged = false;
		}
		return this.mTransformationMatrix3D;
	}
	,set_x: function(value) {
		starling_display_DisplayObjectContainer.prototype.set_x.call(this,value);
		this.mTransformationChanged = true;
		return value;
	}
	,set_y: function(value) {
		starling_display_DisplayObjectContainer.prototype.set_y.call(this,value);
		this.mTransformationChanged = true;
		return value;
	}
	,get_z: function() {
		return this.mZ;
	}
	,set_z: function(value) {
		this.mZ = value;
		this.mTransformationChanged = true;
		return value;
	}
	,set_pivotX: function(value) {
		starling_display_DisplayObjectContainer.prototype.set_pivotX.call(this,value);
		this.mTransformationChanged = true;
		return value;
	}
	,set_pivotY: function(value) {
		starling_display_DisplayObjectContainer.prototype.set_pivotY.call(this,value);
		this.mTransformationChanged = true;
		return value;
	}
	,get_pivotZ: function() {
		return this.mPivotZ;
	}
	,set_pivotZ: function(value) {
		this.mPivotZ = value;
		this.mTransformationChanged = true;
		return value;
	}
	,set_scaleX: function(value) {
		starling_display_DisplayObjectContainer.prototype.set_scaleX.call(this,value);
		this.mTransformationChanged = true;
		return value;
	}
	,set_scaleY: function(value) {
		starling_display_DisplayObjectContainer.prototype.set_scaleY.call(this,value);
		this.mTransformationChanged = true;
		return value;
	}
	,get_scaleZ: function() {
		return this.mScaleZ;
	}
	,set_scaleZ: function(value) {
		this.mScaleZ = value;
		this.mTransformationChanged = true;
		return value;
	}
	,set_skewX: function(value) {
		throw new js__$Boot_HaxeError(new openfl_errors_Error("3D objects do not support skewing"));
	}
	,set_skewY: function(value) {
		throw new js__$Boot_HaxeError(new openfl_errors_Error("3D objects do not support skewing"));
	}
	,set_rotation: function(value) {
		starling_display_DisplayObjectContainer.prototype.set_rotation.call(this,value);
		this.mTransformationChanged = true;
		return value;
	}
	,get_rotationX: function() {
		return this.mRotationX;
	}
	,set_rotationX: function(value) {
		this.mRotationX = starling_utils_MathUtil.normalizeAngle(value);
		this.mTransformationChanged = true;
		return value;
	}
	,get_rotationY: function() {
		return this.mRotationY;
	}
	,set_rotationY: function(value) {
		this.mRotationY = starling_utils_MathUtil.normalizeAngle(value);
		this.mTransformationChanged = true;
		return value;
	}
	,get_rotationZ: function() {
		return this.get_rotation();
	}
	,set_rotationZ: function(value) {
		return this.set_rotation(value);
	}
	,__class__: starling_display_Sprite3D
	,__properties__: $extend(starling_display_DisplayObjectContainer.prototype.__properties__,{set_rotationZ:"set_rotationZ",get_rotationZ:"get_rotationZ",set_rotationY:"set_rotationY",get_rotationY:"get_rotationY",set_rotationX:"set_rotationX",get_rotationX:"get_rotationX",set_scaleZ:"set_scaleZ",get_scaleZ:"get_scaleZ",set_pivotZ:"set_pivotZ",get_pivotZ:"get_pivotZ",set_z:"set_z",get_z:"get_z",get_is2D:"get_is2D"})
});
var starling_display_Stage = function(width,height,color) {
	if(color == null) {
		color = 0;
	}
	starling_display_DisplayObjectContainer.call(this);
	this.mWidth = width;
	this.mHeight = height;
	this.mColor = color;
	this.mFieldOfView = 1.0;
	this.mProjectionOffset = new openfl_geom_Point();
	this.mCameraPosition = new openfl_geom_Vector3D();
	this.mEnterFrameEvent = new starling_events_EnterFrameEvent("enterFrame",0.0);
	this.mEnterFrameListeners = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
};
$hxClasses["starling.display.Stage"] = starling_display_Stage;
starling_display_Stage.__name__ = "starling.display.Stage";
starling_display_Stage.__super__ = starling_display_DisplayObjectContainer;
starling_display_Stage.prototype = $extend(starling_display_DisplayObjectContainer.prototype,{
	mWidth: null
	,mHeight: null
	,mColor: null
	,mFieldOfView: null
	,mProjectionOffset: null
	,mCameraPosition: null
	,mEnterFrameEvent: null
	,mEnterFrameListeners: null
	,advanceTime: function(passedTime) {
		this.mEnterFrameEvent.reset("enterFrame",false,passedTime);
		this.broadcastEvent(this.mEnterFrameEvent);
	}
	,hitTest: function(localPoint,forTouch) {
		if(forTouch == null) {
			forTouch = false;
		}
		if(forTouch && (!this.get_visible() || !this.get_touchable())) {
			return null;
		}
		if(localPoint.x < 0 || localPoint.x > this.mWidth || localPoint.y < 0 || localPoint.y > this.mHeight) {
			return null;
		}
		var target = starling_display_DisplayObjectContainer.prototype.hitTest.call(this,localPoint,forTouch);
		if(target == null) {
			target = this;
		}
		return target;
	}
	,drawToBitmapData: function(destination,transparent) {
		if(transparent == null) {
			transparent = true;
		}
		var support = new starling_core_RenderSupport();
		var star = starling_core_Starling.get_current();
		if(destination == null) {
			var width = star.get_backBufferWidth() * star.get_backBufferPixelsPerPoint();
			var height = star.get_backBufferHeight() * star.get_backBufferPixelsPerPoint();
			destination = new openfl_display_BitmapData(width,height,transparent);
		}
		support.set_renderTarget(null);
		support.setProjectionMatrix(0,0,this.mWidth,this.mHeight,this.mWidth,this.mHeight,this.get_cameraPosition());
		if(transparent) {
			support.clear();
		} else {
			support.clear(this.mColor,1);
		}
		this.render(support,1.0);
		support.finishQuadBatch();
		support.dispose();
		starling_core_Starling.get_current().get_context().drawToBitmapData(destination);
		starling_core_Starling.get_current().get_context().present();
		return destination;
	}
	,getCameraPosition: function(space,result) {
		this.getTransformationMatrix3D(space,starling_display_Stage.sHelperMatrix);
		return starling_utils_MatrixUtil.transformCoords3D(starling_display_Stage.sHelperMatrix,this.mWidth / 2 + this.mProjectionOffset.x,this.mHeight / 2 + this.mProjectionOffset.y,-this.get_focalLength(),result);
	}
	,addEnterFrameListener: function(listener) {
		this.mEnterFrameListeners.data.push(listener);
	}
	,removeEnterFrameListener: function(listener) {
		var index = this.mEnterFrameListeners.data.indexOf(listener,0);
		if(index >= 0) {
			new openfl__$Vector_AbstractVector(this.mEnterFrameListeners.data.splice(index,1));
		}
	}
	,__getChildEventListeners: function(object,eventType,listeners) {
		if(eventType == "enterFrame" && object == this) {
			var length = this.mEnterFrameListeners.data.get_length();
			var _g = 0;
			var _g1 = length;
			while(_g < _g1) {
				var i = _g++;
				var index = listeners.data.get_length();
				var value = this.mEnterFrameListeners.data.get(i);
				listeners.data.set(index,value);
			}
		} else {
			starling_display_DisplayObjectContainer.prototype.__getChildEventListeners.call(this,object,eventType,listeners);
		}
	}
	,set_width: function(value) {
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Cannot set width of stage"));
	}
	,set_height: function(value) {
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Cannot set height of stage"));
	}
	,set_x: function(value) {
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Cannot set x-coordinate of stage"));
	}
	,set_y: function(value) {
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Cannot set y-coordinate of stage"));
	}
	,set_scaleX: function(value) {
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Cannot scale stage"));
	}
	,set_scaleY: function(value) {
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Cannot scale stage"));
	}
	,set_rotation: function(value) {
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Cannot rotate stage"));
	}
	,set_skewX: function(value) {
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Cannot skew stage"));
	}
	,set_skewY: function(value) {
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Cannot skew stage"));
	}
	,set_filter: function(value) {
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Cannot add filter to stage. Add it to 'root' instead!"));
	}
	,get_color: function() {
		return this.mColor;
	}
	,set_color: function(value) {
		return this.mColor = value;
	}
	,get_stageWidth: function() {
		return this.mWidth;
	}
	,set_stageWidth: function(value) {
		return this.mWidth = value;
	}
	,get_stageHeight: function() {
		return this.mHeight;
	}
	,set_stageHeight: function(value) {
		return this.mHeight = value;
	}
	,get_focalLength: function() {
		return this.mWidth / (2 * Math.tan(this.mFieldOfView / 2));
	}
	,set_focalLength: function(value) {
		return this.mFieldOfView = 2 * Math.atan(this.get_stageWidth() / (2 * value));
	}
	,get_fieldOfView: function() {
		return this.mFieldOfView;
	}
	,set_fieldOfView: function(value) {
		return this.mFieldOfView = value;
	}
	,get_projectionOffset: function() {
		return this.mProjectionOffset;
	}
	,set_projectionOffset: function(value) {
		this.mProjectionOffset.setTo(value.x,value.y);
		return value;
	}
	,get_cameraPosition: function() {
		return this.getCameraPosition(null,this.mCameraPosition);
	}
	,__class__: starling_display_Stage
	,__properties__: $extend(starling_display_DisplayObjectContainer.prototype.__properties__,{get_cameraPosition:"get_cameraPosition",set_projectionOffset:"set_projectionOffset",get_projectionOffset:"get_projectionOffset",set_fieldOfView:"set_fieldOfView",get_fieldOfView:"get_fieldOfView",set_focalLength:"set_focalLength",get_focalLength:"get_focalLength",set_stageHeight:"set_stageHeight",get_stageHeight:"get_stageHeight",set_stageWidth:"set_stageWidth",get_stageWidth:"get_stageWidth",set_color:"set_color",get_color:"get_color"})
});
var starling_errors_AbstractClassError = function(message,id) {
	if(id == null) {
		id = 0;
	}
	if(message == null) {
		message = "Cannot instantiate abstract class";
	}
	openfl_errors_Error.call(this,message,id);
};
$hxClasses["starling.errors.AbstractClassError"] = starling_errors_AbstractClassError;
starling_errors_AbstractClassError.__name__ = "starling.errors.AbstractClassError";
starling_errors_AbstractClassError.__super__ = openfl_errors_Error;
starling_errors_AbstractClassError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: starling_errors_AbstractClassError
});
var starling_errors_AbstractMethodError = function(message,id) {
	if(id == null) {
		id = 0;
	}
	if(message == null) {
		message = "Method needs to be implemented in subclass";
	}
	openfl_errors_Error.call(this,message,id);
};
$hxClasses["starling.errors.AbstractMethodError"] = starling_errors_AbstractMethodError;
starling_errors_AbstractMethodError.__name__ = "starling.errors.AbstractMethodError";
starling_errors_AbstractMethodError.__super__ = openfl_errors_Error;
starling_errors_AbstractMethodError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: starling_errors_AbstractMethodError
});
var starling_errors_MissingContextError = function(message,id) {
	if(id == null) {
		id = 0;
	}
	if(message == null) {
		message = "Starling context is missing";
	}
	openfl_errors_Error.call(this,message,id);
};
$hxClasses["starling.errors.MissingContextError"] = starling_errors_MissingContextError;
starling_errors_MissingContextError.__name__ = "starling.errors.MissingContextError";
starling_errors_MissingContextError.__super__ = openfl_errors_Error;
starling_errors_MissingContextError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: starling_errors_MissingContextError
});
var starling_errors_NotSupportedError = function(message,id) {
	if(id == null) {
		id = 0;
	}
	if(message == null) {
		message = "";
	}
	openfl_errors_Error.call(this,message,id);
};
$hxClasses["starling.errors.NotSupportedError"] = starling_errors_NotSupportedError;
starling_errors_NotSupportedError.__name__ = "starling.errors.NotSupportedError";
starling_errors_NotSupportedError.__super__ = openfl_errors_Error;
starling_errors_NotSupportedError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: starling_errors_NotSupportedError
});
var starling_events_Event = function(type,bubbles,data) {
	if(bubbles == null) {
		bubbles = false;
	}
	this.type = type;
	this.bubbles = bubbles;
	this.data = data;
};
$hxClasses["starling.events.Event"] = starling_events_Event;
starling_events_Event.__name__ = "starling.events.Event";
starling_events_Event.fromPool = function(type,bubbles,data) {
	if(bubbles == null) {
		bubbles = false;
	}
	if(starling_events_Event.sEventPool.data.get_length() != 0) {
		return starling_events_Event.sEventPool.data.pop().reset(type,bubbles,data);
	} else {
		return new starling_events_Event(type,bubbles,data);
	}
};
starling_events_Event.toPool = function(event) {
	event.data = event.target = event.currentTarget = null;
	var this1 = starling_events_Event.sEventPool;
	var index = starling_events_Event.sEventPool.data.get_length();
	this1.data.set(index,event);
};
starling_events_Event.prototype = {
	stopPropagation: function() {
		this.stopsPropagation = true;
	}
	,stopImmediatePropagation: function() {
		this.stopsPropagation = this.stopsImmediatePropagation = true;
	}
	,toString: function() {
		var c = js_Boot.getClass(this);
		return starling_utils_StringUtil.formatString("[{0} type=\"{1}\" bubbles={2}]",[c.__name__.split("::").pop(),this.type,this.bubbles]);
	}
	,bubbles: null
	,target: null
	,currentTarget: null
	,type: null
	,data: null
	,setTarget: function(value) {
		this.target = value;
	}
	,setCurrentTarget: function(value) {
		this.currentTarget = value;
	}
	,setData: function(value) {
		this.data = value;
	}
	,stopsPropagation: null
	,stopsImmediatePropagation: null
	,reset: function(type,bubbles,data) {
		if(bubbles == null) {
			bubbles = false;
		}
		this.type = type;
		this.bubbles = bubbles;
		this.data = data;
		this.target = this.currentTarget = null;
		this.stopsPropagation = this.stopsImmediatePropagation = false;
		return this;
	}
	,__class__: starling_events_Event
};
var starling_events_EnterFrameEvent = function(type,passedTime,bubbles) {
	if(bubbles == null) {
		bubbles = false;
	}
	starling_events_Event.call(this,type,bubbles,passedTime);
};
$hxClasses["starling.events.EnterFrameEvent"] = starling_events_EnterFrameEvent;
starling_events_EnterFrameEvent.__name__ = "starling.events.EnterFrameEvent";
starling_events_EnterFrameEvent.__super__ = starling_events_Event;
starling_events_EnterFrameEvent.prototype = $extend(starling_events_Event.prototype,{
	get_passedTime: function() {
		return this.data;
	}
	,__class__: starling_events_EnterFrameEvent
	,__properties__: {get_passedTime:"get_passedTime"}
});
var starling_events_KeyboardEvent = function(type,charCode,keyCode,keyLocation,ctrlKey,altKey,shiftKey) {
	if(shiftKey == null) {
		shiftKey = false;
	}
	if(altKey == null) {
		altKey = false;
	}
	if(ctrlKey == null) {
		ctrlKey = false;
	}
	if(keyLocation == null) {
		keyLocation = 0;
	}
	if(keyCode == null) {
		keyCode = 0;
	}
	if(charCode == null) {
		charCode = 0;
	}
	starling_events_Event.call(this,type,false,keyCode);
	this.mCharCode = charCode;
	this.mKeyCode = keyCode;
	this.mKeyLocation = keyLocation;
	this.mCtrlKey = ctrlKey;
	this.mAltKey = altKey;
	this.mShiftKey = shiftKey;
};
$hxClasses["starling.events.KeyboardEvent"] = starling_events_KeyboardEvent;
starling_events_KeyboardEvent.__name__ = "starling.events.KeyboardEvent";
starling_events_KeyboardEvent.__super__ = starling_events_Event;
starling_events_KeyboardEvent.prototype = $extend(starling_events_Event.prototype,{
	mCharCode: null
	,mKeyCode: null
	,mKeyLocation: null
	,mAltKey: null
	,mCtrlKey: null
	,mShiftKey: null
	,mIsDefaultPrevented: null
	,preventDefault: function() {
		this.mIsDefaultPrevented = true;
	}
	,isDefaultPrevented: function() {
		return this.mIsDefaultPrevented;
	}
	,get_charCode: function() {
		return this.mCharCode;
	}
	,get_keyCode: function() {
		return this.mKeyCode;
	}
	,get_keyLocation: function() {
		return this.mKeyLocation;
	}
	,get_altKey: function() {
		return this.mAltKey;
	}
	,get_ctrlKey: function() {
		return this.mCtrlKey;
	}
	,get_shiftKey: function() {
		return this.mShiftKey;
	}
	,__class__: starling_events_KeyboardEvent
	,__properties__: {get_shiftKey:"get_shiftKey",get_ctrlKey:"get_ctrlKey",get_altKey:"get_altKey",get_keyLocation:"get_keyLocation",get_keyCode:"get_keyCode",get_charCode:"get_charCode"}
});
var starling_events_ResizeEvent = function(type,width,height,bubbles) {
	if(bubbles == null) {
		bubbles = false;
	}
	starling_events_Event.call(this,type,bubbles,new openfl_geom_Point(width,height));
};
$hxClasses["starling.events.ResizeEvent"] = starling_events_ResizeEvent;
starling_events_ResizeEvent.__name__ = "starling.events.ResizeEvent";
starling_events_ResizeEvent.__super__ = starling_events_Event;
starling_events_ResizeEvent.prototype = $extend(starling_events_Event.prototype,{
	get_width: function() {
		return (js_Boot.__cast(this.data , openfl_geom_Point)).x | 0;
	}
	,get_height: function() {
		return (js_Boot.__cast(this.data , openfl_geom_Point)).y | 0;
	}
	,__class__: starling_events_ResizeEvent
	,__properties__: {get_height:"get_height",get_width:"get_width"}
});
var starling_events_Touch = function(id) {
	this.mID = id;
	this.mTapCount = 0;
	this.mPhase = "hover";
	this.mPressure = this.mWidth = this.mHeight = 1.0;
	this.mBubbleChain = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
};
$hxClasses["starling.events.Touch"] = starling_events_Touch;
starling_events_Touch.__name__ = "starling.events.Touch";
starling_events_Touch.prototype = {
	mID: null
	,mGlobalX: null
	,mGlobalY: null
	,mPreviousGlobalX: null
	,mPreviousGlobalY: null
	,mTapCount: null
	,mPhase: null
	,mTarget: null
	,mTimestamp: null
	,mPressure: null
	,mWidth: null
	,mHeight: null
	,mCancelled: null
	,mBubbleChain: null
	,getLocation: function(space,resultPoint) {
		starling_events_Touch.sHelperPoint.setTo(this.mGlobalX,this.mGlobalY);
		return space.globalToLocal(starling_events_Touch.sHelperPoint,resultPoint);
	}
	,getPreviousLocation: function(space,resultPoint) {
		starling_events_Touch.sHelperPoint.setTo(this.mPreviousGlobalX,this.mPreviousGlobalY);
		return space.globalToLocal(starling_events_Touch.sHelperPoint,resultPoint);
	}
	,getMovement: function(space,resultPoint) {
		if(resultPoint == null) {
			resultPoint = new openfl_geom_Point();
		}
		this.getLocation(space,resultPoint);
		var x = resultPoint.x;
		var y = resultPoint.y;
		this.getPreviousLocation(space,resultPoint);
		resultPoint.setTo(x - resultPoint.x,y - resultPoint.y);
		return resultPoint;
	}
	,isTouching: function(target) {
		return this.mBubbleChain.data.indexOf(target,0) != -1;
	}
	,toString: function() {
		var args = [this.mID,this.mGlobalX,this.mGlobalY,this.mPhase];
		return starling_utils_StringUtil.formatString("Touch {0}: globalX={1}, globalY={2}, phase={3}",args);
	}
	,clone: function() {
		var clone = new starling_events_Touch(this.mID);
		clone.mGlobalX = this.mGlobalX;
		clone.mGlobalY = this.mGlobalY;
		clone.mPreviousGlobalX = this.mPreviousGlobalX;
		clone.mPreviousGlobalY = this.mPreviousGlobalY;
		clone.mPhase = this.mPhase;
		clone.mTapCount = this.mTapCount;
		clone.mTimestamp = this.mTimestamp;
		clone.mPressure = this.mPressure;
		clone.mWidth = this.mWidth;
		clone.mHeight = this.mHeight;
		clone.mCancelled = this.mCancelled;
		clone.set_target(this.mTarget);
		return clone;
	}
	,updateBubbleChain: function() {
		if(this.mTarget != null) {
			var length = 1;
			var element = this.mTarget;
			this.mBubbleChain.data.set_length(1);
			this.mBubbleChain.data.set(0,element);
			while(true) {
				element = element.get_parent();
				if(!(element != null)) {
					break;
				}
				this.mBubbleChain.data.set(length++,element);
			}
		} else {
			this.mBubbleChain.data.set_length(0);
		}
	}
	,get_id: function() {
		return this.mID;
	}
	,get_previousGlobalX: function() {
		return this.mPreviousGlobalX;
	}
	,get_previousGlobalY: function() {
		return this.mPreviousGlobalY;
	}
	,get_globalX: function() {
		return this.mGlobalX;
	}
	,set_globalX: function(value) {
		this.mPreviousGlobalX = this.mGlobalX != this.mGlobalX ? value : this.mGlobalX;
		return this.mGlobalX = value;
	}
	,get_globalY: function() {
		return this.mGlobalY;
	}
	,set_globalY: function(value) {
		this.mPreviousGlobalY = this.mGlobalY != this.mGlobalY ? value : this.mGlobalY;
		return this.mGlobalY = value;
	}
	,get_tapCount: function() {
		return this.mTapCount;
	}
	,set_tapCount: function(value) {
		return this.mTapCount = value;
	}
	,get_phase: function() {
		return this.mPhase;
	}
	,set_phase: function(value) {
		return this.mPhase = value;
	}
	,get_target: function() {
		return this.mTarget;
	}
	,set_target: function(value) {
		if(this.mTarget != value) {
			this.mTarget = value;
			this.updateBubbleChain();
		}
		return this.mTarget;
	}
	,get_timestamp: function() {
		return this.mTimestamp;
	}
	,set_timestamp: function(value) {
		return this.mTimestamp = value;
	}
	,get_pressure: function() {
		return this.mPressure;
	}
	,set_pressure: function(value) {
		return this.mPressure = value;
	}
	,get_width: function() {
		return this.mWidth;
	}
	,set_width: function(value) {
		return this.mWidth = value;
	}
	,get_height: function() {
		return this.mHeight;
	}
	,set_height: function(value) {
		return this.mHeight = value;
	}
	,get_cancelled: function() {
		return this.mCancelled;
	}
	,set_cancelled: function(value) {
		return this.mCancelled = value;
	}
	,dispatchEvent: function(event) {
		if(this.mTarget != null) {
			event.dispatch(this.mBubbleChain);
		}
	}
	,get_bubbleChain: function() {
		var data = null;
		return new openfl__$Vector_AbstractVector(this.mBubbleChain.data.concat(data));
	}
	,__class__: starling_events_Touch
	,__properties__: {get_bubbleChain:"get_bubbleChain",set_cancelled:"set_cancelled",get_cancelled:"get_cancelled",set_height:"set_height",get_height:"get_height",set_width:"set_width",get_width:"get_width",set_pressure:"set_pressure",get_pressure:"get_pressure",set_timestamp:"set_timestamp",get_timestamp:"get_timestamp",set_target:"set_target",get_target:"get_target",set_phase:"set_phase",get_phase:"get_phase",set_tapCount:"set_tapCount",get_tapCount:"get_tapCount",set_globalY:"set_globalY",get_globalY:"get_globalY",set_globalX:"set_globalX",get_globalX:"get_globalX",get_previousGlobalY:"get_previousGlobalY",get_previousGlobalX:"get_previousGlobalX",get_id:"get_id"}
};
var starling_events_TouchEvent = function(type,touches,shiftKey,ctrlKey,bubbles) {
	if(bubbles == null) {
		bubbles = true;
	}
	if(ctrlKey == null) {
		ctrlKey = false;
	}
	if(shiftKey == null) {
		shiftKey = false;
	}
	starling_events_Event.call(this,type,bubbles,touches);
	this.mShiftKey = shiftKey;
	this.mCtrlKey = ctrlKey;
	this.mTimestamp = -1.0;
	this.mVisitedObjects = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	var numTouches = touches.data.get_length();
	var _g = 0;
	var _g1 = numTouches;
	while(_g < _g1) {
		var i = _g++;
		if(touches.data.get(i).get_timestamp() > this.mTimestamp) {
			this.mTimestamp = touches.data.get(i).get_timestamp();
		}
	}
};
$hxClasses["starling.events.TouchEvent"] = starling_events_TouchEvent;
starling_events_TouchEvent.__name__ = "starling.events.TouchEvent";
starling_events_TouchEvent.__super__ = starling_events_Event;
starling_events_TouchEvent.prototype = $extend(starling_events_Event.prototype,{
	mShiftKey: null
	,mCtrlKey: null
	,mTimestamp: null
	,mVisitedObjects: null
	,getTouches: function(target,phase,result) {
		if(result == null) {
			result = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
		}
		var allTouches = this.data;
		var numTouches = allTouches.data.get_length();
		var _g = 0;
		var _g1 = numTouches;
		while(_g < _g1) {
			var i = _g++;
			var touch = js_Boot.__cast(allTouches.data.get(i) , starling_events_Touch);
			var correctTarget = touch.isTouching(target);
			var correctPhase = phase == null || phase == touch.get_phase();
			if(correctTarget && correctPhase) {
				var index = result.data.get_length();
				result.data.set(index,touch);
			}
		}
		return result;
	}
	,getTouch: function(target,phase,id) {
		if(id == null) {
			id = -1;
		}
		this.getTouches(target,phase,starling_events_TouchEvent.sTouches);
		var numTouches = starling_events_TouchEvent.sTouches.data.get_length();
		if(numTouches > 0) {
			var touch = null;
			if(id < 0) {
				touch = starling_events_TouchEvent.sTouches.data.get(0);
			} else {
				var _g = 0;
				var _g1 = numTouches;
				while(_g < _g1) {
					var i = _g++;
					if(starling_events_TouchEvent.sTouches.data.get(i).get_id() == id) {
						touch = starling_events_TouchEvent.sTouches.data.get(i);
						break;
					}
				}
			}
			starling_events_TouchEvent.sTouches.data.set_length(0);
			return touch;
		} else {
			return null;
		}
	}
	,interactsWith: function(target) {
		var result = false;
		this.getTouches(target,null,starling_events_TouchEvent.sTouches);
		var i = starling_events_TouchEvent.sTouches.data.get_length() - 1;
		while(i >= 0) {
			if(starling_events_TouchEvent.sTouches.data.get(i).get_phase() != "ended") {
				result = true;
				break;
			}
			--i;
		}
		starling_events_TouchEvent.sTouches.data.set_length(0);
		return result;
	}
	,dispatch: function(chain) {
		if(chain != null && chain.data.get_length() != 0) {
			var chainLength = this.bubbles ? chain.data.get_length() : 1;
			var previousTarget = this.target;
			this.setTarget(chain.data.get(0));
			var _g = 0;
			var _g1 = chainLength;
			while(_g < _g1) {
				var i = _g++;
				var chainElement = js_Boot.__cast(chain.data.get(i) , starling_events_EventDispatcher);
				if(this.mVisitedObjects.data.indexOf(chainElement,0) == -1) {
					var stopPropagation = chainElement.__invokeEvent(this);
					var this1 = this.mVisitedObjects;
					var index = this.mVisitedObjects.data.get_length();
					this1.data.set(index,chainElement);
					if(stopPropagation) {
						break;
					}
				}
			}
			this.setTarget(previousTarget);
		}
	}
	,get_timestamp: function() {
		return this.mTimestamp;
	}
	,get_touches: function() {
		var touches = this.data;
		var data = null;
		return new openfl__$Vector_AbstractVector(touches.data.concat(data));
	}
	,get_shiftKey: function() {
		return this.mShiftKey;
	}
	,get_ctrlKey: function() {
		return this.mCtrlKey;
	}
	,__class__: starling_events_TouchEvent
	,__properties__: {get_ctrlKey:"get_ctrlKey",get_shiftKey:"get_shiftKey",get_touches:"get_touches",get_timestamp:"get_timestamp"}
});
var starling_events_TouchMarker = function() {
	starling_display_Sprite.call(this);
	this.mCenter = new openfl_geom_Point();
	this.mTexture = this.createTexture();
	var marker = new starling_display_Image(this.mTexture);
	marker.set_pivotX(this.mTexture.get_width() / 2);
	marker.set_pivotY(this.mTexture.get_height() / 2);
	marker.set_touchable(false);
	this.addChild(marker);
	var marker1 = new starling_display_Image(this.mTexture);
	marker1.set_pivotX(this.mTexture.get_width() / 2);
	marker1.set_pivotY(this.mTexture.get_height() / 2);
	marker1.set_touchable(false);
	this.addChild(marker1);
};
$hxClasses["starling.events.TouchMarker"] = starling_events_TouchMarker;
starling_events_TouchMarker.__name__ = "starling.events.TouchMarker";
starling_events_TouchMarker.__super__ = starling_display_Sprite;
starling_events_TouchMarker.prototype = $extend(starling_display_Sprite.prototype,{
	mCenter: null
	,mTexture: null
	,dispose: function() {
		this.mTexture.dispose();
		starling_display_Sprite.prototype.dispose.call(this);
	}
	,moveMarker: function(x,y,withCenter) {
		if(withCenter == null) {
			withCenter = false;
		}
		if(withCenter) {
			this.mCenter.x += x - this.get_realMarker().get_x();
			this.mCenter.y += y - this.get_realMarker().get_y();
		}
		this.get_realMarker().set_x(x);
		this.get_realMarker().set_y(y);
		this.get_mockMarker().set_x(2 * this.mCenter.x - x);
		this.get_mockMarker().set_y(2 * this.mCenter.y - y);
	}
	,moveCenter: function(x,y) {
		this.mCenter.x = x;
		this.mCenter.y = y;
		this.moveMarker(this.get_realX(),this.get_realY());
	}
	,createTexture: function() {
		var scale = starling_core_Starling.get_current().get_contentScaleFactor();
		var radius = 12 * scale;
		var width = 32 * scale | 0;
		var height = 32 * scale | 0;
		var thickness = 1.5 * scale;
		var shape = new openfl_display_Shape();
		shape.get_graphics().lineStyle(thickness,0,0.3);
		shape.get_graphics().drawCircle(width / 2,height / 2,radius + thickness);
		shape.get_graphics().beginFill(16777215,0.4);
		shape.get_graphics().lineStyle(thickness,16777215);
		shape.get_graphics().drawCircle(width / 2,height / 2,radius);
		shape.get_graphics().endFill();
		var bmpData = new openfl_display_BitmapData(width,height,true,0);
		bmpData.draw(shape);
		return starling_textures_Texture.fromBitmapData(bmpData,false,false,scale);
	}
	,get_realMarker: function() {
		return js_Boot.__cast(this.getChildAt(0) , starling_display_Image);
	}
	,get_mockMarker: function() {
		return js_Boot.__cast(this.getChildAt(1) , starling_display_Image);
	}
	,get_realX: function() {
		return this.get_realMarker().get_x();
	}
	,get_realY: function() {
		return this.get_realMarker().get_y();
	}
	,get_mockX: function() {
		return this.get_mockMarker().get_x();
	}
	,get_mockY: function() {
		return this.get_mockMarker().get_y();
	}
	,__class__: starling_events_TouchMarker
	,__properties__: $extend(starling_display_Sprite.prototype.__properties__,{get_mockY:"get_mockY",get_mockX:"get_mockX",get_realY:"get_realY",get_realX:"get_realX",get_mockMarker:"get_mockMarker",get_realMarker:"get_realMarker"})
});
var starling_events_TouchPhase = function() { };
$hxClasses["starling.events.TouchPhase"] = starling_events_TouchPhase;
starling_events_TouchPhase.__name__ = "starling.events.TouchPhase";
var starling_events_TouchProcessor = function(stage) {
	this.mMultitapDistance = 25;
	this.mMultitapTime = 0.3;
	this.mCtrlDown = false;
	this.mShiftDown = false;
	this.mRoot = this.mStage = stage;
	this.mElapsedTime = 0.0;
	this.mCurrentTouches = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	this.mQueue = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	this.mLastTaps = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	this.mStage.addEventListener("keyDown",$bind(this,this.onKey));
	this.mStage.addEventListener("keyUp",$bind(this,this.onKey));
	this.monitorInterruptions(true);
};
$hxClasses["starling.events.TouchProcessor"] = starling_events_TouchProcessor;
starling_events_TouchProcessor.__name__ = "starling.events.TouchProcessor";
starling_events_TouchProcessor.prototype = {
	mStage: null
	,mRoot: null
	,mElapsedTime: null
	,mTouchMarker: null
	,mLastTaps: null
	,mShiftDown: null
	,mCtrlDown: null
	,mMultitapTime: null
	,mMultitapDistance: null
	,mQueue: null
	,mCurrentTouches: null
	,dispose: function() {
		this.monitorInterruptions(false);
		this.mStage.removeEventListener("keyDown",$bind(this,this.onKey));
		this.mStage.removeEventListener("keyUp",$bind(this,this.onKey));
		if(this.mTouchMarker != null) {
			this.mTouchMarker.dispose();
		}
	}
	,advanceTime: function(passedTime) {
		var i;
		var touch;
		this.mElapsedTime += passedTime;
		starling_events_TouchProcessor.sUpdatedTouches.data.set_length(0);
		if(this.mLastTaps.data.get_length() > 0) {
			var i1 = this.mLastTaps.data.get_length() - 1;
			while(i1 >= 0) {
				if(this.mElapsedTime - this.mLastTaps.data.get(i1).get_timestamp() > this.mMultitapTime) {
					new openfl__$Vector_AbstractVector(this.mLastTaps.data.splice(i1,1));
				}
				--i1;
			}
		}
		while(this.mQueue.data.get_length() > 0) {
			var touch1 = this.mCurrentTouches.data.iterator();
			while(touch1.hasNext()) {
				var touch2 = touch1.next();
				if(touch2.get_phase() == "began" || touch2.get_phase() == "moved") {
					touch2.set_phase("stationary");
				}
			}
			while(true) {
				var tmp;
				if(this.mQueue.data.get_length() > 0) {
					var tmp1 = starling_events_TouchProcessor.sUpdatedTouches;
					var this1 = this.mQueue;
					var index = this.mQueue.data.get_length() - 1;
					tmp = !this.containsTouchWithID(tmp1,this1.data.get(index)[0]);
				} else {
					tmp = false;
				}
				if(!tmp) {
					break;
				}
				var touchArgs = this.mQueue.data.pop();
				touch = this.createOrUpdateTouch(touchArgs[0],touchArgs[1],touchArgs[2],touchArgs[3],touchArgs[4],touchArgs[5],touchArgs[6]);
				var this2 = starling_events_TouchProcessor.sUpdatedTouches;
				var index1 = starling_events_TouchProcessor.sUpdatedTouches.data.get_length();
				this2.data.set(index1,touch);
			}
			this.processTouches(starling_events_TouchProcessor.sUpdatedTouches,this.mShiftDown,this.mCtrlDown);
			var i2 = this.mCurrentTouches.data.get_length() - 1;
			while(i2 >= 0) {
				if(this.mCurrentTouches.data.get(i2).get_phase() == "ended") {
					new openfl__$Vector_AbstractVector(this.mCurrentTouches.data.splice(i2,1));
				}
				--i2;
			}
			starling_events_TouchProcessor.sUpdatedTouches = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
		}
	}
	,processTouches: function(touches,shiftDown,ctrlDown) {
		starling_events_TouchProcessor.sHoveringTouchData.data.set_length(0);
		var touchEvent = new starling_events_TouchEvent("touch",this.mCurrentTouches,shiftDown,ctrlDown);
		var touch;
		var touch1 = touches.data.iterator();
		while(touch1.hasNext()) {
			var touch2 = touch1.next();
			if(touch2.get_phase() == "hover" && touch2.get_target() != null) {
				var this1 = starling_events_TouchProcessor.sHoveringTouchData;
				var index = starling_events_TouchProcessor.sHoveringTouchData.data.get_length();
				var value = { touch : touch2, target : touch2.get_target(), bubbleChain : touch2.get_bubbleChain()};
				this1.data.set(index,value);
			}
			if(touch2.get_phase() == "hover" || touch2.get_phase() == "began") {
				starling_events_TouchProcessor.sHelperPoint.setTo(touch2.get_globalX(),touch2.get_globalY());
				touch2.set_target(this.mRoot.hitTest(starling_events_TouchProcessor.sHelperPoint,true));
			}
		}
		var touchData = starling_events_TouchProcessor.sHoveringTouchData.data.iterator();
		while(touchData.hasNext()) {
			var touchData1 = touchData.next();
			if((js_Boot.__cast(touchData1.touch , starling_events_Touch)).get_target() != touchData1.target) {
				touchEvent.dispatch(touchData1.bubbleChain);
			}
		}
		var touch3 = touches.data.iterator();
		while(touch3.hasNext()) {
			var touch4 = touch3.next();
			touch4.dispatchEvent(touchEvent);
		}
	}
	,enqueue: function(touchID,phase,globalX,globalY,pressure,width,height) {
		if(height == null) {
			height = 1.0;
		}
		if(width == null) {
			width = 1.0;
		}
		if(pressure == null) {
			pressure = 1.0;
		}
		this.mQueue.data.unshift([touchID,phase,globalX,globalY,pressure,width,height]);
		if(this.mCtrlDown && this.get_simulateMultitouch() && touchID == 0) {
			this.mTouchMarker.moveMarker(globalX,globalY,this.mShiftDown);
			var this1 = this.mQueue;
			var x = [1,phase,this.mTouchMarker.get_mockX(),this.mTouchMarker.get_mockY()];
			this1.data.unshift(x);
		}
	}
	,enqueueMouseLeftStage: function() {
		var mouse = this.getCurrentTouch(0);
		if(mouse == null || mouse.get_phase() != "hover") {
			return;
		}
		var offset = 1;
		var exitX = mouse.get_globalX();
		var exitY = mouse.get_globalY();
		var distLeft = mouse.get_globalX();
		var distRight = this.mStage.get_stageWidth() - distLeft;
		var distTop = mouse.get_globalY();
		var distBottom = this.mStage.get_stageHeight() - distTop;
		var minDist = starling_utils_MathUtil.min([distLeft,distRight,distTop,distBottom]);
		if(minDist == distLeft) {
			exitX = -offset;
		} else if(minDist == distRight) {
			exitX = this.mStage.get_stageWidth() + offset;
		} else if(minDist == distTop) {
			exitY = -offset;
		} else {
			exitY = this.mStage.get_stageHeight() + offset;
		}
		this.enqueue(0,"hover",exitX,exitY);
	}
	,cancelTouches: function() {
		if(this.mCurrentTouches.data.get_length() > 0) {
			var touch = this.mCurrentTouches.data.iterator();
			while(touch.hasNext()) {
				var touch1 = touch.next();
				if(touch1.get_phase() == "began" || touch1.get_phase() == "moved" || touch1.get_phase() == "stationary") {
					touch1.set_phase("ended");
					touch1.set_cancelled(true);
				}
			}
			this.processTouches(this.mCurrentTouches,this.mShiftDown,this.mCtrlDown);
		}
		this.mCurrentTouches.data.set_length(0);
		this.mQueue.data.set_length(0);
	}
	,createOrUpdateTouch: function(touchID,phase,globalX,globalY,pressure,width,height) {
		if(height == null) {
			height = 1.0;
		}
		if(width == null) {
			width = 1.0;
		}
		if(pressure == null) {
			pressure = 1.0;
		}
		var touch = this.getCurrentTouch(touchID);
		if(touch == null) {
			touch = new starling_events_Touch(touchID);
			this.addCurrentTouch(touch);
		}
		touch.set_globalX(globalX);
		touch.set_globalY(globalY);
		touch.set_phase(phase);
		touch.set_timestamp(this.mElapsedTime);
		touch.set_pressure(pressure);
		touch.set_width(width);
		touch.set_height(height);
		if(phase == "began") {
			this.updateTapCount(touch);
		}
		return touch;
	}
	,updateTapCount: function(touch) {
		var nearbyTap = null;
		var minSqDist = this.mMultitapDistance * this.mMultitapDistance;
		var tap = this.mLastTaps.data.iterator();
		while(tap.hasNext()) {
			var tap1 = tap.next();
			var sqDist = Math.pow(tap1.get_globalX() - touch.get_globalX(),2) + Math.pow(tap1.get_globalY() - touch.get_globalY(),2);
			if(sqDist <= minSqDist) {
				nearbyTap = tap1;
				break;
			}
		}
		if(nearbyTap != null) {
			touch.set_tapCount(nearbyTap.get_tapCount() + 1);
			var this1 = this.mLastTaps;
			var pos = this.mLastTaps.data.indexOf(nearbyTap,0);
			new openfl__$Vector_AbstractVector(this1.data.splice(pos,1));
		} else {
			touch.set_tapCount(1);
		}
		var this2 = this.mLastTaps;
		var x = touch.clone();
		this2.data.push(x);
	}
	,addCurrentTouch: function(touch) {
		var i = this.mCurrentTouches.data.get_length() - 1;
		while(i >= 0) {
			if(this.mCurrentTouches.data.get(i).get_id() == touch.get_id()) {
				new openfl__$Vector_AbstractVector(this.mCurrentTouches.data.splice(i,1));
			}
			--i;
		}
		this.mCurrentTouches.data.push(touch);
	}
	,getCurrentTouch: function(touchID) {
		var touch = this.mCurrentTouches.data.iterator();
		while(touch.hasNext()) {
			var touch1 = touch.next();
			if(touch1.get_id() == touchID) {
				return touch1;
			}
		}
		return null;
	}
	,containsTouchWithID: function(touches,touchID) {
		var touch = touches.data.iterator();
		while(touch.hasNext()) {
			var touch1 = touch.next();
			if(touch1.get_id() == touchID) {
				return true;
			}
		}
		return false;
	}
	,get_simulateMultitouch: function() {
		return this.mTouchMarker != null;
	}
	,set_simulateMultitouch: function(value) {
		if(this.get_simulateMultitouch() == value) {
			return value;
		}
		if(value) {
			this.mTouchMarker = new starling_events_TouchMarker();
			this.mTouchMarker.set_visible(false);
			this.mStage.addChild(this.mTouchMarker);
		} else {
			this.mTouchMarker.removeFromParent(true);
			this.mTouchMarker = null;
		}
		return value;
	}
	,get_multitapTime: function() {
		return this.mMultitapTime;
	}
	,set_multitapTime: function(value) {
		return this.mMultitapTime = value;
	}
	,get_multitapDistance: function() {
		return this.mMultitapDistance;
	}
	,set_multitapDistance: function(value) {
		return this.mMultitapDistance = value;
	}
	,get_root: function() {
		return this.mRoot;
	}
	,set_root: function(value) {
		return this.mRoot = value;
	}
	,get_stage: function() {
		return this.mStage;
	}
	,get_numCurrentTouches: function() {
		return this.mCurrentTouches.data.get_length();
	}
	,onKey: function(event) {
		if(event.get_keyCode() == 17 || event.get_keyCode() == 15) {
			var wasCtrlDown = this.mCtrlDown;
			this.mCtrlDown = event.type == "keyDown";
			if(this.get_simulateMultitouch() && wasCtrlDown != this.mCtrlDown) {
				this.mTouchMarker.set_visible(this.mCtrlDown);
				this.mTouchMarker.moveCenter(this.mStage.get_stageWidth() / 2,this.mStage.get_stageHeight() / 2);
				var mouseTouch = this.getCurrentTouch(0);
				var mockedTouch = this.getCurrentTouch(1);
				if(mouseTouch != null) {
					this.mTouchMarker.moveMarker(mouseTouch.get_globalX(),mouseTouch.get_globalY());
				}
				if(wasCtrlDown && mockedTouch != null && mockedTouch.get_phase() != "ended") {
					var this1 = this.mQueue;
					var x = [1,"ended",mockedTouch.get_globalX(),mockedTouch.get_globalY()];
					this1.data.unshift(x);
				} else if(this.mCtrlDown && mouseTouch != null) {
					if(mouseTouch.get_phase() == "hover" || mouseTouch.get_phase() == "ended") {
						var this2 = this.mQueue;
						var x1 = [1,"hover",this.mTouchMarker.get_mockX(),this.mTouchMarker.get_mockY()];
						this2.data.unshift(x1);
					} else {
						var this3 = this.mQueue;
						var x2 = [1,"began",this.mTouchMarker.get_mockX(),this.mTouchMarker.get_mockY()];
						this3.data.unshift(x2);
					}
				}
			}
		} else if(event.get_keyCode() == 16) {
			this.mShiftDown = event.type == "keyDown";
		}
	}
	,monitorInterruptions: function(enable) {
		try {
			if(enable) {
				openfl_Lib.current.stage.addEventListener("deactivate",$bind(this,this.onInterruption),false,0,true);
			} else {
				openfl_Lib.current.stage.removeEventListener("deactivate",$bind(this,this.onInterruption));
			}
		} catch( e ) {
			haxe_CallStack.lastException = e;
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			if(((e1) instanceof openfl_errors_Error)) {
				var e2 = e1;
			} else {
				throw e;
			}
		}
	}
	,onInterruption: function(event) {
		this.cancelTouches();
	}
	,__class__: starling_events_TouchProcessor
	,__properties__: {get_numCurrentTouches:"get_numCurrentTouches",get_stage:"get_stage",set_root:"set_root",get_root:"get_root",set_multitapDistance:"set_multitapDistance",get_multitapDistance:"get_multitapDistance",set_multitapTime:"set_multitapTime",get_multitapTime:"get_multitapTime",set_simulateMultitouch:"set_simulateMultitouch",get_simulateMultitouch:"get_simulateMultitouch"}
};
var starling_extensions_ColorArgb = function(red,green,blue,alpha) {
	if(alpha == null) {
		alpha = 0;
	}
	if(blue == null) {
		blue = 0;
	}
	if(green == null) {
		green = 0;
	}
	if(red == null) {
		red = 0;
	}
	this.red = red;
	this.green = green;
	this.blue = blue;
	this.alpha = alpha;
};
$hxClasses["starling.extensions.ColorArgb"] = starling_extensions_ColorArgb;
starling_extensions_ColorArgb.__name__ = "starling.extensions.ColorArgb";
starling_extensions_ColorArgb.fromRgb = function(color) {
	var rgb = new starling_extensions_ColorArgb();
	rgb._fromRgb(color);
	return rgb;
};
starling_extensions_ColorArgb.fromArgb = function(color) {
	var argb = new starling_extensions_ColorArgb();
	argb._fromArgb(color);
	return argb;
};
starling_extensions_ColorArgb.prototype = {
	red: null
	,green: null
	,blue: null
	,alpha: null
	,toRgb: function() {
		var r = this.red;
		if(r < 0.0) {
			r = 0.0;
		} else if(r > 1.0) {
			r = 1.0;
		}
		var g = this.green;
		if(g < 0.0) {
			g = 0.0;
		} else if(g > 1.0) {
			g = 1.0;
		}
		var b = this.blue;
		if(b < 0.0) {
			b = 0.0;
		} else if(b > 1.0) {
			b = 1.0;
		}
		return (r * 255 | 0) << 16 | (g * 255 | 0) << 8 | (b * 255 | 0);
	}
	,toArgb: function() {
		var a = this.alpha;
		if(a < 0.0) {
			a = 0.0;
		} else if(a > 1.0) {
			a = 1.0;
		}
		var r = this.red;
		if(r < 0.0) {
			r = 0.0;
		} else if(r > 1.0) {
			r = 1.0;
		}
		var g = this.green;
		if(g < 0.0) {
			g = 0.0;
		} else if(g > 1.0) {
			g = 1.0;
		}
		var b = this.blue;
		if(b < 0.0) {
			b = 0.0;
		} else if(b > 1.0) {
			b = 1.0;
		}
		return (a * 255 | 0) << 24 | (r * 255 | 0) << 16 | (g * 255 | 0) << 8 | (b * 255 | 0) | 0;
	}
	,_fromRgb: function(color) {
		this.red = ((color >> 16 | 0) & 255) / 255.0;
		this.green = ((color >> 8 | 0) & 255) / 255.0;
		this.blue = (color & 255) / 255.0;
	}
	,_fromArgb: function(color) {
		this.red = ((color >> 16 | 0) & 255) / 255.0;
		this.green = ((color >> 8 | 0) & 255) / 255.0;
		this.blue = (color & 255) / 255.0;
		this.alpha = ((color >> 24 | 0) & 255) / 255.0;
	}
	,copyFrom: function(argb) {
		this.red = argb.red;
		this.green = argb.green;
		this.blue = argb.blue;
		this.alpha = argb.alpha;
	}
	,__class__: starling_extensions_ColorArgb
};
var starling_extensions_Particle = function() {
	this.x = this.y = this.rotation = this.currentTime = 0.0;
	this.totalTime = this.alpha = this.scale = 1.0;
	this.color = 16777215;
};
$hxClasses["starling.extensions.Particle"] = starling_extensions_Particle;
starling_extensions_Particle.__name__ = "starling.extensions.Particle";
starling_extensions_Particle.prototype = {
	x: null
	,y: null
	,scale: null
	,rotation: null
	,color: null
	,alpha: null
	,currentTime: null
	,totalTime: null
	,__class__: starling_extensions_Particle
};
var starling_extensions_PDParticle = function() {
	starling_extensions_Particle.call(this);
	this.colorArgb = new starling_extensions_ColorArgb();
	this.colorArgbDelta = new starling_extensions_ColorArgb();
};
$hxClasses["starling.extensions.PDParticle"] = starling_extensions_PDParticle;
starling_extensions_PDParticle.__name__ = "starling.extensions.PDParticle";
starling_extensions_PDParticle.__super__ = starling_extensions_Particle;
starling_extensions_PDParticle.prototype = $extend(starling_extensions_Particle.prototype,{
	colorArgb: null
	,colorArgbDelta: null
	,startX: null
	,startY: null
	,velocityX: null
	,velocityY: null
	,radialAcceleration: null
	,tangentialAcceleration: null
	,emitRadius: null
	,emitRadiusDelta: null
	,emitRotation: null
	,emitRotationDelta: null
	,rotationDelta: null
	,scaleDelta: null
	,__class__: starling_extensions_PDParticle
});
var starling_extensions_ParticleSystem = function(texture,emissionRate,initialCapacity,maxCapacity,blendFactorSource,blendFactorDest) {
	if(maxCapacity == null) {
		maxCapacity = 16383;
	}
	if(initialCapacity == null) {
		initialCapacity = 128;
	}
	this.mNumParticles = 0;
	starling_display_DisplayObject.call(this);
	if(texture == null) {
		throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("texture must not be null"));
	}
	this.mTexture = texture;
	this.mParticles = openfl__$Vector_Vector_$Impl_$.toObjectVector(null,0,false);
	this.mVertexData = new starling_utils_VertexData(0);
	this.mIndices = openfl__$Vector_Vector_$Impl_$.toIntVector(null);
	this.mEmissionRate = emissionRate;
	this.mEmissionTime = 0.0;
	this.mFrameTime = 0.0;
	this.mEmitterX = this.mEmitterY = 0;
	this.mMaxCapacity = Math.min(16383,maxCapacity) | 0;
	this.mSmoothing = "bilinear";
	this.mBlendFactorSource = blendFactorSource != null ? blendFactorSource : openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.toString(2);
	this.mBlendFactorDestination = blendFactorDest != null ? blendFactorDest : openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.toString(5);
	this.createProgram();
	this.updatePremultipliedAlpha();
	this.raiseCapacity(initialCapacity);
	starling_core_Starling.get_current().get_stage3D().addEventListener("context3DCreate",$bind(this,this.onContextCreated),false,0,true);
};
$hxClasses["starling.extensions.ParticleSystem"] = starling_extensions_ParticleSystem;
starling_extensions_ParticleSystem.__name__ = "starling.extensions.ParticleSystem";
starling_extensions_ParticleSystem.__interfaces__ = [starling_animation_IAnimatable];
starling_extensions_ParticleSystem.__super__ = starling_display_DisplayObject;
starling_extensions_ParticleSystem.prototype = $extend(starling_display_DisplayObject.prototype,{
	mTexture: null
	,mParticles: null
	,mFrameTime: null
	,mProgram: null
	,mVertexData: null
	,mVertexBuffer: null
	,mIndices: null
	,mIndexBuffer: null
	,mNumParticles: null
	,mMaxCapacity: null
	,mEmissionRate: null
	,mEmissionTime: null
	,mEmitterX: null
	,mEmitterY: null
	,mBlendFactorSource: null
	,mBlendFactorDestination: null
	,mSmoothing: null
	,dispose: function() {
		starling_core_Starling.get_current().get_stage3D().removeEventListener("context3DCreate",$bind(this,this.onContextCreated));
		if(this.mVertexBuffer != null) {
			this.mVertexBuffer.dispose();
		}
		if(this.mIndexBuffer != null) {
			this.mIndexBuffer.dispose();
		}
		starling_display_DisplayObject.prototype.dispose.call(this);
	}
	,onContextCreated: function(event) {
		this.createProgram();
		this.raiseCapacity(0);
	}
	,updatePremultipliedAlpha: function() {
		var pma = this.mTexture.get_premultipliedAlpha();
		if(openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.fromString(this.mBlendFactorSource) == 2 && openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.fromString(this.mBlendFactorDestination) == 5) {
			this.mVertexData.set_premultipliedAlpha(this.mTexture.get_premultipliedAlpha());
			if(!pma) {
				this.mBlendFactorSource = openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.toString(7);
			}
		} else {
			this.mVertexData.set_premultipliedAlpha(false);
		}
	}
	,createParticle: function() {
		return new starling_extensions_Particle();
	}
	,initParticle: function(particle) {
		particle.x = this.mEmitterX;
		particle.y = this.mEmitterY;
		particle.currentTime = 0;
		particle.totalTime = 1;
		particle.color = Math.random() * 16777215 | 0;
	}
	,advanceParticle: function(particle,passedTime) {
		particle.y += passedTime * 250;
		particle.alpha = 1.0 - particle.currentTime / particle.totalTime;
		particle.scale = 1.0 - particle.alpha;
		particle.currentTime += passedTime;
	}
	,raiseCapacity: function(byAmount) {
		var oldCapacity = this.get_capacity();
		var newCapacity = Math.min(this.mMaxCapacity,oldCapacity + byAmount) | 0;
		var context = starling_core_Starling.get_current().get_context();
		if(context == null) {
			throw new js__$Boot_HaxeError(new starling_errors_MissingContextError());
		}
		var baseVertexData = new starling_utils_VertexData(4);
		baseVertexData.setTexCoords(0,0.0,0.0);
		baseVertexData.setTexCoords(1,1.0,0.0);
		baseVertexData.setTexCoords(2,0.0,1.0);
		baseVertexData.setTexCoords(3,1.0,1.0);
		this.mTexture.adjustVertexData(baseVertexData,0,4);
		this.mParticles.data.fixed = false;
		this.mIndices.data.fixed = false;
		var _g = oldCapacity;
		var _g1 = newCapacity;
		while(_g < _g1) {
			var i = _g++;
			var numVertices = i * 4 | 0;
			var numIndices = i * 6 | 0;
			var this1 = this.mParticles;
			var value = this.createParticle();
			this1.data.set(i,value);
			this.mVertexData.append(baseVertexData);
			this.mIndices.data.set(numIndices,numVertices);
			this.mIndices.data.set(numIndices + 1 | 0,numVertices + 1);
			this.mIndices.data.set(numIndices + 2 | 0,numVertices + 2);
			this.mIndices.data.set(numIndices + 3 | 0,numVertices + 1);
			this.mIndices.data.set(numIndices + 4 | 0,numVertices + 3);
			this.mIndices.data.set(numIndices + 5 | 0,numVertices + 2);
		}
		if(newCapacity < oldCapacity) {
			this.mParticles.data.set_length(newCapacity);
			this.mIndices.data.set_length(newCapacity * 6);
		}
		this.mParticles.data.fixed = true;
		this.mIndices.data.fixed = true;
		if(this.mVertexBuffer != null) {
			this.mVertexBuffer.dispose();
		}
		if(this.mIndexBuffer != null) {
			this.mIndexBuffer.dispose();
		}
		if(newCapacity > 0) {
			this.mVertexBuffer = context.createVertexBuffer(newCapacity * 4,8);
			this.mVertexBuffer.uploadFromTypedArray(this.mVertexData.get_rawData());
			this.mIndexBuffer = context.createIndexBuffer(newCapacity * 6);
			this.mIndexBuffer.uploadFromVector(this.mIndices,0,newCapacity * 6);
		}
	}
	,start: function(duration) {
		if(duration == null) {
			duration = -1;
		}
		if(duration == -1) {
			duration = Infinity;
		}
		if(this.mEmissionRate != 0) {
			this.mEmissionTime = duration;
		}
	}
	,stop: function(clearParticles) {
		if(clearParticles == null) {
			clearParticles = false;
		}
		this.mEmissionTime = 0.0;
		if(clearParticles) {
			this.clear();
		}
	}
	,clear: function() {
		this.mNumParticles = 0;
	}
	,getBounds: function(targetSpace,resultRect) {
		if(resultRect == null) {
			resultRect = new openfl_geom_Rectangle();
		}
		this.getTransformationMatrix(targetSpace,starling_extensions_ParticleSystem.sHelperMatrix);
		starling_utils_MatrixUtil.transformCoords(starling_extensions_ParticleSystem.sHelperMatrix,0,0,starling_extensions_ParticleSystem.sHelperPoint);
		resultRect.x = starling_extensions_ParticleSystem.sHelperPoint.x;
		resultRect.y = starling_extensions_ParticleSystem.sHelperPoint.y;
		resultRect.width = resultRect.height = 0;
		return resultRect;
	}
	,advanceTime: function(passedTime) {
		var particleIndex = 0;
		var particle;
		while(particleIndex < this.mNumParticles) {
			particle = this.mParticles.data.get(particleIndex);
			if(particle.currentTime < particle.totalTime) {
				this.advanceParticle(particle,passedTime);
				++particleIndex;
			} else {
				if(particleIndex != this.mNumParticles - 1) {
					var nextParticle = this.mParticles.data.get(this.mNumParticles - 1 | 0);
					this.mParticles.data.set(this.mNumParticles - 1 | 0,particle);
					this.mParticles.data.set(particleIndex,nextParticle);
				}
				--this.mNumParticles;
				if(this.mNumParticles == 0 && this.mEmissionTime == 0) {
					this.dispatchEventWith("complete");
				}
			}
		}
		if(this.mEmissionTime > 0) {
			var timeBetweenParticles = 1.0 / this.mEmissionRate;
			this.mFrameTime += passedTime;
			while(this.mFrameTime > 0) {
				if(this.mNumParticles < this.mMaxCapacity) {
					if(this.mNumParticles == this.get_capacity()) {
						this.raiseCapacity(this.get_capacity());
					}
					particle = this.mParticles.data.get(this.mNumParticles);
					this.initParticle(particle);
					if(particle.totalTime > 0.0) {
						this.advanceParticle(particle,this.mFrameTime);
						++this.mNumParticles;
					}
				}
				this.mFrameTime -= timeBetweenParticles;
			}
			if(this.mEmissionTime != Infinity) {
				this.mEmissionTime = Math.max(0.0,this.mEmissionTime - passedTime);
			}
			if(this.mNumParticles == 0 && this.mEmissionTime == 0) {
				this.dispatchEventWith("complete");
			}
		}
		var vertexID = 0;
		var color;
		var alpha;
		var rotation;
		var x;
		var y;
		var xOffset;
		var yOffset;
		var textureWidth = this.mTexture.get_width();
		var textureHeight = this.mTexture.get_height();
		var _g = 0;
		var _g1 = this.mNumParticles;
		while(_g < _g1) {
			var i = _g++;
			vertexID = i << 2;
			particle = this.mParticles.data.get(i);
			color = particle.color;
			alpha = particle.alpha;
			rotation = particle.rotation;
			x = particle.x;
			y = particle.y;
			xOffset = (textureWidth * particle.scale | 0) >> 1;
			yOffset = (textureHeight * particle.scale | 0) >> 1;
			this.mVertexData.setColorAndAlpha(vertexID,color,alpha);
			this.mVertexData.setColorAndAlpha(vertexID + 1,color,alpha);
			this.mVertexData.setColorAndAlpha(vertexID + 2,color,alpha);
			this.mVertexData.setColorAndAlpha(vertexID + 3,color,alpha);
			if(rotation != 0) {
				var cos = Math.cos(rotation);
				var sin = Math.sin(rotation);
				var cosX = cos * xOffset;
				var cosY = cos * yOffset;
				var sinX = sin * xOffset;
				var sinY = sin * yOffset;
				this.mVertexData.setPosition(vertexID,x - cosX + sinY,y - sinX - cosY);
				this.mVertexData.setPosition(vertexID + 1,x + cosX + sinY,y + sinX - cosY);
				this.mVertexData.setPosition(vertexID + 2,x - cosX - sinY,y - sinX + cosY);
				this.mVertexData.setPosition(vertexID + 3,x + cosX - sinY,y + sinX + cosY);
			} else {
				this.mVertexData.setPosition(vertexID,x - xOffset,y - yOffset);
				this.mVertexData.setPosition(vertexID + 1,x + xOffset,y - yOffset);
				this.mVertexData.setPosition(vertexID + 2,x - xOffset,y + yOffset);
				this.mVertexData.setPosition(vertexID + 3,x + xOffset,y + yOffset);
			}
		}
	}
	,render: function(support,alpha) {
		if(this.mNumParticles == 0) {
			return;
		}
		support.finishQuadBatch();
		support.raiseDrawCount();
		alpha *= this.get_alpha();
		var context = starling_core_Starling.get_current().get_context();
		var pma = this.get_texture().get_premultipliedAlpha();
		var this1 = starling_extensions_ParticleSystem.sRenderAlpha;
		var this2 = starling_extensions_ParticleSystem.sRenderAlpha;
		var value = starling_extensions_ParticleSystem.sRenderAlpha.data.set(2,pma ? alpha : 1.0);
		var value1 = this2.data.set(1,value);
		this1.data.set(0,value1);
		starling_extensions_ParticleSystem.sRenderAlpha.data.set(3,alpha);
		if(context == null) {
			throw new js__$Boot_HaxeError(new starling_errors_MissingContextError());
		}
		this.mVertexBuffer.uploadFromTypedArray(this.mVertexData.get_rawData());
		this.mIndexBuffer.uploadFromVector(this.mIndices,0,this.mNumParticles * 6);
		context.setBlendFactors(openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.fromString(this.mBlendFactorSource),openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.fromString(this.mBlendFactorDestination));
		context.setTextureAt(0,this.mTexture.get_base());
		context.setProgram(this.mProgram);
		context.setProgramConstantsFromMatrix(1,0,support.get_mvpMatrix3D(),true);
		context.setProgramConstantsFromVector(1,4,starling_extensions_ParticleSystem.sRenderAlpha,1);
		context.setVertexBufferAt(0,this.mVertexBuffer,0,2);
		context.setVertexBufferAt(1,this.mVertexBuffer,2,4);
		context.setVertexBufferAt(2,this.mVertexBuffer,6,2);
		context.drawTriangles(this.mIndexBuffer,0,this.mNumParticles * 2);
		context.setTextureAt(0,null);
		context.setVertexBufferAt(0,null);
		context.setVertexBufferAt(1,null);
		context.setVertexBufferAt(2,null);
		starling_core_Starling.get_current().removeCurrentProgram();
	}
	,populate: function(count) {
		count = Math.min(count,this.mMaxCapacity - this.mNumParticles) | 0;
		if(this.mNumParticles + count > this.get_capacity()) {
			this.raiseCapacity(this.mNumParticles + count - this.get_capacity());
		}
		var p;
		var _g = 0;
		var _g1 = count;
		while(_g < _g1) {
			var i = _g++;
			p = this.mParticles.data.get(this.mNumParticles + i);
			this.initParticle(p);
			this.advanceParticle(p,Math.random() * p.totalTime);
		}
		this.mNumParticles += count;
	}
	,createProgram: function() {
		var mipmap = this.mTexture.get_mipMapping();
		var textureFormat = openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.toString(this.mTexture.get_format());
		var programName = "ext.ParticleSystem." + textureFormat + "/" + this.mSmoothing.charAt(0) + (mipmap ? "+mm" : "");
		this.mProgram = starling_core_Starling.get_current().getProgram(programName);
		if(this.mProgram == null) {
			var textureOptions = starling_core_RenderSupport.getTextureLookupFlags(openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.fromString(textureFormat),mipmap,false,this.mSmoothing);
			var vertexProgramCode = "m44 op, va0, vc0 \n" + "mul v0, va1, vc4 \n" + "mov v1, va2      \n";
			var fragmentProgramCode = "tex ft1, v1, fs0 " + textureOptions + "\n" + "mul oc, ft1, v0";
			var assembler = new openfl_utils_AGALMiniAssembler();
			starling_core_Starling.get_current().registerProgram(programName,assembler.assemble(openfl_display3D__$Context3DProgramType_Context3DProgramType_$Impl_$.toString(1),vertexProgramCode),assembler.assemble(openfl_display3D__$Context3DProgramType_Context3DProgramType_$Impl_$.toString(0),fragmentProgramCode));
			this.mProgram = starling_core_Starling.get_current().getProgram(programName);
		}
	}
	,get_isEmitting: function() {
		if(this.mEmissionTime > 0) {
			return this.mEmissionRate > 0;
		} else {
			return false;
		}
	}
	,get_capacity: function() {
		return this.mVertexData.get_numVertices() / 4 | 0;
	}
	,get_numParticles: function() {
		return this.mNumParticles;
	}
	,get_maxCapacity: function() {
		return this.mMaxCapacity;
	}
	,set_maxCapacity: function(value) {
		this.mMaxCapacity = Math.min(16383,value) | 0;
		return value;
	}
	,get_emissionRate: function() {
		return this.mEmissionRate;
	}
	,set_emissionRate: function(value) {
		return this.mEmissionRate = value;
	}
	,get_emitterX: function() {
		return this.mEmitterX;
	}
	,set_emitterX: function(value) {
		return this.mEmitterX = value;
	}
	,get_emitterY: function() {
		return this.mEmitterY;
	}
	,set_emitterY: function(value) {
		return this.mEmitterY = value;
	}
	,get_blendFactorSource: function() {
		return this.mBlendFactorSource;
	}
	,set_blendFactorSource: function(value) {
		this.mBlendFactorSource = value;
		this.updatePremultipliedAlpha();
		return value;
	}
	,get_blendFactorDestination: function() {
		return this.mBlendFactorDestination;
	}
	,set_blendFactorDestination: function(value) {
		this.mBlendFactorDestination = value;
		this.updatePremultipliedAlpha();
		return value;
	}
	,get_texture: function() {
		return this.mTexture;
	}
	,set_texture: function(value) {
		if(value == null) {
			throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Texture cannot be null"));
		}
		this.mTexture = value;
		this.createProgram();
		this.updatePremultipliedAlpha();
		var i = this.mVertexData.get_numVertices() - 4 | 0;
		while(i >= 0) {
			this.mVertexData.setTexCoords(i,0.0,0.0);
			this.mVertexData.setTexCoords(i + 1,1.0,0.0);
			this.mVertexData.setTexCoords(i + 2,0.0,1.0);
			this.mVertexData.setTexCoords(i + 3,1.0,1.0);
			this.mTexture.adjustVertexData(this.mVertexData,i,4);
			i -= 4;
		}
		return value;
	}
	,get_smoothing: function() {
		return this.mSmoothing;
	}
	,set_smoothing: function(value) {
		return this.mSmoothing = value;
	}
	,__class__: starling_extensions_ParticleSystem
	,__properties__: $extend(starling_display_DisplayObject.prototype.__properties__,{set_smoothing:"set_smoothing",get_smoothing:"get_smoothing",set_texture:"set_texture",get_texture:"get_texture",set_blendFactorDestination:"set_blendFactorDestination",get_blendFactorDestination:"get_blendFactorDestination",set_blendFactorSource:"set_blendFactorSource",get_blendFactorSource:"get_blendFactorSource",set_emitterY:"set_emitterY",get_emitterY:"get_emitterY",set_emitterX:"set_emitterX",get_emitterX:"get_emitterX",set_emissionRate:"set_emissionRate",get_emissionRate:"get_emissionRate",set_maxCapacity:"set_maxCapacity",get_maxCapacity:"get_maxCapacity",get_numParticles:"get_numParticles",get_capacity:"get_capacity",get_isEmitting:"get_isEmitting"})
});
var starling_extensions_PDParticleSystem = function(config,texture) {
	this.parseConfig(config);
	var emissionRate = this.mMaxNumParticles / this.mLifespan;
	starling_extensions_ParticleSystem.call(this,texture,emissionRate,this.mMaxNumParticles,this.mMaxNumParticles,this.mBlendFactorSource,this.mBlendFactorDestination);
};
$hxClasses["starling.extensions.PDParticleSystem"] = starling_extensions_PDParticleSystem;
starling_extensions_PDParticleSystem.__name__ = "starling.extensions.PDParticleSystem";
starling_extensions_PDParticleSystem.__super__ = starling_extensions_ParticleSystem;
starling_extensions_PDParticleSystem.prototype = $extend(starling_extensions_ParticleSystem.prototype,{
	mEmitterType: null
	,mEmitterXVariance: null
	,mEmitterYVariance: null
	,mMaxNumParticles: null
	,mLifespan: null
	,mLifespanVariance: null
	,mStartSize: null
	,mStartSizeVariance: null
	,mEndSize: null
	,mEndSizeVariance: null
	,mEmitAngle: null
	,mEmitAngleVariance: null
	,mStartRotation: null
	,mStartRotationVariance: null
	,mEndRotation: null
	,mEndRotationVariance: null
	,mSpeed: null
	,mSpeedVariance: null
	,mGravityX: null
	,mGravityY: null
	,mRadialAcceleration: null
	,mRadialAccelerationVariance: null
	,mTangentialAcceleration: null
	,mTangentialAccelerationVariance: null
	,mMaxRadius: null
	,mMaxRadiusVariance: null
	,mMinRadius: null
	,mMinRadiusVariance: null
	,mRotatePerSecond: null
	,mRotatePerSecondVariance: null
	,mStartColor: null
	,mStartColorVariance: null
	,mEndColor: null
	,mEndColorVariance: null
	,createParticle: function() {
		return new starling_extensions_PDParticle();
	}
	,initParticle: function(aParticle) {
		var particle = aParticle;
		var lifespan = this.mLifespan + this.mLifespanVariance * (Math.random() * 2.0 - 1.0);
		particle.currentTime = 0.0;
		particle.totalTime = lifespan > 0.0 ? lifespan : 0.0;
		if(lifespan <= 0.0) {
			return;
		}
		particle.x = this.mEmitterX + this.mEmitterXVariance * (Math.random() * 2.0 - 1.0);
		particle.y = this.mEmitterY + this.mEmitterYVariance * (Math.random() * 2.0 - 1.0);
		particle.startX = this.mEmitterX;
		particle.startY = this.mEmitterY;
		var angle = this.mEmitAngle + this.mEmitAngleVariance * (Math.random() * 2.0 - 1.0);
		var speed = this.mSpeed + this.mSpeedVariance * (Math.random() * 2.0 - 1.0);
		particle.velocityX = speed * Math.cos(angle);
		particle.velocityY = speed * Math.sin(angle);
		var startRadius = this.mMaxRadius + this.mMaxRadiusVariance * (Math.random() * 2.0 - 1.0);
		var endRadius = this.mMinRadius + this.mMinRadiusVariance * (Math.random() * 2.0 - 1.0);
		particle.emitRadius = startRadius;
		particle.emitRadiusDelta = (endRadius - startRadius) / lifespan;
		particle.emitRotation = this.mEmitAngle + this.mEmitAngleVariance * (Math.random() * 2.0 - 1.0);
		particle.emitRotationDelta = this.mRotatePerSecond + this.mRotatePerSecondVariance * (Math.random() * 2.0 - 1.0);
		particle.radialAcceleration = this.mRadialAcceleration + this.mRadialAccelerationVariance * (Math.random() * 2.0 - 1.0);
		particle.tangentialAcceleration = this.mTangentialAcceleration + this.mTangentialAccelerationVariance * (Math.random() * 2.0 - 1.0);
		var startSize = this.mStartSize + this.mStartSizeVariance * (Math.random() * 2.0 - 1.0);
		var endSize = this.mEndSize + this.mEndSizeVariance * (Math.random() * 2.0 - 1.0);
		if(startSize < 0.1) {
			startSize = 0.1;
		}
		if(endSize < 0.1) {
			endSize = 0.1;
		}
		particle.scale = startSize / this.get_texture().get_width();
		particle.scaleDelta = (endSize - startSize) / lifespan / this.get_texture().get_width();
		var startColor = particle.colorArgb;
		var colorDelta = particle.colorArgbDelta;
		startColor.red = this.mStartColor.red;
		startColor.green = this.mStartColor.green;
		startColor.blue = this.mStartColor.blue;
		startColor.alpha = this.mStartColor.alpha;
		if(this.mStartColorVariance.red != 0) {
			startColor.red += this.mStartColorVariance.red * (Math.random() * 2.0 - 1.0);
		}
		if(this.mStartColorVariance.green != 0) {
			startColor.green += this.mStartColorVariance.green * (Math.random() * 2.0 - 1.0);
		}
		if(this.mStartColorVariance.blue != 0) {
			startColor.blue += this.mStartColorVariance.blue * (Math.random() * 2.0 - 1.0);
		}
		if(this.mStartColorVariance.alpha != 0) {
			startColor.alpha += this.mStartColorVariance.alpha * (Math.random() * 2.0 - 1.0);
		}
		var endColorRed = this.mEndColor.red;
		var endColorGreen = this.mEndColor.green;
		var endColorBlue = this.mEndColor.blue;
		var endColorAlpha = this.mEndColor.alpha;
		if(this.mEndColorVariance.red != 0) {
			endColorRed += this.mEndColorVariance.red * (Math.random() * 2.0 - 1.0);
		}
		if(this.mEndColorVariance.green != 0) {
			endColorGreen += this.mEndColorVariance.green * (Math.random() * 2.0 - 1.0);
		}
		if(this.mEndColorVariance.blue != 0) {
			endColorBlue += this.mEndColorVariance.blue * (Math.random() * 2.0 - 1.0);
		}
		if(this.mEndColorVariance.alpha != 0) {
			endColorAlpha += this.mEndColorVariance.alpha * (Math.random() * 2.0 - 1.0);
		}
		colorDelta.red = (endColorRed - startColor.red) / lifespan;
		colorDelta.green = (endColorGreen - startColor.green) / lifespan;
		colorDelta.blue = (endColorBlue - startColor.blue) / lifespan;
		colorDelta.alpha = (endColorAlpha - startColor.alpha) / lifespan;
		var startRotation = this.mStartRotation + this.mStartRotationVariance * (Math.random() * 2.0 - 1.0);
		var endRotation = this.mEndRotation + this.mEndRotationVariance * (Math.random() * 2.0 - 1.0);
		particle.rotation = startRotation;
		particle.rotationDelta = (endRotation - startRotation) / lifespan;
	}
	,advanceParticle: function(aParticle,passedTime) {
		var particle = aParticle;
		var restTime = particle.totalTime - particle.currentTime;
		passedTime = restTime > passedTime ? passedTime : restTime;
		particle.currentTime += passedTime;
		if(this.mEmitterType == 1) {
			particle.emitRotation += particle.emitRotationDelta * passedTime;
			particle.emitRadius += particle.emitRadiusDelta * passedTime;
			particle.x = this.mEmitterX - Math.cos(particle.emitRotation) * particle.emitRadius;
			particle.y = this.mEmitterY - Math.sin(particle.emitRotation) * particle.emitRadius;
		} else {
			var distanceX = particle.x - particle.startX;
			var distanceY = particle.y - particle.startY;
			var distanceScalar = Math.sqrt(distanceX * distanceX + distanceY * distanceY);
			if(distanceScalar < 0.01) {
				distanceScalar = 0.01;
			}
			var radialX = distanceX / distanceScalar;
			var radialY = distanceY / distanceScalar;
			var tangentialX = radialX;
			var tangentialY = radialY;
			radialX *= particle.radialAcceleration;
			radialY *= particle.radialAcceleration;
			var newY = tangentialX;
			tangentialX = -tangentialY * particle.tangentialAcceleration;
			tangentialY = newY * particle.tangentialAcceleration;
			particle.velocityX += passedTime * (this.mGravityX + radialX + tangentialX);
			particle.velocityY += passedTime * (this.mGravityY + radialY + tangentialY);
			particle.x += particle.velocityX * passedTime;
			particle.y += particle.velocityY * passedTime;
		}
		particle.scale += particle.scaleDelta * passedTime;
		particle.rotation += particle.rotationDelta * passedTime;
		particle.colorArgb.red += particle.colorArgbDelta.red * passedTime;
		particle.colorArgb.green += particle.colorArgbDelta.green * passedTime;
		particle.colorArgb.blue += particle.colorArgbDelta.blue * passedTime;
		particle.colorArgb.alpha += particle.colorArgbDelta.alpha * passedTime;
		particle.color = particle.colorArgb.toRgb();
		particle.alpha = particle.colorArgb.alpha;
	}
	,updateEmissionRate: function() {
		this.set_emissionRate(this.mMaxNumParticles / this.mLifespan);
	}
	,parseConfig: function(config) {
		var x = Xml.parse(config).firstElement();
		if(x.nodeType != Xml.Document && x.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Invalid nodeType " + _$Xml_XmlType_$Impl_$.toString(x.nodeType));
		}
		var this1 = x;
		var xml = this1;
		var config1 = xml;
		this.mEmitterXVariance = parseFloat(haxe_xml__$Access_AttribAccess_$Impl_$.resolve(haxe_xml__$Access_NodeAccess_$Impl_$.resolve(config1,"sourcePositionVariance"),"x"));
		this.mEmitterYVariance = parseFloat(haxe_xml__$Access_AttribAccess_$Impl_$.resolve(haxe_xml__$Access_NodeAccess_$Impl_$.resolve(config1,"sourcePositionVariance"),"y"));
		this.mGravityX = parseFloat(haxe_xml__$Access_AttribAccess_$Impl_$.resolve(haxe_xml__$Access_NodeAccess_$Impl_$.resolve(config1,"gravity"),"x"));
		this.mGravityY = parseFloat(haxe_xml__$Access_AttribAccess_$Impl_$.resolve(haxe_xml__$Access_NodeAccess_$Impl_$.resolve(config1,"gravity"),"y"));
		this.mEmitterType = this.getIntValue(haxe_xml__$Access_NodeAccess_$Impl_$.resolve(config1,"emitterType"));
		this.mMaxNumParticles = this.getIntValue(haxe_xml__$Access_NodeAccess_$Impl_$.resolve(config1,"maxParticles"));
		this.mLifespanVariance = this.getFloatValue(haxe_xml__$Access_NodeAccess_$Impl_$.resolve(config1,"particleLifespanVariance"));
		this.mStartSize = this.getFloatValue(haxe_xml__$Access_NodeAccess_$Impl_$.resolve(config1,"startParticleSize"));
		this.mStartSizeVariance = this.getFloatValue(haxe_xml__$Access_NodeAccess_$Impl_$.resolve(config1,"startParticleSizeVariance"));
		this.mEndSize = this.getFloatValue(haxe_xml__$Access_NodeAccess_$Impl_$.resolve(config1,"finishParticleSize"));
		this.mEmitAngle = starling_utils_MathUtil.deg2rad(this.getFloatValue(haxe_xml__$Access_NodeAccess_$Impl_$.resolve(config1,"angle")));
		this.mEmitAngleVariance = starling_utils_MathUtil.deg2rad(this.getFloatValue(haxe_xml__$Access_NodeAccess_$Impl_$.resolve(config1,"angleVariance")));
		this.mStartRotation = starling_utils_MathUtil.deg2rad(this.getFloatValue(haxe_xml__$Access_NodeAccess_$Impl_$.resolve(config1,"rotationStart")));
		this.mStartRotationVariance = starling_utils_MathUtil.deg2rad(this.getFloatValue(haxe_xml__$Access_NodeAccess_$Impl_$.resolve(config1,"rotationStartVariance")));
		this.mEndRotation = starling_utils_MathUtil.deg2rad(this.getFloatValue(haxe_xml__$Access_NodeAccess_$Impl_$.resolve(config1,"rotationEnd")));
		this.mEndRotationVariance = starling_utils_MathUtil.deg2rad(this.getFloatValue(haxe_xml__$Access_NodeAccess_$Impl_$.resolve(config1,"rotationEndVariance")));
		this.mSpeed = this.getFloatValue(haxe_xml__$Access_NodeAccess_$Impl_$.resolve(config1,"speed"));
		this.mSpeedVariance = this.getFloatValue(haxe_xml__$Access_NodeAccess_$Impl_$.resolve(config1,"speedVariance"));
		this.mRadialAcceleration = this.getFloatValue(haxe_xml__$Access_NodeAccess_$Impl_$.resolve(config1,"radialAcceleration"));
		this.mRadialAccelerationVariance = this.getFloatValue(haxe_xml__$Access_NodeAccess_$Impl_$.resolve(config1,"radialAccelVariance"));
		this.mTangentialAcceleration = this.getFloatValue(haxe_xml__$Access_NodeAccess_$Impl_$.resolve(config1,"tangentialAcceleration"));
		this.mTangentialAccelerationVariance = this.getFloatValue(haxe_xml__$Access_NodeAccess_$Impl_$.resolve(config1,"tangentialAccelVariance"));
		this.mMaxRadius = this.getFloatValue(haxe_xml__$Access_NodeAccess_$Impl_$.resolve(config1,"maxRadius"));
		this.mMaxRadiusVariance = this.getFloatValue(haxe_xml__$Access_NodeAccess_$Impl_$.resolve(config1,"maxRadiusVariance"));
		this.mMinRadius = this.getFloatValue(haxe_xml__$Access_NodeAccess_$Impl_$.resolve(config1,"minRadius"));
		this.mRotatePerSecond = starling_utils_MathUtil.deg2rad(this.getFloatValue(haxe_xml__$Access_NodeAccess_$Impl_$.resolve(config1,"rotatePerSecond")));
		this.mRotatePerSecondVariance = starling_utils_MathUtil.deg2rad(this.getFloatValue(haxe_xml__$Access_NodeAccess_$Impl_$.resolve(config1,"rotatePerSecondVariance")));
		this.mStartColor = this.getColor(haxe_xml__$Access_NodeAccess_$Impl_$.resolve(config1,"startColor"));
		this.mStartColorVariance = this.getColor(haxe_xml__$Access_NodeAccess_$Impl_$.resolve(config1,"startColorVariance"));
		this.mEndColor = this.getColor(haxe_xml__$Access_NodeAccess_$Impl_$.resolve(config1,"finishColor"));
		this.mEndColorVariance = this.getColor(haxe_xml__$Access_NodeAccess_$Impl_$.resolve(config1,"finishColorVariance"));
		this.mBlendFactorSource = this.getBlendFunc(haxe_xml__$Access_NodeAccess_$Impl_$.resolve(config1,"blendFuncSource"));
		this.mBlendFactorDestination = this.getBlendFunc(haxe_xml__$Access_NodeAccess_$Impl_$.resolve(config1,"blendFuncDestination"));
		if(haxe_xml__$Access_HasNodeAccess_$Impl_$.resolve(xml,"particleLifeSpan")) {
			this.mLifespan = Math.max(0.01,this.getFloatValue(haxe_xml__$Access_NodeAccess_$Impl_$.resolve(config1,"particleLifeSpan")));
		} else if(haxe_xml__$Access_HasNodeAccess_$Impl_$.resolve(xml,"particleLifespan")) {
			this.mLifespan = Math.max(0.01,this.getFloatValue(haxe_xml__$Access_NodeAccess_$Impl_$.resolve(config1,"particleLifespan")));
		}
		if(haxe_xml__$Access_HasNodeAccess_$Impl_$.resolve(xml,"FinishParticleSizeVariance")) {
			this.mEndSizeVariance = this.getFloatValue(haxe_xml__$Access_NodeAccess_$Impl_$.resolve(config1,"FinishParticleSizeVariance"));
		} else if(haxe_xml__$Access_HasNodeAccess_$Impl_$.resolve(xml,"finishParticleSizeVariance")) {
			this.mEndSizeVariance = this.getFloatValue(haxe_xml__$Access_NodeAccess_$Impl_$.resolve(config1,"finishParticleSizeVariance"));
		}
		if(haxe_xml__$Access_HasNodeAccess_$Impl_$.resolve(xml,"minRadiusVariance")) {
			this.mMinRadiusVariance = this.getFloatValue(haxe_xml__$Access_NodeAccess_$Impl_$.resolve(config1,"minRadiusVariance"));
		} else {
			this.mMinRadiusVariance = 0.0;
		}
	}
	,getIntValue: function(element) {
		return Std.parseInt(haxe_xml__$Access_AttribAccess_$Impl_$.resolve(element,"value"));
	}
	,getFloatValue: function(element) {
		return parseFloat(haxe_xml__$Access_AttribAccess_$Impl_$.resolve(element,"value"));
	}
	,getColor: function(element) {
		var color = new starling_extensions_ColorArgb();
		color.red = parseFloat(haxe_xml__$Access_AttribAccess_$Impl_$.resolve(element,"red"));
		color.green = parseFloat(haxe_xml__$Access_AttribAccess_$Impl_$.resolve(element,"green"));
		color.blue = parseFloat(haxe_xml__$Access_AttribAccess_$Impl_$.resolve(element,"blue"));
		color.alpha = parseFloat(haxe_xml__$Access_AttribAccess_$Impl_$.resolve(element,"alpha"));
		return color;
	}
	,getBlendFunc: function(element) {
		var value = this.getIntValue(element);
		switch(value) {
		case 0:
			return openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.toString(9);
		case 1:
			return openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.toString(2);
		case 768:
			return openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.toString(8);
		case 769:
			return openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.toString(6);
		case 770:
			return openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.toString(7);
		case 771:
			return openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.toString(5);
		case 772:
			return openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.toString(0);
		case 773:
			return openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.toString(3);
		case 774:
			return openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.toString(1);
		case 775:
			return openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.toString(4);
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("unsupported blending function: " + value));
		}
	}
	,get_emitterType: function() {
		return this.mEmitterType;
	}
	,set_emitterType: function(value) {
		return this.mEmitterType = value;
	}
	,get_emitterXVariance: function() {
		return this.mEmitterXVariance;
	}
	,set_emitterXVariance: function(value) {
		return this.mEmitterXVariance = value;
	}
	,get_emitterYVariance: function() {
		return this.mEmitterYVariance;
	}
	,set_emitterYVariance: function(value) {
		return this.mEmitterYVariance = value;
	}
	,get_maxNumParticles: function() {
		return this.mMaxNumParticles;
	}
	,set_maxNumParticles: function(value) {
		this.set_maxCapacity(value);
		this.mMaxNumParticles = this.get_maxCapacity();
		this.updateEmissionRate();
		return value;
	}
	,get_lifespan: function() {
		return this.mLifespan;
	}
	,set_lifespan: function(value) {
		this.mLifespan = Math.max(0.01,value);
		this.updateEmissionRate();
		return value;
	}
	,get_lifespanVariance: function() {
		return this.mLifespanVariance;
	}
	,set_lifespanVariance: function(value) {
		return this.mLifespanVariance = value;
	}
	,get_startSize: function() {
		return this.mStartSize;
	}
	,set_startSize: function(value) {
		return this.mStartSize = value;
	}
	,get_startSizeVariance: function() {
		return this.mStartSizeVariance;
	}
	,set_startSizeVariance: function(value) {
		return this.mStartSizeVariance = value;
	}
	,get_endSize: function() {
		return this.mEndSize;
	}
	,set_endSize: function(value) {
		return this.mEndSize = value;
	}
	,get_endSizeVariance: function() {
		return this.mEndSizeVariance;
	}
	,set_endSizeVariance: function(value) {
		return this.mEndSizeVariance = value;
	}
	,get_emitAngle: function() {
		return this.mEmitAngle;
	}
	,set_emitAngle: function(value) {
		return this.mEmitAngle = value;
	}
	,get_emitAngleVariance: function() {
		return this.mEmitAngleVariance;
	}
	,set_emitAngleVariance: function(value) {
		return this.mEmitAngleVariance = value;
	}
	,get_startRotation: function() {
		return this.mStartRotation;
	}
	,set_startRotation: function(value) {
		return this.mStartRotation = value;
	}
	,get_startRotationVariance: function() {
		return this.mStartRotationVariance;
	}
	,set_startRotationVariance: function(value) {
		return this.mStartRotationVariance = value;
	}
	,get_endRotation: function() {
		return this.mEndRotation;
	}
	,set_endRotation: function(value) {
		return this.mEndRotation = value;
	}
	,get_endRotationVariance: function() {
		return this.mEndRotationVariance;
	}
	,set_endRotationVariance: function(value) {
		return this.mEndRotationVariance = value;
	}
	,get_speed: function() {
		return this.mSpeed;
	}
	,set_speed: function(value) {
		return this.mSpeed = value;
	}
	,get_speedVariance: function() {
		return this.mSpeedVariance;
	}
	,set_speedVariance: function(value) {
		return this.mSpeedVariance = value;
	}
	,get_gravityX: function() {
		return this.mGravityX;
	}
	,set_gravityX: function(value) {
		return this.mGravityX = value;
	}
	,get_gravityY: function() {
		return this.mGravityY;
	}
	,set_gravityY: function(value) {
		return this.mGravityY = value;
	}
	,get_radialAcceleration: function() {
		return this.mRadialAcceleration;
	}
	,set_radialAcceleration: function(value) {
		return this.mRadialAcceleration = value;
	}
	,get_radialAccelerationVariance: function() {
		return this.mRadialAccelerationVariance;
	}
	,set_radialAccelerationVariance: function(value) {
		return this.mRadialAccelerationVariance = value;
	}
	,get_tangentialAcceleration: function() {
		return this.mTangentialAcceleration;
	}
	,set_tangentialAcceleration: function(value) {
		return this.mTangentialAcceleration = value;
	}
	,get_tangentialAccelerationVariance: function() {
		return this.mTangentialAccelerationVariance;
	}
	,set_tangentialAccelerationVariance: function(value) {
		return this.mTangentialAccelerationVariance = value;
	}
	,get_maxRadius: function() {
		return this.mMaxRadius;
	}
	,set_maxRadius: function(value) {
		return this.mMaxRadius = value;
	}
	,get_maxRadiusVariance: function() {
		return this.mMaxRadiusVariance;
	}
	,set_maxRadiusVariance: function(value) {
		return this.mMaxRadiusVariance = value;
	}
	,get_minRadius: function() {
		return this.mMinRadius;
	}
	,set_minRadius: function(value) {
		return this.mMinRadius = value;
	}
	,get_minRadiusVariance: function() {
		return this.mMinRadiusVariance;
	}
	,set_minRadiusVariance: function(value) {
		return this.mMinRadiusVariance = value;
	}
	,get_rotatePerSecond: function() {
		return this.mRotatePerSecond;
	}
	,set_rotatePerSecond: function(value) {
		return this.mRotatePerSecond = value;
	}
	,get_rotatePerSecondVariance: function() {
		return this.mRotatePerSecondVariance;
	}
	,set_rotatePerSecondVariance: function(value) {
		return this.mRotatePerSecondVariance = value;
	}
	,get_startColor: function() {
		return this.mStartColor;
	}
	,set_startColor: function(value) {
		return this.mStartColor = value;
	}
	,get_startColorVariance: function() {
		return this.mStartColorVariance;
	}
	,set_startColorVariance: function(value) {
		return this.mStartColorVariance = value;
	}
	,get_endColor: function() {
		return this.mEndColor;
	}
	,set_endColor: function(value) {
		return this.mEndColor = value;
	}
	,get_endColorVariance: function() {
		return this.mEndColorVariance;
	}
	,set_endColorVariance: function(value) {
		return this.mEndColorVariance = value;
	}
	,__class__: starling_extensions_PDParticleSystem
	,__properties__: $extend(starling_extensions_ParticleSystem.prototype.__properties__,{set_endColorVariance:"set_endColorVariance",get_endColorVariance:"get_endColorVariance",set_endColor:"set_endColor",get_endColor:"get_endColor",set_startColorVariance:"set_startColorVariance",get_startColorVariance:"get_startColorVariance",set_startColor:"set_startColor",get_startColor:"get_startColor",set_rotatePerSecondVariance:"set_rotatePerSecondVariance",get_rotatePerSecondVariance:"get_rotatePerSecondVariance",set_rotatePerSecond:"set_rotatePerSecond",get_rotatePerSecond:"get_rotatePerSecond",set_minRadiusVariance:"set_minRadiusVariance",get_minRadiusVariance:"get_minRadiusVariance",set_minRadius:"set_minRadius",get_minRadius:"get_minRadius",set_maxRadiusVariance:"set_maxRadiusVariance",get_maxRadiusVariance:"get_maxRadiusVariance",set_maxRadius:"set_maxRadius",get_maxRadius:"get_maxRadius",set_tangentialAccelerationVariance:"set_tangentialAccelerationVariance",get_tangentialAccelerationVariance:"get_tangentialAccelerationVariance",set_tangentialAcceleration:"set_tangentialAcceleration",get_tangentialAcceleration:"get_tangentialAcceleration",set_radialAccelerationVariance:"set_radialAccelerationVariance",get_radialAccelerationVariance:"get_radialAccelerationVariance",set_radialAcceleration:"set_radialAcceleration",get_radialAcceleration:"get_radialAcceleration",set_gravityY:"set_gravityY",get_gravityY:"get_gravityY",set_gravityX:"set_gravityX",get_gravityX:"get_gravityX",set_speedVariance:"set_speedVariance",get_speedVariance:"get_speedVariance",set_speed:"set_speed",get_speed:"get_speed",set_endRotationVariance:"set_endRotationVariance",get_endRotationVariance:"get_endRotationVariance",set_endRotation:"set_endRotation",get_endRotation:"get_endRotation",set_startRotationVariance:"set_startRotationVariance",get_startRotationVariance:"get_startRotationVariance",set_startRotation:"set_startRotation",get_startRotation:"get_startRotation",set_emitAngleVariance:"set_emitAngleVariance",get_emitAngleVariance:"get_emitAngleVariance",set_emitAngle:"set_emitAngle",get_emitAngle:"get_emitAngle",set_endSizeVariance:"set_endSizeVariance",get_endSizeVariance:"get_endSizeVariance",set_endSize:"set_endSize",get_endSize:"get_endSize",set_startSizeVariance:"set_startSizeVariance",get_startSizeVariance:"get_startSizeVariance",set_startSize:"set_startSize",get_startSize:"get_startSize",set_lifespanVariance:"set_lifespanVariance",get_lifespanVariance:"get_lifespanVariance",set_lifespan:"set_lifespan",get_lifespan:"get_lifespan",set_maxNumParticles:"set_maxNumParticles",get_maxNumParticles:"get_maxNumParticles",set_emitterYVariance:"set_emitterYVariance",get_emitterYVariance:"get_emitterYVariance",set_emitterXVariance:"set_emitterXVariance",get_emitterXVariance:"get_emitterXVariance",set_emitterType:"set_emitterType",get_emitterType:"get_emitterType"})
});
var starling_extensions_TextureMask = function(texture,threshold) {
	if(threshold == null) {
		threshold = 0.5;
	}
	starling_display_DisplayObject.call(this);
	this.mTexture = texture;
	this.mThreshold = threshold;
	this.setupVertices();
	this.createBuffers();
	this.registerPrograms();
	starling_core_Starling.get_current().get_stage3D().addEventListener("context3DCreate",$bind(this,this.onContextCreated),false,0,true);
};
$hxClasses["starling.extensions.TextureMask"] = starling_extensions_TextureMask;
starling_extensions_TextureMask.__name__ = "starling.extensions.TextureMask";
starling_extensions_TextureMask.__super__ = starling_display_DisplayObject;
starling_extensions_TextureMask.prototype = $extend(starling_display_DisplayObject.prototype,{
	mTexture: null
	,mVertexData: null
	,mVertexBuffer: null
	,mIndexBuffer: null
	,mThreshold: null
	,dispose: function() {
		starling_core_Starling.get_current().get_stage3D().removeEventListener("context3DCreate",$bind(this,this.onContextCreated));
		if(this.mVertexBuffer != null) {
			if(starling_utils_SystemUtil.get_isApplicationActive()) {
				this.mVertexBuffer.dispose();
			} else {
				starling_utils_SystemUtil.executeWhenApplicationIsActive(($_=this.mVertexBuffer,$bind($_,$_.dispose)),[]);
			}
		}
		if(this.mIndexBuffer != null) {
			if(starling_utils_SystemUtil.get_isApplicationActive()) {
				this.mIndexBuffer.dispose();
			} else {
				starling_utils_SystemUtil.executeWhenApplicationIsActive(($_=this.mIndexBuffer,$bind($_,$_.dispose)),[]);
			}
		}
		starling_display_DisplayObject.prototype.dispose.call(this);
	}
	,onContextCreated: function(event) {
		this.createBuffers();
		this.registerPrograms();
	}
	,setupVertices: function() {
		var frame = this.mTexture.get_frame();
		var width = frame != null ? frame.width : this.mTexture.get_width();
		var height = frame != null ? frame.height : this.mTexture.get_height();
		if(this.mVertexData == null) {
			this.mVertexData = new starling_utils_VertexData(4);
		}
		this.mVertexData.setPremultipliedAlpha(this.mTexture.get_premultipliedAlpha(),false);
		this.mVertexData.setPosition(0,0.0,0.0);
		this.mVertexData.setPosition(1,width,0.0);
		this.mVertexData.setPosition(2,0.0,height);
		this.mVertexData.setPosition(3,width,height);
		this.mVertexData.setTexCoords(0,0.0,0.0);
		this.mVertexData.setTexCoords(1,1.0,0.0);
		this.mVertexData.setTexCoords(2,0.0,1.0);
		this.mVertexData.setTexCoords(3,1.0,1.0);
		this.mTexture.adjustVertexData(this.mVertexData,0,4);
	}
	,createBuffers: function() {
		var context = starling_core_Starling.get_current().get_context();
		if(context == null) {
			throw new js__$Boot_HaxeError(new starling_errors_MissingContextError());
		}
		if(this.mVertexBuffer != null) {
			if(starling_utils_SystemUtil.get_isApplicationActive()) {
				this.mVertexBuffer.dispose();
			} else {
				starling_utils_SystemUtil.executeWhenApplicationIsActive(($_=this.mVertexBuffer,$bind($_,$_.dispose)),[]);
			}
		}
		if(this.mIndexBuffer != null) {
			if(starling_utils_SystemUtil.get_isApplicationActive()) {
				this.mIndexBuffer.dispose();
			} else {
				starling_utils_SystemUtil.executeWhenApplicationIsActive(($_=this.mIndexBuffer,$bind($_,$_.dispose)),[]);
			}
		}
		this.mVertexBuffer = context.createVertexBuffer(this.mVertexData.get_numVertices(),8);
		this.mVertexBuffer.uploadFromTypedArray(this.mVertexData.get_rawData());
		var a = [0,1,2,1,3,2];
		var vector = openfl__$Vector_Vector_$Impl_$.toIntVector(null);
		var _g = 0;
		var _g1 = a.length;
		while(_g < _g1) {
			var i = _g++;
			vector.data.set(i,a[i]);
		}
		var indexData = vector;
		this.mIndexBuffer = context.createIndexBuffer(indexData.data.get_length());
		this.mIndexBuffer.uploadFromVector(indexData,0,indexData.data.get_length());
	}
	,registerPrograms: function() {
		var target = starling_core_Starling.get_current();
		if(target.hasProgram(starling_extensions_TextureMask.PROGRAM_NAME)) {
			return;
		}
		var vertexShader = "m44 op, va0, vc1 \n" + "mov v0, va1      \n" + "mov v1, vc0      \n";
		var fragmentShader = "tex ft1,  v0, fs0 <???> \n" + "sub ft2, ft1, fc0       \n" + "kil ft2.w               \n" + "mul  oc,  v1, ft1       \n";
		fragmentShader = StringTools.replace(fragmentShader,"<???>",starling_core_RenderSupport.getTextureLookupFlags(this.mTexture.get_format(),this.mTexture.get_mipMapping(),this.mTexture.get_repeat()));
		target.registerProgramFromSource(starling_extensions_TextureMask.PROGRAM_NAME,vertexShader,fragmentShader);
	}
	,getBounds: function(targetSpace,resultRect) {
		if(resultRect == null) {
			resultRect = new openfl_geom_Rectangle();
		}
		var transformationMatrix = targetSpace == this ? null : this.getTransformationMatrix(targetSpace,starling_extensions_TextureMask.sHelperMatrix);
		return this.mVertexData.getBounds(transformationMatrix,0,-1,resultRect);
	}
	,render: function(support,parentAlpha) {
		var context = starling_core_Starling.get_current().get_context();
		if(context == null) {
			throw new js__$Boot_HaxeError(new starling_errors_MissingContextError());
		}
		var pma = this.mVertexData.get_premultipliedAlpha();
		var alpha = this.get_alpha() * parentAlpha;
		support.finishQuadBatch();
		support.raiseDrawCount();
		support.applyBlendMode(pma);
		starling_extensions_TextureMask.sThresholdVector.data.set(3,this.mThreshold);
		var this1 = starling_extensions_TextureMask.sRenderAlpha;
		var this2 = starling_extensions_TextureMask.sRenderAlpha;
		var value = starling_extensions_TextureMask.sRenderAlpha.data.set(2,pma ? alpha : 1.0);
		var value1 = this2.data.set(1,value);
		this1.data.set(0,value1);
		starling_extensions_TextureMask.sRenderAlpha.data.set(3,alpha);
		context.setTextureAt(0,this.mTexture.get_base());
		context.setProgram(starling_core_Starling.get_current().getProgram(starling_extensions_TextureMask.PROGRAM_NAME));
		context.setVertexBufferAt(0,this.mVertexBuffer,0,2);
		context.setVertexBufferAt(1,this.mVertexBuffer,6,2);
		context.setProgramConstantsFromVector(1,0,starling_extensions_TextureMask.sRenderAlpha,1);
		context.setProgramConstantsFromMatrix(1,1,support.get_mvpMatrix3D(),true);
		context.setProgramConstantsFromVector(0,0,starling_extensions_TextureMask.sThresholdVector,1);
		context.drawTriangles(this.mIndexBuffer,0,2);
		context.setTextureAt(0,null);
		context.setVertexBufferAt(0,null);
		context.setVertexBufferAt(1,null);
		starling_core_Starling.get_current().removeCurrentProgram();
	}
	,get_texture: function() {
		return this.mTexture;
	}
	,set_texture: function(value) {
		this.mTexture = value;
		this.setupVertices();
		this.createBuffers();
		return this.mTexture;
	}
	,get_threshold: function() {
		return this.mThreshold;
	}
	,set_threshold: function(value) {
		this.mThreshold = value;
		return this.mThreshold;
	}
	,__class__: starling_extensions_TextureMask
	,__properties__: $extend(starling_display_DisplayObject.prototype.__properties__,{set_threshold:"set_threshold",get_threshold:"get_threshold",set_texture:"set_texture",get_texture:"get_texture"})
});
var starling_filters_FragmentFilter = function(numPasses,resolution) {
	if(resolution == null) {
		resolution = 1.0;
	}
	if(numPasses == null) {
		numPasses = 1;
	}
	this.mHelperRect2 = new openfl_geom_Rectangle();
	this.mHelperRect = new openfl_geom_Rectangle();
	this.mHelperMatrix3D = new openfl_geom_Matrix3D();
	this.mHelperMatrix = new openfl_geom_Matrix();
	this.mMvpConstantID = 0;
	this.mBaseTextureID = 0;
	this.mTexCoordsAtID = 1;
	this.mVertexPosAtID = 0;
	if(numPasses < 1) {
		throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("At least one pass is required."));
	}
	this.mNumPasses = numPasses;
	this.mMarginX = this.mMarginY = 0.0;
	this.mOffsetX = this.mOffsetY = 0;
	this.mResolution = resolution;
	this.mPassTextures = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	this.mMode = "replace";
	this.mVertexData = new starling_utils_VertexData(4);
	this.mVertexData.setTexCoords(0,0,0);
	this.mVertexData.setTexCoords(1,1,0);
	this.mVertexData.setTexCoords(2,0,1);
	this.mVertexData.setTexCoords(3,1,1);
	var a = [0,1,2,1,3,2];
	var vector = openfl__$Vector_Vector_$Impl_$.toIntVector(null);
	var _g = 0;
	var _g1 = a.length;
	while(_g < _g1) {
		var i = _g++;
		vector.data.set(i,a[i]);
	}
	this.mIndexData = vector;
	this.mIndexData.data.fixed = true;
	if(starling_core_Starling.get_current().get_contextValid()) {
		this.createPrograms();
	}
	starling_core_Starling.get_current().get_stage3D().addEventListener("context3DCreate",$bind(this,this.onContextCreated),false,0,true);
};
$hxClasses["starling.filters.FragmentFilter"] = starling_filters_FragmentFilter;
starling_filters_FragmentFilter.__name__ = "starling.filters.FragmentFilter";
starling_filters_FragmentFilter.prototype = {
	mVertexPosAtID: null
	,mTexCoordsAtID: null
	,mBaseTextureID: null
	,mMvpConstantID: null
	,mNumPasses: null
	,mPassTextures: null
	,mMode: null
	,mResolution: null
	,mMarginX: null
	,mMarginY: null
	,mOffsetX: null
	,mOffsetY: null
	,mVertexData: null
	,mVertexBuffer: null
	,mIndexData: null
	,mIndexBuffer: null
	,mCacheRequested: null
	,mCache: null
	,mHelperMatrix: null
	,mHelperMatrix3D: null
	,mHelperRect: null
	,mHelperRect2: null
	,dispose: function() {
		starling_core_Starling.get_current().get_stage3D().removeEventListener("context3DCreate",$bind(this,this.onContextCreated));
		if(this.mVertexBuffer != null) {
			this.mVertexBuffer.dispose();
		}
		if(this.mIndexBuffer != null) {
			this.mIndexBuffer.dispose();
		}
		this.disposePassTextures();
		this.disposeCache();
	}
	,onContextCreated: function(event) {
		this.mVertexBuffer = null;
		this.mIndexBuffer = null;
		this.disposePassTextures();
		this.createPrograms();
		if(this.mCache != null) {
			this.cache();
		}
	}
	,render: function(object,support,parentAlpha) {
		if(this.get_mode() == "above") {
			object.render(support,parentAlpha);
		}
		if(this.mCacheRequested) {
			this.mCacheRequested = false;
			this.mCache = this.renderPasses(object,support,1.0,true);
			this.disposePassTextures();
		}
		if(this.mCache != null) {
			this.mCache.render(support,parentAlpha);
		} else {
			this.renderPasses(object,support,parentAlpha,false);
		}
		if(this.get_mode() == "below") {
			object.render(support,parentAlpha);
		}
	}
	,renderPasses: function(object,support,parentAlpha,intoCache) {
		if(intoCache == null) {
			intoCache = false;
		}
		var passTexture;
		var cacheTexture = null;
		var context = starling_core_Starling.get_current().get_context();
		var targetSpace = object.get_stage();
		var stage = starling_core_Starling.get_current().get_stage();
		var scale = starling_core_Starling.get_current().get_contentScaleFactor();
		var projMatrix = this.mHelperMatrix;
		var projMatrix3D = this.mHelperMatrix3D;
		var bounds = this.mHelperRect;
		var boundsPot = this.mHelperRect2;
		if(context == null) {
			throw new js__$Boot_HaxeError(new starling_errors_MissingContextError());
		}
		var intersectWithStage = !intoCache && this.mOffsetX == 0 && this.mOffsetY == 0;
		this.calculateBounds(object,targetSpace,this.mResolution * scale,intersectWithStage,bounds,boundsPot);
		if(bounds.isEmpty()) {
			this.disposePassTextures();
			return null;
		}
		this.updateBuffers(context,boundsPot);
		this.updatePassTextures(boundsPot.width,boundsPot.height,this.mResolution * scale);
		support.finishQuadBatch();
		support.raiseDrawCount(this.mNumPasses);
		support.pushMatrix();
		support.pushMatrix3D();
		support.pushClipRect(boundsPot,false);
		projMatrix.copyFrom(support.get_projectionMatrix());
		projMatrix3D.copyFrom(support.get_projectionMatrix3D());
		var previousRenderTarget = support.get_renderTarget();
		var previousStencilRefValue = support.get_stencilReferenceValue();
		if(previousRenderTarget != null && !starling_utils_SystemUtil.get_supportsRelaxedTargetClearRequirement()) {
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("To nest filters, you need at least Flash Player / AIR version 15."));
		}
		if(intoCache) {
			cacheTexture = starling_textures_Texture.empty(boundsPot.width,boundsPot.height,true,false,true,this.mResolution * scale);
		}
		support.set_renderTarget(this.mPassTextures.data.get(0));
		support.clear();
		support.set_blendMode("normal");
		support.set_stencilReferenceValue(0);
		support.setProjectionMatrix(bounds.x,bounds.y,boundsPot.width,boundsPot.height,stage.get_stageWidth(),stage.get_stageHeight(),stage.get_cameraPosition());
		object.render(support,parentAlpha);
		support.finishQuadBatch();
		starling_core_RenderSupport.setBlendFactors(true);
		support.loadIdentity();
		context.setVertexBufferAt(this.mVertexPosAtID,this.mVertexBuffer,0,2);
		context.setVertexBufferAt(this.mTexCoordsAtID,this.mVertexBuffer,6,2);
		var _g = 0;
		var _g1 = this.mNumPasses;
		while(_g < _g1) {
			var i = _g++;
			if(i < this.mNumPasses - 1) {
				support.set_renderTarget(this.getPassTexture(i + 1));
				support.clear();
			} else if(intoCache) {
				support.set_renderTarget(cacheTexture);
				support.clear();
			} else {
				support.popClipRect();
				support.set_projectionMatrix(projMatrix);
				support.set_projectionMatrix3D(projMatrix3D);
				support.set_renderTarget(previousRenderTarget);
				support.translateMatrix(this.mOffsetX,this.mOffsetY);
				support.set_stencilReferenceValue(previousStencilRefValue);
				support.set_blendMode(object.get_blendMode());
				support.applyBlendMode(true);
			}
			passTexture = this.getPassTexture(i);
			context.setProgramConstantsFromMatrix(1,this.mMvpConstantID,support.get_mvpMatrix3D(),true);
			context.setTextureAt(this.mBaseTextureID,passTexture.get_base());
			this.activate(i,context,passTexture);
			context.drawTriangles(this.mIndexBuffer,0,2);
			this.deactivate(i,context,passTexture);
		}
		context.setVertexBufferAt(this.mVertexPosAtID,null);
		context.setVertexBufferAt(this.mTexCoordsAtID,null);
		context.setTextureAt(this.mBaseTextureID,null);
		starling_core_Starling.get_current().removeCurrentProgram();
		support.popMatrix();
		support.popMatrix3D();
		if(intoCache) {
			support.popClipRect();
			support.set_projectionMatrix(projMatrix);
			support.set_projectionMatrix3D(projMatrix3D);
			support.set_renderTarget(previousRenderTarget);
			var image = new starling_display_Image(cacheTexture);
			object.getTransformationMatrix(targetSpace,starling_filters_FragmentFilter.sTransformationMatrix).invert();
			starling_utils_MatrixUtil.prependTranslation(starling_filters_FragmentFilter.sTransformationMatrix,bounds.x + this.mOffsetX,bounds.y + this.mOffsetY);
			image.transfromVertices(starling_filters_FragmentFilter.sTransformationMatrix);
			return image;
		} else {
			return null;
		}
	}
	,updateBuffers: function(context,bounds) {
		this.mVertexData.setPosition(0,bounds.x,bounds.y);
		this.mVertexData.setPosition(1,bounds.get_right(),bounds.y);
		this.mVertexData.setPosition(2,bounds.x,bounds.get_bottom());
		this.mVertexData.setPosition(3,bounds.get_right(),bounds.get_bottom());
		if(this.mVertexBuffer == null) {
			this.mVertexBuffer = context.createVertexBuffer(4,8);
			this.mIndexBuffer = context.createIndexBuffer(6);
			this.mIndexBuffer.uploadFromVector(this.mIndexData,0,6);
		}
		this.mVertexBuffer.uploadFromTypedArray(this.mVertexData.get_rawData());
	}
	,updatePassTextures: function(width,height,scale) {
		var numPassTextures = this.mNumPasses > 1 ? 2 : 1;
		var needsUpdate = this.mPassTextures.data.get_length() != numPassTextures || Math.abs(this.mPassTextures.data.get(0).get_nativeWidth() - width * scale) > 0.1 || Math.abs(this.mPassTextures.data.get(0).get_nativeHeight() - height * scale) > 0.1;
		if(needsUpdate) {
			this.disposePassTextures();
			var _g = 0;
			var _g1 = numPassTextures;
			while(_g < _g1) {
				var i = _g++;
				var this1 = this.mPassTextures;
				var value = starling_textures_Texture.empty(width,height,true,false,true,scale);
				this1.data.set(i,value);
			}
		}
	}
	,getPassTexture: function(pass) {
		return this.mPassTextures.data.get(pass % 2);
	}
	,calculateBounds: function(object,targetSpace,scale,intersectWithStage,resultRect,resultPotRect) {
		var stage;
		var marginX = this.mMarginX;
		var marginY = this.mMarginY;
		if(((targetSpace) instanceof starling_display_Stage)) {
			stage = targetSpace;
			if(object == stage || object == object.get_root()) {
				marginY = 0;
				marginX = marginY;
				resultRect.setTo(0,0,stage.get_stageWidth(),stage.get_stageHeight());
			} else {
				object.getBounds(stage,resultRect);
			}
			if(intersectWithStage) {
				starling_filters_FragmentFilter.sStageBounds.setTo(0,0,stage.get_stageWidth(),stage.get_stageHeight());
				starling_utils_RectangleUtil.intersect(resultRect,starling_filters_FragmentFilter.sStageBounds,resultRect);
			}
		} else {
			object.getBounds(targetSpace,resultRect);
		}
		if(!resultRect.isEmpty()) {
			resultRect.inflate(marginX,marginY);
			var minSize = 64 / scale | 0;
			var minWidth = resultRect.width > minSize ? resultRect.width : minSize;
			var minHeight = resultRect.height > minSize ? resultRect.height : minSize;
			resultPotRect.setTo(resultRect.x,resultRect.y,starling_utils_PowerOfTwo.getNextPowerOfTwo(minWidth * scale | 0) / scale,starling_utils_PowerOfTwo.getNextPowerOfTwo(minHeight * scale | 0) / scale);
		}
	}
	,disposePassTextures: function() {
		var texture = this.mPassTextures.data.iterator();
		while(texture.hasNext()) {
			var texture1 = texture.next();
			texture1.dispose();
		}
		this.mPassTextures.data.set_length(0);
	}
	,disposeCache: function() {
		if(this.mCache != null) {
			this.mCache.dispose();
			this.mCache = null;
		}
	}
	,createPrograms: function() {
		throw new js__$Boot_HaxeError(new openfl_errors_Error("Method has to be implemented in subclass!"));
	}
	,activate: function(pass,context,texture) {
		throw new js__$Boot_HaxeError(new openfl_errors_Error("Method has to be implemented in subclass!"));
	}
	,deactivate: function(pass,context,texture) {
	}
	,assembleAgal: function(fragmentShader,vertexShader) {
		if(fragmentShader == null) {
			fragmentShader = "tex oc, v0, fs0 <2d, clamp, linear, mipnone>";
		}
		if(vertexShader == null) {
			vertexShader = "m44 op, va0, vc0 \n" + "mov v0, va1      \n";
		}
		return starling_core_RenderSupport.assembleAgal(vertexShader,fragmentShader);
	}
	,cache: function() {
		this.mCacheRequested = true;
		this.disposeCache();
	}
	,clearCache: function() {
		this.mCacheRequested = false;
		this.disposeCache();
	}
	,compile: function(object) {
		var stage = object.get_stage();
		var quadBatch = new starling_display_QuadBatch();
		var support = new starling_core_RenderSupport();
		object.getTransformationMatrix(stage,support.get_modelViewMatrix());
		var image = this.renderPasses(object,support,1.0,true);
		if(image != null) {
			quadBatch.addImage(image);
		}
		support.dispose();
		return quadBatch;
	}
	,get_isCached: function() {
		if(this.mCache == null) {
			return this.mCacheRequested;
		} else {
			return true;
		}
	}
	,get_resolution: function() {
		return this.mResolution;
	}
	,set_resolution: function(value) {
		if(value <= 0) {
			throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Resolution must be > 0"));
		} else {
			this.mResolution = value;
		}
		return value;
	}
	,get_mode: function() {
		return this.mMode;
	}
	,set_mode: function(value) {
		return this.mMode = value;
	}
	,get_offsetX: function() {
		return this.mOffsetX;
	}
	,set_offsetX: function(value) {
		return this.mOffsetX = value;
	}
	,get_offsetY: function() {
		return this.mOffsetY;
	}
	,set_offsetY: function(value) {
		return this.mOffsetY = value;
	}
	,get_marginX: function() {
		return this.mMarginX;
	}
	,set_marginX: function(value) {
		return this.mMarginX = value;
	}
	,get_marginY: function() {
		return this.mMarginY;
	}
	,set_marginY: function(value) {
		return this.mMarginY = value;
	}
	,set_numPasses: function(value) {
		return this.mNumPasses = value;
	}
	,get_numPasses: function() {
		return this.mNumPasses;
	}
	,get_vertexPosAtID: function() {
		return this.mVertexPosAtID;
	}
	,set_vertexPosAtID: function(value) {
		return this.mVertexPosAtID = value;
	}
	,get_texCoordsAtID: function() {
		return this.mTexCoordsAtID;
	}
	,set_texCoordsAtID: function(value) {
		return this.mTexCoordsAtID = value;
	}
	,get_baseTextureID: function() {
		return this.mBaseTextureID;
	}
	,set_baseTextureID: function(value) {
		return this.mBaseTextureID = value;
	}
	,get_mvpConstantID: function() {
		return this.mMvpConstantID;
	}
	,set_mvpConstantID: function(value) {
		return this.mMvpConstantID = value;
	}
	,__class__: starling_filters_FragmentFilter
	,__properties__: {set_mvpConstantID:"set_mvpConstantID",get_mvpConstantID:"get_mvpConstantID",set_baseTextureID:"set_baseTextureID",get_baseTextureID:"get_baseTextureID",set_texCoordsAtID:"set_texCoordsAtID",get_texCoordsAtID:"get_texCoordsAtID",set_vertexPosAtID:"set_vertexPosAtID",get_vertexPosAtID:"get_vertexPosAtID",set_numPasses:"set_numPasses",get_numPasses:"get_numPasses",set_marginY:"set_marginY",get_marginY:"get_marginY",set_marginX:"set_marginX",get_marginX:"get_marginX",set_offsetY:"set_offsetY",get_offsetY:"get_offsetY",set_offsetX:"set_offsetX",get_offsetX:"get_offsetX",set_mode:"set_mode",get_mode:"get_mode",set_resolution:"set_resolution",get_resolution:"get_resolution",get_isCached:"get_isCached"}
};
var starling_filters_BlurFilter = function(blurX,blurY,resolution) {
	if(resolution == null) {
		resolution = 1;
	}
	if(blurY == null) {
		blurY = 1;
	}
	if(blurX == null) {
		blurX = 1;
	}
	var a = [0,0,0,0,0.];
	var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	var _g = 0;
	var _g1 = a.length;
	while(_g < _g1) {
		var i = _g++;
		vector.data.set(i,a[i]);
	}
	this.sTmpWeights = vector;
	var a1 = [1,1,1,1.];
	var vector1 = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	var _g2 = 0;
	var _g11 = a1.length;
	while(_g2 < _g11) {
		var i1 = _g2++;
		vector1.data.set(i1,a1[i1]);
	}
	this.mColor = vector1;
	var a2 = [0,0,0,0.];
	var vector2 = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	var _g3 = 0;
	var _g12 = a2.length;
	while(_g3 < _g12) {
		var i2 = _g3++;
		vector2.data.set(i2,a2[i2]);
	}
	this.mWeights = vector2;
	var a3 = [0,0,0,0.];
	var vector3 = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	var _g4 = 0;
	var _g13 = a3.length;
	while(_g4 < _g13) {
		var i3 = _g4++;
		vector3.data.set(i3,a3[i3]);
	}
	this.mOffsets = vector3;
	starling_filters_FragmentFilter.call(this,1,resolution);
	this.mBlurX = blurX;
	this.mBlurY = blurY;
	this.updateMarginsAndPasses();
};
$hxClasses["starling.filters.BlurFilter"] = starling_filters_BlurFilter;
starling_filters_BlurFilter.__name__ = "starling.filters.BlurFilter";
starling_filters_BlurFilter.createDropShadow = function(distance,angle,color,alpha,blur,resolution) {
	if(resolution == null) {
		resolution = 0.5;
	}
	if(blur == null) {
		blur = 1.0;
	}
	if(alpha == null) {
		alpha = 0.5;
	}
	if(color == null) {
		color = 0;
	}
	if(angle == null) {
		angle = 0.785;
	}
	if(distance == null) {
		distance = 4.0;
	}
	var dropShadow = new starling_filters_BlurFilter(blur,blur,resolution);
	dropShadow.set_offsetX(Math.cos(angle) * distance);
	dropShadow.set_offsetY(Math.sin(angle) * distance);
	dropShadow.set_mode("below");
	dropShadow.setUniformColor(true,color,alpha);
	return dropShadow;
};
starling_filters_BlurFilter.createGlow = function(color,alpha,blur,resolution) {
	if(resolution == null) {
		resolution = 0.5;
	}
	if(blur == null) {
		blur = 1.0;
	}
	if(alpha == null) {
		alpha = 1.0;
	}
	if(color == null) {
		color = 16776960;
	}
	var glow = new starling_filters_BlurFilter(blur,blur,resolution);
	glow.set_mode("below");
	glow.setUniformColor(true,color,alpha);
	return glow;
};
starling_filters_BlurFilter.__super__ = starling_filters_FragmentFilter;
starling_filters_BlurFilter.prototype = $extend(starling_filters_FragmentFilter.prototype,{
	mNormalProgram: null
	,mTintedProgram: null
	,mOffsets: null
	,mWeights: null
	,mColor: null
	,mBlurX: null
	,mBlurY: null
	,mUniformColor: null
	,sTmpWeights: null
	,createPrograms: function() {
		this.mNormalProgram = this.createProgram(false);
		this.mTintedProgram = this.createProgram(true);
	}
	,createProgram: function(tinted) {
		var programName = tinted ? "BF_t" : "BF_n";
		var target = starling_core_Starling.get_current();
		if(target.hasProgram(programName)) {
			return target.getProgram(programName);
		}
		var vertexShader = "m44 op, va0, vc0       \n" + "mov v0, va1            \n" + "sub v1, va1, vc4.zwxx  \n" + "sub v2, va1, vc4.xyxx  \n" + "add v3, va1, vc4.xyxx  \n" + "add v4, va1, vc4.zwxx  \n";
		var fragmentShader = "tex ft0,  v0, fs0 <2d, clamp, linear, mipnone> \n" + "mul ft5, ft0, fc0.xxxx                         \n" + "tex ft1,  v1, fs0 <2d, clamp, linear, mipnone> \n" + "mul ft1, ft1, fc0.zzzz                         \n" + "add ft5, ft5, ft1                              \n" + "tex ft2,  v2, fs0 <2d, clamp, linear, mipnone> \n" + "mul ft2, ft2, fc0.yyyy                         \n" + "add ft5, ft5, ft2                              \n" + "tex ft3,  v3, fs0 <2d, clamp, linear, mipnone> \n" + "mul ft3, ft3, fc0.yyyy                         \n" + "add ft5, ft5, ft3                              \n" + "tex ft4,  v4, fs0 <2d, clamp, linear, mipnone> \n" + "mul ft4, ft4, fc0.zzzz                         \n";
		if(tinted) {
			fragmentShader += "add ft5, ft5, ft4                              \n" + "mul ft5.xyz, fc1.xyz, ft5.www                  \n" + "mul oc, ft5, fc1.wwww                          \n";
		} else {
			fragmentShader += "add  oc, ft5, ft4                              \n";
		}
		return target.registerProgramFromSource(programName,vertexShader,fragmentShader);
	}
	,activate: function(pass,context,texture) {
		this.updateParameters(pass,texture.get_nativeWidth() | 0,texture.get_nativeHeight() | 0);
		context.setProgramConstantsFromVector(1,4,this.mOffsets);
		context.setProgramConstantsFromVector(0,0,this.mWeights);
		if(this.mUniformColor && pass == this.get_numPasses() - 1) {
			context.setProgramConstantsFromVector(0,1,this.mColor);
			context.setProgram(this.mTintedProgram);
		} else {
			context.setProgram(this.mNormalProgram);
		}
	}
	,updateParameters: function(pass,textureWidth,textureHeight) {
		var sigma;
		var horizontal = pass < this.mBlurX;
		var pixelSize;
		if(horizontal) {
			sigma = Math.min(1.0,this.mBlurX - pass) * 2.0;
			pixelSize = 1.0 / textureWidth;
		} else {
			sigma = Math.min(1.0,this.mBlurY - (pass - Math.ceil(this.mBlurX))) * 2.0;
			pixelSize = 1.0 / textureHeight;
		}
		var twoSigmaSq = 2 * sigma * sigma;
		var multiplier = 1.0 / Math.sqrt(twoSigmaSq * Math.PI);
		this.sTmpWeights.data.set(0,multiplier * Math.exp(0 / twoSigmaSq));
		this.sTmpWeights.data.set(1,multiplier * Math.exp(-1 / twoSigmaSq));
		this.sTmpWeights.data.set(2,multiplier * Math.exp(-4 / twoSigmaSq));
		this.sTmpWeights.data.set(3,multiplier * Math.exp(-9 / twoSigmaSq));
		this.sTmpWeights.data.set(4,multiplier * Math.exp(-16 / twoSigmaSq));
		var this1 = this.mWeights;
		var value = this.sTmpWeights.data.get(0);
		this1.data.set(0,value);
		var this2 = this.mWeights;
		var value1 = this.sTmpWeights.data.get(1) + this.sTmpWeights.data.get(2);
		this2.data.set(1,value1);
		var this3 = this.mWeights;
		var value2 = this.sTmpWeights.data.get(3) + this.sTmpWeights.data.get(4);
		this3.data.set(2,value2);
		var weightSum = this.mWeights.data.get(0) + 2 * this.mWeights.data.get(1) + 2 * this.mWeights.data.get(2);
		var invWeightSum = 1.0 / weightSum;
		var _g = this.mWeights;
		var value3 = _g.data.get(0) * invWeightSum;
		_g.data.set(0,value3);
		var _g1 = this.mWeights;
		var value4 = _g1.data.get(1) * invWeightSum;
		_g1.data.set(1,value4);
		var _g2 = this.mWeights;
		var value5 = _g2.data.get(2) * invWeightSum;
		_g2.data.set(2,value5);
		var offset1 = (pixelSize * this.sTmpWeights.data.get(1) + 2 * pixelSize * this.sTmpWeights.data.get(2)) / this.mWeights.data.get(1);
		var offset2 = (3 * pixelSize * this.sTmpWeights.data.get(3) + 4 * pixelSize * this.sTmpWeights.data.get(4)) / this.mWeights.data.get(2);
		if(horizontal) {
			this.mOffsets.data.set(0,offset1);
			this.mOffsets.data.set(1,0);
			this.mOffsets.data.set(2,offset2);
			this.mOffsets.data.set(3,0);
		} else {
			this.mOffsets.data.set(0,0);
			this.mOffsets.data.set(1,offset1);
			this.mOffsets.data.set(2,0);
			this.mOffsets.data.set(3,offset2);
		}
	}
	,updateMarginsAndPasses: function() {
		if(this.mBlurX == 0 && this.mBlurY == 0) {
			this.mBlurX = 0.001;
		}
		this.set_numPasses(Math.ceil(this.mBlurX) + Math.ceil(this.mBlurY));
		this.set_marginX((3 + Math.ceil(this.mBlurX)) / this.get_resolution());
		this.set_marginY((3 + Math.ceil(this.mBlurY)) / this.get_resolution());
	}
	,setUniformColor: function(enable,color,alpha) {
		if(alpha == null) {
			alpha = 1.0;
		}
		if(color == null) {
			color = 0;
		}
		var this1 = this.mColor;
		var value = starling_utils_Color.getRed(color) / 255.0;
		this1.data.set(0,value);
		var this2 = this.mColor;
		var value1 = starling_utils_Color.getGreen(color) / 255.0;
		this2.data.set(1,value1);
		var this3 = this.mColor;
		var value2 = starling_utils_Color.getBlue(color) / 255.0;
		this3.data.set(2,value2);
		this.mColor.data.set(3,alpha);
		this.mUniformColor = enable;
	}
	,get_blurX: function() {
		return this.mBlurX;
	}
	,set_blurX: function(value) {
		this.mBlurX = value;
		this.updateMarginsAndPasses();
		return value;
	}
	,get_blurY: function() {
		return this.mBlurY;
	}
	,set_blurY: function(value) {
		this.mBlurY = value;
		this.updateMarginsAndPasses();
		return value;
	}
	,__class__: starling_filters_BlurFilter
	,__properties__: $extend(starling_filters_FragmentFilter.prototype.__properties__,{set_blurY:"set_blurY",get_blurY:"get_blurY",set_blurX:"set_blurX",get_blurX:"get_blurX"})
});
var starling_filters_ColorMatrixFilter = function(matrix) {
	starling_filters_FragmentFilter.call(this);
	this.mUserMatrix = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	this.mShaderMatrix = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	this.set_matrix(matrix);
};
$hxClasses["starling.filters.ColorMatrixFilter"] = starling_filters_ColorMatrixFilter;
starling_filters_ColorMatrixFilter.__name__ = "starling.filters.ColorMatrixFilter";
starling_filters_ColorMatrixFilter.__super__ = starling_filters_FragmentFilter;
starling_filters_ColorMatrixFilter.prototype = $extend(starling_filters_FragmentFilter.prototype,{
	mShaderProgram: null
	,mUserMatrix: null
	,mShaderMatrix: null
	,createPrograms: function() {
		var target = starling_core_Starling.get_current();
		if(target.hasProgram("CMF")) {
			this.mShaderProgram = target.getProgram("CMF");
		} else {
			var fragmentShader = "tex ft0, v0,  fs0 <2d, clamp, linear, mipnone>  \n" + "max ft0, ft0, fc5              \n" + "div ft0.xyz, ft0.xyz, ft0.www  \n" + "m44 ft0, ft0, fc0              \n" + "add ft0, ft0, fc4              \n" + "mul ft0.xyz, ft0.xyz, ft0.www  \n" + "mov oc, ft0                    \n";
			this.mShaderProgram = target.registerProgramFromSource("CMF","m44 op, va0, vc0 \n" + "mov v0, va1      \n",fragmentShader);
		}
	}
	,activate: function(pass,context,texture) {
		context.setProgramConstantsFromVector(0,0,this.mShaderMatrix);
		context.setProgramConstantsFromVector(0,5,starling_filters_ColorMatrixFilter.MIN_COLOR);
		context.setProgram(this.mShaderProgram);
	}
	,invert: function() {
		return this.concatValues(-1,0,0,0,255,0,-1,0,0,255,0,0,-1,0,255,0,0,0,1,0);
	}
	,adjustSaturation: function(sat) {
		++sat;
		var invSat = 1 - sat;
		var invLumR = invSat * 0.299;
		var invLumG = invSat * 0.587;
		var invLumB = invSat * 0.114;
		return this.concatValues(invLumR + sat,invLumG,invLumB,0,0,invLumR,invLumG + sat,invLumB,0,0,invLumR,invLumG,invLumB + sat,0,0,0,0,0,1,0);
	}
	,adjustContrast: function(value) {
		var s = value + 1;
		var o = 128 * (1 - s);
		return this.concatValues(s,0,0,0,o,0,s,0,0,o,0,0,s,0,o,0,0,0,1,0);
	}
	,adjustBrightness: function(value) {
		value *= 255;
		return this.concatValues(1,0,0,0,value,0,1,0,0,value,0,0,1,0,value,0,0,0,1,0);
	}
	,adjustHue: function(value) {
		value *= Math.PI;
		var cos = Math.cos(value);
		var sin = Math.sin(value);
		return this.concatValues(0.299 + cos * 0.70100000000000007 + sin * -0.299,0.587 + cos * -0.587 + sin * -0.587,0.114 + cos * -0.114 + sin * 0.886,0,0,0.299 + cos * -0.299 + sin * 0.143,0.587 + cos * 0.41300000000000003 + sin * 0.14,0.114 + cos * -0.114 + sin * -0.283,0,0,0.299 + cos * -0.299 + sin * -0.70100000000000007,0.587 + cos * -0.587 + sin * 0.587,0.114 + cos * 0.886 + sin * 0.114,0,0,0,0,0,1,0);
	}
	,tint: function(color,amount) {
		if(amount == null) {
			amount = 1.0;
		}
		var r = starling_utils_Color.getRed(color) / 255.0;
		var g = starling_utils_Color.getGreen(color) / 255.0;
		var b = starling_utils_Color.getBlue(color) / 255.0;
		var q = 1 - amount;
		var rA = amount * r;
		var gA = amount * g;
		var bA = amount * b;
		return this.concatValues(q + rA * 0.299,rA * 0.587,rA * 0.114,0,0,gA * 0.299,q + gA * 0.587,gA * 0.114,0,0,bA * 0.299,bA * 0.587,q + bA * 0.114,0,0,0,0,0,1,0);
	}
	,reset: function() {
		this.set_matrix(null);
		return this;
	}
	,concat: function(matrix) {
		var i = 0;
		var _g = 0;
		while(_g < 4) {
			var y = _g++;
			var _g1 = 0;
			while(_g1 < 5) {
				var x = _g1++;
				var this1 = starling_filters_ColorMatrixFilter.sTmpMatrix1;
				var value = matrix.data.get(i) * this.mUserMatrix.data.get(x) + matrix.data.get(i + 1) * this.mUserMatrix.data.get(x + 5) + matrix.data.get(i + 2) * this.mUserMatrix.data.get(x + 10) + matrix.data.get(i + 3) * this.mUserMatrix.data.get(x + 15);
				var value1 = x == 4 ? matrix.data.get(i + 4) : 0;
				this1.data.set(i + x,value + value1);
			}
			i += 5;
		}
		this.copyMatrix(starling_filters_ColorMatrixFilter.sTmpMatrix1,this.mUserMatrix);
		this.updateShaderMatrix();
		return this;
	}
	,concatValues: function(m0,m1,m2,m3,m4,m5,m6,m7,m8,m9,m10,m11,m12,m13,m14,m15,m16,m17,m18,m19) {
		this.pushValues(starling_filters_ColorMatrixFilter.sTmpMatrix2,m0,m1,m2,m3,m4,m5,m6,m7,m8,m9,m10,m11,m12,m13,m14,m15,m16,m17,m18,m19);
		this.concat(starling_filters_ColorMatrixFilter.sTmpMatrix2);
		return this;
	}
	,pushValues: function(vector,m0,m1,m2,m3,m4,m5,m6,m7,m8,m9,m10,m11,m12,m13,m14,m15,m16,m17,m18,m19) {
		vector.data.set_length(20);
		vector.data.set(0,m0);
		vector.data.set(1,m1);
		vector.data.set(2,m2);
		vector.data.set(3,m3);
		vector.data.set(4,m4);
		vector.data.set(5,m5);
		vector.data.set(6,m6);
		vector.data.set(7,m7);
		vector.data.set(8,m8);
		vector.data.set(9,m9);
		vector.data.set(10,m10);
		vector.data.set(11,m11);
		vector.data.set(12,m12);
		vector.data.set(13,m13);
		vector.data.set(14,m14);
		vector.data.set(15,m15);
		vector.data.set(16,m16);
		vector.data.set(17,m17);
		vector.data.set(18,m18);
		vector.data.set(19,m19);
	}
	,copyMatrix: function(from,to) {
		var value = from.data.get(0);
		to.data.set(0,value);
		var value1 = from.data.get(1);
		to.data.set(1,value1);
		var value2 = from.data.get(2);
		to.data.set(2,value2);
		var value3 = from.data.get(3);
		to.data.set(3,value3);
		var value4 = from.data.get(4);
		to.data.set(4,value4);
		var value5 = from.data.get(5);
		to.data.set(5,value5);
		var value6 = from.data.get(6);
		to.data.set(6,value6);
		var value7 = from.data.get(7);
		to.data.set(7,value7);
		var value8 = from.data.get(8);
		to.data.set(8,value8);
		var value9 = from.data.get(9);
		to.data.set(9,value9);
		var value10 = from.data.get(10);
		to.data.set(10,value10);
		var value11 = from.data.get(11);
		to.data.set(11,value11);
		var value12 = from.data.get(12);
		to.data.set(12,value12);
		var value13 = from.data.get(13);
		to.data.set(13,value13);
		var value14 = from.data.get(14);
		to.data.set(14,value14);
		var value15 = from.data.get(15);
		to.data.set(15,value15);
		var value16 = from.data.get(16);
		to.data.set(16,value16);
		var value17 = from.data.get(17);
		to.data.set(17,value17);
		var value18 = from.data.get(18);
		to.data.set(18,value18);
		var value19 = from.data.get(19);
		to.data.set(19,value19);
	}
	,updateShaderMatrix: function() {
		this.pushValues(this.mShaderMatrix,this.mUserMatrix.data.get(0),this.mUserMatrix.data.get(1),this.mUserMatrix.data.get(2),this.mUserMatrix.data.get(3),this.mUserMatrix.data.get(5),this.mUserMatrix.data.get(6),this.mUserMatrix.data.get(7),this.mUserMatrix.data.get(8),this.mUserMatrix.data.get(10),this.mUserMatrix.data.get(11),this.mUserMatrix.data.get(12),this.mUserMatrix.data.get(13),this.mUserMatrix.data.get(15),this.mUserMatrix.data.get(16),this.mUserMatrix.data.get(17),this.mUserMatrix.data.get(18),this.mUserMatrix.data.get(4) / 255.0,this.mUserMatrix.data.get(9) / 255.0,this.mUserMatrix.data.get(14) / 255.0,this.mUserMatrix.data.get(19) / 255.0);
	}
	,get_matrix: function() {
		return this.mUserMatrix;
	}
	,set_matrix: function(value) {
		if(value != null && value.data.get_length() != 20) {
			throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Invalid matrix length: must be 20"));
		}
		if(value == null) {
			this.mUserMatrix = new openfl__$Vector_AbstractVector(starling_filters_ColorMatrixFilter.IDENTITY.data.copy());
		} else {
			this.copyMatrix(value,this.mUserMatrix);
		}
		this.updateShaderMatrix();
		return value;
	}
	,__class__: starling_filters_ColorMatrixFilter
	,__properties__: $extend(starling_filters_FragmentFilter.prototype.__properties__,{set_matrix:"set_matrix",get_matrix:"get_matrix"})
});
var starling_filters_DisplacementMapFilter = function(mapTexture,mapPoint,componentX,componentY,scaleX,scaleY,repeat) {
	if(repeat == null) {
		repeat = false;
	}
	if(scaleY == null) {
		scaleY = 0.0;
	}
	if(scaleX == null) {
		scaleX = 0.0;
	}
	if(componentY == null) {
		componentY = 0;
	}
	if(componentX == null) {
		componentX = 0;
	}
	this.mMapTexture = mapTexture;
	this.mMapPoint = new openfl_geom_Point();
	this.mComponentX = componentX;
	this.mComponentY = componentY;
	this.mScaleX = scaleX;
	this.mScaleY = scaleY;
	this.mRepeat = repeat;
	this.set_mapPoint(mapPoint);
	starling_filters_FragmentFilter.call(this);
};
$hxClasses["starling.filters.DisplacementMapFilter"] = starling_filters_DisplacementMapFilter;
starling_filters_DisplacementMapFilter.__name__ = "starling.filters.DisplacementMapFilter";
starling_filters_DisplacementMapFilter.__super__ = starling_filters_FragmentFilter;
starling_filters_DisplacementMapFilter.prototype = $extend(starling_filters_FragmentFilter.prototype,{
	mMapTexture: null
	,mMapPoint: null
	,mComponentX: null
	,mComponentY: null
	,mScaleX: null
	,mScaleY: null
	,mRepeat: null
	,mShaderProgram: null
	,mMapTexCoordBuffer: null
	,dispose: function() {
		if(this.mMapTexCoordBuffer != null) {
			this.mMapTexCoordBuffer.dispose();
		}
		starling_filters_FragmentFilter.prototype.dispose.call(this);
	}
	,createPrograms: function() {
		if(this.mMapTexCoordBuffer != null) {
			this.mMapTexCoordBuffer.dispose();
		}
		this.mMapTexCoordBuffer = starling_core_Starling.get_current().get_context().createVertexBuffer(4,2);
		var target = starling_core_Starling.get_current();
		var mapFlags = starling_core_RenderSupport.getTextureLookupFlags(this.get_mapTexture().get_format(),this.get_mapTexture().get_mipMapping(),this.get_mapTexture().get_repeat());
		var inputFlags = starling_core_RenderSupport.getTextureLookupFlags(1,false,this.mRepeat);
		var programName = starling_utils_StringUtil.formatString("DMF_m{0}_i{1}",[mapFlags,inputFlags]);
		if(target.hasProgram(programName)) {
			this.mShaderProgram = target.getProgram(programName);
		} else {
			var vertexShader = ["m44  op, va0, vc0","mov  v0, va1","mov  v1, va2"].join("\n");
			var fragmentShader = ["tex ft0,  v1, fs1 " + mapFlags,"sub ft1, ft0, fc0","m44 ft2, ft1, fc1","add ft3,  v0, ft2","tex  oc, ft3, fs0 " + inputFlags].join("\n");
			this.mShaderProgram = target.registerProgramFromSource(programName,vertexShader,fragmentShader);
		}
	}
	,activate: function(pass,context,texture) {
		this.updateParameters(texture.get_nativeWidth() | 0,texture.get_nativeHeight() | 0);
		context.setVertexBufferAt(2,this.mMapTexCoordBuffer,0,2);
		context.setProgramConstantsFromVector(0,0,starling_filters_DisplacementMapFilter.sOneHalf);
		context.setProgramConstantsFromMatrix(0,1,starling_filters_DisplacementMapFilter.sMatrix,true);
		context.setTextureAt(1,this.mMapTexture.get_base());
		context.setProgram(this.mShaderProgram);
	}
	,deactivate: function(pass,context,texture) {
		context.setVertexBufferAt(2,null);
		context.setTextureAt(1,null);
	}
	,updateParameters: function(textureWidth,textureHeight) {
		var scale = starling_core_Starling.get_current().get_contentScaleFactor();
		var columnX;
		var columnY;
		starling_filters_DisplacementMapFilter.sMatrixData.data.set(0,0);
		starling_filters_DisplacementMapFilter.sMatrixData.data.set(1,0);
		starling_filters_DisplacementMapFilter.sMatrixData.data.set(2,0);
		starling_filters_DisplacementMapFilter.sMatrixData.data.set(3,0);
		starling_filters_DisplacementMapFilter.sMatrixData.data.set(4,0);
		starling_filters_DisplacementMapFilter.sMatrixData.data.set(5,0);
		starling_filters_DisplacementMapFilter.sMatrixData.data.set(6,0);
		starling_filters_DisplacementMapFilter.sMatrixData.data.set(7,0);
		starling_filters_DisplacementMapFilter.sMatrixData.data.set(8,0);
		starling_filters_DisplacementMapFilter.sMatrixData.data.set(9,0);
		starling_filters_DisplacementMapFilter.sMatrixData.data.set(10,0);
		starling_filters_DisplacementMapFilter.sMatrixData.data.set(11,0);
		starling_filters_DisplacementMapFilter.sMatrixData.data.set(12,0);
		starling_filters_DisplacementMapFilter.sMatrixData.data.set(13,0);
		starling_filters_DisplacementMapFilter.sMatrixData.data.set(14,0);
		starling_filters_DisplacementMapFilter.sMatrixData.data.set(15,0);
		if(this.mComponentX == 1) {
			columnX = 0;
		} else if(this.mComponentX == 2) {
			columnX = 1;
		} else if(this.mComponentX == 4) {
			columnX = 2;
		} else {
			columnX = 3;
		}
		if(this.mComponentY == 1) {
			columnY = 0;
		} else if(this.mComponentY == 2) {
			columnY = 1;
		} else if(this.mComponentY == 4) {
			columnY = 2;
		} else {
			columnY = 3;
		}
		starling_filters_DisplacementMapFilter.sMatrixData.data.set(columnX * 4,this.mScaleX * scale / textureWidth);
		starling_filters_DisplacementMapFilter.sMatrixData.data.set(columnY * 4 + 1,this.mScaleY * scale / textureHeight);
		starling_filters_DisplacementMapFilter.sMatrix.copyRawDataFrom(starling_filters_DisplacementMapFilter.sMatrixData);
		var mapX = this.mMapPoint.x / this.get_mapTexture().get_width();
		var mapY = this.mMapPoint.y / this.get_mapTexture().get_height();
		var maxU = textureWidth / (this.get_mapTexture().get_width() * scale);
		var maxV = textureHeight / (this.get_mapTexture().get_height() * scale);
		starling_filters_DisplacementMapFilter.sMapTexCoords[0] = -mapX;
		starling_filters_DisplacementMapFilter.sMapTexCoords[1] = -mapY;
		starling_filters_DisplacementMapFilter.sMapTexCoords[2] = -mapX + maxU;
		starling_filters_DisplacementMapFilter.sMapTexCoords[3] = -mapY;
		starling_filters_DisplacementMapFilter.sMapTexCoords[4] = -mapX;
		starling_filters_DisplacementMapFilter.sMapTexCoords[5] = -mapY + maxV;
		starling_filters_DisplacementMapFilter.sMapTexCoords[6] = -mapX + maxU;
		starling_filters_DisplacementMapFilter.sMapTexCoords[7] = -mapY + maxV;
		this.mMapTexture.adjustTexCoords(starling_filters_DisplacementMapFilter.sMapTexCoords);
		this.mMapTexCoordBuffer.uploadFromTypedArray(starling_filters_DisplacementMapFilter.sMapTexCoords);
	}
	,get_componentX: function() {
		return this.mComponentX;
	}
	,set_componentX: function(value) {
		return this.mComponentX = value;
	}
	,get_componentY: function() {
		return this.mComponentY;
	}
	,set_componentY: function(value) {
		return this.mComponentY = value;
	}
	,get_scaleX: function() {
		return this.mScaleX;
	}
	,set_scaleX: function(value) {
		return this.mScaleX = value;
	}
	,get_scaleY: function() {
		return this.mScaleY;
	}
	,set_scaleY: function(value) {
		return this.mScaleY = value;
	}
	,get_mapTexture: function() {
		return this.mMapTexture;
	}
	,set_mapTexture: function(value) {
		if(this.mMapTexture != value) {
			this.mMapTexture = value;
			this.createPrograms();
		}
		return value;
	}
	,get_mapPoint: function() {
		return this.mMapPoint;
	}
	,set_mapPoint: function(value) {
		if(value != null) {
			this.mMapPoint.setTo(value.x,value.y);
		} else {
			this.mMapPoint.setTo(0,0);
		}
		return value;
	}
	,get_repeat: function() {
		return this.mRepeat;
	}
	,set_repeat: function(value) {
		if(this.mRepeat != value) {
			this.mRepeat = value;
			this.createPrograms();
		}
		return value;
	}
	,__class__: starling_filters_DisplacementMapFilter
	,__properties__: $extend(starling_filters_FragmentFilter.prototype.__properties__,{set_repeat:"set_repeat",get_repeat:"get_repeat",set_mapPoint:"set_mapPoint",get_mapPoint:"get_mapPoint",set_mapTexture:"set_mapTexture",get_mapTexture:"get_mapTexture",set_scaleY:"set_scaleY",get_scaleY:"get_scaleY",set_scaleX:"set_scaleX",get_scaleX:"get_scaleX",set_componentY:"set_componentY",get_componentY:"get_componentY",set_componentX:"set_componentX",get_componentX:"get_componentX"})
});
var starling_filters_FragmentFilterMode = function() { };
$hxClasses["starling.filters.FragmentFilterMode"] = starling_filters_FragmentFilterMode;
starling_filters_FragmentFilterMode.__name__ = "starling.filters.FragmentFilterMode";
var starling_geom_Polygon = function(vertices) {
	this.mCoords = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	this.addVertices(vertices);
};
$hxClasses["starling.geom.Polygon"] = starling_geom_Polygon;
starling_geom_Polygon.__name__ = "starling.geom.Polygon";
starling_geom_Polygon.createEllipse = function(x,y,radiusX,radiusY) {
	return new starling_geom_Ellipse(x,y,radiusX,radiusY);
};
starling_geom_Polygon.createCircle = function(x,y,radius) {
	return new starling_geom_Ellipse(x,y,radius,radius);
};
starling_geom_Polygon.createRectangle = function(x,y,width,height) {
	return new starling_geom_Rectangle(x,y,width,height);
};
starling_geom_Polygon.isConvexTriangle = function(ax,ay,bx,by,cx,cy) {
	return (ay - by) * (cx - bx) + (bx - ax) * (cy - by) >= 0;
};
starling_geom_Polygon.isPointInTriangle = function(px,py,ax,ay,bx,by,cx,cy) {
	var v0x = cx - ax;
	var v0y = cy - ay;
	var v1x = bx - ax;
	var v1y = by - ay;
	var v2x = px - ax;
	var v2y = py - ay;
	var dot00 = v0x * v0x + v0y * v0y;
	var dot01 = v0x * v1x + v0y * v1y;
	var dot02 = v0x * v2x + v0y * v2y;
	var dot11 = v1x * v1x + v1y * v1y;
	var dot12 = v1x * v2x + v1y * v2y;
	var invDen = 1.0 / (dot00 * dot11 - dot01 * dot01);
	var u = (dot11 * dot02 - dot01 * dot12) * invDen;
	var v = (dot00 * dot12 - dot01 * dot02) * invDen;
	if(u >= 0 && v >= 0) {
		return u + v < 1;
	} else {
		return false;
	}
};
starling_geom_Polygon.areVectorsIntersecting = function(ax,ay,bx,by,cx,cy,dx,dy) {
	if(ax == bx && ay == by || cx == dx && cy == dy) {
		return false;
	}
	var abx = bx - ax;
	var aby = by - ay;
	var cdx = dx - cx;
	var cdy = dy - cy;
	var tDen = cdy * abx - cdx * aby;
	if(tDen == 0.0) {
		return false;
	}
	var t = (aby * (cx - ax) - abx * (cy - ay)) / tDen;
	if(t < 0 || t > 1) {
		return false;
	}
	var s = aby != 0.0 ? (cy - ay + t * cdy) / aby : (cx - ax + t * cdx) / abx;
	if(s >= 0.0) {
		return s <= 1.0;
	} else {
		return false;
	}
};
starling_geom_Polygon.prototype = {
	mCoords: null
	,clone: function() {
		var clone = new starling_geom_Polygon();
		var numCoords = this.mCoords.data.get_length();
		var _g = 0;
		var _g1 = numCoords;
		while(_g < _g1) {
			var i = _g++;
			var this1 = clone.mCoords;
			var value = this.mCoords.data.get(i);
			this1.data.set(i,value);
		}
		return clone;
	}
	,reverse: function() {
		var numCoords = this.mCoords.data.get_length();
		var numVertices = numCoords / 2 | 0;
		var tmp;
		var i = 0;
		while(i < numVertices) {
			tmp = this.mCoords.data.get(i);
			var this1 = this.mCoords;
			var value = this.mCoords.data.get(numCoords - i - 2);
			this1.data.set(i,value);
			this.mCoords.data.set(numCoords - i - 2,tmp);
			tmp = this.mCoords.data.get(i + 1);
			var this2 = this.mCoords;
			var value1 = this.mCoords.data.get(numCoords - i - 1);
			this2.data.set(i + 1,value1);
			this.mCoords.data.set(numCoords - i - 1,tmp);
			i += 2;
		}
	}
	,addVertices: function(args) {
		var i;
		var numArgs = args.length;
		var numCoords = this.mCoords.data.get_length();
		if(numArgs > 0) {
			if(((args[0]) instanceof openfl_geom_Point)) {
				var _g = 0;
				var _g1 = numArgs;
				while(_g < _g1) {
					var i1 = _g++;
					this.mCoords.data.set(numCoords + i1 * 2,(js_Boot.__cast(args[i1] , openfl_geom_Point)).x);
					this.mCoords.data.set(numCoords + i1 * 2 + 1,(js_Boot.__cast(args[i1] , openfl_geom_Point)).y);
				}
			} else if(typeof(args[0]) == "number") {
				var _g2 = 0;
				var _g11 = numArgs;
				while(_g2 < _g11) {
					var i2 = _g2++;
					this.mCoords.data.set(numCoords + i2,args[i2]);
				}
			} else {
				var o = args[0];
				var c = o == null ? null : js_Boot.getClass(o);
				throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Invalid type: " + c.__name__));
			}
		}
	}
	,setVertex: function(index,x,y) {
		if(index >= 0 && index <= this.get_numVertices()) {
			this.mCoords.data.set(index * 2,x);
			this.mCoords.data.set(index * 2 + 1,y);
		} else {
			throw new js__$Boot_HaxeError(new openfl_errors_RangeError("Invalid index: " + index));
		}
	}
	,getVertex: function(index,result) {
		if(index >= 0 && index < this.get_numVertices()) {
			result = result == null ? new openfl_geom_Point() : result;
			result.setTo(this.mCoords.data.get(index * 2),this.mCoords.data.get(index * 2 + 1));
			return result;
		} else {
			throw new js__$Boot_HaxeError(new openfl_errors_RangeError("Invalid index: " + index));
		}
	}
	,contains: function(x,y) {
		var i;
		var j = this.get_numVertices() - 1;
		var oddNodes = 0;
		var _g = 0;
		var _g1 = this.get_numVertices();
		while(_g < _g1) {
			var i1 = _g++;
			var ix = this.mCoords.data.get(i1 * 2);
			var iy = this.mCoords.data.get(i1 * 2 + 1);
			var jx = this.mCoords.data.get(j * 2);
			var jy = this.mCoords.data.get(j * 2 + 1);
			if((iy < y && jy >= y || jy < y && iy >= y) && (ix <= x || jx <= x)) {
				oddNodes = oddNodes ^ (ix + (y - iy) / (jy - iy) * (jx - ix) < x ? 1 : 0);
			}
			j = i1;
		}
		return oddNodes != 0;
	}
	,containsPoint: function(point) {
		return this.contains(point.x,point.y);
	}
	,triangulate: function(result) {
		if(result == null) {
			result = openfl__$Vector_Vector_$Impl_$.toIntVector(null);
		}
		var numVertices = this.get_numVertices();
		var i;
		if(numVertices < 3) {
			return result;
		}
		starling_geom_Polygon.sRestIndices.data.set_length(numVertices);
		var _g = 0;
		var _g1 = numVertices;
		while(_g < _g1) {
			var i1 = _g++;
			starling_geom_Polygon.sRestIndices.data.set(i1,i1);
		}
		var restIndexPos = 0;
		var resultPos = result.data.get_length();
		var numRestIndices = numVertices;
		while(numRestIndices > 3) {
			var i0 = starling_geom_Polygon.sRestIndices.data.get(restIndexPos % numRestIndices);
			var i11 = starling_geom_Polygon.sRestIndices.data.get((restIndexPos + 1) % numRestIndices);
			var i2 = starling_geom_Polygon.sRestIndices.data.get((restIndexPos + 2) % numRestIndices);
			var ax = this.mCoords.data.get(2 * i0);
			var ay = this.mCoords.data.get(2 * i0 + 1);
			var bx = this.mCoords.data.get(2 * i11);
			var by = this.mCoords.data.get(2 * i11 + 1);
			var cx = this.mCoords.data.get(2 * i2);
			var cy = this.mCoords.data.get(2 * i2 + 1);
			var earFound = false;
			if((ay - by) * (cx - bx) + (bx - ax) * (cy - by) >= 0) {
				earFound = true;
				var _g2 = 3;
				var _g3 = numRestIndices;
				while(_g2 < _g3) {
					var i3 = _g2++;
					var otherIndex = starling_geom_Polygon.sRestIndices.data.get((restIndexPos + i3) % numRestIndices);
					if(starling_geom_Polygon.isPointInTriangle(this.mCoords.data.get(2 * otherIndex),this.mCoords.data.get(2 * otherIndex + 1),ax,ay,bx,by,cx,cy)) {
						earFound = false;
						break;
					}
				}
			}
			if(earFound) {
				result.data.set(resultPos++,i0);
				result.data.set(resultPos++,i11);
				result.data.set(resultPos++,i2);
				starling_utils_VectorUtil.removeUnsignedIntAt(starling_geom_Polygon.sRestIndices,(restIndexPos + 1) % numRestIndices);
				--numRestIndices;
				restIndexPos = 0;
			} else {
				++restIndexPos;
				if(restIndexPos == numRestIndices) {
					break;
				}
			}
		}
		var value = starling_geom_Polygon.sRestIndices.data.get(0);
		result.data.set(resultPos++,value);
		var value1 = starling_geom_Polygon.sRestIndices.data.get(1);
		result.data.set(resultPos++,value1);
		var value2 = starling_geom_Polygon.sRestIndices.data.get(2);
		result.data.set(resultPos,value2);
		return result;
	}
	,copyToVertexData: function(target,targetIndex) {
		if(targetIndex == null) {
			targetIndex = 0;
		}
		var requiredTargetLength = targetIndex + this.get_numVertices();
		if(target.get_numVertices() < requiredTargetLength) {
			target.set_numVertices(requiredTargetLength);
		}
		this.copyToArray(target.get_rawData(),targetIndex * 8,6);
	}
	,copyToArray: function(target,targetIndex,stride) {
		if(stride == null) {
			stride = 0;
		}
		if(targetIndex == null) {
			targetIndex = 0;
		}
		var numVertices = this.get_numVertices();
		var _g = 0;
		var _g1 = numVertices;
		while(_g < _g1) {
			var i = _g++;
			target[targetIndex++] = this.mCoords.data.get(i * 2);
			target[targetIndex++] = this.mCoords.data.get(i * 2 + 1);
			targetIndex += stride;
		}
	}
	,copyToVector: function(target,targetIndex,stride) {
		if(stride == null) {
			stride = 0;
		}
		if(targetIndex == null) {
			targetIndex = 0;
		}
		var numVertices = this.get_numVertices();
		var _g = 0;
		var _g1 = numVertices;
		while(_g < _g1) {
			var i = _g++;
			var value = this.mCoords.data.get(i * 2);
			target.data.set(targetIndex++,value);
			var value1 = this.mCoords.data.get(i * 2 + 1);
			target.data.set(targetIndex++,value1);
			targetIndex += stride;
		}
	}
	,toString: function() {
		var result = "[Polygon \n";
		var numPoints = this.get_numVertices();
		var _g = 0;
		var _g1 = numPoints;
		while(_g < _g1) {
			var i = _g++;
			result += "  [Vertex " + i + ": " + "x=" + Math.round(this.mCoords.data.get(i * 2) * 10) / 10 + ", " + "y=" + Math.round(this.mCoords.data.get(i * 2 + 1) * 10) / 10 + "]" + (i == numPoints - 1 ? "\n" : ",\n");
		}
		return result + "]";
	}
	,get_isSimple: function() {
		var numCoords = this.mCoords.data.get_length();
		if(numCoords <= 6) {
			return true;
		}
		var i = 0;
		while(i < numCoords) {
			var ax = this.mCoords.data.get(i);
			var ay = this.mCoords.data.get(i + 1);
			var bx = this.mCoords.data.get((i + 2) % numCoords);
			var by = this.mCoords.data.get((i + 3) % numCoords);
			var endJ = i + numCoords - 2;
			var j = i + 4;
			while(j < endJ) {
				var cx = this.mCoords.data.get(j % numCoords);
				var cy = this.mCoords.data.get((j + 1) % numCoords);
				var dx = this.mCoords.data.get((j + 2) % numCoords);
				var dy = this.mCoords.data.get((j + 3) % numCoords);
				if(starling_geom_Polygon.areVectorsIntersecting(ax,ay,bx,by,cx,cy,dx,dy)) {
					return false;
				}
				j += 2;
			}
			i += 2;
		}
		return true;
	}
	,get_isConvex: function() {
		var numCoords = this.mCoords.data.get_length();
		if(numCoords < 6) {
			return true;
		} else {
			var i = 0;
			while(i < numCoords) {
				var ax = this.mCoords.data.get(i);
				var ay = this.mCoords.data.get(i + 1);
				var bx = this.mCoords.data.get((i + 2) % numCoords);
				var by = this.mCoords.data.get((i + 3) % numCoords);
				if(!((ay - by) * (this.mCoords.data.get((i + 4) % numCoords) - bx) + (bx - ax) * (this.mCoords.data.get((i + 5) % numCoords) - by) >= 0)) {
					return false;
				}
				i += 2;
			}
		}
		return true;
	}
	,get_area: function() {
		var area = 0;
		var numCoords = this.mCoords.data.get_length();
		if(numCoords >= 6) {
			var i = 0;
			while(i < numCoords) {
				area += this.mCoords.data.get(i) * this.mCoords.data.get((i + 3) % numCoords);
				area -= this.mCoords.data.get(i + 1) * this.mCoords.data.get((i + 2) % numCoords);
				i += 2;
			}
		}
		return area / 2.0;
	}
	,get_numVertices: function() {
		return this.mCoords.data.get_length() / 2 | 0;
	}
	,set_numVertices: function(value) {
		var oldLength = this.get_numVertices();
		this.mCoords.data.set_length(value * 2);
		if(oldLength < value) {
			var _g = oldLength;
			var _g1 = value;
			while(_g < _g1) {
				var i = _g++;
				var this1 = this.mCoords;
				var value1 = this.mCoords.data.set(i * 2 + 1,0.0);
				this1.data.set(i * 2,value1);
			}
		}
		return value;
	}
	,__class__: starling_geom_Polygon
	,__properties__: {set_numVertices:"set_numVertices",get_numVertices:"get_numVertices",get_area:"get_area",get_isConvex:"get_isConvex",get_isSimple:"get_isSimple"}
};
var starling_geom_ImmutablePolygon = function(vertices) {
	starling_geom_Polygon.call(this,vertices);
	this.mFrozen = true;
};
$hxClasses["starling.geom.ImmutablePolygon"] = starling_geom_ImmutablePolygon;
starling_geom_ImmutablePolygon.__name__ = "starling.geom.ImmutablePolygon";
starling_geom_ImmutablePolygon.__super__ = starling_geom_Polygon;
starling_geom_ImmutablePolygon.prototype = $extend(starling_geom_Polygon.prototype,{
	mFrozen: null
	,addVertices: function(args) {
		if(this.mFrozen) {
			throw new js__$Boot_HaxeError(this.getImmutableError());
		} else {
			starling_geom_Polygon.prototype.addVertices.call(this,args);
		}
	}
	,setVertex: function(index,x,y) {
		if(this.mFrozen) {
			throw new js__$Boot_HaxeError(this.getImmutableError());
		} else {
			starling_geom_Polygon.prototype.setVertex.call(this,index,x,y);
		}
	}
	,reverse: function() {
		if(this.mFrozen) {
			throw new js__$Boot_HaxeError(this.getImmutableError());
		} else {
			starling_geom_Polygon.prototype.reverse.call(this);
		}
	}
	,set_numVertices: function(value) {
		if(this.mFrozen) {
			throw new js__$Boot_HaxeError(this.getImmutableError());
		} else {
			starling_geom_Polygon.prototype.reverse.call(this);
		}
		return starling_geom_Polygon.prototype.get_numVertices.call(this);
	}
	,getImmutableError: function() {
		var c = js_Boot.getClass(this);
		var className = c.__name__.split(".").pop();
		var msg = className + " cannot be modified. Call 'clone' to create a mutable copy.";
		return new openfl_errors_IllegalOperationError(msg);
	}
	,__class__: starling_geom_ImmutablePolygon
});
var starling_geom_Ellipse = function(x,y,radiusX,radiusY,numSides) {
	if(numSides == null) {
		numSides = -1;
	}
	this.mX = x;
	this.mY = y;
	this.mRadiusX = radiusX;
	this.mRadiusY = radiusY;
	starling_geom_ImmutablePolygon.call(this,this.getVertices(numSides));
};
$hxClasses["starling.geom.Ellipse"] = starling_geom_Ellipse;
starling_geom_Ellipse.__name__ = "starling.geom.Ellipse";
starling_geom_Ellipse.__super__ = starling_geom_ImmutablePolygon;
starling_geom_Ellipse.prototype = $extend(starling_geom_ImmutablePolygon.prototype,{
	mX: null
	,mY: null
	,mRadiusX: null
	,mRadiusY: null
	,getVertices: function(numSides) {
		if(numSides < 0) {
			numSides = Math.PI * (this.mRadiusX + this.mRadiusY) / 4.0 | 0;
		}
		if(numSides < 6) {
			numSides = 6;
		}
		var vertices = [];
		var angleDelta = 2 * Math.PI / numSides;
		var angle = 0;
		var _g = 0;
		var _g1 = numSides;
		while(_g < _g1) {
			var i = _g++;
			vertices[i * 2] = Math.cos(angle) * this.mRadiusX + this.mX;
			vertices[i * 2 + 1] = Math.sin(angle) * this.mRadiusY + this.mY;
			angle += angleDelta;
		}
		return vertices;
	}
	,triangulate: function(result) {
		if(result == null) {
			result = openfl__$Vector_Vector_$Impl_$.toIntVector(null);
		}
		var from = 1;
		var to = this.get_numVertices() - 1;
		var pos = result.data.get_length();
		var _g = from;
		var _g1 = to;
		while(_g < _g1) {
			var i = _g++;
			result.data.set(pos++,0);
			result.data.set(pos++,i);
			result.data.set(pos++,i + 1);
		}
		return result;
	}
	,contains: function(x,y) {
		var vx = x - this.mX;
		var vy = y - this.mY;
		var a = vx / this.mRadiusX;
		var b = vy / this.mRadiusY;
		return a * a + b * b <= 1;
	}
	,get_area: function() {
		return Math.PI * this.mRadiusX * this.mRadiusY;
	}
	,get_isSimple: function() {
		return true;
	}
	,get_isConvex: function() {
		return true;
	}
	,__class__: starling_geom_Ellipse
});
var starling_geom_Rectangle = function(x,y,width,height) {
	this.mX = x;
	this.mY = y;
	this.mWidth = width;
	this.mHeight = height;
	starling_geom_ImmutablePolygon.call(this,[x,y,x + width,y,x + width,y + height,x,y + height]);
};
$hxClasses["starling.geom.Rectangle"] = starling_geom_Rectangle;
starling_geom_Rectangle.__name__ = "starling.geom.Rectangle";
starling_geom_Rectangle.__super__ = starling_geom_ImmutablePolygon;
starling_geom_Rectangle.prototype = $extend(starling_geom_ImmutablePolygon.prototype,{
	mX: null
	,mY: null
	,mWidth: null
	,mHeight: null
	,triangulate: function(result) {
		if(result == null) {
			result = openfl__$Vector_Vector_$Impl_$.toIntVector(null);
		}
		result.data.push(0);
		result.data.push(1);
		result.data.push(3);
		result.data.push(1);
		result.data.push(2);
		result.data.push(3);
		return result;
	}
	,contains: function(x,y) {
		if(x >= this.mX && x <= this.mX + this.mWidth && y >= this.mY) {
			return y <= this.mY + this.mHeight;
		} else {
			return false;
		}
	}
	,get_area: function() {
		return this.mWidth * this.mHeight;
	}
	,get_isSimple: function() {
		return true;
	}
	,get_isConvex: function() {
		return true;
	}
	,__class__: starling_geom_Rectangle
});
var starling_text_BitmapChar = function(id,texture,xOffset,yOffset,xAdvance) {
	this.mCharID = id;
	this.mTexture = texture;
	this.mXOffset = xOffset;
	this.mYOffset = yOffset;
	this.mXAdvance = xAdvance;
	this.mKernings = null;
};
$hxClasses["starling.text.BitmapChar"] = starling_text_BitmapChar;
starling_text_BitmapChar.__name__ = "starling.text.BitmapChar";
starling_text_BitmapChar.prototype = {
	mTexture: null
	,mCharID: null
	,mXOffset: null
	,mYOffset: null
	,mXAdvance: null
	,mKernings: null
	,addKerning: function(charID,amount) {
		if(this.mKernings == null) {
			this.mKernings = new haxe_ds_IntMap();
		}
		this.mKernings.h[charID] = amount;
	}
	,getKerning: function(charID) {
		if(this.mKernings == null || this.mKernings.h[charID] == null) {
			return 0.0;
		} else {
			return this.mKernings.h[charID];
		}
	}
	,createImage: function() {
		return new starling_display_Image(this.mTexture);
	}
	,get_charID: function() {
		return this.mCharID;
	}
	,get_xOffset: function() {
		return this.mXOffset;
	}
	,get_yOffset: function() {
		return this.mYOffset;
	}
	,get_xAdvance: function() {
		return this.mXAdvance;
	}
	,get_texture: function() {
		return this.mTexture;
	}
	,get_width: function() {
		return this.mTexture.get_width();
	}
	,get_height: function() {
		return this.mTexture.get_height();
	}
	,__class__: starling_text_BitmapChar
	,__properties__: {get_height:"get_height",get_width:"get_width",get_texture:"get_texture",get_xAdvance:"get_xAdvance",get_yOffset:"get_yOffset",get_xOffset:"get_xOffset",get_charID:"get_charID"}
};
var starling_text_BitmapFont = function(texture,fontXml) {
	if(texture == null && fontXml == null) {
		texture = starling_text_MiniBitmapFont.get_texture();
		fontXml = starling_text_MiniBitmapFont.get_xml();
	} else if(texture != null && fontXml == null) {
		throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("fontXml cannot be null!"));
	}
	this.mName = "unknown";
	this.mLineHeight = this.mSize = this.mBaseline = 14;
	this.mOffsetX = this.mOffsetY = 0.0;
	this.mTexture = texture;
	this.mChars = new haxe_ds_IntMap();
	this.mHelperImage = new starling_display_Image(texture);
	this.parseFontXml(fontXml);
};
$hxClasses["starling.text.BitmapFont"] = starling_text_BitmapFont;
starling_text_BitmapFont.__name__ = "starling.text.BitmapFont";
starling_text_BitmapFont.prototype = {
	mTexture: null
	,mChars: null
	,mName: null
	,mSize: null
	,mLineHeight: null
	,mBaseline: null
	,mOffsetX: null
	,mOffsetY: null
	,mHelperImage: null
	,dispose: function() {
		if(this.mTexture != null) {
			this.mTexture.dispose();
		}
	}
	,parseFontXml: function(fontXml) {
		var scale = this.mTexture.get_scale();
		var frame = this.mTexture.get_frame();
		var frameX = frame != null ? frame.x : 0;
		var frameY = frame != null ? frame.y : 0;
		var info = fontXml.elementsNamed("info").next();
		if(info == null) {
			fontXml = fontXml.firstElement();
			info = fontXml.elementsNamed("info").next();
		}
		var common = fontXml.elementsNamed("common").next();
		this.mName = info.get("face");
		this.mSize = parseFloat(info.get("size")) / scale;
		this.mLineHeight = parseFloat(common.get("lineHeight")) / scale;
		this.mBaseline = parseFloat(common.get("base")) / scale;
		if(info.get("smooth") == "0") {
			this.set_smoothing("none");
		}
		if(this.mSize <= 0) {
			haxe_Log.trace("[Starling] Warning: invalid font size in '" + this.mName + "' font.",{ fileName : "starling/text/BitmapFont.hx", lineNumber : 132, className : "starling.text.BitmapFont", methodName : "parseFontXml"});
			this.mSize = this.mSize == 0.0 ? 16.0 : this.mSize * -1.0;
		}
		var chars = fontXml.elementsNamed("chars").next();
		var charElement = chars.elementsNamed("char");
		while(charElement.hasNext()) {
			var charElement1 = charElement.next();
			var id = Std.parseInt(charElement1.get("id"));
			var xOffset = parseFloat(charElement1.get("xoffset")) / scale;
			var yOffset = parseFloat(charElement1.get("yoffset")) / scale;
			var xAdvance = parseFloat(charElement1.get("xadvance")) / scale;
			var region = new openfl_geom_Rectangle();
			region.x = parseFloat(charElement1.get("x")) / scale + frameX;
			region.y = parseFloat(charElement1.get("y")) / scale + frameY;
			region.width = parseFloat(charElement1.get("width")) / scale;
			region.height = parseFloat(charElement1.get("height")) / scale;
			var texture = starling_textures_Texture.fromTexture(this.mTexture,region);
			var bitmapChar = new starling_text_BitmapChar(id,texture,xOffset,yOffset,xAdvance);
			this.addChar(id,bitmapChar);
		}
		if(fontXml.exists("kernings")) {
			var kernings = fontXml.elementsNamed("kernings").next();
			var kerningElement = kernings.elementsNamed("kerning");
			while(kerningElement.hasNext()) {
				var kerningElement1 = kerningElement.next();
				var first = Std.parseInt(kerningElement1.get("first"));
				var second = Std.parseInt(kerningElement1.get("second"));
				var amount = parseFloat(kerningElement1.get("amount")) / scale;
				if(this.mChars.h.hasOwnProperty(second)) {
					this.getChar(second).addKerning(first,amount);
				}
			}
		}
	}
	,getChar: function(charID) {
		return this.mChars.h[charID];
	}
	,addChar: function(charID,bitmapChar) {
		this.mChars.h[charID] = bitmapChar;
	}
	,getCharIDs: function(result) {
		if(result == null) {
			result = openfl__$Vector_Vector_$Impl_$.toIntVector(null);
		}
		var key = this.mChars.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			var index = result.data.get_length();
			result.data.set(index,key1);
		}
		return result;
	}
	,hasChars: function(text) {
		if(text == null) {
			return true;
		}
		var charID;
		var numChars = text.length;
		var _g = 0;
		var _g1 = numChars;
		while(_g < _g1) {
			var i = _g++;
			charID = HxOverrides.cca(text,i);
			if(charID != 32 && charID != 9 && charID != 10 && charID != 13 && this.getChar(charID) == null) {
				return false;
			}
		}
		return true;
	}
	,createSprite: function(width,height,text,fontSize,color,hAlign,vAlign,autoScale,kerning) {
		if(kerning == null) {
			kerning = true;
		}
		if(autoScale == null) {
			autoScale = true;
		}
		if(vAlign == null) {
			vAlign = "center";
		}
		if(hAlign == null) {
			hAlign = "center";
		}
		if(color == null) {
			color = 16777215;
		}
		if(fontSize == null) {
			fontSize = -1;
		}
		var charLocations = this.arrangeChars(width,height,text,fontSize,hAlign,vAlign,autoScale,kerning);
		var numChars = charLocations.data.get_length();
		var sprite = new starling_display_Sprite();
		var _g = 0;
		var _g1 = numChars;
		while(_g < _g1) {
			var i = _g++;
			var charLocation = charLocations.data.get(i);
			var char = charLocation.char.createImage();
			char.set_x(charLocation.x);
			char.set_y(charLocation.y);
			char.set_scaleX(char.set_scaleY(charLocation.scale));
			char.set_color(color);
			sprite.addChild(char);
		}
		starling_text_CharLocation.rechargePool();
		return sprite;
	}
	,fillQuadBatch: function(quadBatch,width,height,text,fontSize,color,hAlign,vAlign,autoScale,kerning,leading) {
		if(leading == null) {
			leading = 0;
		}
		if(kerning == null) {
			kerning = true;
		}
		if(autoScale == null) {
			autoScale = true;
		}
		if(vAlign == null) {
			vAlign = "center";
		}
		if(hAlign == null) {
			hAlign = "center";
		}
		if(color == null) {
			color = 16777215;
		}
		if(fontSize == null) {
			fontSize = -1;
		}
		var charLocations = this.arrangeChars(width,height,text,fontSize,hAlign,vAlign,autoScale,kerning,leading);
		var numChars = charLocations.data.get_length();
		this.mHelperImage.set_color(color);
		var _g = 0;
		var _g1 = numChars;
		while(_g < _g1) {
			var i = _g++;
			var charLocation = charLocations.data.get(i);
			this.mHelperImage.set_texture(charLocation.char.get_texture());
			this.mHelperImage.readjustSize();
			this.mHelperImage.set_x(charLocation.x);
			this.mHelperImage.set_y(charLocation.y);
			this.mHelperImage.set_scaleX(this.mHelperImage.set_scaleY(charLocation.scale));
			quadBatch.addImage(this.mHelperImage);
		}
		starling_text_CharLocation.rechargePool();
	}
	,arrangeChars: function(width,height,text,fontSize,hAlign,vAlign,autoScale,kerning,leading) {
		if(leading == null) {
			leading = 0;
		}
		if(kerning == null) {
			kerning = true;
		}
		if(autoScale == null) {
			autoScale = true;
		}
		if(vAlign == null) {
			vAlign = "center";
		}
		if(hAlign == null) {
			hAlign = "center";
		}
		if(fontSize == null) {
			fontSize = -1;
		}
		if(text == null || text.length == 0) {
			return starling_text_CharLocation.vectorFromPool();
		}
		if(fontSize < 0) {
			fontSize *= -this.mSize;
		}
		var finished = false;
		var charLocation;
		var numChars;
		var containerWidth = 0.0;
		var containerHeight = 0.0;
		var scale = 0.0;
		var currentX = 0;
		var currentY = 0;
		while(!finished) {
			starling_utils_ArrayUtil.clear(starling_text_BitmapFont.sLines);
			scale = fontSize / this.mSize;
			containerWidth = width / scale;
			containerHeight = height / scale;
			if(this.mLineHeight <= containerHeight) {
				var lastWhiteSpace = -1;
				var lastCharID = -1;
				var currentLine = starling_text_CharLocation.vectorFromPool();
				numChars = text.length;
				var i = 0;
				while(i < numChars) {
					var lineFull = false;
					var charID = HxOverrides.cca(text,i);
					var char = this.getChar(charID);
					if(charID == 10 || charID == 13) {
						lineFull = true;
					} else if(char == null) {
						haxe_Log.trace("[Starling] Font: " + this.mName + " missing character: " + text.charAt(i) + " id: " + charID,{ fileName : "starling/text/BitmapFont.hx", lineNumber : 286, className : "starling.text.BitmapFont", methodName : "arrangeChars"});
					} else {
						if(charID == 32 || charID == 9) {
							lastWhiteSpace = i;
						}
						if(kerning) {
							currentX += char.getKerning(lastCharID);
						}
						charLocation = starling_text_CharLocation.instanceFromPool(char);
						charLocation.x = currentX + char.get_xOffset();
						charLocation.y = currentY + char.get_yOffset();
						var index = currentLine.data.get_length();
						currentLine.data.set(index,charLocation);
						currentX += char.get_xAdvance();
						lastCharID = charID;
						if(charLocation.x + char.get_width() > containerWidth) {
							if(autoScale && lastWhiteSpace == -1) {
								break;
							}
							var numCharsToRemove = lastWhiteSpace == -1 ? 1 : i - lastWhiteSpace;
							var _g = 0;
							var _g1 = numCharsToRemove;
							while(_g < _g1) {
								var j = _g++;
								currentLine.data.pop();
							}
							if(currentLine.data.get_length() == 0) {
								break;
							}
							i -= numCharsToRemove;
							lineFull = true;
						}
					}
					if(i == numChars - 1) {
						starling_text_BitmapFont.sLines[starling_text_BitmapFont.sLines.length] = currentLine;
						finished = true;
					} else if(lineFull) {
						starling_text_BitmapFont.sLines[starling_text_BitmapFont.sLines.length] = currentLine;
						if(lastWhiteSpace == i) {
							currentLine.data.pop();
						}
						if(currentY + leading + 2 * this.mLineHeight <= containerHeight) {
							currentLine = starling_text_CharLocation.vectorFromPool();
							currentX = 0;
							currentY += this.mLineHeight + leading;
							lastWhiteSpace = -1;
							lastCharID = -1;
						} else {
							break;
						}
					}
					++i;
				}
			}
			if(autoScale && !finished && fontSize > 3) {
				--fontSize;
			} else {
				finished = true;
			}
		}
		var finalLocations = starling_text_CharLocation.vectorFromPool();
		var numLines = starling_text_BitmapFont.sLines.length;
		var bottom = currentY + this.mLineHeight;
		var yOffset = 0;
		if(vAlign == "bottom") {
			yOffset = containerHeight - bottom | 0;
		} else if(vAlign == "center") {
			yOffset = (containerHeight - bottom) / 2 | 0;
		}
		var _g2 = 0;
		var _g11 = numLines;
		while(_g2 < _g11) {
			var lineID = _g2++;
			var line = starling_text_BitmapFont.sLines[lineID];
			numChars = line.data.get_length();
			if(numChars == 0) {
				continue;
			}
			var xOffset = 0;
			var index1 = line.data.get_length() - 1;
			var lastLocation = line.data.get(index1);
			var right = lastLocation.x - lastLocation.char.get_xOffset() + lastLocation.char.get_xAdvance();
			if(hAlign == "right") {
				xOffset = containerWidth - right | 0;
			} else if(hAlign == "center") {
				xOffset = (containerWidth - right) / 2 | 0;
			}
			var _g3 = 0;
			var _g12 = numChars;
			while(_g3 < _g12) {
				var c = _g3++;
				charLocation = line.data.get(c);
				charLocation.x = scale * (charLocation.x + xOffset + this.mOffsetX);
				charLocation.y = scale * (charLocation.y + yOffset + this.mOffsetY);
				charLocation.scale = scale;
				if(charLocation.char.get_width() > 0 && charLocation.char.get_height() > 0) {
					var index2 = finalLocations.data.get_length();
					finalLocations.data.set(index2,charLocation);
				}
			}
		}
		return finalLocations;
	}
	,get_name: function() {
		return this.mName;
	}
	,get_size: function() {
		return this.mSize;
	}
	,get_lineHeight: function() {
		return this.mLineHeight;
	}
	,set_lineHeight: function(value) {
		this.mLineHeight = value;
	}
	,get_smoothing: function() {
		return this.mHelperImage.get_smoothing();
	}
	,set_smoothing: function(value) {
		return this.mHelperImage.set_smoothing(value);
	}
	,get_baseline: function() {
		return this.mBaseline;
	}
	,set_baseline: function(value) {
		return this.mBaseline = value;
	}
	,get_offsetX: function() {
		return this.mOffsetX;
	}
	,set_offsetX: function(value) {
		return this.mOffsetX = value;
	}
	,get_offsetY: function() {
		return this.mOffsetY;
	}
	,set_offsetY: function(value) {
		return this.mOffsetY = value;
	}
	,get_texture: function() {
		return this.mTexture;
	}
	,__class__: starling_text_BitmapFont
	,__properties__: {set_offsetX:"set_offsetX",get_offsetX:"get_offsetX",set_baseline:"set_baseline",get_baseline:"get_baseline",set_smoothing:"set_smoothing",get_smoothing:"get_smoothing",get_lineHeight:"get_lineHeight",get_size:"get_size",get_name:"get_name"}
};
var starling_text_CharLocation = function(char) {
	this.reset(char);
};
$hxClasses["starling.text.CharLocation"] = starling_text_CharLocation;
starling_text_CharLocation.__name__ = "starling.text.CharLocation";
starling_text_CharLocation.instanceFromPool = function(char) {
	var instance = starling_text_CharLocation.sInstancePool.data.get_length() > 0 ? starling_text_CharLocation.sInstancePool.data.pop() : new starling_text_CharLocation(char);
	instance.reset(char);
	var this1 = starling_text_CharLocation.sInstanceLoan;
	var index = starling_text_CharLocation.sInstanceLoan.data.get_length();
	this1.data.set(index,instance);
	return instance;
};
starling_text_CharLocation.vectorFromPool = function() {
	var vector = starling_text_CharLocation.sVectorPool.length > 0 ? starling_text_CharLocation.sVectorPool.pop() : openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	vector.data.set_length(0);
	starling_text_CharLocation.sVectorLoan[starling_text_CharLocation.sVectorLoan.length] = vector;
	return vector;
};
starling_text_CharLocation.rechargePool = function() {
	var instance;
	var vector;
	while(starling_text_CharLocation.sInstanceLoan.data.get_length() > 0) {
		instance = starling_text_CharLocation.sInstanceLoan.data.pop();
		instance.char = null;
		var this1 = starling_text_CharLocation.sInstancePool;
		var index = starling_text_CharLocation.sInstancePool.data.get_length();
		this1.data.set(index,instance);
	}
	while(starling_text_CharLocation.sVectorLoan.length > 0) {
		vector = starling_text_CharLocation.sVectorLoan.pop();
		vector.data.set_length(0);
		starling_text_CharLocation.sVectorPool[starling_text_CharLocation.sVectorPool.length] = vector;
	}
};
starling_text_CharLocation.prototype = {
	char: null
	,scale: null
	,x: null
	,y: null
	,reset: function(char) {
		this.char = char;
		return this;
	}
	,__class__: starling_text_CharLocation
};
var starling_text_MiniBitmapFont = function() { };
$hxClasses["starling.text.MiniBitmapFont"] = starling_text_MiniBitmapFont;
starling_text_MiniBitmapFont.__name__ = "starling.text.MiniBitmapFont";
starling_text_MiniBitmapFont.__properties__ = {get_xml:"get_xml",get_texture:"get_texture"};
starling_text_MiniBitmapFont.get_texture = function() {
	var bitmapData = starling_text_MiniBitmapFont.getBitmapData();
	var texture = starling_textures_Texture.fromBitmapData(bitmapData,false);
	bitmapData.dispose();
	bitmapData = null;
	texture.get_root().set_onRestore(function() {
		bitmapData = starling_text_MiniBitmapFont.getBitmapData();
		texture.get_root().uploadBitmapData(bitmapData);
		bitmapData.dispose();
		bitmapData = null;
	});
	return texture;
};
starling_text_MiniBitmapFont.getBitmapData = function() {
	var bmpData = new openfl_display_BitmapData(128,64);
	var this1 = new openfl_utils_ByteArrayData(0);
	var bmpBytes = this1;
	var numBytes = starling_text_MiniBitmapFont.BITMAP_DATA.length;
	bmpBytes.__endian = 0;
	var _g = 0;
	var _g1 = numBytes;
	while(_g < _g1) {
		var i = _g++;
		bmpBytes.writeUnsignedInt(starling_text_MiniBitmapFont.BITMAP_DATA[i]);
	}
	bmpBytes.uncompress();
	bmpData.setPixels(new openfl_geom_Rectangle(0,0,128,64),bmpBytes);
	bmpBytes.clear();
	return bmpData;
};
starling_text_MiniBitmapFont.get_xml = function() {
	return starling_text_MiniBitmapFont.XML_DATA;
};
var starling_text_TextField = function(width,height,text,fontName,fontSize,color,bold) {
	if(bold == null) {
		bold = false;
	}
	if(color == null) {
		color = 0;
	}
	if(fontSize == null) {
		fontSize = 12;
	}
	if(fontName == null) {
		fontName = "_sans";
	}
	starling_display_DisplayObjectContainer.call(this);
	this.mText = text != null ? text : "";
	this.mFontSize = fontSize;
	this.mColor = color;
	this.mHAlign = "center";
	this.mVAlign = "center";
	this.mBorder = null;
	this.mKerning = true;
	this.mLeading = 0.0;
	this.mBold = bold;
	this.mAutoSize = "none";
	this.mHitArea = new openfl_geom_Rectangle(0,0,width,height);
	this.set_fontName(fontName);
	this.addEventListener("flatten",$bind(this,this.onFlatten));
};
$hxClasses["starling.text.TextField"] = starling_text_TextField;
starling_text_TextField.__name__ = "starling.text.TextField";
starling_text_TextField.__properties__ = {get_bitmapFonts:"get_bitmapFonts",set_defaultTextureFormat:"set_defaultTextureFormat",get_defaultTextureFormat:"get_defaultTextureFormat"};
starling_text_TextField.get_defaultTextureFormat = function() {
	return starling_text_TextField.sDefaultTextureFormat;
};
starling_text_TextField.set_defaultTextureFormat = function(value) {
	return starling_text_TextField.sDefaultTextureFormat = value;
};
starling_text_TextField.registerBitmapFont = function(bitmapFont,name) {
	if(name == null) {
		name = bitmapFont.get_name();
	}
	var this1 = starling_text_TextField.get_bitmapFonts();
	var k = starling_text_TextField.convertToLowerCase(name);
	var _this = this1;
	if(__map_reserved[k] != null) {
		_this.setReserved(k,bitmapFont);
	} else {
		_this.h[k] = bitmapFont;
	}
	return name;
};
starling_text_TextField.unregisterBitmapFont = function(name,dispose) {
	if(dispose == null) {
		dispose = true;
	}
	name = starling_text_TextField.convertToLowerCase(name);
	var tmp;
	if(dispose) {
		var _this = starling_text_TextField.get_bitmapFonts();
		tmp = (__map_reserved[name] != null ? _this.getReserved(name) : _this.h[name]) != null;
	} else {
		tmp = false;
	}
	if(tmp) {
		var _this1 = starling_text_TextField.get_bitmapFonts();
		(__map_reserved[name] != null ? _this1.getReserved(name) : _this1.h[name]).dispose();
	}
	starling_text_TextField.get_bitmapFonts().remove(name);
};
starling_text_TextField.getBitmapFont = function(name) {
	var this1 = starling_text_TextField.get_bitmapFonts();
	var key = starling_text_TextField.convertToLowerCase(name);
	var _this = this1;
	if(__map_reserved[key] != null) {
		return _this.getReserved(key);
	} else {
		return _this.h[key];
	}
};
starling_text_TextField.get_bitmapFonts = function() {
	var _this = starling_core_Starling.get_current().get_contextData();
	var fonts = __map_reserved["starling.display.TextField.BitmapFonts"] != null ? _this.getReserved("starling.display.TextField.BitmapFonts") : _this.h["starling.display.TextField.BitmapFonts"];
	if(fonts == null) {
		fonts = new haxe_ds_StringMap();
		var _this1 = starling_core_Starling.get_current().get_contextData();
		if(__map_reserved["starling.display.TextField.BitmapFonts"] != null) {
			_this1.setReserved("starling.display.TextField.BitmapFonts",fonts);
		} else {
			_this1.h["starling.display.TextField.BitmapFonts"] = fonts;
		}
	}
	return fonts;
};
starling_text_TextField.convertToLowerCase = function(string) {
	var _this = starling_text_TextField.sStringCache;
	var result = __map_reserved[string] != null ? _this.getReserved(string) : _this.h[string];
	if(result == null) {
		result = string.toLowerCase();
		var _this1 = starling_text_TextField.sStringCache;
		if(__map_reserved[string] != null) {
			_this1.setReserved(string,result);
		} else {
			_this1.h[string] = result;
		}
	}
	return result;
};
starling_text_TextField.__super__ = starling_display_DisplayObjectContainer;
starling_text_TextField.prototype = $extend(starling_display_DisplayObjectContainer.prototype,{
	mFontSize: null
	,mColor: null
	,mText: null
	,mFontName: null
	,mHAlign: null
	,mVAlign: null
	,mBold: null
	,mItalic: null
	,mUnderline: null
	,mAutoScale: null
	,mAutoSize: null
	,mKerning: null
	,mLeading: null
	,mNativeFilters: null
	,mRequiresRedraw: null
	,mIsHtmlText: null
	,mTextBounds: null
	,mBatchable: null
	,mHitArea: null
	,mBorder: null
	,mImage: null
	,mQuadBatch: null
	,dispose: function() {
		this.removeEventListener("flatten",$bind(this,this.onFlatten));
		if(this.mImage != null) {
			this.mImage.get_texture().dispose();
		}
		if(this.mQuadBatch != null) {
			this.mQuadBatch.dispose();
		}
		starling_display_DisplayObjectContainer.prototype.dispose.call(this);
	}
	,onFlatten: function(e) {
		if(this.mRequiresRedraw) {
			this.redraw();
		}
	}
	,render: function(support,parentAlpha) {
		if(this.mRequiresRedraw) {
			this.redraw();
		}
		starling_display_DisplayObjectContainer.prototype.render.call(this,support,parentAlpha);
	}
	,redraw: function() {
		if(this.mRequiresRedraw) {
			if(starling_text_TextField.getBitmapFont(this.mFontName) != null) {
				this.createComposedContents();
			} else {
				this.createRenderedContents();
			}
			this.updateBorder();
			this.mRequiresRedraw = false;
		}
	}
	,createRenderedContents: function() {
		var _gthis = this;
		if(this.mQuadBatch != null) {
			this.mQuadBatch.removeFromParent(true);
			this.mQuadBatch = null;
		}
		if(this.mTextBounds == null) {
			this.mTextBounds = new openfl_geom_Rectangle();
		}
		var texture;
		var scale = starling_core_Starling.get_current().get_contentScaleFactor();
		var bitmapData = this.renderText(scale,this.mTextBounds);
		var format = starling_text_TextField.sDefaultTextureFormat;
		var maxTextureSize = starling_textures_Texture.get_maxSize();
		var shrinkHelper = 0;
		while(bitmapData.width > maxTextureSize || bitmapData.height > maxTextureSize) {
			scale *= Math.min((maxTextureSize - shrinkHelper) / bitmapData.width,(maxTextureSize - shrinkHelper) / bitmapData.height);
			bitmapData.dispose();
			bitmapData = this.renderText(scale,this.mTextBounds);
			++shrinkHelper;
		}
		this.mHitArea.width = bitmapData.width / scale;
		this.mHitArea.height = bitmapData.height / scale;
		texture = starling_textures_Texture.fromBitmapData(bitmapData,false,false,scale,format);
		texture.get_root().set_onRestore(function() {
			if(_gthis.mTextBounds == null) {
				_gthis.mTextBounds = new openfl_geom_Rectangle();
			}
			bitmapData = _gthis.renderText(scale,_gthis.mTextBounds);
			texture.get_root().uploadBitmapData(bitmapData);
			bitmapData.dispose();
			bitmapData = null;
		});
		bitmapData.dispose();
		bitmapData = null;
		if(this.mImage == null) {
			this.mImage = new starling_display_Image(texture);
			this.mImage.set_touchable(false);
			this.addChild(this.mImage);
		} else {
			this.mImage.get_texture().dispose();
			this.mImage.set_texture(texture);
			this.mImage.readjustSize();
		}
	}
	,formatText: function(textField,textFormat) {
	}
	,requireRedraw: function() {
		this.mRequiresRedraw = true;
	}
	,renderText: function(scale,resultTextBounds) {
		var width = this.mHitArea.width * scale;
		var height = this.mHitArea.height * scale;
		var hAlign = this.mHAlign;
		var vAlign = this.mVAlign;
		if(this.get_isHorizontalAutoSize()) {
			width = 2147483647;
			hAlign = "left";
		}
		if(this.get_isVerticalAutoSize()) {
			height = 2147483647;
			vAlign = "top";
		}
		var textFormat = new openfl_text_TextFormat(this.mFontName,this.mFontSize * scale | 0,this.mColor,this.mBold,this.mItalic,this.mUnderline,null,null,openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.fromString(hAlign));
		textFormat.kerning = this.mKerning;
		textFormat.leading = this.mLeading | 0;
		starling_text_TextField.sNativeTextField.set_defaultTextFormat(textFormat);
		starling_text_TextField.sNativeTextField.set_width(width);
		starling_text_TextField.sNativeTextField.set_height(height);
		starling_text_TextField.sNativeTextField.set_antiAliasType(0);
		starling_text_TextField.sNativeTextField.set_selectable(false);
		starling_text_TextField.sNativeTextField.set_multiline(true);
		starling_text_TextField.sNativeTextField.set_wordWrap(true);
		if(this.mIsHtmlText) {
			starling_text_TextField.sNativeTextField.set_htmlText(this.mText);
		} else {
			starling_text_TextField.sNativeTextField.set_text(this.mText);
		}
		starling_text_TextField.sNativeTextField.set_embedFonts(true);
		starling_text_TextField.sNativeTextField.set_filters(this.mNativeFilters);
		if(starling_text_TextField.sNativeTextField.get_textWidth() == 0.0 || starling_text_TextField.sNativeTextField.get_textHeight() == 0.0) {
			starling_text_TextField.sNativeTextField.set_embedFonts(false);
		}
		this.formatText(starling_text_TextField.sNativeTextField,textFormat);
		if(this.mAutoScale) {
			this.autoScaleNativeTextField(starling_text_TextField.sNativeTextField);
		}
		var textWidth = starling_text_TextField.sNativeTextField.get_textWidth();
		var textHeight = starling_text_TextField.sNativeTextField.get_textHeight();
		if(this.get_isHorizontalAutoSize()) {
			width = Math.ceil(textWidth + 5);
			starling_text_TextField.sNativeTextField.set_width(width);
		}
		if(this.get_isVerticalAutoSize()) {
			height = Math.ceil(textHeight + 4);
			starling_text_TextField.sNativeTextField.set_height(height);
		}
		if(width < 1) {
			width = 1.0;
		}
		if(height < 1) {
			height = 1.0;
		}
		var textOffsetX = 0.0;
		if(hAlign == "left") {
			textOffsetX = 2;
		} else if(hAlign == "center") {
			textOffsetX = (width - textWidth) / 2.0;
		} else if(hAlign == "right") {
			textOffsetX = width - textWidth - 2;
		}
		var textOffsetY = 0.0;
		if(vAlign == "top") {
			textOffsetY = 2;
		} else if(vAlign == "center") {
			textOffsetY = (height - textHeight) / 2.0;
		} else if(vAlign == "bottom") {
			textOffsetY = height - textHeight - 2;
		}
		var filterOffset = this.calculateFilterOffset(starling_text_TextField.sNativeTextField,hAlign,vAlign);
		var bitmapData = new openfl_display_BitmapData(width | 0,height | 0,true,0);
		var drawMatrix = new openfl_geom_Matrix(1,0,0,1,filterOffset.x,filterOffset.y + (textOffsetY | 0) - 2);
		bitmapData.drawWithQuality(starling_text_TextField.sNativeTextField,drawMatrix,null,null,null,false,3);
		starling_text_TextField.sNativeTextField.set_text("");
		resultTextBounds.setTo((textOffsetX + filterOffset.x) / scale,(textOffsetY + filterOffset.y) / scale,textWidth / scale,textHeight / scale);
		return bitmapData;
	}
	,autoScaleNativeTextField: function(textField) {
		var size = textField.get_defaultTextFormat().size | 0;
		var maxHeight = textField.get_height() - 4 | 0;
		var maxWidth = textField.get_width() - 4 | 0;
		while(textField.get_textWidth() > maxWidth || textField.get_textHeight() > maxHeight) {
			if(size <= 4) {
				break;
			}
			var format = textField.get_defaultTextFormat();
			format.size = size--;
			textField.set_defaultTextFormat(format);
			if(this.mIsHtmlText) {
				textField.set_htmlText(this.mText);
			} else {
				textField.set_text(this.mText);
			}
		}
	}
	,calculateFilterOffset: function(textField,hAlign,vAlign) {
		var resultOffset = new openfl_geom_Point();
		var filters = textField.get_filters();
		if(filters != null && filters.length > 0) {
			var textWidth = textField.get_textWidth();
			var textHeight = textField.get_textHeight();
			var bounds = new openfl_geom_Rectangle();
			var _g = 0;
			while(_g < filters.length) {
				var filter = filters[_g];
				++_g;
				var blurX = 0;
				var blurY = 0;
				var angleDeg = 0;
				var distance = 0;
				if(((filter) instanceof openfl_filters_BlurFilter)) {
					var f = filter;
					blurX = f.get_blurX();
					blurY = f.get_blurY();
				} else if(((filter) instanceof openfl_filters_DropShadowFilter)) {
					var f1 = filter;
					blurX = f1.get_blurX();
					blurY = f1.get_blurY();
				}
				var angle = starling_utils_MathUtil.deg2rad(angleDeg);
				var marginX = blurX * 1.33;
				var marginY = blurY * 1.33;
				var offsetX = Math.cos(angle) * distance - marginX / 2.0;
				var offsetY = Math.sin(angle) * distance - marginY / 2.0;
				var filterBounds = new openfl_geom_Rectangle(offsetX,offsetY,textWidth + marginX,textHeight + marginY);
				bounds = bounds.union(filterBounds);
			}
			if(hAlign == "left" && bounds.x < 0) {
				resultOffset.x = -bounds.x;
			} else if(hAlign == "right" && bounds.y > 0) {
				resultOffset.x = -(bounds.get_right() - textWidth);
			}
			if(vAlign == "top" && bounds.y < 0) {
				resultOffset.y = -bounds.y;
			} else if(vAlign == "bottom" && bounds.y > 0) {
				resultOffset.y = -(bounds.get_bottom() - textHeight);
			}
		}
		return resultOffset;
	}
	,createComposedContents: function() {
		if(this.mImage != null) {
			this.mImage.removeFromParent(true);
			this.mImage.get_texture().dispose();
			this.mImage = null;
		}
		if(this.mQuadBatch == null) {
			this.mQuadBatch = new starling_display_QuadBatch();
			this.mQuadBatch.set_touchable(false);
			this.addChild(this.mQuadBatch);
		} else {
			this.mQuadBatch.reset();
		}
		var bitmapFont = starling_text_TextField.getBitmapFont(this.mFontName);
		if(bitmapFont == null) {
			throw new js__$Boot_HaxeError(new openfl_errors_Error("Bitmap font not registered: " + this.mFontName));
		}
		var width = this.mHitArea.width;
		var height = this.mHitArea.height;
		var hAlign = this.mHAlign;
		var vAlign = this.mVAlign;
		if(this.get_isHorizontalAutoSize()) {
			width = 2147483647;
			hAlign = "left";
		}
		if(this.get_isVerticalAutoSize()) {
			height = 2147483647;
			vAlign = "top";
		}
		bitmapFont.fillQuadBatch(this.mQuadBatch,width,height,this.mText,this.mFontSize,this.mColor,hAlign,vAlign,this.mAutoScale,this.mKerning,this.mLeading);
		this.mQuadBatch.set_batchable(this.mBatchable);
		if(this.mAutoSize != "none") {
			this.mTextBounds = this.mQuadBatch.getBounds(this.mQuadBatch,this.mTextBounds);
			if(this.get_isHorizontalAutoSize()) {
				this.mHitArea.width = this.mTextBounds.x + this.mTextBounds.width;
			}
			if(this.get_isVerticalAutoSize()) {
				this.mHitArea.height = this.mTextBounds.y + this.mTextBounds.height;
			}
		} else {
			this.mTextBounds = null;
		}
	}
	,updateBorder: function() {
		if(this.mBorder == null) {
			return;
		}
		var width = this.mHitArea.width;
		var height = this.mHitArea.height;
		var topLine = js_Boot.__cast(this.mBorder.getChildAt(0) , starling_display_Quad);
		var rightLine = js_Boot.__cast(this.mBorder.getChildAt(1) , starling_display_Quad);
		var bottomLine = js_Boot.__cast(this.mBorder.getChildAt(2) , starling_display_Quad);
		var leftLine = js_Boot.__cast(this.mBorder.getChildAt(3) , starling_display_Quad);
		topLine.set_width(width);
		topLine.set_height(1);
		bottomLine.set_width(width);
		bottomLine.set_height(1);
		leftLine.set_width(1);
		leftLine.set_height(height);
		rightLine.set_width(1);
		rightLine.set_height(height);
		rightLine.set_x(width - 1);
		bottomLine.set_y(height - 1);
		topLine.set_color(rightLine.set_color(bottomLine.set_color(leftLine.set_color(this.mColor))));
	}
	,get_isHorizontalAutoSize: function() {
		if(this.mAutoSize != "horizontal") {
			return this.mAutoSize == "bothDirections";
		} else {
			return true;
		}
	}
	,get_isVerticalAutoSize: function() {
		if(this.mAutoSize != "vertical") {
			return this.mAutoSize == "bothDirections";
		} else {
			return true;
		}
	}
	,get_textBounds: function() {
		if(this.mRequiresRedraw) {
			this.redraw();
		}
		if(this.mTextBounds == null) {
			this.mTextBounds = this.mQuadBatch.getBounds(this.mQuadBatch);
		}
		return this.mTextBounds.clone();
	}
	,getBounds: function(targetSpace,resultRect) {
		if(this.mRequiresRedraw) {
			this.redraw();
		}
		this.getTransformationMatrix(targetSpace,starling_text_TextField.sHelperMatrix);
		return starling_utils_RectangleUtil.getBounds(this.mHitArea,starling_text_TextField.sHelperMatrix,resultRect);
	}
	,hitTest: function(localPoint,forTouch) {
		if(forTouch == null) {
			forTouch = false;
		}
		if(forTouch && (!this.get_visible() || !this.get_touchable())) {
			return null;
		} else if(this.mHitArea.containsPoint(localPoint) && this.hitTestMask(localPoint)) {
			return this;
		} else {
			return null;
		}
	}
	,set_width: function(value) {
		this.mHitArea.width = value;
		this.mRequiresRedraw = true;
		return value;
	}
	,set_height: function(value) {
		this.mHitArea.height = value;
		this.mRequiresRedraw = true;
		return value;
	}
	,get_text: function() {
		return this.mText;
	}
	,set_text: function(value) {
		if(value == null) {
			value = "";
		}
		if(this.mText != value) {
			this.mText = value;
			this.mRequiresRedraw = true;
		}
		return value;
	}
	,get_fontName: function() {
		return this.mFontName;
	}
	,set_fontName: function(value) {
		if(this.mFontName != value) {
			var tmp;
			if(value == "mini") {
				var _this = starling_text_TextField.get_bitmapFonts();
				tmp = (__map_reserved[value] != null ? _this.getReserved(value) : _this.h[value]) == null;
			} else {
				tmp = false;
			}
			if(tmp) {
				starling_text_TextField.registerBitmapFont(new starling_text_BitmapFont());
			}
			this.mFontName = value;
			this.mRequiresRedraw = true;
		}
		return value;
	}
	,get_fontSize: function() {
		return this.mFontSize;
	}
	,set_fontSize: function(value) {
		if(this.mFontSize != value) {
			this.mFontSize = value;
			this.mRequiresRedraw = true;
		}
		return value;
	}
	,get_color: function() {
		return this.mColor;
	}
	,set_color: function(value) {
		if(this.mColor != value) {
			this.mColor = value;
			this.mRequiresRedraw = true;
		}
		return value;
	}
	,get_hAlign: function() {
		return this.mHAlign;
	}
	,set_hAlign: function(value) {
		if(!starling_utils_HAlign.isValid(value)) {
			throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Invalid horizontal align: " + value));
		}
		if(this.mHAlign != value) {
			this.mHAlign = value;
			this.mRequiresRedraw = true;
		}
		return value;
	}
	,get_vAlign: function() {
		return this.mVAlign;
	}
	,set_vAlign: function(value) {
		if(!starling_utils_VAlign.isValid(value)) {
			throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Invalid vertical align: " + value));
		}
		if(this.mVAlign != value) {
			this.mVAlign = value;
			this.mRequiresRedraw = true;
		}
		return value;
	}
	,get_border: function() {
		return this.mBorder != null;
	}
	,set_border: function(value) {
		if(value && this.mBorder == null) {
			this.mBorder = new starling_display_Sprite();
			this.addChild(this.mBorder);
			this.mBorder.addChild(new starling_display_Quad(1.0,1.0));
			this.mBorder.addChild(new starling_display_Quad(1.0,1.0));
			this.mBorder.addChild(new starling_display_Quad(1.0,1.0));
			this.mBorder.addChild(new starling_display_Quad(1.0,1.0));
			this.updateBorder();
		} else if(!value && this.mBorder != null) {
			this.mBorder.removeFromParent(true);
			this.mBorder = null;
		}
		return value;
	}
	,get_bold: function() {
		return this.mBold;
	}
	,set_bold: function(value) {
		if(this.mBold != value) {
			this.mBold = value;
			this.mRequiresRedraw = true;
		}
		return value;
	}
	,get_italic: function() {
		return this.mItalic;
	}
	,set_italic: function(value) {
		if(this.mItalic != value) {
			this.mItalic = value;
			this.mRequiresRedraw = true;
		}
		return value;
	}
	,get_underline: function() {
		return this.mUnderline;
	}
	,set_underline: function(value) {
		if(this.mUnderline != value) {
			this.mUnderline = value;
			this.mRequiresRedraw = true;
		}
		return value;
	}
	,get_kerning: function() {
		return this.mKerning;
	}
	,set_kerning: function(value) {
		if(this.mKerning != value) {
			this.mKerning = value;
			this.mRequiresRedraw = true;
		}
		return value;
	}
	,get_autoScale: function() {
		return this.mAutoScale;
	}
	,set_autoScale: function(value) {
		if(this.mAutoScale != value) {
			this.mAutoScale = value;
			this.mRequiresRedraw = true;
		}
		return value;
	}
	,get_autoSize: function() {
		return this.mAutoSize;
	}
	,set_autoSize: function(value) {
		if(this.mAutoSize != value) {
			this.mAutoSize = value;
			this.mRequiresRedraw = true;
		}
		return value;
	}
	,get_batchable: function() {
		return this.mBatchable;
	}
	,set_batchable: function(value) {
		this.mBatchable = value;
		if(this.mQuadBatch != null) {
			this.mQuadBatch.set_batchable(value);
		}
		return value;
	}
	,get_nativeFilters: function() {
		return this.mNativeFilters;
	}
	,set_nativeFilters: function(value) {
		this.mNativeFilters = value.slice();
		this.mRequiresRedraw = true;
		return value;
	}
	,get_isHtmlText: function() {
		return this.mIsHtmlText;
	}
	,set_isHtmlText: function(value) {
		if(this.mIsHtmlText != value) {
			this.mIsHtmlText = value;
			this.mRequiresRedraw = true;
		}
		return value;
	}
	,get_leading: function() {
		return this.mLeading;
	}
	,set_leading: function(value) {
		if(this.mLeading != value) {
			this.mLeading = value;
			this.mRequiresRedraw = true;
		}
		return value;
	}
	,__class__: starling_text_TextField
	,__properties__: $extend(starling_display_DisplayObjectContainer.prototype.__properties__,{set_leading:"set_leading",get_leading:"get_leading",set_isHtmlText:"set_isHtmlText",get_isHtmlText:"get_isHtmlText",set_nativeFilters:"set_nativeFilters",get_nativeFilters:"get_nativeFilters",set_batchable:"set_batchable",get_batchable:"get_batchable",set_autoSize:"set_autoSize",get_autoSize:"get_autoSize",set_autoScale:"set_autoScale",get_autoScale:"get_autoScale",set_kerning:"set_kerning",get_kerning:"get_kerning",set_underline:"set_underline",get_underline:"get_underline",set_italic:"set_italic",get_italic:"get_italic",set_bold:"set_bold",get_bold:"get_bold",set_border:"set_border",get_border:"get_border",set_vAlign:"set_vAlign",get_vAlign:"get_vAlign",set_hAlign:"set_hAlign",get_hAlign:"get_hAlign",set_color:"set_color",get_color:"get_color",set_fontSize:"set_fontSize",get_fontSize:"get_fontSize",set_fontName:"set_fontName",get_fontName:"get_fontName",set_text:"set_text",get_text:"get_text",get_textBounds:"get_textBounds",get_isVerticalAutoSize:"get_isVerticalAutoSize",get_isHorizontalAutoSize:"get_isHorizontalAutoSize"})
});
var starling_text_TextFieldAutoSize = function() { };
$hxClasses["starling.text.TextFieldAutoSize"] = starling_text_TextFieldAutoSize;
starling_text_TextFieldAutoSize.__name__ = "starling.text.TextFieldAutoSize";
var starling_textures_AtfData = function(data) {
	if(!starling_textures_AtfData.isAtfData(data)) {
		throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Invalid ATF data"));
	}
	if(data.b[6] == 255) {
		data.position = 12;
	} else {
		data.position = 6;
	}
	var format = data.readUnsignedByte();
	switch(format & 127) {
	case 0:case 1:
		this.mFormat = 1;
		break;
	case 2:case 3:case 12:
		this.mFormat = 3;
		break;
	case 4:case 5:case 13:
		this.mFormat = 4;
		break;
	default:
		throw new js__$Boot_HaxeError(new openfl_errors_Error("Invalid ATF format"));
	}
	this.mWidth = Math.pow(2,data.readUnsignedByte()) | 0;
	this.mHeight = Math.pow(2,data.readUnsignedByte()) | 0;
	this.mNumTextures = data.readUnsignedByte();
	this.mIsCubeMap = (format & 128) != 0;
	this.mData = data;
	if(data.b[5] != 0 && data.b[6] == 255) {
		var emptyMipmaps = (data.b[5] & 1) == 1;
		var numTextures = data.b[5] >> 1 & 127;
		this.mNumTextures = emptyMipmaps ? 1 : numTextures;
	}
};
$hxClasses["starling.textures.AtfData"] = starling_textures_AtfData;
starling_textures_AtfData.__name__ = "starling.textures.AtfData";
starling_textures_AtfData.isAtfData = function(data) {
	if(data.length < 3) {
		return false;
	} else {
		var signature = "";
		var code = data.b[0];
		signature += String.fromCodePoint(code);
		var code1 = data.b[1];
		signature += String.fromCodePoint(code1);
		var code2 = data.b[2];
		signature += String.fromCodePoint(code2);
		return signature == "ATF";
	}
};
starling_textures_AtfData.prototype = {
	mFormat: null
	,mWidth: null
	,mHeight: null
	,mNumTextures: null
	,mIsCubeMap: null
	,mData: null
	,get_format: function() {
		return this.mFormat;
	}
	,get_width: function() {
		return this.mWidth;
	}
	,get_height: function() {
		return this.mHeight;
	}
	,get_numTextures: function() {
		return this.mNumTextures;
	}
	,get_isCubeMap: function() {
		return this.mIsCubeMap;
	}
	,get_data: function() {
		return this.mData;
	}
	,__class__: starling_textures_AtfData
	,__properties__: {get_data:"get_data",get_isCubeMap:"get_isCubeMap",get_numTextures:"get_numTextures",get_height:"get_height",get_width:"get_width",get_format:"get_format"}
};
var starling_textures_Texture = function() {
};
$hxClasses["starling.textures.Texture"] = starling_textures_Texture;
starling_textures_Texture.__name__ = "starling.textures.Texture";
starling_textures_Texture.__properties__ = {get_maxSize:"get_maxSize"};
starling_textures_Texture.fromData = function(data,options) {
	var texture = null;
	if(((data) instanceof openfl_display_Bitmap)) {
		data = (js_Boot.__cast(data , openfl_display_Bitmap)).get_bitmapData();
	}
	if(options == null) {
		options = new starling_textures_TextureOptions();
	}
	if(js_Boot.__instanceof(data,Class)) {
		texture = starling_textures_Texture.fromEmbeddedAsset(data,options.get_mipMapping(),options.get_optimizeForRenderToTexture(),options.get_scale(),options.get_format(),options.get_repeat());
	} else if(((data) instanceof openfl_display_BitmapData)) {
		texture = starling_textures_Texture.fromBitmapData(data,options.get_mipMapping(),options.get_optimizeForRenderToTexture(),options.get_scale(),options.get_format(),options.get_repeat());
	} else if(((data) instanceof openfl_utils_ByteArrayData)) {
		texture = starling_textures_Texture.fromAtfData(data,options.get_scale(),options.get_mipMapping(),options.get_onReady(),options.get_repeat());
	} else {
		throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Unsupported 'data' type: " + data.__name__));
	}
	return texture;
};
starling_textures_Texture.fromEmbeddedAsset = function(assetClass,mipMapping,optimizeForRenderToTexture,scale,format,repeat) {
	if(repeat == null) {
		repeat = false;
	}
	if(format == null) {
		format = 1;
	}
	if(scale == null) {
		scale = 1;
	}
	if(optimizeForRenderToTexture == null) {
		optimizeForRenderToTexture = false;
	}
	if(mipMapping == null) {
		mipMapping = true;
	}
	var texture;
	var asset = Object.create(assetClass.prototype);
	if(((asset) instanceof openfl_display_Bitmap)) {
		texture = starling_textures_Texture.fromBitmap(asset,mipMapping,optimizeForRenderToTexture,scale,format,repeat);
		texture.get_root().set_onRestore(function() {
			texture.get_root().uploadBitmap(Type.createInstance(assetClass,[]));
		});
	} else if(((asset) instanceof openfl_utils_ByteArrayData)) {
		texture = starling_textures_Texture.fromAtfData(asset,scale,mipMapping,null,repeat);
		texture.get_root().set_onRestore(function() {
			texture.get_root().uploadAtfData(Type.createInstance(assetClass,[]));
		});
	} else {
		throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Invalid asset type: " + asset.__name__));
	}
	asset = null;
	return texture;
};
starling_textures_Texture.fromBitmap = function(bitmap,generateMipMaps,optimizeForRenderToTexture,scale,format,repeat) {
	if(repeat == null) {
		repeat = false;
	}
	if(format == null) {
		format = 1;
	}
	if(scale == null) {
		scale = 1;
	}
	if(optimizeForRenderToTexture == null) {
		optimizeForRenderToTexture = false;
	}
	if(generateMipMaps == null) {
		generateMipMaps = true;
	}
	return starling_textures_Texture.fromBitmapData(bitmap.get_bitmapData(),generateMipMaps,optimizeForRenderToTexture,scale,format,repeat);
};
starling_textures_Texture.fromBitmapData = function(data,generateMipMaps,optimizeForRenderToTexture,scale,format,repeat,async) {
	if(repeat == null) {
		repeat = false;
	}
	if(format == null) {
		format = 1;
	}
	if(scale == null) {
		scale = 1;
	}
	if(optimizeForRenderToTexture == null) {
		optimizeForRenderToTexture = false;
	}
	if(generateMipMaps == null) {
		generateMipMaps = true;
	}
	var texture = starling_textures_Texture.empty(data.width / scale,data.height / scale,true,generateMipMaps,optimizeForRenderToTexture,scale,format,repeat);
	texture.get_root().uploadBitmapData(data,async);
	texture.get_root().set_onRestore(function() {
		texture.get_root().uploadBitmapData(data,async);
	});
	return texture;
};
starling_textures_Texture.fromAtfData = function(data,scale,useMipMaps,async,repeat) {
	if(repeat == null) {
		repeat = false;
	}
	if(useMipMaps == null) {
		useMipMaps = true;
	}
	if(scale == null) {
		scale = 1;
	}
	if(data == null) {
		return null;
	}
	var context = starling_core_Starling.get_current().get_context();
	if(context == null) {
		throw new js__$Boot_HaxeError(new starling_errors_MissingContextError());
	}
	var atfData = new starling_textures_AtfData(data);
	var nativeTexture = context.createTexture(atfData.get_width(),atfData.get_height(),atfData.get_format(),false);
	var concreteTexture = new starling_textures_ConcreteTexture(nativeTexture,atfData.get_format(),atfData.get_width(),atfData.get_height(),useMipMaps && atfData.get_numTextures() > 1,false,false,scale,repeat);
	concreteTexture.uploadAtfData(data,0,async);
	concreteTexture.set_onRestore(function() {
		concreteTexture.uploadAtfData(data,0);
	});
	return concreteTexture;
};
starling_textures_Texture.fromNetStream = function(stream,scale,onComplete) {
	if(scale == null) {
		scale = 1;
	}
	if(stream.client == stream && !Object.prototype.hasOwnProperty.call(stream,"onMetaData")) {
		stream.client = { onMetaData : function(md) {
		}};
	}
	return starling_textures_Texture.fromVideoAttachment("NetStream",stream,scale,onComplete);
};
starling_textures_Texture.fromVideoAttachment = function(type,attachment,scale,onComplete) {
	var TEXTURE_READY = "textureReady";
	if(!starling_utils_SystemUtil.get_supportsVideoTexture()) {
		throw new js__$Boot_HaxeError(new starling_errors_NotSupportedError("Video Textures are not supported on this platform"));
	}
	var context = starling_core_Starling.get_current().get_context();
	if(context == null) {
		throw new js__$Boot_HaxeError(new starling_errors_MissingContextError());
	}
	var texture = null;
	var base = Reflect.getProperty(context,"createVideoTexture").apply(context,[]);
	Reflect.getProperty(base,"attach" + type).apply(base,[attachment]);
	var onTextureReady = null;
	onTextureReady = function(event) {
		base.removeEventListener(TEXTURE_READY,onTextureReady);
		if(onComplete != null) {
			onComplete(texture);
		}
	};
	base.addEventListener(TEXTURE_READY,onTextureReady);
	texture = new starling_textures_ConcreteVideoTexture(base,scale);
	texture.set_onRestore(function() {
		texture.get_root().attachVideo(type,attachment);
	});
	return texture;
};
starling_textures_Texture.fromColor = function(width,height,color,optimizeForRenderToTexture,scale,format) {
	if(format == null) {
		format = 1;
	}
	if(scale == null) {
		scale = -1;
	}
	if(optimizeForRenderToTexture == null) {
		optimizeForRenderToTexture = false;
	}
	if(color == null) {
		color = -1;
	}
	var texture = starling_textures_Texture.empty(width,height,true,false,optimizeForRenderToTexture,scale,format);
	var tmp = texture.get_root();
	var tmp1 = starling_utils_Color.getAlpha(color) / 255.0;
	tmp.clear(color,tmp1);
	texture.get_root().set_onRestore(function() {
		var tmp2 = texture.get_root();
		var tmp3 = starling_utils_Color.getAlpha(color) / 255.0;
		tmp2.clear(color,tmp3);
	});
	return texture;
};
starling_textures_Texture.empty = function(width,height,premultipliedAlpha,mipMapping,optimizeForRenderToTexture,scale,format,repeat) {
	if(repeat == null) {
		repeat = false;
	}
	if(format == null) {
		format = 1;
	}
	if(scale == null) {
		scale = -1;
	}
	if(optimizeForRenderToTexture == null) {
		optimizeForRenderToTexture = false;
	}
	if(mipMapping == null) {
		mipMapping = true;
	}
	if(premultipliedAlpha == null) {
		premultipliedAlpha = true;
	}
	if(scale <= 0) {
		scale = starling_core_Starling.get_current().get_contentScaleFactor();
	}
	var actualWidth;
	var actualHeight;
	var nativeTexture;
	var context = starling_core_Starling.get_current().get_context();
	if(context == null) {
		throw new js__$Boot_HaxeError(new starling_errors_MissingContextError());
	}
	var origWidth = width * scale;
	var origHeight = height * scale;
	var useRectTexture = !mipMapping && !repeat && starling_core_Starling.get_current().get_profile() != 1 && format != 3;
	if(useRectTexture) {
		actualWidth = Math.ceil(origWidth - 0.000000001);
		actualHeight = Math.ceil(origHeight - 0.000000001);
		nativeTexture = context.createRectangleTexture(actualWidth,actualHeight,format,optimizeForRenderToTexture);
	} else {
		actualWidth = starling_utils_PowerOfTwo.getNextPowerOfTwo(origWidth | 0);
		actualHeight = starling_utils_PowerOfTwo.getNextPowerOfTwo(origHeight | 0);
		nativeTexture = context.createTexture(actualWidth,actualHeight,format,optimizeForRenderToTexture);
	}
	var concreteTexture = new starling_textures_ConcreteTexture(nativeTexture,format,actualWidth,actualHeight,mipMapping,premultipliedAlpha,optimizeForRenderToTexture,scale,repeat);
	concreteTexture.set_onRestore($bind(concreteTexture,concreteTexture.clear));
	if(actualWidth - origWidth < 0.001 && actualHeight - origHeight < 0.001) {
		return concreteTexture;
	} else {
		return new starling_textures_SubTexture(concreteTexture,new openfl_geom_Rectangle(0,0,width,height),true);
	}
};
starling_textures_Texture.fromTexture = function(texture,region,frame,rotated) {
	if(rotated == null) {
		rotated = false;
	}
	return new starling_textures_SubTexture(texture,region,false,frame,rotated);
};
starling_textures_Texture.get_maxSize = function() {
	var target = starling_core_Starling.get_current();
	var profile = target != null ? target.get_profile() : 0;
	if(profile == 0 || profile == 1) {
		return 2048;
	} else {
		return 4096;
	}
};
starling_textures_Texture.prototype = {
	dispose: function() {
	}
	,adjustVertexData: function(vertexData,vertexID,count) {
	}
	,adjustTexCoords: function(texCoords,startIndex,stride,count) {
		if(count == null) {
			count = -1;
		}
		if(stride == null) {
			stride = 0;
		}
		if(startIndex == null) {
			startIndex = 0;
		}
	}
	,get_frame: function() {
		return null;
	}
	,get_repeat: function() {
		return false;
	}
	,get_width: function() {
		return 0;
	}
	,get_height: function() {
		return 0;
	}
	,get_nativeWidth: function() {
		return 0;
	}
	,get_nativeHeight: function() {
		return 0;
	}
	,get_scale: function() {
		return 1.0;
	}
	,get_base: function() {
		return null;
	}
	,get_root: function() {
		return null;
	}
	,get_format: function() {
		return 1;
	}
	,get_mipMapping: function() {
		return false;
	}
	,get_premultipliedAlpha: function() {
		return false;
	}
	,__class__: starling_textures_Texture
	,__properties__: {get_premultipliedAlpha:"get_premultipliedAlpha",get_mipMapping:"get_mipMapping",get_format:"get_format",get_root:"get_root",get_base:"get_base",get_scale:"get_scale",get_nativeHeight:"get_nativeHeight",get_nativeWidth:"get_nativeWidth",get_height:"get_height",get_width:"get_width",get_repeat:"get_repeat",get_frame:"get_frame"}
};
var starling_textures_ConcreteTexture = function(base,format,width,height,mipMapping,premultipliedAlpha,optimizedForRenderTexture,scale,repeat) {
	if(repeat == null) {
		repeat = false;
	}
	if(scale == null) {
		scale = 1;
	}
	if(optimizedForRenderTexture == null) {
		optimizedForRenderTexture = false;
	}
	starling_textures_Texture.call(this);
	this.mScale = scale <= 0 ? 1.0 : scale;
	this.mBase = base;
	this.mFormat = format;
	this.mWidth = width;
	this.mHeight = height;
	this.mMipMapping = mipMapping;
	this.mPremultipliedAlpha = premultipliedAlpha;
	this.mOptimizedForRenderTexture = optimizedForRenderTexture;
	this.mRepeat = repeat;
	this.mOnRestore = null;
	this.mDataUploaded = false;
	this.mTextureReadyCallback = null;
};
$hxClasses["starling.textures.ConcreteTexture"] = starling_textures_ConcreteTexture;
starling_textures_ConcreteTexture.__name__ = "starling.textures.ConcreteTexture";
starling_textures_ConcreteTexture.__super__ = starling_textures_Texture;
starling_textures_ConcreteTexture.prototype = $extend(starling_textures_Texture.prototype,{
	mBase: null
	,mFormat: null
	,mWidth: null
	,mHeight: null
	,mMipMapping: null
	,mPremultipliedAlpha: null
	,mOptimizedForRenderTexture: null
	,mScale: null
	,mRepeat: null
	,mOnRestore: null
	,mDataUploaded: null
	,mTextureReadyCallback: null
	,dispose: function() {
		if(this.mBase != null) {
			this.mBase.removeEventListener("textureReady",$bind(this,this.onTextureReady));
			this.mBase.dispose();
		}
		this.set_onRestore(null);
		starling_textures_Texture.prototype.dispose.call(this);
	}
	,uploadBitmap: function(bitmap) {
		this.uploadBitmapData(bitmap.get_bitmapData());
	}
	,uploadBitmapData: function(data,async) {
		if(!starling_core_Starling.get_current().get_isRendering() && !starling_utils_SystemUtil.get_isDesktop()) {
			haxe_Log.trace("[Starling] Warning: uploading bitmap data while Starling is not rendering " + "may cause a crash on some platforms. Ignoring request.",{ fileName : "starling/textures/ConcreteTexture.hx", lineNumber : 100, className : "starling.textures.ConcreteTexture", methodName : "uploadBitmapData"});
			return;
		}
		var doAsync = false;
		if(Reflect.isFunction(async)) {
			this.mTextureReadyCallback = async;
			this.mBase.addEventListener("textureReady",$bind(this,this.onTextureReady));
			doAsync = true;
		} else if(async == true) {
			doAsync = true;
		}
		doAsync = false;
		var potData = null;
		if(data.width != this.mWidth || data.height != this.mHeight) {
			potData = new openfl_display_BitmapData(this.mWidth,this.mHeight,true,0);
			potData.copyPixels(data,data.rect,starling_textures_ConcreteTexture.sOrigin);
			data = potData;
		}
		if(((this.mBase) instanceof openfl_display3D_textures_Texture)) {
			var potTexture = this.mBase;
			if(doAsync) {
				potTexture.uploadFromBitmapDataAsync(data);
			} else {
				potTexture.uploadFromBitmapData(data);
			}
			if(this.mMipMapping && data.width > 1 && data.height > 1) {
				var currentWidth = data.width >> 1;
				var currentHeight = data.height >> 1;
				var level = 1;
				var canvas = new openfl_display_BitmapData(currentWidth,currentHeight,true,0);
				var transform = new openfl_geom_Matrix(.5,0,0,.5);
				var bounds = new openfl_geom_Rectangle();
				while(currentWidth >= 1 || currentHeight >= 1) {
					bounds.width = currentWidth;
					bounds.height = currentHeight;
					canvas.fillRect(bounds,0);
					canvas.draw(data,transform,null,null,null,true);
					potTexture.uploadFromBitmapData(canvas,level++);
					transform.scale(0.5,0.5);
					currentWidth >>= 1;
					currentHeight >>= 1;
				}
				canvas.dispose();
			}
		} else if(((this.mBase) instanceof openfl_display3D_textures_RectangleTexture)) {
			var baseTexture = this.mBase;
			if(doAsync) {
				baseTexture.uploadFromBitmapDataAsync(data);
			} else {
				baseTexture.uploadFromBitmapData(data);
			}
		}
		if(potData != null) {
			potData.dispose();
		}
		this.mDataUploaded = true;
		if(!doAsync && Reflect.isFunction(async)) {
			var f = $bind(this,this.onTextureReady);
			haxe_Timer.delay(function() {
				f(null);
			},1);
		}
	}
	,uploadAtfData: function(data,offset,async) {
		if(offset == null) {
			offset = 0;
		}
		var isAsync = Reflect.isFunction(async) || async == true;
		var potTexture = ((this.mBase) instanceof openfl_display3D_textures_Texture) ? this.mBase : null;
		if(potTexture == null) {
			throw new js__$Boot_HaxeError(new openfl_errors_Error("This texture type does not support ATF data"));
		}
		if(Reflect.isFunction(async)) {
			this.mTextureReadyCallback = async;
			this.mBase.addEventListener("textureReady",$bind(this,this.onTextureReady));
		}
		potTexture.uploadCompressedTextureFromByteArray(data,offset,isAsync);
		this.mDataUploaded = true;
	}
	,attachNetStream: function(netStream,onComplete) {
		this.attachVideo("NetStream",netStream,onComplete);
	}
	,attachVideo: function(type,attachment,onComplete) {
		var o = this.mBase;
		var c = o == null ? null : js_Boot.getClass(o);
		var className = c.__name__;
		if(className == "flash.display3D.textures.VideoTexture") {
			this.mDataUploaded = true;
			this.mTextureReadyCallback = onComplete;
			var o1 = this.mBase;
			Reflect.getProperty(this.mBase,"attach" + type).apply(o1,[attachment]);
			this.mBase.addEventListener("textureReady",$bind(this,this.onTextureReady));
		} else {
			throw new js__$Boot_HaxeError(new openfl_errors_Error("This texture type does not support " + type + " data"));
		}
	}
	,onTextureReady: function(event) {
		this.mBase.removeEventListener("textureReady",$bind(this,this.onTextureReady));
		if(this.mTextureReadyCallback != null) {
			this.mTextureReadyCallback(this);
		}
		this.mTextureReadyCallback = null;
	}
	,onContextCreated: function() {
		this.createBase();
		if(this.mOnRestore != null) {
			this.mOnRestore();
		}
		if(!this.mDataUploaded) {
			this.clear();
		}
	}
	,createBase: function() {
		var context = starling_core_Starling.get_current().get_context();
		if(((this.mBase) instanceof openfl_display3D_textures_Texture)) {
			this.mBase = context.createTexture(this.mWidth,this.mHeight,this.mFormat,this.mOptimizedForRenderTexture);
		} else if(((this.mBase) instanceof openfl_display3D_textures_RectangleTexture)) {
			this.mBase = context.createRectangleTexture(this.mWidth,this.mHeight,this.mFormat,this.mOptimizedForRenderTexture);
		} else {
			var o = this.mBase;
			var c = o == null ? null : js_Boot.getClass(o);
			throw new js__$Boot_HaxeError(new starling_errors_NotSupportedError("Texture type not supported: " + c.__name__));
		}
		this.mDataUploaded = false;
	}
	,clear: function(color,alpha) {
		if(alpha == null) {
			alpha = 0.0;
		}
		if(color == null) {
			color = 0;
		}
		var context = starling_core_Starling.get_current().get_context();
		if(context == null) {
			throw new js__$Boot_HaxeError(new starling_errors_MissingContextError());
		}
		if(this.mPremultipliedAlpha && alpha < 1.0) {
			color = starling_utils_Color.rgb(starling_utils_Color.getRed(color) * alpha | 0,starling_utils_Color.getGreen(color) * alpha | 0,starling_utils_Color.getBlue(color) * alpha | 0);
		}
		context.setRenderToTexture(this.mBase);
		try {
			starling_core_RenderSupport._clear(color,alpha);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			if(((e1) instanceof openfl_errors_Error)) {
				var e2 = e1;
			} else {
				throw e;
			}
		}
		context.setRenderToBackBuffer();
		this.mDataUploaded = true;
	}
	,get_optimizedForRenderTexture: function() {
		return this.mOptimizedForRenderTexture;
	}
	,get_onRestore: function() {
		return this.mOnRestore;
	}
	,set_onRestore: function(value) {
		starling_core_Starling.get_current().removeEventListener("context3DCreate",$bind(this,this.onContextCreated));
		if(starling_core_Starling.get_handleLostContext() && value != null) {
			this.mOnRestore = value;
			starling_core_Starling.get_current().addEventListener("context3DCreate",$bind(this,this.onContextCreated));
		} else {
			this.mOnRestore = null;
		}
		return value;
	}
	,get_base: function() {
		return this.mBase;
	}
	,get_root: function() {
		return this;
	}
	,get_format: function() {
		return this.mFormat;
	}
	,get_width: function() {
		return this.mWidth / this.mScale;
	}
	,get_height: function() {
		return this.mHeight / this.mScale;
	}
	,get_nativeWidth: function() {
		return this.mWidth;
	}
	,get_nativeHeight: function() {
		return this.mHeight;
	}
	,get_scale: function() {
		return this.mScale;
	}
	,get_mipMapping: function() {
		return this.mMipMapping;
	}
	,get_premultipliedAlpha: function() {
		return this.mPremultipliedAlpha;
	}
	,get_repeat: function() {
		return this.mRepeat;
	}
	,__class__: starling_textures_ConcreteTexture
	,__properties__: $extend(starling_textures_Texture.prototype.__properties__,{set_onRestore:"set_onRestore",get_onRestore:"get_onRestore",get_optimizedForRenderTexture:"get_optimizedForRenderTexture"})
});
var starling_textures_ConcreteVideoTexture = function(base,scale) {
	if(scale == null) {
		scale = 1;
	}
	var format = 1;
	var width = Reflect.getProperty(base,"videoWidth");
	var height = Reflect.getProperty(base,"videoHeight");
	if(width == null) {
		width = 0;
	}
	if(height == null) {
		height = 0;
	}
	starling_textures_ConcreteTexture.call(this,base,format,width,height,false,false,false,scale,false);
};
$hxClasses["starling.textures.ConcreteVideoTexture"] = starling_textures_ConcreteVideoTexture;
starling_textures_ConcreteVideoTexture.__name__ = "starling.textures.ConcreteVideoTexture";
starling_textures_ConcreteVideoTexture.__super__ = starling_textures_ConcreteTexture;
starling_textures_ConcreteVideoTexture.prototype = $extend(starling_textures_ConcreteTexture.prototype,{
	get_nativeWidth: function() {
		return Reflect.getProperty(this.get_base(),"videoWidth");
	}
	,get_nativeHeight: function() {
		return Reflect.getProperty(this.get_base(),"videoHeight");
	}
	,get_width: function() {
		return this.get_nativeWidth() / this.get_scale();
	}
	,get_height: function() {
		return this.get_nativeHeight() / this.get_scale();
	}
	,__class__: starling_textures_ConcreteVideoTexture
});
var starling_textures_SubTexture = function(parent,region,ownsParent,frame,rotated) {
	if(rotated == null) {
		rotated = false;
	}
	if(ownsParent == null) {
		ownsParent = false;
	}
	starling_textures_Texture.call(this);
	this.mParent = parent;
	this.mRegion = region != null ? region.clone() : new openfl_geom_Rectangle(0,0,parent.get_width(),parent.get_height());
	this.mFrame = frame != null ? frame.clone() : null;
	this.mOwnsParent = ownsParent;
	this.mRotated = rotated;
	this.mWidth = rotated ? this.mRegion.height : this.mRegion.width;
	this.mHeight = rotated ? this.mRegion.width : this.mRegion.height;
	this.mTransformationMatrix = new openfl_geom_Matrix();
	if(rotated) {
		this.mTransformationMatrix.translate(0,-1);
		this.mTransformationMatrix.rotate(Math.PI / 2.0);
	}
	if(this.mFrame != null && (this.mFrame.x > 0 || this.mFrame.y > 0 || this.mFrame.get_right() < this.mWidth || this.mFrame.get_bottom() < this.mHeight)) {
		haxe_Log.trace("[Starling] Warning: frames inside the texture's region are unsupported.",{ fileName : "starling/textures/SubTexture.hx", lineNumber : 76, className : "starling.textures.SubTexture", methodName : "new"});
	}
	this.mTransformationMatrix.scale(this.mRegion.width / this.mParent.get_width(),this.mRegion.height / this.mParent.get_height());
	this.mTransformationMatrix.translate(this.mRegion.x / this.mParent.get_width(),this.mRegion.y / this.mParent.get_height());
};
$hxClasses["starling.textures.SubTexture"] = starling_textures_SubTexture;
starling_textures_SubTexture.__name__ = "starling.textures.SubTexture";
starling_textures_SubTexture.__super__ = starling_textures_Texture;
starling_textures_SubTexture.prototype = $extend(starling_textures_Texture.prototype,{
	mParent: null
	,mOwnsParent: null
	,mRegion: null
	,mFrame: null
	,mRotated: null
	,mWidth: null
	,mHeight: null
	,mTransformationMatrix: null
	,dispose: function() {
		if(this.mOwnsParent) {
			this.mParent.dispose();
		}
		starling_textures_Texture.prototype.dispose.call(this);
	}
	,adjustVertexData: function(vertexData,vertexID,count) {
		var startIndex = vertexID * 8 + 6;
		var stride = 6;
		this.adjustTexCoords(vertexData.get_rawData(),startIndex,stride,count);
		if(this.mFrame != null) {
			if(count != 4) {
				throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Textures with a frame can only be used on quads"));
			}
			var deltaRight = this.mFrame.width + this.mFrame.x - this.mWidth;
			var deltaBottom = this.mFrame.height + this.mFrame.y - this.mHeight;
			vertexData.translateVertex(vertexID,-this.mFrame.x,-this.mFrame.y);
			vertexData.translateVertex(vertexID + 1,-deltaRight,-this.mFrame.y);
			vertexData.translateVertex(vertexID + 2,-this.mFrame.x,-deltaBottom);
			vertexData.translateVertex(vertexID + 3,-deltaRight,-deltaBottom);
		}
	}
	,adjustTexCoords: function(texCoords,startIndex,stride,count) {
		if(count == null) {
			count = -1;
		}
		if(stride == null) {
			stride = 0;
		}
		if(startIndex == null) {
			startIndex = 0;
		}
		if(count < 0) {
			count = (texCoords.length - startIndex - 2) / (stride + 2) + 1 | 0;
		}
		var endIndex = startIndex + count * (2 + stride);
		var texture = this;
		var u;
		var v;
		starling_textures_SubTexture.sMatrix.identity();
		while(texture != null) {
			starling_textures_SubTexture.sMatrix.concat(texture.mTransformationMatrix);
			texture = ((texture.get_parent()) instanceof starling_textures_SubTexture) ? texture.get_parent() : null;
		}
		var i = startIndex;
		while(i < endIndex) {
			u = texCoords[i];
			v = texCoords[i + 1];
			starling_utils_MatrixUtil.transformCoords(starling_textures_SubTexture.sMatrix,u,v,starling_textures_SubTexture.sTexCoords);
			texCoords[i] = starling_textures_SubTexture.sTexCoords.x;
			texCoords[i + 1] = starling_textures_SubTexture.sTexCoords.y;
			i += 2 + stride;
		}
	}
	,get_parent: function() {
		return this.mParent;
	}
	,get_ownsParent: function() {
		return this.mOwnsParent;
	}
	,get_rotated: function() {
		return this.mRotated;
	}
	,get_region: function() {
		return this.mRegion;
	}
	,get_clipping: function() {
		var topLeft = new openfl_geom_Point();
		var bottomRight = new openfl_geom_Point();
		starling_utils_MatrixUtil.transformCoords(this.mTransformationMatrix,0.0,0.0,topLeft);
		starling_utils_MatrixUtil.transformCoords(this.mTransformationMatrix,1.0,1.0,bottomRight);
		var clipping = new openfl_geom_Rectangle(topLeft.x,topLeft.y,bottomRight.x - topLeft.x,bottomRight.y - topLeft.y);
		starling_utils_RectangleUtil.normalize(clipping);
		return clipping;
	}
	,get_transformationMatrix: function() {
		return this.mTransformationMatrix;
	}
	,get_base: function() {
		return this.mParent.get_base();
	}
	,get_root: function() {
		return this.mParent.get_root();
	}
	,get_format: function() {
		return this.mParent.get_format();
	}
	,get_width: function() {
		return this.mWidth;
	}
	,get_height: function() {
		return this.mHeight;
	}
	,get_nativeWidth: function() {
		return this.mWidth * this.get_scale();
	}
	,get_nativeHeight: function() {
		return this.mHeight * this.get_scale();
	}
	,get_mipMapping: function() {
		return this.mParent.get_mipMapping();
	}
	,get_premultipliedAlpha: function() {
		return this.mParent.get_premultipliedAlpha();
	}
	,get_scale: function() {
		return this.mParent.get_scale();
	}
	,get_repeat: function() {
		return this.mParent.get_repeat();
	}
	,get_frame: function() {
		return this.mFrame;
	}
	,__class__: starling_textures_SubTexture
	,__properties__: $extend(starling_textures_Texture.prototype.__properties__,{get_transformationMatrix:"get_transformationMatrix",get_clipping:"get_clipping",get_region:"get_region",get_rotated:"get_rotated",get_ownsParent:"get_ownsParent",get_parent:"get_parent"})
});
var starling_textures_RenderTexture = function(width,height,persistent,scale,format,repeat) {
	if(repeat == null) {
		repeat = false;
	}
	if(scale == null) {
		scale = -1;
	}
	if(persistent == null) {
		persistent = true;
	}
	if(format == null) {
		format = 1;
	}
	if(scale <= 0) {
		scale = starling_core_Starling.get_current().get_contentScaleFactor();
	}
	var legalWidth = width;
	var legalHeight = height;
	if(!this.get_supportsNonPotDimensions()) {
		legalWidth = starling_utils_PowerOfTwo.getNextPowerOfTwo(width * scale | 0) / scale;
		legalHeight = starling_utils_PowerOfTwo.getNextPowerOfTwo(height * scale | 0) / scale;
	}
	this.mActiveTexture = starling_textures_Texture.empty(legalWidth,legalHeight,true,false,true,scale,format,repeat);
	this.mActiveTexture.get_root().set_onRestore(($_=this.mActiveTexture.get_root(),$bind($_,$_.clear)));
	starling_textures_SubTexture.call(this,this.mActiveTexture,new openfl_geom_Rectangle(0,0,width,height),true,null,false);
	var rootWidth = this.mActiveTexture.get_root().get_width();
	var rootHeight = this.mActiveTexture.get_root().get_height();
	this.mIsPersistent = persistent;
	this.mSupport = new starling_core_RenderSupport();
	this.mSupport.setProjectionMatrix(0,0,rootWidth,rootHeight,width,height);
	if(persistent && (!starling_textures_RenderTexture.optimizePersistentBuffers || !starling_utils_SystemUtil.get_supportsRelaxedTargetClearRequirement())) {
		this.mBufferTexture = starling_textures_Texture.empty(legalWidth,legalHeight,true,false,true,scale,format,repeat);
		this.mBufferTexture.get_root().set_onRestore(($_=this.mBufferTexture.get_root(),$bind($_,$_.clear)));
		this.mHelperImage = new starling_display_Image(this.mBufferTexture);
		this.mHelperImage.set_smoothing("none");
	}
};
$hxClasses["starling.textures.RenderTexture"] = starling_textures_RenderTexture;
starling_textures_RenderTexture.__name__ = "starling.textures.RenderTexture";
starling_textures_RenderTexture.__super__ = starling_textures_SubTexture;
starling_textures_RenderTexture.prototype = $extend(starling_textures_SubTexture.prototype,{
	mActiveTexture: null
	,mBufferTexture: null
	,mHelperImage: null
	,mDrawing: null
	,mBufferReady: null
	,mIsPersistent: null
	,mSupport: null
	,dispose: function() {
		this.mSupport.dispose();
		this.mActiveTexture.dispose();
		if(this.get_isDoubleBuffered()) {
			this.mBufferTexture.dispose();
			this.mHelperImage.dispose();
		}
		starling_textures_SubTexture.prototype.dispose.call(this);
	}
	,draw: function(object,matrix,alpha,antiAliasing) {
		if(antiAliasing == null) {
			antiAliasing = 0;
		}
		if(alpha == null) {
			alpha = 1.0;
		}
		if(object == null) {
			return;
		}
		if(this.mDrawing) {
			this.render(object,matrix,alpha);
		} else {
			this.renderBundled($bind(this,this.render),object,matrix,alpha,antiAliasing);
		}
	}
	,drawBundled: function(drawingBlock,antiAliasing) {
		if(antiAliasing == null) {
			antiAliasing = 0;
		}
		this.renderBundled(drawingBlock,null,null,1.0,antiAliasing);
	}
	,render: function(object,matrix,alpha) {
		if(alpha == null) {
			alpha = 1.0;
		}
		var filter = object.get_filter();
		var mask = object.get_mask();
		this.mSupport.loadIdentity();
		this.mSupport.set_blendMode(object.get_blendMode() == "auto" ? "normal" : object.get_blendMode());
		if(matrix != null) {
			this.mSupport.prependMatrix(matrix);
		} else {
			this.mSupport.transformMatrix(object);
		}
		if(mask != null) {
			this.mSupport.pushMask(mask);
		}
		if(filter != null) {
			filter.render(object,this.mSupport,alpha);
		} else {
			object.render(this.mSupport,alpha);
		}
		if(mask != null) {
			this.mSupport.popMask();
		}
	}
	,renderBundled: function(renderBlock,object,matrix,alpha,antiAliasing) {
		if(antiAliasing == null) {
			antiAliasing = 0;
		}
		if(alpha == null) {
			alpha = 1.0;
		}
		var context = starling_core_Starling.get_current().get_context();
		if(context == null) {
			throw new js__$Boot_HaxeError(new starling_errors_MissingContextError());
		}
		if(!starling_core_Starling.get_current().get_contextValid()) {
			return;
		}
		if(this.get_isDoubleBuffered()) {
			var tmpTexture = this.mActiveTexture;
			this.mActiveTexture = this.mBufferTexture;
			this.mBufferTexture = tmpTexture;
			this.mHelperImage.set_texture(this.mBufferTexture);
		}
		var previousRenderTarget = this.mSupport.get_renderTarget();
		starling_textures_RenderTexture.sClipRect.setTo(0,0,this.mActiveTexture.get_width(),this.mActiveTexture.get_height());
		this.mSupport.pushClipRect(starling_textures_RenderTexture.sClipRect);
		this.mSupport.setRenderTarget(this.mActiveTexture,antiAliasing);
		if(this.get_isDoubleBuffered() || !this.get_isPersistent() || !this.mBufferReady) {
			this.mSupport.clear();
		}
		if(this.get_isDoubleBuffered() && this.mBufferReady) {
			this.mHelperImage.render(this.mSupport,1.0);
		} else {
			this.mBufferReady = true;
		}
		this.mDrawing = true;
		renderBlock(object,matrix,alpha);
		this.mDrawing = false;
		this.mSupport.finishQuadBatch();
		this.mSupport.nextFrame();
		this.mSupport.set_renderTarget(previousRenderTarget);
		this.mSupport.popClipRect();
	}
	,clear: function(rgb,alpha) {
		if(alpha == null) {
			alpha = 0.0;
		}
		if(rgb == null) {
			rgb = 0;
		}
		if(!starling_core_Starling.get_current().get_contextValid()) {
			return;
		}
		var previousRenderTarget = this.mSupport.get_renderTarget();
		this.mSupport.set_renderTarget(this.mActiveTexture);
		this.mSupport.clear(rgb,alpha);
		this.mSupport.set_renderTarget(previousRenderTarget);
		this.mBufferReady = true;
	}
	,get_supportsNonPotDimensions: function() {
		return true;
	}
	,get_isDoubleBuffered: function() {
		return this.mBufferTexture != null;
	}
	,get_isPersistent: function() {
		return this.mIsPersistent;
	}
	,get_base: function() {
		return this.mActiveTexture.get_base();
	}
	,get_root: function() {
		return this.mActiveTexture.get_root();
	}
	,__class__: starling_textures_RenderTexture
	,__properties__: $extend(starling_textures_SubTexture.prototype.__properties__,{get_isPersistent:"get_isPersistent",get_isDoubleBuffered:"get_isDoubleBuffered",get_supportsNonPotDimensions:"get_supportsNonPotDimensions"})
});
var starling_textures_TextureAtlas = function(texture,atlasXml) {
	this.mSubTextures = new haxe_ds_StringMap();
	this.mAtlasTexture = texture;
	if(atlasXml != null) {
		this.parseAtlasXml(atlasXml);
	}
};
$hxClasses["starling.textures.TextureAtlas"] = starling_textures_TextureAtlas;
starling_textures_TextureAtlas.__name__ = "starling.textures.TextureAtlas";
starling_textures_TextureAtlas.parseBool = function(value) {
	if(value != null) {
		return value.toLowerCase() == "true";
	} else {
		return false;
	}
};
starling_textures_TextureAtlas.prototype = {
	mAtlasTexture: null
	,mSubTextures: null
	,mSubTextureNames: null
	,dispose: function() {
		this.mAtlasTexture.dispose();
	}
	,getXmlFloat: function(xml,attributeName) {
		var value = xml.get(attributeName);
		if(value != null) {
			return parseFloat(value);
		} else {
			return 0;
		}
	}
	,parseAtlasXml: function(atlasXml) {
		var scale = this.mAtlasTexture.get_scale();
		var region = new openfl_geom_Rectangle();
		var frame = new openfl_geom_Rectangle();
		var _this = atlasXml.firstElement();
		if(_this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(_this.nodeType));
		}
		if(_this.nodeName == "TextureAtlas") {
			atlasXml = atlasXml.firstElement();
		}
		var subTexture = atlasXml.elementsNamed("SubTexture");
		while(subTexture.hasNext()) {
			var subTexture1 = subTexture.next();
			var name = subTexture1.get("name");
			var x = this.getXmlFloat(subTexture1,"x") / scale;
			var y = this.getXmlFloat(subTexture1,"y") / scale;
			var width = this.getXmlFloat(subTexture1,"width") / scale;
			var height = this.getXmlFloat(subTexture1,"height") / scale;
			var frameX = this.getXmlFloat(subTexture1,"frameX") / scale;
			var frameY = this.getXmlFloat(subTexture1,"frameY") / scale;
			var frameWidth = this.getXmlFloat(subTexture1,"frameWidth") / scale;
			var frameHeight = this.getXmlFloat(subTexture1,"frameHeight") / scale;
			var rotated = starling_textures_TextureAtlas.parseBool(subTexture1.get("rotated"));
			region.setTo(x,y,width,height);
			frame.setTo(frameX,frameY,frameWidth,frameHeight);
			if(frameWidth > 0 && frameHeight > 0) {
				this.addRegion(name,region,frame,rotated);
			} else {
				this.addRegion(name,region,null,rotated);
			}
		}
	}
	,getTexture: function(name) {
		var _this = this.mSubTextures;
		if(__map_reserved[name] != null) {
			return _this.getReserved(name);
		} else {
			return _this.h[name];
		}
	}
	,getTextures: function(prefix,result) {
		if(prefix == null) {
			prefix = "";
		}
		if(result == null) {
			result = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
		}
		var name = this.getNames(prefix,starling_textures_TextureAtlas.sNames).data.iterator();
		while(name.hasNext()) {
			var name1 = name.next();
			var index = result.data.get_length();
			var value = this.getTexture(name1);
			result.data.set(index,value);
		}
		starling_textures_TextureAtlas.sNames.data.set_length(0);
		return result;
	}
	,getNames: function(prefix,result) {
		if(prefix == null) {
			prefix = "";
		}
		var name;
		if(result == null) {
			result = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
		}
		if(this.mSubTextureNames == null) {
			this.mSubTextureNames = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
			var name1 = this.mSubTextures.keys();
			while(name1.hasNext()) {
				var name2 = name1.next();
				var this1 = this.mSubTextureNames;
				var index = this.mSubTextureNames.data.get_length();
				this1.data.set(index,name2);
			}
			this.mSubTextureNames.data.sort($bind(this,this.compare));
		}
		var name3 = this.mSubTextureNames.data.iterator();
		while(name3.hasNext()) {
			var name4 = name3.next();
			if(name4.indexOf(prefix) == 0) {
				var index1 = result.data.get_length();
				result.data.set(index1,name4);
			}
		}
		return result;
	}
	,getRegion: function(name) {
		var _this = this.mSubTextures;
		var subTexture = __map_reserved[name] != null ? _this.getReserved(name) : _this.h[name];
		if(subTexture != null) {
			return subTexture.get_region();
		} else {
			return null;
		}
	}
	,getFrame: function(name) {
		var _this = this.mSubTextures;
		var subTexture = __map_reserved[name] != null ? _this.getReserved(name) : _this.h[name];
		if(subTexture != null) {
			return subTexture.get_frame();
		} else {
			return null;
		}
	}
	,getRotation: function(name) {
		var _this = this.mSubTextures;
		var subTexture = __map_reserved[name] != null ? _this.getReserved(name) : _this.h[name];
		if(subTexture != null) {
			return subTexture.get_rotated();
		} else {
			return false;
		}
	}
	,addRegion: function(name,region,frame,rotated) {
		if(rotated == null) {
			rotated = false;
		}
		var this1 = this.mSubTextures;
		var v = new starling_textures_SubTexture(this.mAtlasTexture,region,false,frame,rotated);
		var _this = this1;
		if(__map_reserved[name] != null) {
			_this.setReserved(name,v);
		} else {
			_this.h[name] = v;
		}
		this.mSubTextureNames = null;
	}
	,removeRegion: function(name) {
		var _this = this.mSubTextures;
		var subTexture = __map_reserved[name] != null ? _this.getReserved(name) : _this.h[name];
		if(subTexture != null) {
			subTexture.dispose();
		}
		this.mSubTextures.remove(name);
		this.mSubTextureNames = null;
	}
	,get_texture: function() {
		return this.mAtlasTexture;
	}
	,compare: function(a,b) {
		if(a < b) {
			return -1;
		} else if(a > b) {
			return 1;
		} else {
			return 0;
		}
	}
	,__class__: starling_textures_TextureAtlas
	,__properties__: {get_texture:"get_texture"}
};
var starling_textures_TextureOptions = function(scale,mipMapping,format,repeat) {
	if(repeat == null) {
		repeat = false;
	}
	if(format == null) {
		format = 1;
	}
	if(mipMapping == null) {
		mipMapping = false;
	}
	if(scale == null) {
		scale = 1.0;
	}
	this.mRepeat = false;
	this.mOnReady = null;
	this.mOptimizeForRenderToTexture = false;
	this.mScale = scale;
	this.mFormat = format;
	this.mMipMapping = mipMapping;
	this.mRepeat = repeat;
};
$hxClasses["starling.textures.TextureOptions"] = starling_textures_TextureOptions;
starling_textures_TextureOptions.__name__ = "starling.textures.TextureOptions";
starling_textures_TextureOptions.prototype = {
	mScale: null
	,mFormat: null
	,mMipMapping: null
	,mOptimizeForRenderToTexture: null
	,mOnReady: null
	,mRepeat: null
	,clone: function() {
		var clone = new starling_textures_TextureOptions(this.mScale,this.mMipMapping,this.mFormat,this.mRepeat);
		clone.mOptimizeForRenderToTexture = this.mOptimizeForRenderToTexture;
		clone.mOnReady = this.mOnReady;
		return clone;
	}
	,get_scale: function() {
		return this.mScale;
	}
	,set_scale: function(value) {
		this.mScale = value > 0 ? value : starling_core_Starling.get_current().get_contentScaleFactor();
		return value;
	}
	,get_format: function() {
		return this.mFormat;
	}
	,set_format: function(value) {
		return this.mFormat = value;
	}
	,get_mipMapping: function() {
		return this.mMipMapping;
	}
	,set_mipMapping: function(value) {
		return this.mMipMapping = value;
	}
	,get_optimizeForRenderToTexture: function() {
		return this.mOptimizeForRenderToTexture;
	}
	,set_optimizeForRenderToTexture: function(value) {
		return this.mOptimizeForRenderToTexture = value;
	}
	,get_repeat: function() {
		return this.mRepeat;
	}
	,set_repeat: function(value) {
		return this.mRepeat = value;
	}
	,get_onReady: function() {
		return this.mOnReady;
	}
	,set_onReady: function(value) {
		return this.mOnReady = value;
	}
	,__class__: starling_textures_TextureOptions
	,__properties__: {set_onReady:"set_onReady",get_onReady:"get_onReady",set_repeat:"set_repeat",get_repeat:"get_repeat",set_optimizeForRenderToTexture:"set_optimizeForRenderToTexture",get_optimizeForRenderToTexture:"get_optimizeForRenderToTexture",set_mipMapping:"set_mipMapping",get_mipMapping:"get_mipMapping",set_format:"set_format",get_format:"get_format",set_scale:"set_scale",get_scale:"get_scale"}
};
var starling_textures_TextureSmoothing = function() { };
$hxClasses["starling.textures.TextureSmoothing"] = starling_textures_TextureSmoothing;
starling_textures_TextureSmoothing.__name__ = "starling.textures.TextureSmoothing";
starling_textures_TextureSmoothing.isValid = function(smoothing) {
	if(!(smoothing == "none" || smoothing == "bilinear")) {
		return smoothing == "trilinear";
	} else {
		return true;
	}
};
var starling_utils_ArrayUtil = function() { };
$hxClasses["starling.utils.ArrayUtil"] = starling_utils_ArrayUtil;
starling_utils_ArrayUtil.__name__ = "starling.utils.ArrayUtil";
starling_utils_ArrayUtil.resize = function(arr,newLength,defaultValue) {
	var length = arr.length;
	if(newLength < length) {
		arr.splice(newLength,length - newLength);
	} else if(newLength > length) {
		var _g = length;
		var _g1 = newLength;
		while(_g < _g1) {
			var i = _g++;
			arr[i] = defaultValue;
		}
	}
};
starling_utils_ArrayUtil.clear = function(arr) {
	arr.splice(0,arr.length);
};
starling_utils_ArrayUtil.insertAt = function(array,index,object) {
	var length = array.length;
	if(index < 0) {
		index += length + 1;
	}
	if(index < 0) {
		index = 0;
	}
	var i = index - 1;
	while(i >= length) {
		array[i] = null;
		--i;
	}
	i = length;
	while(i > index) {
		array[i] = array[i - 1];
		--i;
	}
	array[index] = object;
};
starling_utils_ArrayUtil.removeAt = function(array,index) {
	var length = array.length;
	if(index < 0) {
		index += length;
	}
	if(index < 0) {
		index = 0;
	} else if(index >= length) {
		index = length - 1;
	}
	var object = array[index];
	var i = index + 1;
	while(i < length) {
		array[i - 1] = array[i];
		++i;
	}
	starling_utils_ArrayUtil.resize(array,array.length - 1);
	return object;
};
var starling_utils_AssetManager = function(scaleFactor,useMipmaps) {
	if(useMipmaps == null) {
		useMipmaps = false;
	}
	if(scaleFactor == null) {
		scaleFactor = 1;
	}
	this.mNumLoadingQueues = 0;
	starling_events_EventDispatcher.call(this);
	this.mDefaultTextureOptions = new starling_textures_TextureOptions(scaleFactor,useMipmaps);
	this.mTextures = new haxe_ds_StringMap();
	this.mAtlases = new haxe_ds_StringMap();
	this.mSounds = new haxe_ds_StringMap();
	this.mXmls = new haxe_ds_StringMap();
	this.mObjects = new haxe_ds_StringMap();
	this.mByteArrays = new haxe_ds_StringMap();
	this.mNumConnections = 3;
	this.mVerbose = true;
	this.mQueue = [];
};
$hxClasses["starling.utils.AssetManager"] = starling_utils_AssetManager;
starling_utils_AssetManager.__name__ = "starling.utils.AssetManager";
starling_utils_AssetManager.__super__ = starling_events_EventDispatcher;
starling_utils_AssetManager.prototype = $extend(starling_events_EventDispatcher.prototype,{
	mStarling: null
	,mNumLostTextures: null
	,mNumRestoredTextures: null
	,mNumLoadingQueues: null
	,mDefaultTextureOptions: null
	,mCheckPolicyFile: null
	,mKeepAtlasXmls: null
	,mKeepFontXmls: null
	,mNumConnections: null
	,mVerbose: null
	,mQueue: null
	,mTextures: null
	,mAtlases: null
	,mSounds: null
	,mXmls: null
	,mObjects: null
	,mByteArrays: null
	,dispose: function() {
		var _this = this.mTextures;
		var texture = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(texture.hasNext()) {
			var texture1 = texture.next();
			texture1.dispose();
		}
		var _this1 = this.mAtlases;
		var atlas = new haxe_ds__$StringMap_StringMapIterator(_this1,_this1.arrayKeys());
		while(atlas.hasNext()) {
			var atlas1 = atlas.next();
			atlas1.dispose();
		}
		var _this2 = this.mByteArrays;
		var byteArray = new haxe_ds__$StringMap_StringMapIterator(_this2,_this2.arrayKeys());
		while(byteArray.hasNext()) {
			var byteArray1 = byteArray.next();
			byteArray1.clear();
		}
	}
	,getTexture: function(name) {
		var _this = this.mTextures;
		if(__map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name)) {
			var _this1 = this.mTextures;
			if(__map_reserved[name] != null) {
				return _this1.getReserved(name);
			} else {
				return _this1.h[name];
			}
		} else {
			var _this2 = this.mAtlases;
			var atlas = new haxe_ds__$StringMap_StringMapIterator(_this2,_this2.arrayKeys());
			while(atlas.hasNext()) {
				var atlas1 = atlas.next();
				var texture = atlas1.getTexture(name);
				if(texture != null) {
					return texture;
				}
			}
			return null;
		}
	}
	,getTextures: function(prefix,result) {
		if(prefix == null) {
			prefix = "";
		}
		if(result == null) {
			result = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
		}
		var name = this.getTextureNames(prefix,starling_utils_AssetManager.sNames).data.iterator();
		while(name.hasNext()) {
			var name1 = name.next();
			var index = result.data.get_length();
			var value = this.getTexture(name1);
			result.data.set(index,value);
		}
		starling_utils_AssetManager.sNames.data.set_length(0);
		return result;
	}
	,getTextureNames: function(prefix,result) {
		if(prefix == null) {
			prefix = "";
		}
		result = this.getDictionaryKeys(this.mTextures,prefix,result);
		var _this = this.mAtlases;
		var atlas = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(atlas.hasNext()) {
			var atlas1 = atlas.next();
			atlas1.getNames(prefix,result);
		}
		result.data.sort($bind(this,this.compare));
		return result;
	}
	,getTextureAtlas: function(name) {
		var _this = this.mAtlases;
		if(__map_reserved[name] != null) {
			return _this.getReserved(name);
		} else {
			return _this.h[name];
		}
	}
	,getTextureAtlasNames: function(prefix,result) {
		if(prefix == null) {
			prefix = "";
		}
		return this.getDictionaryKeys(this.mAtlases,prefix,result);
	}
	,getSound: function(name) {
		var _this = this.mSounds;
		if(__map_reserved[name] != null) {
			return _this.getReserved(name);
		} else {
			return _this.h[name];
		}
	}
	,getSoundNames: function(prefix,result) {
		if(prefix == null) {
			prefix = "";
		}
		return this.getDictionaryKeys(this.mSounds,prefix,result);
	}
	,playSound: function(name,startTime,loops,transform) {
		if(loops == null) {
			loops = 0;
		}
		if(startTime == null) {
			startTime = 0;
		}
		var _this = this.mSounds;
		if(__map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name)) {
			return this.getSound(name).play(startTime,loops,transform);
		} else {
			return null;
		}
	}
	,getXml: function(name) {
		var _this = this.mXmls;
		if(__map_reserved[name] != null) {
			return _this.getReserved(name);
		} else {
			return _this.h[name];
		}
	}
	,getXmlNames: function(prefix,result) {
		if(prefix == null) {
			prefix = "";
		}
		return this.getDictionaryKeys(this.mXmls,prefix,result);
	}
	,getObject: function(name) {
		var _this = this.mObjects;
		if(__map_reserved[name] != null) {
			return _this.getReserved(name);
		} else {
			return _this.h[name];
		}
	}
	,getObjectNames: function(prefix,result) {
		if(prefix == null) {
			prefix = "";
		}
		return this.getDictionaryKeys(this.mObjects,prefix,result);
	}
	,getByteArray: function(name) {
		var _this = this.mByteArrays;
		if(__map_reserved[name] != null) {
			return _this.getReserved(name);
		} else {
			return _this.h[name];
		}
	}
	,getByteArrayNames: function(prefix,result) {
		if(prefix == null) {
			prefix = "";
		}
		return this.getDictionaryKeys(this.mByteArrays,prefix,result);
	}
	,addTexture: function(name,texture) {
		this.log("Adding texture '" + name + "'");
		var _this = this.mTextures;
		if(__map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name)) {
			this.log("Warning: name was already in use; the previous texture will be replaced.");
			var _this1 = this.mTextures;
			(__map_reserved[name] != null ? _this1.getReserved(name) : _this1.h[name]).dispose();
		}
		var _this2 = this.mTextures;
		if(__map_reserved[name] != null) {
			_this2.setReserved(name,texture);
		} else {
			_this2.h[name] = texture;
		}
	}
	,addTextureAtlas: function(name,atlas) {
		this.log("Adding texture atlas '" + name + "'");
		var _this = this.mAtlases;
		if(__map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name)) {
			this.log("Warning: name was already in use; the previous atlas will be replaced.");
			var _this1 = this.mAtlases;
			(__map_reserved[name] != null ? _this1.getReserved(name) : _this1.h[name]).dispose();
		}
		var _this2 = this.mAtlases;
		if(__map_reserved[name] != null) {
			_this2.setReserved(name,atlas);
		} else {
			_this2.h[name] = atlas;
		}
	}
	,addSound: function(name,sound) {
		this.log("Adding sound '" + name + "'");
		var _this = this.mSounds;
		if(__map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name)) {
			this.log("Warning: name was already in use; the previous sound will be replaced.");
		}
		var _this1 = this.mSounds;
		if(__map_reserved[name] != null) {
			_this1.setReserved(name,sound);
		} else {
			_this1.h[name] = sound;
		}
	}
	,addXml: function(name,xml) {
		this.log("Adding XML '" + name + "'");
		var _this = this.mXmls;
		if(__map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name)) {
			this.log("Warning: name was already in use; the previous XML will be replaced.");
		}
		var _this1 = this.mXmls;
		if(__map_reserved[name] != null) {
			_this1.setReserved(name,xml);
		} else {
			_this1.h[name] = xml;
		}
	}
	,addObject: function(name,object) {
		this.log("Adding object '" + name + "'");
		var _this = this.mObjects;
		if(__map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name)) {
			this.log("Warning: name was already in use; the previous object will be replaced.");
		}
		var v = object;
		var _this1 = this.mObjects;
		var value = v;
		if(__map_reserved[name] != null) {
			_this1.setReserved(name,value);
		} else {
			_this1.h[name] = value;
		}
	}
	,addByteArray: function(name,byteArray) {
		this.log("Adding byte array '" + name + "'");
		var _this = this.mByteArrays;
		if(__map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name)) {
			this.log("Warning: name was already in use; the previous byte array will be replaced.");
			var _this1 = this.mByteArrays;
			(__map_reserved[name] != null ? _this1.getReserved(name) : _this1.h[name]).clear();
		}
		var _this2 = this.mByteArrays;
		if(__map_reserved[name] != null) {
			_this2.setReserved(name,byteArray);
		} else {
			_this2.h[name] = byteArray;
		}
	}
	,removeTexture: function(name,dispose) {
		if(dispose == null) {
			dispose = true;
		}
		this.log("Removing texture '" + name + "'");
		var tmp;
		if(dispose) {
			var _this = this.mTextures;
			tmp = __map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name);
		} else {
			tmp = false;
		}
		if(tmp) {
			var _this1 = this.mTextures;
			(__map_reserved[name] != null ? _this1.getReserved(name) : _this1.h[name]).dispose();
		}
		this.mTextures.remove(name);
	}
	,removeTextureAtlas: function(name,dispose) {
		if(dispose == null) {
			dispose = true;
		}
		this.log("Removing texture atlas '" + name + "'");
		var tmp;
		if(dispose) {
			var _this = this.mAtlases;
			tmp = __map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name);
		} else {
			tmp = false;
		}
		if(tmp) {
			var _this1 = this.mAtlases;
			(__map_reserved[name] != null ? _this1.getReserved(name) : _this1.h[name]).dispose();
		}
		this.mAtlases.remove(name);
	}
	,removeSound: function(name) {
		this.log("Removing sound '" + name + "'");
		this.mSounds.remove(name);
	}
	,removeXml: function(name,dispose) {
		if(dispose == null) {
			dispose = true;
		}
		this.log("Removing xml '" + name + "'");
		this.mXmls.remove(name);
	}
	,removeObject: function(name) {
		this.log("Removing object '" + name + "'");
		this.mObjects.remove(name);
	}
	,removeByteArray: function(name,dispose) {
		if(dispose == null) {
			dispose = true;
		}
		this.log("Removing byte array '" + name + "'");
		var tmp;
		if(dispose) {
			var _this = this.mByteArrays;
			tmp = __map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name);
		} else {
			tmp = false;
		}
		if(tmp) {
			var _this1 = this.mByteArrays;
			(__map_reserved[name] != null ? _this1.getReserved(name) : _this1.h[name]).clear();
		}
		this.mByteArrays.remove(name);
	}
	,purgeQueue: function() {
		starling_utils_ArrayUtil.clear(this.mQueue);
		this.dispatchEventWith("cancel");
	}
	,purge: function() {
		this.log("Purging all assets, emptying queue");
		this.purgeQueue();
		this.dispose();
		this.mTextures = new haxe_ds_StringMap();
		this.mAtlases = new haxe_ds_StringMap();
		this.mSounds = new haxe_ds_StringMap();
		this.mXmls = new haxe_ds_StringMap();
		this.mObjects = new haxe_ds_StringMap();
		this.mByteArrays = new haxe_ds_StringMap();
	}
	,enqueue: function(rawAssets) {
		var _g = 0;
		while(_g < rawAssets.length) {
			var rawAsset = rawAssets[_g];
			++_g;
			if(((rawAsset) instanceof Array) && rawAsset.__enum__ == null) {
				this.enqueue(rawAsset);
			} else if(typeof(rawAsset) == "string" || ((rawAsset) instanceof openfl_net_URLRequest)) {
				this.enqueueWithName(rawAsset);
			} else {
				this.log("Ignoring unsupported asset type: " + rawAsset.__name__);
			}
		}
	}
	,enqueueWithName: function(asset,name,options) {
		if(name == null) {
			name = this.getName(asset);
		}
		if(options == null) {
			options = this.mDefaultTextureOptions.clone();
		} else {
			options = options.clone();
		}
		this.log("Enqueuing '" + name + "'");
		this.mQueue.push({ name : name, asset : asset, options : options});
		return name;
	}
	,loadQueue: function(onProgress) {
		var _gthis = this;
		if(onProgress == null) {
			throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Argument 'onProgress' must not be null"));
		}
		if(this.mQueue.length == 0) {
			onProgress(1.0);
			return;
		}
		this.mStarling = starling_core_Starling.get_current();
		if(this.mStarling == null || this.mStarling.get_context() == null) {
			throw new js__$Boot_HaxeError(new openfl_errors_Error("The Starling instance needs to be ready before assets can be loaded."));
		}
		var PROGRESS_PART_ASSETS = 0.9;
		var PROGRESS_PART_XMLS = 1.0 - PROGRESS_PART_ASSETS;
		var i;
		var canceled = false;
		var xmls = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
		var assetInfos = this.mQueue.slice();
		var assetCount = this.mQueue.length;
		var assetProgress = [];
		var assetIndex = 0;
		var loadNextQueueElement = null;
		var cancel = null;
		var loadQueueElement = null;
		var updateAssetProgress = null;
		var processXmls = null;
		var processXml = null;
		var finish = null;
		var resume = null;
		loadNextQueueElement = function() {
			if(assetIndex < assetInfos.length) {
				assetIndex += 1;
				var index = assetIndex - 1;
				loadQueueElement(index,assetInfos[index]);
			}
		};
		loadQueueElement = function(index1,assetInfo) {
			if(canceled) {
				return;
			}
			var onElementProgress = function(progress) {
				updateAssetProgress(index1,progress * 0.8);
			};
			var onElementLoaded = function() {
				updateAssetProgress(index1,1.0);
				assetCount -= 1;
				if(assetCount > 0) {
					loadNextQueueElement();
				} else {
					processXmls();
				}
			};
			_gthis.processRawAsset(assetInfo.name,assetInfo.asset,assetInfo.options,xmls,onElementProgress,onElementLoaded);
		};
		updateAssetProgress = function(index2,progress1) {
			assetProgress[index2] = progress1;
			var sum = 0.0;
			var len = assetProgress.length;
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i1 = _g++;
				sum += assetProgress[i1];
			}
			onProgress(sum / len * PROGRESS_PART_ASSETS);
		};
		processXmls = function() {
			xmls.data.sort(function(a,b) {
				if(a.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(a.nodeType));
				}
				if(a.nodeName.split(":").pop() == "TextureAtlas") {
					return -1;
				} else {
					return 1;
				}
			});
			haxe_Timer.delay(function() {
				processXml(0);
			},1);
		};
		processXml = function(index3) {
			if(canceled) {
				return;
			} else if(index3 == xmls.data.get_length()) {
				finish();
				return;
			}
			var name;
			var texture;
			var xml = xmls.data.get(index3);
			if(xml.nodeType != Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(xml.nodeType));
			}
			var rootNode = xml.nodeName;
			var xmlProgress = (index3 + 1) / (xmls.data.get_length() + 1);
			if(rootNode == "TextureAtlas") {
				var name1 = xml.get("imagePath");
				name = _gthis.getName(name1);
				texture = _gthis.getTexture(name);
				if(texture != null) {
					_gthis.addTextureAtlas(name,new starling_textures_TextureAtlas(texture,xml));
					_gthis.removeTexture(name,false);
					if(_gthis.mKeepAtlasXmls) {
						_gthis.addXml(name,xml);
					}
				} else {
					_gthis.log("Cannot create atlas: texture '" + name + "' is missing.");
				}
			} else if(rootNode == "font") {
				var name2 = xml.elementsNamed("pages").next().elementsNamed("page").next().get("file");
				name = _gthis.getName(name2);
				texture = _gthis.getTexture(name);
				if(texture != null) {
					_gthis.log("Adding bitmap font '" + name + "'");
					starling_text_TextField.registerBitmapFont(new starling_text_BitmapFont(texture,xml),name);
					_gthis.removeTexture(name,false);
					if(_gthis.mKeepFontXmls) {
						_gthis.addXml(name,xml);
					}
				} else {
					_gthis.log("Cannot create bitmap font: texture '" + name + "' is missing.");
				}
			} else {
				throw new js__$Boot_HaxeError(new openfl_errors_Error("XML contents not recognized: " + rootNode));
			}
			onProgress(PROGRESS_PART_ASSETS + PROGRESS_PART_XMLS * xmlProgress);
			var f = processXml;
			var a1 = index3 + 1;
			haxe_Timer.delay(function() {
				f(a1);
			},1);
		};
		cancel = function() {
			_gthis.removeEventListener("cancel",cancel);
			_gthis.mNumLoadingQueues--;
			canceled = true;
		};
		finish = function() {
			haxe_Timer.delay(function() {
				if(!canceled) {
					cancel();
					onProgress(1.0);
				}
			},1);
		};
		var _g2 = 0;
		var _g11 = assetCount;
		while(_g2 < _g11) {
			var i2 = _g2++;
			assetProgress[i2] = 0.0;
		}
		var _g21 = 0;
		var _g3 = this.mNumConnections;
		while(_g21 < _g3) {
			var i3 = _g21++;
			loadNextQueueElement();
		}
		starling_utils_ArrayUtil.clear(this.mQueue);
		this.mNumLoadingQueues++;
		this.addEventListener("cancel",cancel);
	}
	,processRawAsset: function(name,rawAsset,options,xmls,onProgress,onComplete) {
		var _gthis = this;
		var canceled = false;
		var cancel = null;
		var progress = null;
		var process = null;
		var process1 = null;
		process1 = function(asset) {
			var texture = null;
			var bytes;
			var object = null;
			var xml = null;
			_gthis.mStarling.makeCurrent();
			if(!canceled) {
				if(asset == null) {
					onComplete();
				} else if(((asset) instanceof openfl_media_Sound)) {
					_gthis.addSound(name,asset);
					onComplete();
				} else if(((asset) instanceof Xml)) {
					xml = asset;
					xml = xml.firstElement();
					var process2;
					if(xml.nodeType != Xml.Element) {
						throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(xml.nodeType));
					}
					if(xml.nodeName != "TextureAtlas") {
						if(xml.nodeType != Xml.Element) {
							throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(xml.nodeType));
						}
						process2 = xml.nodeName == "font";
					} else {
						process2 = true;
					}
					if(process2) {
						xmls.data.push(xml);
					} else {
						_gthis.addXml(name,xml);
					}
					onComplete();
				} else if(starling_core_Starling.get_handleLostContext() && _gthis.mStarling.get_context().driverInfo == "Disposed") {
					_gthis.log("Context lost while processing assets, retrying ...");
					haxe_Timer.delay(function() {
						process1(asset);
					},1);
					return;
				} else if(((asset) instanceof openfl_display_Bitmap)) {
					texture = starling_textures_Texture.fromData(asset,options);
					texture.get_root().set_onRestore(function() {
						_gthis.mNumLostTextures++;
						_gthis.loadRawAsset(rawAsset,null,function(asset1) {
							try {
								if(asset1 == null) {
									throw new js__$Boot_HaxeError(new openfl_errors_Error("Reload failed"));
								}
								texture.get_root().uploadBitmap(js_Boot.__cast(asset1 , openfl_display_Bitmap));
								asset1.bitmapData.dispose();
							} catch( e ) {
								haxe_CallStack.lastException = e;
								var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
								if(((e1) instanceof openfl_errors_Error)) {
									_gthis.log("Texture restoration failed for '" + name + "': " + e1.message);
								} else {
									throw e;
								}
							}
							_gthis.mNumRestoredTextures++;
							if(_gthis.mNumLostTextures == _gthis.mNumRestoredTextures) {
								_gthis.dispatchEventWith("texturesRestored");
							}
						});
					});
					asset.bitmapData.dispose();
					_gthis.addTexture(name,texture);
					onComplete();
				} else if(((asset) instanceof openfl_utils_ByteArrayData)) {
					bytes = asset;
					if(starling_textures_AtfData.isAtfData(bytes)) {
						var process3 = options.get_onReady();
						var process4 = _gthis.prependCallback(process3,function() {
							_gthis.addTexture(name,texture);
							onComplete();
						});
						options.set_onReady(process4);
						texture = starling_textures_Texture.fromData(bytes,options);
						texture.get_root().set_onRestore(function() {
							_gthis.mNumLostTextures++;
							_gthis.loadRawAsset(rawAsset,null,function(asset2) {
								try {
									if(asset2 == null) {
										throw new js__$Boot_HaxeError(new openfl_errors_Error("Reload failed"));
									}
									texture.get_root().uploadAtfData(js_Boot.__cast(asset2 , openfl_utils_ByteArrayData),0,true);
									asset2.clear();
								} catch( e2 ) {
									haxe_CallStack.lastException = e2;
									var e3 = ((e2) instanceof js__$Boot_HaxeError) ? e2.val : e2;
									if(((e3) instanceof openfl_errors_Error)) {
										_gthis.log("Texture restoration failed for '" + name + "': " + e3.message);
									} else {
										throw e2;
									}
								}
								_gthis.mNumRestoredTextures++;
								if(_gthis.mNumLostTextures == _gthis.mNumRestoredTextures) {
									_gthis.dispatchEventWith("texturesRestored");
								}
							});
						});
						bytes.clear();
					} else if(_gthis.byteArrayStartsWith(bytes,"{") || _gthis.byteArrayStartsWith(bytes,"[")) {
						try {
							object = JSON.parse(bytes.readUTFBytes(bytes.length));
						} catch( e4 ) {
							haxe_CallStack.lastException = e4;
							var e5 = ((e4) instanceof js__$Boot_HaxeError) ? e4.val : e4;
							if(((e5) instanceof openfl_errors_Error)) {
								_gthis.log("Could not parse JSON: " + e5.message);
								_gthis.dispatchEventWith("parseError",false,name);
							} else {
								throw e4;
							}
						}
						if(object != null) {
							_gthis.addObject(name,object);
						}
						bytes.clear();
						onComplete();
					} else if(_gthis.byteArrayStartsWith(bytes,"<")) {
						try {
							xml = Xml.parse(bytes.toString());
						} catch( e6 ) {
							haxe_CallStack.lastException = e6;
							var e7 = ((e6) instanceof js__$Boot_HaxeError) ? e6.val : e6;
							if(((e7) instanceof openfl_errors_Error)) {
								_gthis.log("Could not parse XML: " + e7.message);
								_gthis.dispatchEventWith("parseError",false,name);
							} else {
								throw e6;
							}
						}
						process1(xml);
						bytes.clear();
					} else {
						_gthis.addByteArray(name,bytes);
						onComplete();
					}
				} else {
					_gthis.addObject(name,asset);
					onComplete();
				}
			}
			asset = null;
			bytes = null;
			_gthis.removeEventListener("cancel",cancel);
		};
		progress = function(ratio) {
			if(!canceled) {
				onProgress(ratio);
			}
		};
		cancel = function() {
			canceled = true;
		};
		this.addEventListener("cancel",cancel);
		this.loadRawAsset(rawAsset,progress,process1);
	}
	,loadRawAsset: function(rawAsset,onProgress,onComplete) {
		var _gthis = this;
		var extension = null;
		var loaderInfo = null;
		var urlLoader = null;
		var urlRequest = null;
		var url = null;
		var complete = null;
		var onIoError = null;
		var onSecurityError = null;
		var onHttpResponseStatus = null;
		var onLoadProgress = null;
		var onUrlLoaderComplete = null;
		var onLoaderComplete = null;
		onIoError = function(event) {
			_gthis.log("IO error: " + event.text);
			_gthis.dispatchEventWith("ioError",false,url);
			complete(null);
		};
		onSecurityError = function(event1) {
			_gthis.log("security error: " + event1.text);
			_gthis.dispatchEventWith("securityError",false,url);
			complete(null);
		};
		onHttpResponseStatus = function(event2) {
			if(extension == null) {
				var headers = event2.responseHeaders;
				var contentType = _gthis.getHttpHeader(headers,"Content-Type");
				if(contentType != null && new EReg("(audio|image)/","").split(contentType) != null) {
					extension = contentType.split("/").pop();
				}
			}
		};
		onLoadProgress = function(event3) {
			if(onProgress != null && event3.bytesTotal > 0) {
				onProgress(event3.bytesLoaded / event3.bytesTotal);
			}
		};
		onUrlLoaderComplete = function(event4) {
			var bytes = _gthis.transformData(js_Boot.__cast(urlLoader.data , openfl_utils_ByteArrayData),url);
			var sound;
			if(bytes == null) {
				complete(null);
				return;
			}
			if(extension != null) {
				extension = extension.toLowerCase();
			}
			switch(extension) {
			case "gif":case "jpeg":case "jpg":case "png":
				var loaderContext = new openfl_system_LoaderContext(_gthis.mCheckPolicyFile);
				var loader = new openfl_display_Loader();
				loaderInfo = loader.contentLoaderInfo;
				loaderInfo.addEventListener("ioError",onIoError);
				loaderInfo.addEventListener("complete",onLoaderComplete);
				loader.loadBytes(bytes,loaderContext);
				break;
			case "mp3":case "mpeg":
				sound = new openfl_media_Sound();
				sound.loadCompressedDataFromByteArray(bytes,bytes.length);
				bytes.clear();
				complete(sound);
				break;
			default:
				complete(bytes);
			}
		};
		onLoaderComplete = function(event5) {
			urlLoader.data.clear();
			complete(event5.target.content);
		};
		complete = function(asset) {
			if(urlLoader != null) {
				urlLoader.removeEventListener("ioError",onIoError);
				urlLoader.removeEventListener("securityError",onSecurityError);
				urlLoader.removeEventListener("httpResponseStatus",onHttpResponseStatus);
				urlLoader.removeEventListener("progress",onLoadProgress);
				urlLoader.removeEventListener("complete",onUrlLoaderComplete);
			}
			if(loaderInfo != null) {
				loaderInfo.removeEventListener("ioError",onIoError);
				loaderInfo.removeEventListener("complete",onLoaderComplete);
			}
			onComplete(asset);
		};
		if(js_Boot.__instanceof(rawAsset,Class)) {
			haxe_Timer.delay(function() {
				Type.createInstance(rawAsset,[]);
			},1);
		} else if(typeof(rawAsset) == "string" || ((rawAsset) instanceof openfl_net_URLRequest)) {
			urlRequest = ((rawAsset) instanceof openfl_net_URLRequest) ? rawAsset : null;
			if(urlRequest == null) {
				urlRequest = new openfl_net_URLRequest(js_Boot.__cast(rawAsset , String));
			}
			url = urlRequest.url;
			extension = this.getExtensionFromUrl(url);
			urlLoader = new openfl_net_URLLoader();
			urlLoader.dataFormat = 0;
			urlLoader.addEventListener("ioError",onIoError);
			urlLoader.addEventListener("securityError",onSecurityError);
			urlLoader.addEventListener("httpResponseStatus",onHttpResponseStatus);
			urlLoader.addEventListener("progress",onLoadProgress);
			urlLoader.addEventListener("complete",onUrlLoaderComplete);
			urlLoader.load(urlRequest);
		}
	}
	,getName: function(rawAsset) {
		var name = null;
		if(typeof(rawAsset) == "string") {
			name = js_Boot.__cast(rawAsset , String);
		} else if(((rawAsset) instanceof openfl_net_URLRequest)) {
			name = (js_Boot.__cast(rawAsset , openfl_net_URLRequest)).url;
		}
		if(name != null) {
			var _this_r = new RegExp("%20","g".split("u").join(""));
			name = name.replace(_this_r," ");
			name = this.getBasenameFromUrl(name);
			if(name != null) {
				return name;
			} else {
				throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Could not extract name from String '" + Std.string(rawAsset) + "'"));
			}
		} else {
			name = rawAsset.__name__;
			throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Cannot extract names for objects of type '" + name + "'"));
		}
	}
	,transformData: function(data,url) {
		return data;
	}
	,log: function(message) {
		if(this.mVerbose) {
			haxe_Log.trace("[AssetManager] " + message,{ fileName : "starling/utils/AssetManager.hx", lineNumber : 1050, className : "starling.utils.AssetManager", methodName : "log"});
		}
	}
	,byteArrayStartsWith: function(bytes,char) {
		var start = 0;
		var length = bytes.length;
		var wanted = HxOverrides.cca(char,0);
		if(length >= 4 && (bytes.b[0] == 0 && bytes.b[1] == 0 && bytes.b[2] == 254 && bytes.b[3] == 255) || bytes.b[0] == 255 && bytes.b[1] == 254 && bytes.b[2] == 0 && bytes.b[3] == 0) {
			start = 4;
		} else if(length >= 3 && bytes.b[0] == 239 && bytes.b[1] == 187 && bytes.b[2] == 191) {
			start = 3;
		} else if(length >= 2 && (bytes.b[0] == 254 && bytes.b[1] == 255) || bytes.b[0] == 255 && bytes.b[1] == 254) {
			start = 2;
		}
		var _g = start;
		var _g1 = length;
		while(_g < _g1) {
			var i = _g++;
			var byte = bytes.b[i];
			if(byte == 0 || byte == 10 || byte == 13 || byte == 32) {
				continue;
			} else {
				return byte == wanted;
			}
		}
		return false;
	}
	,getDictionaryKeys: function(dictionary,prefix,result) {
		if(prefix == null) {
			prefix = "";
		}
		if(result == null) {
			result = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
		}
		var name = dictionary.keys();
		while(name.hasNext()) {
			var name1 = name.next();
			if(name1.indexOf(prefix) == 0) {
				var index = result.data.get_length();
				result.data.set(index,name1);
			}
		}
		result.data.sort($bind(this,this.compare));
		return result;
	}
	,getHttpHeader: function(headers,headerName) {
		if(headers != null) {
			var _g = 0;
			while(_g < headers.length) {
				var header = headers[_g];
				++_g;
				if(header.name == headerName) {
					return header.value;
				}
			}
		}
		return null;
	}
	,getBasenameFromUrl: function(url) {
		var isMatched = starling_utils_AssetManager.NAME_REGEX.match(url);
		if(isMatched) {
			return starling_utils_AssetManager.NAME_REGEX.matched(1);
		} else {
			return null;
		}
	}
	,getExtensionFromUrl: function(url) {
		var isMatched = starling_utils_AssetManager.NAME_REGEX.match(url);
		if(isMatched) {
			return starling_utils_AssetManager.NAME_REGEX.matched(2);
		} else {
			return null;
		}
	}
	,prependCallback: function(oldCallback,newCallback) {
		if(oldCallback == null) {
			return newCallback;
		} else if(newCallback == null) {
			return oldCallback;
		} else {
			return function() {
				newCallback();
				oldCallback();
			};
		}
	}
	,compare: function(a,b) {
		if(a < b) {
			return -1;
		} else if(a > b) {
			return 1;
		} else {
			return 0;
		}
	}
	,get_queue: function() {
		return this.mQueue;
	}
	,get_numQueuedAssets: function() {
		return this.mQueue.length;
	}
	,get_verbose: function() {
		return this.mVerbose;
	}
	,set_verbose: function(value) {
		return this.mVerbose = value;
	}
	,get_isLoading: function() {
		return this.mNumLoadingQueues > 0;
	}
	,get_useMipMaps: function() {
		return this.mDefaultTextureOptions.get_mipMapping();
	}
	,set_useMipMaps: function(value) {
		return this.mDefaultTextureOptions.set_mipMapping(value);
	}
	,get_textureRepeat: function() {
		return this.mDefaultTextureOptions.get_repeat();
	}
	,set_textureRepeat: function(value) {
		return this.mDefaultTextureOptions.set_repeat(value);
	}
	,get_scaleFactor: function() {
		return this.mDefaultTextureOptions.get_scale();
	}
	,set_scaleFactor: function(value) {
		return this.mDefaultTextureOptions.set_scale(value);
	}
	,get_textureFormat: function() {
		return this.mDefaultTextureOptions.get_format();
	}
	,set_textureFormat: function(value) {
		return this.mDefaultTextureOptions.set_format(value);
	}
	,get_checkPolicyFile: function() {
		return this.mCheckPolicyFile;
	}
	,set_checkPolicyFile: function(value) {
		return this.mCheckPolicyFile = value;
	}
	,get_keepAtlasXmls: function() {
		return this.mKeepAtlasXmls;
	}
	,set_keepAtlasXmls: function(value) {
		return this.mKeepAtlasXmls = value;
	}
	,get_keepFontXmls: function() {
		return this.mKeepFontXmls;
	}
	,set_keepFontXmls: function(value) {
		return this.mKeepFontXmls = value;
	}
	,get_numConnections: function() {
		return this.mNumConnections;
	}
	,set_numConnections: function(value) {
		return this.mNumConnections = value;
	}
	,__class__: starling_utils_AssetManager
	,__properties__: {set_numConnections:"set_numConnections",get_numConnections:"get_numConnections",set_keepFontXmls:"set_keepFontXmls",get_keepFontXmls:"get_keepFontXmls",set_keepAtlasXmls:"set_keepAtlasXmls",get_keepAtlasXmls:"get_keepAtlasXmls",set_checkPolicyFile:"set_checkPolicyFile",get_checkPolicyFile:"get_checkPolicyFile",set_textureFormat:"set_textureFormat",get_textureFormat:"get_textureFormat",set_scaleFactor:"set_scaleFactor",get_scaleFactor:"get_scaleFactor",set_textureRepeat:"set_textureRepeat",get_textureRepeat:"get_textureRepeat",set_useMipMaps:"set_useMipMaps",get_useMipMaps:"get_useMipMaps",get_isLoading:"get_isLoading",set_verbose:"set_verbose",get_verbose:"get_verbose",get_numQueuedAssets:"get_numQueuedAssets",get_queue:"get_queue"}
});
var starling_utils_BlendModeUtils = function() { };
$hxClasses["starling.utils.BlendModeUtils"] = starling_utils_BlendModeUtils;
starling_utils_BlendModeUtils.__name__ = "starling.utils.BlendModeUtils";
starling_utils_BlendModeUtils.toBatcherBlendMode = function(blendMode,premultipliedAlpha) {
	switch(premultipliedAlpha) {
	case false:
		switch(blendMode) {
		case "add":
			return openfl__$internal_renderer_opengl_batcher_BlendMode.NOPREMULT_ADD;
		case "below":
			return openfl__$internal_renderer_opengl_batcher_BlendMode.NOPREMULT_BELOW;
		case "erase":
			return openfl__$internal_renderer_opengl_batcher_BlendMode.NOPREMULT_ERASE;
		case "mask":
			return openfl__$internal_renderer_opengl_batcher_BlendMode.NOPREMULT_MASK;
		case "multiply":
			return openfl__$internal_renderer_opengl_batcher_BlendMode.NOPREMULT_MULTIPLY;
		case "none":
			return openfl__$internal_renderer_opengl_batcher_BlendMode.NOPREMULT_NONE;
		case "normal":
			return openfl__$internal_renderer_opengl_batcher_BlendMode.NOPREMULT_NORMAL;
		case "screen":
			return openfl__$internal_renderer_opengl_batcher_BlendMode.NOPREMULT_SCREEN;
		default:
			return openfl__$internal_renderer_opengl_batcher_BlendMode.NOPREMULT_NORMAL;
		}
		break;
	case true:
		switch(blendMode) {
		case "add":
			return openfl__$internal_renderer_opengl_batcher_BlendMode.ADD;
		case "below":
			return openfl__$internal_renderer_opengl_batcher_BlendMode.BELOW;
		case "erase":
			return openfl__$internal_renderer_opengl_batcher_BlendMode.ERASE;
		case "mask":
			return openfl__$internal_renderer_opengl_batcher_BlendMode.MASK;
		case "multiply":
			return openfl__$internal_renderer_opengl_batcher_BlendMode.MULTIPLY;
		case "none":
			return openfl__$internal_renderer_opengl_batcher_BlendMode.NONE;
		case "normal":
			return openfl__$internal_renderer_opengl_batcher_BlendMode.NORMAL;
		case "screen":
			return openfl__$internal_renderer_opengl_batcher_BlendMode.SCREEN;
		default:
			return openfl__$internal_renderer_opengl_batcher_BlendMode.NORMAL;
		}
		break;
	}
};
var starling_utils_Color = function() { };
$hxClasses["starling.utils.Color"] = starling_utils_Color;
starling_utils_Color.__name__ = "starling.utils.Color";
starling_utils_Color.getAlpha = function(color) {
	return color >>> 24 & 255;
};
starling_utils_Color.getRed = function(color) {
	return color >>> 16 & 255;
};
starling_utils_Color.getGreen = function(color) {
	return color >>> 8 & 255;
};
starling_utils_Color.getBlue = function(color) {
	return color & 255;
};
starling_utils_Color.rgb = function(red,green,blue) {
	return red << 16 | green << 8 | blue;
};
starling_utils_Color.argb = function(alpha,red,green,blue) {
	return alpha << 24 | red << 16 | green << 8 | blue;
};
var starling_utils_Execute = function() { };
$hxClasses["starling.utils.Execute"] = starling_utils_Execute;
starling_utils_Execute.__name__ = "starling.utils.Execute";
starling_utils_Execute.execute = function(func,args) {
	if(func != null) {
		var maxNumArgs = func.length;
		var _g = args.length;
		var _g1 = maxNumArgs;
		while(_g < _g1) {
			var i = _g++;
			args[i] = null;
		}
		switch(maxNumArgs) {
		case -1:
			func.apply(func,args);
			break;
		case 0:
			func();
			break;
		case 1:
			func(args[0]);
			break;
		case 2:
			func(args[0],args[1]);
			break;
		case 3:
			func(args[0],args[1],args[2]);
			break;
		case 4:
			func(args[0],args[1],args[2],args[3]);
			break;
		case 5:
			func(args[0],args[1],args[2],args[3],args[4]);
			break;
		case 6:
			func(args[0],args[1],args[2],args[3],args[4],args[5]);
			break;
		case 7:
			func(args[0],args[1],args[2],args[3],args[4],args[5],args[6]);
			break;
		default:
			func.apply(func,args.slice(0,maxNumArgs));
		}
	}
};
var starling_utils_HAlign = function() { };
$hxClasses["starling.utils.HAlign"] = starling_utils_HAlign;
starling_utils_HAlign.__name__ = "starling.utils.HAlign";
starling_utils_HAlign.isValid = function(hAlign) {
	if(!(hAlign == "left" || hAlign == "center")) {
		return hAlign == "right";
	} else {
		return true;
	}
};
var starling_utils_MathUtil = function() { };
$hxClasses["starling.utils.MathUtil"] = starling_utils_MathUtil;
starling_utils_MathUtil.__name__ = "starling.utils.MathUtil";
starling_utils_MathUtil.intersectLineWithXYPlane = function(pointA,pointB,resultPoint) {
	if(resultPoint == null) {
		resultPoint = new openfl_geom_Point();
	}
	var vectorX = pointB.x - pointA.x;
	var vectorY = pointB.y - pointA.y;
	var vectorZ = pointB.z - pointA.z;
	var lambda = -pointA.z / vectorZ;
	resultPoint.x = pointA.x + lambda * vectorX;
	resultPoint.y = pointA.y + lambda * vectorY;
	return resultPoint;
};
starling_utils_MathUtil.normalizeAngle = function(angle) {
	angle %= starling_utils_MathUtil.TWO_PI;
	if(angle < -Math.PI) {
		angle += starling_utils_MathUtil.TWO_PI;
	}
	if(angle > Math.PI) {
		angle -= starling_utils_MathUtil.TWO_PI;
	}
	return angle;
};
starling_utils_MathUtil.clamp = function(value,min,max) {
	if(value < min) {
		return min;
	} else if(value > max) {
		return max;
	} else {
		return value;
	}
};
starling_utils_MathUtil.min = function(values) {
	if(values.length == 0) {
		return 0.0;
	}
	var min = values[0];
	var _g = 1;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		if(values[i] < min) {
			min = values[i];
		}
	}
	return min;
};
starling_utils_MathUtil.deg2rad = function(deg) {
	return deg / 180.0 * Math.PI;
};
starling_utils_MathUtil.rad2deg = function(rad) {
	return rad / Math.PI * 180.0;
};
var starling_utils_MatrixUtil = function() { };
$hxClasses["starling.utils.MatrixUtil"] = starling_utils_MatrixUtil;
starling_utils_MatrixUtil.__name__ = "starling.utils.MatrixUtil";
starling_utils_MatrixUtil.convertTo3D = function(matrix,resultMatrix) {
	if(resultMatrix == null) {
		resultMatrix = new openfl_geom_Matrix3D();
	}
	starling_utils_MatrixUtil.sRawData.data.set(0,matrix.a);
	starling_utils_MatrixUtil.sRawData.data.set(1,matrix.b);
	starling_utils_MatrixUtil.sRawData.data.set(4,matrix.c);
	starling_utils_MatrixUtil.sRawData.data.set(5,matrix.d);
	starling_utils_MatrixUtil.sRawData.data.set(12,matrix.tx);
	starling_utils_MatrixUtil.sRawData.data.set(13,matrix.ty);
	resultMatrix.copyRawDataFrom(starling_utils_MatrixUtil.sRawData);
	return resultMatrix;
};
starling_utils_MatrixUtil.convertTo2D = function(matrix3D,resultMatrix) {
	if(resultMatrix == null) {
		resultMatrix = new openfl_geom_Matrix();
	}
	matrix3D.copyRawDataTo(starling_utils_MatrixUtil.sRawData2);
	resultMatrix.a = starling_utils_MatrixUtil.sRawData2.data.get(0);
	resultMatrix.b = starling_utils_MatrixUtil.sRawData2.data.get(1);
	resultMatrix.c = starling_utils_MatrixUtil.sRawData2.data.get(4);
	resultMatrix.d = starling_utils_MatrixUtil.sRawData2.data.get(5);
	resultMatrix.tx = starling_utils_MatrixUtil.sRawData2.data.get(12);
	resultMatrix.ty = starling_utils_MatrixUtil.sRawData2.data.get(13);
	return resultMatrix;
};
starling_utils_MatrixUtil.transformPoint = function(matrix,point,resultPoint) {
	return starling_utils_MatrixUtil.transformCoords(matrix,point.x,point.y,resultPoint);
};
starling_utils_MatrixUtil.transformPoint3D = function(matrix,point,resultPoint) {
	return starling_utils_MatrixUtil.transformCoords3D(matrix,point.x,point.y,point.z,resultPoint);
};
starling_utils_MatrixUtil.transformCoords = function(matrix,x,y,resultPoint) {
	if(resultPoint == null) {
		resultPoint = new openfl_geom_Point();
	}
	resultPoint.x = matrix.a * x + matrix.c * y + matrix.tx;
	resultPoint.y = matrix.d * y + matrix.b * x + matrix.ty;
	return resultPoint;
};
starling_utils_MatrixUtil.transformCoords3D = function(matrix,x,y,z,resultPoint) {
	if(resultPoint == null) {
		resultPoint = new openfl_geom_Vector3D();
	}
	matrix.copyRawDataTo(starling_utils_MatrixUtil.sRawData2);
	resultPoint.x = x * starling_utils_MatrixUtil.sRawData2.data.get(0) + y * starling_utils_MatrixUtil.sRawData2.data.get(4) + z * starling_utils_MatrixUtil.sRawData2.data.get(8) + starling_utils_MatrixUtil.sRawData2.data.get(12);
	resultPoint.y = x * starling_utils_MatrixUtil.sRawData2.data.get(1) + y * starling_utils_MatrixUtil.sRawData2.data.get(5) + z * starling_utils_MatrixUtil.sRawData2.data.get(9) + starling_utils_MatrixUtil.sRawData2.data.get(13);
	resultPoint.z = x * starling_utils_MatrixUtil.sRawData2.data.get(2) + y * starling_utils_MatrixUtil.sRawData2.data.get(6) + z * starling_utils_MatrixUtil.sRawData2.data.get(10) + starling_utils_MatrixUtil.sRawData2.data.get(14);
	resultPoint.w = x * starling_utils_MatrixUtil.sRawData2.data.get(3) + y * starling_utils_MatrixUtil.sRawData2.data.get(7) + z * starling_utils_MatrixUtil.sRawData2.data.get(11) + starling_utils_MatrixUtil.sRawData2.data.get(15);
	return resultPoint;
};
starling_utils_MatrixUtil.skew = function(matrix,skewX,skewY) {
	var sinX = Math.sin(skewX);
	var cosX = Math.cos(skewX);
	var sinY = Math.sin(skewY);
	var cosY = Math.cos(skewY);
	matrix.setTo(matrix.a * cosY - matrix.b * sinX,matrix.a * sinY + matrix.b * cosX,matrix.c * cosY - matrix.d * sinX,matrix.c * sinY + matrix.d * cosX,matrix.tx * cosY - matrix.ty * sinX,matrix.tx * sinY + matrix.ty * cosX);
};
starling_utils_MatrixUtil.prependMatrix = function(base,prep) {
	base.setTo(base.a * prep.a + base.c * prep.b,base.b * prep.a + base.d * prep.b,base.a * prep.c + base.c * prep.d,base.b * prep.c + base.d * prep.d,base.tx + base.a * prep.tx + base.c * prep.ty,base.ty + base.b * prep.tx + base.d * prep.ty);
};
starling_utils_MatrixUtil.prependTranslation = function(matrix,tx,ty) {
	matrix.tx += matrix.a * tx + matrix.c * ty;
	matrix.ty += matrix.b * tx + matrix.d * ty;
};
starling_utils_MatrixUtil.prependScale = function(matrix,sx,sy) {
	matrix.setTo(matrix.a * sx,matrix.b * sx,matrix.c * sy,matrix.d * sy,matrix.tx,matrix.ty);
};
starling_utils_MatrixUtil.prependRotation = function(matrix,angle) {
	var sin = Math.sin(angle);
	var cos = Math.cos(angle);
	matrix.setTo(matrix.a * cos + matrix.c * sin,matrix.b * cos + matrix.d * sin,matrix.c * cos - matrix.a * sin,matrix.d * cos - matrix.b * sin,matrix.tx,matrix.ty);
};
starling_utils_MatrixUtil.prependSkew = function(matrix,skewX,skewY) {
	var sinX = Math.sin(skewX);
	var cosX = Math.cos(skewX);
	var sinY = Math.sin(skewY);
	var cosY = Math.cos(skewY);
	matrix.setTo(matrix.a * cosY + matrix.c * sinY,matrix.b * cosY + matrix.d * sinY,matrix.c * cosX - matrix.a * sinX,matrix.d * cosX - matrix.b * sinX,matrix.tx,matrix.ty);
};
var starling_utils_Max = function() { };
$hxClasses["starling.utils.Max"] = starling_utils_Max;
starling_utils_Max.__name__ = "starling.utils.Max";
var starling_utils_PowerOfTwo = function() { };
$hxClasses["starling.utils.PowerOfTwo"] = starling_utils_PowerOfTwo;
starling_utils_PowerOfTwo.__name__ = "starling.utils.PowerOfTwo";
starling_utils_PowerOfTwo.getNextPowerOfTwo = function(number) {
	if(number > 0 && (number & number - 1) == 0) {
		return number;
	} else {
		var result = 1;
		while(result < number) result <<= 1;
		return result;
	}
};
var starling_utils_RectangleUtil = function() { };
$hxClasses["starling.utils.RectangleUtil"] = starling_utils_RectangleUtil;
starling_utils_RectangleUtil.__name__ = "starling.utils.RectangleUtil";
starling_utils_RectangleUtil.intersect = function(rect1,rect2,resultRect) {
	if(resultRect == null) {
		resultRect = new openfl_geom_Rectangle();
	}
	var left = rect1.x > rect2.x ? rect1.x : rect2.x;
	var right = rect1.get_right() < rect2.get_right() ? rect1.get_right() : rect2.get_right();
	var top = rect1.y > rect2.y ? rect1.y : rect2.y;
	var bottom = rect1.get_bottom() < rect2.get_bottom() ? rect1.get_bottom() : rect2.get_bottom();
	if(left > right || top > bottom) {
		resultRect.setEmpty();
	} else {
		resultRect.setTo(left,top,right - left,bottom - top);
	}
	return resultRect;
};
starling_utils_RectangleUtil.fit = function(rectangle,into,scaleMode,pixelPerfect,resultRect) {
	if(pixelPerfect == null) {
		pixelPerfect = false;
	}
	if(scaleMode == null) {
		scaleMode = "showAll";
	}
	if(!starling_utils_ScaleMode.isValid(scaleMode)) {
		throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Invalid scaleMode: " + scaleMode));
	}
	if(resultRect == null) {
		resultRect = new openfl_geom_Rectangle();
	}
	var width = rectangle.width;
	var height = rectangle.height;
	var factorX = into.width / width;
	var factorY = into.height / height;
	var factor = 1.0;
	if(scaleMode == "showAll") {
		factor = factorX < factorY ? factorX : factorY;
		if(pixelPerfect) {
			factor = starling_utils_RectangleUtil.nextSuitableScaleFactor(factor,false);
		}
	} else if(scaleMode == "noBorder") {
		factor = factorX > factorY ? factorX : factorY;
		if(pixelPerfect) {
			factor = starling_utils_RectangleUtil.nextSuitableScaleFactor(factor,true);
		}
	}
	width *= factor;
	height *= factor;
	resultRect.setTo(into.x + (into.width - width) / 2,into.y + (into.height - height) / 2,width,height);
	return resultRect;
};
starling_utils_RectangleUtil.nextSuitableScaleFactor = function(factor,up) {
	var divisor = 1.0;
	if(up) {
		if(factor >= 0.5) {
			return Math.ceil(factor);
		} else {
			while(1.0 / (divisor + 1) > factor) ++divisor;
		}
	} else if(factor >= 1.0) {
		return Math.floor(factor);
	} else {
		while(1.0 / divisor > factor) ++divisor;
	}
	return 1.0 / divisor;
};
starling_utils_RectangleUtil.normalize = function(rect) {
	if(rect.width < 0) {
		rect.width = -rect.width;
		rect.x -= rect.width;
	}
	if(rect.height < 0) {
		rect.height = -rect.height;
		rect.y -= rect.height;
	}
};
starling_utils_RectangleUtil.getBounds = function(rectangle,transformationMatrix,resultRect) {
	if(resultRect == null) {
		resultRect = new openfl_geom_Rectangle();
	}
	var minX = 1.79e+308;
	var maxX = -1.79e+308;
	var minY = 1.79e+308;
	var maxY = -1.79e+308;
	starling_utils_MatrixUtil.transformCoords(transformationMatrix,starling_utils_RectangleUtil.sPositions[0].x * rectangle.width,starling_utils_RectangleUtil.sPositions[0].y * rectangle.height,starling_utils_RectangleUtil.sHelperPoint);
	if(minX > starling_utils_RectangleUtil.sHelperPoint.x) {
		minX = starling_utils_RectangleUtil.sHelperPoint.x;
	}
	if(maxX < starling_utils_RectangleUtil.sHelperPoint.x) {
		maxX = starling_utils_RectangleUtil.sHelperPoint.x;
	}
	if(minY > starling_utils_RectangleUtil.sHelperPoint.y) {
		minY = starling_utils_RectangleUtil.sHelperPoint.y;
	}
	if(maxY < starling_utils_RectangleUtil.sHelperPoint.y) {
		maxY = starling_utils_RectangleUtil.sHelperPoint.y;
	}
	starling_utils_MatrixUtil.transformCoords(transformationMatrix,starling_utils_RectangleUtil.sPositions[1].x * rectangle.width,starling_utils_RectangleUtil.sPositions[1].y * rectangle.height,starling_utils_RectangleUtil.sHelperPoint);
	if(minX > starling_utils_RectangleUtil.sHelperPoint.x) {
		minX = starling_utils_RectangleUtil.sHelperPoint.x;
	}
	if(maxX < starling_utils_RectangleUtil.sHelperPoint.x) {
		maxX = starling_utils_RectangleUtil.sHelperPoint.x;
	}
	if(minY > starling_utils_RectangleUtil.sHelperPoint.y) {
		minY = starling_utils_RectangleUtil.sHelperPoint.y;
	}
	if(maxY < starling_utils_RectangleUtil.sHelperPoint.y) {
		maxY = starling_utils_RectangleUtil.sHelperPoint.y;
	}
	starling_utils_MatrixUtil.transformCoords(transformationMatrix,starling_utils_RectangleUtil.sPositions[2].x * rectangle.width,starling_utils_RectangleUtil.sPositions[2].y * rectangle.height,starling_utils_RectangleUtil.sHelperPoint);
	if(minX > starling_utils_RectangleUtil.sHelperPoint.x) {
		minX = starling_utils_RectangleUtil.sHelperPoint.x;
	}
	if(maxX < starling_utils_RectangleUtil.sHelperPoint.x) {
		maxX = starling_utils_RectangleUtil.sHelperPoint.x;
	}
	if(minY > starling_utils_RectangleUtil.sHelperPoint.y) {
		minY = starling_utils_RectangleUtil.sHelperPoint.y;
	}
	if(maxY < starling_utils_RectangleUtil.sHelperPoint.y) {
		maxY = starling_utils_RectangleUtil.sHelperPoint.y;
	}
	starling_utils_MatrixUtil.transformCoords(transformationMatrix,starling_utils_RectangleUtil.sPositions[3].x * rectangle.width,starling_utils_RectangleUtil.sPositions[3].y * rectangle.height,starling_utils_RectangleUtil.sHelperPoint);
	if(minX > starling_utils_RectangleUtil.sHelperPoint.x) {
		minX = starling_utils_RectangleUtil.sHelperPoint.x;
	}
	if(maxX < starling_utils_RectangleUtil.sHelperPoint.x) {
		maxX = starling_utils_RectangleUtil.sHelperPoint.x;
	}
	if(minY > starling_utils_RectangleUtil.sHelperPoint.y) {
		minY = starling_utils_RectangleUtil.sHelperPoint.y;
	}
	if(maxY < starling_utils_RectangleUtil.sHelperPoint.y) {
		maxY = starling_utils_RectangleUtil.sHelperPoint.y;
	}
	resultRect.setTo(minX,minY,maxX - minX,maxY - minY);
	return resultRect;
};
var starling_utils_ScaleMode = function() { };
$hxClasses["starling.utils.ScaleMode"] = starling_utils_ScaleMode;
starling_utils_ScaleMode.__name__ = "starling.utils.ScaleMode";
starling_utils_ScaleMode.isValid = function(scaleMode) {
	if(!(scaleMode == "none" || scaleMode == "noBorder")) {
		return scaleMode == "showAll";
	} else {
		return true;
	}
};
var starling_utils_StringUtil = function() { };
$hxClasses["starling.utils.StringUtil"] = starling_utils_StringUtil;
starling_utils_StringUtil.__name__ = "starling.utils.StringUtil";
starling_utils_StringUtil.formatString = function(format,args) {
	var _g = 0;
	var _g1 = args.length;
	while(_g < _g1) {
		var i = _g++;
		var r_r = new RegExp("\\{" + i + "\\}","g".split("u").join(""));
		format = format.replace(r_r,Std.string(args[i]));
	}
	return format;
};
var starling_utils_SystemUtil = function() { };
$hxClasses["starling.utils.SystemUtil"] = starling_utils_SystemUtil;
starling_utils_SystemUtil.__name__ = "starling.utils.SystemUtil";
starling_utils_SystemUtil.__properties__ = {get_supportsVideoTexture:"get_supportsVideoTexture",get_supportsDepthAndStencil:"get_supportsDepthAndStencil",get_supportsRelaxedTargetClearRequirement:"get_supportsRelaxedTargetClearRequirement",get_platform:"get_platform",get_isDesktop:"get_isDesktop",get_isAIR:"get_isAIR",get_isApplicationActive:"get_isApplicationActive"};
starling_utils_SystemUtil.initialize = function() {
	if(starling_utils_SystemUtil.sInitialized) {
		return;
	}
	starling_utils_SystemUtil.sInitialized = true;
	starling_utils_SystemUtil.sPlatform = HxOverrides.substr(openfl_system_Capabilities.get_version(),0,3);
	starling_utils_SystemUtil.sVersion = HxOverrides.substr(openfl_system_Capabilities.get_version(),4,null);
	try {
		var nativeApp = openfl_Lib.current;
		nativeApp.addEventListener("activate",starling_utils_SystemUtil.onActivate,false,0,true);
		nativeApp.addEventListener("deactivate",starling_utils_SystemUtil.onDeactivate,false,0,true);
		starling_utils_SystemUtil.sAIR = true;
	} catch( e ) {
		haxe_CallStack.lastException = e;
		var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
		if(((e1) instanceof openfl_errors_Error)) {
			var e2 = e1;
			starling_utils_SystemUtil.sAIR = false;
		} else {
			throw e;
		}
	}
};
starling_utils_SystemUtil.onActivate = function(event) {
	starling_utils_SystemUtil.sApplicationActive = true;
	var _g = 0;
	var _g1 = starling_utils_SystemUtil.sWaitingCalls;
	while(_g < _g1.length) {
		var call = _g1[_g];
		++_g;
		try {
			call[0].apply(null,call[1]);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			if(((e1) instanceof openfl_errors_Error)) {
				haxe_Log.trace("[Starling] Error in 'executeWhenApplicationIsActive' call: " + e1.message,{ fileName : "starling/utils/SystemUtil.hx", lineNumber : 61, className : "starling.utils.SystemUtil", methodName : "onActivate"});
			} else {
				throw e;
			}
		}
	}
	starling_utils_SystemUtil.sWaitingCalls = [];
};
starling_utils_SystemUtil.onDeactivate = function(event) {
	starling_utils_SystemUtil.sApplicationActive = false;
};
starling_utils_SystemUtil.executeWhenApplicationIsActive = function(call,args) {
	starling_utils_SystemUtil.initialize();
	if(args == null) {
		args = [];
	}
	if(starling_utils_SystemUtil.sApplicationActive) {
		call.apply(call,args);
	} else {
		starling_utils_SystemUtil.sWaitingCalls.push([call,args]);
	}
};
starling_utils_SystemUtil.get_isApplicationActive = function() {
	starling_utils_SystemUtil.initialize();
	return starling_utils_SystemUtil.sApplicationActive;
};
starling_utils_SystemUtil.get_isAIR = function() {
	starling_utils_SystemUtil.initialize();
	return starling_utils_SystemUtil.sAIR;
};
starling_utils_SystemUtil.get_isDesktop = function() {
	starling_utils_SystemUtil.initialize();
	return false;
};
starling_utils_SystemUtil.get_platform = function() {
	starling_utils_SystemUtil.initialize();
	return starling_utils_SystemUtil.sPlatform;
};
starling_utils_SystemUtil.get_version = function() {
	starling_utils_SystemUtil.initialize();
	return starling_utils_SystemUtil.sVersion;
};
starling_utils_SystemUtil.get_supportsRelaxedTargetClearRequirement = function() {
	return true;
};
starling_utils_SystemUtil.get_supportsDepthAndStencil = function() {
	return starling_utils_SystemUtil.sSupportsDepthAndStencil;
};
starling_utils_SystemUtil.get_supportsVideoTexture = function() {
	return openfl_display3D_Context3D.supportsVideoTexture;
};
var starling_utils_VAlign = function() { };
$hxClasses["starling.utils.VAlign"] = starling_utils_VAlign;
starling_utils_VAlign.__name__ = "starling.utils.VAlign";
starling_utils_VAlign.isValid = function(vAlign) {
	if(!(vAlign == "top" || vAlign == "center")) {
		return vAlign == "bottom";
	} else {
		return true;
	}
};
var starling_utils_VectorUtil = function() { };
$hxClasses["starling.utils.VectorUtil"] = starling_utils_VectorUtil;
starling_utils_VectorUtil.__name__ = "starling.utils.VectorUtil";
starling_utils_VectorUtil.insertIntAt = function(vector,index,value) {
	var length = vector.data.get_length();
	if(_$UInt_UInt_$Impl_$.gt(0,index)) {
		index = index + (length + 1);
	}
	if(_$UInt_UInt_$Impl_$.gt(0,index)) {
		index = 0;
	}
	var i = index - 1;
	while(_$UInt_UInt_$Impl_$.gte(i,length)) {
		vector.data.set(i,0);
		--i;
	}
	i = length;
	while(_$UInt_UInt_$Impl_$.gt(i,index)) {
		var value1 = vector.data.get(i - 1);
		vector.data.set(i,value1);
		--i;
	}
	vector.data.set(index,value);
};
starling_utils_VectorUtil.removeIntAt = function(vector,index) {
	var length = vector.data.get_length();
	if(_$UInt_UInt_$Impl_$.gt(0,index)) {
		index = index + length;
	}
	if(_$UInt_UInt_$Impl_$.gt(0,index)) {
		index = 0;
	} else if(_$UInt_UInt_$Impl_$.gte(index,length)) {
		index = length - 1;
	}
	var value = vector.data.get(index);
	var _g = index + 1;
	var _g1 = length;
	while(_g < _g1) {
		var i = _g++;
		var value1 = vector.data.get(i);
		vector.data.set(i - 1,value1);
	}
	var value2 = vector.data.get_length() - 1;
	vector.data.set_length(value2);
	return value;
};
starling_utils_VectorUtil.insertUnsignedIntAt = function(vector,index,value) {
	var length = vector.data.get_length();
	if(_$UInt_UInt_$Impl_$.gt(0,index)) {
		index = index + (length + 1);
	}
	if(_$UInt_UInt_$Impl_$.gt(0,index)) {
		index = 0;
	}
	var i = index - 1;
	while(_$UInt_UInt_$Impl_$.gte(i,length)) {
		vector.data.set(i,0);
		--i;
	}
	i = length;
	while(_$UInt_UInt_$Impl_$.gt(i,index)) {
		var value1 = vector.data.get(i - 1);
		vector.data.set(i,value1);
		--i;
	}
	vector.data.set(index,value);
};
starling_utils_VectorUtil.removeUnsignedIntAt = function(vector,index) {
	var length = vector.data.get_length();
	if(_$UInt_UInt_$Impl_$.gt(0,index)) {
		index = index + length;
	}
	if(_$UInt_UInt_$Impl_$.gt(0,index)) {
		index = 0;
	} else if(_$UInt_UInt_$Impl_$.gte(index,length)) {
		index = length - 1;
	}
	var value = vector.data.get(index);
	var _g = index + 1;
	var _g1 = length;
	while(_g < _g1) {
		var i = _g++;
		var value1 = vector.data.get(i);
		vector.data.set(i - 1,value1);
	}
	vector.data.set_length(length - 1);
	return value;
};
starling_utils_VectorUtil.insertNumberAt = function(vector,index,value) {
	var length = vector.data.get_length();
	if(_$UInt_UInt_$Impl_$.gt(0,index)) {
		index = index + (length + 1);
	}
	if(_$UInt_UInt_$Impl_$.gt(0,index)) {
		index = 0;
	}
	var i = index - 1;
	while(_$UInt_UInt_$Impl_$.gte(i,length)) {
		vector.data.set(i,NaN);
		--i;
	}
	i = length;
	while(_$UInt_UInt_$Impl_$.gt(i,index)) {
		var value1 = vector.data.get(i - 1);
		vector.data.set(i,value1);
		--i;
	}
	vector.data.set(index,value);
};
starling_utils_VectorUtil.removeNumberAt = function(vector,index) {
	var length = vector.data.get_length();
	if(_$UInt_UInt_$Impl_$.gt(0,index)) {
		index = index + length;
	}
	if(_$UInt_UInt_$Impl_$.gt(0,index)) {
		index = 0;
	} else if(_$UInt_UInt_$Impl_$.gte(index,length)) {
		index = length - 1;
	}
	var value = vector.data.get(index);
	var _g = index + 1;
	var _g1 = length;
	while(_g < _g1) {
		var i = _g++;
		var value1 = vector.data.get(i);
		vector.data.set(i - 1,value1);
	}
	vector.data.set_length(length - 1);
	return value;
};
function $getIterator(o) { if( o instanceof Array ) return HxOverrides.iter(o); else return o.iterator(); }
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
if(typeof $global.$haxeUID == "undefined") $global.$haxeUID = 0;
$hxClasses["Math"] = Math;
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.prototype.__class__ = $hxClasses["String"] = String;
String.__name__ = "String";
$hxClasses["Array"] = Array;
Array.__name__ = "Array";
Date.prototype.__class__ = $hxClasses["Date"] = Date;
Date.__name__ = "Date";
var Int = { };
var Dynamic = { };
var Float = Number;
var Bool = Boolean;
var Class = { };
var Enum = { };
haxe_ds_ObjectMap.count = 0;
var __map_reserved = {};
Object.defineProperty(js__$Boot_HaxeError.prototype,"message",{ get : function() {
	return String(this.val);
}});
js_Boot.__toStr = ({ }).toString;
if(ArrayBuffer.prototype.slice == null) {
	ArrayBuffer.prototype.slice = js_lib__$ArrayBuffer_ArrayBufferCompat.sliceImpl;
}
openfl__$internal_app_Application.polyfillPerformance();
openfl__$internal_renderer_canvas_CanvasGraphics.setupCanvasContextCompatFunctions();
openfl__$internal_renderer_canvas_CanvasGraphics.hitTestCanvas = window.document.createElement("canvas");
openfl__$internal_renderer_canvas_CanvasGraphics.hitTestContext = openfl__$internal_renderer_canvas_CanvasGraphics.hitTestCanvas.getContext("2d");
openfl_ui_Multitouch.maxTouchPoints = 2;
openfl_ui_Multitouch.supportedGestures = null;
openfl_ui_Multitouch.supportsGestureEvents = false;
openfl_ui_Multitouch.inputMode = 2;
openfl_display_DisplayObject.__broadcastEvents = new haxe_ds_StringMap();
openfl_display_DisplayObject.__instanceCount = 0;
openfl_display_DisplayObject.__tempStack = new openfl__$internal_utils_ObjectPool(function() {
	return openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
},function(stack) {
	return stack.data.set_length(0);
});
Xml.Element = 0;
Xml.PCData = 1;
Xml.CData = 2;
Xml.Comment = 3;
Xml.DocType = 4;
Xml.ProcessingInstruction = 5;
Xml.Document = 6;
haxe_Serializer.USE_CACHE = false;
haxe_Serializer.USE_ENUM_INDEX = false;
haxe_Serializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe_Unserializer.DEFAULT_RESOLVER = new haxe__$Unserializer_DefaultResolver();
haxe_Unserializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe_crypto_Base64.BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.CHARS);
haxe_io_FPHelper.i64tmp = (function($this) {
	var $r;
	var this1 = new haxe__$Int64__$_$_$Int64(0,0);
	$r = this1;
	return $r;
}(this));
haxe_io_FPHelper.helper = new DataView(new ArrayBuffer(8));
haxe_xml_Parser.escapes = (function($this) {
	var $r;
	var h = new haxe_ds_StringMap();
	if(__map_reserved["lt"] != null) {
		h.setReserved("lt","<");
	} else {
		h.h["lt"] = "<";
	}
	if(__map_reserved["gt"] != null) {
		h.setReserved("gt",">");
	} else {
		h.h["gt"] = ">";
	}
	if(__map_reserved["amp"] != null) {
		h.setReserved("amp","&");
	} else {
		h.h["amp"] = "&";
	}
	if(__map_reserved["quot"] != null) {
		h.setReserved("quot","\"");
	} else {
		h.h["quot"] = "\"";
	}
	if(__map_reserved["apos"] != null) {
		h.setReserved("apos","'");
	} else {
		h.h["apos"] = "'";
	}
	$r = h;
	return $r;
}(this));
kha_Assets.images = new kha__$Assets_ImageList();
kha_Assets.sounds = new kha__$Assets_SoundList();
kha_Assets.blobs = new kha__$Assets_BlobList();
kha_Assets.fonts = new kha__$Assets_FontList();
kha_Assets.videos = new kha__$Assets_VideoList();
kha__$Color_Color_$Impl_$.Black = -16777216;
kha__$Color_Color_$Impl_$.White = -1;
kha__$Color_Color_$Impl_$.Red = -65536;
kha__$Color_Color_$Impl_$.Blue = -16776961;
kha__$Color_Color_$Impl_$.Green = -16711936;
kha__$Color_Color_$Impl_$.Magenta = -65281;
kha__$Color_Color_$Impl_$.Yellow = -256;
kha__$Color_Color_$Impl_$.Cyan = -16711681;
kha__$Color_Color_$Impl_$.Purple = -8388480;
kha__$Color_Color_$Impl_$.Pink = -16181;
kha__$Color_Color_$Impl_$.Orange = -23296;
kha__$Color_Color_$Impl_$.Transparent = 0;
kha__$Color_Color_$Impl_$.invMaxChannelValue = 0.00392156862745098;
kha_Display.instance = new kha_Display();
kha_Scheduler.timeWarpSaveTime = 10.0;
kha_Scheduler.DIF_COUNT = 3;
kha_Scheduler.maxframetime = 0.5;
kha_Scheduler.startTime = 0;
kha_Shaders.batch_16_fragData0 = "s7322:I3ZlcnNpb24gMTAwCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgdVNhbXBsZXJzWzE2XTsKCnZhcnlpbmcgaGlnaHAgZmxvYXQgdlRleHR1cmVJZDsKdmFyeWluZyBoaWdocCB2ZWMyIHZUZXh0dXJlQ29vcmQ7CnZhcnlpbmcgaGlnaHAgZmxvYXQgdlByZW11bHRpcGxpZWRBbHBoYTsKdmFyeWluZyBoaWdocCB2ZWM0IHZDb2xvck9mZnNldDsKdmFyeWluZyBoaWdocCB2ZWM0IHZDb2xvck11bHRpcGxpZXI7Cgp2b2lkIG1haW4oKQp7CiAgICBoaWdocCBmbG9hdCB0ZXh0dXJlSWQgPSBmbG9vcih2VGV4dHVyZUlkICsgMC41KTsKICAgIGhpZ2hwIHZlYzQgY29sb3I7CiAgICBpZiAodGV4dHVyZUlkID09IDAuMCkKICAgIHsKICAgICAgICBjb2xvciA9IHRleHR1cmUyRCh1U2FtcGxlcnNbMF0sIHZUZXh0dXJlQ29vcmQpOwogICAgfQogICAgZWxzZQogICAgewogICAgICAgIGlmICh0ZXh0dXJlSWQgPT0gMS4wKQogICAgICAgIHsKICAgICAgICAgICAgY29sb3IgPSB0ZXh0dXJlMkQodVNhbXBsZXJzWzFdLCB2VGV4dHVyZUNvb3JkKTsKICAgICAgICB9CiAgICAgICAgZWxzZQogICAgICAgIHsKICAgICAgICAgICAgaWYgKHRleHR1cmVJZCA9PSAyLjApCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGNvbG9yID0gdGV4dHVyZTJEKHVTYW1wbGVyc1syXSwgdlRleHR1cmVDb29yZCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBpZiAodGV4dHVyZUlkID09IDMuMCkKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBjb2xvciA9IHRleHR1cmUyRCh1U2FtcGxlcnNbM10sIHZUZXh0dXJlQ29vcmQpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGlmICh0ZXh0dXJlSWQgPT0gNC4wKQogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgY29sb3IgPSB0ZXh0dXJlMkQodVNhbXBsZXJzWzRdLCB2VGV4dHVyZUNvb3JkKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRleHR1cmVJZCA9PSA1LjApCiAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yID0gdGV4dHVyZTJEKHVTYW1wbGVyc1s1XSwgdlRleHR1cmVDb29yZCk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGV4dHVyZUlkID09IDYuMCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvciA9IHRleHR1cmUyRCh1U2FtcGxlcnNbNl0sIHZUZXh0dXJlQ29vcmQpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0ZXh0dXJlSWQgPT0gNy4wKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3IgPSB0ZXh0dXJlMkQodVNhbXBsZXJzWzddLCB2VGV4dHVyZUNvb3JkKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRleHR1cmVJZCA9PSA4LjApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yID0gdGV4dHVyZTJEKHVTYW1wbGVyc1s4XSwgdlRleHR1cmVDb29yZCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGV4dHVyZUlkID09IDkuMCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvciA9IHRleHR1cmUyRCh1U2FtcGxlcnNbOV0sIHZUZXh0dXJlQ29vcmQpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0ZXh0dXJlSWQgPT0gMTAuMCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yID0gdGV4dHVyZTJEKHVTYW1wbGVyc1sxMF0sIHZUZXh0dXJlQ29vcmQpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGV4dHVyZUlkID09IDExLjApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yID0gdGV4dHVyZTJEKHVTYW1wbGVyc1sxMV0sIHZUZXh0dXJlQ29vcmQpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRleHR1cmVJZCA9PSAxMi4wKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yID0gdGV4dHVyZTJEKHVTYW1wbGVyc1sxMl0sIHZUZXh0dXJlQ29vcmQpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0ZXh0dXJlSWQgPT0gMTMuMCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yID0gdGV4dHVyZTJEKHVTYW1wbGVyc1sxM10sIHZUZXh0dXJlQ29vcmQpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGV4dHVyZUlkID09IDE0LjApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yID0gdGV4dHVyZTJEKHVTYW1wbGVyc1sxNF0sIHZUZXh0dXJlQ29vcmQpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3IgPSB0ZXh0dXJlMkQodVNhbXBsZXJzWzE1XSwgdlRleHR1cmVDb29yZCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CiAgICBpZiAoY29sb3IudyA9PSAwLjApCiAgICB7CiAgICAgICAgZ2xfRnJhZ0RhdGFbMF0gPSB2ZWM0KDAuMCk7CiAgICB9CiAgICBlbHNlCiAgICB7CiAgICAgICAgY29sb3IgPSB2ZWM0KGNvbG9yLnh5eiAvIHZlYzMobWl4KDEuMCwgY29sb3IudywgdlByZW11bHRpcGxpZWRBbHBoYSkpLCBjb2xvci53KTsKICAgICAgICBjb2xvciA9IHZDb2xvck9mZnNldCArIChjb2xvciAqIHZDb2xvck11bHRpcGxpZXIpOwogICAgICAgIGdsX0ZyYWdEYXRhWzBdID0gdmVjNChjb2xvci54eXogKiBtaXgoMS4wLCBjb2xvci53LCB2UHJlbXVsdGlwbGllZEFscGhhKSwgY29sb3Iudyk7CiAgICB9Cn0KCg";
kha_Shaders.batch_16_fragData1 = "s7271:I3ZlcnNpb24gMzAwIGVzCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgdVNhbXBsZXJzWzE2XTsKCmluIGhpZ2hwIGZsb2F0IHZUZXh0dXJlSWQ7CmluIGhpZ2hwIHZlYzIgdlRleHR1cmVDb29yZDsKb3V0IGhpZ2hwIHZlYzQgRnJhZ0NvbG9yOwppbiBoaWdocCBmbG9hdCB2UHJlbXVsdGlwbGllZEFscGhhOwppbiBoaWdocCB2ZWM0IHZDb2xvck9mZnNldDsKaW4gaGlnaHAgdmVjNCB2Q29sb3JNdWx0aXBsaWVyOwoKdm9pZCBtYWluKCkKewogICAgaGlnaHAgZmxvYXQgdGV4dHVyZUlkID0gZmxvb3IodlRleHR1cmVJZCArIDAuNSk7CiAgICBoaWdocCB2ZWM0IGNvbG9yOwogICAgaWYgKHRleHR1cmVJZCA9PSAwLjApCiAgICB7CiAgICAgICAgY29sb3IgPSB0ZXh0dXJlKHVTYW1wbGVyc1swXSwgdlRleHR1cmVDb29yZCk7CiAgICB9CiAgICBlbHNlCiAgICB7CiAgICAgICAgaWYgKHRleHR1cmVJZCA9PSAxLjApCiAgICAgICAgewogICAgICAgICAgICBjb2xvciA9IHRleHR1cmUodVNhbXBsZXJzWzFdLCB2VGV4dHVyZUNvb3JkKTsKICAgICAgICB9CiAgICAgICAgZWxzZQogICAgICAgIHsKICAgICAgICAgICAgaWYgKHRleHR1cmVJZCA9PSAyLjApCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGNvbG9yID0gdGV4dHVyZSh1U2FtcGxlcnNbMl0sIHZUZXh0dXJlQ29vcmQpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgaWYgKHRleHR1cmVJZCA9PSAzLjApCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgY29sb3IgPSB0ZXh0dXJlKHVTYW1wbGVyc1szXSwgdlRleHR1cmVDb29yZCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgaWYgKHRleHR1cmVJZCA9PSA0LjApCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBjb2xvciA9IHRleHR1cmUodVNhbXBsZXJzWzRdLCB2VGV4dHVyZUNvb3JkKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRleHR1cmVJZCA9PSA1LjApCiAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yID0gdGV4dHVyZSh1U2FtcGxlcnNbNV0sIHZUZXh0dXJlQ29vcmQpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRleHR1cmVJZCA9PSA2LjApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3IgPSB0ZXh0dXJlKHVTYW1wbGVyc1s2XSwgdlRleHR1cmVDb29yZCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRleHR1cmVJZCA9PSA3LjApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvciA9IHRleHR1cmUodVNhbXBsZXJzWzddLCB2VGV4dHVyZUNvb3JkKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRleHR1cmVJZCA9PSA4LjApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yID0gdGV4dHVyZSh1U2FtcGxlcnNbOF0sIHZUZXh0dXJlQ29vcmQpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRleHR1cmVJZCA9PSA5LjApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3IgPSB0ZXh0dXJlKHVTYW1wbGVyc1s5XSwgdlRleHR1cmVDb29yZCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRleHR1cmVJZCA9PSAxMC4wKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3IgPSB0ZXh0dXJlKHVTYW1wbGVyc1sxMF0sIHZUZXh0dXJlQ29vcmQpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGV4dHVyZUlkID09IDExLjApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yID0gdGV4dHVyZSh1U2FtcGxlcnNbMTFdLCB2VGV4dHVyZUNvb3JkKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0ZXh0dXJlSWQgPT0gMTIuMCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvciA9IHRleHR1cmUodVNhbXBsZXJzWzEyXSwgdlRleHR1cmVDb29yZCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRleHR1cmVJZCA9PSAxMy4wKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3IgPSB0ZXh0dXJlKHVTYW1wbGVyc1sxM10sIHZUZXh0dXJlQ29vcmQpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGV4dHVyZUlkID09IDE0LjApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yID0gdGV4dHVyZSh1U2FtcGxlcnNbMTRdLCB2VGV4dHVyZUNvb3JkKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yID0gdGV4dHVyZSh1U2FtcGxlcnNbMTVdLCB2VGV4dHVyZUNvb3JkKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KICAgIGlmIChjb2xvci53ID09IDAuMCkKICAgIHsKICAgICAgICBGcmFnQ29sb3IgPSB2ZWM0KDAuMCk7CiAgICB9CiAgICBlbHNlCiAgICB7CiAgICAgICAgY29sb3IgPSB2ZWM0KGNvbG9yLnh5eiAvIHZlYzMobWl4KDEuMCwgY29sb3IudywgdlByZW11bHRpcGxpZWRBbHBoYSkpLCBjb2xvci53KTsKICAgICAgICBjb2xvciA9IHZDb2xvck9mZnNldCArIChjb2xvciAqIHZDb2xvck11bHRpcGxpZXIpOwogICAgICAgIEZyYWdDb2xvciA9IHZlYzQoY29sb3IueHl6ICogbWl4KDEuMCwgY29sb3IudywgdlByZW11bHRpcGxpZWRBbHBoYSksIGNvbG9yLncpOwogICAgfQp9Cgo";
kha_Shaders.batch_1_fragData0 = "s991:I3ZlcnNpb24gMTAwCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgdVNhbXBsZXJzWzFdOwoKdmFyeWluZyBoaWdocCBmbG9hdCB2VGV4dHVyZUlkOwp2YXJ5aW5nIGhpZ2hwIHZlYzIgdlRleHR1cmVDb29yZDsKdmFyeWluZyBoaWdocCBmbG9hdCB2UHJlbXVsdGlwbGllZEFscGhhOwp2YXJ5aW5nIGhpZ2hwIHZlYzQgdkNvbG9yT2Zmc2V0Owp2YXJ5aW5nIGhpZ2hwIHZlYzQgdkNvbG9yTXVsdGlwbGllcjsKCnZvaWQgbWFpbigpCnsKICAgIGhpZ2hwIGZsb2F0IHRleHR1cmVJZCA9IGZsb29yKHZUZXh0dXJlSWQgKyAwLjUpOwogICAgaGlnaHAgdmVjNCBjb2xvciA9IHRleHR1cmUyRCh1U2FtcGxlcnNbMF0sIHZUZXh0dXJlQ29vcmQpOwogICAgaWYgKGNvbG9yLncgPT0gMC4wKQogICAgewogICAgICAgIGdsX0ZyYWdEYXRhWzBdID0gdmVjNCgwLjApOwogICAgfQogICAgZWxzZQogICAgewogICAgICAgIGNvbG9yID0gdmVjNChjb2xvci54eXogLyB2ZWMzKG1peCgxLjAsIGNvbG9yLncsIHZQcmVtdWx0aXBsaWVkQWxwaGEpKSwgY29sb3Iudyk7CiAgICAgICAgY29sb3IgPSB2Q29sb3JPZmZzZXQgKyAoY29sb3IgKiB2Q29sb3JNdWx0aXBsaWVyKTsKICAgICAgICBnbF9GcmFnRGF0YVswXSA9IHZlYzQoY29sb3IueHl6ICogbWl4KDEuMCwgY29sb3IudywgdlByZW11bHRpcGxpZWRBbHBoYSksIGNvbG9yLncpOwogICAgfQp9Cgo";
kha_Shaders.batch_1_fragData1 = "s980:I3ZlcnNpb24gMzAwIGVzCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgdVNhbXBsZXJzWzFdOwoKaW4gaGlnaHAgZmxvYXQgdlRleHR1cmVJZDsKaW4gaGlnaHAgdmVjMiB2VGV4dHVyZUNvb3JkOwpvdXQgaGlnaHAgdmVjNCBGcmFnQ29sb3I7CmluIGhpZ2hwIGZsb2F0IHZQcmVtdWx0aXBsaWVkQWxwaGE7CmluIGhpZ2hwIHZlYzQgdkNvbG9yT2Zmc2V0OwppbiBoaWdocCB2ZWM0IHZDb2xvck11bHRpcGxpZXI7Cgp2b2lkIG1haW4oKQp7CiAgICBoaWdocCBmbG9hdCB0ZXh0dXJlSWQgPSBmbG9vcih2VGV4dHVyZUlkICsgMC41KTsKICAgIGhpZ2hwIHZlYzQgY29sb3IgPSB0ZXh0dXJlKHVTYW1wbGVyc1swXSwgdlRleHR1cmVDb29yZCk7CiAgICBpZiAoY29sb3IudyA9PSAwLjApCiAgICB7CiAgICAgICAgRnJhZ0NvbG9yID0gdmVjNCgwLjApOwogICAgfQogICAgZWxzZQogICAgewogICAgICAgIGNvbG9yID0gdmVjNChjb2xvci54eXogLyB2ZWMzKG1peCgxLjAsIGNvbG9yLncsIHZQcmVtdWx0aXBsaWVkQWxwaGEpKSwgY29sb3Iudyk7CiAgICAgICAgY29sb3IgPSB2Q29sb3JPZmZzZXQgKyAoY29sb3IgKiB2Q29sb3JNdWx0aXBsaWVyKTsKICAgICAgICBGcmFnQ29sb3IgPSB2ZWM0KGNvbG9yLnh5eiAqIG1peCgxLjAsIGNvbG9yLncsIHZQcmVtdWx0aXBsaWVkQWxwaGEpLCBjb2xvci53KTsKICAgIH0KfQoK";
kha_Shaders.batch_2_fragData0 = "s1164:I3ZlcnNpb24gMTAwCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgdVNhbXBsZXJzWzJdOwoKdmFyeWluZyBoaWdocCBmbG9hdCB2VGV4dHVyZUlkOwp2YXJ5aW5nIGhpZ2hwIHZlYzIgdlRleHR1cmVDb29yZDsKdmFyeWluZyBoaWdocCBmbG9hdCB2UHJlbXVsdGlwbGllZEFscGhhOwp2YXJ5aW5nIGhpZ2hwIHZlYzQgdkNvbG9yT2Zmc2V0Owp2YXJ5aW5nIGhpZ2hwIHZlYzQgdkNvbG9yTXVsdGlwbGllcjsKCnZvaWQgbWFpbigpCnsKICAgIGhpZ2hwIGZsb2F0IHRleHR1cmVJZCA9IGZsb29yKHZUZXh0dXJlSWQgKyAwLjUpOwogICAgaGlnaHAgdmVjNCBjb2xvcjsKICAgIGlmICh0ZXh0dXJlSWQgPT0gMC4wKQogICAgewogICAgICAgIGNvbG9yID0gdGV4dHVyZTJEKHVTYW1wbGVyc1swXSwgdlRleHR1cmVDb29yZCk7CiAgICB9CiAgICBlbHNlCiAgICB7CiAgICAgICAgY29sb3IgPSB0ZXh0dXJlMkQodVNhbXBsZXJzWzFdLCB2VGV4dHVyZUNvb3JkKTsKICAgIH0KICAgIGlmIChjb2xvci53ID09IDAuMCkKICAgIHsKICAgICAgICBnbF9GcmFnRGF0YVswXSA9IHZlYzQoMC4wKTsKICAgIH0KICAgIGVsc2UKICAgIHsKICAgICAgICBjb2xvciA9IHZlYzQoY29sb3IueHl6IC8gdmVjMyhtaXgoMS4wLCBjb2xvci53LCB2UHJlbXVsdGlwbGllZEFscGhhKSksIGNvbG9yLncpOwogICAgICAgIGNvbG9yID0gdkNvbG9yT2Zmc2V0ICsgKGNvbG9yICogdkNvbG9yTXVsdGlwbGllcik7CiAgICAgICAgZ2xfRnJhZ0RhdGFbMF0gPSB2ZWM0KGNvbG9yLnh5eiAqIG1peCgxLjAsIGNvbG9yLncsIHZQcmVtdWx0aXBsaWVkQWxwaGEpLCBjb2xvci53KTsKICAgIH0KfQoK";
kha_Shaders.batch_2_fragData1 = "s1151:I3ZlcnNpb24gMzAwIGVzCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgdVNhbXBsZXJzWzJdOwoKaW4gaGlnaHAgZmxvYXQgdlRleHR1cmVJZDsKaW4gaGlnaHAgdmVjMiB2VGV4dHVyZUNvb3JkOwpvdXQgaGlnaHAgdmVjNCBGcmFnQ29sb3I7CmluIGhpZ2hwIGZsb2F0IHZQcmVtdWx0aXBsaWVkQWxwaGE7CmluIGhpZ2hwIHZlYzQgdkNvbG9yT2Zmc2V0OwppbiBoaWdocCB2ZWM0IHZDb2xvck11bHRpcGxpZXI7Cgp2b2lkIG1haW4oKQp7CiAgICBoaWdocCBmbG9hdCB0ZXh0dXJlSWQgPSBmbG9vcih2VGV4dHVyZUlkICsgMC41KTsKICAgIGhpZ2hwIHZlYzQgY29sb3I7CiAgICBpZiAodGV4dHVyZUlkID09IDAuMCkKICAgIHsKICAgICAgICBjb2xvciA9IHRleHR1cmUodVNhbXBsZXJzWzBdLCB2VGV4dHVyZUNvb3JkKTsKICAgIH0KICAgIGVsc2UKICAgIHsKICAgICAgICBjb2xvciA9IHRleHR1cmUodVNhbXBsZXJzWzFdLCB2VGV4dHVyZUNvb3JkKTsKICAgIH0KICAgIGlmIChjb2xvci53ID09IDAuMCkKICAgIHsKICAgICAgICBGcmFnQ29sb3IgPSB2ZWM0KDAuMCk7CiAgICB9CiAgICBlbHNlCiAgICB7CiAgICAgICAgY29sb3IgPSB2ZWM0KGNvbG9yLnh5eiAvIHZlYzMobWl4KDEuMCwgY29sb3IudywgdlByZW11bHRpcGxpZWRBbHBoYSkpLCBjb2xvci53KTsKICAgICAgICBjb2xvciA9IHZDb2xvck9mZnNldCArIChjb2xvciAqIHZDb2xvck11bHRpcGxpZXIpOwogICAgICAgIEZyYWdDb2xvciA9IHZlYzQoY29sb3IueHl6ICogbWl4KDEuMCwgY29sb3IudywgdlByZW11bHRpcGxpZWRBbHBoYSksIGNvbG9yLncpOwogICAgfQp9Cgo";
kha_Shaders.batch_32_fragData0 = "s23343:";
kha_Shaders.batch_32_fragData1 = "s23250:";
kha_Shaders.batch_4_fragData0 = "s1594:I3ZlcnNpb24gMTAwCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgdVNhbXBsZXJzWzRdOwoKdmFyeWluZyBoaWdocCBmbG9hdCB2VGV4dHVyZUlkOwp2YXJ5aW5nIGhpZ2hwIHZlYzIgdlRleHR1cmVDb29yZDsKdmFyeWluZyBoaWdocCBmbG9hdCB2UHJlbXVsdGlwbGllZEFscGhhOwp2YXJ5aW5nIGhpZ2hwIHZlYzQgdkNvbG9yT2Zmc2V0Owp2YXJ5aW5nIGhpZ2hwIHZlYzQgdkNvbG9yTXVsdGlwbGllcjsKCnZvaWQgbWFpbigpCnsKICAgIGhpZ2hwIGZsb2F0IHRleHR1cmVJZCA9IGZsb29yKHZUZXh0dXJlSWQgKyAwLjUpOwogICAgaGlnaHAgdmVjNCBjb2xvcjsKICAgIGlmICh0ZXh0dXJlSWQgPT0gMC4wKQogICAgewogICAgICAgIGNvbG9yID0gdGV4dHVyZTJEKHVTYW1wbGVyc1swXSwgdlRleHR1cmVDb29yZCk7CiAgICB9CiAgICBlbHNlCiAgICB7CiAgICAgICAgaWYgKHRleHR1cmVJZCA9PSAxLjApCiAgICAgICAgewogICAgICAgICAgICBjb2xvciA9IHRleHR1cmUyRCh1U2FtcGxlcnNbMV0sIHZUZXh0dXJlQ29vcmQpOwogICAgICAgIH0KICAgICAgICBlbHNlCiAgICAgICAgewogICAgICAgICAgICBpZiAodGV4dHVyZUlkID09IDIuMCkKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgY29sb3IgPSB0ZXh0dXJlMkQodVNhbXBsZXJzWzJdLCB2VGV4dHVyZUNvb3JkKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGNvbG9yID0gdGV4dHVyZTJEKHVTYW1wbGVyc1szXSwgdlRleHR1cmVDb29yZCk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CiAgICBpZiAoY29sb3IudyA9PSAwLjApCiAgICB7CiAgICAgICAgZ2xfRnJhZ0RhdGFbMF0gPSB2ZWM0KDAuMCk7CiAgICB9CiAgICBlbHNlCiAgICB7CiAgICAgICAgY29sb3IgPSB2ZWM0KGNvbG9yLnh5eiAvIHZlYzMobWl4KDEuMCwgY29sb3IudywgdlByZW11bHRpcGxpZWRBbHBoYSkpLCBjb2xvci53KTsKICAgICAgICBjb2xvciA9IHZDb2xvck9mZnNldCArIChjb2xvciAqIHZDb2xvck11bHRpcGxpZXIpOwogICAgICAgIGdsX0ZyYWdEYXRhWzBdID0gdmVjNChjb2xvci54eXogKiBtaXgoMS4wLCBjb2xvci53LCB2UHJlbXVsdGlwbGllZEFscGhhKSwgY29sb3Iudyk7CiAgICB9Cn0KCg";
kha_Shaders.batch_4_fragData1 = "s1575:I3ZlcnNpb24gMzAwIGVzCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgdVNhbXBsZXJzWzRdOwoKaW4gaGlnaHAgZmxvYXQgdlRleHR1cmVJZDsKaW4gaGlnaHAgdmVjMiB2VGV4dHVyZUNvb3JkOwpvdXQgaGlnaHAgdmVjNCBGcmFnQ29sb3I7CmluIGhpZ2hwIGZsb2F0IHZQcmVtdWx0aXBsaWVkQWxwaGE7CmluIGhpZ2hwIHZlYzQgdkNvbG9yT2Zmc2V0OwppbiBoaWdocCB2ZWM0IHZDb2xvck11bHRpcGxpZXI7Cgp2b2lkIG1haW4oKQp7CiAgICBoaWdocCBmbG9hdCB0ZXh0dXJlSWQgPSBmbG9vcih2VGV4dHVyZUlkICsgMC41KTsKICAgIGhpZ2hwIHZlYzQgY29sb3I7CiAgICBpZiAodGV4dHVyZUlkID09IDAuMCkKICAgIHsKICAgICAgICBjb2xvciA9IHRleHR1cmUodVNhbXBsZXJzWzBdLCB2VGV4dHVyZUNvb3JkKTsKICAgIH0KICAgIGVsc2UKICAgIHsKICAgICAgICBpZiAodGV4dHVyZUlkID09IDEuMCkKICAgICAgICB7CiAgICAgICAgICAgIGNvbG9yID0gdGV4dHVyZSh1U2FtcGxlcnNbMV0sIHZUZXh0dXJlQ29vcmQpOwogICAgICAgIH0KICAgICAgICBlbHNlCiAgICAgICAgewogICAgICAgICAgICBpZiAodGV4dHVyZUlkID09IDIuMCkKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgY29sb3IgPSB0ZXh0dXJlKHVTYW1wbGVyc1syXSwgdlRleHR1cmVDb29yZCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBjb2xvciA9IHRleHR1cmUodVNhbXBsZXJzWzNdLCB2VGV4dHVyZUNvb3JkKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KICAgIGlmIChjb2xvci53ID09IDAuMCkKICAgIHsKICAgICAgICBGcmFnQ29sb3IgPSB2ZWM0KDAuMCk7CiAgICB9CiAgICBlbHNlCiAgICB7CiAgICAgICAgY29sb3IgPSB2ZWM0KGNvbG9yLnh5eiAvIHZlYzMobWl4KDEuMCwgY29sb3IudywgdlByZW11bHRpcGxpZWRBbHBoYSkpLCBjb2xvci53KTsKICAgICAgICBjb2xvciA9IHZDb2xvck9mZnNldCArIChjb2xvciAqIHZDb2xvck11bHRpcGxpZXIpOwogICAgICAgIEZyYWdDb2xvciA9IHZlYzQoY29sb3IueHl6ICogbWl4KDEuMCwgY29sb3IudywgdlByZW11bHRpcGxpZWRBbHBoYSksIGNvbG9yLncpOwogICAgfQp9Cgo";
kha_Shaders.batch_8_fragData0 = "s2900:I3ZlcnNpb24gMTAwCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgdVNhbXBsZXJzWzhdOwoKdmFyeWluZyBoaWdocCBmbG9hdCB2VGV4dHVyZUlkOwp2YXJ5aW5nIGhpZ2hwIHZlYzIgdlRleHR1cmVDb29yZDsKdmFyeWluZyBoaWdocCBmbG9hdCB2UHJlbXVsdGlwbGllZEFscGhhOwp2YXJ5aW5nIGhpZ2hwIHZlYzQgdkNvbG9yT2Zmc2V0Owp2YXJ5aW5nIGhpZ2hwIHZlYzQgdkNvbG9yTXVsdGlwbGllcjsKCnZvaWQgbWFpbigpCnsKICAgIGhpZ2hwIGZsb2F0IHRleHR1cmVJZCA9IGZsb29yKHZUZXh0dXJlSWQgKyAwLjUpOwogICAgaGlnaHAgdmVjNCBjb2xvcjsKICAgIGlmICh0ZXh0dXJlSWQgPT0gMC4wKQogICAgewogICAgICAgIGNvbG9yID0gdGV4dHVyZTJEKHVTYW1wbGVyc1swXSwgdlRleHR1cmVDb29yZCk7CiAgICB9CiAgICBlbHNlCiAgICB7CiAgICAgICAgaWYgKHRleHR1cmVJZCA9PSAxLjApCiAgICAgICAgewogICAgICAgICAgICBjb2xvciA9IHRleHR1cmUyRCh1U2FtcGxlcnNbMV0sIHZUZXh0dXJlQ29vcmQpOwogICAgICAgIH0KICAgICAgICBlbHNlCiAgICAgICAgewogICAgICAgICAgICBpZiAodGV4dHVyZUlkID09IDIuMCkKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgY29sb3IgPSB0ZXh0dXJlMkQodVNhbXBsZXJzWzJdLCB2VGV4dHVyZUNvb3JkKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGlmICh0ZXh0dXJlSWQgPT0gMy4wKQogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGNvbG9yID0gdGV4dHVyZTJEKHVTYW1wbGVyc1szXSwgdlRleHR1cmVDb29yZCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgaWYgKHRleHR1cmVJZCA9PSA0LjApCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBjb2xvciA9IHRleHR1cmUyRCh1U2FtcGxlcnNbNF0sIHZUZXh0dXJlQ29vcmQpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAodGV4dHVyZUlkID09IDUuMCkKICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3IgPSB0ZXh0dXJlMkQodVNhbXBsZXJzWzVdLCB2VGV4dHVyZUNvb3JkKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0ZXh0dXJlSWQgPT0gNi4wKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yID0gdGV4dHVyZTJEKHVTYW1wbGVyc1s2XSwgdlRleHR1cmVDb29yZCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3IgPSB0ZXh0dXJlMkQodVNhbXBsZXJzWzddLCB2VGV4dHVyZUNvb3JkKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KICAgIGlmIChjb2xvci53ID09IDAuMCkKICAgIHsKICAgICAgICBnbF9GcmFnRGF0YVswXSA9IHZlYzQoMC4wKTsKICAgIH0KICAgIGVsc2UKICAgIHsKICAgICAgICBjb2xvciA9IHZlYzQoY29sb3IueHl6IC8gdmVjMyhtaXgoMS4wLCBjb2xvci53LCB2UHJlbXVsdGlwbGllZEFscGhhKSksIGNvbG9yLncpOwogICAgICAgIGNvbG9yID0gdkNvbG9yT2Zmc2V0ICsgKGNvbG9yICogdkNvbG9yTXVsdGlwbGllcik7CiAgICAgICAgZ2xfRnJhZ0RhdGFbMF0gPSB2ZWM0KGNvbG9yLnh5eiAqIG1peCgxLjAsIGNvbG9yLncsIHZQcmVtdWx0aXBsaWVkQWxwaGEpLCBjb2xvci53KTsKICAgIH0KfQoK";
kha_Shaders.batch_8_fragData1 = "s2871:I3ZlcnNpb24gMzAwIGVzCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgdVNhbXBsZXJzWzhdOwoKaW4gaGlnaHAgZmxvYXQgdlRleHR1cmVJZDsKaW4gaGlnaHAgdmVjMiB2VGV4dHVyZUNvb3JkOwpvdXQgaGlnaHAgdmVjNCBGcmFnQ29sb3I7CmluIGhpZ2hwIGZsb2F0IHZQcmVtdWx0aXBsaWVkQWxwaGE7CmluIGhpZ2hwIHZlYzQgdkNvbG9yT2Zmc2V0OwppbiBoaWdocCB2ZWM0IHZDb2xvck11bHRpcGxpZXI7Cgp2b2lkIG1haW4oKQp7CiAgICBoaWdocCBmbG9hdCB0ZXh0dXJlSWQgPSBmbG9vcih2VGV4dHVyZUlkICsgMC41KTsKICAgIGhpZ2hwIHZlYzQgY29sb3I7CiAgICBpZiAodGV4dHVyZUlkID09IDAuMCkKICAgIHsKICAgICAgICBjb2xvciA9IHRleHR1cmUodVNhbXBsZXJzWzBdLCB2VGV4dHVyZUNvb3JkKTsKICAgIH0KICAgIGVsc2UKICAgIHsKICAgICAgICBpZiAodGV4dHVyZUlkID09IDEuMCkKICAgICAgICB7CiAgICAgICAgICAgIGNvbG9yID0gdGV4dHVyZSh1U2FtcGxlcnNbMV0sIHZUZXh0dXJlQ29vcmQpOwogICAgICAgIH0KICAgICAgICBlbHNlCiAgICAgICAgewogICAgICAgICAgICBpZiAodGV4dHVyZUlkID09IDIuMCkKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgY29sb3IgPSB0ZXh0dXJlKHVTYW1wbGVyc1syXSwgdlRleHR1cmVDb29yZCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBpZiAodGV4dHVyZUlkID09IDMuMCkKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBjb2xvciA9IHRleHR1cmUodVNhbXBsZXJzWzNdLCB2VGV4dHVyZUNvb3JkKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBpZiAodGV4dHVyZUlkID09IDQuMCkKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yID0gdGV4dHVyZSh1U2FtcGxlcnNbNF0sIHZUZXh0dXJlQ29vcmQpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAodGV4dHVyZUlkID09IDUuMCkKICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3IgPSB0ZXh0dXJlKHVTYW1wbGVyc1s1XSwgdlRleHR1cmVDb29yZCk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGV4dHVyZUlkID09IDYuMCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvciA9IHRleHR1cmUodVNhbXBsZXJzWzZdLCB2VGV4dHVyZUNvb3JkKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvciA9IHRleHR1cmUodVNhbXBsZXJzWzddLCB2VGV4dHVyZUNvb3JkKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KICAgIGlmIChjb2xvci53ID09IDAuMCkKICAgIHsKICAgICAgICBGcmFnQ29sb3IgPSB2ZWM0KDAuMCk7CiAgICB9CiAgICBlbHNlCiAgICB7CiAgICAgICAgY29sb3IgPSB2ZWM0KGNvbG9yLnh5eiAvIHZlYzMobWl4KDEuMCwgY29sb3IudywgdlByZW11bHRpcGxpZWRBbHBoYSkpLCBjb2xvci53KTsKICAgICAgICBjb2xvciA9IHZDb2xvck9mZnNldCArIChjb2xvciAqIHZDb2xvck11bHRpcGxpZXIpOwogICAgICAgIEZyYWdDb2xvciA9IHZlYzQoY29sb3IueHl6ICogbWl4KDEuMCwgY29sb3IudywgdlByZW11bHRpcGxpZWRBbHBoYSksIGNvbG9yLncpOwogICAgfQp9Cgo";
kha_Shaders.batch_vertData0 = "s922:I3ZlcnNpb24gMTAwCgp1bmlmb3JtIG1hdDQgdVByb2pNYXRyaXg7CnVuaWZvcm0gdmVjNCB1UG9zdGlvblNjYWxlOwoKYXR0cmlidXRlIHZlYzIgYVZlcnRleFBvc2l0aW9uOwp2YXJ5aW5nIHZlYzIgdlRleHR1cmVDb29yZDsKYXR0cmlidXRlIHZlYzIgYVRleHR1cmVDb29yZDsKdmFyeWluZyBmbG9hdCB2VGV4dHVyZUlkOwphdHRyaWJ1dGUgZmxvYXQgYVRleHR1cmVJZDsKdmFyeWluZyB2ZWM0IHZDb2xvck11bHRpcGxpZXI7CmF0dHJpYnV0ZSB2ZWM0IGFDb2xvck11bHRpcGxpZXI7CnZhcnlpbmcgdmVjNCB2Q29sb3JPZmZzZXQ7CmF0dHJpYnV0ZSB2ZWM0IGFDb2xvck9mZnNldDsKdmFyeWluZyBmbG9hdCB2UHJlbXVsdGlwbGllZEFscGhhOwphdHRyaWJ1dGUgZmxvYXQgYVByZW11bHRpcGxpZWRBbHBoYTsKCnZvaWQgbWFpbigpCnsKICAgIGdsX1Bvc2l0aW9uID0gKHVQcm9qTWF0cml4ICogdmVjNChhVmVydGV4UG9zaXRpb24sIDAuMCwgMS4wKSkgKiB1UG9zdGlvblNjYWxlOwogICAgdlRleHR1cmVDb29yZCA9IGFUZXh0dXJlQ29vcmQ7CiAgICB2VGV4dHVyZUlkID0gYVRleHR1cmVJZDsKICAgIHZDb2xvck11bHRpcGxpZXIgPSBhQ29sb3JNdWx0aXBsaWVyOwogICAgdkNvbG9yT2Zmc2V0ID0gYUNvbG9yT2Zmc2V0OwogICAgdlByZW11bHRpcGxpZWRBbHBoYSA9IGFQcmVtdWx0aXBsaWVkQWxwaGE7Cn0KCg";
kha_Shaders.batch_vertData1 = "s843:I3ZlcnNpb24gMzAwIGVzCgp1bmlmb3JtIG1hdDQgdVByb2pNYXRyaXg7CnVuaWZvcm0gdmVjNCB1UG9zdGlvblNjYWxlOwoKaW4gdmVjMiBhVmVydGV4UG9zaXRpb247Cm91dCB2ZWMyIHZUZXh0dXJlQ29vcmQ7CmluIHZlYzIgYVRleHR1cmVDb29yZDsKb3V0IGZsb2F0IHZUZXh0dXJlSWQ7CmluIGZsb2F0IGFUZXh0dXJlSWQ7Cm91dCB2ZWM0IHZDb2xvck11bHRpcGxpZXI7CmluIHZlYzQgYUNvbG9yTXVsdGlwbGllcjsKb3V0IHZlYzQgdkNvbG9yT2Zmc2V0OwppbiB2ZWM0IGFDb2xvck9mZnNldDsKb3V0IGZsb2F0IHZQcmVtdWx0aXBsaWVkQWxwaGE7CmluIGZsb2F0IGFQcmVtdWx0aXBsaWVkQWxwaGE7Cgp2b2lkIG1haW4oKQp7CiAgICBnbF9Qb3NpdGlvbiA9ICh1UHJvak1hdHJpeCAqIHZlYzQoYVZlcnRleFBvc2l0aW9uLCAwLjAsIDEuMCkpICogdVBvc3Rpb25TY2FsZTsKICAgIHZUZXh0dXJlQ29vcmQgPSBhVGV4dHVyZUNvb3JkOwogICAgdlRleHR1cmVJZCA9IGFUZXh0dXJlSWQ7CiAgICB2Q29sb3JNdWx0aXBsaWVyID0gYUNvbG9yTXVsdGlwbGllcjsKICAgIHZDb2xvck9mZnNldCA9IGFDb2xvck9mZnNldDsKICAgIHZQcmVtdWx0aXBsaWVkQWxwaGEgPSBhUHJlbXVsdGlwbGllZEFscGhhOwp9Cgo";
kha_Shaders.mask_fragData0 = "s403:I3ZlcnNpb24gMTAwCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgdUltYWdlMDsKCnZhcnlpbmcgaGlnaHAgdmVjMiB2VGV4Q29vcmQ7Cgp2b2lkIG1haW4oKQp7CiAgICBoaWdocCB2ZWM0IGNvbG9yID0gdGV4dHVyZTJEKHVJbWFnZTAsIHZUZXhDb29yZCk7CiAgICBpZiAoY29sb3IudyA9PSAwLjApCiAgICB7CiAgICAgICAgZGlzY2FyZDsKICAgIH0KICAgIGVsc2UKICAgIHsKICAgICAgICBnbF9GcmFnRGF0YVswXSA9IGNvbG9yOwogICAgfQp9Cgo";
kha_Shaders.mask_fragData1 = "s426:I3ZlcnNpb24gMzAwIGVzCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgdUltYWdlMDsKCmluIGhpZ2hwIHZlYzIgdlRleENvb3JkOwpvdXQgaGlnaHAgdmVjNCBGcmFnQ29sb3I7Cgp2b2lkIG1haW4oKQp7CiAgICBoaWdocCB2ZWM0IGNvbG9yID0gdGV4dHVyZSh1SW1hZ2UwLCB2VGV4Q29vcmQpOwogICAgaWYgKGNvbG9yLncgPT0gMC4wKQogICAgewogICAgICAgIGRpc2NhcmQ7CiAgICB9CiAgICBlbHNlCiAgICB7CiAgICAgICAgRnJhZ0NvbG9yID0gY29sb3I7CiAgICB9Cn0KCg";
kha_Shaders.mask_vertData0 = "s284:I3ZlcnNpb24gMTAwCgp1bmlmb3JtIG1hdDQgdU1hdHJpeDsKCnZhcnlpbmcgdmVjMiB2VGV4Q29vcmQ7CmF0dHJpYnV0ZSB2ZWMyIGFUZXhDb29yZDsKYXR0cmlidXRlIHZlYzIgYVBvc2l0aW9uOwoKdm9pZCBtYWluKCkKewogICAgdlRleENvb3JkID0gYVRleENvb3JkOwogICAgZ2xfUG9zaXRpb24gPSB1TWF0cml4ICogdmVjNChhUG9zaXRpb24sIDAuMCwgMS4wKTsKfQoK";
kha_Shaders.mask_vertData1 = "s264:I3ZlcnNpb24gMzAwIGVzCgp1bmlmb3JtIG1hdDQgdU1hdHJpeDsKCm91dCB2ZWMyIHZUZXhDb29yZDsKaW4gdmVjMiBhVGV4Q29vcmQ7CmluIHZlYzIgYVBvc2l0aW9uOwoKdm9pZCBtYWluKCkKewogICAgdlRleENvb3JkID0gYVRleENvb3JkOwogICAgZ2xfUG9zaXRpb24gPSB1TWF0cml4ICogdmVjNChhUG9zaXRpb24sIDAuMCwgMS4wKTsKfQoK";
kha_Shaders.painter_colored_fragData0 = "s198:I3ZlcnNpb24gMTAwCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdmFyeWluZyBoaWdocCB2ZWM0IGZyYWdtZW50Q29sb3I7Cgp2b2lkIG1haW4oKQp7CiAgICBnbF9GcmFnRGF0YVswXSA9IGZyYWdtZW50Q29sb3I7Cn0KCg";
kha_Shaders.painter_colored_fragData1 = "s223:I3ZlcnNpb24gMzAwIGVzCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKb3V0IGhpZ2hwIHZlYzQgRnJhZ0NvbG9yOwppbiBoaWdocCB2ZWM0IGZyYWdtZW50Q29sb3I7Cgp2b2lkIG1haW4oKQp7CiAgICBGcmFnQ29sb3IgPSBmcmFnbWVudENvbG9yOwp9Cgo";
kha_Shaders.painter_colored_vertData0 = "s331:I3ZlcnNpb24gMTAwCgp1bmlmb3JtIG1hdDQgcHJvamVjdGlvbk1hdHJpeDsKCmF0dHJpYnV0ZSB2ZWMzIHZlcnRleFBvc2l0aW9uOwp2YXJ5aW5nIHZlYzQgZnJhZ21lbnRDb2xvcjsKYXR0cmlidXRlIHZlYzQgdmVydGV4Q29sb3I7Cgp2b2lkIG1haW4oKQp7CiAgICBnbF9Qb3NpdGlvbiA9IHByb2plY3Rpb25NYXRyaXggKiB2ZWM0KHZlcnRleFBvc2l0aW9uLCAxLjApOwogICAgZnJhZ21lbnRDb2xvciA9IHZlcnRleENvbG9yOwp9Cgo";
kha_Shaders.painter_colored_vertData1 = "s311:I3ZlcnNpb24gMzAwIGVzCgp1bmlmb3JtIG1hdDQgcHJvamVjdGlvbk1hdHJpeDsKCmluIHZlYzMgdmVydGV4UG9zaXRpb247Cm91dCB2ZWM0IGZyYWdtZW50Q29sb3I7CmluIHZlYzQgdmVydGV4Q29sb3I7Cgp2b2lkIG1haW4oKQp7CiAgICBnbF9Qb3NpdGlvbiA9IHByb2plY3Rpb25NYXRyaXggKiB2ZWM0KHZlcnRleFBvc2l0aW9uLCAxLjApOwogICAgZnJhZ21lbnRDb2xvciA9IHZlcnRleENvbG9yOwp9Cgo";
kha_Shaders.painter_image_fragData0 = "s471:I3ZlcnNpb24gMTAwCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgdGV4OwoKdmFyeWluZyBoaWdocCB2ZWMyIHRleENvb3JkOwp2YXJ5aW5nIGhpZ2hwIHZlYzQgY29sb3I7Cgp2b2lkIG1haW4oKQp7CiAgICBoaWdocCB2ZWM0IHRleGNvbG9yID0gdGV4dHVyZTJEKHRleCwgdGV4Q29vcmQpICogY29sb3I7CiAgICBoaWdocCB2ZWMzIF8zMiA9IHRleGNvbG9yLnh5eiAqIGNvbG9yLnc7CiAgICB0ZXhjb2xvciA9IHZlYzQoXzMyLngsIF8zMi55LCBfMzIueiwgdGV4Y29sb3Iudyk7CiAgICBnbF9GcmFnRGF0YVswXSA9IHRleGNvbG9yOwp9Cgo";
kha_Shaders.painter_image_fragData1 = "s487:I3ZlcnNpb24gMzAwIGVzCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgdGV4OwoKaW4gaGlnaHAgdmVjMiB0ZXhDb29yZDsKaW4gaGlnaHAgdmVjNCBjb2xvcjsKb3V0IGhpZ2hwIHZlYzQgRnJhZ0NvbG9yOwoKdm9pZCBtYWluKCkKewogICAgaGlnaHAgdmVjNCB0ZXhjb2xvciA9IHRleHR1cmUodGV4LCB0ZXhDb29yZCkgKiBjb2xvcjsKICAgIGhpZ2hwIHZlYzMgXzMyID0gdGV4Y29sb3IueHl6ICogY29sb3IudzsKICAgIHRleGNvbG9yID0gdmVjNChfMzIueCwgXzMyLnksIF8zMi56LCB0ZXhjb2xvci53KTsKICAgIEZyYWdDb2xvciA9IHRleGNvbG9yOwp9Cgo";
kha_Shaders.painter_image_vertData0 = "s415:I3ZlcnNpb24gMTAwCgp1bmlmb3JtIG1hdDQgcHJvamVjdGlvbk1hdHJpeDsKCmF0dHJpYnV0ZSB2ZWMzIHZlcnRleFBvc2l0aW9uOwp2YXJ5aW5nIHZlYzIgdGV4Q29vcmQ7CmF0dHJpYnV0ZSB2ZWMyIHRleFBvc2l0aW9uOwp2YXJ5aW5nIHZlYzQgY29sb3I7CmF0dHJpYnV0ZSB2ZWM0IHZlcnRleENvbG9yOwoKdm9pZCBtYWluKCkKewogICAgZ2xfUG9zaXRpb24gPSBwcm9qZWN0aW9uTWF0cml4ICogdmVjNCh2ZXJ0ZXhQb3NpdGlvbiwgMS4wKTsKICAgIHRleENvb3JkID0gdGV4UG9zaXRpb247CiAgICBjb2xvciA9IHZlcnRleENvbG9yOwp9Cgo";
kha_Shaders.painter_image_vertData1 = "s380:I3ZlcnNpb24gMzAwIGVzCgp1bmlmb3JtIG1hdDQgcHJvamVjdGlvbk1hdHJpeDsKCmluIHZlYzMgdmVydGV4UG9zaXRpb247Cm91dCB2ZWMyIHRleENvb3JkOwppbiB2ZWMyIHRleFBvc2l0aW9uOwpvdXQgdmVjNCBjb2xvcjsKaW4gdmVjNCB2ZXJ0ZXhDb2xvcjsKCnZvaWQgbWFpbigpCnsKICAgIGdsX1Bvc2l0aW9uID0gcHJvamVjdGlvbk1hdHJpeCAqIHZlYzQodmVydGV4UG9zaXRpb24sIDEuMCk7CiAgICB0ZXhDb29yZCA9IHRleFBvc2l0aW9uOwogICAgY29sb3IgPSB2ZXJ0ZXhDb2xvcjsKfQoK";
kha_Shaders.painter_text_fragData0 = "s351:I3ZlcnNpb24gMTAwCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgdGV4OwoKdmFyeWluZyBoaWdocCB2ZWM0IGZyYWdtZW50Q29sb3I7CnZhcnlpbmcgaGlnaHAgdmVjMiB0ZXhDb29yZDsKCnZvaWQgbWFpbigpCnsKICAgIGdsX0ZyYWdEYXRhWzBdID0gdmVjNChmcmFnbWVudENvbG9yLnh5eiwgdGV4dHVyZTJEKHRleCwgdGV4Q29vcmQpLnggKiBmcmFnbWVudENvbG9yLncpOwp9Cgo";
kha_Shaders.painter_text_fragData1 = "s367:I3ZlcnNpb24gMzAwIGVzCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgdGV4OwoKb3V0IGhpZ2hwIHZlYzQgRnJhZ0NvbG9yOwppbiBoaWdocCB2ZWM0IGZyYWdtZW50Q29sb3I7CmluIGhpZ2hwIHZlYzIgdGV4Q29vcmQ7Cgp2b2lkIG1haW4oKQp7CiAgICBGcmFnQ29sb3IgPSB2ZWM0KGZyYWdtZW50Q29sb3IueHl6LCB0ZXh0dXJlKHRleCwgdGV4Q29vcmQpLnggKiBmcmFnbWVudENvbG9yLncpOwp9Cgo";
kha_Shaders.painter_text_vertData0 = "s436:I3ZlcnNpb24gMTAwCgp1bmlmb3JtIG1hdDQgcHJvamVjdGlvbk1hdHJpeDsKCmF0dHJpYnV0ZSB2ZWMzIHZlcnRleFBvc2l0aW9uOwp2YXJ5aW5nIHZlYzIgdGV4Q29vcmQ7CmF0dHJpYnV0ZSB2ZWMyIHRleFBvc2l0aW9uOwp2YXJ5aW5nIHZlYzQgZnJhZ21lbnRDb2xvcjsKYXR0cmlidXRlIHZlYzQgdmVydGV4Q29sb3I7Cgp2b2lkIG1haW4oKQp7CiAgICBnbF9Qb3NpdGlvbiA9IHByb2plY3Rpb25NYXRyaXggKiB2ZWM0KHZlcnRleFBvc2l0aW9uLCAxLjApOwogICAgdGV4Q29vcmQgPSB0ZXhQb3NpdGlvbjsKICAgIGZyYWdtZW50Q29sb3IgPSB2ZXJ0ZXhDb2xvcjsKfQoK";
kha_Shaders.painter_text_vertData1 = "s402:I3ZlcnNpb24gMzAwIGVzCgp1bmlmb3JtIG1hdDQgcHJvamVjdGlvbk1hdHJpeDsKCmluIHZlYzMgdmVydGV4UG9zaXRpb247Cm91dCB2ZWMyIHRleENvb3JkOwppbiB2ZWMyIHRleFBvc2l0aW9uOwpvdXQgdmVjNCBmcmFnbWVudENvbG9yOwppbiB2ZWM0IHZlcnRleENvbG9yOwoKdm9pZCBtYWluKCkKewogICAgZ2xfUG9zaXRpb24gPSBwcm9qZWN0aW9uTWF0cml4ICogdmVjNCh2ZXJ0ZXhQb3NpdGlvbiwgMS4wKTsKICAgIHRleENvb3JkID0gdGV4UG9zaXRpb247CiAgICBmcmFnbWVudENvbG9yID0gdmVydGV4Q29sb3I7Cn0KCg";
kha_Shaders.painter_video_fragData0 = "s471:I3ZlcnNpb24gMTAwCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgdGV4OwoKdmFyeWluZyBoaWdocCB2ZWMyIHRleENvb3JkOwp2YXJ5aW5nIGhpZ2hwIHZlYzQgY29sb3I7Cgp2b2lkIG1haW4oKQp7CiAgICBoaWdocCB2ZWM0IHRleGNvbG9yID0gdGV4dHVyZTJEKHRleCwgdGV4Q29vcmQpICogY29sb3I7CiAgICBoaWdocCB2ZWMzIF8zMiA9IHRleGNvbG9yLnh5eiAqIGNvbG9yLnc7CiAgICB0ZXhjb2xvciA9IHZlYzQoXzMyLngsIF8zMi55LCBfMzIueiwgdGV4Y29sb3Iudyk7CiAgICBnbF9GcmFnRGF0YVswXSA9IHRleGNvbG9yOwp9Cgo";
kha_Shaders.painter_video_fragData1 = "s487:I3ZlcnNpb24gMzAwIGVzCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgdGV4OwoKaW4gaGlnaHAgdmVjMiB0ZXhDb29yZDsKaW4gaGlnaHAgdmVjNCBjb2xvcjsKb3V0IGhpZ2hwIHZlYzQgRnJhZ0NvbG9yOwoKdm9pZCBtYWluKCkKewogICAgaGlnaHAgdmVjNCB0ZXhjb2xvciA9IHRleHR1cmUodGV4LCB0ZXhDb29yZCkgKiBjb2xvcjsKICAgIGhpZ2hwIHZlYzMgXzMyID0gdGV4Y29sb3IueHl6ICogY29sb3IudzsKICAgIHRleGNvbG9yID0gdmVjNChfMzIueCwgXzMyLnksIF8zMi56LCB0ZXhjb2xvci53KTsKICAgIEZyYWdDb2xvciA9IHRleGNvbG9yOwp9Cgo";
kha_Shaders.painter_video_vertData0 = "s415:I3ZlcnNpb24gMTAwCgp1bmlmb3JtIG1hdDQgcHJvamVjdGlvbk1hdHJpeDsKCmF0dHJpYnV0ZSB2ZWMzIHZlcnRleFBvc2l0aW9uOwp2YXJ5aW5nIHZlYzIgdGV4Q29vcmQ7CmF0dHJpYnV0ZSB2ZWMyIHRleFBvc2l0aW9uOwp2YXJ5aW5nIHZlYzQgY29sb3I7CmF0dHJpYnV0ZSB2ZWM0IHZlcnRleENvbG9yOwoKdm9pZCBtYWluKCkKewogICAgZ2xfUG9zaXRpb24gPSBwcm9qZWN0aW9uTWF0cml4ICogdmVjNCh2ZXJ0ZXhQb3NpdGlvbiwgMS4wKTsKICAgIHRleENvb3JkID0gdGV4UG9zaXRpb247CiAgICBjb2xvciA9IHZlcnRleENvbG9yOwp9Cgo";
kha_Shaders.painter_video_vertData1 = "s380:I3ZlcnNpb24gMzAwIGVzCgp1bmlmb3JtIG1hdDQgcHJvamVjdGlvbk1hdHJpeDsKCmluIHZlYzMgdmVydGV4UG9zaXRpb247Cm91dCB2ZWMyIHRleENvb3JkOwppbiB2ZWMyIHRleFBvc2l0aW9uOwpvdXQgdmVjNCBjb2xvcjsKaW4gdmVjNCB2ZXJ0ZXhDb2xvcjsKCnZvaWQgbWFpbigpCnsKICAgIGdsX1Bvc2l0aW9uID0gcHJvamVjdGlvbk1hdHJpeCAqIHZlYzQodmVydGV4UG9zaXRpb24sIDEuMCk7CiAgICB0ZXhDb29yZCA9IHRleFBvc2l0aW9uOwogICAgY29sb3IgPSB2ZXJ0ZXhDb2xvcjsKfQoK";
kha_System.renderListeners = [];
kha_System.foregroundListeners = [];
kha_System.resumeListeners = [];
kha_System.pauseListeners = [];
kha_System.backgroundListeners = [];
kha_System.shutdownListeners = [];
kha_System.dropFilesListeners = [];
kha_SystemImpl.mobile = false;
kha_SystemImpl.ios = false;
kha_SystemImpl.mobileAudioPlaying = false;
kha_SystemImpl.chrome = false;
kha_SystemImpl.firefox = false;
kha_SystemImpl.ie = false;
kha_SystemImpl.insideInputEvent = false;
kha_SystemImpl.maxGamepads = 4;
kha_SystemImpl.leftMouseCtrlDown = false;
kha_SystemImpl.minimumScroll = 999;
kha_SystemImpl.lastFirstTouchX = 0;
kha_SystemImpl.lastFirstTouchY = 0;
kha_SystemImpl.iosSoundEnabled = false;
kha_SystemImpl.soundEnabled = false;
kha_SystemImpl.iosTouchs = [];
kha_WebGLImage.GL_RGBA16F = 34842;
kha_WebGLImage.GL_RGBA32F = 34836;
kha_WebGLImage.GL_R16F = 33325;
kha_WebGLImage.GL_R32F = 33326;
kha_WebGLImage.GL_RED = 6403;
kha_WebGLImage.GL_DEPTH_COMPONENT24 = 33190;
kha_WebGLImage.GL_DEPTH24_STENCIL8 = 35056;
kha_WebGLImage.GL_DEPTH32F_STENCIL8 = 36013;
kha_Window.windows = [];
kha__$WindowOptions_WindowFeatures_$Impl_$.None = 0;
kha__$WindowOptions_WindowFeatures_$Impl_$.FeatureResizable = 1;
kha__$WindowOptions_WindowFeatures_$Impl_$.FeatureMinimizable = 2;
kha__$WindowOptions_WindowFeatures_$Impl_$.FeatureMaximizable = 4;
kha__$WindowOptions_WindowFeatures_$Impl_$.FeatureBorderless = 8;
kha__$WindowOptions_WindowFeatures_$Impl_$.FeatureOnTop = 16;
kha_audio2_Audio.disableGcInteractions = false;
kha_audio2_Audio.intBox = new kha_internal_IntBox(0);
kha_audio2_Audio.virtualChannels = [];
kha_audio2_Audio1.channelCount = 32;
kha_audio2_Audio1.lastAllocationCount = 0;
kha_audio2_ogg_tools_Crc32.POLY = 79764919;
kha_audio2_ogg_vorbis_VorbisDecodeState.INVALID_BITS = -1;
kha_audio2_ogg_vorbis_VorbisTools.EOP = -1;
kha_audio2_ogg_vorbis_VorbisTools.M__PI = 3.14159265358979323846264;
kha_audio2_ogg_vorbis_VorbisTools.DIVTAB_NUMER = 32;
kha_audio2_ogg_vorbis_VorbisTools.DIVTAB_DENOM = 64;
kha_audio2_ogg_vorbis_VorbisTools.INVERSE_DB_TABLE = [1.0649863e-07,1.1341951e-07,1.2079015e-07,1.2863978e-07,1.3699951e-07,1.4590251e-07,1.5538408e-07,1.6548181e-07,1.7623575e-07,1.8768855e-07,1.9988561e-07,2.1287530e-07,2.2670913e-07,2.4144197e-07,2.5713223e-07,2.7384213e-07,2.9163793e-07,3.1059021e-07,3.3077411e-07,3.5226968e-07,3.7516214e-07,3.9954229e-07,4.2550680e-07,4.5315863e-07,4.8260743e-07,5.1396998e-07,5.4737065e-07,5.8294187e-07,6.2082472e-07,6.6116941e-07,7.0413592e-07,7.4989464e-07,7.9862701e-07,8.5052630e-07,9.0579828e-07,9.6466216e-07,1.0273513e-06,1.0941144e-06,1.1652161e-06,1.2409384e-06,1.3215816e-06,1.4074654e-06,1.4989305e-06,1.5963394e-06,1.7000785e-06,1.8105592e-06,1.9282195e-06,2.0535261e-06,2.1869758e-06,2.3290978e-06,2.4804557e-06,2.6416497e-06,2.8133190e-06,2.9961443e-06,3.1908506e-06,3.3982101e-06,3.6190449e-06,3.8542308e-06,4.1047004e-06,4.3714470e-06,4.6555282e-06,4.9580707e-06,5.2802740e-06,5.6234160e-06,5.9888572e-06,6.3780469e-06,6.7925283e-06,7.2339451e-06,7.7040476e-06,8.2047000e-06,8.7378876e-06,9.3057248e-06,9.9104632e-06,1.0554501e-05,1.1240392e-05,1.1970856e-05,1.2748789e-05,1.3577278e-05,1.4459606e-05,1.5399272e-05,1.6400004e-05,1.7465768e-05,1.8600792e-05,1.9809576e-05,2.1096914e-05,2.2467911e-05,2.3928002e-05,2.5482978e-05,2.7139006e-05,2.8902651e-05,3.0780908e-05,3.2781225e-05,3.4911534e-05,3.7180282e-05,3.9596466e-05,4.2169667e-05,4.4910090e-05,4.7828601e-05,5.0936773e-05,5.4246931e-05,5.7772202e-05,6.1526565e-05,6.5524908e-05,6.9783085e-05,7.4317983e-05,7.9147585e-05,8.4291040e-05,8.9768747e-05,9.5602426e-05,0.00010181521,0.00010843174,0.00011547824,0.00012298267,0.00013097477,0.00013948625,0.00014855085,0.00015820453,0.00016848555,0.00017943469,0.00019109536,0.00020351382,0.00021673929,0.00023082423,0.00024582449,0.00026179955,0.00027881276,0.00029693158,0.00031622787,0.00033677814,0.00035866388,0.00038197188,0.00040679456,0.00043323036,0.00046138411,0.00049136745,0.00052329927,0.00055730621,0.00059352311,0.00063209358,0.00067317058,0.00071691700,0.00076350630,0.00081312324,0.00086596457,0.00092223983,0.00098217216,0.0010459992,0.0011139742,0.0011863665,0.0012634633,0.0013455702,0.0014330129,0.0015261382,0.0016253153,0.0017309374,0.0018434235,0.0019632195,0.0020908006,0.0022266726,0.0023713743,0.0025254795,0.0026895994,0.0028643847,0.0030505286,0.0032487691,0.0034598925,0.0036847358,0.0039241906,0.0041792066,0.0044507950,0.0047400328,0.0050480668,0.0053761186,0.0057254891,0.0060975636,0.0064938176,0.0069158225,0.0073652516,0.0078438871,0.0083536271,0.0088964928,0.009474637,0.010090352,0.010746080,0.011444421,0.012188144,0.012980198,0.013823725,0.014722068,0.015678791,0.016697687,0.017782797,0.018938423,0.020169149,0.021479854,0.022875735,0.024362330,0.025945531,0.027631618,0.029427276,0.031339626,0.033376252,0.035545228,0.037855157,0.040315199,0.042935108,0.045725273,0.048696758,0.051861348,0.055231591,0.058820850,0.062643361,0.066714279,0.071049749,0.075666962,0.080584227,0.085821044,0.091398179,0.097337747,0.10366330,0.11039993,0.11757434,0.12521498,0.13335215,0.14201813,0.15124727,0.16107617,0.17154380,0.18269168,0.19456402,0.20720788,0.22067342,0.23501402,0.25028656,0.26655159,0.28387361,0.30232132,0.32196786,0.34289114,0.36517414,0.38890521,0.41417847,0.44109412,0.46975890,0.50028648,0.53279791,0.56742212,0.60429640,0.64356699,0.68538959,0.72993007,0.77736504,0.82788260,0.88168307,0.9389798,1.0];
kha_audio2_ogg_vorbis_data_Codebook.NO_CODE = 255;
kha_audio2_ogg_vorbis_data_Codebook.delay = 0;
kha_audio2_ogg_vorbis_data_Header.PACKET_ID = 1;
kha_audio2_ogg_vorbis_data_Header.PACKET_COMMENT = 3;
kha_audio2_ogg_vorbis_data_Header.PACKET_SETUP = 5;
kha_audio2_ogg_vorbis_data_PageFlag.CONTINUED_PACKET = 1;
kha_audio2_ogg_vorbis_data_PageFlag.FIRST_PAGE = 2;
kha_audio2_ogg_vorbis_data_PageFlag.LAST_PAGE = 4;
kha_audio2_ogg_vorbis_data_Setting.MAX_CHANNELS = 16;
kha_audio2_ogg_vorbis_data_Setting.PUSHDATA_CRC_COUNT = 4;
kha_audio2_ogg_vorbis_data_Setting.FAST_HUFFMAN_LENGTH = 10;
kha_audio2_ogg_vorbis_data_Setting.FAST_HUFFMAN_TABLE_SIZE = 1024;
kha_audio2_ogg_vorbis_data_Setting.FAST_HUFFMAN_TABLE_MASK = 1023;
kha_graphics2_Graphics.fontGlyphs = (function($this) {
	var $r;
	var _g = [];
	{
		var _g1 = 32;
		while(_g1 < 256) {
			var i = _g1++;
			_g.push(i);
		}
	}
	$r = _g;
	return $r;
}(this));
kha_graphics2_truetype_StbTruetype.STBTT_vmove = 1;
kha_graphics2_truetype_StbTruetype.STBTT_vline = 2;
kha_graphics2_truetype_StbTruetype.STBTT_vcurve = 3;
kha_graphics2_truetype_StbTruetype.STBTT_MACSTYLE_DONTCARE = 0;
kha_graphics2_truetype_StbTruetype.STBTT_MACSTYLE_BOLD = 1;
kha_graphics2_truetype_StbTruetype.STBTT_MACSTYLE_ITALIC = 2;
kha_graphics2_truetype_StbTruetype.STBTT_MACSTYLE_UNDERSCORE = 4;
kha_graphics2_truetype_StbTruetype.STBTT_MACSTYLE_NONE = 8;
kha_graphics2_truetype_StbTruetype.STBTT_PLATFORM_ID_UNICODE = 0;
kha_graphics2_truetype_StbTruetype.STBTT_PLATFORM_ID_MAC = 1;
kha_graphics2_truetype_StbTruetype.STBTT_PLATFORM_ID_ISO = 2;
kha_graphics2_truetype_StbTruetype.STBTT_PLATFORM_ID_MICROSOFT = 3;
kha_graphics2_truetype_StbTruetype.STBTT_UNICODE_EID_UNICODE_1_0 = 0;
kha_graphics2_truetype_StbTruetype.STBTT_UNICODE_EID_UNICODE_1_1 = 1;
kha_graphics2_truetype_StbTruetype.STBTT_UNICODE_EID_ISO_10646 = 2;
kha_graphics2_truetype_StbTruetype.STBTT_UNICODE_EID_UNICODE_2_0_BMP = 3;
kha_graphics2_truetype_StbTruetype.STBTT_UNICODE_EID_UNICODE_2_0_FULL = 4;
kha_graphics2_truetype_StbTruetype.STBTT_MS_EID_SYMBOL = 0;
kha_graphics2_truetype_StbTruetype.STBTT_MS_EID_UNICODE_BMP = 1;
kha_graphics2_truetype_StbTruetype.STBTT_MS_EID_SHIFTJIS = 2;
kha_graphics2_truetype_StbTruetype.STBTT_MS_EID_UNICODE_FULL = 10;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_EID_ROMAN = 0;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_EID_ARABIC = 4;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_EID_JAPANESE = 1;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_EID_HEBREW = 5;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_EID_CHINESE_TRAD = 2;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_EID_GREEK = 6;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_EID_KOREAN = 3;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_EID_RUSSIAN = 7;
kha_graphics2_truetype_StbTruetype.STBTT_MS_LANG_ENGLISH = 1033;
kha_graphics2_truetype_StbTruetype.STBTT_MS_LANG_ITALIAN = 1040;
kha_graphics2_truetype_StbTruetype.STBTT_MS_LANG_CHINESE = 2052;
kha_graphics2_truetype_StbTruetype.STBTT_MS_LANG_JAPANESE = 1041;
kha_graphics2_truetype_StbTruetype.STBTT_MS_LANG_DUTCH = 1043;
kha_graphics2_truetype_StbTruetype.STBTT_MS_LANG_KOREAN = 1042;
kha_graphics2_truetype_StbTruetype.STBTT_MS_LANG_FRENCH = 1036;
kha_graphics2_truetype_StbTruetype.STBTT_MS_LANG_RUSSIAN = 1049;
kha_graphics2_truetype_StbTruetype.STBTT_MS_LANG_GERMAN = 1031;
kha_graphics2_truetype_StbTruetype.STBTT_MS_LANG_SPANISH = 1033;
kha_graphics2_truetype_StbTruetype.STBTT_MS_LANG_HEBREW = 1037;
kha_graphics2_truetype_StbTruetype.STBTT_MS_LANG_SWEDISH = 1053;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_ENGLISH = 0;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_JAPANESE = 11;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_ARABIC = 12;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_KOREAN = 23;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_DUTCH = 4;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_RUSSIAN = 32;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_FRENCH = 1;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_SPANISH = 6;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_GERMAN = 2;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_SWEDISH = 5;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_HEBREW = 10;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_CHINESE_SIMPLIFIED = 33;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_ITALIAN = 3;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_CHINESE_TRAD = 19;
kha_graphics2_truetype_StbTruetype.STBTT_MAX_OVERSAMPLE = 8;
kha_graphics2_truetype_StbTruetype.STBTT_RASTERIZER_VERSION = 2;
kha_graphics4_CubeMap.GL_RGBA16F = 34842;
kha_graphics4_CubeMap.GL_RGBA32F = 34836;
kha_graphics4_CubeMap.GL_R16F = 33325;
kha_graphics4_CubeMap.GL_R32F = 33326;
kha_graphics4_CubeMap.GL_DEPTH_COMPONENT24 = 33190;
kha_graphics4_CubeMap.GL_DEPTH24_STENCIL8 = 35056;
kha_graphics4_CubeMap.GL_DEPTH32F_STENCIL8 = 36013;
kha_graphics4_ImageShaderPainter.bufferSize = 1500;
kha_graphics4_ImageShaderPainter.vertexSize = 9;
kha_graphics4_ColoredShaderPainter.bufferSize = 1000;
kha_graphics4_ColoredShaderPainter.triangleBufferSize = 1000;
kha_graphics4_TextShaderPainter.bufferSize = 1000;
kha_input_Gamepad.__meta__ = { statics : { sendConnectEvent : { input : null}, sendDisconnectEvent : { input : null}}, fields : { sendAxisEvent : { input : null}, sendButtonEvent : { input : null}}};
kha_input_Gamepad.instances = [];
kha_input_Gamepad.connectListeners = [];
kha_input_Gamepad.disconnectListeners = [];
kha_input_Keyboard.__meta__ = { fields : { sendDownEvent : { input : null}, sendUpEvent : { input : null}, sendPressEvent : { input : null}}};
kha_input_Keyboard.keyBehavior = kha_input_BlockInterventions.Default;
kha_input_Mouse.__meta__ = { fields : { sendLeaveEvent : { input : null}, sendDownEvent : { input : null}, sendUpEvent : { input : null}, sendMoveEvent : { input : null}, sendWheelEvent : { input : null}}};
kha_input_Sensor.isInited = false;
kha_input_Sensor.accelerometer = new kha_input_Sensor();
kha_input_Sensor.gyroscope = new kha_input_Sensor();
kha_internal_BytesBlob.bufferSize = 2000;
kha_internal_HdrFormat.radiancePattern = new EReg("#\\?RADIANCE","i");
kha_internal_HdrFormat.commentPattern = new EReg("#.*","i");
kha_internal_HdrFormat.gammaPattern = new EReg("GAMMA=","i");
kha_internal_HdrFormat.exposurePattern = new EReg("EXPOSURE=\\s*([0-9]*[.][0-9]*)","i");
kha_internal_HdrFormat.formatPattern = new EReg("FORMAT=32-bit_rle_rgbe","i");
kha_internal_HdrFormat.widthHeightPattern = new EReg("-Y ([0-9]+) \\+X ([0-9]+)","i");
kha_js_Sound.loading = [];
kha_js_graphics4_Graphics.GL_TEXTURE_COMPARE_MODE = 34892;
kha_js_graphics4_Graphics.GL_TEXTURE_COMPARE_FUNC = 34893;
kha_js_graphics4_Graphics.GL_COMPARE_REF_TO_TEXTURE = 34894;
kha_math_FastMatrix3.width = 3;
kha_math_FastMatrix3.height = 3;
kha_math_FastMatrix4.width = 4;
kha_math_FastMatrix4.height = 4;
kha_math_Matrix3.width = 3;
kha_math_Matrix3.height = 3;
kha_math_Matrix4.width = 4;
kha_math_Matrix4.height = 4;
kha_math_Quaternion.AXIS_X = 0;
kha_math_Quaternion.AXIS_Y = 1;
kha_math_Quaternion.AXIS_Z = 2;
kha_netsync_ControllerBuilder.nextId = 0;
kha_netsync_Session.START = 0;
kha_netsync_Session.ENTITY_UPDATES = 1;
kha_netsync_Session.CONTROLLER_UPDATES = 2;
kha_netsync_Session.REMOTE_CALL = 3;
kha_netsync_Session.PING = 4;
kha_netsync_Session.SESSION_ERROR = 5;
kha_netsync_Session.PLAYER_UPDATES = 6;
kha_netsync_Session.RPC_SERVER = 0;
kha_netsync_Session.RPC_ALL = 1;
kha_netsync_SyncBuilder.nextId = 0;
kha_netsync_SyncBuilder.objects = [];
openfl_Lib.__lastTimerID = 0;
openfl_Lib.__sentWarnings = new haxe_ds_StringMap();
openfl_Lib.__timers = new haxe_ds_IntMap();
openfl__$internal_HTTPRequest.validStatus0 = new EReg("Tizen","gi").match(window.navigator.userAgent);
openfl__$internal_HTTPRequest.activeRequests = 0;
openfl__$internal_HTTPRequest.requestLimit = 4;
openfl__$internal_HTTPRequest.requestQueue = new haxe_ds_List();
openfl__$internal_graphics_Image.__base64Chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
openfl__$internal_graphics_utils_ImageDataUtil.__clamp = (function($this) {
	var $r;
	var a = new Uint8Array(510);
	{
		var _g = 0;
		while(_g < 255) {
			var i = _g++;
			a[i] = i;
		}
	}
	{
		var _g1 = 255;
		var _g2 = 511;
		while(_g1 < _g2) {
			var i1 = _g1++;
			a[i1] = 255;
		}
	}
	$r = a;
	return $r;
}(this));
openfl__$internal_graphics_utils__$ImageDataUtil_ColorMatrix_$Impl_$.__identity = [1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0];
openfl__$internal_renderer_DrawCommandBuffer.empty = new openfl__$internal_renderer_DrawCommandBuffer();
openfl__$internal_renderer_canvas_CanvasGraphics.SIN45 = 0.70710678118654752440084436210485;
openfl__$internal_renderer_canvas_CanvasGraphics.TAN22 = 0.4142135623730950488016887242097;
openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands = new openfl__$internal_renderer_DrawCommandBuffer();
openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands = new openfl__$internal_renderer_DrawCommandBuffer();
openfl__$internal_renderer_opengl_batcher_BatchRenderer.floatsPerVertex = 14;
openfl__$internal_renderer_opengl_batcher_BatchRenderer.floatsPerQuad = 56;
openfl__$internal_renderer_opengl_batcher_Quad.pool = new openfl__$internal_utils_ObjectPool(function() {
	return new openfl__$internal_renderer_opengl_batcher_Quad();
},function(quad) {
	quad.cleanup();
	return;
});
openfl__$internal_renderer_opengl_batcher_QuadTextureData.fullFrameUVs = openfl__$internal_renderer_opengl_batcher_QuadTextureData.createArray(0,0,1,0,1,1,0,1);
openfl__$internal_stage3D_AGALConverter.limitedProfile = true;
openfl__$internal_text_HTMLParser.__regexAlign = new EReg("align=(\"([^\"]+)\"|'([^']+)')","i");
openfl__$internal_text_HTMLParser.__regexBreakTag = new EReg("<br\\s*/?>","gi");
openfl__$internal_text_HTMLParser.__regexBlockIndent = new EReg("blockindent=(\"([^\"]+)\"|'([^']+)')","i");
openfl__$internal_text_HTMLParser.__regexColor = new EReg("color=(\"#([^\"]+)\"|'#([^']+)')","i");
openfl__$internal_text_HTMLParser.__regexEntities = [new EReg("&quot;","g"),new EReg("&apos;","g"),new EReg("&amp;","g"),new EReg("&lt;","g"),new EReg("&gt;","g"),new EReg("&nbsp;","g")];
openfl__$internal_text_HTMLParser.__regexFace = new EReg("face=(\"([^\"]+)\"|'([^']+)')","i");
openfl__$internal_text_HTMLParser.__regexHTMLTag = new EReg("<.*?>","g");
openfl__$internal_text_HTMLParser.__regexHref = new EReg("href=(\"([^\"]+)\"|'([^']+)')","i");
openfl__$internal_text_HTMLParser.__regexIndent = new EReg(" indent=(\"([^\"]+)\"|'([^']+)')","i");
openfl__$internal_text_HTMLParser.__regexLeading = new EReg("leading=(\"([^\"]+)\"|'([^']+)')","i");
openfl__$internal_text_HTMLParser.__regexLeftMargin = new EReg("leftmargin=(\"([^\"]+)\"|'([^']+)')","i");
openfl__$internal_text_HTMLParser.__regexRightMargin = new EReg("rightmargin=(\"([^\"]+)\"|'([^']+)')","i");
openfl__$internal_text_HTMLParser.__regexSize = new EReg("size=(\"([^\"]+)\"|'([^']+)')","i");
openfl__$internal_text_HTMLParser.__regexTabStops = new EReg("tabstops=(\"([^\"]+)\"|'([^']+)')","i");
openfl__$internal_text_TextEngine.GUTTER = 2.0;
openfl__$internal_text_TextEngine.UTF8_TAB = 9;
openfl__$internal_text_TextEngine.UTF8_ENDLINE = 10;
openfl__$internal_text_TextEngine.UTF8_SPACE = 32;
openfl__$internal_text_TextEngine.UTF8_HYPHEN = 45;
openfl__$internal_ui_Gamepad.devices = new haxe_ds_IntMap();
openfl__$internal_ui_Gamepad.onConnect = new openfl__$internal_app_Event1();
openfl__$internal_ui__$GamepadAxis_GamepadAxis_$Impl_$.LEFT_X = 0;
openfl__$internal_ui__$GamepadAxis_GamepadAxis_$Impl_$.LEFT_Y = 1;
openfl__$internal_ui__$GamepadAxis_GamepadAxis_$Impl_$.RIGHT_X = 2;
openfl__$internal_ui__$GamepadAxis_GamepadAxis_$Impl_$.RIGHT_Y = 3;
openfl__$internal_ui__$GamepadAxis_GamepadAxis_$Impl_$.TRIGGER_LEFT = 4;
openfl__$internal_ui__$GamepadAxis_GamepadAxis_$Impl_$.TRIGGER_RIGHT = 5;
openfl__$internal_ui__$GamepadButton_GamepadButton_$Impl_$.A = 0;
openfl__$internal_ui__$GamepadButton_GamepadButton_$Impl_$.B = 1;
openfl__$internal_ui__$GamepadButton_GamepadButton_$Impl_$.X = 2;
openfl__$internal_ui__$GamepadButton_GamepadButton_$Impl_$.Y = 3;
openfl__$internal_ui__$GamepadButton_GamepadButton_$Impl_$.BACK = 4;
openfl__$internal_ui__$GamepadButton_GamepadButton_$Impl_$.GUIDE = 5;
openfl__$internal_ui__$GamepadButton_GamepadButton_$Impl_$.START = 6;
openfl__$internal_ui__$GamepadButton_GamepadButton_$Impl_$.LEFT_STICK = 7;
openfl__$internal_ui__$GamepadButton_GamepadButton_$Impl_$.RIGHT_STICK = 8;
openfl__$internal_ui__$GamepadButton_GamepadButton_$Impl_$.LEFT_SHOULDER = 9;
openfl__$internal_ui__$GamepadButton_GamepadButton_$Impl_$.RIGHT_SHOULDER = 10;
openfl__$internal_ui__$GamepadButton_GamepadButton_$Impl_$.DPAD_UP = 11;
openfl__$internal_ui__$GamepadButton_GamepadButton_$Impl_$.DPAD_DOWN = 12;
openfl__$internal_ui__$GamepadButton_GamepadButton_$Impl_$.DPAD_LEFT = 13;
openfl__$internal_ui__$GamepadButton_GamepadButton_$Impl_$.DPAD_RIGHT = 14;
openfl__$internal_ui__$KeyModifier_KeyModifier_$Impl_$.NONE = 0;
openfl__$internal_ui__$KeyModifier_KeyModifier_$Impl_$.LEFT_SHIFT = 1;
openfl__$internal_ui__$KeyModifier_KeyModifier_$Impl_$.RIGHT_SHIFT = 2;
openfl__$internal_ui__$KeyModifier_KeyModifier_$Impl_$.LEFT_CTRL = 64;
openfl__$internal_ui__$KeyModifier_KeyModifier_$Impl_$.RIGHT_CTRL = 128;
openfl__$internal_ui__$KeyModifier_KeyModifier_$Impl_$.LEFT_ALT = 256;
openfl__$internal_ui__$KeyModifier_KeyModifier_$Impl_$.RIGHT_ALT = 512;
openfl__$internal_ui__$KeyModifier_KeyModifier_$Impl_$.LEFT_META = 1024;
openfl__$internal_ui__$KeyModifier_KeyModifier_$Impl_$.RIGHT_META = 2048;
openfl__$internal_ui__$KeyModifier_KeyModifier_$Impl_$.NUM_LOCK = 4096;
openfl__$internal_ui__$KeyModifier_KeyModifier_$Impl_$.CAPS_LOCK = 8192;
openfl__$internal_ui__$KeyModifier_KeyModifier_$Impl_$.MODE = 16384;
openfl__$internal_ui__$KeyModifier_KeyModifier_$Impl_$.CTRL = 192;
openfl__$internal_ui__$KeyModifier_KeyModifier_$Impl_$.SHIFT = 3;
openfl__$internal_ui__$KeyModifier_KeyModifier_$Impl_$.ALT = 768;
openfl__$internal_ui__$KeyModifier_KeyModifier_$Impl_$.META = 3072;
openfl__$internal_ui_Window.dummyCharacter = "";
openfl__$internal_utils_Log.level = 4;
openfl__$internal_utils_Log.throwErrors = true;
openfl__$internal_utils_PerlinNoise.P = [151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208,89,18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180,151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208,89,18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180];
openfl_desktop__$ClipboardFormats_ClipboardFormats_$Impl_$.HTML_FORMAT = 0;
openfl_desktop__$ClipboardFormats_ClipboardFormats_$Impl_$.RICH_TEXT_FORMAT = 1;
openfl_desktop__$ClipboardFormats_ClipboardFormats_$Impl_$.TEXT_FORMAT = 2;
openfl_desktop__$ClipboardTransferMode_ClipboardTransferMode_$Impl_$.CLONE_ONLY = 0;
openfl_desktop__$ClipboardTransferMode_ClipboardTransferMode_$Impl_$.CLONE_PREFERRED = 1;
openfl_desktop__$ClipboardTransferMode_ClipboardTransferMode_$Impl_$.ORIGINAL_ONLY = 2;
openfl_desktop__$ClipboardTransferMode_ClipboardTransferMode_$Impl_$.ORIGINAL_PREFERRED = 3;
openfl_display_TextureRegionResult.helperInstance = new openfl_display_TextureRegionResult();
openfl_display__$BlendMode_BlendMode_$Impl_$.ADD = 0;
openfl_display__$BlendMode_BlendMode_$Impl_$.ALPHA = 1;
openfl_display__$BlendMode_BlendMode_$Impl_$.DARKEN = 2;
openfl_display__$BlendMode_BlendMode_$Impl_$.DIFFERENCE = 3;
openfl_display__$BlendMode_BlendMode_$Impl_$.ERASE = 4;
openfl_display__$BlendMode_BlendMode_$Impl_$.HARDLIGHT = 5;
openfl_display__$BlendMode_BlendMode_$Impl_$.INVERT = 6;
openfl_display__$BlendMode_BlendMode_$Impl_$.LAYER = 7;
openfl_display__$BlendMode_BlendMode_$Impl_$.LIGHTEN = 8;
openfl_display__$BlendMode_BlendMode_$Impl_$.MULTIPLY = 9;
openfl_display__$BlendMode_BlendMode_$Impl_$.NORMAL = 10;
openfl_display__$BlendMode_BlendMode_$Impl_$.OVERLAY = 11;
openfl_display__$BlendMode_BlendMode_$Impl_$.SCREEN = 12;
openfl_display__$BlendMode_BlendMode_$Impl_$.SHADER = 13;
openfl_display__$BlendMode_BlendMode_$Impl_$.SUBTRACT = 14;
openfl_display__$CapsStyle_CapsStyle_$Impl_$.NONE = 0;
openfl_display__$CapsStyle_CapsStyle_$Impl_$.ROUND = 1;
openfl_display__$CapsStyle_CapsStyle_$Impl_$.SQUARE = 2;
openfl_display__$GradientType_GradientType_$Impl_$.LINEAR = 0;
openfl_display__$GradientType_GradientType_$Impl_$.RADIAL = 1;
openfl_display_GraphicsPath.SIN45 = 0.70710678118654752440084436210485;
openfl_display_GraphicsPath.TAN22 = 0.4142135623730950488016887242097;
openfl_display__$GraphicsPathWinding_GraphicsPathWinding_$Impl_$.EVEN_ODD = 0;
openfl_display__$GraphicsPathWinding_GraphicsPathWinding_$Impl_$.NON_ZERO = 1;
openfl_display__$InterpolationMethod_InterpolationMethod_$Impl_$.LINEAR_RGB = 0;
openfl_display__$InterpolationMethod_InterpolationMethod_$Impl_$.RGB = 1;
openfl_display__$JointStyle_JointStyle_$Impl_$.BEVEL = 0;
openfl_display__$JointStyle_JointStyle_$Impl_$.MITER = 1;
openfl_display__$JointStyle_JointStyle_$Impl_$.ROUND = 2;
openfl_display__$LineScaleMode_LineScaleMode_$Impl_$.HORIZONTAL = 0;
openfl_display__$LineScaleMode_LineScaleMode_$Impl_$.NONE = 1;
openfl_display__$LineScaleMode_LineScaleMode_$Impl_$.NORMAL = 2;
openfl_display__$LineScaleMode_LineScaleMode_$Impl_$.VERTICAL = 3;
openfl_display_LoaderInfo.__rootURL = window.document.URL;
openfl_display__$PixelSnapping_PixelSnapping_$Impl_$.ALWAYS = 0;
openfl_display__$PixelSnapping_PixelSnapping_$Impl_$.AUTO = 1;
openfl_display__$PixelSnapping_PixelSnapping_$Impl_$.NEVER = 2;
openfl_display__$SpreadMethod_SpreadMethod_$Impl_$.PAD = 0;
openfl_display__$SpreadMethod_SpreadMethod_$Impl_$.REFLECT = 1;
openfl_display__$SpreadMethod_SpreadMethod_$Impl_$.REPEAT = 2;
openfl_display__$Stage_TouchData.__pool = new openfl__$internal_utils_ObjectPool(function() {
	return new openfl_display__$Stage_TouchData();
},function(data) {
	data.reset();
	return;
});
openfl_display__$StageAlign_StageAlign_$Impl_$.BOTTOM = 0;
openfl_display__$StageAlign_StageAlign_$Impl_$.BOTTOM_LEFT = 1;
openfl_display__$StageAlign_StageAlign_$Impl_$.BOTTOM_RIGHT = 2;
openfl_display__$StageAlign_StageAlign_$Impl_$.LEFT = 3;
openfl_display__$StageAlign_StageAlign_$Impl_$.RIGHT = 4;
openfl_display__$StageAlign_StageAlign_$Impl_$.TOP = 5;
openfl_display__$StageAlign_StageAlign_$Impl_$.TOP_LEFT = 6;
openfl_display__$StageAlign_StageAlign_$Impl_$.TOP_RIGHT = 7;
openfl_display__$StageDisplayState_StageDisplayState_$Impl_$.FULL_SCREEN = 0;
openfl_display__$StageDisplayState_StageDisplayState_$Impl_$.FULL_SCREEN_INTERACTIVE = 1;
openfl_display__$StageDisplayState_StageDisplayState_$Impl_$.NORMAL = 2;
openfl_display__$StageQuality_StageQuality_$Impl_$.BEST = 0;
openfl_display__$StageQuality_StageQuality_$Impl_$.HIGH = 1;
openfl_display__$StageQuality_StageQuality_$Impl_$.LOW = 2;
openfl_display__$StageQuality_StageQuality_$Impl_$.MEDIUM = 3;
openfl_display__$StageScaleMode_StageScaleMode_$Impl_$.EXACT_FIT = 0;
openfl_display__$StageScaleMode_StageScaleMode_$Impl_$.NO_BORDER = 1;
openfl_display__$StageScaleMode_StageScaleMode_$Impl_$.NO_SCALE = 2;
openfl_display__$StageScaleMode_StageScaleMode_$Impl_$.SHOW_ALL = 3;
openfl_geom_Matrix.__identity = new openfl_geom_Matrix();
openfl_geom_Matrix.__pool = new openfl__$internal_utils_ObjectPool(function() {
	return new openfl_geom_Matrix();
},function(m) {
	m.identity();
	return;
});
openfl_display_SubBitmapData.__drawToCanvasTransform = new openfl_geom_Matrix();
openfl_display__$TriangleCulling_TriangleCulling_$Impl_$.NEGATIVE = 0;
openfl_display__$TriangleCulling_TriangleCulling_$Impl_$.NONE = 1;
openfl_display__$TriangleCulling_TriangleCulling_$Impl_$.POSITIVE = 2;
openfl_display3D_Context3D.supportsVideoTexture = true;
openfl_display3D_Context3D.MAX_SAMPLERS = 8;
openfl_display3D_Context3D.MAX_ATTRIBUTES = 16;
openfl_display3D_Context3D.MAX_PROGRAM_REGISTERS = 128;
openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT = 0;
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.DESTINATION_ALPHA = 0;
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.DESTINATION_COLOR = 1;
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.ONE = 2;
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.ONE_MINUS_DESTINATION_ALPHA = 3;
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.ONE_MINUS_DESTINATION_COLOR = 4;
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.ONE_MINUS_SOURCE_ALPHA = 5;
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.ONE_MINUS_SOURCE_COLOR = 6;
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.SOURCE_ALPHA = 7;
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.SOURCE_COLOR = 8;
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.ZERO = 9;
openfl_display3D__$Context3DBufferUsage_Context3DBufferUsage_$Impl_$.DYNAMIC_DRAW = 0;
openfl_display3D__$Context3DBufferUsage_Context3DBufferUsage_$Impl_$.STATIC_DRAW = 1;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.ALWAYS = 0;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.EQUAL = 1;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.GREATER = 2;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.GREATER_EQUAL = 3;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.LESS = 4;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.LESS_EQUAL = 5;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.NEVER = 6;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.NOT_EQUAL = 7;
openfl_display3D__$Context3DMipFilter_Context3DMipFilter_$Impl_$.MIPLINEAR = 0;
openfl_display3D__$Context3DMipFilter_Context3DMipFilter_$Impl_$.MIPNEAREST = 1;
openfl_display3D__$Context3DMipFilter_Context3DMipFilter_$Impl_$.MIPNONE = 2;
openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$.BASELINE = 0;
openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$.BASELINE_CONSTRAINED = 1;
openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$.BASELINE_EXTENDED = 2;
openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$.STANDARD = 3;
openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$.STANDARD_CONSTRAINED = 4;
openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$.STANDARD_EXTENDED = 5;
openfl_display3D__$Context3DProgramType_Context3DProgramType_$Impl_$.FRAGMENT = 0;
openfl_display3D__$Context3DProgramType_Context3DProgramType_$Impl_$.VERTEX = 1;
openfl_display3D__$Context3DRenderMode_Context3DRenderMode_$Impl_$.AUTO = 0;
openfl_display3D__$Context3DRenderMode_Context3DRenderMode_$Impl_$.SOFTWARE = 1;
openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.DECREMENT_SATURATE = 0;
openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.DECREMENT_WRAP = 1;
openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.INCREMENT_SATURATE = 2;
openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.INCREMENT_WRAP = 3;
openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.INVERT = 4;
openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.KEEP = 5;
openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.SET = 6;
openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.ZERO = 7;
openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$.ANISOTROPIC16X = 0;
openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$.ANISOTROPIC2X = 1;
openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$.ANISOTROPIC4X = 2;
openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$.ANISOTROPIC8X = 3;
openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$.LINEAR = 4;
openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$.NEAREST = 5;
openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.BGR_PACKED = 0;
openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.BGRA = 1;
openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.BGRA_PACKED = 2;
openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.COMPRESSED = 3;
openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.COMPRESSED_ALPHA = 4;
openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.RGBA_HALF_FLOAT = 5;
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.BACK = 0;
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.FRONT = 1;
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.FRONT_AND_BACK = 2;
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.NONE = 3;
openfl_display3D__$Context3DVertexBufferFormat_Context3DVertexBufferFormat_$Impl_$.BYTES_4 = 0;
openfl_display3D__$Context3DVertexBufferFormat_Context3DVertexBufferFormat_$Impl_$.FLOAT_1 = 1;
openfl_display3D__$Context3DVertexBufferFormat_Context3DVertexBufferFormat_$Impl_$.FLOAT_2 = 2;
openfl_display3D__$Context3DVertexBufferFormat_Context3DVertexBufferFormat_$Impl_$.FLOAT_3 = 3;
openfl_display3D__$Context3DVertexBufferFormat_Context3DVertexBufferFormat_$Impl_$.FLOAT_4 = 4;
openfl_display3D__$Context3DWrapMode_Context3DWrapMode_$Impl_$.CLAMP = 0;
openfl_display3D__$Context3DWrapMode_Context3DWrapMode_$Impl_$.CLAMP_U_REPEAT_V = 1;
openfl_display3D__$Context3DWrapMode_Context3DWrapMode_$Impl_$.REPEAT = 2;
openfl_display3D__$Context3DWrapMode_Context3DWrapMode_$Impl_$.REPEAT_U_CLAMP_V = 3;
openfl_display3D_textures_Texture.__lowMemoryMode = false;
openfl_errors_Error.DEFAULT_TO_STRING = "Error";
openfl_events_Event.ACTIVATE = "activate";
openfl_events_Event.ADDED = "added";
openfl_events_Event.ADDED_TO_STAGE = "addedToStage";
openfl_events_Event.CANCEL = "cancel";
openfl_events_Event.CHANGE = "change";
openfl_events_Event.CLEAR = "clear";
openfl_events_Event.CLOSE = "close";
openfl_events_Event.COMPLETE = "complete";
openfl_events_Event.CONNECT = "connect";
openfl_events_Event.CONTEXT3D_CREATE = "context3DCreate";
openfl_events_Event.COPY = "copy";
openfl_events_Event.CUT = "cut";
openfl_events_Event.DEACTIVATE = "deactivate";
openfl_events_Event.ENTER_FRAME = "enterFrame";
openfl_events_Event.EXIT_FRAME = "exitFrame";
openfl_events_Event.FRAME_CONSTRUCTED = "frameConstructed";
openfl_events_Event.FRAME_LABEL = "frameLabel";
openfl_events_Event.FULLSCREEN = "fullScreen";
openfl_events_Event.ID3 = "id3";
openfl_events_Event.INIT = "init";
openfl_events_Event.MOUSE_LEAVE = "mouseLeave";
openfl_events_Event.OPEN = "open";
openfl_events_Event.PASTE = "paste";
openfl_events_Event.REMOVED = "removed";
openfl_events_Event.REMOVED_FROM_STAGE = "removedFromStage";
openfl_events_Event.RENDER = "render";
openfl_events_Event.RESIZE = "resize";
openfl_events_Event.SCROLL = "scroll";
openfl_events_Event.SELECT = "select";
openfl_events_Event.SELECT_ALL = "selectAll";
openfl_events_Event.SOUND_COMPLETE = "soundComplete";
openfl_events_Event.TAB_CHILDREN_CHANGE = "tabChildrenChange";
openfl_events_Event.TAB_ENABLED_CHANGE = "tabEnabledChange";
openfl_events_Event.TAB_INDEX_CHANGE = "tabIndexChange";
openfl_events_Event.TEXTURE_READY = "textureReady";
openfl_events_Event.UNLOAD = "unload";
openfl_events_AccelerometerEvent.UPDATE = "update";
openfl_events_ActivityEvent.ACTIVITY = "activity";
openfl_events_TextEvent.LINK = "link";
openfl_events_TextEvent.TEXT_INPUT = "textInput";
openfl_events_ErrorEvent.ERROR = "error";
openfl_events_AsyncErrorEvent.ASYNC_ERROR = "asyncError";
openfl_events_ContextMenuEvent.MENU_ITEM_SELECT = "menuItemSelect";
openfl_events_ContextMenuEvent.MENU_SELECT = "menuSelect";
openfl_events_DataEvent.DATA = "data";
openfl_events_DataEvent.UPLOAD_COMPLETE_DATA = "uploadCompleteData";
openfl_events_FocusEvent.FOCUS_IN = "focusIn";
openfl_events_FocusEvent.FOCUS_OUT = "focusOut";
openfl_events_FocusEvent.KEY_FOCUS_CHANGE = "keyFocusChange";
openfl_events_FocusEvent.MOUSE_FOCUS_CHANGE = "mouseFocusChange";
openfl_events_FullScreenEvent.FULL_SCREEN = "fullScreen";
openfl_events_FullScreenEvent.FULL_SCREEN_INTERACTIVE_ACCEPTED = "fullScreenInteractiveAccepted";
openfl_events_GameInputEvent.DEVICE_ADDED = "deviceAdded";
openfl_events_GameInputEvent.DEVICE_REMOVED = "deviceRemoved";
openfl_events_GameInputEvent.DEVICE_UNUSABLE = "deviceUnusable";
openfl_events_HTTPStatusEvent.HTTP_RESPONSE_STATUS = "httpResponseStatus";
openfl_events_HTTPStatusEvent.HTTP_STATUS = "httpStatus";
openfl_events_IOErrorEvent.IO_ERROR = "ioError";
openfl_events_KeyboardEvent.KEY_DOWN = "keyDown";
openfl_events_KeyboardEvent.KEY_UP = "keyUp";
openfl_events_MouseEvent.CLICK = "click";
openfl_events_MouseEvent.DOUBLE_CLICK = "doubleClick";
openfl_events_MouseEvent.MIDDLE_CLICK = "middleClick";
openfl_events_MouseEvent.MIDDLE_MOUSE_DOWN = "middleMouseDown";
openfl_events_MouseEvent.MIDDLE_MOUSE_UP = "middleMouseUp";
openfl_events_MouseEvent.MOUSE_DOWN = "mouseDown";
openfl_events_MouseEvent.MOUSE_MOVE = "mouseMove";
openfl_events_MouseEvent.MOUSE_OUT = "mouseOut";
openfl_events_MouseEvent.MOUSE_OVER = "mouseOver";
openfl_events_MouseEvent.MOUSE_UP = "mouseUp";
openfl_events_MouseEvent.MOUSE_WHEEL = "mouseWheel";
openfl_events_MouseEvent.RELEASE_OUTSIDE = "releaseOutside";
openfl_events_MouseEvent.RIGHT_CLICK = "rightClick";
openfl_events_MouseEvent.RIGHT_MOUSE_DOWN = "rightMouseDown";
openfl_events_MouseEvent.RIGHT_MOUSE_UP = "rightMouseUp";
openfl_events_MouseEvent.ROLL_OUT = "rollOut";
openfl_events_MouseEvent.ROLL_OVER = "rollOver";
openfl_events_NetStatusEvent.NET_STATUS = "netStatus";
openfl_events_ProgressEvent.PROGRESS = "progress";
openfl_events_ProgressEvent.SOCKET_DATA = "socketData";
openfl_events_SampleDataEvent.SAMPLE_DATA = "sampleData";
openfl_events_SecurityErrorEvent.SECURITY_ERROR = "securityError";
openfl_events_TimerEvent.TIMER = "timer";
openfl_events_TimerEvent.TIMER_COMPLETE = "timerComplete";
openfl_events_TouchEvent.TOUCH_BEGIN = "touchBegin";
openfl_events_TouchEvent.TOUCH_END = "touchEnd";
openfl_events_TouchEvent.TOUCH_MOVE = "touchMove";
openfl_events_TouchEvent.TOUCH_OUT = "touchOut";
openfl_events_TouchEvent.TOUCH_OVER = "touchOver";
openfl_events_TouchEvent.TOUCH_ROLL_OUT = "touchRollOut";
openfl_events_TouchEvent.TOUCH_ROLL_OVER = "touchRollOver";
openfl_events_TouchEvent.TOUCH_TAP = "touchTap";
openfl_events_UncaughtErrorEvent.UNCAUGHT_ERROR = "uncaughtError";
openfl_external_ExternalInterface.available = true;
openfl_external_ExternalInterface.marshallExceptions = false;
openfl_filters__$BitmapFilterType_BitmapFilterType_$Impl_$.FULL = 0;
openfl_filters__$BitmapFilterType_BitmapFilterType_$Impl_$.INNER = 1;
openfl_filters__$BitmapFilterType_BitmapFilterType_$Impl_$.OUTER = 2;
openfl_geom__$Orientation3D_Orientation3D_$Impl_$.AXIS_ANGLE = 0;
openfl_geom__$Orientation3D_Orientation3D_$Impl_$.EULER_ANGLES = 1;
openfl_geom__$Orientation3D_Orientation3D_$Impl_$.QUATERNION = 2;
openfl_geom_PerspectiveProjection.TO_RADIAN = 0.01745329251994329577;
openfl_geom_Point.__pool = new openfl__$internal_utils_ObjectPool(function() {
	return new openfl_geom_Point();
},function(p) {
	p.setTo(0,0);
	return;
});
openfl_geom_Rectangle.__pool = new openfl__$internal_utils_ObjectPool(function() {
	return new openfl_geom_Rectangle();
},function(r) {
	r.setTo(0,0,0,0);
	return;
});
openfl_media_SoundMixer.MAX_ACTIVE_CHANNELS = 32;
openfl_media_SoundMixer.__soundChannels = [];
openfl_media_SoundMixer.__soundTransform = new openfl_media_SoundTransform();
openfl_media_Video.__bufferStride = 26;
openfl_net_NetConnection.CONNECT_SUCCESS = "NetConnection.Connect.Success";
openfl_net_SharedObject.defaultObjectEncoding = 3;
openfl_net__$SharedObjectFlushStatus_SharedObjectFlushStatus_$Impl_$.FLUSHED = 0;
openfl_net__$SharedObjectFlushStatus_SharedObjectFlushStatus_$Impl_$.PENDING = 1;
openfl_net__$URLLoaderDataFormat_URLLoaderDataFormat_$Impl_$.BINARY = 0;
openfl_net__$URLLoaderDataFormat_URLLoaderDataFormat_$Impl_$.TEXT = 1;
openfl_net__$URLLoaderDataFormat_URLLoaderDataFormat_$Impl_$.VARIABLES = 2;
openfl_net_URLRequestDefaults.followRedirects = true;
openfl_net_URLRequestDefaults.idleTimeout = 0;
openfl_net_URLRequestDefaults.manageCookies = false;
openfl_printing_PrintJob.isSupported = true;
openfl_printing__$PrintJobOrientation_PrintJobOrientation_$Impl_$.LANDSCAPE = 0;
openfl_printing__$PrintJobOrientation_PrintJobOrientation_$Impl_$.PORTRAIT = 1;
openfl_sensors_Accelerometer.isSupported = true;
openfl_sensors_Accelerometer.defaultInterval = 34;
openfl_sensors_Accelerometer.initialized = false;
openfl_sensors_Accelerometer.currentX = 0.0;
openfl_sensors_Accelerometer.currentY = 1.0;
openfl_sensors_Accelerometer.currentZ = 0.0;
openfl_system_ApplicationDomain.currentDomain = new openfl_system_ApplicationDomain(null);
openfl_system_Capabilities.avHardwareDisable = true;
openfl_system_Capabilities.hasAccessibility = false;
openfl_system_Capabilities.hasAudio = true;
openfl_system_Capabilities.hasAudioEncoder = false;
openfl_system_Capabilities.hasEmbeddedVideo = false;
openfl_system_Capabilities.hasIME = false;
openfl_system_Capabilities.hasMP3 = false;
openfl_system_Capabilities.hasPrinting = true;
openfl_system_Capabilities.hasScreenBroadcast = false;
openfl_system_Capabilities.hasScreenPlayback = false;
openfl_system_Capabilities.hasStreamingAudio = false;
openfl_system_Capabilities.hasStreamingVideo = false;
openfl_system_Capabilities.hasTLS = true;
openfl_system_Capabilities.hasVideoEncoder = true;
openfl_system_Capabilities.isDebugger = true;
openfl_system_Capabilities.isEmbeddedInAcrobat = false;
openfl_system_Capabilities.localFileReadDisable = true;
openfl_system_Capabilities.maxLevelIDC = 0;
openfl_system_Capabilities.playerType = "PlugIn";
openfl_system_Capabilities.screenColor = "color";
openfl_system_Capabilities.serverString = "";
openfl_system_Capabilities.supports32BitProcesses = false;
openfl_system_Capabilities.supports64BitProcesses = false;
openfl_system_Capabilities.touchscreenType = 0;
openfl_system_Capabilities.__standardDensities = [120,160,240,320,480,640,800,960];
openfl_system_Security.LOCAL_TRUSTED = "localTrusted";
openfl_system_Security.LOCAL_WITH_FILE = "localWithFile";
openfl_system_Security.LOCAL_WITH_NETWORK = "localWithNetwork";
openfl_system_Security.REMOTE = "remote";
openfl_system_SecurityDomain.currentDomain = new openfl_system_SecurityDomain();
openfl_system_System.useCodePage = false;
openfl_system__$TouchscreenType_TouchscreenType_$Impl_$.FINGER = 0;
openfl_system__$TouchscreenType_TouchscreenType_$Impl_$.NONE = 1;
openfl_system__$TouchscreenType_TouchscreenType_$Impl_$.STYLUS = 2;
openfl_text__$AntiAliasType_AntiAliasType_$Impl_$.ADVANCED = 0;
openfl_text__$AntiAliasType_AntiAliasType_$Impl_$.NORMAL = 1;
openfl_text_Font.__fontByName = new haxe_ds_StringMap();
openfl_text_Font.__registeredFonts = [];
openfl_text__$FontStyle_FontStyle_$Impl_$.BOLD = 0;
openfl_text__$FontStyle_FontStyle_$Impl_$.BOLD_ITALIC = 1;
openfl_text__$FontStyle_FontStyle_$Impl_$.ITALIC = 2;
openfl_text__$FontStyle_FontStyle_$Impl_$.REGULAR = 3;
openfl_text__$FontType_FontType_$Impl_$.DEVICE = 0;
openfl_text__$FontType_FontType_$Impl_$.EMBEDDED = 1;
openfl_text__$FontType_FontType_$Impl_$.EMBEDDED_CFF = 2;
openfl_text__$GridFitType_GridFitType_$Impl_$.NONE = 0;
openfl_text__$GridFitType_GridFitType_$Impl_$.PIXEL = 1;
openfl_text__$GridFitType_GridFitType_$Impl_$.SUBPIXEL = 2;
openfl_text_TextField.__missingFontWarning = new haxe_ds_StringMap();
openfl_text_TextField.__scrollStep = 24;
openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$.CENTER = 0;
openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$.LEFT = 1;
openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$.NONE = 2;
openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$.RIGHT = 3;
openfl_text__$TextFieldType_TextFieldType_$Impl_$.DYNAMIC = 0;
openfl_text__$TextFieldType_TextFieldType_$Impl_$.INPUT = 1;
openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.CENTER = 0;
openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.END = 1;
openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.JUSTIFY = 2;
openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.LEFT = 3;
openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.RIGHT = 4;
openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.START = 5;
openfl_ui_GameInput.isSupported = true;
openfl_ui_GameInput.numDevices = 0;
openfl_ui_GameInput.__deviceList = [];
openfl_ui_GameInput.__devices = new haxe_ds_ObjectMap();
openfl_ui_GameInput.__instances = [];
openfl_ui_GameInputDevice.MAX_BUFFER_SIZE = 32000;
openfl_ui_Keyboard.NUMBER_0 = 48;
openfl_ui_Keyboard.NUMBER_1 = 49;
openfl_ui_Keyboard.NUMBER_2 = 50;
openfl_ui_Keyboard.NUMBER_3 = 51;
openfl_ui_Keyboard.NUMBER_4 = 52;
openfl_ui_Keyboard.NUMBER_5 = 53;
openfl_ui_Keyboard.NUMBER_6 = 54;
openfl_ui_Keyboard.NUMBER_7 = 55;
openfl_ui_Keyboard.NUMBER_8 = 56;
openfl_ui_Keyboard.NUMBER_9 = 57;
openfl_ui_Keyboard.A = 65;
openfl_ui_Keyboard.B = 66;
openfl_ui_Keyboard.C = 67;
openfl_ui_Keyboard.D = 68;
openfl_ui_Keyboard.E = 69;
openfl_ui_Keyboard.F = 70;
openfl_ui_Keyboard.G = 71;
openfl_ui_Keyboard.H = 72;
openfl_ui_Keyboard.I = 73;
openfl_ui_Keyboard.J = 74;
openfl_ui_Keyboard.K = 75;
openfl_ui_Keyboard.L = 76;
openfl_ui_Keyboard.M = 77;
openfl_ui_Keyboard.N = 78;
openfl_ui_Keyboard.O = 79;
openfl_ui_Keyboard.P = 80;
openfl_ui_Keyboard.Q = 81;
openfl_ui_Keyboard.R = 82;
openfl_ui_Keyboard.S = 83;
openfl_ui_Keyboard.T = 84;
openfl_ui_Keyboard.U = 85;
openfl_ui_Keyboard.V = 86;
openfl_ui_Keyboard.W = 87;
openfl_ui_Keyboard.X = 88;
openfl_ui_Keyboard.Y = 89;
openfl_ui_Keyboard.Z = 90;
openfl_ui_Keyboard.NUMPAD_0 = 96;
openfl_ui_Keyboard.NUMPAD_1 = 97;
openfl_ui_Keyboard.NUMPAD_2 = 98;
openfl_ui_Keyboard.NUMPAD_3 = 99;
openfl_ui_Keyboard.NUMPAD_4 = 100;
openfl_ui_Keyboard.NUMPAD_5 = 101;
openfl_ui_Keyboard.NUMPAD_6 = 102;
openfl_ui_Keyboard.NUMPAD_7 = 103;
openfl_ui_Keyboard.NUMPAD_8 = 104;
openfl_ui_Keyboard.NUMPAD_9 = 105;
openfl_ui_Keyboard.NUMPAD_MULTIPLY = 106;
openfl_ui_Keyboard.NUMPAD_ADD = 107;
openfl_ui_Keyboard.NUMPAD_ENTER = 108;
openfl_ui_Keyboard.NUMPAD_SUBTRACT = 109;
openfl_ui_Keyboard.NUMPAD_DECIMAL = 110;
openfl_ui_Keyboard.NUMPAD_DIVIDE = 111;
openfl_ui_Keyboard.F1 = 112;
openfl_ui_Keyboard.F2 = 113;
openfl_ui_Keyboard.F3 = 114;
openfl_ui_Keyboard.F4 = 115;
openfl_ui_Keyboard.F5 = 116;
openfl_ui_Keyboard.F6 = 117;
openfl_ui_Keyboard.F7 = 118;
openfl_ui_Keyboard.F8 = 119;
openfl_ui_Keyboard.F9 = 120;
openfl_ui_Keyboard.F10 = 121;
openfl_ui_Keyboard.F11 = 122;
openfl_ui_Keyboard.F12 = 123;
openfl_ui_Keyboard.F13 = 124;
openfl_ui_Keyboard.F14 = 125;
openfl_ui_Keyboard.F15 = 126;
openfl_ui_Keyboard.BACKSPACE = 8;
openfl_ui_Keyboard.TAB = 9;
openfl_ui_Keyboard.ALTERNATE = 18;
openfl_ui_Keyboard.ENTER = 13;
openfl_ui_Keyboard.COMMAND = 15;
openfl_ui_Keyboard.SHIFT = 16;
openfl_ui_Keyboard.CONTROL = 17;
openfl_ui_Keyboard.BREAK = 19;
openfl_ui_Keyboard.CAPS_LOCK = 20;
openfl_ui_Keyboard.NUMPAD = 21;
openfl_ui_Keyboard.ESCAPE = 27;
openfl_ui_Keyboard.SPACE = 32;
openfl_ui_Keyboard.PAGE_UP = 33;
openfl_ui_Keyboard.PAGE_DOWN = 34;
openfl_ui_Keyboard.END = 35;
openfl_ui_Keyboard.HOME = 36;
openfl_ui_Keyboard.LEFT = 37;
openfl_ui_Keyboard.RIGHT = 39;
openfl_ui_Keyboard.UP = 38;
openfl_ui_Keyboard.DOWN = 40;
openfl_ui_Keyboard.INSERT = 45;
openfl_ui_Keyboard.DELETE = 46;
openfl_ui_Keyboard.NUMLOCK = 144;
openfl_ui_Keyboard.SEMICOLON = 186;
openfl_ui_Keyboard.EQUAL = 187;
openfl_ui_Keyboard.COMMA = 188;
openfl_ui_Keyboard.MINUS = 189;
openfl_ui_Keyboard.PERIOD = 190;
openfl_ui_Keyboard.SLASH = 191;
openfl_ui_Keyboard.BACKQUOTE = 192;
openfl_ui_Keyboard.LEFTBRACKET = 219;
openfl_ui_Keyboard.BACKSLASH = 220;
openfl_ui_Keyboard.RIGHTBRACKET = 221;
openfl_ui_Keyboard.QUOTE = 222;
openfl_ui_Mouse.supportsCursor = true;
openfl_ui_Mouse.supportsNativeCursor = true;
openfl_ui_Mouse.__cursor = "auto";
openfl_ui__$MultitouchInputMode_MultitouchInputMode_$Impl_$.GESTURE = 0;
openfl_ui__$MultitouchInputMode_MultitouchInputMode_$Impl_$.NONE = 1;
openfl_ui__$MultitouchInputMode_MultitouchInputMode_$Impl_$.TOUCH_POINT = 2;
openfl_utils_AGALMiniAssembler.OPMAP = new haxe_ds_StringMap();
openfl_utils_AGALMiniAssembler.REGMAP = new haxe_ds_StringMap();
openfl_utils_AGALMiniAssembler.SAMPLEMAP = new haxe_ds_StringMap();
openfl_utils_AGALMiniAssembler.MAX_NESTING = 4;
openfl_utils_AGALMiniAssembler.MAX_OPCODES = 4096;
openfl_utils_AGALMiniAssembler.FRAGMENT = "fragment";
openfl_utils_AGALMiniAssembler.VERTEX = "vertex";
openfl_utils_AGALMiniAssembler.SAMPLER_TYPE_SHIFT = 8;
openfl_utils_AGALMiniAssembler.SAMPLER_DIM_SHIFT = 12;
openfl_utils_AGALMiniAssembler.SAMPLER_SPECIAL_SHIFT = 16;
openfl_utils_AGALMiniAssembler.SAMPLER_REPEAT_SHIFT = 20;
openfl_utils_AGALMiniAssembler.SAMPLER_MIPMAP_SHIFT = 24;
openfl_utils_AGALMiniAssembler.SAMPLER_FILTER_SHIFT = 28;
openfl_utils_AGALMiniAssembler.REG_WRITE = 1;
openfl_utils_AGALMiniAssembler.REG_READ = 2;
openfl_utils_AGALMiniAssembler.REG_FRAG = 32;
openfl_utils_AGALMiniAssembler.REG_VERT = 64;
openfl_utils_AGALMiniAssembler.OP_SCALAR = 1;
openfl_utils_AGALMiniAssembler.OP_SPECIAL_TEX = 8;
openfl_utils_AGALMiniAssembler.OP_SPECIAL_MATRIX = 16;
openfl_utils_AGALMiniAssembler.OP_FRAG_ONLY = 32;
openfl_utils_AGALMiniAssembler.OP_VERT_ONLY = 64;
openfl_utils_AGALMiniAssembler.OP_NO_DEST = 128;
openfl_utils_AGALMiniAssembler.OP_VERSION2 = 256;
openfl_utils_AGALMiniAssembler.OP_INCNEST = 512;
openfl_utils_AGALMiniAssembler.OP_DECNEST = 1024;
openfl_utils_AGALMiniAssembler.MOV = "mov";
openfl_utils_AGALMiniAssembler.ADD = "add";
openfl_utils_AGALMiniAssembler.SUB = "sub";
openfl_utils_AGALMiniAssembler.MUL = "mul";
openfl_utils_AGALMiniAssembler.DIV = "div";
openfl_utils_AGALMiniAssembler.RCP = "rcp";
openfl_utils_AGALMiniAssembler.MIN = "min";
openfl_utils_AGALMiniAssembler.MAX = "max";
openfl_utils_AGALMiniAssembler.FRC = "frc";
openfl_utils_AGALMiniAssembler.SQT = "sqt";
openfl_utils_AGALMiniAssembler.RSQ = "rsq";
openfl_utils_AGALMiniAssembler.POW = "pow";
openfl_utils_AGALMiniAssembler.LOG = "log";
openfl_utils_AGALMiniAssembler.EXP = "exp";
openfl_utils_AGALMiniAssembler.NRM = "nrm";
openfl_utils_AGALMiniAssembler.SIN = "sin";
openfl_utils_AGALMiniAssembler.COS = "cos";
openfl_utils_AGALMiniAssembler.CRS = "crs";
openfl_utils_AGALMiniAssembler.DP3 = "dp3";
openfl_utils_AGALMiniAssembler.DP4 = "dp4";
openfl_utils_AGALMiniAssembler.ABS = "abs";
openfl_utils_AGALMiniAssembler.NEG = "neg";
openfl_utils_AGALMiniAssembler.SAT = "sat";
openfl_utils_AGALMiniAssembler.M33 = "m33";
openfl_utils_AGALMiniAssembler.M44 = "m44";
openfl_utils_AGALMiniAssembler.M34 = "m34";
openfl_utils_AGALMiniAssembler.DDX = "ddx";
openfl_utils_AGALMiniAssembler.DDY = "ddy";
openfl_utils_AGALMiniAssembler.IFE = "ife";
openfl_utils_AGALMiniAssembler.INE = "ine";
openfl_utils_AGALMiniAssembler.IFG = "ifg";
openfl_utils_AGALMiniAssembler.IFL = "ifl";
openfl_utils_AGALMiniAssembler.IEG = "ieg";
openfl_utils_AGALMiniAssembler.IEL = "iel";
openfl_utils_AGALMiniAssembler.ELS = "els";
openfl_utils_AGALMiniAssembler.EIF = "eif";
openfl_utils_AGALMiniAssembler.TED = "ted";
openfl_utils_AGALMiniAssembler.KIL = "kil";
openfl_utils_AGALMiniAssembler.TEX = "tex";
openfl_utils_AGALMiniAssembler.SGE = "sge";
openfl_utils_AGALMiniAssembler.SLT = "slt";
openfl_utils_AGALMiniAssembler.SGN = "sgn";
openfl_utils_AGALMiniAssembler.SEQ = "seq";
openfl_utils_AGALMiniAssembler.SNE = "sne";
openfl_utils_AGALMiniAssembler.VA = "va";
openfl_utils_AGALMiniAssembler.VC = "vc";
openfl_utils_AGALMiniAssembler.VT = "vt";
openfl_utils_AGALMiniAssembler.VO = "vo";
openfl_utils_AGALMiniAssembler.VI = "vi";
openfl_utils_AGALMiniAssembler.FC = "fc";
openfl_utils_AGALMiniAssembler.FT = "ft";
openfl_utils_AGALMiniAssembler.FS = "fs";
openfl_utils_AGALMiniAssembler.FO = "fo";
openfl_utils_AGALMiniAssembler.FD = "fd";
openfl_utils_AGALMiniAssembler.IID = "iid";
openfl_utils_AGALMiniAssembler.D2 = "2d";
openfl_utils_AGALMiniAssembler.D3 = "3d";
openfl_utils_AGALMiniAssembler.CUBE = "cube";
openfl_utils_AGALMiniAssembler.MIPNEAREST = "mipnearest";
openfl_utils_AGALMiniAssembler.MIPLINEAR = "miplinear";
openfl_utils_AGALMiniAssembler.MIPNONE = "mipnone";
openfl_utils_AGALMiniAssembler.NOMIP = "nomip";
openfl_utils_AGALMiniAssembler.NEAREST = "nearest";
openfl_utils_AGALMiniAssembler.LINEAR = "linear";
openfl_utils_AGALMiniAssembler.ANISOTROPIC2X = "anisotropic2x";
openfl_utils_AGALMiniAssembler.ANISOTROPIC4X = "anisotropic4x";
openfl_utils_AGALMiniAssembler.ANISOTROPIC8X = "anisotropic8x";
openfl_utils_AGALMiniAssembler.ANISOTROPIC16X = "anisotropic16x";
openfl_utils_AGALMiniAssembler.CENTROID = "centroid";
openfl_utils_AGALMiniAssembler.SINGLE = "single";
openfl_utils_AGALMiniAssembler.IGNORESAMPLER = "ignoresampler";
openfl_utils_AGALMiniAssembler.REPEAT = "repeat";
openfl_utils_AGALMiniAssembler.WRAP = "wrap";
openfl_utils_AGALMiniAssembler.CLAMP = "clamp";
openfl_utils_AGALMiniAssembler.REPEAT_U_CLAMP_V = "repeat_u_clamp_v";
openfl_utils_AGALMiniAssembler.CLAMP_U_REPEAT_V = "clamp_u_repeat_v";
openfl_utils_AGALMiniAssembler.RGBA = "rgba";
openfl_utils_AGALMiniAssembler.COMPRESSED = "compressed";
openfl_utils_AGALMiniAssembler.COMPRESSEDALPHA = "compressedalpha";
openfl_utils_AGALMiniAssembler.DXT1 = "dxt1";
openfl_utils_AGALMiniAssembler.DXT5 = "dxt5";
openfl_utils_AGALMiniAssembler.VIDEO = "video";
openfl_utils_AGALMiniAssembler.initialized = false;
openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$.DEFLATE = 0;
openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$.LZMA = 1;
openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$.ZLIB = 2;
openfl_utils__$Endian_Endian_$Impl_$.BIG_ENDIAN = 0;
openfl_utils__$Endian_Endian_$Impl_$.LITTLE_ENDIAN = 1;
starling_events_EventDispatcher.sBubbleChains = [];
starling_animation_DelayedCall.sPool = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
starling_animation_Transitions.LINEAR = "linear";
starling_animation_Transitions.EASE_IN = "easeIn";
starling_animation_Transitions.EASE_OUT = "easeOut";
starling_animation_Transitions.EASE_IN_OUT = "easeInOut";
starling_animation_Transitions.EASE_OUT_IN = "easeOutIn";
starling_animation_Transitions.EASE_IN_BACK = "easeInBack";
starling_animation_Transitions.EASE_OUT_BACK = "easeOutBack";
starling_animation_Transitions.EASE_IN_OUT_BACK = "easeInOutBack";
starling_animation_Transitions.EASE_OUT_IN_BACK = "easeOutInBack";
starling_animation_Transitions.EASE_IN_ELASTIC = "easeInElastic";
starling_animation_Transitions.EASE_OUT_ELASTIC = "easeOutElastic";
starling_animation_Transitions.EASE_IN_OUT_ELASTIC = "easeInOutElastic";
starling_animation_Transitions.EASE_OUT_IN_ELASTIC = "easeOutInElastic";
starling_animation_Transitions.EASE_IN_BOUNCE = "easeInBounce";
starling_animation_Transitions.EASE_OUT_BOUNCE = "easeOutBounce";
starling_animation_Transitions.EASE_IN_OUT_BOUNCE = "easeInOutBounce";
starling_animation_Transitions.EASE_OUT_IN_BOUNCE = "easeOutInBounce";
starling_animation_Tween.HINT_MARKER = "#";
starling_animation_Tween.sTweenPool = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
starling_core_RenderSupport.RENDER_TARGET_NAME = "Starling.renderTarget";
starling_core_RenderSupport.sBatcherProjectionMatrix = new Float32Array(16);
starling_core_RenderSupport.sPoint = new openfl_geom_Point();
starling_core_RenderSupport.sPoint3D = new openfl_geom_Vector3D();
starling_core_RenderSupport.sClipRect = new openfl_geom_Rectangle();
starling_core_RenderSupport.sBufferRect = new openfl_geom_Rectangle();
starling_core_RenderSupport.sScissorRect = new openfl_geom_Rectangle();
starling_core_RenderSupport.sAssembler = new openfl_utils_AGALMiniAssembler();
starling_core_RenderSupport.sMatrix3D = new openfl_geom_Matrix3D();
starling_core_RenderSupport.sMatrixData = (function($this) {
	var $r;
	var a = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.];
	var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	{
		var _g = 0;
		var _g1 = a.length;
		while(_g < _g1) {
			var i = _g++;
			vector.data.set(i,a[i]);
		}
	}
	$r = vector;
	return $r;
}(this));
starling_core_Starling.VERSION = "1.8";
starling_core_Starling.PROGRAM_DATA_NAME = "Starling.programs";
starling_core_Starling.sHandleLostContext = true;
starling_core_Starling.sContextData = new haxe_ds_ObjectMap();
starling_core_Starling.sAll = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
starling_display_DisplayObject.sAncestors = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
starling_display_DisplayObject.sHelperPoint = new openfl_geom_Point();
starling_display_DisplayObject.sHelperPoint3D = new openfl_geom_Vector3D();
starling_display_DisplayObject.sHelperPointAlt3D = new openfl_geom_Vector3D();
starling_display_DisplayObject.sHelperRect = new openfl_geom_Rectangle();
starling_display_DisplayObject.sHelperMatrix = new openfl_geom_Matrix();
starling_display_DisplayObject.sHelperMatrixAlt = new openfl_geom_Matrix();
starling_display_DisplayObject.sHelperMatrix3D = new openfl_geom_Matrix3D();
starling_display_DisplayObject.sHelperMatrixAlt3D = new openfl_geom_Matrix3D();
starling_display_DisplayObjectContainer.sHelperMatrix = new openfl_geom_Matrix();
starling_display_DisplayObjectContainer.sHelperPoint = new openfl_geom_Point();
starling_display_DisplayObjectContainer.sBroadcastListeners = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
starling_display_DisplayObjectContainer.sSortBuffer = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
starling_display_Sprite.sHelperMatrix = new openfl_geom_Matrix();
starling_display_Sprite.sHelperPoint = new openfl_geom_Point();
starling_display_Sprite.sHelperRect = new openfl_geom_Rectangle();
starling_core_StatsDisplay.UPDATE_INTERVAL = 0.5;
starling_display_BlendMode.sBlendFactors = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	{
		var value = [2,9];
		if(__map_reserved["none"] != null) {
			_g.setReserved("none",value);
		} else {
			_g.h["none"] = value;
		}
	}
	{
		var value1 = [7,5];
		if(__map_reserved["normal"] != null) {
			_g.setReserved("normal",value1);
		} else {
			_g.h["normal"] = value1;
		}
	}
	{
		var value2 = [7,0];
		if(__map_reserved["add"] != null) {
			_g.setReserved("add",value2);
		} else {
			_g.h["add"] = value2;
		}
	}
	{
		var value3 = [1,5];
		if(__map_reserved["multiply"] != null) {
			_g.setReserved("multiply",value3);
		} else {
			_g.h["multiply"] = value3;
		}
	}
	{
		var value4 = [7,2];
		if(__map_reserved["screen"] != null) {
			_g.setReserved("screen",value4);
		} else {
			_g.h["screen"] = value4;
		}
	}
	{
		var value5 = [9,5];
		if(__map_reserved["erase"] != null) {
			_g.setReserved("erase",value5);
		} else {
			_g.h["erase"] = value5;
		}
	}
	{
		var value6 = [9,7];
		if(__map_reserved["mask"] != null) {
			_g.setReserved("mask",value6);
		} else {
			_g.h["mask"] = value6;
		}
	}
	{
		var value7 = [3,0];
		if(__map_reserved["below"] != null) {
			_g.setReserved("below",value7);
		} else {
			_g.h["below"] = value7;
		}
	}
	var _g1 = new haxe_ds_StringMap();
	{
		var value8 = [2,9];
		if(__map_reserved["none"] != null) {
			_g1.setReserved("none",value8);
		} else {
			_g1.h["none"] = value8;
		}
	}
	{
		var value9 = [2,5];
		if(__map_reserved["normal"] != null) {
			_g1.setReserved("normal",value9);
		} else {
			_g1.h["normal"] = value9;
		}
	}
	{
		var value10 = [2,2];
		if(__map_reserved["add"] != null) {
			_g1.setReserved("add",value10);
		} else {
			_g1.h["add"] = value10;
		}
	}
	{
		var value11 = [1,5];
		if(__map_reserved["multiply"] != null) {
			_g1.setReserved("multiply",value11);
		} else {
			_g1.h["multiply"] = value11;
		}
	}
	{
		var value12 = [2,6];
		if(__map_reserved["screen"] != null) {
			_g1.setReserved("screen",value12);
		} else {
			_g1.h["screen"] = value12;
		}
	}
	{
		var value13 = [9,5];
		if(__map_reserved["erase"] != null) {
			_g1.setReserved("erase",value13);
		} else {
			_g1.h["erase"] = value13;
		}
	}
	{
		var value14 = [9,7];
		if(__map_reserved["mask"] != null) {
			_g1.setReserved("mask",value14);
		} else {
			_g1.h["mask"] = value14;
		}
	}
	{
		var value15 = [3,0];
		if(__map_reserved["below"] != null) {
			_g1.setReserved("below",value15);
		} else {
			_g1.h["below"] = value15;
		}
	}
	$r = [_g,_g1];
	return $r;
}(this));
starling_display_BlendMode.AUTO = "auto";
starling_display_BlendMode.NONE = "none";
starling_display_BlendMode.NORMAL = "normal";
starling_display_BlendMode.ADD = "add";
starling_display_BlendMode.MULTIPLY = "multiply";
starling_display_BlendMode.SCREEN = "screen";
starling_display_BlendMode.ERASE = "erase";
starling_display_BlendMode.MASK = "mask";
starling_display_BlendMode.BELOW = "below";
starling_display_Button.MAX_DRAG_DIST = 50;
starling_display_ButtonState.UP = "up";
starling_display_ButtonState.DOWN = "down";
starling_display_ButtonState.OVER = "over";
starling_display_ButtonState.DISABLED = "disabled";
starling_display_Canvas.PROGRAM_NAME = "Shape";
starling_display_Canvas.sHelperMatrix = new openfl_geom_Matrix();
starling_display_Canvas.sRenderAlpha = (function($this) {
	var $r;
	var a = [1.0,1.0,1.0,1.0];
	var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	{
		var _g = 0;
		var _g1 = a.length;
		while(_g < _g1) {
			var i = _g++;
			vector.data.set(i,a[i]);
		}
	}
	$r = vector;
	return $r;
}(this));
starling_display_Quad.sHelperPoint = new openfl_geom_Point();
starling_display_Quad.sHelperPoint3D = new openfl_geom_Vector3D();
starling_display_Quad.sHelperMatrix = new openfl_geom_Matrix();
starling_display_Quad.sHelperMatrix3D = new openfl_geom_Matrix3D();
starling_utils_VertexData.ELEMENTS_PER_VERTEX = 8;
starling_utils_VertexData.POSITION_OFFSET = 0;
starling_utils_VertexData.COLOR_OFFSET = 2;
starling_utils_VertexData.TEXCOORD_OFFSET = 6;
starling_utils_VertexData.sHelperPoint = new openfl_geom_Point();
starling_utils_VertexData.sHelperPoint3D = new openfl_geom_Vector3D();
starling_display_Image.sHelperVertexData = new starling_utils_VertexData(4);
starling_display_Image.sHelperPoint = new openfl_geom_Point();
starling_display_QuadBatch.MAX_NUM_QUADS = 16383;
starling_display_QuadBatch.QUAD_PROGRAM_NAME = "QB_q";
starling_display_QuadBatch.sHelperMatrix = new openfl_geom_Matrix();
starling_display_QuadBatch.sRenderAlpha = (function($this) {
	var $r;
	var a = [1.0,1.0,1.0,1.0];
	var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	{
		var _g = 0;
		var _g1 = a.length;
		while(_g < _g1) {
			var i = _g++;
			vector.data.set(i,a[i]);
		}
	}
	$r = vector;
	return $r;
}(this));
starling_display_QuadBatch.sProgramNameCache = new haxe_ds_IntMap();
starling_display_Sprite3D.E = 0.00001;
starling_display_Sprite3D.sHelperPoint = new openfl_geom_Vector3D();
starling_display_Sprite3D.sHelperPointAlt = new openfl_geom_Vector3D();
starling_display_Sprite3D.sHelperMatrix = new openfl_geom_Matrix3D();
starling_display_Stage.sHelperMatrix = new openfl_geom_Matrix3D();
starling_events_Event.ADDED = "added";
starling_events_Event.ADDED_TO_STAGE = "addedToStage";
starling_events_Event.ENTER_FRAME = "enterFrame";
starling_events_Event.REMOVED = "removed";
starling_events_Event.REMOVED_FROM_STAGE = "removedFromStage";
starling_events_Event.TRIGGERED = "triggered";
starling_events_Event.FLATTEN = "flatten";
starling_events_Event.RESIZE = "resize";
starling_events_Event.COMPLETE = "complete";
starling_events_Event.CONTEXT3D_CREATE = "context3DCreate";
starling_events_Event.RENDER = "render";
starling_events_Event.ROOT_CREATED = "rootCreated";
starling_events_Event.REMOVE_FROM_JUGGLER = "removeFromJuggler";
starling_events_Event.TEXTURES_RESTORED = "texturesRestored";
starling_events_Event.IO_ERROR = "ioError";
starling_events_Event.SECURITY_ERROR = "securityError";
starling_events_Event.PARSE_ERROR = "parseError";
starling_events_Event.FATAL_ERROR = "fatalError";
starling_events_Event.CHANGE = "change";
starling_events_Event.CANCEL = "cancel";
starling_events_Event.SCROLL = "scroll";
starling_events_Event.OPEN = "open";
starling_events_Event.CLOSE = "close";
starling_events_Event.SELECT = "select";
starling_events_Event.READY = "ready";
starling_events_Event.sEventPool = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
starling_events_EnterFrameEvent.ENTER_FRAME = "enterFrame";
starling_events_KeyboardEvent.KEY_UP = "keyUp";
starling_events_KeyboardEvent.KEY_DOWN = "keyDown";
starling_events_ResizeEvent.RESIZE = "resize";
starling_events_Touch.sHelperPoint = new openfl_geom_Point();
starling_events_TouchEvent.TOUCH = "touch";
starling_events_TouchEvent.sTouches = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
starling_events_TouchPhase.HOVER = "hover";
starling_events_TouchPhase.BEGAN = "began";
starling_events_TouchPhase.MOVED = "moved";
starling_events_TouchPhase.STATIONARY = "stationary";
starling_events_TouchPhase.ENDED = "ended";
starling_events_TouchProcessor.sUpdatedTouches = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
starling_events_TouchProcessor.sHoveringTouchData = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
starling_events_TouchProcessor.sHelperPoint = new openfl_geom_Point();
starling_extensions_ParticleSystem.MAX_NUM_PARTICLES = 16383;
starling_extensions_ParticleSystem.sHelperMatrix = new openfl_geom_Matrix();
starling_extensions_ParticleSystem.sHelperPoint = new openfl_geom_Point();
starling_extensions_ParticleSystem.sRenderAlpha = (function($this) {
	var $r;
	var a = [1.0,1.0,1.0,1.0];
	var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	{
		var _g = 0;
		var _g1 = a.length;
		while(_g < _g1) {
			var i = _g++;
			vector.data.set(i,a[i]);
		}
	}
	$r = vector;
	return $r;
}(this));
starling_extensions_PDParticleSystem.EMITTER_TYPE_GRAVITY = 0;
starling_extensions_PDParticleSystem.EMITTER_TYPE_RADIAL = 1;
starling_extensions_TextureMask.PROGRAM_NAME = "starling.display.TextureMask";
starling_extensions_TextureMask.sHelperMatrix = new openfl_geom_Matrix();
starling_extensions_TextureMask.sThresholdVector = (function($this) {
	var $r;
	var a = [0.0,0.0,0.0,0.0];
	var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	{
		var _g = 0;
		var _g1 = a.length;
		while(_g < _g1) {
			var i = _g++;
			vector.data.set(i,a[i]);
		}
	}
	$r = vector;
	return $r;
}(this));
starling_extensions_TextureMask.sRenderAlpha = (function($this) {
	var $r;
	var a = [1.0,1.0,1.0,1.0];
	var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	{
		var _g = 0;
		var _g1 = a.length;
		while(_g < _g1) {
			var i = _g++;
			vector.data.set(i,a[i]);
		}
	}
	$r = vector;
	return $r;
}(this));
starling_filters_FragmentFilter.MIN_TEXTURE_SIZE = 64;
starling_filters_FragmentFilter.PMA = true;
starling_filters_FragmentFilter.STD_VERTEX_SHADER = "m44 op, va0, vc0 \n" + "mov v0, va1      \n";
starling_filters_FragmentFilter.STD_FRAGMENT_SHADER = "tex oc, v0, fs0 <2d, clamp, linear, mipnone>";
starling_filters_FragmentFilter.sHelperPoint = new openfl_geom_Point();
starling_filters_FragmentFilter.sStageBounds = new openfl_geom_Rectangle();
starling_filters_FragmentFilter.sTransformationMatrix = new openfl_geom_Matrix();
starling_filters_BlurFilter.NORMAL_PROGRAM_NAME = "BF_n";
starling_filters_BlurFilter.TINTED_PROGRAM_NAME = "BF_t";
starling_filters_BlurFilter.MAX_SIGMA = 2.0;
starling_filters_ColorMatrixFilter.PROGRAM_NAME = "CMF";
starling_filters_ColorMatrixFilter.MIN_COLOR = (function($this) {
	var $r;
	var a = [0,0,0,0.0001];
	var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	{
		var _g = 0;
		var _g1 = a.length;
		while(_g < _g1) {
			var i = _g++;
			vector.data.set(i,a[i]);
		}
	}
	$r = vector;
	return $r;
}(this));
starling_filters_ColorMatrixFilter.IDENTITY = (function($this) {
	var $r;
	var a = [1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0.];
	var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	{
		var _g = 0;
		var _g1 = a.length;
		while(_g < _g1) {
			var i = _g++;
			vector.data.set(i,a[i]);
		}
	}
	$r = vector;
	return $r;
}(this));
starling_filters_ColorMatrixFilter.LUMA_R = 0.299;
starling_filters_ColorMatrixFilter.LUMA_G = 0.587;
starling_filters_ColorMatrixFilter.LUMA_B = 0.114;
starling_filters_ColorMatrixFilter.sTmpMatrix1 = openfl__$Vector_Vector_$Impl_$.toFloatVector(null,20,true);
starling_filters_ColorMatrixFilter.sTmpMatrix2 = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
starling_filters_DisplacementMapFilter.sOneHalf = (function($this) {
	var $r;
	var a = [0.5,0.5,0.5,0.5];
	var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	{
		var _g = 0;
		var _g1 = a.length;
		while(_g < _g1) {
			var i = _g++;
			vector.data.set(i,a[i]);
		}
	}
	$r = vector;
	return $r;
}(this));
starling_filters_DisplacementMapFilter.sMapTexCoords = new Float32Array([0,0,1,0,0,1,1,1.0]);
starling_filters_DisplacementMapFilter.sMatrix = new openfl_geom_Matrix3D();
starling_filters_DisplacementMapFilter.sMatrixData = (function($this) {
	var $r;
	var a = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.];
	var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	{
		var _g = 0;
		var _g1 = a.length;
		while(_g < _g1) {
			var i = _g++;
			vector.data.set(i,a[i]);
		}
	}
	$r = vector;
	return $r;
}(this));
starling_filters_FragmentFilterMode.BELOW = "below";
starling_filters_FragmentFilterMode.REPLACE = "replace";
starling_filters_FragmentFilterMode.ABOVE = "above";
starling_geom_Polygon.sRestIndices = openfl__$Vector_Vector_$Impl_$.toIntVector(null);
starling_text_BitmapFont.NATIVE_SIZE = -1;
starling_text_BitmapFont.MINI = "mini";
starling_text_BitmapFont.CHAR_SPACE = 32;
starling_text_BitmapFont.CHAR_TAB = 9;
starling_text_BitmapFont.CHAR_NEWLINE = 10;
starling_text_BitmapFont.CHAR_CARRIAGE_RETURN = 13;
starling_text_BitmapFont.sLines = [];
starling_text_CharLocation.sInstancePool = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
starling_text_CharLocation.sVectorPool = [];
starling_text_CharLocation.sInstanceLoan = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
starling_text_CharLocation.sVectorLoan = [];
starling_text_MiniBitmapFont.BITMAP_WIDTH = 128;
starling_text_MiniBitmapFont.BITMAP_HEIGHT = 64;
starling_text_MiniBitmapFont.BITMAP_DATA = [2027613533,-881927360,202148514,-2028041698,-88080844,-8114179,2034947,-1092263897,352977282,-1337209332,-1181314416,-2136898414,1468709156,-2026903579,-1515657153,2101025806,-878458241,-79172757,-692798458,1038056207,1932393374,-1112681669,-1208165062,1741291262,2017257123,-899686453,984074419,-1245274149,-308890273,1055013549,1806563255,1754714962,1577746187,1124058786,-406208038,-1812738253,-1378383630,-551901968,866060213,1695195001,-1893385228,-1181619395,-1678445700,1053798161,2093370968,-65941613,560451479,854767518,-1684725974,-15925948,-113394816,-263722323,587139110,1081376765,962217926,783603325,-689440871,-192965380,289204733,-1659827041,-840985601,-807112923,2132197241,-1130192222,-37326968,770238970,144664537,707141570,-1360534225,871272893,512964596,808491899,481894297,-1198984815,-696603140,1710636358,-1390950977,1751040139,596966466,1363963692,465815609,315567311,-4301137,-208944745,179721458,-2073232326,-352742308,1519355876,-1002643514,-361540066,-980767403,-558739948,-448928871,603088884,-1617618069,-1087897969,-739691329,-1231913013,-1230390083,-882923117,693642210,-14453347,762928717,1802215333,-520117622,-73811966,970959395,557220237,2107226136,-785144314,-891682508,-29147277,898597576,991077243,2091615904,-960250408,633599866,-76187187,-2078966920,834870947,2118009742,1362731961,236280636,1274945142,1458729366,797960805,-1005597576,2103717340,-348561293,-1618444407,1624104606,1156993903,-1108796892,-2040468225,1204911924,1314218830,-987880904,-1470691337,-455101617,2073394964,1873329433,1754205930,1528429545,1631106062,-2031694831,-74470249,-772073531,-653590993,707451487,-842470509,1390653868,-1674411503,1027328684,-875283820,-632773593,765701986,-486688164,786403271,-470531459,713234896,-33110897,-823036565,-301474417,1447960461,1398434593,1914230187,-1896324011,-138592832,-435628089,-1074267235,-921718534,-1108936862,1315917060,-1485114815,-286413393,-189355343,1599499652,-781109705,877854499,-96707841,-646407219,-1456931877,-1039373106,-1829388839,-31462095,534904657,-1405705698,1358214576,1069250354,-424956739,-1666070713,-846356418,442343309,1024736866,-279848163,-1044100017,1513359261,-1852877700,1944476762,735490552,426990058,-60861185,1204305707,-963972031,-1896317928,-73919173,1724669255,-493851587,-805638506,-398564363,-598030357,-1457984001,-638216903,-945242784,-484551009,-639969688,-10512193,-2000027733,-87269364,642748805,-1817985657,-1975547398,572956615,-461728356,964924880,2081600351,-722508880,2056247513,1951368808,2133449703,-1511238668,512866577,913279200,1678129016,-806388305,-921014367,-1731970345,-628908371,1664169178,1943591935,750675303,154399903,-1723376406,852654952,-177659530,1971649621,-114771476,1222535348,-11014081,-1414305060,-1577556316,1175907705,1157322027,505963121,-1663426680,-633739640,-703163943,-1670840475,1948662907,-698902193,1147387734,256773959,1173572460,-1933009825,-84091220,-1214786676,-830166086,-473313037,1465302035,-1443781839,-1151701152,-501786882,-926134193,-20296584,-821148188,-807397964,773123355,1618635668,-1724791106,2075248691,1740805534,288646743,1837597401,603556968,-1112430424,673184603,-1206210243,-1397912892,-1102315980,-1409631494,1057233368,1118437241,-112840833,-1184502521,-981775682,-1933980022,735505357,-1302335871,-1934038485,-107132769,279183208,1586420003,1174008423,-231979707,1162167621,1162167621,1162167621,1162167621,1174119799,787274608];
starling_text_MiniBitmapFont.XML_DATA = Xml.parse("<font>\n      <info face=\"mini\" size=\"8\" bold=\"0\" italic=\"0\" smooth=\"0\"/>\n      <common lineHeight=\"8\" base=\"7\" scaleW=\"128\" scaleH=\"64\" pages=\"1\" packed=\"0\"/>\n      <chars count=\"191\">\n        <char id=\"195\" x=\"1\" y=\"1\" width=\"5\" height=\"9\" xoffset=\"0\" yoffset=\"-2\" xadvance=\"6\"/>\n        <char id=\"209\" x=\"7\" y=\"1\" width=\"5\" height=\"9\" xoffset=\"0\" yoffset=\"-2\" xadvance=\"6\"/>\n        <char id=\"213\" x=\"13\" y=\"1\" width=\"5\" height=\"9\" xoffset=\"0\" yoffset=\"-2\" xadvance=\"6\"/>\n        <char id=\"253\" x=\"19\" y=\"1\" width=\"4\" height=\"9\" xoffset=\"0\" yoffset=\"0\" xadvance=\"5\"/>\n        <char id=\"255\" x=\"24\" y=\"1\" width=\"4\" height=\"9\" xoffset=\"0\" yoffset=\"0\" xadvance=\"5\"/>\n        <char id=\"192\" x=\"29\" y=\"1\" width=\"5\" height=\"8\" xoffset=\"0\" yoffset=\"-1\" xadvance=\"6\"/>\n        <char id=\"193\" x=\"35\" y=\"1\" width=\"5\" height=\"8\" xoffset=\"0\" yoffset=\"-1\" xadvance=\"6\"/>\n        <char id=\"194\" x=\"41\" y=\"1\" width=\"5\" height=\"8\" xoffset=\"0\" yoffset=\"-1\" xadvance=\"6\"/>\n        <char id=\"197\" x=\"47\" y=\"1\" width=\"5\" height=\"8\" xoffset=\"0\" yoffset=\"-1\" xadvance=\"6\"/>\n        <char id=\"200\" x=\"53\" y=\"1\" width=\"5\" height=\"8\" xoffset=\"0\" yoffset=\"-1\" xadvance=\"6\"/>\n        <char id=\"201\" x=\"59\" y=\"1\" width=\"5\" height=\"8\" xoffset=\"0\" yoffset=\"-1\" xadvance=\"6\"/>\n        <char id=\"202\" x=\"65\" y=\"1\" width=\"5\" height=\"8\" xoffset=\"0\" yoffset=\"-1\" xadvance=\"6\"/>\n        <char id=\"210\" x=\"71\" y=\"1\" width=\"5\" height=\"8\" xoffset=\"0\" yoffset=\"-1\" xadvance=\"6\"/>\n        <char id=\"211\" x=\"77\" y=\"1\" width=\"5\" height=\"8\" xoffset=\"0\" yoffset=\"-1\" xadvance=\"6\"/>\n        <char id=\"212\" x=\"83\" y=\"1\" width=\"5\" height=\"8\" xoffset=\"0\" yoffset=\"-1\" xadvance=\"6\"/>\n        <char id=\"217\" x=\"89\" y=\"1\" width=\"5\" height=\"8\" xoffset=\"0\" yoffset=\"-1\" xadvance=\"6\"/>\n        <char id=\"218\" x=\"95\" y=\"1\" width=\"5\" height=\"8\" xoffset=\"0\" yoffset=\"-1\" xadvance=\"6\"/>\n        <char id=\"219\" x=\"101\" y=\"1\" width=\"5\" height=\"8\" xoffset=\"0\" yoffset=\"-1\" xadvance=\"6\"/>\n        <char id=\"221\" x=\"107\" y=\"1\" width=\"5\" height=\"8\" xoffset=\"0\" yoffset=\"-1\" xadvance=\"6\"/>\n        <char id=\"206\" x=\"113\" y=\"1\" width=\"3\" height=\"8\" xoffset=\"-1\" yoffset=\"-1\" xadvance=\"2\"/>\n        <char id=\"204\" x=\"117\" y=\"1\" width=\"2\" height=\"8\" xoffset=\"-1\" yoffset=\"-1\" xadvance=\"2\"/>\n        <char id=\"205\" x=\"120\" y=\"1\" width=\"2\" height=\"8\" xoffset=\"0\" yoffset=\"-1\" xadvance=\"2\"/>\n        <char id=\"36\"  x=\"1\" y=\"11\" width=\"5\" height=\"7\" xoffset=\"0\" yoffset=\"1\" xadvance=\"6\"/>\n        <char id=\"196\" x=\"7\" y=\"11\" width=\"5\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"6\"/>\n        <char id=\"199\" x=\"13\" y=\"11\" width=\"5\" height=\"7\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"203\" x=\"19\" y=\"11\" width=\"5\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"6\"/>\n        <char id=\"214\" x=\"25\" y=\"11\" width=\"5\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"6\"/>\n        <char id=\"220\" x=\"31\" y=\"11\" width=\"5\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"6\"/>\n        <char id=\"224\" x=\"37\" y=\"11\" width=\"4\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"5\"/>\n        <char id=\"225\" x=\"42\" y=\"11\" width=\"4\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"5\"/>\n        <char id=\"226\" x=\"47\" y=\"11\" width=\"4\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"5\"/>\n        <char id=\"227\" x=\"52\" y=\"11\" width=\"4\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"5\"/>\n        <char id=\"232\" x=\"57\" y=\"11\" width=\"4\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"5\"/>\n        <char id=\"233\" x=\"62\" y=\"11\" width=\"4\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"5\"/>\n        <char id=\"234\" x=\"67\" y=\"11\" width=\"4\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"5\"/>\n        <char id=\"235\" x=\"72\" y=\"11\" width=\"4\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"5\"/>\n        <char id=\"241\" x=\"77\" y=\"11\" width=\"4\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"5\"/>\n        <char id=\"242\" x=\"82\" y=\"11\" width=\"4\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"5\"/>\n        <char id=\"243\" x=\"87\" y=\"11\" width=\"4\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"5\"/>\n        <char id=\"244\" x=\"92\" y=\"11\" width=\"4\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"5\"/>\n        <char id=\"245\" x=\"97\" y=\"11\" width=\"4\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"5\"/>\n        <char id=\"249\" x=\"102\" y=\"11\" width=\"4\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"5\"/>\n        <char id=\"250\" x=\"107\" y=\"11\" width=\"4\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"5\"/>\n        <char id=\"251\" x=\"112\" y=\"11\" width=\"4\" height=\"7\" xoffset=\"0\" yoffset=\"0\" xadvance=\"5\"/>\n        <char id=\"254\" x=\"117\" y=\"11\" width=\"4\" height=\"7\" xoffset=\"0\" yoffset=\"2\" xadvance=\"5\"/>\n        <char id=\"123\" x=\"122\" y=\"11\" width=\"3\" height=\"7\" xoffset=\"0\" yoffset=\"1\" xadvance=\"4\"/>\n        <char id=\"125\" x=\"1\" y=\"19\" width=\"3\" height=\"7\" xoffset=\"0\" yoffset=\"1\" xadvance=\"4\"/>\n        <char id=\"167\" x=\"5\" y=\"19\" width=\"3\" height=\"7\" xoffset=\"0\" yoffset=\"1\" xadvance=\"4\"/>\n        <char id=\"207\" x=\"9\" y=\"19\" width=\"3\" height=\"7\" xoffset=\"-1\" yoffset=\"0\" xadvance=\"2\"/>\n        <char id=\"106\" x=\"13\" y=\"19\" width=\"2\" height=\"7\" xoffset=\"0\" yoffset=\"2\" xadvance=\"3\"/>\n        <char id=\"40\" x=\"16\" y=\"19\" width=\"2\" height=\"7\" xoffset=\"0\" yoffset=\"1\" xadvance=\"3\"/>\n        <char id=\"41\" x=\"19\" y=\"19\" width=\"2\" height=\"7\" xoffset=\"0\" yoffset=\"1\" xadvance=\"3\"/>\n        <char id=\"91\" x=\"22\" y=\"19\" width=\"2\" height=\"7\" xoffset=\"0\" yoffset=\"1\" xadvance=\"3\"/>\n        <char id=\"93\" x=\"25\" y=\"19\" width=\"2\" height=\"7\" xoffset=\"0\" yoffset=\"1\" xadvance=\"3\"/>\n        <char id=\"124\" x=\"28\" y=\"19\" width=\"1\" height=\"7\" xoffset=\"1\" yoffset=\"1\" xadvance=\"4\"/>\n        <char id=\"81\" x=\"30\" y=\"19\" width=\"5\" height=\"6\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"163\" x=\"36\" y=\"19\" width=\"5\" height=\"6\" xoffset=\"0\" yoffset=\"1\" xadvance=\"6\"/>\n        <char id=\"177\" x=\"42\" y=\"19\" width=\"5\" height=\"6\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"181\" x=\"48\" y=\"19\" width=\"5\" height=\"6\" xoffset=\"0\" yoffset=\"3\" xadvance=\"6\"/>\n        <char id=\"103\" x=\"54\" y=\"19\" width=\"4\" height=\"6\" xoffset=\"0\" yoffset=\"3\" xadvance=\"5\"/>\n        <char id=\"112\" x=\"59\" y=\"19\" width=\"4\" height=\"6\" xoffset=\"0\" yoffset=\"3\" xadvance=\"5\"/>\n        <char id=\"113\" x=\"64\" y=\"19\" width=\"4\" height=\"6\" xoffset=\"0\" yoffset=\"3\" xadvance=\"5\"/>\n        <char id=\"121\" x=\"69\" y=\"19\" width=\"4\" height=\"6\" xoffset=\"0\" yoffset=\"3\" xadvance=\"5\"/>\n        <char id=\"162\" x=\"74\" y=\"19\" width=\"4\" height=\"6\" xoffset=\"0\" yoffset=\"2\" xadvance=\"5\"/>\n        <char id=\"228\" x=\"79\" y=\"19\" width=\"4\" height=\"6\" xoffset=\"0\" yoffset=\"1\" xadvance=\"5\"/>\n        <char id=\"229\" x=\"84\" y=\"19\" width=\"4\" height=\"6\" xoffset=\"0\" yoffset=\"1\" xadvance=\"5\"/>\n        <char id=\"231\" x=\"89\" y=\"19\" width=\"4\" height=\"6\" xoffset=\"0\" yoffset=\"3\" xadvance=\"5\"/>\n        <char id=\"240\" x=\"94\" y=\"19\" width=\"4\" height=\"6\" xoffset=\"0\" yoffset=\"1\" xadvance=\"5\"/>\n        <char id=\"246\" x=\"99\" y=\"19\" width=\"4\" height=\"6\" xoffset=\"0\" yoffset=\"1\" xadvance=\"5\"/>\n        <char id=\"252\" x=\"104\" y=\"19\" width=\"4\" height=\"6\" xoffset=\"0\" yoffset=\"1\" xadvance=\"5\"/>\n        <char id=\"238\" x=\"109\" y=\"19\" width=\"3\" height=\"6\" xoffset=\"-1\" yoffset=\"1\" xadvance=\"2\"/>\n        <char id=\"59\" x=\"113\" y=\"19\" width=\"2\" height=\"6\" xoffset=\"0\" yoffset=\"3\" xadvance=\"4\"/>\n        <char id=\"236\" x=\"116\" y=\"19\" width=\"2\" height=\"6\" xoffset=\"-1\" yoffset=\"1\" xadvance=\"2\"/>\n        <char id=\"237\" x=\"119\" y=\"19\" width=\"2\" height=\"6\" xoffset=\"0\" yoffset=\"1\" xadvance=\"2\"/>\n        <char id=\"198\" x=\"1\" y=\"27\" width=\"9\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"10\"/>\n        <char id=\"190\" x=\"11\" y=\"27\" width=\"8\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"9\"/>\n        <char id=\"87\" x=\"20\" y=\"27\" width=\"7\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"8\"/>\n        <char id=\"188\" x=\"28\" y=\"27\" width=\"7\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"8\"/>\n        <char id=\"189\" x=\"36\" y=\"27\" width=\"7\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"8\"/>\n        <char id=\"38\" x=\"44\" y=\"27\" width=\"6\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"7\"/>\n        <char id=\"164\" x=\"51\" y=\"27\" width=\"6\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"7\"/>\n        <char id=\"208\" x=\"58\" y=\"27\" width=\"6\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"7\"/>\n        <char id=\"8364\" x=\"65\" y=\"27\" width=\"6\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"7\"/>\n        <char id=\"65\" x=\"72\" y=\"27\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"66\" x=\"78\" y=\"27\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"67\" x=\"84\" y=\"27\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"68\" x=\"90\" y=\"27\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"69\" x=\"96\" y=\"27\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"70\" x=\"102\" y=\"27\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"71\" x=\"108\" y=\"27\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"72\" x=\"114\" y=\"27\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"75\" x=\"120\" y=\"27\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"77\" x=\"1\" y=\"33\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"78\" x=\"7\" y=\"33\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"79\" x=\"13\" y=\"33\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"80\" x=\"19\" y=\"33\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"82\" x=\"25\" y=\"33\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"83\" x=\"31\" y=\"33\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"84\" x=\"37\" y=\"33\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"85\" x=\"43\" y=\"33\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"86\" x=\"49\" y=\"33\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"88\" x=\"55\" y=\"33\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"89\" x=\"61\" y=\"33\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"90\" x=\"67\" y=\"33\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"50\" x=\"73\" y=\"33\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"51\" x=\"79\" y=\"33\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"52\" x=\"85\" y=\"33\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"53\" x=\"91\" y=\"33\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"54\" x=\"97\" y=\"33\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"56\" x=\"103\" y=\"33\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"57\" x=\"109\" y=\"33\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"48\" x=\"115\" y=\"33\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"47\" x=\"121\" y=\"33\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"64\" x=\"1\" y=\"39\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"92\" x=\"7\" y=\"39\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"37\" x=\"13\" y=\"39\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"43\" x=\"19\" y=\"39\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"35\" x=\"25\" y=\"39\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"42\" x=\"31\" y=\"39\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"165\" x=\"37\" y=\"39\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"169\" x=\"43\" y=\"39\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"174\" x=\"49\" y=\"39\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"182\" x=\"55\" y=\"39\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"216\" x=\"61\" y=\"39\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"247\" x=\"67\" y=\"39\" width=\"5\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"6\"/>\n        <char id=\"74\" x=\"73\" y=\"39\" width=\"4\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"5\"/>\n        <char id=\"76\" x=\"78\" y=\"39\" width=\"4\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"5\"/>\n        <char id=\"98\" x=\"83\" y=\"39\" width=\"4\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"5\"/>\n        <char id=\"100\" x=\"88\" y=\"39\" width=\"4\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"5\"/>\n        <char id=\"104\" x=\"93\" y=\"39\" width=\"4\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"5\"/>\n        <char id=\"107\" x=\"98\" y=\"39\" width=\"4\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"5\"/>\n        <char id=\"55\" x=\"103\" y=\"39\" width=\"4\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"5\"/>\n        <char id=\"63\" x=\"108\" y=\"39\" width=\"4\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"5\"/>\n        <char id=\"191\" x=\"113\" y=\"39\" width=\"4\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"5\"/>\n        <char id=\"222\" x=\"118\" y=\"39\" width=\"4\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"5\"/>\n        <char id=\"223\" x=\"123\" y=\"39\" width=\"4\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"5\"/>\n        <char id=\"116\" x=\"1\" y=\"45\" width=\"3\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"4\"/>\n        <char id=\"60\" x=\"5\" y=\"45\" width=\"3\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"4\"/>\n        <char id=\"62\" x=\"9\" y=\"45\" width=\"3\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"4\"/>\n        <char id=\"170\" x=\"13\" y=\"45\" width=\"3\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"4\"/>\n        <char id=\"186\" x=\"17\" y=\"45\" width=\"3\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"4\"/>\n        <char id=\"239\" x=\"21\" y=\"45\" width=\"3\" height=\"5\" xoffset=\"-1\" yoffset=\"2\" xadvance=\"2\"/>\n        <char id=\"102\" x=\"25\" y=\"45\" width=\"2\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"3\"/>\n        <char id=\"49\" x=\"28\" y=\"45\" width=\"2\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"3\"/>\n        <char id=\"73\" x=\"31\" y=\"45\" width=\"1\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"2\"/>\n        <char id=\"105\" x=\"33\" y=\"45\" width=\"1\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"2\"/>\n        <char id=\"108\" x=\"35\" y=\"45\" width=\"1\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"2\"/>\n        <char id=\"33\" x=\"37\" y=\"45\" width=\"1\" height=\"5\" xoffset=\"1\" yoffset=\"2\" xadvance=\"3\"/>\n        <char id=\"161\" x=\"39\" y=\"45\" width=\"1\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"3\"/>\n        <char id=\"166\" x=\"41\" y=\"45\" width=\"1\" height=\"5\" xoffset=\"0\" yoffset=\"2\" xadvance=\"2\"/>\n        <char id=\"109\" x=\"43\" y=\"45\" width=\"7\" height=\"4\" xoffset=\"0\" yoffset=\"3\" xadvance=\"8\"/>\n        <char id=\"119\" x=\"51\" y=\"45\" width=\"7\" height=\"4\" xoffset=\"0\" yoffset=\"3\" xadvance=\"8\"/>\n        <char id=\"230\" x=\"59\" y=\"45\" width=\"7\" height=\"4\" xoffset=\"0\" yoffset=\"3\" xadvance=\"8\"/>\n        <char id=\"97\" x=\"67\" y=\"45\" width=\"4\" height=\"4\" xoffset=\"0\" yoffset=\"3\" xadvance=\"5\"/>\n        <char id=\"99\" x=\"72\" y=\"45\" width=\"4\" height=\"4\" xoffset=\"0\" yoffset=\"3\" xadvance=\"5\"/>\n        <char id=\"101\" x=\"77\" y=\"45\" width=\"4\" height=\"4\" xoffset=\"0\" yoffset=\"3\" xadvance=\"5\"/>\n        <char id=\"110\" x=\"82\" y=\"45\" width=\"4\" height=\"4\" xoffset=\"0\" yoffset=\"3\" xadvance=\"5\"/>\n        <char id=\"111\" x=\"87\" y=\"45\" width=\"4\" height=\"4\" xoffset=\"0\" yoffset=\"3\" xadvance=\"5\"/>\n        <char id=\"115\" x=\"92\" y=\"45\" width=\"4\" height=\"4\" xoffset=\"0\" yoffset=\"3\" xadvance=\"5\"/>\n        <char id=\"117\" x=\"97\" y=\"45\" width=\"4\" height=\"4\" xoffset=\"0\" yoffset=\"3\" xadvance=\"5\"/>\n        <char id=\"118\" x=\"102\" y=\"45\" width=\"4\" height=\"4\" xoffset=\"0\" yoffset=\"3\" xadvance=\"5\"/>\n        <char id=\"120\" x=\"107\" y=\"45\" width=\"4\" height=\"4\" xoffset=\"0\" yoffset=\"3\" xadvance=\"5\"/>\n        <char id=\"122\" x=\"112\" y=\"45\" width=\"4\" height=\"4\" xoffset=\"0\" yoffset=\"3\" xadvance=\"5\"/>\n        <char id=\"215\" x=\"117\" y=\"45\" width=\"4\" height=\"4\" xoffset=\"0\" yoffset=\"3\" xadvance=\"5\"/>\n        <char id=\"248\" x=\"122\" y=\"45\" width=\"4\" height=\"4\" xoffset=\"0\" yoffset=\"3\" xadvance=\"5\"/>\n        <char id=\"114\" x=\"1\" y=\"51\" width=\"3\" height=\"4\" xoffset=\"0\" yoffset=\"3\" xadvance=\"4\"/>\n        <char id=\"178\" x=\"5\" y=\"51\" width=\"3\" height=\"4\" xoffset=\"0\" yoffset=\"2\" xadvance=\"4\"/>\n        <char id=\"179\" x=\"9\" y=\"51\" width=\"3\" height=\"4\" xoffset=\"0\" yoffset=\"2\" xadvance=\"4\"/>\n        <char id=\"185\" x=\"13\" y=\"51\" width=\"1\" height=\"4\" xoffset=\"0\" yoffset=\"2\" xadvance=\"2\"/>\n        <char id=\"61\" x=\"15\" y=\"51\" width=\"5\" height=\"3\" xoffset=\"0\" yoffset=\"3\" xadvance=\"6\"/>\n        <char id=\"171\" x=\"21\" y=\"51\" width=\"5\" height=\"3\" xoffset=\"0\" yoffset=\"3\" xadvance=\"6\"/>\n        <char id=\"172\" x=\"27\" y=\"51\" width=\"5\" height=\"3\" xoffset=\"0\" yoffset=\"4\" xadvance=\"6\"/>\n        <char id=\"187\" x=\"33\" y=\"51\" width=\"5\" height=\"3\" xoffset=\"0\" yoffset=\"3\" xadvance=\"6\"/>\n        <char id=\"176\" x=\"39\" y=\"51\" width=\"3\" height=\"3\" xoffset=\"0\" yoffset=\"2\" xadvance=\"4\"/>\n        <char id=\"44\" x=\"43\" y=\"51\" width=\"2\" height=\"3\" xoffset=\"0\" yoffset=\"6\" xadvance=\"3\"/>\n        <char id=\"58\" x=\"46\" y=\"51\" width=\"1\" height=\"3\" xoffset=\"1\" yoffset=\"3\" xadvance=\"4\"/>\n        <char id=\"94\" x=\"48\" y=\"51\" width=\"4\" height=\"2\" xoffset=\"-1\" yoffset=\"2\" xadvance=\"4\"/>\n        <char id=\"126\" x=\"53\" y=\"51\" width=\"4\" height=\"2\" xoffset=\"0\" yoffset=\"3\" xadvance=\"5\"/>\n        <char id=\"34\" x=\"58\" y=\"51\" width=\"3\" height=\"2\" xoffset=\"0\" yoffset=\"2\" xadvance=\"4\"/>\n        <char id=\"96\" x=\"62\" y=\"51\" width=\"2\" height=\"2\" xoffset=\"0\" yoffset=\"2\" xadvance=\"3\"/>\n        <char id=\"180\" x=\"65\" y=\"51\" width=\"2\" height=\"2\" xoffset=\"0\" yoffset=\"2\" xadvance=\"3\"/>\n        <char id=\"184\" x=\"68\" y=\"51\" width=\"2\" height=\"2\" xoffset=\"0\" yoffset=\"7\" xadvance=\"3\"/>\n        <char id=\"39\" x=\"71\" y=\"51\" width=\"1\" height=\"2\" xoffset=\"0\" yoffset=\"2\" xadvance=\"2\"/>\n        <char id=\"95\" x=\"73\" y=\"51\" width=\"5\" height=\"1\" xoffset=\"0\" yoffset=\"7\" xadvance=\"6\"/>\n        <char id=\"45\" x=\"79\" y=\"51\" width=\"4\" height=\"1\" xoffset=\"0\" yoffset=\"4\" xadvance=\"5\"/>\n        <char id=\"173\" x=\"84\" y=\"51\" width=\"4\" height=\"1\" xoffset=\"0\" yoffset=\"4\" xadvance=\"5\"/>\n        <char id=\"168\" x=\"89\" y=\"51\" width=\"3\" height=\"1\" xoffset=\"1\" yoffset=\"2\" xadvance=\"5\"/>\n        <char id=\"175\" x=\"93\" y=\"51\" width=\"3\" height=\"1\" xoffset=\"0\" yoffset=\"2\" xadvance=\"4\"/>\n        <char id=\"46\" x=\"97\" y=\"51\" width=\"1\" height=\"1\" xoffset=\"0\" yoffset=\"6\" xadvance=\"2\"/>\n        <char id=\"183\" x=\"99\" y=\"51\" width=\"1\" height=\"1\" xoffset=\"0\" yoffset=\"4\" xadvance=\"2\"/>\n        <char id=\"32\" x=\"6\" y=\"56\" width=\"0\" height=\"0\" xoffset=\"0\" yoffset=\"127\" xadvance=\"3\"/>\n      </chars>\n    </font>");
starling_text_TextField.BITMAP_FONT_DATA_NAME = "starling.display.TextField.BitmapFonts";
starling_text_TextField.sDefaultTextureFormat = 1;
starling_text_TextField.sHelperMatrix = new openfl_geom_Matrix();
starling_text_TextField.sNativeTextField = new openfl_text_TextField();
starling_text_TextField.sStringCache = new haxe_ds_StringMap();
starling_text_TextFieldAutoSize.NONE = "none";
starling_text_TextFieldAutoSize.HORIZONTAL = "horizontal";
starling_text_TextFieldAutoSize.VERTICAL = "vertical";
starling_text_TextFieldAutoSize.BOTH_DIRECTIONS = "bothDirections";
starling_textures_ConcreteTexture.TEXTURE_READY = "textureReady";
starling_textures_ConcreteTexture.sOrigin = new openfl_geom_Point();
starling_textures_SubTexture.sTexCoords = new openfl_geom_Point();
starling_textures_SubTexture.sMatrix = new openfl_geom_Matrix();
starling_textures_RenderTexture.CONTEXT_POT_SUPPORT_KEY = "RenderTexture.supportsNonPotDimensions";
starling_textures_RenderTexture.PMA = true;
starling_textures_RenderTexture.sClipRect = new openfl_geom_Rectangle();
starling_textures_RenderTexture.optimizePersistentBuffers = false;
starling_textures_TextureAtlas.sNames = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
starling_textures_TextureSmoothing.NONE = "none";
starling_textures_TextureSmoothing.BILINEAR = "bilinear";
starling_textures_TextureSmoothing.TRILINEAR = "trilinear";
starling_utils_AssetManager.HTTP_RESPONSE_STATUS = "httpResponseStatus";
starling_utils_AssetManager.sNames = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
starling_utils_AssetManager.NAME_REGEX = new EReg("([^\\?/\\\\]+?)(?:\\.([\\w\\-]+))?(?:\\?.*)?$","");
starling_utils_Color.WHITE = 16777215;
starling_utils_Color.SILVER = 12632256;
starling_utils_Color.GRAY = 8421504;
starling_utils_Color.BLACK = 0;
starling_utils_Color.RED = 16711680;
starling_utils_Color.MAROON = 8388608;
starling_utils_Color.YELLOW = 16776960;
starling_utils_Color.OLIVE = 8421376;
starling_utils_Color.LIME = 65280;
starling_utils_Color.GREEN = 32768;
starling_utils_Color.AQUA = 65535;
starling_utils_Color.TEAL = 32896;
starling_utils_Color.BLUE = 255;
starling_utils_Color.NAVY = 128;
starling_utils_Color.FUCHSIA = 16711935;
starling_utils_Color.PURPLE = 8388736;
starling_utils_HAlign.LEFT = "left";
starling_utils_HAlign.CENTER = "center";
starling_utils_HAlign.RIGHT = "right";
starling_utils_MathUtil.TWO_PI = Math.PI * 2.0;
starling_utils_MatrixUtil.sRawData = (function($this) {
	var $r;
	var a = [1.0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1];
	var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	{
		var _g = 0;
		var _g1 = a.length;
		while(_g < _g1) {
			var i = _g++;
			vector.data.set(i,a[i]);
		}
	}
	$r = vector;
	return $r;
}(this));
starling_utils_MatrixUtil.sRawData2 = (function($this) {
	var $r;
	var a = [0.0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
	var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	{
		var _g = 0;
		var _g1 = a.length;
		while(_g < _g1) {
			var i = _g++;
			vector.data.set(i,a[i]);
		}
	}
	$r = vector;
	return $r;
}(this));
starling_utils_Max.MAX_VALUE = 1.79e+308;
starling_utils_Max.MIN_VALUE = 5e-324;
starling_utils_Max.INT_MAX_VALUE = 2147483647;
starling_utils_Max.INT_MIN_VALUE = -2147483647;
starling_utils_Max.UINT_MAX_VALUE = -1;
starling_utils_RectangleUtil.sHelperPoint = new openfl_geom_Point();
starling_utils_RectangleUtil.sPositions = [new openfl_geom_Point(0,0),new openfl_geom_Point(1,0),new openfl_geom_Point(0,1),new openfl_geom_Point(1,1)];
starling_utils_RectangleUtil.MAX_VALUE = 1.79e+308;
starling_utils_RectangleUtil.MIN_VALUE = 5e-324;
starling_utils_ScaleMode.NONE = "none";
starling_utils_ScaleMode.NO_BORDER = "noBorder";
starling_utils_ScaleMode.SHOW_ALL = "showAll";
starling_utils_SystemUtil.sInitialized = false;
starling_utils_SystemUtil.sApplicationActive = true;
starling_utils_SystemUtil.sWaitingCalls = [];
starling_utils_SystemUtil.sSupportsDepthAndStencil = true;
starling_utils_VAlign.TOP = "top";
starling_utils_VAlign.CENTER = "center";
starling_utils_VAlign.BOTTOM = "bottom";
Main.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);

//# sourceMappingURL=kha.js.map